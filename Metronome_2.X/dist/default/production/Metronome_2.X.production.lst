

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Aug 16 12:47:00 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	swtext2,local,class=CONST,delta=2
    22                           	psect	swtext3,local,class=CONST,delta=2
    23                           	psect	swtext4,local,class=CONST,delta=2
    24                           	psect	swtext5,local,class=CONST,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000D                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0013                     	;# 
    58  0014                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  0091                     	;# 
    73  0092                     	;# 
    74  0093                     	;# 
    75  0094                     	;# 
    76  0095                     	;# 
    77  0096                     	;# 
    78  0097                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009B                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  0111                     	;# 
    90  0112                     	;# 
    91  0113                     	;# 
    92  0114                     	;# 
    93  0115                     	;# 
    94  0116                     	;# 
    95  0117                     	;# 
    96  0118                     	;# 
    97  0119                     	;# 
    98  011A                     	;# 
    99  011B                     	;# 
   100  011D                     	;# 
   101  011E                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0191                     	;# 
   105  0191                     	;# 
   106  0192                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0199                     	;# 
   114  019A                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019C                     	;# 
   120  019C                     	;# 
   121  019D                     	;# 
   122  019E                     	;# 
   123  019F                     	;# 
   124  020C                     	;# 
   125  020D                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0219                     	;# 
   142  021A                     	;# 
   143  021B                     	;# 
   144  021C                     	;# 
   145  021D                     	;# 
   146  021E                     	;# 
   147  021F                     	;# 
   148  0291                     	;# 
   149  0291                     	;# 
   150  0292                     	;# 
   151  0293                     	;# 
   152  0294                     	;# 
   153  0295                     	;# 
   154  0295                     	;# 
   155  0296                     	;# 
   156  0298                     	;# 
   157  0298                     	;# 
   158  0299                     	;# 
   159  029A                     	;# 
   160  029B                     	;# 
   161  029C                     	;# 
   162  029C                     	;# 
   163  029D                     	;# 
   164  029E                     	;# 
   165  029E                     	;# 
   166  0311                     	;# 
   167  0311                     	;# 
   168  0312                     	;# 
   169  0313                     	;# 
   170  0318                     	;# 
   171  0318                     	;# 
   172  0319                     	;# 
   173  031A                     	;# 
   174  0394                     	;# 
   175  0395                     	;# 
   176  0396                     	;# 
   177  039A                     	;# 
   178  039C                     	;# 
   179  039D                     	;# 
   180  039E                     	;# 
   181  039F                     	;# 
   182  0415                     	;# 
   183  0416                     	;# 
   184  0417                     	;# 
   185  041C                     	;# 
   186  041D                     	;# 
   187  041E                     	;# 
   188  0FE4                     	;# 
   189  0FE5                     	;# 
   190  0FE6                     	;# 
   191  0FE7                     	;# 
   192  0FE8                     	;# 
   193  0FE9                     	;# 
   194  0FEA                     	;# 
   195  0FEB                     	;# 
   196  0FED                     	;# 
   197  0FEE                     	;# 
   198  0FEF                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0D7F                     __pidataBANK0:	
   202                           
   203                           ;initializer for _configration_
   204  0D7F  3400               	retlw	0
   205  0D80  3400               	retlw	0
   206  0D81  3478               	retlw	120
   207  0D82  3400               	retlw	0
   208  0D83  3404               	retlw	4
   209  0D84  341E               	retlw	30
   210  0D85  341E               	retlw	30
   211  0D86  34F9               	retlw	249
   212  0D87  343E               	retlw	62
   213  0D88  3452               	retlw	82
   214  0D89  3401               	retlw	1
   215  0D8A  3400               	retlw	0
   216  0D8B  3400               	retlw	0
   217                           
   218                           ;initializer for _confirmationLoad_
   219  0D8C  3400               	retlw	0
   220  0D8D  340A               	retlw	10
   221  0D8E  3402               	retlw	2
   222  0D8F  342F               	retlw	low (STR_32| (0+32768))
   223  0D90  3489               	retlw	high (STR_32| (0+32768))
   224                           
   225                           ;initializer for _menuInfoDuration_
   226  0D91  3400               	retlw	0
   227  0D92  3400               	retlw	0
   228  0D93  3402               	retlw	2
   229  0D94  34E0               	retlw	low (_MESSAGE_MENU_ITEM_DURATION| 0)
   230  0D95  3400               	retlw	high (_MESSAGE_MENU_ITEM_DURATION| 0)
   231                           
   232                           ;initializer for _menuInfoInformation_
   233  0D96  3400               	retlw	0
   234  0D97  3400               	retlw	0
   235  0D98  3402               	retlw	2
   236  0D99  3400               	retlw	0
   237  0D9A  3400               	retlw	0
   238                           
   239                           ;initializer for _menuInfoMain_
   240  0D9B  3400               	retlw	0
   241  0D9C  3400               	retlw	0
   242  0D9D  3409               	retlw	9
   243  0D9E  3454               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| (0+256))
   244  0D9F  3401               	retlw	high (_MESSAGE_MENU_ITEM_MAIN| (0+256))
   245                           
   246                           ;initializer for _menuInfoTone_
   247  0DA0  3400               	retlw	0
   248  0DA1  3400               	retlw	0
   249  0DA2  3403               	retlw	3
   250  0DA3  34A8               	retlw	low (_MESSAGE_MENU_ITEM_TONE| 0)
   251  0DA4  3400               	retlw	high (_MESSAGE_MENU_ITEM_TONE| 0)
   252                           
   253                           	psect	idataBANK1
   254  0E4D                     __pidataBANK1:	
   255                           
   256                           ;initializer for _MESSAGE_INFORMATION
   257  0E4D  3420               	retlw	low (STR_18| (0+32768))
   258  0E4E  3489               	retlw	high (STR_18| (0+32768))
   259  0E4F  34A9               	retlw	low (STR_19| (0+32768))
   260  0E50  3488               	retlw	high (STR_19| (0+32768))
   261  0E51  34B4               	retlw	low (STR_20| (0+32768))
   262  0E52  3488               	retlw	high (STR_20| (0+32768))
   263  0E53  349E               	retlw	low (STR_21| (0+32768))
   264  0E54  3488               	retlw	high (STR_21| (0+32768))
   265                           
   266                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   267  0E55  3406               	retlw	low (STR_1| (0+32768))
   268  0E56  3489               	retlw	high (STR_1| (0+32768))
   269  0E57  344B               	retlw	low (STR_12| (0+32768))
   270  0E58  3489               	retlw	high (STR_12| (0+32768))
   271  0E59  3451               	retlw	low (STR_13| (0+32768))
   272  0E5A  3489               	retlw	high (STR_13| (0+32768))
   273  0E5B  3457               	retlw	low (STR_14| (0+32768))
   274  0E5C  3489               	retlw	high (STR_14| (0+32768))
   275                           
   276                           ;initializer for _valueInfoBeatCount_
   277  0E5D  3400               	retlw	0
   278  0E5E  3402               	retlw	2
   279  0E5F  3440               	retlw	64
   280  0E60  3400               	retlw	0
   281  0E61  3452               	retlw	low (STR_37| (0+32768))
   282  0E62  3488               	retlw	high (STR_37| (0+32768))
   283  0E63  34BF               	retlw	low (STR_2| (0+32768))
   284  0E64  3488               	retlw	high (STR_2| (0+32768))
   285                           
   286                           ;initializer for _valueInfoDurationClick_
   287  0E65  3400               	retlw	0
   288  0E66  3404               	retlw	4
   289  0E67  34FF               	retlw	255
   290  0E68  3400               	retlw	0
   291  0E69  3449               	retlw	low ((STR_4+5)| (0+32768))
   292  0E6A  3488               	retlw	high ((STR_4+5)| (0+32768))
   293  0E6B  3463               	retlw	low (STR_46| (0+32768))
   294  0E6C  3489               	retlw	high (STR_46| (0+32768))
   295                           
   296                           ;initializer for _valueInfoDurationKey_
   297  0E6D  3400               	retlw	0
   298  0E6E  3404               	retlw	4
   299  0E6F  34FF               	retlw	255
   300  0E70  3400               	retlw	0
   301  0E71  3449               	retlw	low ((STR_4+5)| (0+32768))
   302  0E72  3488               	retlw	high ((STR_4+5)| (0+32768))
   303  0E73  340F               	retlw	low (STR_48| (0+32768))
   304  0E74  3489               	retlw	high (STR_48| (0+32768))
   305                           
   306                           ;initializer for _valueInfoOscillatorTune_
   307  0E75  3400               	retlw	0
   308  0E76  3402               	retlw	2
   309  0E77  341E               	retlw	30
   310  0E78  34E2               	retlw	226
   311  0E79  3452               	retlw	low (STR_37| (0+32768))
   312  0E7A  3488               	retlw	high (STR_37| (0+32768))
   313  0E7B  34E8               	retlw	low (STR_52| (0+32768))
   314  0E7C  3488               	retlw	high (STR_52| (0+32768))
   315                           
   316                           ;initializer for _valueInfoPulseWidth_
   317  0E7D  3400               	retlw	0
   318  0E7E  3402               	retlw	2
   319  0E7F  3407               	retlw	7
   320  0E80  3401               	retlw	1
   321  0E81  3452               	retlw	low (STR_37| (0+32768))
   322  0E82  3488               	retlw	high (STR_37| (0+32768))
   323  0E83  3492               	retlw	low (STR_50| (0+32768))
   324  0E84  3488               	retlw	high (STR_50| (0+32768))
   325                           
   326                           ;initializer for _valueInfoTempo_
   327  0E85  3400               	retlw	0
   328  0E86  3401               	retlw	1
   329  0E87  3400               	retlw	0
   330  0E88  3400               	retlw	0
   331  0E89  34D4               	retlw	low (STR_22| (0+32768))
   332  0E8A  3488               	retlw	high (STR_22| (0+32768))
   333  0E8B  3469               	retlw	low (STR_36| (0+32768))
   334  0E8C  3489               	retlw	high (STR_36| (0+32768))
   335                           
   336                           ;initializer for _MESSAGE_MENU_ITEM_DURATION
   337  0E8D  3406               	retlw	low (STR_1| (0+32768))
   338  0E8E  3489               	retlw	high (STR_1| (0+32768))
   339  0E8F  3486               	retlw	low (STR_16| (0+32768))
   340  0E90  3488               	retlw	high (STR_16| (0+32768))
   341  0E91  34CA               	retlw	low (STR_17| (0+32768))
   342  0E92  3488               	retlw	high (STR_17| (0+32768))
   343                           
   344                           ;initializer for _ConfirmationSave_
   345  0E93  3400               	retlw	0
   346  0E94  3409               	retlw	9
   347  0E95  3402               	retlw	2
   348  0E96  3436               	retlw	low (STR_33| (0+32768))
   349  0E97  3489               	retlw	high (STR_33| (0+32768))
   350                           
   351                           ;initializer for _confirmationReset_
   352  0E98  3400               	retlw	0
   353  0E99  340C               	retlw	12
   354  0E9A  3402               	retlw	2
   355  0E9B  3418               	retlw	low (STR_34| (0+32768))
   356  0E9C  3489               	retlw	high (STR_34| (0+32768))
   357                           
   358                           	psect	idataBANK2
   359  0E05                     __pidataBANK2:	
   360                           
   361                           ;initializer for _informationValueBuffer
   362  0E05  3420               	retlw	32
   363  0E06  342D               	retlw	45
   364  0E07  342D               	retlw	45
   365  0E08  342E               	retlw	46
   366  0E09  342D               	retlw	45
   367  0E0A  342D               	retlw	45
   368  0E0B  3400               	retlw	0
   369  0E0C  3420               	retlw	32
   370  0E0D  3420               	retlw	32
   371  0E0E  3430               	retlw	48
   372  0E0F  3478               	retlw	120
   373  0E10  342D               	retlw	45
   374  0E11  342D               	retlw	45
   375  0E12  3400               	retlw	0
   376  0E13  3420               	retlw	32
   377  0E14  3420               	retlw	32
   378  0E15  3430               	retlw	48
   379  0E16  3478               	retlw	120
   380  0E17  342D               	retlw	45
   381  0E18  342D               	retlw	45
   382  0E19  3400               	retlw	0
   383  0E1A  3420               	retlw	32
   384  0E1B  3420               	retlw	32
   385  0E1C  3430               	retlw	48
   386  0E1D  3478               	retlw	120
   387  0E1E  3430               	retlw	48
   388  0E1F  3430               	retlw	48
   389  0E20  3400               	retlw	0
   390                           
   391                           ;initializer for _valueInfoTone_
   392  0E21  3400               	retlw	0
   393  0E22  3403               	retlw	3
   394  0E23  34FF               	retlw	255
   395  0E24  3400               	retlw	0
   396  0E25  34E3               	retlw	low ((STR_3+5)| (0+32768))
   397  0E26  3488               	retlw	high ((STR_3+5)| (0+32768))
   398  0E27  344B               	retlw	low (STR_12| (0+32768))
   399  0E28  3489               	retlw	high (STR_12| (0+32768))
   400  0E29  3400               	retlw	0
   401  0E2A  3403               	retlw	3
   402  0E2B  34FF               	retlw	255
   403  0E2C  3400               	retlw	0
   404  0E2D  34E3               	retlw	low ((STR_3+5)| (0+32768))
   405  0E2E  3488               	retlw	high ((STR_3+5)| (0+32768))
   406  0E2F  3451               	retlw	low (STR_13| (0+32768))
   407  0E30  3489               	retlw	high (STR_13| (0+32768))
   408  0E31  3400               	retlw	0
   409  0E32  3403               	retlw	3
   410  0E33  34FF               	retlw	255
   411  0E34  3400               	retlw	0
   412  0E35  34E3               	retlw	low ((STR_3+5)| (0+32768))
   413  0E36  3488               	retlw	high ((STR_3+5)| (0+32768))
   414  0E37  3457               	retlw	low (STR_14| (0+32768))
   415  0E38  3489               	retlw	high (STR_14| (0+32768))
   416                           
   417                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   418  0E39  3406               	retlw	low (STR_1| (0+32768))
   419  0E3A  3489               	retlw	high (STR_1| (0+32768))
   420  0E3B  34BF               	retlw	low (STR_2| (0+32768))
   421  0E3C  3488               	retlw	high (STR_2| (0+32768))
   422  0E3D  34DE               	retlw	low (STR_3| (0+32768))
   423  0E3E  3488               	retlw	high (STR_3| (0+32768))
   424  0E3F  3444               	retlw	low (STR_4| (0+32768))
   425  0E40  3488               	retlw	high (STR_4| (0+32768))
   426  0E41  346D               	retlw	low (STR_5| (0+32768))
   427  0E42  3488               	retlw	high (STR_5| (0+32768))
   428  0E43  34F2               	retlw	low (STR_6| (0+32768))
   429  0E44  3488               	retlw	high (STR_6| (0+32768))
   430  0E45  3475               	retlw	low (STR_7| (0+32768))
   431  0E46  3489               	retlw	high (STR_7| (0+32768))
   432  0E47  347A               	retlw	low (STR_8| (0+32768))
   433  0E48  3489               	retlw	high (STR_8| (0+32768))
   434  0E49  347F               	retlw	low (STR_9| (0+32768))
   435  0E4A  3489               	retlw	high (STR_9| (0+32768))
   436  0E4B  346F               	retlw	low (STR_10| (0+32768))
   437  0E4C  3489               	retlw	high (STR_10| (0+32768))
   438                           
   439                           	psect	stringtext
   440  0800                     __pstringtext:	
   441  0800                     _MESSAGE:	
   442  0800  34D4               	retlw	low (STR_22| (0+32768))
   443  0801  3488               	retlw	high (STR_22| (0+32768))
   444  0802  3428               	retlw	low (STR_23| (0+32768))
   445  0803  3489               	retlw	high (STR_23| (0+32768))
   446  0804  3484               	retlw	low (STR_24| (0+32768))
   447  0805  3489               	retlw	high (STR_24| (0+32768))
   448  0806  3488               	retlw	low (STR_25| (0+32768))
   449  0807  3489               	retlw	high (STR_25| (0+32768))
   450  0808  3444               	retlw	low (STR_26| (0+32768))
   451  0809  3489               	retlw	high (STR_26| (0+32768))
   452  080A  345D               	retlw	low (STR_27| (0+32768))
   453  080B  3489               	retlw	high (STR_27| (0+32768))
   454  080C  347A               	retlw	low (STR_28| (0+32768))
   455  080D  3488               	retlw	high (STR_28| (0+32768))
   456  080E  3460               	retlw	low (STR_29| (0+32768))
   457  080F  3488               	retlw	high (STR_29| (0+32768))
   458  0810  343D               	retlw	low (STR_30| (0+32768))
   459  0811  3489               	retlw	high (STR_30| (0+32768))
   460  0812  34FC               	retlw	low (STR_31| (0+32768))
   461  0813  3488               	retlw	high (STR_31| (0+32768))
   462  0814                     __end_of_MESSAGE:	
   463  0814                     _HEX_TABLE:	
   464  0814  3430               	retlw	48
   465  0815  3431               	retlw	49
   466  0816  3432               	retlw	50
   467  0817  3433               	retlw	51
   468  0818  3434               	retlw	52
   469  0819  3435               	retlw	53
   470  081A  3436               	retlw	54
   471  081B  3437               	retlw	55
   472  081C  3438               	retlw	56
   473  081D  3439               	retlw	57
   474  081E  3441               	retlw	65
   475  081F  3442               	retlw	66
   476  0820  3443               	retlw	67
   477  0821  3444               	retlw	68
   478  0822  3445               	retlw	69
   479  0823  3446               	retlw	70
   480  0824                     __end_of_HEX_TABLE:	
   481  0824                     _CHAR_CODE:	
   482  0824  3400               	retlw	0
   483  0825  3401               	retlw	1
   484  0826  3402               	retlw	2
   485  0827                     __end_of_CHAR_CODE:	
   486  0827                     main@COMPARE_UNITS:	
   487  0827  3464               	retlw	100
   488  0828  340A               	retlw	10
   489  0829  3401               	retlw	1
   490  082A                     __end_ofmain@COMPARE_UNITS:	
   491  082A                     _PARALLEL_LCD_ROW_SELECT:	
   492  082A  3480               	retlw	128
   493  082B  34C0               	retlw	192
   494  082C                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   495  082C                     _BITMAP:	
   496  082C  3410               	retlw	16
   497  082D  3418               	retlw	24
   498  082E  341C               	retlw	28
   499  082F  341E               	retlw	30
   500  0830  341C               	retlw	28
   501  0831  3418               	retlw	24
   502  0832  3410               	retlw	16
   503  0833  3400               	retlw	0
   504  0834  3400               	retlw	0
   505  0835  3404               	retlw	4
   506  0836  340E               	retlw	14
   507  0837  341F               	retlw	31
   508  0838  3400               	retlw	0
   509  0839  3400               	retlw	0
   510  083A  3400               	retlw	0
   511  083B  3400               	retlw	0
   512  083C  3400               	retlw	0
   513  083D  3400               	retlw	0
   514  083E  3400               	retlw	0
   515  083F  3400               	retlw	0
   516  0840  341F               	retlw	31
   517  0841  340E               	retlw	14
   518  0842  3404               	retlw	4
   519  0843  3400               	retlw	0
   520  0844                     __end_of_BITMAP:	
   521  0016                     _TMR1	set	22
   522  000B                     _INTCONbits	set	11
   523  0011                     _PIR1bits	set	17
   524  0012                     _PIR2bits	set	18
   525  0013                     _PIR3bits	set	19
   526  000C                     _PORTA	set	12
   527  001B                     _PR2	set	27
   528  0018                     _T1CONbits	set	24
   529  001C                     _T2CONbits	set	28
   530  0015                     _TMR0	set	21
   531  001A                     _TMR2	set	26
   532  0095                     _OPTION_REGbits	set	149
   533  0099                     _OSCCONbits	set	153
   534  0098                     _OSCTUNE	set	152
   535  0098                     _OSCTUNEbits	set	152
   536  0091                     _PIE1bits	set	145
   537  0093                     _PIE3bits	set	147
   538  008C                     _TRISA	set	140
   539  008D                     _TRISB	set	141
   540  0097                     _WDTCONbits	set	151
   541  010C                     _LATAbits	set	268
   542  010D                     _LATB	set	269
   543  018C                     _ANSELA	set	396
   544  018D                     _ANSELB	set	397
   545  0192                     _EEADRH	set	402
   546  0191                     _EEADRL	set	401
   547  0195                     _EECON1bits	set	405
   548  0196                     _EECON2	set	406
   549  0194                     _EEDATH	set	404
   550  0193                     _EEDATL	set	403
   551  0293                     _CCP1CONbits	set	659
   552  029A                     _CCP2CONbits	set	666
   553  029E                     _CCPTMRS	set	670
   554  029E                     _CCPTMRSbits	set	670
   555  0313                     _CCP3CONbits	set	787
   556  031A                     _CCP4CONbits	set	794
   557  0319                     _CCPR4H	set	793
   558  0318                     _CCPR4L	set	792
   559  0416                     _PR4	set	1046
   560  041D                     _PR6	set	1053
   561  0417                     _T4CONbits	set	1047
   562  041E                     _T6CONbits	set	1054
   563  0415                     _TMR4	set	1045
   564  041C                     _TMR6	set	1052
   565  0844                     STR_4:	
   566  0844  3441               	retlw	65	;'A'
   567  0845  3464               	retlw	100	;'d'
   568  0846  346A               	retlw	106	;'j'
   569  0847  342E               	retlw	46	;'.'
   570  0848  3420               	retlw	32	;' '
   571  0849  3444               	retlw	68	;'D'
   572  084A  3475               	retlw	117	;'u'
   573  084B  3472               	retlw	114	;'r'
   574  084C  3461               	retlw	97	;'a'
   575  084D  3474               	retlw	116	;'t'
   576  084E  3469               	retlw	105	;'i'
   577  084F  346F               	retlw	111	;'o'
   578  0850  346E               	retlw	110	;'n'
   579  0851  3400               	retlw	0
   580  0852                     STR_37:	
   581  0852  3443               	retlw	67	;'C'
   582  0853  346F               	retlw	111	;'o'
   583  0854  346E               	retlw	110	;'n'
   584  0855  3466               	retlw	102	;'f'
   585  0856  3469               	retlw	105	;'i'
   586  0857  3467               	retlw	103	;'g'
   587  0858  3475               	retlw	117	;'u'
   588  0859  3472               	retlw	114	;'r'
   589  085A  3461               	retlw	97	;'a'
   590  085B  3474               	retlw	116	;'t'
   591  085C  3469               	retlw	105	;'i'
   592  085D  346F               	retlw	111	;'o'
   593  085E  346E               	retlw	110	;'n'
   594  085F  3400               	retlw	0
   595  0860                     STR_29:	
   596  0860  3445               	retlw	69	;'E'
   597  0861  3472               	retlw	114	;'r'
   598  0862  3472               	retlw	114	;'r'
   599  0863  346F               	retlw	111	;'o'
   600  0864  3472               	retlw	114	;'r'
   601  0865  3420               	retlw	32	;' '
   602  0866  346F               	retlw	111	;'o'
   603  0867  346E               	retlw	110	;'n'
   604  0868  3420               	retlw	32	;' '
   605  0869  342E               	retlw	46	;'.'
   606  086A  342E               	retlw	46	;'.'
   607  086B  342E               	retlw	46	;'.'
   608  086C  3400               	retlw	0
   609  086D                     STR_5:	
   610  086D  3441               	retlw	65	;'A'
   611  086E  3464               	retlw	100	;'d'
   612  086F  346A               	retlw	106	;'j'
   613  0870  342E               	retlw	46	;'.'
   614  0871  3420               	retlw	32	;' '
   615  0872  3450               	retlw	80	;'P'
   616  0873  342D               	retlw	45	;'-'
   617  0874  3457               	retlw	87	;'W'
   618  0875  3469               	retlw	105	;'i'
   619  0876  3464               	retlw	100	;'d'
   620  0877  3474               	retlw	116	;'t'
   621  0878  3468               	retlw	104	;'h'
   622  0879  3400               	retlw	0
   623  087A                     STR_28:	
   624  087A  3449               	retlw	73	;'I'
   625  087B  346E               	retlw	110	;'n'
   626  087C  3469               	retlw	105	;'i'
   627  087D  3474               	retlw	116	;'t'
   628  087E  3469               	retlw	105	;'i'
   629  087F  3461               	retlw	97	;'a'
   630  0880  346C               	retlw	108	;'l'
   631  0881  3469               	retlw	105	;'i'
   632  0882  347A               	retlw	122	;'z'
   633  0883  3465               	retlw	101	;'e'
   634  0884  3464               	retlw	100	;'d'
   635  0885  3400               	retlw	0
   636  0886                     STR_16:	
   637  0886  3443               	retlw	67	;'C'
   638  0887  346C               	retlw	108	;'l'
   639  0888  3469               	retlw	105	;'i'
   640  0889  3463               	retlw	99	;'c'
   641  088A  346B               	retlw	107	;'k'
   642  088B  3420               	retlw	32	;' '
   643  088C  3453               	retlw	83	;'S'
   644  088D  346F               	retlw	111	;'o'
   645  088E  3475               	retlw	117	;'u'
   646  088F  346E               	retlw	110	;'n'
   647  0890  3464               	retlw	100	;'d'
   648  0891  3400               	retlw	0
   649  0892                     STR_50:	
   650  0892  3450               	retlw	80	;'P'
   651  0893  3475               	retlw	117	;'u'
   652  0894  346C               	retlw	108	;'l'
   653  0895  3473               	retlw	115	;'s'
   654  0896  3465               	retlw	101	;'e'
   655  0897  3420               	retlw	32	;' '
   656  0898  3457               	retlw	87	;'W'
   657  0899  3469               	retlw	105	;'i'
   658  089A  3464               	retlw	100	;'d'
   659  089B  3474               	retlw	116	;'t'
   660  089C  3468               	retlw	104	;'h'
   661  089D  3400               	retlw	0
   662  089E                     STR_21:	
   663  089E  3445               	retlw	69	;'E'
   664  089F  3472               	retlw	114	;'r'
   665  08A0  3472               	retlw	114	;'r'
   666  08A1  346F               	retlw	111	;'o'
   667  08A2  3472               	retlw	114	;'r'
   668  08A3  3420               	retlw	32	;' '
   669  08A4  3443               	retlw	67	;'C'
   670  08A5  346F               	retlw	111	;'o'
   671  08A6  3464               	retlw	100	;'d'
   672  08A7  3465               	retlw	101	;'e'
   673  08A8  3400               	retlw	0
   674  08A9                     STR_19:	
   675  08A9  3452               	retlw	82	;'R'
   676  08AA  344F               	retlw	79	;'O'
   677  08AB  344D               	retlw	77	;'M'
   678  08AC  3420               	retlw	32	;' '
   679  08AD  344F               	retlw	79	;'O'
   680  08AE  3466               	retlw	102	;'f'
   681  08AF  3466               	retlw	102	;'f'
   682  08B0  3473               	retlw	115	;'s'
   683  08B1  3465               	retlw	101	;'e'
   684  08B2  3474               	retlw	116	;'t'
   685  08B3  3400               	retlw	0
   686  08B4                     STR_20:	
   687  08B4  3453               	retlw	83	;'S'
   688  08B5  3461               	retlw	97	;'a'
   689  08B6  3476               	retlw	118	;'v'
   690  08B7  3465               	retlw	101	;'e'
   691  08B8  3420               	retlw	32	;' '
   692  08B9  3443               	retlw	67	;'C'
   693  08BA  346F               	retlw	111	;'o'
   694  08BB  3475               	retlw	117	;'u'
   695  08BC  346E               	retlw	110	;'n'
   696  08BD  3474               	retlw	116	;'t'
   697  08BE  3400               	retlw	0
   698  08BF                     STR_2:	
   699  08BF  3442               	retlw	66	;'B'
   700  08C0  3465               	retlw	101	;'e'
   701  08C1  3461               	retlw	97	;'a'
   702  08C2  3474               	retlw	116	;'t'
   703  08C3  3420               	retlw	32	;' '
   704  08C4  3443               	retlw	67	;'C'
   705  08C5  346F               	retlw	111	;'o'
   706  08C6  3475               	retlw	117	;'u'
   707  08C7  346E               	retlw	110	;'n'
   708  08C8  3474               	retlw	116	;'t'
   709  08C9  3400               	retlw	0
   710  08CA                     STR_17:	
   711  08CA  344B               	retlw	75	;'K'
   712  08CB  3465               	retlw	101	;'e'
   713  08CC  3479               	retlw	121	;'y'
   714  08CD  3420               	retlw	32	;' '
   715  08CE  3453               	retlw	83	;'S'
   716  08CF  346F               	retlw	111	;'o'
   717  08D0  3475               	retlw	117	;'u'
   718  08D1  346E               	retlw	110	;'n'
   719  08D2  3464               	retlw	100	;'d'
   720  08D3  3400               	retlw	0
   721  08D4                     STR_22:	
   722  08D4  344D               	retlw	77	;'M'
   723  08D5  3465               	retlw	101	;'e'
   724  08D6  3474               	retlw	116	;'t'
   725  08D7  3472               	retlw	114	;'r'
   726  08D8  346F               	retlw	111	;'o'
   727  08D9  346E               	retlw	110	;'n'
   728  08DA  346F               	retlw	111	;'o'
   729  08DB  346D               	retlw	109	;'m'
   730  08DC  3465               	retlw	101	;'e'
   731  08DD  3400               	retlw	0
   732  08DE                     STR_3:	
   733  08DE  3441               	retlw	65	;'A'
   734  08DF  3464               	retlw	100	;'d'
   735  08E0  346A               	retlw	106	;'j'
   736  08E1  342E               	retlw	46	;'.'
   737  08E2  3420               	retlw	32	;' '
   738  08E3  3454               	retlw	84	;'T'
   739  08E4  346F               	retlw	111	;'o'
   740  08E5  346E               	retlw	110	;'n'
   741  08E6  3465               	retlw	101	;'e'
   742  08E7  3400               	retlw	0
   743  08E8                     STR_52:	
   744  08E8  344F               	retlw	79	;'O'
   745  08E9  3473               	retlw	115	;'s'
   746  08EA  3463               	retlw	99	;'c'
   747  08EB  342E               	retlw	46	;'.'
   748  08EC  3420               	retlw	32	;' '
   749  08ED  3454               	retlw	84	;'T'
   750  08EE  3475               	retlw	117	;'u'
   751  08EF  346E               	retlw	110	;'n'
   752  08F0  3465               	retlw	101	;'e'
   753  08F1  3400               	retlw	0
   754  08F2                     STR_6:	
   755  08F2  3441               	retlw	65	;'A'
   756  08F3  3464               	retlw	100	;'d'
   757  08F4  346A               	retlw	106	;'j'
   758  08F5  342E               	retlw	46	;'.'
   759  08F6  3420               	retlw	32	;' '
   760  08F7  3454               	retlw	84	;'T'
   761  08F8  3475               	retlw	117	;'u'
   762  08F9  346E               	retlw	110	;'n'
   763  08FA  3465               	retlw	101	;'e'
   764  08FB  3400               	retlw	0
   765  08FC                     STR_31:	
   766  08FC  3449               	retlw	73	;'I'
   767  08FD  346E               	retlw	110	;'n'
   768  08FE  3474               	retlw	116	;'t'
   769  08FF  3465               	retlw	101	;'e'
   770  0900  3472               	retlw	114	;'r'
   771  0901  3472               	retlw	114	;'r'
   772  0902  3475               	retlw	117	;'u'
   773  0903  3470               	retlw	112	;'p'
   774  0904  3474               	retlw	116	;'t'
   775  0905  3400               	retlw	0
   776  0906                     STR_1:	
   777  0906  343C               	retlw	60	;'<'
   778  0907  3420               	retlw	32	;' '
   779  0908  3452               	retlw	82	;'R'
   780  0909  3465               	retlw	101	;'e'
   781  090A  3474               	retlw	116	;'t'
   782  090B  3475               	retlw	117	;'u'
   783  090C  3472               	retlw	114	;'r'
   784  090D  346E               	retlw	110	;'n'
   785  090E  3400               	retlw	0
   786  090F                     STR_48:	
   787  090F  344B               	retlw	75	;'K'
   788  0910  3465               	retlw	101	;'e'
   789  0911  3479               	retlw	121	;'y'
   790  0912  3420               	retlw	32	;' '
   791  0913  3442               	retlw	66	;'B'
   792  0914  3465               	retlw	101	;'e'
   793  0915  3465               	retlw	101	;'e'
   794  0916  3470               	retlw	112	;'p'
   795  0917  3400               	retlw	0
   796  0918                     STR_34:	
   797  0918  3452               	retlw	82	;'R'
   798  0919  3465               	retlw	101	;'e'
   799  091A  3473               	retlw	115	;'s'
   800  091B  3465               	retlw	101	;'e'
   801  091C  3474               	retlw	116	;'t'
   802  091D  3420               	retlw	32	;' '
   803  091E  343F               	retlw	63	;'?'
   804  091F  3400               	retlw	0
   805  0920                     STR_18:	
   806  0920  3456               	retlw	86	;'V'
   807  0921  3465               	retlw	101	;'e'
   808  0922  3472               	retlw	114	;'r'
   809  0923  3473               	retlw	115	;'s'
   810  0924  3469               	retlw	105	;'i'
   811  0925  346F               	retlw	111	;'o'
   812  0926  346E               	retlw	110	;'n'
   813  0927  3400               	retlw	0
   814  0928                     STR_23:	
   815  0928  3423               	retlw	35	;'#'
   816  0929  344D               	retlw	77	;'M'
   817  092A  3475               	retlw	117	;'u'
   818  092B  3474               	retlw	116	;'t'
   819  092C  3465               	retlw	101	;'e'
   820  092D  3423               	retlw	35	;'#'
   821  092E  3400               	retlw	0
   822  092F                     STR_32:	
   823  092F  344C               	retlw	76	;'L'
   824  0930  346F               	retlw	111	;'o'
   825  0931  3461               	retlw	97	;'a'
   826  0932  3464               	retlw	100	;'d'
   827  0933  3420               	retlw	32	;' '
   828  0934  343F               	retlw	63	;'?'
   829  0935  3400               	retlw	0
   830  0936                     STR_33:	
   831  0936  3453               	retlw	83	;'S'
   832  0937  3461               	retlw	97	;'a'
   833  0938  3476               	retlw	118	;'v'
   834  0939  3465               	retlw	101	;'e'
   835  093A  3420               	retlw	32	;' '
   836  093B  343F               	retlw	63	;'?'
   837  093C  3400               	retlw	0
   838  093D                     STR_30:	
   839  093D  3445               	retlw	69	;'E'
   840  093E  3445               	retlw	69	;'E'
   841  093F  3450               	retlw	80	;'P'
   842  0940  3452               	retlw	82	;'R'
   843  0941  344F               	retlw	79	;'O'
   844  0942  344D               	retlw	77	;'M'
   845  0943  3400               	retlw	0
   846  0944                     STR_26:	
   847  0944  344C               	retlw	76	;'L'
   848  0945  346F               	retlw	111	;'o'
   849  0946  3461               	retlw	97	;'a'
   850  0947  3464               	retlw	100	;'d'
   851  0948  3465               	retlw	101	;'e'
   852  0949  3464               	retlw	100	;'d'
   853  094A  3400               	retlw	0
   854  094B                     STR_12:	
   855  094B  3454               	retlw	84	;'T'
   856  094C  346F               	retlw	111	;'o'
   857  094D  346E               	retlw	110	;'n'
   858  094E  3465               	retlw	101	;'e'
   859  094F  3430               	retlw	48	;'0'
   860  0950  3400               	retlw	0
   861  0951                     STR_13:	
   862  0951  3454               	retlw	84	;'T'
   863  0952  346F               	retlw	111	;'o'
   864  0953  346E               	retlw	110	;'n'
   865  0954  3465               	retlw	101	;'e'
   866  0955  3431               	retlw	49	;'1'
   867  0956  3400               	retlw	0
   868  0957                     STR_14:	
   869  0957  3454               	retlw	84	;'T'
   870  0958  346F               	retlw	111	;'o'
   871  0959  346E               	retlw	110	;'n'
   872  095A  3465               	retlw	101	;'e'
   873  095B  3432               	retlw	50	;'2'
   874  095C  3400               	retlw	0
   875  095D                     STR_27:	
   876  095D  3453               	retlw	83	;'S'
   877  095E  3461               	retlw	97	;'a'
   878  095F  3476               	retlw	118	;'v'
   879  0960  3465               	retlw	101	;'e'
   880  0961  3464               	retlw	100	;'d'
   881  0962  3400               	retlw	0
   882  0963                     STR_46:	
   883  0963  3443               	retlw	67	;'C'
   884  0964  346C               	retlw	108	;'l'
   885  0965  3469               	retlw	105	;'i'
   886  0966  3463               	retlw	99	;'c'
   887  0967  346B               	retlw	107	;'k'
   888  0968  3400               	retlw	0
   889  0969                     STR_36:	
   890  0969  3454               	retlw	84	;'T'
   891  096A  3465               	retlw	101	;'e'
   892  096B  346D               	retlw	109	;'m'
   893  096C  3470               	retlw	112	;'p'
   894  096D  346F               	retlw	111	;'o'
   895  096E  3400               	retlw	0
   896  096F                     STR_10:	
   897  096F  3452               	retlw	82	;'R'
   898  0970  3465               	retlw	101	;'e'
   899  0971  3473               	retlw	115	;'s'
   900  0972  3465               	retlw	101	;'e'
   901  0973  3474               	retlw	116	;'t'
   902  0974  3400               	retlw	0
   903  0975                     STR_7:	
   904  0975  344C               	retlw	76	;'L'
   905  0976  346F               	retlw	111	;'o'
   906  0977  3461               	retlw	97	;'a'
   907  0978  3464               	retlw	100	;'d'
   908  0979  3400               	retlw	0
   909  097A                     STR_8:	
   910  097A  3453               	retlw	83	;'S'
   911  097B  3461               	retlw	97	;'a'
   912  097C  3476               	retlw	118	;'v'
   913  097D  3465               	retlw	101	;'e'
   914  097E  3400               	retlw	0
   915  097F                     STR_9:	
   916  097F  3449               	retlw	73	;'I'
   917  0980  346E               	retlw	110	;'n'
   918  0981  3466               	retlw	102	;'f'
   919  0982  346F               	retlw	111	;'o'
   920  0983  3400               	retlw	0
   921  0984                     STR_24:	
   922  0984  344E               	retlw	78	;'N'
   923  0985  346F               	retlw	111	;'o'
   924  0986  3420               	retlw	32	;' '
   925  0987  3400               	retlw	0
   926  0988                     STR_25:	
   927  0988  3459               	retlw	89	;'Y'
   928  0989  3465               	retlw	101	;'e'
   929  098A  3473               	retlw	115	;'s'
   930  098B  3400               	retlw	0
   931  094B                     
   932                           ; #config settings
   933  0000                     
   934                           	psect	cinit
   935  0076                     start_initialization:	
   936  0076                     __initialization:	
   937                           
   938                           ; Clear objects allocated to COMMON
   939  0076  01F6               	clrf	__pbssCOMMON& (0+127)
   940  0077  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   941  0078  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   942  0079  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   943                           
   944                           ; Clear objects allocated to BANK0
   945  007A  3046               	movlw	low __pbssBANK0
   946  007B  0084               	movwf	4
   947  007C  3000               	movlw	high __pbssBANK0
   948  007D  0085               	movwf	5
   949  007E  3015               	movlw	21
   950  007F  318C  24D2  3180   	fcall	clear_ram0
   951                           
   952                           ; Initialize objects allocated to BANK0
   953  0082  307F               	movlw	low __pidataBANK0
   954  0083  0084               	movwf	4
   955  0084  308D               	movlw	(high __pidataBANK0)| (0+128)
   956  0085  0085               	movwf	5
   957  0086  3020               	movlw	low __pdataBANK0
   958  0087  0086               	movwf	6
   959  0088  3000               	movlw	high __pdataBANK0
   960  0089  0087               	movwf	7
   961  008A  3026               	movlw	38
   962  008B  318C  24CC  3180   	fcall	init_ram
   963                           
   964                           ; Initialize objects allocated to BANK1
   965  008E  304D               	movlw	low __pidataBANK1
   966  008F  0084               	movwf	4
   967  0090  308E               	movlw	(high __pidataBANK1)| (0+128)
   968  0091  0085               	movwf	5
   969  0092  30A0               	movlw	low __pdataBANK1
   970  0093  0086               	movwf	6
   971  0094  3000               	movlw	high __pdataBANK1
   972  0095  0087               	movwf	7
   973  0096  3050               	movlw	80
   974  0097  318C  24CC  3180   	fcall	init_ram
   975                           
   976                           ; Initialize objects allocated to BANK2
   977  009A  3005               	movlw	low __pidataBANK2
   978  009B  0084               	movwf	4
   979  009C  308E               	movlw	(high __pidataBANK2)| (0+128)
   980  009D  0085               	movwf	5
   981  009E  3020               	movlw	low __pdataBANK2
   982  009F  0086               	movwf	6
   983  00A0  3001               	movlw	high __pdataBANK2
   984  00A1  0087               	movwf	7
   985  00A2  3048               	movlw	72
   986  00A3  318C  24CC         	fcall	init_ram
   987  00A5                     end_of_initialization:	
   988                           ;End of C runtime variable initialization code
   989                           
   990  00A5                     __end_of__initialization:	
   991  00A5  0020               	movlb	0
   992  00A6  3180  28A8         	ljmp	_main	;jump to C main() function
   993                           
   994                           	psect	bssCOMMON
   995  0076                     __pbssCOMMON:	
   996  0076                     isr@keyHoldCount:	
   997  0076                     	ds	2
   998  0078                     isr@prescaler:	
   999  0078                     	ds	2
  1000                           
  1001                           	psect	bssBANK0
  1002  0046                     __pbssBANK0:	
  1003  0046                     _events_:	
  1004  0046                     	ds	3
  1005  0049                     _tempoCounter_:	
  1006  0049                     	ds	3
  1007  004C                     _currentSingleMessage_:	
  1008  004C                     	ds	2
  1009  004E                     _currentValueInfoPtr_:	
  1010  004E                     	ds	2
  1011  0050                     _soundDurationCount_:	
  1012  0050                     	ds	2
  1013  0052                     _beatCounter_:	
  1014  0052                     	ds	1
  1015  0053                     _currentConfirmationInfoPtr_:	
  1016  0053                     	ds	1
  1017  0054                     _currentMenuInfoPtr_:	
  1018  0054                     	ds	1
  1019  0055                     _machineError_:	
  1020  0055                     	ds	1
  1021  0056                     _machineState_:	
  1022  0056                     	ds	1
  1023  0057                     _sampledPortAState_:	
  1024  0057                     	ds	1
  1025  0058                     _soundState_:	
  1026  0058                     	ds	1
  1027  0059                     _stateReturnCounter_:	
  1028  0059                     	ds	1
  1029  005A                     main@prevPortAState:	
  1030  005A                     	ds	1
  1031                           
  1032                           	psect	dataBANK0
  1033  0020                     __pdataBANK0:	
  1034  0020                     _configration_:	
  1035  0020                     	ds	13
  1036  002D                     _confirmationLoad_:	
  1037  002D                     	ds	5
  1038  0032                     _menuInfoDuration_:	
  1039  0032                     	ds	5
  1040  0037                     _menuInfoInformation_:	
  1041  0037                     	ds	5
  1042  003C                     _menuInfoMain_:	
  1043  003C                     	ds	5
  1044  0041                     _menuInfoTone_:	
  1045  0041                     	ds	5
  1046                           
  1047                           	psect	dataBANK1
  1048  00A0                     __pdataBANK1:	
  1049  00A0                     _MESSAGE_INFORMATION:	
  1050  00A0                     	ds	8
  1051  00A8                     _MESSAGE_MENU_ITEM_TONE:	
  1052  00A8                     	ds	8
  1053  00B0                     _valueInfoBeatCount_:	
  1054  00B0                     	ds	8
  1055  00B8                     _valueInfoDurationClick_:	
  1056  00B8                     	ds	8
  1057  00C0                     _valueInfoDurationKey_:	
  1058  00C0                     	ds	8
  1059  00C8                     _valueInfoOscillatorTune_:	
  1060  00C8                     	ds	8
  1061  00D0                     _valueInfoPulseWidth_:	
  1062  00D0                     	ds	8
  1063  00D8                     _valueInfoTempo_:	
  1064  00D8                     	ds	8
  1065  00E0                     _MESSAGE_MENU_ITEM_DURATION:	
  1066  00E0                     	ds	6
  1067  00E6                     _ConfirmationSave_:	
  1068  00E6                     	ds	5
  1069  00EB                     _confirmationReset_:	
  1070  00EB                     	ds	5
  1071                           
  1072                           	psect	dataBANK2
  1073  0120                     __pdataBANK2:	
  1074  0120                     _informationValueBuffer:	
  1075  0120                     	ds	28
  1076  013C                     _valueInfoTone_:	
  1077  013C                     	ds	24
  1078  0154                     _MESSAGE_MENU_ITEM_MAIN:	
  1079  0154                     	ds	20
  1080                           
  1081                           	psect	clrtext
  1082  0CD2                     clear_ram0:	
  1083                           ;	Called with FSR0 containing the base address, and
  1084                           ;	WREG with the size to clear
  1085                           
  1086  0CD2  0064               	clrwdt	;clear the watchdog before getting into this loop
  1087  0CD3                     clrloop0:	
  1088  0CD3  0180               	clrf	0	;clear RAM location pointed to by FSR
  1089  0CD4  3101               	addfsr 0,1
  1090  0CD5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1091  0CD6  2CD3               	goto	clrloop0	;have we reached the end yet?
  1092  0CD7  3400               	retlw	0	;all done for this memory range, return
  1093                           
  1094                           	psect	inittext
  1095  0CCC                     init_ram:	
  1096  0CCC  00FE               	movwf	126
  1097  0CCD                     initloop:	
  1098  0CCD  0012               	moviw fsr0++
  1099  0CCE  001E               	movwi fsr1++
  1100  0CCF  0BFE               	decfsz	126,f
  1101  0CD0  2CCD               	goto	initloop
  1102  0CD1  3400               	retlw	0
  1103                           
  1104                           	psect	cstackBANK3
  1105  01A0                     __pcstackBANK3:	
  1106  01A0                     main@valueString:	
  1107                           
  1108                           ; 6 bytes @ 0x0
  1109  01A0                     	ds	6
  1110  01A6                     main@isNonZero:	
  1111                           
  1112                           ; 1 bytes @ 0x6
  1113  01A6                     	ds	1
  1114  01A7                     main@tmpValue:	
  1115                           
  1116                           ; 2 bytes @ 0x7
  1117  01A7                     	ds	2
  1118  01A9                     main@compareUnit:	
  1119                           
  1120                           ; 1 bytes @ 0x9
  1121  01A9                     	ds	1
  1122  01AA                     main@chr:	
  1123                           
  1124                           ; 1 bytes @ 0xA
  1125  01AA                     	ds	1
  1126  01AB                     main@keyPressed:	
  1127                           
  1128                           ; 1 bytes @ 0xB
  1129  01AB                     	ds	1
  1130  01AC                     main@phase:	
  1131                           
  1132                           ; 1 bytes @ 0xC
  1133  01AC                     	ds	1
  1134  01AD                     main@returnCode:	
  1135                           
  1136                           ; 1 bytes @ 0xD
  1137  01AD                     	ds	1
  1138  01AE                     main@userId:	
  1139                           
  1140                           ; 1 bytes @ 0xE
  1141  01AE                     	ds	1
  1142  01AF                     main@portAState:	
  1143                           
  1144                           ; 1 bytes @ 0xF
  1145  01AF                     	ds	1
  1146  01B0                     main@i:	
  1147                           
  1148                           ; 1 bytes @ 0x10
  1149  01B0                     	ds	1
  1150                           
  1151                           	psect	cstackCOMMON
  1152  0070                     __pcstackCOMMON:	
  1153  0070                     ?_initialize:	
  1154  0070                     ?_ParallelLCD_ClearRow:	
  1155                           ; 0 bytes @ 0x0
  1156                           
  1157  0070                     ?_ParallelLCD_ClearDisplay:	
  1158                           ; 0 bytes @ 0x0
  1159                           
  1160  0070                     ?_main:	
  1161                           ; 0 bytes @ 0x0
  1162                           
  1163  0070                     ?_isr:	
  1164                           ; 0 bytes @ 0x0
  1165                           
  1166  0070                     ??_isr:	
  1167                           ; 0 bytes @ 0x0
  1168                           
  1169  0070                     ?_Configuration_Save:	
  1170                           ; 0 bytes @ 0x0
  1171                           
  1172  0070                     ?_Configuration_Load:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0x0
  1177  0070                     	ds	4
  1178  0074                     ?_ParallelLCD_WriteByte:	
  1179  0074                     ?_Configuration_WriteByte:	
  1180                           ; 0 bytes @ 0x4
  1181                           
  1182  0074                     ??_initialize:	
  1183                           ; 0 bytes @ 0x4
  1184                           
  1185  0074                     ?_Configuration_ReadByte:	
  1186                           ; 0 bytes @ 0x4
  1187                           
  1188  0074                     ?___bmul:	
  1189                           ; 1 bytes @ 0x4
  1190                           
  1191  0074                     ParallelLCD_WriteByte@r:	
  1192                           ; 1 bytes @ 0x4
  1193                           
  1194  0074                     Configuration_WriteByte@data:	
  1195                           ; 1 bytes @ 0x4
  1196                           
  1197  0074                     Configuration_ReadByte@memorySelect:	
  1198                           ; 1 bytes @ 0x4
  1199                           
  1200  0074                     ___bmul@multiplicand:	
  1201                           ; 1 bytes @ 0x4
  1202                           
  1203                           
  1204                           ; 1 bytes @ 0x4
  1205  0074                     	ds	1
  1206  0075                     ??_ParallelLCD_WriteByte:	
  1207  0075                     ??_Configuration_ReadByte:	
  1208                           ; 0 bytes @ 0x5
  1209                           
  1210  0075                     ??_Configuration_WriteByte:	
  1211                           ; 0 bytes @ 0x5
  1212                           
  1213  0075                     ??___bmul:	
  1214                           ; 0 bytes @ 0x5
  1215                           
  1216  0075                     ParallelLCD_WriteByte@data:	
  1217                           ; 0 bytes @ 0x5
  1218                           
  1219  0075                     Configuration_WriteByte@address:	
  1220                           ; 1 bytes @ 0x5
  1221                           
  1222  0075                     Configuration_ReadByte@address:	
  1223                           ; 1 bytes @ 0x5
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0x5
  1227  0075                     	ds	1
  1228  0076                     ??_ParallelLCD_Initialize:	
  1229  0076                     ??_ParallelLCD_WriteCharacter:	
  1230                           ; 0 bytes @ 0x6
  1231                           
  1232  0076                     ??_ParallelLCD_ClearDisplay:	
  1233                           ; 0 bytes @ 0x6
  1234                           
  1235                           
  1236                           	psect	cstackBANK0
  1237  005B                     __pcstackBANK0:	
  1238                           ; 0 bytes @ 0x6
  1239                           
  1240  005B                     ?_ParallelLCD_Initialize:	
  1241  005B                     ?_ParallelLCD_WriteCharacter:	
  1242                           ; 0 bytes @ 0x0
  1243                           
  1244  005B                     ?_ParallelLCD_WriteStringClearing:	
  1245                           ; 0 bytes @ 0x0
  1246                           
  1247  005B                     ??_ParallelLCD_ClearRow:	
  1248                           ; 0 bytes @ 0x0
  1249                           
  1250  005B                     ?_ParallelLCD_SetCgram:	
  1251                           ; 0 bytes @ 0x0
  1252                           
  1253  005B                     ??_Configuration_Save:	
  1254                           ; 0 bytes @ 0x0
  1255                           
  1256  005B                     ??_Configuration_Load:	
  1257                           ; 0 bytes @ 0x0
  1258                           
  1259  005B                     ParallelLCD_Initialize@configDisplay:	
  1260                           ; 0 bytes @ 0x0
  1261                           
  1262  005B                     ParallelLCD_WriteCharacter@character:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265  005B                     ___bmul@product:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268  005B                     ParallelLCD_WriteStringClearing@stringPtr:	
  1269                           ; 1 bytes @ 0x0
  1270                           
  1271  005B                     ParallelLCD_SetCgram@bitmap:	
  1272                           ; 2 bytes @ 0x0
  1273                           
  1274                           
  1275                           ; 2 bytes @ 0x0
  1276  005B                     	ds	1
  1277  005C                     ParallelLCD_Initialize@configCursor:	
  1278  005C                     ParallelLCD_WriteCharacter@position:	
  1279                           ; 1 bytes @ 0x1
  1280                           
  1281  005C                     ParallelLCD_ClearRow@rowSelect:	
  1282                           ; 1 bytes @ 0x1
  1283                           
  1284  005C                     ___bmul@multiplier:	
  1285                           ; 1 bytes @ 0x1
  1286                           
  1287                           
  1288                           ; 1 bytes @ 0x1
  1289  005C                     	ds	1
  1290  005D                     ?_ParallelLCD_WriteString:	
  1291  005D                     ??_ParallelLCD_WriteStringClearing:	
  1292                           ; 0 bytes @ 0x2
  1293                           
  1294  005D                     ??_ParallelLCD_SetCgram:	
  1295                           ; 0 bytes @ 0x2
  1296                           
  1297  005D                     ParallelLCD_Initialize@configEntryMode:	
  1298                           ; 0 bytes @ 0x2
  1299                           
  1300  005D                     ParallelLCD_ClearRow@i:	
  1301                           ; 1 bytes @ 0x2
  1302                           
  1303  005D                     Configuration_Save@returnCode:	
  1304                           ; 1 bytes @ 0x2
  1305                           
  1306  005D                     Configuration_Load@ptrConfig:	
  1307                           ; 1 bytes @ 0x2
  1308                           
  1309  005D                     ParallelLCD_WriteString@stringPtr:	
  1310                           ; 1 bytes @ 0x2
  1311                           
  1312                           
  1313                           ; 2 bytes @ 0x2
  1314  005D                     	ds	1
  1315  005E                     ParallelLCD_Initialize@configFunction:	
  1316  005E                     ParallelLCD_WriteStringClearing@position:	
  1317                           ; 1 bytes @ 0x3
  1318                           
  1319  005E                     ParallelLCD_SetCgram@charCode:	
  1320                           ; 1 bytes @ 0x3
  1321                           
  1322  005E                     Configuration_Save@ptrConfig:	
  1323                           ; 1 bytes @ 0x3
  1324                           
  1325  005E                     Configuration_Load@i:	
  1326                           ; 1 bytes @ 0x3
  1327                           
  1328                           
  1329                           ; 1 bytes @ 0x3
  1330  005E                     	ds	1
  1331  005F                     ??_ParallelLCD_WriteString:	
  1332  005F                     ParallelLCD_WriteStringClearing@i:	
  1333                           ; 0 bytes @ 0x4
  1334                           
  1335  005F                     ParallelLCD_SetCgram@i:	
  1336                           ; 1 bytes @ 0x4
  1337                           
  1338  005F                     Configuration_Save@i:	
  1339                           ; 1 bytes @ 0x4
  1340                           
  1341  005F                     Configuration_Load@config:	
  1342                           ; 1 bytes @ 0x4
  1343                           
  1344                           
  1345                           ; 1 bytes @ 0x4
  1346  005F                     	ds	1
  1347  0060                     ParallelLCD_WriteString@position:	
  1348  0060                     Configuration_Save@config:	
  1349                           ; 1 bytes @ 0x5
  1350                           
  1351                           
  1352                           ; 1 bytes @ 0x5
  1353  0060                     	ds	1
  1354  0061                     ??_main:	
  1355                           
  1356                           ; 0 bytes @ 0x6
  1357  0061                     	ds	9
  1358                           
  1359                           	psect	maintext
  1360  00A8                     __pmaintext:	
  1361 ;;
  1362 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  1363 ;;
  1364 ;; *************** function _main *****************
  1365 ;; Defined at:
  1366 ;;		line 283 in file "src/main.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  chr             1   10[BANK3 ] unsigned char 
  1371 ;;  compareUnit     1    9[BANK3 ] unsigned char 
  1372 ;;  i               1   16[BANK3 ] unsigned char 
  1373 ;;  userId          1   14[BANK3 ] unsigned char 
  1374 ;;  valueString     6    0[BANK3 ] unsigned char [6]
  1375 ;;  tmpValue        2    7[BANK3 ] unsigned int 
  1376 ;;  isNonZero       1    6[BANK3 ] enum E2778
  1377 ;;  returnCode      1   13[BANK3 ] enum E2863
  1378 ;;  portAState      1   15[BANK3 ] struct .
  1379 ;;  keyPressed      1   11[BANK3 ] struct .
  1380 ;;  phase           1   12[BANK3 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;		None               void
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : B1F/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1390 ;;      Params:         0       0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0      17       0
  1392 ;;      Temps:          0       9       0       0       0       0
  1393 ;;      Totals:         0       9       0       0      17       0
  1394 ;;Total ram usage:       26 bytes
  1395 ;; Hardware stack levels required when called:    4
  1396 ;; This function calls:
  1397 ;;		_Configuration_Load
  1398 ;;		_Configuration_ReadByte
  1399 ;;		_Configuration_Save
  1400 ;;		_ParallelLCD_ClearDisplay
  1401 ;;		_ParallelLCD_ClearRow
  1402 ;;		_ParallelLCD_Initialize
  1403 ;;		_ParallelLCD_SetCgram
  1404 ;;		_ParallelLCD_WriteCharacter
  1405 ;;		_ParallelLCD_WriteString
  1406 ;;		_ParallelLCD_WriteStringClearing
  1407 ;;		___bmul
  1408 ;;		_initialize
  1409 ;; This function is called by:
  1410 ;;		Startup code after reset
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           
  1415                           ;psect for function _main
  1416  00A8                     _main:	
  1417                           
  1418                           ;main.c: 286: initialize( ) ;
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1422  00A8  318E  26F8  3180   	fcall	_initialize
  1423                           
  1424                           ;main.c: 289: if( (~PORTA&0xE0) == 0xC0 )
  1425  00AB  0020               	movlb	0	; select bank0
  1426  00AC  090C               	comf	12,w	;volatile
  1427  00AD  00E1               	movwf	??_main
  1428  00AE  30E0               	movlw	224
  1429  00AF  0561               	andwf	??_main,w
  1430  00B0  3AC0               	xorlw	192
  1431  00B1  1D03               	skipz
  1432  00B2  28B8               	goto	l3423
  1433                           
  1434                           ;main.c: 290: machineState_ = STATE_INITIALIZE ;
  1435  00B3  300B               	movlw	11
  1436  00B4  00E1               	movwf	??_main
  1437  00B5  0861               	movf	??_main,w
  1438  00B6  00D6               	movwf	_machineState_
  1439  00B7  28B9               	goto	l3425
  1440  00B8                     l3423:	
  1441                           
  1442                           ;main.c: 291: else
  1443                           ;main.c: 292: machineState_ = STATE_BOOT ;
  1444  00B8  01D6               	clrf	_machineState_
  1445  00B9                     l3425:	
  1446                           
  1447                           ;main.c: 293: events_.output.changeState=1 ;
  1448  00B9  1447               	bsf	_events_+1,0
  1449                           
  1450                           ;main.c: 296: PR2 = 124 ;
  1451  00BA  307C               	movlw	124
  1452  00BB  009B               	movwf	27	;volatile
  1453                           
  1454                           ;main.c: 297: {CCPR4L=(PR2>>1);} ;
  1455  00BC  361B               	lsrf	27,w	;volatile
  1456  00BD  0026               	movlb	6	; select bank6
  1457  00BE  0098               	movwf	24	;volatile
  1458                           
  1459                           ;main.c: 300: T4CONbits.TMR4ON = 1 ;
  1460  00BF  0028               	movlb	8	; select bank8
  1461  00C0  1517               	bsf	23,2	;volatile
  1462                           
  1463                           ;main.c: 303: T1CONbits.TMR1ON = 1 ;
  1464  00C1  0020               	movlb	0	; select bank0
  1465  00C2  1418               	bsf	24,0	;volatile
  1466                           
  1467                           ;main.c: 306: for( Uint08_t phase = 0 ; phase < 0xE ; phase++ ) {
  1468  00C3  0023               	movlb	3	; select bank3
  1469  00C4  01AC               	clrf	main@phase^(0+384)
  1470  00C5  300E               	movlw	14
  1471  00C6  022C               	subwf	main@phase^(0+384),w
  1472  00C7  1803               	btfsc	3,0
  1473  00C8  29C8               	goto	l258
  1474  00C9                     l257:	
  1475  00C9  0064               	clrwdt	;# 
  1476                           
  1477                           ;main.c: 310: TMR1 = 0x0000 ;
  1478  00CA  0020               	movlb	0	; select bank0
  1479  00CB  0196               	clrf	22	;volatile
  1480  00CC  0197               	clrf	23	;volatile
  1481                           
  1482                           ;main.c: 312: switch( phase ) {
  1483  00CD  29A0               	goto	l3481
  1484  00CE                     l261:	
  1485                           ;main.c: 313: case 0x0:
  1486                           
  1487                           
  1488                           ;main.c: 314: case 0x2:
  1489                           ;main.c: 316: T2CONbits.TMR2ON = 1 ;
  1490  00CE  0020               	movlb	0	; select bank0
  1491  00CF  151C               	bsf	28,2	;volatile
  1492                           
  1493                           ;main.c: 317: break ;
  1494  00D0  29BB               	goto	l269
  1495  00D1                     l264:	
  1496                           ;main.c: 319: case 0x1:
  1497                           
  1498                           
  1499                           ;main.c: 320: case 0xC:
  1500                           ;main.c: 322: T2CONbits.TMR2ON = 0 ;
  1501  00D1  0020               	movlb	0	; select bank0
  1502  00D2  111C               	bcf	28,2	;volatile
  1503                           
  1504                           ;main.c: 323: break ;
  1505  00D3  29BB               	goto	l269
  1506  00D4                     l3443:	
  1507                           ;main.c: 325: case 0x3:
  1508                           
  1509                           
  1510                           ;main.c: 327: {
  1511                           ;main.c: 328: Uint08_t userId ;
  1512                           ;main.c: 329: userId = Configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1513  00D4  01F4               	clrf	Configuration_ReadByte@memorySelect
  1514  00D5  0AF4               	incf	Configuration_ReadByte@memorySelect,f
  1515  00D6  3000               	movlw	0
  1516  00D7  318C  24EE  3180   	fcall	_Configuration_ReadByte
  1517  00DA  0020               	movlb	0	; select bank0
  1518  00DB  00E1               	movwf	??_main
  1519  00DC  0861               	movf	??_main,w
  1520  00DD  0023               	movlb	3	; select bank3
  1521  00DE  00AE               	movwf	main@userId^(0+384)
  1522                           
  1523                           ;main.c: 330: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1524  00DF  082E               	movf	main@userId^(0+384),w
  1525  00E0  0020               	movlb	0	; select bank0
  1526  00E1  00E1               	movwf	??_main
  1527  00E2  3004               	movlw	4
  1528  00E3                     u2615:	
  1529  00E3  36E1               	lsrf	??_main,f
  1530  00E4  0B89               	decfsz	9,f
  1531  00E5  28E3               	goto	u2615
  1532  00E6  0861               	movf	??_main,w
  1533  00E7  3830               	iorlw	48
  1534  00E8  00E2               	movwf	??_main+1
  1535  00E9  0862               	movf	??_main+1,w
  1536  00EA  0022               	movlb	2	; select bank2
  1537  00EB  00A1               	movwf	(_informationValueBuffer^(0+256)+1)
  1538                           
  1539                           ;main.c: 331: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1540  00EC  0023               	movlb	3	; select bank3
  1541  00ED  082E               	movf	main@userId^(0+384),w
  1542  00EE  390F               	andlw	15
  1543  00EF  3830               	iorlw	48
  1544  00F0  0020               	movlb	0	; select bank0
  1545  00F1  00E1               	movwf	??_main
  1546  00F2  0861               	movf	??_main,w
  1547  00F3  0022               	movlb	2	; select bank2
  1548  00F4  00A2               	movwf	(_informationValueBuffer^(0+256)+2)
  1549                           
  1550                           ;main.c: 332: userId = Configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1551  00F5  01F4               	clrf	Configuration_ReadByte@memorySelect
  1552  00F6  0AF4               	incf	Configuration_ReadByte@memorySelect,f
  1553  00F7  3001               	movlw	1
  1554  00F8  318C  24EE  3180   	fcall	_Configuration_ReadByte
  1555  00FB  0020               	movlb	0	; select bank0
  1556  00FC  00E1               	movwf	??_main
  1557  00FD  0861               	movf	??_main,w
  1558  00FE  0023               	movlb	3	; select bank3
  1559  00FF  00AE               	movwf	main@userId^(0+384)
  1560                           
  1561                           ;main.c: 333: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1562  0100  082E               	movf	main@userId^(0+384),w
  1563  0101  0020               	movlb	0	; select bank0
  1564  0102  00E1               	movwf	??_main
  1565  0103  3004               	movlw	4
  1566  0104                     u2625:	
  1567  0104  36E1               	lsrf	??_main,f
  1568  0105  0B89               	decfsz	9,f
  1569  0106  2904               	goto	u2625
  1570  0107  0861               	movf	??_main,w
  1571  0108  3830               	iorlw	48
  1572  0109  00E2               	movwf	??_main+1
  1573  010A  0862               	movf	??_main+1,w
  1574  010B  0022               	movlb	2	; select bank2
  1575  010C  00A4               	movwf	(_informationValueBuffer^(0+256)+4)
  1576                           
  1577                           ;main.c: 334: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1578  010D  0023               	movlb	3	; select bank3
  1579  010E  082E               	movf	main@userId^(0+384),w
  1580  010F  390F               	andlw	15
  1581  0110  3830               	iorlw	48
  1582  0111  0020               	movlb	0	; select bank0
  1583  0112  00E1               	movwf	??_main
  1584  0113  0861               	movf	??_main,w
  1585  0114  0022               	movlb	2	; select bank2
  1586  0115  00A5               	movwf	(_informationValueBuffer^(0+256)+5)
  1587                           
  1588                           ;main.c: 335: }
  1589                           ;main.c: 336: break ;
  1590  0116  29BB               	goto	l269
  1591  0117                     l3453:	
  1592                           ;main.c: 338: case 0x4:
  1593                           
  1594                           
  1595                           ;main.c: 340: ParallelLCD_Initialize(
  1596                           ;main.c: 341: PARALLEL_LCD_CONFIG_8BIT_MODE | PARALLEL_LCD_CONFIG_2LINE_MODE ,
  1597                           ;main.c: 342: PARALLEL_LCD_CONFIG_DISPLAY_ON ,
  1598                           ;main.c: 343: PARALLEL_LCD_CONFIG_CURSOR_NONE ,
  1599                           ;main.c: 344: PARALLEL_LCD_CONFIG_INCREMENTAL
  1600                           ;main.c: 345: ) ;
  1601  0117  3004               	movlw	4
  1602  0118  0020               	movlb	0	; select bank0
  1603  0119  00E1               	movwf	??_main
  1604  011A  0861               	movf	??_main,w
  1605  011B  00DB               	movwf	ParallelLCD_Initialize@configDisplay
  1606  011C  01DC               	clrf	ParallelLCD_Initialize@configCursor
  1607  011D  3002               	movlw	2
  1608  011E  00E2               	movwf	??_main+1
  1609  011F  0862               	movf	??_main+1,w
  1610  0120  00DD               	movwf	ParallelLCD_Initialize@configEntryMode
  1611  0121  3018               	movlw	24
  1612  0122  318D  255E  3180   	fcall	_ParallelLCD_Initialize
  1613                           
  1614                           ;main.c: 348: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          .METRONOME.MAIN_TILE ) ;
  1615  0125  3000               	movlw	low (_MESSAGE| (0+32768))
  1616  0126  0084               	movwf	4
  1617  0127  3088               	movlw	high (_MESSAGE| (0+32768))
  1618  0128  0085               	movwf	5
  1619  0129  3F00               	moviw [0]fsr0
  1620  012A  0020               	movlb	0	; select bank0
  1621  012B  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1622  012C  3F01               	moviw [1]fsr0
  1623  012D  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1624  012E  3080               	movlw	128
  1625  012F  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  1626                           
  1627                           ;main.c: 349: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , MESSAGE
      +                          _INFORMATION[ INFORMATION_ITEM_VERSION ] ) ;
  1628  0132  0021               	movlb	1	; select bank1
  1629  0133  0820               	movf	_MESSAGE_INFORMATION^(0+128),w
  1630  0134  0020               	movlb	0	; select bank0
  1631  0135  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1632  0136  0021               	movlb	1	; select bank1
  1633  0137  0821               	movf	(_MESSAGE_INFORMATION+1)^(0+128),w
  1634  0138  0020               	movlb	0	; select bank0
  1635  0139  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1636  013A  30C0               	movlw	192
  1637  013B  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  1638                           
  1639                           ;main.c: 350: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xA , &informationVal
      +                          ueBuffer[ INFORMATION_ITEM_VERSION ] ) ;
  1640  013E  3020               	movlw	low _informationValueBuffer
  1641  013F  0020               	movlb	0	; select bank0
  1642  0140  00DD               	movwf	ParallelLCD_WriteString@stringPtr
  1643  0141  3001               	movlw	high _informationValueBuffer
  1644  0142  00DE               	movwf	ParallelLCD_WriteString@stringPtr+1
  1645  0143  30CA               	movlw	202
  1646  0144  318D  253E  3180   	fcall	_ParallelLCD_WriteString
  1647  0147                     l3461:	
  1648                           ;main.c: 352: case 0x5:
  1649                           
  1650                           
  1651                           ;main.c: 353: valueInfoBeatCount_.valuePtr = &configration_.beatCount ;
  1652  0147  3024               	movlw	(low ((_configration_| 0+4)))& (0+255)
  1653  0148  0020               	movlb	0	; select bank0
  1654  0149  00E1               	movwf	??_main
  1655  014A  0861               	movf	??_main,w
  1656  014B  0021               	movlb	1	; select bank1
  1657  014C  00B0               	movwf	_valueInfoBeatCount_^(0+128)
  1658                           
  1659                           ;main.c: 354: valueInfoTone_[0].valuePtr = &configration_.tone[0] ;
  1660  014D  3027               	movlw	(low ((_configration_| 0+7)))& (0+255)
  1661  014E  0020               	movlb	0	; select bank0
  1662  014F  00E1               	movwf	??_main
  1663  0150  0861               	movf	??_main,w
  1664  0151  0022               	movlb	2	; select bank2
  1665  0152  00BC               	movwf	_valueInfoTone_^(0+256)
  1666                           
  1667                           ;main.c: 355: valueInfoTone_[1].valuePtr = &configration_.tone[1] ;
  1668  0153  3028               	movlw	(low ((_configration_| 0+8)))& (0+255)
  1669  0154  0020               	movlb	0	; select bank0
  1670  0155  00E1               	movwf	??_main
  1671  0156  0861               	movf	??_main,w
  1672  0157  0022               	movlb	2	; select bank2
  1673  0158  00C4               	movwf	(low ((_valueInfoTone_| (0+256)+8)))^0
  1674                           
  1675                           ;main.c: 356: valueInfoTone_[2].valuePtr = &configration_.tone[2] ;
  1676  0159  3029               	movlw	(low ((_configration_| 0+9)))& (0+255)
  1677  015A  0020               	movlb	0	; select bank0
  1678  015B  00E1               	movwf	??_main
  1679  015C  0861               	movf	??_main,w
  1680  015D  0022               	movlb	2	; select bank2
  1681  015E  00CC               	movwf	(low ((_valueInfoTone_| (0+256)+16)))^0
  1682                           
  1683                           ;main.c: 357: valueInfoDurationClick_.valuePtr = &configration_.duration.click ;
  1684  015F  3025               	movlw	(low ((_configration_| 0+5)))& (0+255)
  1685  0160  0020               	movlb	0	; select bank0
  1686  0161  00E1               	movwf	??_main
  1687  0162  0861               	movf	??_main,w
  1688  0163  0021               	movlb	1	; select bank1
  1689  0164  00B8               	movwf	_valueInfoDurationClick_^(0+128)
  1690                           
  1691                           ;main.c: 358: valueInfoDurationKey_.valuePtr = &configration_.duration.key ;
  1692  0165  3026               	movlw	(low ((_configration_| 0+6)))& (0+255)
  1693  0166  0020               	movlb	0	; select bank0
  1694  0167  00E1               	movwf	??_main
  1695  0168  0861               	movf	??_main,w
  1696  0169  0021               	movlb	1	; select bank1
  1697  016A  00C0               	movwf	_valueInfoDurationKey_^(0+128)
  1698                           
  1699                           ;main.c: 359: valueInfoPulseWidth_.valuePtr = &configration_.pulseWidth ;
  1700  016B  302A               	movlw	(low ((_configration_| 0+10)))& (0+255)
  1701  016C  0020               	movlb	0	; select bank0
  1702  016D  00E1               	movwf	??_main
  1703  016E  0861               	movf	??_main,w
  1704  016F  0021               	movlb	1	; select bank1
  1705  0170  00D0               	movwf	_valueInfoPulseWidth_^(0+128)
  1706                           
  1707                           ;main.c: 360: valueInfoOscillatorTune_.valuePtr = ( Uint08_t* ) & configration_.oscillat
      +                          orTune ;
  1708  0171  302B               	movlw	(low ((_configration_| 0+11)))& (0+255)
  1709  0172  0020               	movlb	0	; select bank0
  1710  0173  00E1               	movwf	??_main
  1711  0174  0861               	movf	??_main,w
  1712  0175  0021               	movlb	1	; select bank1
  1713  0176  00C8               	movwf	_valueInfoOscillatorTune_^(0+128)
  1714                           
  1715                           ;main.c: 361: break ;
  1716  0177  29BB               	goto	l269
  1717  0178                     l3477:	
  1718                           ;main.c: 363: case 0x6:
  1719                           
  1720                           
  1721                           ;main.c: 365: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1722  0178  3034               	movlw	low ((_BITMAP| (0+32768)+8))
  1723  0179  0020               	movlb	0	; select bank0
  1724  017A  00DB               	movwf	ParallelLCD_SetCgram@bitmap
  1725  017B  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1726  017C  00DC               	movwf	ParallelLCD_SetCgram@bitmap+1
  1727  017D  3025               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1728  017E  0084               	movwf	4
  1729  017F  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1730  0180  0085               	movwf	5
  1731  0181  0800               	movf	0,w	;code access
  1732  0182  318D  25A5  3180   	fcall	_ParallelLCD_SetCgram
  1733                           
  1734                           ;main.c: 366: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1735  0185  303C               	movlw	low ((_BITMAP| (0+32768)+16))
  1736  0186  0020               	movlb	0	; select bank0
  1737  0187  00DB               	movwf	ParallelLCD_SetCgram@bitmap
  1738  0188  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1739  0189  00DC               	movwf	ParallelLCD_SetCgram@bitmap+1
  1740  018A  3026               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1741  018B  0084               	movwf	4
  1742  018C  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1743  018D  0085               	movwf	5
  1744  018E  0800               	movf	0,w	;code access
  1745  018F  318D  25A5  3180   	fcall	_ParallelLCD_SetCgram
  1746                           
  1747                           ;main.c: 367: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1748  0192  302C               	movlw	low (_BITMAP| (0+32768))
  1749  0193  0020               	movlb	0	; select bank0
  1750  0194  00DB               	movwf	ParallelLCD_SetCgram@bitmap
  1751  0195  3088               	movlw	high (_BITMAP| (0+32768))
  1752  0196  00DC               	movwf	ParallelLCD_SetCgram@bitmap+1
  1753  0197  3024               	movlw	low (_CHAR_CODE| (0+32768))
  1754  0198  0084               	movwf	4
  1755  0199  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1756  019A  0085               	movwf	5
  1757  019B  0800               	movf	0,w	;code access
  1758  019C  318D  25A5  3180   	fcall	_ParallelLCD_SetCgram
  1759                           
  1760                           ;main.c: 370: }
  1761                           
  1762                           ;main.c: 368: break ;
  1763  019F  29BB               	goto	l269
  1764  01A0                     l3481:	
  1765  01A0  0023               	movlb	3	; select bank3
  1766  01A1  082C               	movf	main@phase^(0+384),w
  1767                           
  1768                           ; Switch size 1, requested type "space"
  1769                           ; Number of cases is 8, Range of values is 0 to 12
  1770                           ; switch strategies available:
  1771                           ; Name         Instructions Cycles
  1772                           ; simple_byte           25    13 (average)
  1773                           ; direct_byte           32     6 (fixed)
  1774                           ; jumptable            260     6 (fixed)
  1775                           ;	Chosen strategy is simple_byte
  1776  01A2  3A00               	xorlw	0	; case 0
  1777  01A3  1903               	skipnz
  1778  01A4  28CE               	goto	l261
  1779  01A5  3A01               	xorlw	1	; case 1
  1780  01A6  1903               	skipnz
  1781  01A7  28D1               	goto	l264
  1782  01A8  3A03               	xorlw	3	; case 2
  1783  01A9  1903               	skipnz
  1784  01AA  28CE               	goto	l261
  1785  01AB  3A01               	xorlw	1	; case 3
  1786  01AC  1903               	skipnz
  1787  01AD  28D4               	goto	l3443
  1788  01AE  3A07               	xorlw	7	; case 4
  1789  01AF  1903               	skipnz
  1790  01B0  2917               	goto	l3453
  1791  01B1  3A01               	xorlw	1	; case 5
  1792  01B2  1903               	skipnz
  1793  01B3  2947               	goto	l3461
  1794  01B4  3A03               	xorlw	3	; case 6
  1795  01B5  1903               	skipnz
  1796  01B6  2978               	goto	l3477
  1797  01B7  3A0A               	xorlw	10	; case 12
  1798  01B8  1903               	skipnz
  1799  01B9  28D1               	goto	l264
  1800  01BA  29BB               	goto	l269
  1801  01BB                     l269:	
  1802                           ;main.c: 372: while( !PIR1bits.TMR1IF ) ;
  1803                           
  1804  01BB  0020               	movlb	0	; select bank0
  1805  01BC  1C11               	btfss	17,0	;volatile
  1806  01BD  29BB               	goto	l269
  1807                           
  1808                           ;main.c: 373: PIR1bits.TMR1IF = 0 ;
  1809  01BE  1011               	bcf	17,0	;volatile
  1810  01BF  3001               	movlw	1
  1811  01C0  00E1               	movwf	??_main
  1812  01C1  0861               	movf	??_main,w
  1813  01C2  0023               	movlb	3	; select bank3
  1814  01C3  07AC               	addwf	main@phase^(0+384),f
  1815  01C4  300E               	movlw	14
  1816  01C5  022C               	subwf	main@phase^(0+384),w
  1817  01C6  1C03               	skipc
  1818  01C7  28C9               	goto	l257
  1819  01C8                     l258:	
  1820                           
  1821                           ;main.c: 375: }
  1822                           ;main.c: 379: INTCONbits.PEIE = 1 ;
  1823  01C8  170B               	bsf	11,6	;volatile
  1824                           
  1825                           ;main.c: 380: PIR3bits.TMR6IF = 0 ;
  1826  01C9  0020               	movlb	0	; select bank0
  1827  01CA  1193               	bcf	19,3	;volatile
  1828                           
  1829                           ;main.c: 381: PIE3bits.TMR6IE = 1 ;
  1830  01CB  0021               	movlb	1	; select bank1
  1831  01CC  1593               	bsf	19,3	;volatile
  1832                           
  1833                           ;main.c: 382: T6CONbits.TMR6ON = 1 ;
  1834  01CD  0028               	movlb	8	; select bank8
  1835  01CE  151E               	bsf	30,2	;volatile
  1836  01CF                     l272:	
  1837                           ;main.c: 385: for( ; ; ) {
  1838                           
  1839  01CF  0064               	clrwdt	;# 
  1840                           
  1841                           ;main.c: 391: static UniPortAState prevPortAState = { 0x00 } ;
  1842                           ;main.c: 392: UniPortAState portAState ;
  1843                           ;main.c: 393: UniPortAState keyPressed ;
  1844                           ;main.c: 395: portAState.byte = sampledPortAState_.byte ;
  1845  01D0  0020               	movlb	0	; select bank0
  1846  01D1  0857               	movf	_sampledPortAState_,w
  1847  01D2  00E1               	movwf	??_main
  1848  01D3  0861               	movf	??_main,w
  1849  01D4  0023               	movlb	3	; select bank3
  1850  01D5  00AF               	movwf	main@portAState^(0+384)
  1851                           
  1852                           ;main.c: 397: keyPressed.byte = ( portAState.byte ^ prevPortAState.byte ) & portAState.b
      +                          yte ;
  1853  01D6  082F               	movf	main@portAState^(0+384),w
  1854  01D7  0020               	movlb	0	; select bank0
  1855  01D8  065A               	xorwf	main@prevPortAState,w
  1856  01D9  0023               	movlb	3	; select bank3
  1857  01DA  052F               	andwf	main@portAState^(0+384),w
  1858  01DB  0020               	movlb	0	; select bank0
  1859  01DC  00E1               	movwf	??_main
  1860  01DD  0861               	movf	??_main,w
  1861  01DE  0023               	movlb	3	; select bank3
  1862  01DF  00AB               	movwf	main@keyPressed^(0+384)
  1863                           
  1864                           ;main.c: 398: prevPortAState.byte = portAState.byte ;
  1865  01E0  082F               	movf	main@portAState^(0+384),w
  1866  01E1  0020               	movlb	0	; select bank0
  1867  01E2  00E1               	movwf	??_main
  1868  01E3  0861               	movf	??_main,w
  1869  01E4  00DA               	movwf	main@prevPortAState
  1870                           
  1871                           ;main.c: 400: if( keyPressed.keyMenu ) {
  1872  01E5  0023               	movlb	3	; select bank3
  1873  01E6  1EAB               	btfss	main@keyPressed^(0+384),5
  1874  01E7  29EA               	goto	l275
  1875                           
  1876                           ;main.c: 401: events_.keyPress.menu=1 ;
  1877  01E8  0020               	movlb	0	; select bank0
  1878  01E9  1546               	bsf	_events_,2
  1879  01EA                     l275:	
  1880                           
  1881                           ;main.c: 402: }
  1882                           ;main.c: 404: if( keyPressed.keyUp ) {
  1883  01EA  0023               	movlb	3	; select bank3
  1884  01EB  1FAB               	btfss	main@keyPressed^(0+384),7
  1885  01EC  29F4               	goto	l276
  1886                           
  1887                           ;main.c: 405: if( portAState.keyDown )
  1888  01ED  1F2F               	btfss	main@portAState^(0+384),6
  1889  01EE  29F2               	goto	l277
  1890                           
  1891                           ;main.c: 406: events_.keyPress.bothUpDown=1 ;
  1892  01EF  0020               	movlb	0	; select bank0
  1893  01F0  15C6               	bsf	_events_,3
  1894  01F1  29F4               	goto	l276
  1895  01F2                     l277:	
  1896                           
  1897                           ;main.c: 407: else
  1898                           ;main.c: 408: events_.keyPress.up=1 ;
  1899  01F2  0020               	movlb	0	; select bank0
  1900  01F3  1446               	bsf	_events_,0
  1901  01F4                     l276:	
  1902                           
  1903                           ;main.c: 409: }
  1904                           ;main.c: 411: if( keyPressed.keyDown ) {
  1905  01F4  0023               	movlb	3	; select bank3
  1906  01F5  1F2B               	btfss	main@keyPressed^(0+384),6
  1907  01F6  29FE               	goto	l279
  1908                           
  1909                           ;main.c: 412: if( portAState.keyUp )
  1910  01F7  1FAF               	btfss	main@portAState^(0+384),7
  1911  01F8  29FC               	goto	l280
  1912                           
  1913                           ;main.c: 413: events_.keyPress.bothUpDown=1 ;
  1914  01F9  0020               	movlb	0	; select bank0
  1915  01FA  15C6               	bsf	_events_,3
  1916  01FB  29FE               	goto	l279
  1917  01FC                     l280:	
  1918                           
  1919                           ;main.c: 414: else
  1920                           ;main.c: 415: events_.keyPress.down=1 ;
  1921  01FC  0020               	movlb	0	; select bank0
  1922  01FD  14C6               	bsf	_events_,1
  1923  01FE                     l279:	
  1924                           
  1925                           ;main.c: 416: }
  1926                           ;main.c: 418: if( (events_.keyPress.upHold&&!(events_.keyPress.upHold=0)) )
  1927  01FE  0020               	movlb	0	; select bank0
  1928  01FF  1E46               	btfss	_events_,4
  1929  0200  2A03               	goto	l282
  1930  0201  1246               	bcf	_events_,4
  1931                           
  1932                           ;main.c: 419: events_.keyPress.up=1 ;
  1933  0202  1446               	bsf	_events_,0
  1934  0203                     l282:	
  1935                           
  1936                           ;main.c: 421: if( (events_.keyPress.downHold&&!(events_.keyPress.downHold=0)) )
  1937  0203  1EC6               	btfss	_events_,5
  1938  0204  2A07               	goto	l3509
  1939  0205  12C6               	bcf	_events_,5
  1940                           
  1941                           ;main.c: 422: events_.keyPress.down=1 ;
  1942  0206  14C6               	bsf	_events_,1
  1943  0207                     l3509:	
  1944                           
  1945                           ;main.c: 424: if( events_.keyPress.byte ) {
  1946  0207  0846               	movf	_events_,w
  1947  0208  1D03               	btfss	3,2
  1948                           
  1949                           ;main.c: 425: events_.sound.key=1 ;
  1950  0209  1548               	bsf	_events_+2,2
  1951                           
  1952                           ;main.c: 426: }
  1953                           ;main.c: 429: if( (events_.keyPress.bothUpDown&&!(events_.keyPress.bothUpDown=0)) ) {
  1954  020A  1DC6               	btfss	_events_,3
  1955  020B  2A16               	goto	l285
  1956  020C  11C6               	bcf	_events_,3
  1957                           
  1958                           ;main.c: 430: if( machineState_ == STATE_METRONOME ) {
  1959  020D  0356               	decf	_machineState_,w
  1960  020E  1D03               	btfss	3,2
  1961  020F  2A16               	goto	l285
  1962                           
  1963                           ;main.c: 431: {if(soundState_.isUserMute){soundState_.isUserMute=0;}else{soundState_.isU
      +                          serMute=1;}} ;
  1964  0210  1C58               	btfss	_soundState_,0
  1965  0211  2A14               	goto	l287
  1966  0212  1058               	bcf	_soundState_,0
  1967  0213  2A15               	goto	l288
  1968  0214                     l287:	
  1969  0214  1458               	bsf	_soundState_,0
  1970  0215                     l288:	
  1971                           
  1972                           ;main.c: 432: events_.output.changeMessage=1 ;
  1973  0215  14C7               	bsf	_events_+1,1
  1974  0216                     l285:	
  1975                           
  1976                           ;main.c: 433: }
  1977                           ;main.c: 434: }
  1978                           ;main.c: 437: if( (events_.keyPress.menu&&!(events_.keyPress.menu=0)) ) {
  1979  0216  1D46               	btfss	_events_,2
  1980  0217  2AEF               	goto	l3623
  1981  0218  1146               	bcf	_events_,2
  1982                           
  1983                           ;main.c: 438: events_.output.changeState=1 ;
  1984  0219  1447               	bsf	_events_+1,0
  1985                           
  1986                           ;main.c: 440: switch( machineState_ ) {
  1987  021A  2ACF               	goto	l3621
  1988  021B                     l3523:	
  1989                           ;main.c: 442: case STATE_METRONOME:
  1990                           
  1991                           
  1992                           ;main.c: 443: machineState_ = STATE_MENU_MAIN ;
  1993  021B  3002               	movlw	2
  1994  021C  00E1               	movwf	??_main
  1995  021D  0861               	movf	??_main,w
  1996  021E  00D6               	movwf	_machineState_
  1997                           
  1998                           ;main.c: 444: menuInfoMain_.select = 0 ;
  1999  021F  01BC               	clrf	_menuInfoMain_
  2000                           
  2001                           ;main.c: 445: menuInfoMain_.cursorPosition = 0 ;
  2002  0220  01BD               	clrf	_menuInfoMain_+1
  2003                           
  2004                           ;main.c: 446: break ;
  2005  0221  2AEF               	goto	l3623
  2006  0222                     l3529:	
  2007                           ;main.c: 450: case MENU_ITEM_MAIN_BEAT_COUNT:
  2008                           
  2009                           ;main.c: 449: switch( menuInfoMain_.select ) {
  2010                           
  2011                           ;main.c: 448: case STATE_MENU_MAIN:
  2012                           
  2013                           
  2014                           ;main.c: 451: machineState_ = STATE_ADJUST_VALUE ;
  2015  0222  3005               	movlw	5
  2016  0223  00E1               	movwf	??_main
  2017  0224  0861               	movf	??_main,w
  2018  0225  00D6               	movwf	_machineState_
  2019                           
  2020                           ;main.c: 452: currentValueInfoPtr_ = &valueInfoBeatCount_ ;
  2021  0226  30B0               	movlw	low _valueInfoBeatCount_
  2022  0227  00CE               	movwf	_currentValueInfoPtr_
  2023  0228  3000               	movlw	high _valueInfoBeatCount_
  2024  0229  2A91               	goto	L9
  2025  022A                     l3533:	
  2026                           ;main.c: 455: case MENU_ITEM_MAIN_TONE_MENU:
  2027                           
  2028                           ;main.c: 453: break ;
  2029                           
  2030                           
  2031                           ;main.c: 456: machineState_ = STATE_MENU_TONE ;
  2032  022A  3003               	movlw	3
  2033  022B  00E1               	movwf	??_main
  2034  022C  0861               	movf	??_main,w
  2035  022D  00D6               	movwf	_machineState_
  2036                           
  2037                           ;main.c: 457: menuInfoTone_.select = 0 ;
  2038  022E  01C1               	clrf	_menuInfoTone_
  2039                           
  2040                           ;main.c: 458: menuInfoTone_.cursorPosition = 0 ;
  2041  022F  01C2               	clrf	_menuInfoTone_+1
  2042                           
  2043                           ;main.c: 459: break ;
  2044  0230  2AEF               	goto	l3623
  2045  0231                     l3539:	
  2046                           ;main.c: 461: case MENU_ITEM_MAIN_ADJUST_DURATION:
  2047                           
  2048                           
  2049                           ;main.c: 462: machineState_ = STATE_MENU_DURATION ;
  2050  0231  3004               	movlw	4
  2051  0232  00E1               	movwf	??_main
  2052  0233  0861               	movf	??_main,w
  2053  0234  00D6               	movwf	_machineState_
  2054                           
  2055                           ;main.c: 463: menuInfoDuration_.select = 0 ;
  2056  0235  01B2               	clrf	_menuInfoDuration_
  2057                           
  2058                           ;main.c: 464: menuInfoDuration_.cursorPosition = 0 ;
  2059  0236  01B3               	clrf	_menuInfoDuration_+1
  2060                           
  2061                           ;main.c: 465: break ;
  2062  0237  2AEF               	goto	l3623
  2063  0238                     l3545:	
  2064                           ;main.c: 467: case MENU_ITEM_MAIN_PULSE_WIDTH:
  2065                           
  2066                           
  2067                           ;main.c: 468: currentValueInfoPtr_ = &valueInfoPulseWidth_ ;
  2068  0238  30D0               	movlw	low _valueInfoPulseWidth_
  2069  0239  00CE               	movwf	_currentValueInfoPtr_
  2070  023A  3000               	movlw	high _valueInfoPulseWidth_
  2071  023B  00CF               	movwf	_currentValueInfoPtr_+1
  2072                           
  2073                           ;main.c: 469: machineState_ = STATE_ADJUST_VALUE ;
  2074  023C  3005               	movlw	5
  2075  023D  2ABF               	goto	L23
  2076  023E                     l3549:	
  2077                           ;main.c: 472: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  2078                           
  2079                           ;main.c: 470: break ;
  2080                           
  2081                           
  2082                           ;main.c: 473: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  2083  023E  3006               	movlw	6
  2084  023F  2ABF               	goto	L23
  2085  0240                     l3551:	
  2086                           ;main.c: 476: case MENU_ITEM_MAIN_INFORMATION:
  2087                           
  2088                           ;main.c: 474: break ;
  2089                           
  2090                           
  2091                           ;main.c: 477: machineState_ = STATE_INFORMATION ;
  2092  0240  3007               	movlw	7
  2093  0241  2ABF               	goto	L23
  2094  0242                     l3553:	
  2095                           ;main.c: 480: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  2096                           
  2097                           ;main.c: 478: break ;
  2098                           
  2099                           
  2100                           ;main.c: 481: machineState_ = STATE_CONFIRM ;
  2101  0242  3008               	movlw	8
  2102  0243  00E1               	movwf	??_main
  2103  0244  0861               	movf	??_main,w
  2104  0245  00D6               	movwf	_machineState_
  2105                           
  2106                           ;main.c: 482: confirmationLoad_.isSelectYes = BOOL_FALSE ;
  2107  0246  01AD               	clrf	_confirmationLoad_
  2108                           
  2109                           ;main.c: 483: currentConfirmationInfoPtr_ = &confirmationLoad_ ;
  2110  0247  302D               	movlw	(low (_confirmationLoad_| 0))& (0+255)
  2111  0248  2A59               	goto	L6
  2112  0249                     l3559:	
  2113                           ;main.c: 486: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  2114                           
  2115                           ;main.c: 484: break ;
  2116                           
  2117                           
  2118                           ;main.c: 487: machineState_ = STATE_CONFIRM ;
  2119  0249  3008               	movlw	8
  2120  024A  00E1               	movwf	??_main
  2121  024B  0861               	movf	??_main,w
  2122  024C  00D6               	movwf	_machineState_
  2123                           
  2124                           ;main.c: 488: ConfirmationSave_.isSelectYes = BOOL_FALSE ;
  2125  024D  0021               	movlb	1	; select bank1
  2126  024E  01E6               	clrf	_ConfirmationSave_^(0+128)
  2127                           
  2128                           ;main.c: 489: currentConfirmationInfoPtr_ = &ConfirmationSave_ ;
  2129  024F  30E6               	movlw	(low (_ConfirmationSave_| 0))& (0+255)
  2130  0250  2A58               	goto	L22
  2131  0251                     l3565:	
  2132                           ;main.c: 492: case MENU_ITEM_MAIN_RESET:
  2133                           
  2134                           ;main.c: 490: break ;
  2135                           
  2136                           
  2137                           ;main.c: 493: machineState_ = STATE_CONFIRM ;
  2138  0251  3008               	movlw	8
  2139  0252  00E1               	movwf	??_main
  2140  0253  0861               	movf	??_main,w
  2141  0254  00D6               	movwf	_machineState_
  2142                           
  2143                           ;main.c: 494: confirmationReset_.isSelectYes = BOOL_FALSE ;
  2144  0255  0021               	movlb	1	; select bank1
  2145  0256  01EB               	clrf	_confirmationReset_^(0+128)
  2146                           
  2147                           ;main.c: 495: currentConfirmationInfoPtr_ = &confirmationReset_ ;
  2148  0257  30EB               	movlw	(low (_confirmationReset_| 0))& (0+255)
  2149  0258                     L22:	
  2150  0258  0020               	movlb	0	; select bank0
  2151  0259                     L6:	
  2152  0259  00E1               	movwf	??_main
  2153  025A  0861               	movf	??_main,w
  2154  025B  00D3               	movwf	_currentConfirmationInfoPtr_
  2155                           
  2156                           ;main.c: 496: break ;
  2157  025C  2AEF               	goto	l3623
  2158  025D                     l306:	
  2159                           ;main.c: 499: default:
  2160                           
  2161                           ;main.c: 498: case MENU_ITEM_MAIN_RETURN:
  2162                           
  2163                           
  2164                           ;main.c: 500: machineState_ = STATE_METRONOME ;
  2165  025D  01D6               	clrf	_machineState_
  2166  025E  0AD6               	incf	_machineState_,f
  2167                           
  2168                           ;main.c: 503: }
  2169                           
  2170                           ;main.c: 501: break ;
  2171  025F  2AEF               	goto	l3623
  2172  0260                     l3573:	
  2173  0260  083C               	movf	_menuInfoMain_,w
  2174                           
  2175                           ; Switch size 1, requested type "space"
  2176                           ; Number of cases is 10, Range of values is 0 to 9
  2177                           ; switch strategies available:
  2178                           ; Name         Instructions Cycles
  2179                           ; direct_byte           26     6 (fixed)
  2180                           ; simple_byte           31    16 (average)
  2181                           ; jumptable            260     6 (fixed)
  2182                           ;	Chosen strategy is direct_byte
  2183  0261  0084               	movwf	4
  2184  0262  300A               	movlw	10
  2185  0263  0204               	subwf	4,w
  2186  0264  1803               	skipnc
  2187  0265  2A5D               	goto	l306
  2188  0266  3189               	movlp	high S4087
  2189  0267  3504               	lslf	4,w
  2190  0268  3EC2               	addlw	low S4087
  2191  0269  0082               	movwf	2
  2192                           
  2193                           ;main.c: 504: break ;
  2194  026A  2AEF               	goto	l3623
  2195  026B                     l3575:	
  2196                           ;main.c: 506: case STATE_MENU_TONE:
  2197                           
  2198                           
  2199                           ;main.c: 507: if( menuInfoTone_.select == MENU_ITEM_TONE_RETURN )
  2200  026B  0841               	movf	_menuInfoTone_,w
  2201  026C  1903               	btfsc	3,2
  2202  026D  2A93               	goto	l3591
  2203                           
  2204                           ;main.c: 509: else {
  2205                           ;main.c: 510: machineState_ = STATE_ADJUST_VALUE ;
  2206                           
  2207                           ;main.c: 508: machineState_ = STATE_MENU_MAIN ;
  2208  026E  3005               	movlw	5
  2209  026F  00E1               	movwf	??_main
  2210  0270  0861               	movf	??_main,w
  2211  0271  00D6               	movwf	_machineState_
  2212                           
  2213                           ;main.c: 511: currentValueInfoPtr_ = &valueInfoTone_[ menuInfoTone_.select - MENU_ITEM_T
      +                          ONE_ADJUST_TONE0 ] ;
  2214  0272  0841               	movf	_menuInfoTone_,w
  2215  0273  00E1               	movwf	??_main
  2216  0274  3003               	movlw	3
  2217  0275                     u2785:	
  2218  0275  35E1               	lslf	??_main,f
  2219  0276  0B89               	decfsz	9,f
  2220  0277  2A75               	goto	u2785
  2221  0278  30F8               	movlw	248
  2222  0279  0761               	addwf	??_main,w
  2223  027A  00E2               	movwf	??_main+1
  2224  027B  303C               	movlw	(low (_valueInfoTone_| (0+256)))& (0+255)
  2225  027C  0762               	addwf	??_main+1,w
  2226  027D  00E3               	movwf	??_main+2
  2227  027E  0863               	movf	??_main+2,w
  2228  027F  00CE               	movwf	_currentValueInfoPtr_
  2229  0280  3001               	movlw	1
  2230  0281  2A91               	goto	L9
  2231  0282                     l3583:	
  2232                           ;main.c: 517: case MENU_ITEM_DURATION_ADJUST_CLICK:
  2233                           
  2234                           ;main.c: 516: switch( currentMenuInfoPtr_->select ) {
  2235                           
  2236                           ;main.c: 515: case STATE_MENU_DURATION:
  2237                           
  2238                           ;main.c: 512: }
  2239                           ;main.c: 513: break ;
  2240                           
  2241                           
  2242                           ;main.c: 518: machineState_ = STATE_ADJUST_VALUE ;
  2243  0282  3005               	movlw	5
  2244  0283  00E1               	movwf	??_main
  2245  0284  0861               	movf	??_main,w
  2246  0285  00D6               	movwf	_machineState_
  2247                           
  2248                           ;main.c: 519: currentValueInfoPtr_ = &valueInfoDurationClick_ ;
  2249  0286  30B8               	movlw	low _valueInfoDurationClick_
  2250  0287  00CE               	movwf	_currentValueInfoPtr_
  2251  0288  3000               	movlw	high _valueInfoDurationClick_
  2252  0289  2A91               	goto	L9
  2253  028A                     l3587:	
  2254                           ;main.c: 522: case MENU_ITEM_DURATION_ADJUST_KEY:
  2255                           
  2256                           ;main.c: 520: break ;
  2257                           
  2258                           
  2259                           ;main.c: 523: machineState_ = STATE_ADJUST_VALUE ;
  2260  028A  3005               	movlw	5
  2261  028B  00E1               	movwf	??_main
  2262  028C  0861               	movf	??_main,w
  2263  028D  00D6               	movwf	_machineState_
  2264                           
  2265                           ;main.c: 524: currentValueInfoPtr_ = &valueInfoDurationKey_ ;
  2266  028E  30C0               	movlw	low _valueInfoDurationKey_
  2267  028F  00CE               	movwf	_currentValueInfoPtr_
  2268  0290  3000               	movlw	high _valueInfoDurationKey_
  2269  0291                     L9:	
  2270  0291  00CF               	movwf	_currentValueInfoPtr_+1
  2271                           
  2272                           ;main.c: 525: break ;
  2273  0292  2AEF               	goto	l3623
  2274  0293                     l3591:	
  2275                           ;main.c: 528: default:
  2276                           
  2277                           ;main.c: 527: case MENU_ITEM_DURATION_RETURN:
  2278                           
  2279                           
  2280                           ;main.c: 529: machineState_ = STATE_MENU_MAIN ;
  2281  0293  3002               	movlw	2
  2282  0294  2ABF               	goto	L23
  2283  0295                     l3595:	
  2284                           ;main.c: 532: }
  2285                           
  2286                           ;main.c: 530: break ;
  2287                           
  2288  0295  0854               	movf	_currentMenuInfoPtr_,w
  2289  0296  0086               	movwf	6
  2290  0297  0187               	clrf	7
  2291  0298  0801               	movf	1,w
  2292                           
  2293                           ; Switch size 1, requested type "space"
  2294                           ; Number of cases is 3, Range of values is 0 to 2
  2295                           ; switch strategies available:
  2296                           ; Name         Instructions Cycles
  2297                           ; simple_byte           10     6 (average)
  2298                           ; direct_byte           12     6 (fixed)
  2299                           ; jumptable            260     6 (fixed)
  2300                           ;	Chosen strategy is simple_byte
  2301  0299  3A00               	xorlw	0	; case 0
  2302  029A  1903               	skipnz
  2303  029B  2A93               	goto	l3591
  2304  029C  3A01               	xorlw	1	; case 1
  2305  029D  1903               	skipnz
  2306  029E  2A82               	goto	l3583
  2307  029F  3A03               	xorlw	3	; case 2
  2308  02A0  1903               	skipnz
  2309  02A1  2A8A               	goto	l3587
  2310  02A2  2A93               	goto	l3591
  2311                           
  2312                           ;main.c: 533: break ;
  2313  02A3  2AEF               	goto	l3623
  2314  02A4                     l3597:	
  2315                           ;main.c: 535: case STATE_CONFIRM:
  2316                           
  2317                           
  2318                           ;main.c: 536: if( currentConfirmationInfoPtr_->isSelectYes )
  2319  02A4  0853               	movf	_currentConfirmationInfoPtr_,w
  2320  02A5  0086               	movwf	6
  2321  02A6  0187               	clrf	7
  2322  02A7  0801               	movf	1,w
  2323  02A8  1903               	btfsc	3,2
  2324  02A9  2AAF               	goto	l3601
  2325                           
  2326                           ;main.c: 537: machineState_ = currentConfirmationInfoPtr_->stateYes ;
  2327  02AA  0853               	movf	_currentConfirmationInfoPtr_,w
  2328  02AB  0086               	movwf	6
  2329  02AC  0187               	clrf	7
  2330  02AD  3F41               	moviw [1]fsr1
  2331  02AE  2AC1               	goto	L12
  2332  02AF                     l3601:	
  2333                           
  2334                           ;main.c: 538: else
  2335                           ;main.c: 539: machineState_ = currentConfirmationInfoPtr_->stateNo ;
  2336  02AF  0853               	movf	_currentConfirmationInfoPtr_,w
  2337  02B0  0086               	movwf	6
  2338  02B1  0187               	clrf	7
  2339  02B2  3F42               	moviw [2]fsr1
  2340  02B3  2AC1               	goto	L12
  2341  02B4                     l3603:	
  2342                           ;main.c: 542: case STATE_INFORMATION:
  2343                           
  2344                           ;main.c: 540: break ;
  2345                           
  2346                           
  2347                           ;main.c: 543: machineError_ = STATE_MENU_MAIN ;
  2348  02B4  3002               	movlw	2
  2349  02B5  00E1               	movwf	??_main
  2350  02B6  0861               	movf	??_main,w
  2351  02B7  00D5               	movwf	_machineError_
  2352                           
  2353                           ;main.c: 544: break ;
  2354  02B8  2AEF               	goto	l3623
  2355  02B9                     l3605:	
  2356                           ;main.c: 546: case STATE_ADJUST_VALUE:
  2357                           
  2358                           
  2359                           ;main.c: 547: machineState_ = currentValueInfoPtr_->parentState ;
  2360  02B9  084E               	movf	_currentValueInfoPtr_,w
  2361  02BA  0086               	movwf	6
  2362  02BB  084F               	movf	_currentValueInfoPtr_+1,w
  2363  02BC  0087               	movwf	7
  2364  02BD  3141               	addfsr 1,1
  2365  02BE  0801               	movf	1,w
  2366  02BF                     L23:	
  2367  02BF  00E1               	movwf	??_main
  2368  02C0  0861               	movf	??_main,w
  2369  02C1                     L12:	
  2370  02C1  00D6               	movwf	_machineState_
  2371                           
  2372                           ;main.c: 548: break ;
  2373  02C2  2AEF               	goto	l3623
  2374  02C3                     l3607:	
  2375                           ;main.c: 550: case STATE_ADJUST_OSCILLATOR_TUNE:
  2376                           
  2377                           
  2378                           ;main.c: 551: machineState_ = STATE_MENU_MAIN ;
  2379  02C3  3002               	movlw	2
  2380  02C4  00E1               	movwf	??_main
  2381  02C5  0861               	movf	??_main,w
  2382  02C6  00D6               	movwf	_machineState_
  2383                           
  2384                           ;main.c: 552: soundState_.isBusy = BOOL_FALSE ;
  2385  02C7  1158               	bcf	_soundState_,2
  2386                           
  2387                           ;main.c: 553: events_.sound.off=1 ;
  2388  02C8  1448               	bsf	_events_+2,0
  2389                           
  2390                           ;main.c: 554: break ;
  2391  02C9  2AEF               	goto	l3623
  2392  02CA                     l3613:	
  2393                           ;main.c: 556: case STATE_ERROR:
  2394                           
  2395                           
  2396                           ;main.c: 557: machineError_ = ERROR_NONE ;
  2397  02CA  01D5               	clrf	_machineError_
  2398  02CB                     l3615:	
  2399                           ;main.c: 558: case STATE_INITIALIZE:
  2400                           
  2401                           
  2402                           ;main.c: 559: machineState_ = STATE_METRONOME ;
  2403  02CB  01D6               	clrf	_machineState_
  2404  02CC  0AD6               	incf	_machineState_,f
  2405                           
  2406                           ;main.c: 560: events_.output.resetMetronome=1 ;
  2407  02CD  15C7               	bsf	_events_+1,3
  2408                           
  2409                           ;main.c: 563: }
  2410                           
  2411                           ;main.c: 561: break ;
  2412  02CE  2AEF               	goto	l3623
  2413  02CF                     l3621:	
  2414  02CF  0856               	movf	_machineState_,w
  2415                           
  2416                           ; Switch size 1, requested type "space"
  2417                           ; Number of cases is 10, Range of values is 1 to 13
  2418                           ; switch strategies available:
  2419                           ; Name         Instructions Cycles
  2420                           ; simple_byte           31    16 (average)
  2421                           ; direct_byte           35     9 (fixed)
  2422                           ; jumptable            263     9 (fixed)
  2423                           ;	Chosen strategy is simple_byte
  2424  02D0  3A01               	xorlw	1	; case 1
  2425  02D1  1903               	skipnz
  2426  02D2  2A1B               	goto	l3523
  2427  02D3  3A03               	xorlw	3	; case 2
  2428  02D4  1903               	skipnz
  2429  02D5  2A60               	goto	l3573
  2430  02D6  3A01               	xorlw	1	; case 3
  2431  02D7  1903               	skipnz
  2432  02D8  2A6B               	goto	l3575
  2433  02D9  3A07               	xorlw	7	; case 4
  2434  02DA  1903               	skipnz
  2435  02DB  2A95               	goto	l3595
  2436  02DC  3A01               	xorlw	1	; case 5
  2437  02DD  1903               	skipnz
  2438  02DE  2AB9               	goto	l3605
  2439  02DF  3A03               	xorlw	3	; case 6
  2440  02E0  1903               	skipnz
  2441  02E1  2AC3               	goto	l3607
  2442  02E2  3A01               	xorlw	1	; case 7
  2443  02E3  1903               	skipnz
  2444  02E4  2AB4               	goto	l3603
  2445  02E5  3A0F               	xorlw	15	; case 8
  2446  02E6  1903               	skipnz
  2447  02E7  2AA4               	goto	l3597
  2448  02E8  3A03               	xorlw	3	; case 11
  2449  02E9  1903               	skipnz
  2450  02EA  2ACB               	goto	l3615
  2451  02EB  3A06               	xorlw	6	; case 13
  2452  02EC  1903               	skipnz
  2453  02ED  2ACA               	goto	l3613
  2454  02EE  2AEF               	goto	l3623
  2455  02EF                     l3623:	
  2456                           
  2457                           ;main.c: 565: }
  2458                           ;main.c: 568: if( machineError_ && machineState_ != STATE_ERROR ) {
  2459  02EF  0855               	movf	_machineError_,w
  2460  02F0  1903               	btfsc	3,2
  2461  02F1  2AFC               	goto	l3633
  2462  02F2  300D               	movlw	13
  2463  02F3  0656               	xorwf	_machineState_,w
  2464  02F4  1903               	btfsc	3,2
  2465  02F5  2AFC               	goto	l3633
  2466                           
  2467                           ;main.c: 569: machineState_ = STATE_ERROR ;
  2468  02F6  300D               	movlw	13
  2469  02F7  00E1               	movwf	??_main
  2470  02F8  0861               	movf	??_main,w
  2471  02F9  00D6               	movwf	_machineState_
  2472                           
  2473                           ;main.c: 570: events_.output.byte = 0x00 ;
  2474  02FA  01C7               	clrf	_events_+1
  2475                           
  2476                           ;main.c: 571: events_.output.changeState=1 ;
  2477  02FB  1447               	bsf	_events_+1,0
  2478  02FC                     l3633:	
  2479                           
  2480                           ;main.c: 572: }
  2481                           ;main.c: 575: if( (events_.output.changeState&&!(events_.output.changeState=0)) ) {
  2482  02FC  1C47               	btfss	_events_+1,0
  2483  02FD  2B4B               	goto	l326
  2484  02FE  1047               	bcf	_events_+1,0
  2485                           
  2486                           ;main.c: 577: events_.output.changeMessage=1 ;
  2487  02FF  14C7               	bsf	_events_+1,1
  2488                           
  2489                           ;main.c: 579: switch( machineState_ ) {
  2490  0300  2B41               	goto	l3673
  2491  0301                     l3637:	
  2492                           ;main.c: 580: case STATE_METRONOME:
  2493                           
  2494                           
  2495                           ;main.c: 581: currentValueInfoPtr_ = &valueInfoTempo_ ;
  2496  0301  30D8               	movlw	low _valueInfoTempo_
  2497  0302  00CE               	movwf	_currentValueInfoPtr_
  2498  0303  3000               	movlw	high _valueInfoTempo_
  2499  0304  00CF               	movwf	_currentValueInfoPtr_+1
  2500                           
  2501                           ;main.c: 582: soundState_.isSystemMute = BOOL_FALSE ;
  2502  0305  10D8               	bcf	_soundState_,1
  2503                           
  2504                           ;main.c: 583: break ;
  2505  0306  2B4B               	goto	l326
  2506  0307                     l3641:	
  2507                           ;main.c: 585: case STATE_MENU_MAIN:
  2508                           
  2509                           
  2510                           ;main.c: 586: currentMenuInfoPtr_ = &menuInfoMain_ ;
  2511  0307  303C               	movlw	(low (_menuInfoMain_| 0))& (0+255)
  2512  0308  2B17               	goto	L15
  2513  0309                     l3643:	
  2514                           ;main.c: 589: case STATE_MENU_TONE:
  2515                           
  2516                           ;main.c: 587: break ;
  2517                           
  2518                           
  2519                           ;main.c: 590: currentMenuInfoPtr_ = &menuInfoTone_ ;
  2520  0309  3041               	movlw	(low (_menuInfoTone_| 0))& (0+255)
  2521  030A  2B17               	goto	L15
  2522  030B                     l3645:	
  2523                           ;main.c: 593: case STATE_MENU_DURATION:
  2524                           
  2525                           ;main.c: 591: break ;
  2526                           
  2527                           
  2528                           ;main.c: 594: currentMenuInfoPtr_ = &menuInfoDuration_ ;
  2529  030B  3032               	movlw	(low (_menuInfoDuration_| 0))& (0+255)
  2530  030C  2B17               	goto	L15
  2531  030D                     l3647:	
  2532                           ;main.c: 597: case STATE_ADJUST_OSCILLATOR_TUNE:
  2533                           
  2534                           ;main.c: 595: break ;
  2535                           
  2536                           
  2537                           ;main.c: 598: currentValueInfoPtr_ = &valueInfoOscillatorTune_ ;
  2538  030D  30C8               	movlw	low _valueInfoOscillatorTune_
  2539  030E  00CE               	movwf	_currentValueInfoPtr_
  2540  030F  3000               	movlw	high _valueInfoOscillatorTune_
  2541  0310  00CF               	movwf	_currentValueInfoPtr_+1
  2542                           
  2543                           ;main.c: 599: soundState_.isBusy = BOOL_TRUE ;
  2544  0311  1558               	bsf	_soundState_,2
  2545                           
  2546                           ;main.c: 600: events_.sound.oscillatorTune=1 ;
  2547  0312  15C8               	bsf	_events_+2,3
  2548                           
  2549                           ;main.c: 601: break ;
  2550  0313  2B4B               	goto	l326
  2551  0314                     l3653:	
  2552                           ;main.c: 603: case STATE_INFORMATION:
  2553                           
  2554                           
  2555                           ;main.c: 604: menuInfoInformation_.select = 0 ;
  2556  0314  01B7               	clrf	_menuInfoInformation_
  2557                           
  2558                           ;main.c: 605: menuInfoInformation_.cursorPosition = 0 ;
  2559  0315  01B8               	clrf	_menuInfoInformation_+1
  2560                           
  2561                           ;main.c: 606: currentMenuInfoPtr_ = &menuInfoInformation_ ;
  2562  0316  3037               	movlw	(low (_menuInfoInformation_| 0))& (0+255)
  2563  0317                     L15:	
  2564  0317  00E1               	movwf	??_main
  2565  0318  0861               	movf	??_main,w
  2566  0319  00D4               	movwf	_currentMenuInfoPtr_
  2567                           
  2568                           ;main.c: 607: break ;
  2569  031A  2B4B               	goto	l326
  2570  031B                     l338:	
  2571                           ;main.c: 609: case STATE_BOOT:
  2572                           
  2573                           
  2574                           ;main.c: 610: case STATE_INITIALIZE:
  2575                           ;main.c: 611: case STATE_LOAD:
  2576                           ;main.c: 612: case STATE_SAVE:
  2577                           ;main.c: 613: soundState_.isSystemMute = BOOL_TRUE ;
  2578  031B  14D8               	bsf	_soundState_,1
  2579                           
  2580                           ;main.c: 614: events_.sound.off=1 ;
  2581  031C  1448               	bsf	_events_+2,0
  2582                           
  2583                           ;main.c: 615: events_.output.accessEeprom=1 ;
  2584  031D  1647               	bsf	_events_+1,4
  2585                           
  2586                           ;main.c: 616: break ;
  2587  031E  2B4B               	goto	l326
  2588  031F                     l3657:	
  2589                           ;main.c: 618: case STATE_RESET:
  2590                           
  2591                           
  2592                           ;main.c: 619: ParallelLCD_ClearDisplay( ) ;
  2593  031F  318C  24D8  3180   	fcall	_ParallelLCD_ClearDisplay
  2594  0322  0001               	reset	;# 
  2595  0323                     l3659:	
  2596                           ;main.c: 622: case STATE_ERROR:
  2597                           
  2598                           
  2599                           ;main.c: 623: soundState_.isSystemMute = BOOL_TRUE ;
  2600  0323  0020               	movlb	0	; select bank0
  2601  0324  14D8               	bsf	_soundState_,1
  2602                           
  2603                           ;main.c: 624: events_.sound.off=1 ;
  2604  0325  1448               	bsf	_events_+2,0
  2605                           
  2606                           ;main.c: 625: switch( machineError_ ) {
  2607  0326  2B38               	goto	l3669
  2608  0327                     l3663:	
  2609                           ;main.c: 626: case ERROR_EEPROM:
  2610                           
  2611                           
  2612                           ;main.c: 627: currentSingleMessage_ = MESSAGE.ERROR.EEPROM ;
  2613  0327  3010               	movlw	low ((_MESSAGE+16)| (0+32768))
  2614  0328  0084               	movwf	4
  2615  0329  3088               	movlw	high ((_MESSAGE+16)| (0+32768))
  2616  032A  0085               	movwf	5
  2617  032B  3F00               	moviw [0]fsr0
  2618  032C  00CC               	movwf	_currentSingleMessage_
  2619  032D  3F01               	moviw [1]fsr0
  2620  032E  2B36               	goto	L16
  2621  032F                     l3665:	
  2622                           ;main.c: 629: case ERROR_INTERRUPT:
  2623                           
  2624                           ;main.c: 628: break ;
  2625                           
  2626                           
  2627                           ;main.c: 630: currentSingleMessage_ = MESSAGE.ERROR.INTERRUPT ;
  2628  032F  3012               	movlw	low ((_MESSAGE+18)| (0+32768))
  2629  0330  0084               	movwf	4
  2630  0331  3088               	movlw	high ((_MESSAGE+18)| (0+32768))
  2631  0332  0085               	movwf	5
  2632  0333  3F00               	moviw [0]fsr0
  2633  0334  00CC               	movwf	_currentSingleMessage_
  2634  0335  3F01               	moviw [1]fsr0
  2635  0336                     L16:	
  2636  0336  00CD               	movwf	_currentSingleMessage_+1
  2637                           
  2638                           ;main.c: 632: }
  2639                           
  2640                           ;main.c: 631: break ;
  2641  0337  2B4B               	goto	l326
  2642  0338                     l3669:	
  2643  0338  0855               	movf	_machineError_,w
  2644                           
  2645                           ; Switch size 1, requested type "space"
  2646                           ; Number of cases is 2, Range of values is 1 to 2
  2647                           ; switch strategies available:
  2648                           ; Name         Instructions Cycles
  2649                           ; simple_byte            7     4 (average)
  2650                           ; direct_byte           13     9 (fixed)
  2651                           ; jumptable            263     9 (fixed)
  2652                           ;	Chosen strategy is simple_byte
  2653  0339  3A01               	xorlw	1	; case 1
  2654  033A  1903               	skipnz
  2655  033B  2B27               	goto	l3663
  2656  033C  3A03               	xorlw	3	; case 2
  2657  033D  1903               	skipnz
  2658  033E  2B2F               	goto	l3665
  2659  033F  2B4B               	goto	l326
  2660                           
  2661                           ;main.c: 635: }
  2662                           
  2663                           ;main.c: 633: break ;
  2664  0340  2B4B               	goto	l326
  2665  0341                     l3673:	
  2666  0341  0856               	movf	_machineState_,w
  2667                           
  2668                           ; Switch size 1, requested type "space"
  2669                           ; Number of cases is 12, Range of values is 0 to 13
  2670                           ; switch strategies available:
  2671                           ; Name         Instructions Cycles
  2672                           ; direct_byte           34     6 (fixed)
  2673                           ; simple_byte           37    19 (average)
  2674                           ; jumptable            260     6 (fixed)
  2675                           ;	Chosen strategy is direct_byte
  2676  0342  0084               	movwf	4
  2677  0343  300E               	movlw	14
  2678  0344  0204               	subwf	4,w
  2679  0345  1803               	skipnc
  2680  0346  2B4B               	goto	l326
  2681  0347  3189               	movlp	high S4089
  2682  0348  3504               	lslf	4,w
  2683  0349  3E8C               	addlw	low S4089
  2684  034A  0082               	movwf	2
  2685  034B                     l326:	
  2686                           
  2687                           ;main.c: 637: }
  2688                           ;main.c: 641: INTCONbits.GIE=0 ;
  2689  034B  138B               	bcf	11,7	;volatile
  2690                           
  2691                           ;main.c: 642: if( (events_.output.resetMetronome&&!(events_.output.resetMetronome=0)) ) 
      +                          {
  2692  034C  1DC7               	btfss	_events_+1,3
  2693  034D  2B57               	goto	l3683
  2694  034E  11C7               	bcf	_events_+1,3
  2695                           
  2696                           ;main.c: 643: tempoCounter_ = 0 ;
  2697  034F  3000               	movlw	0
  2698  0350  00C9               	movwf	_tempoCounter_
  2699  0351  3000               	movlw	0
  2700  0352  00CA               	movwf	_tempoCounter_+1
  2701  0353  3000               	movlw	0
  2702  0354  00CB               	movwf	_tempoCounter_+2
  2703                           
  2704                           ;main.c: 644: beatCounter_ = 0 ;
  2705  0355  01D2               	clrf	_beatCounter_
  2706  0356  2B84               	goto	L17
  2707  0357                     l3683:	
  2708                           ;main.c: 646: }
  2709                           
  2710                           ;main.c: 645: events_.sound.click=1 ;
  2711                           
  2712                           
  2713                           ;main.c: 647: else {
  2714                           ;main.c: 648: if( tempoCounter_ >= ( 32000000UL * 3 / 20 ) ) {
  2715  0357  3049               	movlw	73
  2716  0358  024B               	subwf	_tempoCounter_+2,w
  2717  0359  1D03               	skipz
  2718  035A  2B61               	goto	u2845
  2719  035B  303E               	movlw	62
  2720  035C  024A               	subwf	_tempoCounter_+1,w
  2721  035D  1D03               	skipz
  2722  035E  2B61               	goto	u2845
  2723  035F  3000               	movlw	0
  2724  0360  0249               	subwf	_tempoCounter_,w
  2725  0361                     u2845:	
  2726  0361  1C03               	skipc
  2727  0362  2B85               	goto	l3693
  2728                           
  2729                           ;main.c: 649: tempoCounter_ -= ( 32000000UL * 3 / 20 ) ;
  2730  0363  3000               	movlw	0
  2731  0364  00E1               	movwf	??_main
  2732  0365  303E               	movlw	62
  2733  0366  00E2               	movwf	??_main+1
  2734  0367  3049               	movlw	73
  2735  0368  00E3               	movwf	??_main+2
  2736  0369  0861               	movf	??_main,w
  2737  036A  02C9               	subwf	_tempoCounter_,f
  2738  036B  0862               	movf	??_main+1,w
  2739  036C  3BCA               	subwfb	_tempoCounter_+1,f
  2740  036D  0863               	movf	??_main+2,w
  2741  036E  3BCB               	subwfb	_tempoCounter_+2,f
  2742                           
  2743                           ;main.c: 650: if( ++beatCounter_ >= ( configration_.beatCount << 1 ) )
  2744  036F  0824               	movf	_configration_+4,w
  2745  0370  00E1               	movwf	??_main
  2746  0371  01E2               	clrf	??_main+1
  2747  0372  35E1               	lslf	??_main,f
  2748  0373  0DE2               	rlf	??_main+1,f
  2749  0374  3001               	movlw	1
  2750  0375  00E3               	movwf	??_main+2
  2751  0376  0863               	movf	??_main+2,w
  2752  0377  07D2               	addwf	_beatCounter_,f
  2753  0378  0862               	movf	??_main+1,w
  2754  0379  3A80               	xorlw	128
  2755  037A  3C80               	sublw	128
  2756  037B  1D03               	skipz
  2757  037C  2B7F               	goto	u2855
  2758  037D  0861               	movf	??_main,w
  2759  037E  0252               	subwf	_beatCounter_,w
  2760  037F                     u2855:	
  2761  037F  1C03               	skipc
  2762  0380  2B83               	goto	l3691
  2763                           
  2764                           ;main.c: 651: beatCounter_ = 0 ;
  2765  0381  0020               	movlb	0	; select bank0
  2766  0382  01D2               	clrf	_beatCounter_
  2767  0383                     l3691:	
  2768                           
  2769                           ;main.c: 653: events_.sound.click=1 ;
  2770  0383  0020               	movlb	0	; select bank0
  2771  0384                     L17:	
  2772  0384  14C8               	bsf	_events_+2,1
  2773  0385                     l3693:	
  2774                           
  2775                           ;main.c: 654: }
  2776                           ;main.c: 655: }
  2777                           ;main.c: 656: INTCONbits.GIE=1 ;
  2778  0385  178B               	bsf	11,7	;volatile
  2779                           
  2780                           ;main.c: 659: if( (events_.sound.key&&!(events_.sound.key=0)) ) {
  2781  0386  1D48               	btfss	_events_+2,2
  2782  0387  2B97               	goto	l3707
  2783  0388  1148               	bcf	_events_+2,2
  2784                           
  2785                           ;main.c: 660: if( !soundState_.byte ) {
  2786  0389  0858               	movf	_soundState_,w
  2787  038A  1D03               	btfss	3,2
  2788  038B  2B97               	goto	l3707
  2789                           
  2790                           ;main.c: 661: soundDurationCount_.key = configration_.duration.key ;
  2791  038C  0826               	movf	_configration_+6,w
  2792  038D  00E1               	movwf	??_main
  2793  038E  0861               	movf	??_main,w
  2794  038F  00D1               	movwf	_soundDurationCount_+1
  2795                           
  2796                           ;main.c: 662: PR2 = 124 ;
  2797  0390  307C               	movlw	124
  2798  0391  009B               	movwf	27	;volatile
  2799                           
  2800                           ;main.c: 663: {CCPR4L=(PR2>>1);} ;
  2801  0392  361B               	lsrf	27,w	;volatile
  2802  0393  0026               	movlb	6	; select bank6
  2803  0394  0098               	movwf	24	;volatile
  2804                           
  2805                           ;main.c: 664: T2CONbits.TMR2ON = 1 ;
  2806  0395  0020               	movlb	0	; select bank0
  2807  0396  151C               	bsf	28,2	;volatile
  2808  0397                     l3707:	
  2809                           
  2810                           ;main.c: 665: }
  2811                           ;main.c: 666: }
  2812                           ;main.c: 669: if( (events_.sound.click&&!(events_.sound.click=0)) ) {
  2813  0397  1CC8               	btfss	_events_+2,1
  2814  0398  2BBD               	goto	l3731
  2815  0399  10C8               	bcf	_events_+2,1
  2816                           
  2817                           ;main.c: 671: if( !soundState_.byte && !soundDurationCount_.key ) {
  2818  039A  0858               	movf	_soundState_,w
  2819  039B  1D03               	btfss	3,2
  2820  039C  2BBD               	goto	l3731
  2821  039D  0851               	movf	_soundDurationCount_+1,w
  2822  039E  1D03               	btfss	3,2
  2823  039F  2BBD               	goto	l3731
  2824                           
  2825                           ;main.c: 673: soundDurationCount_.click = configration_.duration.click ;
  2826  03A0  0825               	movf	_configration_+5,w
  2827  03A1  00E1               	movwf	??_main
  2828  03A2  0861               	movf	??_main,w
  2829  03A3  00D0               	movwf	_soundDurationCount_
  2830                           
  2831                           ;main.c: 675: if( beatCounter_ == 0 )
  2832  03A4  0852               	movf	_beatCounter_,w
  2833  03A5  1D03               	btfss	3,2
  2834  03A6  2BA9               	goto	l3721
  2835                           
  2836                           ;main.c: 676: PR2 = configration_.tone[ 1 ] ;
  2837  03A7  0828               	movf	_configration_+8,w
  2838  03A8  2BB0               	goto	L19
  2839  03A9                     l3721:	
  2840                           
  2841                           ;main.c: 677: else if( beatCounter_ == configration_.beatCount )
  2842  03A9  0824               	movf	_configration_+4,w
  2843  03AA  0652               	xorwf	_beatCounter_,w
  2844  03AB  1D03               	skipz
  2845  03AC  2BAF               	goto	l3725
  2846                           
  2847                           ;main.c: 678: PR2 = configration_.tone[ 2 ] ;
  2848  03AD  0829               	movf	_configration_+9,w
  2849  03AE  2BB0               	goto	L19
  2850  03AF                     l3725:	
  2851                           
  2852                           ;main.c: 679: else
  2853                           ;main.c: 680: PR2 = configration_.tone[ 0 ] ;
  2854  03AF  0827               	movf	_configration_+7,w
  2855  03B0                     L19:	
  2856  03B0  009B               	movwf	27	;volatile
  2857                           
  2858                           ;main.c: 682: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  2859  03B1  081B               	movf	27,w	;volatile
  2860  03B2  00E1               	movwf	??_main
  2861  03B3  0A2A               	incf	_configration_+10,w
  2862  03B4  2BB6               	goto	u2934
  2863  03B5                     u2935:	
  2864  03B5  36E1               	lsrf	??_main,f
  2865  03B6                     u2934:	
  2866  03B6  0B89               	decfsz	9,f
  2867  03B7  2BB5               	goto	u2935
  2868  03B8  0861               	movf	??_main,w
  2869  03B9  0026               	movlb	6	; select bank6
  2870  03BA  0098               	movwf	24	;volatile
  2871                           
  2872                           ;main.c: 683: T2CONbits.TMR2ON = 1 ;
  2873  03BB  0020               	movlb	0	; select bank0
  2874  03BC  151C               	bsf	28,2	;volatile
  2875  03BD                     l3731:	
  2876                           
  2877                           ;main.c: 684: }
  2878                           ;main.c: 686: }
  2879                           ;main.c: 689: if( (events_.sound.oscillatorTune&&!(events_.sound.oscillatorTune=0)) ) {
  2880  03BD  1DC8               	btfss	_events_+2,3
  2881  03BE  2BC7               	goto	l3741
  2882  03BF  11C8               	bcf	_events_+2,3
  2883                           
  2884                           ;main.c: 690: PR2 = 141 ;
  2885  03C0  308D               	movlw	141
  2886  03C1  009B               	movwf	27	;volatile
  2887                           
  2888                           ;main.c: 691: {CCPR4L=(PR2>>1);} ;
  2889  03C2  361B               	lsrf	27,w	;volatile
  2890  03C3  0026               	movlb	6	; select bank6
  2891  03C4  0098               	movwf	24	;volatile
  2892                           
  2893                           ;main.c: 692: T2CONbits.TMR2ON = 1 ;
  2894  03C5  0020               	movlb	0	; select bank0
  2895  03C6  151C               	bsf	28,2	;volatile
  2896  03C7                     l3741:	
  2897                           
  2898                           ;main.c: 693: }
  2899                           ;main.c: 696: if( (events_.sound.off&&!(events_.sound.off=0)) ) {
  2900  03C7  1C48               	btfss	_events_+2,0
  2901  03C8  2BCD               	goto	l3749
  2902  03C9  1048               	bcf	_events_+2,0
  2903                           
  2904                           ;main.c: 697: soundDurationCount_.click = 0 ;
  2905  03CA  01D0               	clrf	_soundDurationCount_
  2906                           
  2907                           ;main.c: 698: soundDurationCount_.key = 0 ;
  2908  03CB  01D1               	clrf	_soundDurationCount_+1
  2909                           
  2910                           ;main.c: 699: T2CONbits.TMR2ON = 0 ;
  2911  03CC  111C               	bcf	28,2	;volatile
  2912  03CD                     l3749:	
  2913                           
  2914                           ;main.c: 700: }
  2915                           ;main.c: 703: if( (events_.output.accessEeprom&&!(events_.output.accessEeprom=0)) ) {
  2916  03CD  1E47               	btfss	_events_+1,4
  2917  03CE  2C99               	goto	l359
  2918  03CF  1247               	bcf	_events_+1,4
  2919                           
  2920                           ;main.c: 705: INTCONbits.GIE=0 ;
  2921  03D0  138B               	bcf	11,7	;volatile
  2922                           
  2923                           ;main.c: 707: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  2924  03D1  0023               	movlb	3	; select bank3
  2925  03D2  01AD               	clrf	main@returnCode^(0+384)
  2926                           
  2927                           ;main.c: 709: events_.output.resetMetronome=1 ;
  2928  03D3  0020               	movlb	0	; select bank0
  2929  03D4  15C7               	bsf	_events_+1,3
  2930                           
  2931                           ;main.c: 710: events_.output.changeMessage=1 ;
  2932  03D5  14C7               	bsf	_events_+1,1
  2933                           
  2934                           ;main.c: 711: stateReturnCounter_ = 100 ;
  2935  03D6  3064               	movlw	100
  2936  03D7  00E1               	movwf	??_main
  2937  03D8  0861               	movf	??_main,w
  2938  03D9  00D9               	movwf	_stateReturnCounter_
  2939                           
  2940                           ;main.c: 713: switch( machineState_ ) {
  2941  03DA  2C1F               	goto	l3779
  2942  03DB                     l3761:	
  2943                           ;main.c: 715: case STATE_BOOT:
  2944                           
  2945                           
  2946                           ;main.c: 716: returnCode = Configuration_Load( &configration_ ) ;
  2947  03DB  3020               	movlw	(low (_configration_| 0))& (0+255)
  2948  03DC  318E  269D  3180   	fcall	_Configuration_Load
  2949  03DF  0020               	movlb	0	; select bank0
  2950  03E0  00E1               	movwf	??_main
  2951  03E1  0861               	movf	??_main,w
  2952  03E2  0023               	movlb	3	; select bank3
  2953  03E3  00AD               	movwf	main@returnCode^(0+384)
  2954                           
  2955                           ;main.c: 717: stateReturnCounter_ = 1 ;
  2956  03E4  0020               	movlb	0	; select bank0
  2957  03E5  01D9               	clrf	_stateReturnCounter_
  2958  03E6  0AD9               	incf	_stateReturnCounter_,f
  2959                           
  2960                           ;main.c: 718: break ;
  2961  03E7  2C2D               	goto	l3781
  2962  03E8                     l3765:	
  2963                           ;main.c: 720: case STATE_LOAD:
  2964                           
  2965                           
  2966                           ;main.c: 721: returnCode = Configuration_Load( &configration_ ) ;
  2967  03E8  3020               	movlw	(low (_configration_| 0))& (0+255)
  2968  03E9  318E  269D  3180   	fcall	_Configuration_Load
  2969  03EC  0020               	movlb	0	; select bank0
  2970  03ED  00E1               	movwf	??_main
  2971  03EE  0861               	movf	??_main,w
  2972  03EF  0023               	movlb	3	; select bank3
  2973  03F0  00AD               	movwf	main@returnCode^(0+384)
  2974                           
  2975                           ;main.c: 722: currentSingleMessage_ = MESSAGE.MEMORY.LOAD ;
  2976  03F1  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  2977  03F2  0084               	movwf	4
  2978  03F3  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  2979  03F4  0085               	movwf	5
  2980  03F5  3F00               	moviw [0]fsr0
  2981  03F6  0020               	movlb	0	; select bank0
  2982  03F7  00CC               	movwf	_currentSingleMessage_
  2983  03F8  3F01               	moviw [1]fsr0
  2984  03F9  2C1D               	goto	L21
  2985  03FA                     l3769:	
  2986                           ;main.c: 725: case STATE_INITIALIZE:
  2987                           
  2988                           ;main.c: 723: break ;
  2989                           
  2990                           
  2991                           ;main.c: 726: returnCode = Configuration_Save( &configration_ ) ;
  2992  03FA  3020               	movlw	(low (_configration_| 0))& (0+255)
  2993  03FB  318F  275F  3180   	fcall	_Configuration_Save
  2994  03FE  0020               	movlb	0	; select bank0
  2995  03FF  00E1               	movwf	??_main
  2996  0400  0861               	movf	??_main,w
  2997  0401  0023               	movlb	3	; select bank3
  2998  0402  00AD               	movwf	main@returnCode^(0+384)
  2999                           
  3000                           ;main.c: 727: currentSingleMessage_ = MESSAGE.MEMORY.INITIALIZE ;
  3001  0403  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  3002  0404  0084               	movwf	4
  3003  0405  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  3004  0406  0085               	movwf	5
  3005  0407  3F00               	moviw [0]fsr0
  3006  0408  0020               	movlb	0	; select bank0
  3007  0409  00CC               	movwf	_currentSingleMessage_
  3008  040A  3F01               	moviw [1]fsr0
  3009  040B  2C1D               	goto	L21
  3010  040C                     l3773:	
  3011                           ;main.c: 730: case STATE_SAVE:
  3012                           
  3013                           ;main.c: 728: break ;
  3014                           
  3015                           
  3016                           ;main.c: 731: returnCode = Configuration_Save( &configration_ ) ;
  3017  040C  3020               	movlw	(low (_configration_| 0))& (0+255)
  3018  040D  318F  275F  3180   	fcall	_Configuration_Save
  3019  0410  0020               	movlb	0	; select bank0
  3020  0411  00E1               	movwf	??_main
  3021  0412  0861               	movf	??_main,w
  3022  0413  0023               	movlb	3	; select bank3
  3023  0414  00AD               	movwf	main@returnCode^(0+384)
  3024                           
  3025                           ;main.c: 732: currentSingleMessage_ = MESSAGE.MEMORY.SAVE ;
  3026  0415  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  3027  0416  0084               	movwf	4
  3028  0417  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  3029  0418  0085               	movwf	5
  3030  0419  3F00               	moviw [0]fsr0
  3031  041A  0020               	movlb	0	; select bank0
  3032  041B  00CC               	movwf	_currentSingleMessage_
  3033  041C  3F01               	moviw [1]fsr0
  3034  041D                     L21:	
  3035  041D  00CD               	movwf	_currentSingleMessage_+1
  3036                           
  3037                           ;main.c: 735: }
  3038                           
  3039                           ;main.c: 733: break ;
  3040  041E  2C2D               	goto	l3781
  3041  041F                     l3779:	
  3042  041F  0856               	movf	_machineState_,w
  3043                           
  3044                           ; Switch size 1, requested type "space"
  3045                           ; Number of cases is 4, Range of values is 0 to 11
  3046                           ; switch strategies available:
  3047                           ; Name         Instructions Cycles
  3048                           ; simple_byte           13     7 (average)
  3049                           ; direct_byte           30     6 (fixed)
  3050                           ; jumptable            260     6 (fixed)
  3051                           ;	Chosen strategy is simple_byte
  3052  0420  3A00               	xorlw	0	; case 0
  3053  0421  1903               	skipnz
  3054  0422  2BDB               	goto	l3761
  3055  0423  3A09               	xorlw	9	; case 9
  3056  0424  1903               	skipnz
  3057  0425  2C0C               	goto	l3773
  3058  0426  3A03               	xorlw	3	; case 10
  3059  0427  1903               	skipnz
  3060  0428  2BE8               	goto	l3765
  3061  0429  3A01               	xorlw	1	; case 11
  3062  042A  1903               	skipnz
  3063  042B  2BFA               	goto	l3769
  3064  042C  2C2D               	goto	l3781
  3065  042D                     l3781:	
  3066                           
  3067                           ;main.c: 737: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ conf
      +                          igration_.romOffset >> 4 ] ;
  3068  042D  0821               	movf	_configration_+1,w
  3069  042E  00E1               	movwf	??_main
  3070  042F  3004               	movlw	4
  3071  0430                     u2975:	
  3072  0430  36E1               	lsrf	??_main,f
  3073  0431  0B89               	decfsz	9,f
  3074  0432  2C30               	goto	u2975
  3075  0433  0861               	movf	??_main,w
  3076  0434  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  3077  0435  0084               	movwf	4
  3078  0436  3088               	movlw	high (_HEX_TABLE| (0+32768))
  3079  0437  1803               	skipnc
  3080  0438  3E01               	addlw	1
  3081  0439  0085               	movwf	5
  3082  043A  0800               	movf	0,w	;code access
  3083  043B  00E2               	movwf	??_main+1
  3084  043C  0862               	movf	??_main+1,w
  3085  043D  0022               	movlb	2	; select bank2
  3086  043E  00AB               	movwf	(_informationValueBuffer^(0+256)+11)
  3087                           
  3088                           ;main.c: 738: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][5] = HEX_TABLE[ conf
      +                          igration_.romOffset & 0x0F ] ;
  3089  043F  0020               	movlb	0	; select bank0
  3090  0440  0821               	movf	_configration_+1,w
  3091  0441  390F               	andlw	15
  3092  0442  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  3093  0443  0084               	movwf	4
  3094  0444  3088               	movlw	high (_HEX_TABLE| (0+32768))
  3095  0445  1803               	skipnc
  3096  0446  3E01               	addlw	1
  3097  0447  0085               	movwf	5
  3098  0448  0800               	movf	0,w	;code access
  3099  0449  00E1               	movwf	??_main
  3100  044A  0861               	movf	??_main,w
  3101  044B  0022               	movlb	2	; select bank2
  3102  044C  00AC               	movwf	(_informationValueBuffer^(0+256)+12)
  3103                           
  3104                           ;main.c: 739: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          figration_.writeCount >> 4 ] ;
  3105  044D  0020               	movlb	0	; select bank0
  3106  044E  0820               	movf	_configration_,w
  3107  044F  00E1               	movwf	??_main
  3108  0450  3004               	movlw	4
  3109  0451                     u2985:	
  3110  0451  36E1               	lsrf	??_main,f
  3111  0452  0B89               	decfsz	9,f
  3112  0453  2C51               	goto	u2985
  3113  0454  0861               	movf	??_main,w
  3114  0455  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  3115  0456  0084               	movwf	4
  3116  0457  3088               	movlw	high (_HEX_TABLE| (0+32768))
  3117  0458  1803               	skipnc
  3118  0459  3E01               	addlw	1
  3119  045A  0085               	movwf	5
  3120  045B  0800               	movf	0,w	;code access
  3121  045C  00E2               	movwf	??_main+1
  3122  045D  0862               	movf	??_main+1,w
  3123  045E  0022               	movlb	2	; select bank2
  3124  045F  00B2               	movwf	(_informationValueBuffer^(0+256)+18)
  3125                           
  3126                           ;main.c: 740: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][5] = HEX_TABLE[ con
      +                          figration_.writeCount & 0x0F ] ;
  3127  0460  0020               	movlb	0	; select bank0
  3128  0461  0820               	movf	_configration_,w
  3129  0462  390F               	andlw	15
  3130  0463  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  3131  0464  0084               	movwf	4
  3132  0465  3088               	movlw	high (_HEX_TABLE| (0+32768))
  3133  0466  1803               	skipnc
  3134  0467  3E01               	addlw	1
  3135  0468  0085               	movwf	5
  3136  0469  0800               	movf	0,w	;code access
  3137  046A  00E1               	movwf	??_main
  3138  046B  0861               	movf	??_main,w
  3139  046C  0022               	movlb	2	; select bank2
  3140  046D  00B3               	movwf	(_informationValueBuffer^(0+256)+19)
  3141                           
  3142                           ;main.c: 741: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  3143  046E  0023               	movlb	3	; select bank3
  3144  046F  082D               	movf	main@returnCode^(0+384),w
  3145  0470  0020               	movlb	0	; select bank0
  3146  0471  00E1               	movwf	??_main
  3147  0472  3004               	movlw	4
  3148  0473                     u2995:	
  3149  0473  36E1               	lsrf	??_main,f
  3150  0474  0B89               	decfsz	9,f
  3151  0475  2C73               	goto	u2995
  3152  0476  0861               	movf	??_main,w
  3153  0477  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  3154  0478  0084               	movwf	4
  3155  0479  3088               	movlw	high (_HEX_TABLE| (0+32768))
  3156  047A  1803               	skipnc
  3157  047B  3E01               	addlw	1
  3158  047C  0085               	movwf	5
  3159  047D  0800               	movf	0,w	;code access
  3160  047E  00E2               	movwf	??_main+1
  3161  047F  0862               	movf	??_main+1,w
  3162  0480  0022               	movlb	2	; select bank2
  3163  0481  00B9               	movwf	(_informationValueBuffer^(0+256)+25)
  3164                           
  3165                           ;main.c: 742: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][5] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  3166  0482  0023               	movlb	3	; select bank3
  3167  0483  082D               	movf	main@returnCode^(0+384),w
  3168  0484  390F               	andlw	15
  3169  0485  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  3170  0486  0084               	movwf	4
  3171  0487  3088               	movlw	high (_HEX_TABLE| (0+32768))
  3172  0488  1803               	skipnc
  3173  0489  3E01               	addlw	1
  3174  048A  0085               	movwf	5
  3175  048B  0800               	movf	0,w	;code access
  3176  048C  0020               	movlb	0	; select bank0
  3177  048D  00E1               	movwf	??_main
  3178  048E  0861               	movf	??_main,w
  3179  048F  0022               	movlb	2	; select bank2
  3180  0490  00BA               	movwf	(_informationValueBuffer^(0+256)+26)
  3181                           
  3182                           ;main.c: 744: if( returnCode )
  3183  0491  0023               	movlb	3	; select bank3
  3184  0492  082D               	movf	main@returnCode^(0+384),w
  3185  0493  1903               	btfsc	3,2
  3186  0494  2C98               	goto	l366
  3187                           
  3188                           ;main.c: 745: machineError_ = ERROR_EEPROM ;
  3189  0495  0020               	movlb	0	; select bank0
  3190  0496  01D5               	clrf	_machineError_
  3191  0497  0AD5               	incf	_machineError_,f
  3192  0498                     l366:	
  3193                           
  3194                           ;main.c: 747: INTCONbits.GIE=1 ;
  3195  0498  178B               	bsf	11,7	;volatile
  3196  0499                     l359:	
  3197                           
  3198                           ;main.c: 749: }
  3199                           ;main.c: 752: if( (events_.keyPress.up&&!(events_.keyPress.up=0)) ) {
  3200  0499  0020               	movlb	0	; select bank0
  3201  049A  1C46               	btfss	_events_,0
  3202  049B  2CF9               	goto	l367
  3203  049C  1046               	bcf	_events_,0
  3204                           
  3205                           ;main.c: 753: switch( machineState_ ) {
  3206  049D  2CEC               	goto	l3827
  3207  049E                     l3797:	
  3208                           ;main.c: 754: case STATE_MENU_MAIN:
  3209                           
  3210                           
  3211                           ;main.c: 755: case STATE_MENU_TONE:
  3212                           ;main.c: 756: case STATE_MENU_DURATION:
  3213                           ;main.c: 757: case STATE_INFORMATION:
  3214                           ;main.c: 758: if( currentMenuInfoPtr_->select ) {
  3215  049E  0854               	movf	_currentMenuInfoPtr_,w
  3216  049F  0086               	movwf	6
  3217  04A0  0187               	clrf	7
  3218  04A1  0801               	movf	1,w
  3219  04A2  1903               	btfsc	3,2
  3220  04A3  2CF9               	goto	l367
  3221                           
  3222                           ;main.c: 759: currentMenuInfoPtr_->select-- ;
  3223  04A4  0854               	movf	_currentMenuInfoPtr_,w
  3224  04A5  0086               	movwf	6
  3225  04A6  0187               	clrf	7
  3226  04A7  3001               	movlw	1
  3227  04A8  0281               	subwf	1,f
  3228                           
  3229                           ;main.c: 760: if( currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosit
      +                          ion-- ;
  3230  04A9  0A54               	incf	_currentMenuInfoPtr_,w
  3231  04AA  0086               	movwf	6
  3232  04AB  0187               	clrf	7
  3233  04AC  0801               	movf	1,w
  3234  04AD  1903               	btfsc	3,2
  3235  04AE  2CBF               	goto	l3809
  3236  04AF  0A54               	incf	_currentMenuInfoPtr_,w
  3237  04B0  0086               	movwf	6
  3238  04B1  0187               	clrf	7
  3239  04B2  3001               	movlw	1
  3240  04B3  0281               	subwf	1,f
  3241  04B4  2CBF               	goto	l3809
  3242  04B5                     l3805:	
  3243                           ;main.c: 765: case STATE_CONFIRM:
  3244                           
  3245                           ;main.c: 762: }
  3246                           ;main.c: 763: break ;
  3247                           
  3248                           ;main.c: 761: events_.output.changeMessage=1 ;
  3249                           
  3250                           
  3251                           ;main.c: 766: if( currentConfirmationInfoPtr_->isSelectYes ) {
  3252  04B5  0853               	movf	_currentConfirmationInfoPtr_,w
  3253  04B6  0086               	movwf	6
  3254  04B7  0187               	clrf	7
  3255  04B8  0801               	movf	1,w
  3256  04B9  1903               	btfsc	3,2
  3257  04BA  2CF9               	goto	l367
  3258                           
  3259                           ;main.c: 767: currentConfirmationInfoPtr_->isSelectYes = BOOL_FALSE ;
  3260  04BB  0853               	movf	_currentConfirmationInfoPtr_,w
  3261  04BC  0086               	movwf	6
  3262  04BD  0187               	clrf	7
  3263  04BE  0181               	clrf	1
  3264  04BF                     l3809:	
  3265                           
  3266                           ;main.c: 768: events_.output.changeMessage=1 ;
  3267  04BF  14C7               	bsf	_events_+1,1
  3268                           
  3269                           ;main.c: 769: }
  3270                           ;main.c: 770: break ;
  3271  04C0  2CF9               	goto	l367
  3272  04C1                     l3811:	
  3273                           ;main.c: 772: case STATE_ADJUST_VALUE:
  3274                           
  3275                           
  3276                           ;main.c: 773: case STATE_ADJUST_OSCILLATOR_TUNE:
  3277                           ;main.c: 774: if( *currentValueInfoPtr_->valuePtr != currentValueInfoPtr_->limit.upper )
      +                           {
  3278  04C1  084E               	movf	_currentValueInfoPtr_,w
  3279  04C2  0086               	movwf	6
  3280  04C3  084F               	movf	_currentValueInfoPtr_+1,w
  3281  04C4  0087               	movwf	7
  3282  04C5  0801               	movf	1,w
  3283  04C6  0086               	movwf	6
  3284  04C7  0187               	clrf	7
  3285  04C8  084E               	movf	_currentValueInfoPtr_,w
  3286  04C9  0084               	movwf	4
  3287  04CA  084F               	movf	_currentValueInfoPtr_+1,w
  3288  04CB  0085               	movwf	5
  3289  04CC  3102               	addfsr 0,2
  3290  04CD  0800               	movf	0,w
  3291  04CE  0601               	xorwf	1,w
  3292  04CF  1903               	skipnz
  3293  04D0  2CF9               	goto	l367
  3294                           
  3295                           ;main.c: 775: ( *currentValueInfoPtr_->valuePtr )++ ;
  3296  04D1  3001               	movlw	1
  3297  04D2  00E1               	movwf	??_main
  3298  04D3  084E               	movf	_currentValueInfoPtr_,w
  3299  04D4  0086               	movwf	6
  3300  04D5  084F               	movf	_currentValueInfoPtr_+1,w
  3301  04D6  0087               	movwf	7
  3302  04D7  0801               	movf	1,w
  3303  04D8  0086               	movwf	6
  3304  04D9  0187               	clrf	7
  3305  04DA  0861               	movf	??_main,w
  3306  04DB  0781               	addwf	1,f
  3307                           
  3308                           ;main.c: 776: events_.output.changeValue=1 ;
  3309  04DC  1547               	bsf	_events_+1,2
  3310                           
  3311                           ;main.c: 777: }
  3312                           ;main.c: 778: break ;
  3313  04DD  2CF9               	goto	l367
  3314  04DE                     l3817:	
  3315                           ;main.c: 780: case STATE_METRONOME:
  3316                           
  3317                           
  3318                           ;main.c: 781: if( configration_.tempo != 999 ) {
  3319  04DE  30E7               	movlw	231
  3320  04DF  0622               	xorwf	_configration_+2,w
  3321  04E0  3003               	movlw	3
  3322  04E1  1903               	skipnz
  3323  04E2  0623               	xorwf	_configration_+3,w
  3324  04E3  1903               	btfsc	3,2
  3325  04E4  2CEA               	goto	l3823
  3326                           
  3327                           ;main.c: 782: configration_.tempo++ ;
  3328  04E5  3001               	movlw	1
  3329  04E6  07A2               	addwf	_configration_+2,f
  3330  04E7  3000               	movlw	0
  3331  04E8  3DA3               	addwfc	_configration_+3,f
  3332                           
  3333                           ;main.c: 783: events_.output.changeValue=1 ;
  3334  04E9  1547               	bsf	_events_+1,2
  3335  04EA                     l3823:	
  3336                           
  3337                           ;main.c: 784: }
  3338                           ;main.c: 785: events_.output.resetMetronome=1 ;
  3339  04EA  15C7               	bsf	_events_+1,3
  3340                           
  3341                           ;main.c: 787: }
  3342                           
  3343                           ;main.c: 786: break ;
  3344  04EB  2CF9               	goto	l367
  3345  04EC                     l3827:	
  3346  04EC  0856               	movf	_machineState_,w
  3347                           
  3348                           ; Switch size 1, requested type "space"
  3349                           ; Number of cases is 8, Range of values is 1 to 8
  3350                           ; switch strategies available:
  3351                           ; Name         Instructions Cycles
  3352                           ; direct_byte           25     9 (fixed)
  3353                           ; simple_byte           25    13 (average)
  3354                           ; jumptable            263     9 (fixed)
  3355                           ;	Chosen strategy is direct_byte
  3356  04ED  3EFF               	addlw	-1
  3357  04EE  1C03               	skipc
  3358  04EF  2CF9               	goto	l367
  3359  04F0  0084               	movwf	4
  3360  04F1  3008               	movlw	8
  3361  04F2  0204               	subwf	4,w
  3362  04F3  1803               	skipnc
  3363  04F4  2CF9               	goto	l367
  3364  04F5  3189               	movlp	high S4091
  3365  04F6  3504               	lslf	4,w
  3366  04F7  3ED6               	addlw	low S4091
  3367  04F8  0082               	movwf	2
  3368  04F9                     l367:	
  3369                           
  3370                           ;main.c: 788: }
  3371                           ;main.c: 791: if( (events_.keyPress.down&&!(events_.keyPress.down=0)) ) {
  3372  04F9  1CC6               	btfss	_events_,1
  3373  04FA  2D5D               	goto	l383
  3374  04FB  10C6               	bcf	_events_,1
  3375                           
  3376                           ;main.c: 792: switch( machineState_ ) {
  3377  04FC  2D50               	goto	l3861
  3378  04FD                     l3831:	
  3379                           ;main.c: 793: case STATE_MENU_MAIN:
  3380                           
  3381                           
  3382                           ;main.c: 794: case STATE_MENU_TONE:
  3383                           ;main.c: 795: case STATE_MENU_DURATION:
  3384                           ;main.c: 796: case STATE_INFORMATION:
  3385                           ;main.c: 797: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->limit ) {
  3386  04FD  0854               	movf	_currentMenuInfoPtr_,w
  3387  04FE  3E02               	addlw	2
  3388  04FF  0086               	movwf	6
  3389  0500  0187               	clrf	7
  3390  0501  0854               	movf	_currentMenuInfoPtr_,w
  3391  0502  0084               	movwf	4
  3392  0503  0185               	clrf	5
  3393  0504  0800               	movf	0,w
  3394  0505  0601               	xorwf	1,w
  3395  0506  1903               	skipnz
  3396  0507  2D5D               	goto	l383
  3397                           
  3398                           ;main.c: 798: currentMenuInfoPtr_->select++ ;
  3399  0508  3001               	movlw	1
  3400  0509  00E1               	movwf	??_main
  3401  050A  0854               	movf	_currentMenuInfoPtr_,w
  3402  050B  0086               	movwf	6
  3403  050C  0187               	clrf	7
  3404  050D  0861               	movf	??_main,w
  3405  050E  0781               	addwf	1,f
  3406                           
  3407                           ;main.c: 799: if( !currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosi
      +                          tion++ ;
  3408  050F  0A54               	incf	_currentMenuInfoPtr_,w
  3409  0510  0086               	movwf	6
  3410  0511  0187               	clrf	7
  3411  0512  0801               	movf	1,w
  3412  0513  1D03               	btfss	3,2
  3413  0514  2D28               	goto	l3843
  3414  0515  3001               	movlw	1
  3415  0516  00E1               	movwf	??_main
  3416  0517  0A54               	incf	_currentMenuInfoPtr_,w
  3417  0518  0086               	movwf	6
  3418  0519  0187               	clrf	7
  3419  051A  0861               	movf	??_main,w
  3420  051B  0781               	addwf	1,f
  3421  051C  2D28               	goto	l3843
  3422  051D                     l3839:	
  3423                           ;main.c: 804: case STATE_CONFIRM:
  3424                           
  3425                           ;main.c: 801: }
  3426                           ;main.c: 802: break ;
  3427                           
  3428                           ;main.c: 800: events_.output.changeMessage=1 ;
  3429                           
  3430                           
  3431                           ;main.c: 805: if( !currentConfirmationInfoPtr_->isSelectYes ) {
  3432  051D  0853               	movf	_currentConfirmationInfoPtr_,w
  3433  051E  0086               	movwf	6
  3434  051F  0187               	clrf	7
  3435  0520  0801               	movf	1,w
  3436  0521  1D03               	btfss	3,2
  3437  0522  2D5D               	goto	l383
  3438                           
  3439                           ;main.c: 806: currentConfirmationInfoPtr_->isSelectYes = BOOL_TRUE ;
  3440  0523  0853               	movf	_currentConfirmationInfoPtr_,w
  3441  0524  0086               	movwf	6
  3442  0525  0187               	clrf	7
  3443  0526  0181               	clrf	1
  3444  0527  0A81               	incf	1,f
  3445  0528                     l3843:	
  3446                           
  3447                           ;main.c: 807: events_.output.changeMessage=1 ;
  3448  0528  14C7               	bsf	_events_+1,1
  3449                           
  3450                           ;main.c: 808: }
  3451                           ;main.c: 809: break ;
  3452  0529  2D5D               	goto	l383
  3453  052A                     l3845:	
  3454                           ;main.c: 811: case STATE_ADJUST_VALUE:
  3455                           
  3456                           
  3457                           ;main.c: 812: case STATE_ADJUST_OSCILLATOR_TUNE:
  3458                           ;main.c: 813: if( *currentValueInfoPtr_->valuePtr != currentValueInfoPtr_->limit.lower )
      +                           {
  3459  052A  084E               	movf	_currentValueInfoPtr_,w
  3460  052B  0086               	movwf	6
  3461  052C  084F               	movf	_currentValueInfoPtr_+1,w
  3462  052D  0087               	movwf	7
  3463  052E  0801               	movf	1,w
  3464  052F  0086               	movwf	6
  3465  0530  0187               	clrf	7
  3466  0531  084E               	movf	_currentValueInfoPtr_,w
  3467  0532  0084               	movwf	4
  3468  0533  084F               	movf	_currentValueInfoPtr_+1,w
  3469  0534  0085               	movwf	5
  3470  0535  3103               	addfsr 0,3
  3471  0536  0800               	movf	0,w
  3472  0537  0601               	xorwf	1,w
  3473  0538  1903               	skipnz
  3474  0539  2D5D               	goto	l383
  3475                           
  3476                           ;main.c: 814: ( *currentValueInfoPtr_->valuePtr )-- ;
  3477  053A  084E               	movf	_currentValueInfoPtr_,w
  3478  053B  0086               	movwf	6
  3479  053C  084F               	movf	_currentValueInfoPtr_+1,w
  3480  053D  0087               	movwf	7
  3481  053E  0801               	movf	1,w
  3482  053F  0086               	movwf	6
  3483  0540  0187               	clrf	7
  3484  0541  3001               	movlw	1
  3485  0542  0281               	subwf	1,f
  3486                           
  3487                           ;main.c: 815: events_.output.changeValue=1 ;
  3488  0543  1547               	bsf	_events_+1,2
  3489                           
  3490                           ;main.c: 816: }
  3491                           ;main.c: 817: break ;
  3492  0544  2D5D               	goto	l383
  3493  0545                     l3851:	
  3494                           ;main.c: 819: case STATE_METRONOME:
  3495                           
  3496                           
  3497                           ;main.c: 820: if( configration_.tempo != 1 ) {
  3498  0545  0322               	decf	_configration_+2,w
  3499  0546  0423               	iorwf	_configration_+3,w
  3500  0547  1903               	btfsc	3,2
  3501  0548  2D4E               	goto	l3857
  3502                           
  3503                           ;main.c: 821: configration_.tempo-- ;
  3504  0549  3001               	movlw	1
  3505  054A  02A2               	subwf	_configration_+2,f
  3506  054B  3000               	movlw	0
  3507  054C  3BA3               	subwfb	_configration_+3,f
  3508                           
  3509                           ;main.c: 822: events_.output.changeValue=1 ;
  3510  054D  1547               	bsf	_events_+1,2
  3511  054E                     l3857:	
  3512                           
  3513                           ;main.c: 823: }
  3514                           ;main.c: 824: events_.output.resetMetronome=1 ;
  3515  054E  15C7               	bsf	_events_+1,3
  3516                           
  3517                           ;main.c: 826: }
  3518                           
  3519                           ;main.c: 825: break ;
  3520  054F  2D5D               	goto	l383
  3521  0550                     l3861:	
  3522  0550  0856               	movf	_machineState_,w
  3523                           
  3524                           ; Switch size 1, requested type "space"
  3525                           ; Number of cases is 8, Range of values is 1 to 8
  3526                           ; switch strategies available:
  3527                           ; Name         Instructions Cycles
  3528                           ; direct_byte           25     9 (fixed)
  3529                           ; simple_byte           25    13 (average)
  3530                           ; jumptable            263     9 (fixed)
  3531                           ;	Chosen strategy is direct_byte
  3532  0551  3EFF               	addlw	-1
  3533  0552  1C03               	skipc
  3534  0553  2D5D               	goto	l383
  3535  0554  0084               	movwf	4
  3536  0555  3008               	movlw	8
  3537  0556  0204               	subwf	4,w
  3538  0557  1803               	skipnc
  3539  0558  2D5D               	goto	l383
  3540  0559  3189               	movlp	high S4093
  3541  055A  3504               	lslf	4,w
  3542  055B  3EE6               	addlw	low S4093
  3543  055C  0082               	movwf	2
  3544  055D                     l383:	
  3545                           
  3546                           ;main.c: 827: }
  3547                           ;main.c: 830: if( (events_.output.changeMessage&&!(events_.output.changeMessage=0)) ) {
  3548  055D  1CC7               	btfss	_events_+1,1
  3549  055E  2EFB               	goto	l399
  3550  055F  10C7               	bcf	_events_+1,1
  3551                           
  3552                           ;main.c: 832: switch( machineState_ ) {
  3553  0560  2EED               	goto	l3907
  3554  0561                     l3865:	
  3555                           ;main.c: 834: case STATE_MENU_MAIN:
  3556                           
  3557                           
  3558                           ;main.c: 835: case STATE_MENU_TONE:
  3559                           ;main.c: 836: case STATE_MENU_DURATION:
  3560                           ;main.c: 837: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x1 , current
      +                          MenuInfoPtr_->menuMessage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosi
      +                          tion ] ) ;
  3561  0561  0A54               	incf	_currentMenuInfoPtr_,w
  3562  0562  0086               	movwf	6
  3563  0563  0187               	clrf	7
  3564  0564  0801               	movf	1,w
  3565  0565  00E1               	movwf	??_main
  3566  0566  01E2               	clrf	??_main+1
  3567  0567  09E1               	comf	??_main,f
  3568  0568  09E2               	comf	??_main+1,f
  3569  0569  0AE1               	incf	??_main,f
  3570  056A  1903               	skipnz
  3571  056B  0AE2               	incf	??_main+1,f
  3572  056C  0854               	movf	_currentMenuInfoPtr_,w
  3573  056D  0086               	movwf	6
  3574  056E  0187               	clrf	7
  3575  056F  0801               	movf	1,w
  3576  0570  0761               	addwf	??_main,w
  3577  0571  00E3               	movwf	??_main+2
  3578  0572  0862               	movf	??_main+1,w
  3579  0573  1803               	skipnc
  3580  0574  0A62               	incf	??_main+1,w
  3581  0575  00E4               	movwf	??_main+3
  3582  0576  35E3               	lslf	??_main+2,f
  3583  0577  0DE4               	rlf	??_main+3,f
  3584  0578  0854               	movf	_currentMenuInfoPtr_,w
  3585  0579  3E03               	addlw	3
  3586  057A  0086               	movwf	6
  3587  057B  0187               	clrf	7
  3588  057C  3F40               	moviw [0]fsr1
  3589  057D  00E5               	movwf	??_main+4
  3590  057E  3F41               	moviw [1]fsr1
  3591  057F  00E6               	movwf	??_main+5
  3592  0580  0863               	movf	??_main+2,w
  3593  0581  0765               	addwf	??_main+4,w
  3594  0582  0086               	movwf	6
  3595  0583  0864               	movf	??_main+3,w
  3596  0584  3D66               	addwfc	??_main+5,w
  3597  0585  0087               	movwf	7
  3598  0586  3F40               	moviw [0]fsr1
  3599  0587  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3600  0588  3F41               	moviw [1]fsr1
  3601  0589  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3602  058A  3081               	movlw	129
  3603  058B  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3604                           
  3605                           ;main.c: 838: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x1 , current
      +                          MenuInfoPtr_->menuMessage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosi
      +                          tion + 1 ] ) ;
  3606  058E  0020               	movlb	0	; select bank0
  3607  058F  0A54               	incf	_currentMenuInfoPtr_,w
  3608  0590  0086               	movwf	6
  3609  0591  0187               	clrf	7
  3610  0592  0801               	movf	1,w
  3611  0593  00E1               	movwf	??_main
  3612  0594  01E2               	clrf	??_main+1
  3613  0595  09E1               	comf	??_main,f
  3614  0596  09E2               	comf	??_main+1,f
  3615  0597  0AE1               	incf	??_main,f
  3616  0598  1903               	skipnz
  3617  0599  0AE2               	incf	??_main+1,f
  3618  059A  0854               	movf	_currentMenuInfoPtr_,w
  3619  059B  0086               	movwf	6
  3620  059C  0187               	clrf	7
  3621  059D  0801               	movf	1,w
  3622  059E  0761               	addwf	??_main,w
  3623  059F  00E3               	movwf	??_main+2
  3624  05A0  0862               	movf	??_main+1,w
  3625  05A1  1803               	skipnc
  3626  05A2  0A62               	incf	??_main+1,w
  3627  05A3  00E4               	movwf	??_main+3
  3628  05A4  35E3               	lslf	??_main+2,f
  3629  05A5  0DE4               	rlf	??_main+3,f
  3630  05A6  0863               	movf	??_main+2,w
  3631  05A7  3E02               	addlw	2
  3632  05A8  00E5               	movwf	??_main+4
  3633  05A9  3000               	movlw	0
  3634  05AA  3D64               	addwfc	??_main+3,w
  3635  05AB  00E6               	movwf	??_main+5
  3636  05AC  0854               	movf	_currentMenuInfoPtr_,w
  3637  05AD  3E03               	addlw	3
  3638  05AE  0086               	movwf	6
  3639  05AF  0187               	clrf	7
  3640  05B0  3F40               	moviw [0]fsr1
  3641  05B1  00E7               	movwf	??_main+6
  3642  05B2  3F41               	moviw [1]fsr1
  3643  05B3  00E8               	movwf	??_main+7
  3644  05B4  0865               	movf	??_main+4,w
  3645  05B5  0767               	addwf	??_main+6,w
  3646  05B6  0086               	movwf	6
  3647  05B7  0866               	movf	??_main+5,w
  3648  05B8  3D68               	addwfc	??_main+7,w
  3649  05B9  0087               	movwf	7
  3650  05BA  3F40               	moviw [0]fsr1
  3651  05BB  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3652  05BC  3F41               	moviw [1]fsr1
  3653  05BD  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3654  05BE  30C1               	movlw	193
  3655  05BF  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3656                           
  3657                           ;main.c: 840: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->cursorPosition )
  3658  05C2  0020               	movlb	0	; select bank0
  3659  05C3  0A54               	incf	_currentMenuInfoPtr_,w
  3660  05C4  0086               	movwf	6
  3661  05C5  0187               	clrf	7
  3662  05C6  0854               	movf	_currentMenuInfoPtr_,w
  3663  05C7  0084               	movwf	4
  3664  05C8  0185               	clrf	5
  3665  05C9  0800               	movf	0,w
  3666  05CA  0601               	xorwf	1,w
  3667  05CB  1903               	skipnz
  3668  05CC  2DD9               	goto	l3871
  3669                           
  3670                           ;main.c: 841: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_0 | 0xF , CHAR_CODE.CU
      +                          RSOR_UP ) ;
  3671  05CD  3025               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3672  05CE  0084               	movwf	4
  3673  05CF  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3674  05D0  0085               	movwf	5
  3675  05D1  0800               	movf	0,w	;code access
  3676  05D2  00E1               	movwf	??_main
  3677  05D3  0861               	movf	??_main,w
  3678  05D4  00DB               	movwf	ParallelLCD_WriteCharacter@character
  3679  05D5  308F               	movlw	143
  3680  05D6  318C  24E0  3180   	fcall	_ParallelLCD_WriteCharacter
  3681  05D9                     l3871:	
  3682                           
  3683                           ;main.c: 842: if( currentMenuInfoPtr_->select != ( currentMenuInfoPtr_->limit + currentM
      +                          enuInfoPtr_->cursorPosition - 1 ) )
  3684  05D9  0020               	movlb	0	; select bank0
  3685  05DA  0A54               	incf	_currentMenuInfoPtr_,w
  3686  05DB  0086               	movwf	6
  3687  05DC  0187               	clrf	7
  3688  05DD  0854               	movf	_currentMenuInfoPtr_,w
  3689  05DE  3E02               	addlw	2
  3690  05DF  0084               	movwf	4
  3691  05E0  0185               	clrf	5
  3692  05E1  0800               	movf	0,w
  3693  05E2  0701               	addwf	1,w
  3694  05E3  00E1               	movwf	??_main
  3695  05E4  01E2               	clrf	??_main+1
  3696  05E5  0DE2               	rlf	??_main+1,f
  3697  05E6  0861               	movf	??_main,w
  3698  05E7  3EFF               	addlw	255
  3699  05E8  00E3               	movwf	??_main+2
  3700  05E9  30FF               	movlw	255
  3701  05EA  3D62               	addwfc	??_main+1,w
  3702  05EB  00E4               	movwf	??_main+3
  3703  05EC  0854               	movf	_currentMenuInfoPtr_,w
  3704  05ED  0086               	movwf	6
  3705  05EE  0187               	clrf	7
  3706  05EF  0801               	movf	1,w
  3707  05F0  0663               	xorwf	??_main+2,w
  3708  05F1  0464               	iorwf	??_main+3,w
  3709  05F2  1903               	skipnz
  3710  05F3  2E00               	goto	l3875
  3711                           
  3712                           ;main.c: 843: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_1 | 0xF , CHAR_CODE.CU
      +                          RSOR_DOWN ) ;
  3713  05F4  3026               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3714  05F5  0084               	movwf	4
  3715  05F6  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3716  05F7  0085               	movwf	5
  3717  05F8  0800               	movf	0,w	;code access
  3718  05F9  00E1               	movwf	??_main
  3719  05FA  0861               	movf	??_main,w
  3720  05FB  00DB               	movwf	ParallelLCD_WriteCharacter@character
  3721  05FC  30CF               	movlw	207
  3722  05FD  318C  24E0  3180   	fcall	_ParallelLCD_WriteCharacter
  3723  0600                     l3875:	
  3724                           
  3725                           ;main.c: 845: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuInfoPtr_->c
      +                          ursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3726  0600  3024               	movlw	low (_CHAR_CODE| (0+32768))
  3727  0601  0084               	movwf	4
  3728  0602  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3729  0603  0085               	movwf	5
  3730  0604  0800               	movf	0,w	;code access
  3731  0605  0020               	movlb	0	; select bank0
  3732  0606  00E1               	movwf	??_main
  3733  0607  0861               	movf	??_main,w
  3734  0608  00DB               	movwf	ParallelLCD_WriteCharacter@character
  3735  0609  0A54               	incf	_currentMenuInfoPtr_,w
  3736  060A  0086               	movwf	6
  3737  060B  0187               	clrf	7
  3738  060C  0801               	movf	1,w
  3739  060D  3E2A               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3740  060E  0084               	movwf	4
  3741  060F  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3742  0610  1803               	skipnc
  3743  0611  3E01               	addlw	1
  3744  0612  0085               	movwf	5
  3745  0613  0800               	movf	0,w	;code access
  3746  0614  318C  24E0  3180   	fcall	_ParallelLCD_WriteCharacter
  3747                           
  3748                           ;main.c: 847: break ;
  3749  0617  2EFB               	goto	l399
  3750  0618                     l3877:	
  3751                           ;main.c: 849: case STATE_METRONOME:
  3752                           
  3753                           
  3754                           ;main.c: 850: case STATE_ADJUST_VALUE:
  3755                           ;main.c: 851: case STATE_ADJUST_OSCILLATOR_TUNE:
  3756                           ;main.c: 852: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , current
      +                          ValueInfoPtr_->message.title ) ;
  3757  0618  0020               	movlb	0	; select bank0
  3758  0619  084E               	movf	_currentValueInfoPtr_,w
  3759  061A  0086               	movwf	6
  3760  061B  084F               	movf	_currentValueInfoPtr_+1,w
  3761  061C  0087               	movwf	7
  3762  061D  3144               	addfsr 1,4
  3763  061E  3F40               	moviw [0]fsr1
  3764  061F  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3765  0620  3F41               	moviw [1]fsr1
  3766  0621  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3767  0622  3080               	movlw	128
  3768  0623  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3769                           
  3770                           ;main.c: 853: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , current
      +                          ValueInfoPtr_->message.value ) ;
  3771  0626  0020               	movlb	0	; select bank0
  3772  0627  084E               	movf	_currentValueInfoPtr_,w
  3773  0628  0086               	movwf	6
  3774  0629  084F               	movf	_currentValueInfoPtr_+1,w
  3775  062A  0087               	movwf	7
  3776  062B  3146               	addfsr 1,6
  3777  062C  3F40               	moviw [0]fsr1
  3778  062D  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3779  062E  3F41               	moviw [1]fsr1
  3780  062F  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3781  0630  30C0               	movlw	192
  3782  0631  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3783                           
  3784                           ;main.c: 854: if( machineState_ == STATE_METRONOME ) {
  3785  0634  0020               	movlb	0	; select bank0
  3786  0635  0356               	decf	_machineState_,w
  3787  0636  1903               	btfsc	3,2
  3788                           
  3789                           ;main.c: 855: if( soundState_.isUserMute )
  3790  0637  1C58               	btfss	_soundState_,0
  3791  0638  2E45               	goto	l3885
  3792                           
  3793                           ;main.c: 856: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0xA , MESSAGE.METRONO
      +                          ME.MUTE ) ;
  3794  0639  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  3795  063A  0084               	movwf	4
  3796  063B  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3797  063C  0085               	movwf	5
  3798  063D  3F00               	moviw [0]fsr0
  3799  063E  00DD               	movwf	ParallelLCD_WriteString@stringPtr
  3800  063F  3F01               	moviw [1]fsr0
  3801  0640  00DE               	movwf	ParallelLCD_WriteString@stringPtr+1
  3802  0641  308A               	movlw	138
  3803  0642  318D  253E  3180   	fcall	_ParallelLCD_WriteString
  3804  0645                     l3885:	
  3805                           
  3806                           ;main.c: 857: }
  3807                           ;main.c: 859: events_.output.changeValue=1 ;
  3808  0645  0020               	movlb	0	; select bank0
  3809  0646  1547               	bsf	_events_+1,2
  3810                           
  3811                           ;main.c: 860: break ;
  3812  0647  2EFB               	goto	l399
  3813  0648                     l3887:	
  3814                           ;main.c: 862: case STATE_INFORMATION:
  3815                           
  3816                           
  3817                           ;main.c: 863: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          _INFORMATION[ menuInfoInformation_.select ] ) ;
  3818  0648  3537               	lslf	_menuInfoInformation_,w
  3819  0649  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3820  064A  0086               	movwf	6
  3821  064B  0187               	clrf	7
  3822  064C  3F40               	moviw [0]fsr1
  3823  064D  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3824  064E  3F41               	moviw [1]fsr1
  3825  064F  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3826  0650  3080               	movlw	128
  3827  0651  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3828                           
  3829                           ;main.c: 864: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0xA , &informationVal
      +                          ueBuffer[ menuInfoInformation_.select ] ) ;
  3830  0654  3007               	movlw	7
  3831  0655  0020               	movlb	0	; select bank0
  3832  0656  00E1               	movwf	??_main
  3833  0657  0861               	movf	??_main,w
  3834  0658  00F4               	movwf	___bmul@multiplicand
  3835  0659  0837               	movf	_menuInfoInformation_,w
  3836  065A  318D  2512  3180   	fcall	___bmul
  3837  065D  3E20               	addlw	(low (_informationValueBuffer| (0+256)))& (0+255)
  3838  065E  0020               	movlb	0	; select bank0
  3839  065F  00DD               	movwf	ParallelLCD_WriteString@stringPtr
  3840  0660  3001               	movlw	1
  3841  0661  00DE               	movwf	ParallelLCD_WriteString@stringPtr+1
  3842  0662  308A               	movlw	138
  3843  0663  318D  253E  3180   	fcall	_ParallelLCD_WriteString
  3844                           
  3845                           ;main.c: 865: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , MESSAGE
      +                          _INFORMATION[ menuInfoInformation_.select + 1 ] ) ;
  3846  0666  0020               	movlb	0	; select bank0
  3847  0667  3537               	lslf	_menuInfoInformation_,w
  3848  0668  3E02               	addlw	2
  3849  0669  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3850  066A  0086               	movwf	6
  3851  066B  0187               	clrf	7
  3852  066C  3F40               	moviw [0]fsr1
  3853  066D  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3854  066E  3F41               	moviw [1]fsr1
  3855  066F  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3856  0670  30C0               	movlw	192
  3857  0671  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3858                           
  3859                           ;main.c: 866: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xA , &informationVal
      +                          ueBuffer[ menuInfoInformation_.select + 1 ] ) ;
  3860  0674  3007               	movlw	7
  3861  0675  0020               	movlb	0	; select bank0
  3862  0676  00E1               	movwf	??_main
  3863  0677  0861               	movf	??_main,w
  3864  0678  00F4               	movwf	___bmul@multiplicand
  3865  0679  0837               	movf	_menuInfoInformation_,w
  3866  067A  3E01               	addlw	1
  3867  067B  318D  2512  3180   	fcall	___bmul
  3868  067E  3E20               	addlw	(low (_informationValueBuffer| (0+256)))& (0+255)
  3869  067F  0020               	movlb	0	; select bank0
  3870  0680  00DD               	movwf	ParallelLCD_WriteString@stringPtr
  3871  0681  3001               	movlw	1
  3872  0682  00DE               	movwf	ParallelLCD_WriteString@stringPtr+1
  3873  0683  30CA               	movlw	202
  3874  0684  318D  253E  3180   	fcall	_ParallelLCD_WriteString
  3875                           
  3876                           ;main.c: 867: break ;
  3877  0687  2EFB               	goto	l399
  3878  0688                     l3893:	
  3879                           ;main.c: 869: case STATE_CONFIRM:
  3880                           
  3881                           
  3882                           ;main.c: 870: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0xD , MESSAGE
      +                          .CONFIRM.NO ) ;
  3883  0688  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  3884  0689  0084               	movwf	4
  3885  068A  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  3886  068B  0085               	movwf	5
  3887  068C  3F00               	moviw [0]fsr0
  3888  068D  0020               	movlb	0	; select bank0
  3889  068E  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3890  068F  3F01               	moviw [1]fsr0
  3891  0690  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3892  0691  308D               	movlw	141
  3893  0692  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3894                           
  3895                           ;main.c: 871: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xD , MESSAGE
      +                          .CONFIRM.YES ) ;
  3896  0695  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3897  0696  0084               	movwf	4
  3898  0697  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3899  0698  0085               	movwf	5
  3900  0699  3F00               	moviw [0]fsr0
  3901  069A  0020               	movlb	0	; select bank0
  3902  069B  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3903  069C  3F01               	moviw [1]fsr0
  3904  069D  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3905  069E  30CD               	movlw	205
  3906  069F  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3907                           
  3908                           ;main.c: 872: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , currentConfirma
      +                          tionInfoPtr_->message ) ;
  3909  06A2  0020               	movlb	0	; select bank0
  3910  06A3  0853               	movf	_currentConfirmationInfoPtr_,w
  3911  06A4  3E03               	addlw	3
  3912  06A5  0086               	movwf	6
  3913  06A6  0187               	clrf	7
  3914  06A7  3F40               	moviw [0]fsr1
  3915  06A8  00DD               	movwf	ParallelLCD_WriteString@stringPtr
  3916  06A9  3F41               	moviw [1]fsr1
  3917  06AA  00DE               	movwf	ParallelLCD_WriteString@stringPtr+1
  3918  06AB  3080               	movlw	128
  3919  06AC  318D  253E  3180   	fcall	_ParallelLCD_WriteString
  3920                           
  3921                           ;main.c: 873: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentConfirmationIn
      +                          foPtr_->isSelectYes ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3922  06AF  3024               	movlw	low (_CHAR_CODE| (0+32768))
  3923  06B0  0084               	movwf	4
  3924  06B1  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3925  06B2  0085               	movwf	5
  3926  06B3  0800               	movf	0,w	;code access
  3927  06B4  0020               	movlb	0	; select bank0
  3928  06B5  00E1               	movwf	??_main
  3929  06B6  0861               	movf	??_main,w
  3930  06B7  00DB               	movwf	ParallelLCD_WriteCharacter@character
  3931  06B8  0853               	movf	_currentConfirmationInfoPtr_,w
  3932  06B9  0086               	movwf	6
  3933  06BA  0187               	clrf	7
  3934  06BB  0801               	movf	1,w
  3935  06BC  3E2A               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3936  06BD  0084               	movwf	4
  3937  06BE  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3938  06BF  1803               	skipnc
  3939  06C0  3E01               	addlw	1
  3940  06C1  0085               	movwf	5
  3941  06C2  0800               	movf	0,w	;code access
  3942  06C3  380C               	iorlw	12
  3943  06C4  318C  24E0  3180   	fcall	_ParallelLCD_WriteCharacter
  3944                           
  3945                           ;main.c: 874: break ;
  3946  06C7  2EFB               	goto	l399
  3947  06C8                     l3899:	
  3948                           ;main.c: 876: case STATE_LOAD:
  3949                           
  3950                           
  3951                           ;main.c: 877: case STATE_SAVE:
  3952                           ;main.c: 878: case STATE_INITIALIZE:
  3953                           ;main.c: 879: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , current
      +                          SingleMessage_ ) ;
  3954  06C8  0020               	movlb	0	; select bank0
  3955  06C9  084C               	movf	_currentSingleMessage_,w
  3956  06CA  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3957  06CB  084D               	movf	_currentSingleMessage_+1,w
  3958  06CC  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3959  06CD  3080               	movlw	128
  3960  06CE  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3961                           
  3962                           ;main.c: 880: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  3963  06D1  30C0               	movlw	192
  3964  06D2  318D  2524  3180   	fcall	_ParallelLCD_ClearRow
  3965                           
  3966                           ;main.c: 881: break ;
  3967  06D5  2EFB               	goto	l399
  3968  06D6                     l3903:	
  3969                           ;main.c: 883: case STATE_ERROR:
  3970                           
  3971                           
  3972                           ;main.c: 884: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          .ERROR.TITLE ) ;
  3973  06D6  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  3974  06D7  0084               	movwf	4
  3975  06D8  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  3976  06D9  0085               	movwf	5
  3977  06DA  3F00               	moviw [0]fsr0
  3978  06DB  0020               	movlb	0	; select bank0
  3979  06DC  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3980  06DD  3F01               	moviw [1]fsr0
  3981  06DE  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3982  06DF  3080               	movlw	128
  3983  06E0  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3984                           
  3985                           ;main.c: 885: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , current
      +                          SingleMessage_ ) ;
  3986  06E3  0020               	movlb	0	; select bank0
  3987  06E4  084C               	movf	_currentSingleMessage_,w
  3988  06E5  00DB               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3989  06E6  084D               	movf	_currentSingleMessage_+1,w
  3990  06E7  00DC               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3991  06E8  30C0               	movlw	192
  3992  06E9  318D  25CF  3180   	fcall	_ParallelLCD_WriteStringClearing
  3993                           
  3994                           ;main.c: 888: }
  3995                           
  3996                           ;main.c: 886: break ;
  3997  06EC  2EFB               	goto	l399
  3998  06ED                     l3907:	
  3999  06ED  0020               	movlb	0	; select bank0
  4000  06EE  0856               	movf	_machineState_,w
  4001                           
  4002                           ; Switch size 1, requested type "space"
  4003                           ; Number of cases is 12, Range of values is 1 to 13
  4004                           ; switch strategies available:
  4005                           ; Name         Instructions Cycles
  4006                           ; direct_byte           35     9 (fixed)
  4007                           ; simple_byte           37    19 (average)
  4008                           ; jumptable            263     9 (fixed)
  4009                           ;	Chosen strategy is direct_byte
  4010  06EF  3EFF               	addlw	-1
  4011  06F0  1C03               	skipc
  4012  06F1  2EFB               	goto	l399
  4013  06F2  0084               	movwf	4
  4014  06F3  300D               	movlw	13
  4015  06F4  0204               	subwf	4,w
  4016  06F5  1803               	skipnc
  4017  06F6  2EFB               	goto	l399
  4018  06F7  3189               	movlp	high S4095
  4019  06F8  3504               	lslf	4,w
  4020  06F9  3EA8               	addlw	low S4095
  4021  06FA  0082               	movwf	2
  4022  06FB                     l399:	
  4023                           
  4024                           ;main.c: 890: }
  4025                           ;main.c: 893: if( (events_.output.changeValue&&!(events_.output.changeValue=0)) ) {
  4026  06FB  0020               	movlb	0	; select bank0
  4027  06FC  1D47               	btfss	_events_+1,2
  4028  06FD  29CF               	goto	l272
  4029  06FE  1147               	bcf	_events_+1,2
  4030                           
  4031                           ;main.c: 895: Uint16_t tmpValue ;
  4032                           ;main.c: 896: Char_t valueString[6] ;
  4033                           ;main.c: 897: valueString[0] = '=' ;
  4034  06FF  303D               	movlw	61
  4035  0700  00E1               	movwf	??_main
  4036  0701  0861               	movf	??_main,w
  4037  0702  0023               	movlb	3	; select bank3
  4038  0703  00A0               	movwf	main@valueString^(0+384)
  4039                           
  4040                           ;main.c: 898: valueString[1] = ' ' ;
  4041  0704  3020               	movlw	32
  4042  0705  0020               	movlb	0	; select bank0
  4043  0706  00E1               	movwf	??_main
  4044  0707  0861               	movf	??_main,w
  4045  0708  0023               	movlb	3	; select bank3
  4046  0709  00A1               	movwf	(main@valueString^(0+384)+1)
  4047                           
  4048                           ;main.c: 900: switch( machineState_ ) {
  4049  070A  2F49               	goto	l3925
  4050  070B                     l3913:	
  4051                           ;main.c: 902: case STATE_METRONOME:
  4052                           
  4053                           
  4054                           ;main.c: 903: tmpValue = configration_.tempo ;
  4055  070B  0020               	movlb	0	; select bank0
  4056  070C  0823               	movf	_configration_+3,w
  4057  070D  0023               	movlb	3	; select bank3
  4058  070E  00A8               	movwf	(main@tmpValue+1)^(0+384)
  4059  070F  0020               	movlb	0	; select bank0
  4060  0710  0822               	movf	_configration_+2,w
  4061  0711  0023               	movlb	3	; select bank3
  4062  0712  00A7               	movwf	main@tmpValue^(0+384)
  4063                           
  4064                           ;main.c: 904: break ;
  4065  0713  2F52               	goto	l3927
  4066  0714                     l422:	
  4067                           ;main.c: 906: case STATE_ADJUST_OSCILLATOR_TUNE:
  4068                           
  4069                           
  4070                           ;main.c: 907: if( (Uint08_t)configration_.oscillatorTune & 0x80 ) {
  4071  0714  1FAB               	btfss	_configration_+11,7
  4072  0715  2F2E               	goto	l3919
  4073                           
  4074                           ;main.c: 908: tmpValue = -configration_.oscillatorTune ;
  4075  0716  082B               	movf	_configration_+11,w
  4076  0717  00E1               	movwf	??_main
  4077  0718  01E2               	clrf	??_main+1
  4078  0719  1BE1               	btfsc	??_main,7
  4079  071A  03E2               	decf	??_main+1,f
  4080  071B  09E1               	comf	??_main,f
  4081  071C  09E2               	comf	??_main+1,f
  4082  071D  0AE1               	incf	??_main,f
  4083  071E  1903               	skipnz
  4084  071F  0AE2               	incf	??_main+1,f
  4085  0720  0861               	movf	??_main,w
  4086  0721  0023               	movlb	3	; select bank3
  4087  0722  00A7               	movwf	main@tmpValue^(0+384)
  4088  0723  0020               	movlb	0	; select bank0
  4089  0724  0862               	movf	??_main+1,w
  4090  0725  0023               	movlb	3	; select bank3
  4091  0726  00A8               	movwf	(main@tmpValue+1)^(0+384)
  4092                           
  4093                           ;main.c: 909: valueString[1] = '-' ;
  4094  0727  302D               	movlw	45
  4095  0728  0020               	movlb	0	; select bank0
  4096  0729  00E1               	movwf	??_main
  4097  072A  0861               	movf	??_main,w
  4098  072B  0023               	movlb	3	; select bank3
  4099  072C  00A1               	movwf	(main@valueString^(0+384)+1)
  4100                           
  4101                           ;main.c: 910: }
  4102  072D  2F52               	goto	l3927
  4103  072E                     l3919:	
  4104                           
  4105                           ;main.c: 911: else {
  4106                           ;main.c: 912: tmpValue = (Uint16_t)configration_.oscillatorTune ;
  4107  072E  0020               	movlb	0	; select bank0
  4108  072F  082B               	movf	_configration_+11,w
  4109  0730  0023               	movlb	3	; select bank3
  4110  0731  00A7               	movwf	main@tmpValue^(0+384)
  4111  0732  01A8               	clrf	(main@tmpValue+1)^(0+384)
  4112  0733  1BA7               	btfsc	main@tmpValue^(0+384),7
  4113  0734  03A8               	decf	(main@tmpValue+1)^(0+384),f
  4114                           
  4115                           ;main.c: 913: }
  4116                           ;main.c: 914: break ;
  4117  0735  2F52               	goto	l3927
  4118  0736                     l3921:	
  4119                           ;main.c: 916: default:
  4120                           
  4121                           
  4122                           ;main.c: 917: tmpValue = *currentValueInfoPtr_->valuePtr ;
  4123  0736  0020               	movlb	0	; select bank0
  4124  0737  084E               	movf	_currentValueInfoPtr_,w
  4125  0738  0086               	movwf	6
  4126  0739  084F               	movf	_currentValueInfoPtr_+1,w
  4127  073A  0087               	movwf	7
  4128  073B  0801               	movf	1,w
  4129  073C  0086               	movwf	6
  4130  073D  0187               	clrf	7
  4131  073E  0801               	movf	1,w
  4132  073F  00E1               	movwf	??_main
  4133  0740  01E2               	clrf	??_main+1
  4134  0741  0861               	movf	??_main,w
  4135  0742  0023               	movlb	3	; select bank3
  4136  0743  00A7               	movwf	main@tmpValue^(0+384)
  4137  0744  0020               	movlb	0	; select bank0
  4138  0745  0862               	movf	??_main+1,w
  4139  0746  0023               	movlb	3	; select bank3
  4140  0747  00A8               	movwf	(main@tmpValue+1)^(0+384)
  4141                           
  4142                           ;main.c: 919: }
  4143                           
  4144                           ;main.c: 918: break ;
  4145  0748  2F52               	goto	l3927
  4146  0749                     l3925:	
  4147  0749  0020               	movlb	0	; select bank0
  4148  074A  0856               	movf	_machineState_,w
  4149                           
  4150                           ; Switch size 1, requested type "space"
  4151                           ; Number of cases is 2, Range of values is 1 to 6
  4152                           ; switch strategies available:
  4153                           ; Name         Instructions Cycles
  4154                           ; simple_byte            7     4 (average)
  4155                           ; direct_byte           21     9 (fixed)
  4156                           ; jumptable            263     9 (fixed)
  4157                           ;	Chosen strategy is simple_byte
  4158  074B  3A01               	xorlw	1	; case 1
  4159  074C  1903               	skipnz
  4160  074D  2F0B               	goto	l3913
  4161  074E  3A07               	xorlw	7	; case 6
  4162  074F  1903               	skipnz
  4163  0750  2F14               	goto	l422
  4164  0751  2F36               	goto	l3921
  4165  0752                     l3927:	
  4166                           
  4167                           ;main.c: 921: Bool_t isNonZero = BOOL_FALSE ;
  4168  0752  0023               	movlb	3	; select bank3
  4169  0753  01A6               	clrf	main@isNonZero^(0+384)
  4170                           
  4171                           ;main.c: 922: const Uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 , } ;
  4172                           ;main.c: 923: for( Uint08_t i = 0 ; i < 3 ; i++ ) {
  4173  0754  01B0               	clrf	main@i^(0+384)
  4174  0755  3003               	movlw	3
  4175  0756  0230               	subwf	main@i^(0+384),w
  4176  0757  1803               	btfsc	3,0
  4177  0758  2FD2               	goto	l3959
  4178  0759                     l3933:	
  4179                           
  4180                           ;main.c: 924: Char_t chr = '0' ;
  4181  0759  3030               	movlw	48
  4182  075A  0020               	movlb	0	; select bank0
  4183  075B  00E1               	movwf	??_main
  4184  075C  0861               	movf	??_main,w
  4185  075D  0023               	movlb	3	; select bank3
  4186  075E  00AA               	movwf	main@chr^(0+384)
  4187                           
  4188                           ;main.c: 925: Uint08_t compareUnit = COMPARE_UNITS[i] ;
  4189  075F  0830               	movf	main@i^(0+384),w
  4190  0760  3E27               	addlw	low (main@COMPARE_UNITS| (0+32768))
  4191  0761  0084               	movwf	4
  4192  0762  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  4193  0763  1803               	skipnc
  4194  0764  3E01               	addlw	1
  4195  0765  0085               	movwf	5
  4196  0766  0800               	movf	0,w	;code access
  4197  0767  0020               	movlb	0	; select bank0
  4198  0768  00E1               	movwf	??_main
  4199  0769  0861               	movf	??_main,w
  4200  076A  0023               	movlb	3	; select bank3
  4201  076B  00A9               	movwf	main@compareUnit^(0+384)
  4202  076C                     l3941:	
  4203                           ;main.c: 926: while( tmpValue >= compareUnit ) {
  4204                           
  4205  076C  0829               	movf	main@compareUnit^(0+384),w
  4206  076D  0020               	movlb	0	; select bank0
  4207  076E  00E1               	movwf	??_main
  4208  076F  01E2               	clrf	??_main+1
  4209  0770  0862               	movf	??_main+1,w
  4210  0771  0023               	movlb	3	; select bank3
  4211  0772  0228               	subwf	(main@tmpValue+1)^(0+384),w
  4212  0773  1D03               	skipz
  4213  0774  2F79               	goto	u3215
  4214  0775  0020               	movlb	0	; select bank0
  4215  0776  0861               	movf	??_main,w
  4216  0777  0023               	movlb	3	; select bank3
  4217  0778  0227               	subwf	main@tmpValue^(0+384),w
  4218  0779                     u3215:	
  4219  0779  1C03               	btfss	3,0
  4220  077A  2F8D               	goto	l3943
  4221                           
  4222                           ;main.c: 927: tmpValue -= compareUnit ;
  4223  077B  0829               	movf	main@compareUnit^(0+384),w
  4224  077C  0020               	movlb	0	; select bank0
  4225  077D  00E1               	movwf	??_main
  4226  077E  01E2               	clrf	??_main+1
  4227  077F  0861               	movf	??_main,w
  4228  0780  0023               	movlb	3	; select bank3
  4229  0781  02A7               	subwf	main@tmpValue^(0+384),f
  4230  0782  0020               	movlb	0	; select bank0
  4231  0783  0862               	movf	??_main+1,w
  4232  0784  0023               	movlb	3	; select bank3
  4233  0785  3BA8               	subwfb	(main@tmpValue+1)^(0+384),f
  4234                           
  4235                           ;main.c: 928: chr++ ;
  4236  0786  3001               	movlw	1
  4237  0787  0020               	movlb	0	; select bank0
  4238  0788  00E1               	movwf	??_main
  4239  0789  0861               	movf	??_main,w
  4240  078A  0023               	movlb	3	; select bank3
  4241  078B  07AA               	addwf	main@chr^(0+384),f
  4242  078C  2F6C               	goto	l3941
  4243  078D                     l3943:	
  4244                           
  4245                           ;main.c: 929: }
  4246                           ;main.c: 931: if( isNonZero || chr > '0' || i == 2 ) {
  4247  078D  0826               	movf	main@isNonZero^(0+384),w
  4248  078E  1D03               	btfss	3,2
  4249  078F  2F98               	goto	l3949
  4250  0790  3031               	movlw	49
  4251  0791  022A               	subwf	main@chr^(0+384),w
  4252  0792  1803               	skipnc
  4253  0793  2F98               	goto	l3949
  4254  0794  3002               	movlw	2
  4255  0795  0630               	xorwf	main@i^(0+384),w
  4256  0796  1D03               	btfss	3,2
  4257  0797  2FA9               	goto	l3953
  4258  0798                     l3949:	
  4259                           
  4260                           ;main.c: 932: valueString[ i + 2 ] = chr ;
  4261  0798  082A               	movf	main@chr^(0+384),w
  4262  0799  0020               	movlb	0	; select bank0
  4263  079A  00E1               	movwf	??_main
  4264  079B  0023               	movlb	3	; select bank3
  4265  079C  0830               	movf	main@i^(0+384),w
  4266  079D  3E02               	addlw	2
  4267  079E  3EA0               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4268  079F  0086               	movwf	6
  4269  07A0  3001               	movlw	1	; select bank3/4
  4270  07A1  0087               	movwf	7
  4271  07A2  0020               	movlb	0	; select bank0
  4272  07A3  0861               	movf	??_main,w
  4273  07A4  0081               	movwf	1
  4274                           
  4275                           ;main.c: 933: isNonZero = BOOL_TRUE ;
  4276  07A5  0023               	movlb	3	; select bank3
  4277  07A6  01A6               	clrf	main@isNonZero^(0+384)
  4278  07A7  0AA6               	incf	main@isNonZero^(0+384),f
  4279                           
  4280                           ;main.c: 934: }
  4281  07A8  2FC8               	goto	l3955
  4282  07A9                     l3953:	
  4283                           
  4284                           ;main.c: 935: else {
  4285                           ;main.c: 936: valueString[ i + 2 ] = valueString[ i + 1 ] ;
  4286  07A9  0830               	movf	main@i^(0+384),w
  4287  07AA  3E01               	addlw	1
  4288  07AB  3EA0               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4289  07AC  0086               	movwf	6
  4290  07AD  3001               	movlw	1	; select bank3/4
  4291  07AE  0087               	movwf	7
  4292  07AF  0801               	movf	1,w
  4293  07B0  0020               	movlb	0	; select bank0
  4294  07B1  00E1               	movwf	??_main
  4295  07B2  0023               	movlb	3	; select bank3
  4296  07B3  0830               	movf	main@i^(0+384),w
  4297  07B4  3E02               	addlw	2
  4298  07B5  3EA0               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4299  07B6  0086               	movwf	6
  4300  07B7  3001               	movlw	1	; select bank3/4
  4301  07B8  0087               	movwf	7
  4302  07B9  0020               	movlb	0	; select bank0
  4303  07BA  0861               	movf	??_main,w
  4304  07BB  0081               	movwf	1
  4305                           
  4306                           ;main.c: 937: valueString[ i + 1 ] = ' ' ;
  4307  07BC  3020               	movlw	32
  4308  07BD  00E1               	movwf	??_main
  4309  07BE  0023               	movlb	3	; select bank3
  4310  07BF  0830               	movf	main@i^(0+384),w
  4311  07C0  3E01               	addlw	1
  4312  07C1  3EA0               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4313  07C2  0086               	movwf	6
  4314  07C3  3001               	movlw	1	; select bank3/4
  4315  07C4  0087               	movwf	7
  4316  07C5  0020               	movlb	0	; select bank0
  4317  07C6  0861               	movf	??_main,w
  4318  07C7  0081               	movwf	1
  4319  07C8                     l3955:	
  4320  07C8  3001               	movlw	1
  4321  07C9  0020               	movlb	0	; select bank0
  4322  07CA  00E1               	movwf	??_main
  4323  07CB  0861               	movf	??_main,w
  4324  07CC  0023               	movlb	3	; select bank3
  4325  07CD  07B0               	addwf	main@i^(0+384),f
  4326  07CE  3003               	movlw	3
  4327  07CF  0230               	subwf	main@i^(0+384),w
  4328  07D0  1C03               	skipc
  4329  07D1  2F59               	goto	l3933
  4330  07D2                     l3959:	
  4331                           
  4332                           ;main.c: 938: }
  4333                           ;main.c: 939: }
  4334                           ;main.c: 941: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xB , &valueString ) 
      +                          ;
  4335  07D2  30A0               	movlw	low main@valueString
  4336  07D3  0020               	movlb	0	; select bank0
  4337  07D4  00DD               	movwf	ParallelLCD_WriteString@stringPtr
  4338  07D5  3001               	movlw	high main@valueString
  4339  07D6  00DE               	movwf	ParallelLCD_WriteString@stringPtr+1
  4340  07D7  30CB               	movlw	203
  4341  07D8  318D  253E  3180   	fcall	_ParallelLCD_WriteString
  4342                           
  4343                           ;main.c: 943: switch( machineState_ ) {
  4344  07DB  2FE1               	goto	l3965
  4345  07DC                     l3961:	
  4346                           ;main.c: 944: case STATE_ADJUST_OSCILLATOR_TUNE:
  4347                           
  4348                           
  4349                           ;main.c: 945: OSCTUNE = configration_.oscillatorTune ;
  4350  07DC  0020               	movlb	0	; select bank0
  4351  07DD  082B               	movf	_configration_+11,w
  4352  07DE  0021               	movlb	1	; select bank1
  4353  07DF  0098               	movwf	24	;volatile
  4354                           
  4355                           ;main.c: 947: }
  4356                           
  4357                           ;main.c: 946: break ;
  4358  07E0  29CF               	goto	l272
  4359  07E1                     l3965:	
  4360  07E1  0020               	movlb	0	; select bank0
  4361  07E2  0856               	movf	_machineState_,w
  4362                           
  4363                           ; Switch size 1, requested type "space"
  4364                           ; Number of cases is 1, Range of values is 6 to 6
  4365                           ; switch strategies available:
  4366                           ; Name         Instructions Cycles
  4367                           ; simple_byte            4     3 (average)
  4368                           ; direct_byte           11     9 (fixed)
  4369                           ; jumptable            263     9 (fixed)
  4370                           ;	Chosen strategy is simple_byte
  4371  07E3  3A06               	xorlw	6	; case 6
  4372  07E4  1903               	skipnz
  4373  07E5  2FDC               	goto	l3961
  4374  07E6  29CF               	goto	l272
  4375                           
  4376                           ;main.c: 948: }
  4377                           ;main.c: 950: }
  4378  07E7  29CF               	goto	l272
  4379  07E8                     __end_of_main:	
  4380                           
  4381                           	psect	swtext1
  4382  09C2                     __pswtext1:	
  4383  09C2                     S4087:	
  4384  09C2  3182  2A5D         	ljmp	l306
  4385  09C4  3182  2A22         	ljmp	l3529
  4386  09C6  3182  2A2A         	ljmp	l3533
  4387  09C8  3182  2A31         	ljmp	l3539
  4388  09CA  3182  2A38         	ljmp	l3545
  4389  09CC  3182  2A3E         	ljmp	l3549
  4390  09CE  3182  2A42         	ljmp	l3553
  4391  09D0  3182  2A49         	ljmp	l3559
  4392  09D2  3182  2A40         	ljmp	l3551
  4393  09D4  3182  2A51         	ljmp	l3565
  4394                           
  4395                           	psect	swtext2
  4396  098C                     __pswtext2:	
  4397  098C                     S4089:	
  4398  098C  3183  2B1B         	ljmp	l338
  4399  098E  3183  2B01         	ljmp	l3637
  4400  0990  3183  2B07         	ljmp	l3641
  4401  0992  3183  2B09         	ljmp	l3643
  4402  0994  3183  2B0B         	ljmp	l3645
  4403  0996  3183  2B4B         	ljmp	l326
  4404  0998  3183  2B0D         	ljmp	l3647
  4405  099A  3183  2B14         	ljmp	l3653
  4406  099C  3183  2B4B         	ljmp	l326
  4407  099E  3183  2B1B         	ljmp	l338
  4408  09A0  3183  2B1B         	ljmp	l338
  4409  09A2  3183  2B1B         	ljmp	l338
  4410  09A4  3183  2B1F         	ljmp	l3657
  4411  09A6  3183  2B23         	ljmp	l3659
  4412                           
  4413                           	psect	swtext3
  4414  09D6                     __pswtext3:	
  4415  09D6                     S4091:	
  4416  09D6  3184  2CDE         	ljmp	l3817
  4417  09D8  3184  2C9E         	ljmp	l3797
  4418  09DA  3184  2C9E         	ljmp	l3797
  4419  09DC  3184  2C9E         	ljmp	l3797
  4420  09DE  3184  2CC1         	ljmp	l3811
  4421  09E0  3184  2CC1         	ljmp	l3811
  4422  09E2  3184  2C9E         	ljmp	l3797
  4423  09E4  3184  2CB5         	ljmp	l3805
  4424                           
  4425                           	psect	swtext4
  4426  09E6                     __pswtext4:	
  4427  09E6                     S4093:	
  4428  09E6  3185  2D45         	ljmp	l3851
  4429  09E8  3184  2CFD         	ljmp	l3831
  4430  09EA  3184  2CFD         	ljmp	l3831
  4431  09EC  3184  2CFD         	ljmp	l3831
  4432  09EE  3185  2D2A         	ljmp	l3845
  4433  09F0  3185  2D2A         	ljmp	l3845
  4434  09F2  3184  2CFD         	ljmp	l3831
  4435  09F4  3185  2D1D         	ljmp	l3839
  4436                           
  4437                           	psect	swtext5
  4438  09A8                     __pswtext5:	
  4439  09A8                     S4095:	
  4440  09A8  3186  2E18         	ljmp	l3877
  4441  09AA  3185  2D61         	ljmp	l3865
  4442  09AC  3185  2D61         	ljmp	l3865
  4443  09AE  3185  2D61         	ljmp	l3865
  4444  09B0  3186  2E18         	ljmp	l3877
  4445  09B2  3186  2E18         	ljmp	l3877
  4446  09B4  3186  2E48         	ljmp	l3887
  4447  09B6  3186  2E88         	ljmp	l3893
  4448  09B8  3186  2EC8         	ljmp	l3899
  4449  09BA  3186  2EC8         	ljmp	l3899
  4450  09BC  3186  2EC8         	ljmp	l3899
  4451  09BE  3186  2EFB         	ljmp	l399
  4452  09C0  3186  2ED6         	ljmp	l3903
  4453                           
  4454                           	psect	text1
  4455  0EF8                     __ptext1:	
  4456 ;; *************** function _initialize *****************
  4457 ;; Defined at:
  4458 ;;		line 5 in file "src/pic16f1827_init.h"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;		None               void
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4472 ;;      Params:         0       0       0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0
  4475 ;;      Totals:         0       0       0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    1
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_main
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           
  4487                           ;psect for function _initialize
  4488  0EF8                     _initialize:	
  4489                           
  4490                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4491                           
  4492                           ;incstack = 0
  4493                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4494  0EF8  0021               	movlb	1	; select bank1
  4495  0EF9  0819               	movf	25,w	;volatile
  4496  0EFA  3987               	andlw	-121
  4497  0EFB  3870               	iorlw	112
  4498  0EFC  0099               	movwf	25	;volatile
  4499                           
  4500                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4501  0EFD  30FC               	movlw	-4
  4502  0EFE  0599               	andwf	25,f	;volatile
  4503                           
  4504                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4505  0EFF  1799               	bsf	25,7	;volatile
  4506                           
  4507                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4508  0F00  30C0               	movlw	-64
  4509  0F01  0598               	andwf	24,f	;volatile
  4510                           
  4511                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4512  0F02  0817               	movf	23,w	;volatile
  4513  0F03  39C1               	andlw	-63
  4514  0F04  381E               	iorlw	30
  4515  0F05  0097               	movwf	23	;volatile
  4516                           
  4517                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4518  0F06  138B               	bcf	11,7	;volatile
  4519                           
  4520                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4521  0F07  130B               	bcf	11,6	;volatile
  4522                           
  4523                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4524  0F08  1595               	bsf	21,3	;volatile
  4525                           
  4526                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4527  0F09  1295               	bcf	21,5	;volatile
  4528                           
  4529                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4530  0F0A  1615               	bsf	21,4	;volatile
  4531                           
  4532                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4533  0F0B  0020               	movlb	0	; select bank0
  4534  0F0C  0195               	clrf	21	;volatile
  4535                           
  4536                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4537  0F0D  128B               	bcf	11,5	;volatile
  4538                           
  4539                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4540  0F0E  110B               	bcf	11,2	;volatile
  4541                           
  4542                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4543  0F0F  1018               	bcf	24,0	;volatile
  4544                           
  4545                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4546  0F10  303F               	movlw	-193
  4547  0F11  0598               	andwf	24,f	;volatile
  4548                           
  4549                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4550  0F12  3030               	movlw	48
  4551  0F13  0498               	iorwf	24,f	;volatile
  4552                           
  4553                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4554  0F14  1118               	bcf	24,2	;volatile
  4555                           
  4556                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4557  0F15  0196               	clrf	22	;volatile
  4558  0F16  0197               	clrf	23	;volatile
  4559                           
  4560                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4561  0F17  1011               	bcf	17,0	;volatile
  4562                           
  4563                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4564  0F18  0021               	movlb	1	; select bank1
  4565  0F19  1011               	bcf	17,0	;volatile
  4566                           
  4567                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4568  0F1A  0020               	movlb	0	; select bank0
  4569  0F1B  111C               	bcf	28,2	;volatile
  4570                           
  4571                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4572  0F1C  3087               	movlw	-121
  4573  0F1D  059C               	andwf	28,f	;volatile
  4574                           
  4575                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4576  0F1E  3003               	movlw	3
  4577  0F1F  049C               	iorwf	28,f	;volatile
  4578                           
  4579                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4580  0F20  307C               	movlw	124
  4581  0F21  009B               	movwf	27	;volatile
  4582                           
  4583                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4584  0F22  019A               	clrf	26	;volatile
  4585                           
  4586                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4587  0F23  1091               	bcf	17,1	;volatile
  4588                           
  4589                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4590  0F24  0021               	movlb	1	; select bank1
  4591  0F25  1091               	bcf	17,1	;volatile
  4592                           
  4593                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4594  0F26  0028               	movlb	8	; select bank8
  4595  0F27  1117               	bcf	23,2	;volatile
  4596                           
  4597                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4598  0F28  3087               	movlw	-121
  4599  0F29  0597               	andwf	23,f	;volatile
  4600                           
  4601                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4602  0F2A  0817               	movf	23,w	;volatile
  4603  0F2B  39FC               	andlw	-4
  4604  0F2C  3801               	iorlw	1
  4605  0F2D  0097               	movwf	23	;volatile
  4606                           
  4607                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4608  0F2E  304F               	movlw	79
  4609  0F2F  0096               	movwf	22	;volatile
  4610                           
  4611                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4612  0F30  0195               	clrf	21	;volatile
  4613                           
  4614                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4615  0F31  0020               	movlb	0	; select bank0
  4616  0F32  1093               	bcf	19,1	;volatile
  4617                           
  4618                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4619  0F33  0021               	movlb	1	; select bank1
  4620  0F34  1093               	bcf	19,1	;volatile
  4621                           
  4622                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4623  0F35  0028               	movlb	8	; select bank8
  4624  0F36  111E               	bcf	30,2	;volatile
  4625                           
  4626                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4627  0F37  3087               	movlw	-121
  4628  0F38  059E               	andwf	30,f	;volatile
  4629                           
  4630                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4631  0F39  30FC               	movlw	-4
  4632  0F3A  059E               	andwf	30,f	;volatile
  4633                           
  4634                           ;pic16f1827_init.h: 59: PR6 = 99 ;
  4635  0F3B  3063               	movlw	99
  4636  0F3C  009D               	movwf	29	;volatile
  4637                           
  4638                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4639  0F3D  019C               	clrf	28	;volatile
  4640                           
  4641                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4642  0F3E  0020               	movlb	0	; select bank0
  4643  0F3F  1193               	bcf	19,3	;volatile
  4644                           
  4645                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4646  0F40  0021               	movlb	1	; select bank1
  4647  0F41  1193               	bcf	19,3	;volatile
  4648                           
  4649                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4650  0F42  0025               	movlb	5	; select bank5
  4651  0F43  019E               	clrf	30	;volatile
  4652                           
  4653                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4654  0F44  30F0               	movlw	-16
  4655  0F45  0593               	andwf	19,f	;volatile
  4656                           
  4657                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4658  0F46  30F0               	movlw	-16
  4659  0F47  059A               	andwf	26,f	;volatile
  4660                           
  4661                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4662  0F48  30F0               	movlw	-16
  4663  0F49  0026               	movlb	6	; select bank6
  4664  0F4A  0593               	andwf	19,f	;volatile
  4665                           
  4666                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4667  0F4B  081A               	movf	26,w	;volatile
  4668  0F4C  39F0               	andlw	-16
  4669  0F4D  380C               	iorlw	12
  4670  0F4E  009A               	movwf	26	;volatile
  4671                           
  4672                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4673  0F4F  30CF               	movlw	-49
  4674  0F50  059A               	andwf	26,f	;volatile
  4675                           
  4676                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4677  0F51  303F               	movlw	-193
  4678  0F52  0025               	movlb	5	; select bank5
  4679  0F53  059E               	andwf	30,f	;volatile
  4680                           
  4681                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4682  0F54  0026               	movlb	6	; select bank6
  4683  0F55  0198               	clrf	24	;volatile
  4684                           
  4685                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4686  0F56  0199               	clrf	25	;volatile
  4687                           
  4688                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4689  0F57  0023               	movlb	3	; select bank3
  4690  0F58  018C               	clrf	12	;volatile
  4691                           
  4692                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4693  0F59  018D               	clrf	13	;volatile
  4694                           
  4695                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4696  0F5A  30E0               	movlw	224
  4697  0F5B  0021               	movlb	1	; select bank1
  4698  0F5C  008C               	movwf	12	;volatile
  4699                           
  4700                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4701  0F5D  018D               	clrf	13	;volatile
  4702  0F5E  0008               	return
  4703  0F5F                     __end_of_initialize:	
  4704                           
  4705                           	psect	text2
  4706  0D12                     __ptext2:	
  4707 ;; *************** function ___bmul *****************
  4708 ;; Defined at:
  4709 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  multiplier      1    wreg     unsigned char 
  4712 ;;  multiplicand    1    4[COMMON] unsigned char 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  multiplier      1    1[BANK0 ] unsigned char 
  4715 ;;  product         1    0[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      unsigned char 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4725 ;;      Params:         1       0       0       0       0       0
  4726 ;;      Locals:         0       2       0       0       0       0
  4727 ;;      Temps:          1       0       0       0       0       0
  4728 ;;      Totals:         2       2       0       0       0       0
  4729 ;;Total ram usage:        4 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    1
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           
  4740                           ;psect for function ___bmul
  4741  0D12                     ___bmul:	
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4745                           ;___bmul@multiplier stored from wreg
  4746  0D12  0020               	movlb	0	; select bank0
  4747  0D13  00DC               	movwf	___bmul@multiplier
  4748  0D14  01DB               	clrf	___bmul@product
  4749  0D15                     l3389:	
  4750  0D15  1C5C               	btfss	___bmul@multiplier,0
  4751  0D16  2D1B               	goto	l3393
  4752  0D17  0874               	movf	___bmul@multiplicand,w
  4753  0D18  00F5               	movwf	??___bmul
  4754  0D19  0875               	movf	??___bmul,w
  4755  0D1A  07DB               	addwf	___bmul@product,f
  4756  0D1B                     l3393:	
  4757  0D1B  1003               	clrc
  4758  0D1C  0DF4               	rlf	___bmul@multiplicand,f
  4759  0D1D  1003               	clrc
  4760  0D1E  0CDC               	rrf	___bmul@multiplier,f
  4761  0D1F  085C               	movf	___bmul@multiplier,w
  4762  0D20  1D03               	btfss	3,2
  4763  0D21  2D15               	goto	l3389
  4764  0D22  085B               	movf	___bmul@product,w
  4765  0D23  0008               	return
  4766  0D24                     __end_of___bmul:	
  4767                           
  4768                           	psect	text3
  4769  0DCF                     __ptext3:	
  4770 ;; *************** function _ParallelLCD_WriteStringClearing *****************
  4771 ;; Defined at:
  4772 ;;		line 106 in file "src/../../_Common/ParallelLCD.h"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;  position        1    wreg     enum E2805
  4775 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4776 ;;		 -> STR_52(10), STR_51(14), STR_50(12), STR_49(14), 
  4777 ;;		 -> STR_48(9), STR_47(9), STR_46(6), STR_45(9), 
  4778 ;;		 -> STR_44(6), STR_43(5), STR_42(6), STR_41(5), 
  4779 ;;		 -> STR_40(6), STR_39(5), STR_38(11), STR_37(14), 
  4780 ;;		 -> STR_36(6), STR_35(10), ROM(4096), STR_31(10), 
  4781 ;;		 -> STR_30(7), STR_29(13), STR_28(12), STR_27(6), 
  4782 ;;		 -> STR_26(7), STR_25(4), STR_24(4), STR_22(10), 
  4783 ;;		 -> STR_21(11), STR_20(11), STR_19(11), STR_18(8), 
  4784 ;;		 -> STR_17(10), STR_16(12), STR_15(9), STR_14(6), 
  4785 ;;		 -> STR_13(6), STR_12(6), STR_11(9), STR_10(6), 
  4786 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(10), 
  4787 ;;		 -> STR_5(13), STR_4(14), STR_3(10), STR_2(11), 
  4788 ;;		 -> STR_1(9), 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  position        1    3[BANK0 ] enum E2805
  4791 ;;  i               1    4[BANK0 ] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;		None               void
  4794 ;; Registers used:
  4795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4801 ;;      Params:         0       2       0       0       0       0
  4802 ;;      Locals:         0       2       0       0       0       0
  4803 ;;      Temps:          0       1       0       0       0       0
  4804 ;;      Totals:         0       5       0       0       0       0
  4805 ;;Total ram usage:        5 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    2
  4808 ;; This function calls:
  4809 ;;		_ParallelLCD_WriteByte
  4810 ;; This function is called by:
  4811 ;;		_main
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           
  4816                           ;psect for function _ParallelLCD_WriteStringClearing
  4817  0DCF                     _ParallelLCD_WriteStringClearing:	
  4818                           
  4819                           ;incstack = 0
  4820                           ; Regs used in _ParallelLCD_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  4821                           ;ParallelLCD_WriteStringClearing@position stored from wreg
  4822  0DCF  0020               	movlb	0	; select bank0
  4823  0DD0  00DE               	movwf	ParallelLCD_WriteStringClearing@position
  4824                           
  4825                           ;ParallelLCD.h: 107: ParallelLCD_WriteByte( position & 0xF0 , BOOL_FALSE ) ;
  4826  0DD1  01F4               	clrf	ParallelLCD_WriteByte@r
  4827  0DD2  085E               	movf	ParallelLCD_WriteStringClearing@position,w
  4828  0DD3  39F0               	andlw	240
  4829  0DD4  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  4830                           
  4831                           ;ParallelLCD.h: 108: for ( Uint08_t i = 0 ; i != 16 ; i++ ) {
  4832  0DD7  0020               	movlb	0	; select bank0
  4833  0DD8  01DF               	clrf	ParallelLCD_WriteStringClearing@i
  4834  0DD9                     L24:	
  4835  0DD9  3010               	movlw	16
  4836  0DDA  065F               	xorwf	ParallelLCD_WriteStringClearing@i,w
  4837  0DDB  1903               	btfsc	3,2
  4838  0DDC  0008               	return
  4839                           
  4840                           ;ParallelLCD.h: 109: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4841  0DDD  085E               	movf	ParallelLCD_WriteStringClearing@position,w
  4842  0DDE  390F               	andlw	15
  4843  0DDF  025F               	subwf	ParallelLCD_WriteStringClearing@i,w
  4844  0DE0  1C03               	skipc
  4845  0DE1  2DF9               	goto	l3267
  4846  0DE2  085B               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4847  0DE3  0084               	movwf	4
  4848  0DE4  085C               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4849  0DE5  0085               	movwf	5
  4850  0DE6  0012               	moviw fsr0++
  4851  0DE7  1903               	btfsc	3,2
  4852  0DE8  2DF9               	goto	l3267
  4853                           
  4854                           ;ParallelLCD.h: 110: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4855  0DE9  01F4               	clrf	ParallelLCD_WriteByte@r
  4856  0DEA  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4857  0DEB  085B               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4858  0DEC  0084               	movwf	4
  4859  0DED  085C               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4860  0DEE  0085               	movwf	5
  4861  0DEF  0800               	movf	0,w	;code access
  4862  0DF0  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  4863  0DF3  3001               	movlw	1
  4864  0DF4  0020               	movlb	0	; select bank0
  4865  0DF5  07DB               	addwf	ParallelLCD_WriteStringClearing@stringPtr,f
  4866  0DF6  3000               	movlw	0
  4867  0DF7  3DDC               	addwfc	ParallelLCD_WriteStringClearing@stringPtr+1,f
  4868  0DF8  2DFF               	goto	l3269
  4869  0DF9                     l3267:	
  4870                           
  4871                           ;ParallelLCD.h: 111: else
  4872                           ;ParallelLCD.h: 112: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4873  0DF9  01F4               	clrf	ParallelLCD_WriteByte@r
  4874  0DFA  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4875  0DFB  3020               	movlw	32
  4876  0DFC  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  4877  0DFF                     l3269:	
  4878  0DFF  3001               	movlw	1
  4879  0E00  0020               	movlb	0	; select bank0
  4880  0E01  00DD               	movwf	??_ParallelLCD_WriteStringClearing
  4881  0E02  085D               	movf	??_ParallelLCD_WriteStringClearing,w
  4882  0E03  07DF               	addwf	ParallelLCD_WriteStringClearing@i,f
  4883  0E04  2DD9               	goto	L24
  4884  0E05                     __end_of_ParallelLCD_WriteStringClearing:	
  4885                           
  4886                           	psect	text4
  4887  0D3E                     __ptext4:	
  4888 ;; *************** function _ParallelLCD_WriteString *****************
  4889 ;; Defined at:
  4890 ;;		line 97 in file "src/../../_Common/ParallelLCD.h"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  position        1    wreg     enum E2805
  4893 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  4894 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_34(8), STR_33(7), 
  4895 ;;		 -> STR_32(7), STR_23(7), 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  position        1    5[BANK0 ] enum E2805
  4898 ;; Return value:  Size  Location     Type
  4899 ;;		None               void
  4900 ;; Registers used:
  4901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4907 ;;      Params:         0       2       0       0       0       0
  4908 ;;      Locals:         0       1       0       0       0       0
  4909 ;;      Temps:          0       1       0       0       0       0
  4910 ;;      Totals:         0       4       0       0       0       0
  4911 ;;Total ram usage:        4 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    2
  4914 ;; This function calls:
  4915 ;;		_ParallelLCD_WriteByte
  4916 ;; This function is called by:
  4917 ;;		_main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _ParallelLCD_WriteString
  4923  0D3E                     _ParallelLCD_WriteString:	
  4924                           
  4925                           ;incstack = 0
  4926                           ; Regs used in _ParallelLCD_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4927                           ;ParallelLCD_WriteString@position stored from wreg
  4928  0D3E  0020               	movlb	0	; select bank0
  4929  0D3F  00E0               	movwf	ParallelLCD_WriteString@position
  4930                           
  4931                           ;ParallelLCD.h: 98: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4932  0D40  01F4               	clrf	ParallelLCD_WriteByte@r
  4933  0D41  0860               	movf	ParallelLCD_WriteString@position,w
  4934  0D42  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  4935  0D45                     l3249:	
  4936                           ;ParallelLCD.h: 99: while ( *stringPtr ) {
  4937                           
  4938  0D45  0020               	movlb	0	; select bank0
  4939  0D46  085D               	movf	ParallelLCD_WriteString@stringPtr,w
  4940  0D47  0084               	movwf	4
  4941  0D48  085E               	movf	ParallelLCD_WriteString@stringPtr+1,w
  4942  0D49  0085               	movwf	5
  4943  0D4A  0012               	moviw fsr0++
  4944  0D4B  1903               	btfsc	3,2
  4945  0D4C  0008               	return
  4946                           
  4947                           ;ParallelLCD.h: 100: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4948  0D4D  01F4               	clrf	ParallelLCD_WriteByte@r
  4949  0D4E  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4950  0D4F  0020               	movlb	0	; select bank0
  4951  0D50  085D               	movf	ParallelLCD_WriteString@stringPtr,w
  4952  0D51  0084               	movwf	4
  4953  0D52  085E               	movf	ParallelLCD_WriteString@stringPtr+1,w
  4954  0D53  0085               	movwf	5
  4955  0D54  0800               	movf	0,w	;code access
  4956  0D55  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  4957  0D58  3001               	movlw	1
  4958  0D59  0020               	movlb	0	; select bank0
  4959  0D5A  07DD               	addwf	ParallelLCD_WriteString@stringPtr,f
  4960  0D5B  3000               	movlw	0
  4961  0D5C  3DDE               	addwfc	ParallelLCD_WriteString@stringPtr+1,f
  4962  0D5D  2D45               	goto	l3249
  4963  0D5E                     __end_of_ParallelLCD_WriteString:	
  4964                           
  4965                           	psect	text5
  4966  0CE0                     __ptext5:	
  4967 ;; *************** function _ParallelLCD_WriteCharacter *****************
  4968 ;; Defined at:
  4969 ;;		line 90 in file "src/../../_Common/ParallelLCD.h"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  position        1    wreg     enum E2805
  4972 ;;  character       1    0[BANK0 ] unsigned char 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  position        1    1[BANK0 ] enum E2805
  4975 ;; Return value:  Size  Location     Type
  4976 ;;		None               void
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0, pclath, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4984 ;;      Params:         0       1       0       0       0       0
  4985 ;;      Locals:         0       1       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0
  4987 ;;      Totals:         0       2       0       0       0       0
  4988 ;;Total ram usage:        2 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    2
  4991 ;; This function calls:
  4992 ;;		_ParallelLCD_WriteByte
  4993 ;; This function is called by:
  4994 ;;		_main
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           
  4999                           ;psect for function _ParallelLCD_WriteCharacter
  5000  0CE0                     _ParallelLCD_WriteCharacter:	
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _ParallelLCD_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  5004                           ;ParallelLCD_WriteCharacter@position stored from wreg
  5005  0CE0  0020               	movlb	0	; select bank0
  5006  0CE1  00DC               	movwf	ParallelLCD_WriteCharacter@position
  5007                           
  5008                           ;ParallelLCD.h: 91: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  5009  0CE2  01F4               	clrf	ParallelLCD_WriteByte@r
  5010  0CE3  085C               	movf	ParallelLCD_WriteCharacter@position,w
  5011  0CE4  3187  27E8  318C   	fcall	_ParallelLCD_WriteByte
  5012                           
  5013                           ;ParallelLCD.h: 92: ParallelLCD_WriteByte( character , BOOL_TRUE ) ;
  5014  0CE7  01F4               	clrf	ParallelLCD_WriteByte@r
  5015  0CE8  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5016  0CE9  0020               	movlb	0	; select bank0
  5017  0CEA  085B               	movf	ParallelLCD_WriteCharacter@character,w
  5018  0CEB  3187  27E8         	fcall	_ParallelLCD_WriteByte
  5019  0CED  0008               	return
  5020  0CEE                     __end_of_ParallelLCD_WriteCharacter:	
  5021                           
  5022                           	psect	text6
  5023  0DA5                     __ptext6:	
  5024 ;; *************** function _ParallelLCD_SetCgram *****************
  5025 ;; Defined at:
  5026 ;;		line 143 in file "src/../../_Common/ParallelLCD.h"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  charCode        1    wreg     unsigned char 
  5029 ;;  bitmap          2    0[BANK0 ] PTR const unsigned char 
  5030 ;;		 -> BITMAP(24), 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  charCode        1    3[BANK0 ] unsigned char 
  5033 ;;  i               1    4[BANK0 ] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5043 ;;      Params:         0       2       0       0       0       0
  5044 ;;      Locals:         0       2       0       0       0       0
  5045 ;;      Temps:          0       1       0       0       0       0
  5046 ;;      Totals:         0       5       0       0       0       0
  5047 ;;Total ram usage:        5 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    2
  5050 ;; This function calls:
  5051 ;;		_ParallelLCD_WriteByte
  5052 ;; This function is called by:
  5053 ;;		_main
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function _ParallelLCD_SetCgram
  5059  0DA5                     _ParallelLCD_SetCgram:	
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _ParallelLCD_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5063                           ;ParallelLCD_SetCgram@charCode stored from wreg
  5064  0DA5  0020               	movlb	0	; select bank0
  5065  0DA6  00DE               	movwf	ParallelLCD_SetCgram@charCode
  5066                           
  5067                           ;ParallelLCD.h: 144: ParallelLCD_WriteByte( ( ( charCode << 3 ) & 0b00111111 ) | 0b01000
      +                          000 , BOOL_FALSE ) ;
  5068  0DA7  01F4               	clrf	ParallelLCD_WriteByte@r
  5069  0DA8  085E               	movf	ParallelLCD_SetCgram@charCode,w
  5070  0DA9  00DD               	movwf	??_ParallelLCD_SetCgram
  5071  0DAA  3002               	movlw	2
  5072  0DAB                     u2405:	
  5073  0DAB  35DD               	lslf	??_ParallelLCD_SetCgram,f
  5074  0DAC  3EFF               	addlw	-1
  5075  0DAD  1D03               	skipz
  5076  0DAE  2DAB               	goto	u2405
  5077  0DAF  355D               	lslf	??_ParallelLCD_SetCgram,w
  5078  0DB0  393F               	andlw	63
  5079  0DB1  3840               	iorlw	64
  5080  0DB2  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5081                           
  5082                           ;ParallelLCD.h: 145: for ( Uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  5083  0DB5  0020               	movlb	0	; select bank0
  5084  0DB6  01DF               	clrf	ParallelLCD_SetCgram@i
  5085  0DB7                     L25:	
  5086  0DB7  3008               	movlw	8
  5087  0DB8  065F               	xorwf	ParallelLCD_SetCgram@i,w
  5088  0DB9  1903               	btfsc	3,2
  5089  0DBA  0008               	return
  5090                           
  5091                           ;ParallelLCD.h: 146: ParallelLCD_WriteByte( *bitmap , BOOL_TRUE ) ;
  5092  0DBB  01F4               	clrf	ParallelLCD_WriteByte@r
  5093  0DBC  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5094  0DBD  085B               	movf	ParallelLCD_SetCgram@bitmap,w
  5095  0DBE  0084               	movwf	4
  5096  0DBF  085C               	movf	ParallelLCD_SetCgram@bitmap+1,w
  5097  0DC0  0085               	movwf	5
  5098  0DC1  0800               	movf	0,w	;code access
  5099  0DC2  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5100  0DC5  3001               	movlw	1
  5101  0DC6  0020               	movlb	0	; select bank0
  5102  0DC7  00DD               	movwf	??_ParallelLCD_SetCgram
  5103  0DC8  085D               	movf	??_ParallelLCD_SetCgram,w
  5104  0DC9  07DF               	addwf	ParallelLCD_SetCgram@i,f
  5105  0DCA  3001               	movlw	1
  5106  0DCB  07DB               	addwf	ParallelLCD_SetCgram@bitmap,f
  5107  0DCC  3000               	movlw	0
  5108  0DCD  3DDC               	addwfc	ParallelLCD_SetCgram@bitmap+1,f
  5109  0DCE  2DB7               	goto	L25
  5110  0DCF                     __end_of_ParallelLCD_SetCgram:	
  5111                           
  5112                           	psect	text7
  5113  0D5E                     __ptext7:	
  5114 ;; *************** function _ParallelLCD_Initialize *****************
  5115 ;; Defined at:
  5116 ;;		line 76 in file "src/../../_Common/ParallelLCD.h"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  configFuncti    1    wreg     enum E2783
  5119 ;;  configDispla    1    0[BANK0 ] enum E2789
  5120 ;;  configCursor    1    1[BANK0 ] enum E2795
  5121 ;;  configEntryM    1    2[BANK0 ] enum E2800
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  configFuncti    1    3[BANK0 ] enum E2783
  5124 ;; Return value:  Size  Location     Type
  5125 ;;		None               void
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0, pclath, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5133 ;;      Params:         0       3       0       0       0       0
  5134 ;;      Locals:         0       1       0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0
  5136 ;;      Totals:         0       4       0       0       0       0
  5137 ;;Total ram usage:        4 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    2
  5140 ;; This function calls:
  5141 ;;		_ParallelLCD_WriteByte
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _ParallelLCD_Initialize
  5149  0D5E                     _ParallelLCD_Initialize:	
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _ParallelLCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5153                           ;ParallelLCD_Initialize@configFunction stored from wreg
  5154  0D5E  0020               	movlb	0	; select bank0
  5155  0D5F  00DE               	movwf	ParallelLCD_Initialize@configFunction
  5156                           
  5157                           ;ParallelLCD.h: 82: ParallelLCD_WriteByte( ( configFunction & 0x1C ) | 0x20 , BOOL_FALSE
      +                           ) ;
  5158  0D60  01F4               	clrf	ParallelLCD_WriteByte@r
  5159  0D61  085E               	movf	ParallelLCD_Initialize@configFunction,w
  5160  0D62  391C               	andlw	28
  5161  0D63  3820               	iorlw	32
  5162  0D64  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5163                           
  5164                           ;ParallelLCD.h: 83: ParallelLCD_WriteByte( ( configDisplay & 0x0C ) | 0x08 , BOOL_FALSE 
      +                          ) ;
  5165  0D67  01F4               	clrf	ParallelLCD_WriteByte@r
  5166  0D68  0020               	movlb	0	; select bank0
  5167  0D69  085B               	movf	ParallelLCD_Initialize@configDisplay,w
  5168  0D6A  390C               	andlw	12
  5169  0D6B  3808               	iorlw	8
  5170  0D6C  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5171                           
  5172                           ;ParallelLCD.h: 84: ParallelLCD_WriteByte( ( configCursor & 0x07 ) | 0x10 , BOOL_FALSE )
      +                           ;
  5173  0D6F  01F4               	clrf	ParallelLCD_WriteByte@r
  5174  0D70  0020               	movlb	0	; select bank0
  5175  0D71  085C               	movf	ParallelLCD_Initialize@configCursor,w
  5176  0D72  3907               	andlw	7
  5177  0D73  3810               	iorlw	16
  5178  0D74  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5179                           
  5180                           ;ParallelLCD.h: 85: ParallelLCD_WriteByte( ( configEntryMode & 0x03 ) | 0x04 , BOOL_FALS
      +                          E ) ;
  5181  0D77  01F4               	clrf	ParallelLCD_WriteByte@r
  5182  0D78  0020               	movlb	0	; select bank0
  5183  0D79  085D               	movf	ParallelLCD_Initialize@configEntryMode,w
  5184  0D7A  3903               	andlw	3
  5185  0D7B  3804               	iorlw	4
  5186  0D7C  3187  27E8         	fcall	_ParallelLCD_WriteByte
  5187  0D7E  0008               	return
  5188  0D7F                     __end_of_ParallelLCD_Initialize:	
  5189                           
  5190                           	psect	text8
  5191  0CD8                     __ptext8:	
  5192 ;; *************** function _ParallelLCD_ClearDisplay *****************
  5193 ;; Defined at:
  5194 ;;		line 151 in file "src/../../_Common/ParallelLCD.h"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;		None               void
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5208 ;;      Params:         0       0       0       0       0       0
  5209 ;;      Locals:         0       0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0
  5211 ;;      Totals:         0       0       0       0       0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    3
  5215 ;; This function calls:
  5216 ;;		_ParallelLCD_ClearRow
  5217 ;; This function is called by:
  5218 ;;		_main
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _ParallelLCD_ClearDisplay
  5224  0CD8                     _ParallelLCD_ClearDisplay:	
  5225                           
  5226                           ;ParallelLCD.h: 152: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_0 ) ;
  5227                           
  5228                           ;incstack = 0
  5229                           ; Regs used in _ParallelLCD_ClearDisplay: [wreg+status,2+status,0+pclath+cstack]
  5230  0CD8  3080               	movlw	128
  5231  0CD9  318D  2524  318C   	fcall	_ParallelLCD_ClearRow
  5232                           
  5233                           ;ParallelLCD.h: 153: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  5234  0CDC  30C0               	movlw	192
  5235  0CDD  318D  2524         	fcall	_ParallelLCD_ClearRow
  5236  0CDF  0008               	return
  5237  0CE0                     __end_of_ParallelLCD_ClearDisplay:	
  5238                           
  5239                           	psect	text9
  5240  0D24                     __ptext9:	
  5241 ;; *************** function _ParallelLCD_ClearRow *****************
  5242 ;; Defined at:
  5243 ;;		line 127 in file "src/../../_Common/ParallelLCD.h"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  rowSelect       1    wreg     enum E2805
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  rowSelect       1    1[BANK0 ] enum E2805
  5248 ;;  i               1    2[BANK0 ] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;		None               void
  5251 ;; Registers used:
  5252 ;;		wreg, status,2, status,0, pclath, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5258 ;;      Params:         0       0       0       0       0       0
  5259 ;;      Locals:         0       2       0       0       0       0
  5260 ;;      Temps:          0       1       0       0       0       0
  5261 ;;      Totals:         0       3       0       0       0       0
  5262 ;;Total ram usage:        3 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    2
  5265 ;; This function calls:
  5266 ;;		_ParallelLCD_WriteByte
  5267 ;; This function is called by:
  5268 ;;		_ParallelLCD_ClearDisplay
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           
  5274                           ;psect for function _ParallelLCD_ClearRow
  5275  0D24                     _ParallelLCD_ClearRow:	
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _ParallelLCD_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  5279                           ;ParallelLCD_ClearRow@rowSelect stored from wreg
  5280  0D24  0020               	movlb	0	; select bank0
  5281  0D25  00DC               	movwf	ParallelLCD_ClearRow@rowSelect
  5282                           
  5283                           ;ParallelLCD.h: 128: ParallelLCD_WriteByte( rowSelect & 0xF0 , BOOL_FALSE ) ;
  5284  0D26  01F4               	clrf	ParallelLCD_WriteByte@r
  5285  0D27  085C               	movf	ParallelLCD_ClearRow@rowSelect,w
  5286  0D28  39F0               	andlw	240
  5287  0D29  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5288                           
  5289                           ;ParallelLCD.h: 129: for ( Uint08_t i = 0 ; i != 16 ; i++ )
  5290  0D2C  0020               	movlb	0	; select bank0
  5291  0D2D  01DD               	clrf	ParallelLCD_ClearRow@i
  5292  0D2E                     L26:	
  5293  0D2E  3010               	movlw	16
  5294  0D2F  065D               	xorwf	ParallelLCD_ClearRow@i,w
  5295  0D30  1903               	btfsc	3,2
  5296  0D31  0008               	return
  5297                           
  5298                           ;ParallelLCD.h: 130: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  5299  0D32  01F4               	clrf	ParallelLCD_WriteByte@r
  5300  0D33  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5301  0D34  3020               	movlw	32
  5302  0D35  3187  27E8  318D   	fcall	_ParallelLCD_WriteByte
  5303  0D38  3001               	movlw	1
  5304  0D39  0020               	movlb	0	; select bank0
  5305  0D3A  00DB               	movwf	??_ParallelLCD_ClearRow
  5306  0D3B  085B               	movf	??_ParallelLCD_ClearRow,w
  5307  0D3C  07DD               	addwf	ParallelLCD_ClearRow@i,f
  5308  0D3D  2D2E               	goto	L26
  5309  0D3E                     __end_of_ParallelLCD_ClearRow:	
  5310                           
  5311                           	psect	text10
  5312  07E8                     __ptext10:	
  5313 ;; *************** function _ParallelLCD_WriteByte *****************
  5314 ;; Defined at:
  5315 ;;		line 164 in file "src/../../_Common/ParallelLCD.h"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  data            1    wreg     unsigned char 
  5318 ;;  r               1    4[COMMON] enum E2778
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  data            1    5[COMMON] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;		None               void
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5330 ;;      Params:         1       0       0       0       0       0
  5331 ;;      Locals:         1       0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0
  5333 ;;      Totals:         2       0       0       0       0       0
  5334 ;;Total ram usage:        2 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    1
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_ParallelLCD_Initialize
  5341 ;;		_ParallelLCD_WriteCharacter
  5342 ;;		_ParallelLCD_WriteString
  5343 ;;		_ParallelLCD_WriteStringClearing
  5344 ;;		_ParallelLCD_ClearRow
  5345 ;;		_ParallelLCD_SetCgram
  5346 ;;		_ParallelLCD_WriteHexNumber
  5347 ;;		_ParallelLCD_ClearPartial
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           
  5352                           ;psect for function _ParallelLCD_WriteByte
  5353  07E8                     _ParallelLCD_WriteByte:	
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _ParallelLCD_WriteByte: [wreg+status,2+status,0]
  5357                           ;ParallelLCD_WriteByte@data stored from wreg
  5358  07E8  00F5               	movwf	ParallelLCD_WriteByte@data
  5359  07E9                     l147:	
  5360                           ;ParallelLCD.h: 165: {while(!PIR3bits.TMR4IF);} ;
  5361                           
  5362  07E9  0020               	movlb	0	; select bank0
  5363  07EA  1C93               	btfss	19,1	;volatile
  5364  07EB  2FE9               	goto	l147
  5365                           
  5366                           ;ParallelLCD.h: 166: {LATB=data;} ;
  5367  07EC  0875               	movf	ParallelLCD_WriteByte@data,w
  5368  07ED  0022               	movlb	2	; select bank2
  5369  07EE  008D               	movwf	13	;volatile
  5370                           
  5371                           ;ParallelLCD.h: 167: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  5372  07EF  0874               	movf	ParallelLCD_WriteByte@r,w
  5373  07F0  1903               	btfsc	3,2
  5374  07F1  2FF4               	goto	l150
  5375  07F2  148C               	bsf	12,1	;volatile
  5376  07F3  2FF5               	goto	l151
  5377  07F4                     l150:	
  5378  07F4  108C               	bcf	12,1	;volatile
  5379  07F5                     l151:	
  5380                           
  5381                           ;ParallelLCD.h: 168: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  5382  07F5  140C               	bsf	12,0	;volatile
  5383  07F6  0000               	nop
  5384  07F7  0022               	movlb	2	; select bank2
  5385  07F8  100C               	bcf	12,0	;volatile
  5386                           
  5387                           ;ParallelLCD.h: 169: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  5388  07F9  0028               	movlb	8	; select bank8
  5389  07FA  0195               	clrf	21	;volatile
  5390  07FB  0020               	movlb	0	; select bank0
  5391  07FC  1093               	bcf	19,1	;volatile
  5392  07FD  0008               	return
  5393  07FE                     __end_of_ParallelLCD_WriteByte:	
  5394                           
  5395                           	psect	text11
  5396  0F5F                     __ptext11:	
  5397 ;; *************** function _Configuration_Save *****************
  5398 ;; Defined at:
  5399 ;;		line 70 in file "src/configuration.h"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  config          1    wreg     PTR struct .
  5402 ;;		 -> configration_(13), 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  config          1    5[BANK0 ] PTR struct .
  5405 ;;		 -> configration_(13), 
  5406 ;;  i               1    4[BANK0 ] unsigned char 
  5407 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  5408 ;;		 -> configration_(13), 
  5409 ;;  returnCode      1    2[BANK0 ] enum E2863
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      enum E2863
  5412 ;; Registers used:
  5413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5419 ;;      Params:         0       0       0       0       0       0
  5420 ;;      Locals:         0       4       0       0       0       0
  5421 ;;      Temps:          0       2       0       0       0       0
  5422 ;;      Totals:         0       6       0       0       0       0
  5423 ;;Total ram usage:        6 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    2
  5426 ;; This function calls:
  5427 ;;		_Configuration_ReadByte
  5428 ;;		_Configuration_WriteByte
  5429 ;; This function is called by:
  5430 ;;		_main
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           
  5435                           ;psect for function _Configuration_Save
  5436  0F5F                     _Configuration_Save:	
  5437                           
  5438                           ;incstack = 0
  5439                           ; Regs used in _Configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5440                           ;Configuration_Save@config stored from wreg
  5441  0F5F  0020               	movlb	0	; select bank0
  5442  0F60  00E0               	movwf	Configuration_Save@config
  5443                           
  5444                           ;configuration.h: 72: EepromData_t* ptrConfig = (EepromData_t*) config ;
  5445  0F61  0860               	movf	Configuration_Save@config,w
  5446  0F62  00DB               	movwf	??_Configuration_Save
  5447  0F63  085B               	movf	??_Configuration_Save,w
  5448  0F64  00DE               	movwf	Configuration_Save@ptrConfig
  5449                           
  5450                           ;configuration.h: 73: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5451  0F65  01DD               	clrf	Configuration_Save@returnCode
  5452                           
  5453                           ;configuration.h: 76: INTCONbits.GIE=0; ;
  5454  0F66  138B               	bcf	11,7	;volatile
  5455                           
  5456                           ;configuration.h: 79: config->romOffset = Configuration_ReadByte( 0x00 , MEMORY_SELECT_E
      +                          EPROM ) ;
  5457  0F67  01F4               	clrf	Configuration_ReadByte@memorySelect
  5458  0F68  3000               	movlw	0
  5459  0F69  318C  24EE  318F   	fcall	_Configuration_ReadByte
  5460  0F6C  0020               	movlb	0	; select bank0
  5461  0F6D  00DB               	movwf	??_Configuration_Save
  5462  0F6E  0A60               	incf	Configuration_Save@config,w
  5463  0F6F  0086               	movwf	6
  5464  0F70  0187               	clrf	7
  5465  0F71  085B               	movf	??_Configuration_Save,w
  5466  0F72  0081               	movwf	1
  5467                           
  5468                           ;configuration.h: 82: config->writeCount = Configuration_ReadByte( config->romOffset , M
      +                          EMORY_SELECT_EEPROM ) ;
  5469  0F73  01F4               	clrf	Configuration_ReadByte@memorySelect
  5470  0F74  0A60               	incf	Configuration_Save@config,w
  5471  0F75  0086               	movwf	6
  5472  0F76  0187               	clrf	7
  5473  0F77  0801               	movf	1,w
  5474  0F78  318C  24EE  318F   	fcall	_Configuration_ReadByte
  5475  0F7B  0020               	movlb	0	; select bank0
  5476  0F7C  00DB               	movwf	??_Configuration_Save
  5477  0F7D  0860               	movf	Configuration_Save@config,w
  5478  0F7E  0086               	movwf	6
  5479  0F7F  0187               	clrf	7
  5480  0F80  085B               	movf	??_Configuration_Save,w
  5481  0F81  0081               	movwf	1
  5482                           
  5483                           ;configuration.h: 85: if ( ++config->writeCount == 1 ) {
  5484  0F82  3001               	movlw	1
  5485  0F83  00DB               	movwf	??_Configuration_Save
  5486  0F84  0860               	movf	Configuration_Save@config,w
  5487  0F85  0086               	movwf	6
  5488  0F86  0187               	clrf	7
  5489  0F87  085B               	movf	??_Configuration_Save,w
  5490  0F88  0781               	addwf	1,f
  5491  0F89  0301               	decf	1,w
  5492  0F8A  1D03               	btfss	3,2
  5493  0F8B  2F98               	goto	l3307
  5494                           
  5495                           ;configuration.h: 86: config->romOffset += sizeof(ConfigurationData) ;
  5496  0F8C  300D               	movlw	13
  5497  0F8D  00DB               	movwf	??_Configuration_Save
  5498  0F8E  0A60               	incf	Configuration_Save@config,w
  5499  0F8F  0086               	movwf	6
  5500  0F90  0187               	clrf	7
  5501  0F91  085B               	movf	??_Configuration_Save,w
  5502  0F92  0781               	addwf	1,f
  5503                           
  5504                           ;configuration.h: 87: config->writeCount = 1 ;
  5505  0F93  0860               	movf	Configuration_Save@config,w
  5506  0F94  0086               	movwf	6
  5507  0F95  0187               	clrf	7
  5508  0F96  0181               	clrf	1
  5509  0F97  0A81               	incf	1,f
  5510  0F98                     l3307:	
  5511                           
  5512                           ;configuration.h: 88: }
  5513                           ;configuration.h: 90: if ( config->romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5514  0F98  0A60               	incf	Configuration_Save@config,w
  5515  0F99  0086               	movwf	6
  5516  0F9A  0187               	clrf	7
  5517  0F9B  30F3               	movlw	243
  5518  0F9C  0201               	subwf	1,w
  5519  0F9D  1C03               	skipc
  5520  0F9E  2FA4               	goto	l3311
  5521                           
  5522                           ;configuration.h: 91: config->romOffset = 1 ;
  5523  0F9F  0A60               	incf	Configuration_Save@config,w
  5524  0FA0  0086               	movwf	6
  5525  0FA1  0187               	clrf	7
  5526  0FA2  0181               	clrf	1
  5527  0FA3  0A81               	incf	1,f
  5528  0FA4                     l3311:	
  5529                           
  5530                           ;configuration.h: 94: EECON1bits.WREN=1; ;
  5531  0FA4  0023               	movlb	3	; select bank3
  5532  0FA5  1515               	bsf	21,2	;volsfr
  5533                           
  5534                           ;configuration.h: 96: config->checkSum = 0x00 ;
  5535  0FA6  0020               	movlb	0	; select bank0
  5536  0FA7  0860               	movf	Configuration_Save@config,w
  5537  0FA8  3E0C               	addlw	12
  5538  0FA9  0086               	movwf	6
  5539  0FAA  0187               	clrf	7
  5540  0FAB  0181               	clrf	1
  5541                           
  5542                           ;configuration.h: 99: for ( Uint08_t i = 0 ; i < sizeof(ConfigurationData) ; i++ ) {
  5543  0FAC  01DF               	clrf	Configuration_Save@i
  5544  0FAD  2FB3               	goto	L27
  5545  0FAE                     l3329:	
  5546                           ;configuration.h: 104: break ;
  5547                           
  5548  0FAE  3001               	movlw	1
  5549  0FAF  0020               	movlb	0	; select bank0
  5550  0FB0  00DB               	movwf	??_Configuration_Save
  5551  0FB1  085B               	movf	??_Configuration_Save,w
  5552  0FB2  07DF               	addwf	Configuration_Save@i,f
  5553  0FB3                     L27:	
  5554  0FB3  300D               	movlw	13
  5555  0FB4  025F               	subwf	Configuration_Save@i,w
  5556  0FB5  1803               	btfsc	3,0
  5557  0FB6  2FE0               	goto	l3333
  5558                           
  5559                           ;configuration.h: 100: Configuration_WriteByte( config->romOffset + i , ptrConfig[i] ) ;
  5560  0FB7  085F               	movf	Configuration_Save@i,w
  5561  0FB8  075E               	addwf	Configuration_Save@ptrConfig,w
  5562  0FB9  00DB               	movwf	??_Configuration_Save
  5563  0FBA  085B               	movf	??_Configuration_Save,w
  5564  0FBB  0086               	movwf	6
  5565  0FBC  0187               	clrf	7
  5566  0FBD  0801               	movf	1,w
  5567  0FBE  00DC               	movwf	??_Configuration_Save+1
  5568  0FBF  085C               	movf	??_Configuration_Save+1,w
  5569  0FC0  00F4               	movwf	Configuration_WriteByte@data
  5570  0FC1  0A60               	incf	Configuration_Save@config,w
  5571  0FC2  0086               	movwf	6
  5572  0FC3  0187               	clrf	7
  5573  0FC4  0801               	movf	1,w
  5574  0FC5  075F               	addwf	Configuration_Save@i,w
  5575  0FC6  318D  2500  318F   	fcall	_Configuration_WriteByte
  5576                           
  5577                           ;configuration.h: 101: config->checkSum ^= ptrConfig[i] ;
  5578  0FC9  0020               	movlb	0	; select bank0
  5579  0FCA  085F               	movf	Configuration_Save@i,w
  5580  0FCB  075E               	addwf	Configuration_Save@ptrConfig,w
  5581  0FCC  00DB               	movwf	??_Configuration_Save
  5582  0FCD  085B               	movf	??_Configuration_Save,w
  5583  0FCE  0086               	movwf	6
  5584  0FCF  0187               	clrf	7
  5585  0FD0  0801               	movf	1,w
  5586  0FD1  00DC               	movwf	??_Configuration_Save+1
  5587  0FD2  0860               	movf	Configuration_Save@config,w
  5588  0FD3  3E0C               	addlw	12
  5589  0FD4  0086               	movwf	6
  5590  0FD5  0187               	clrf	7
  5591  0FD6  085C               	movf	??_Configuration_Save+1,w
  5592  0FD7  0681               	xorwf	1,f
  5593                           
  5594                           ;configuration.h: 102: if ( EECON1bits.WRERR ) {
  5595  0FD8  0023               	movlb	3	; select bank3
  5596  0FD9  1D95               	btfss	21,3	;volsfr
  5597  0FDA  2FAE               	goto	l3329
  5598                           
  5599                           ;configuration.h: 103: returnCode = RETURN_CODE_WRITE_ERROR ;
  5600  0FDB  3010               	movlw	16
  5601  0FDC  0020               	movlb	0	; select bank0
  5602  0FDD  00DB               	movwf	??_Configuration_Save
  5603  0FDE  085B               	movf	??_Configuration_Save,w
  5604  0FDF  00DD               	movwf	Configuration_Save@returnCode
  5605  0FE0                     l3333:	
  5606                           
  5607                           ;configuration.h: 105: }
  5608                           ;configuration.h: 106: }
  5609                           ;configuration.h: 109: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5610  0FE0  0860               	movf	Configuration_Save@config,w
  5611  0FE1  0086               	movwf	6
  5612  0FE2  0187               	clrf	7
  5613  0FE3  0301               	decf	1,w
  5614  0FE4  1D03               	btfss	3,2
  5615  0FE5  2FFB               	goto	l3343
  5616  0FE6  0023               	movlb	3	; select bank3
  5617  0FE7  1995               	btfsc	21,3	;volsfr
  5618  0FE8  2FFB               	goto	l3343
  5619                           
  5620                           ;configuration.h: 110: Configuration_WriteByte( 0x00 , config->romOffset ) ;
  5621  0FE9  0020               	movlb	0	; select bank0
  5622  0FEA  0860               	movf	Configuration_Save@config,w
  5623  0FEB  0086               	movwf	6
  5624  0FEC  0187               	clrf	7
  5625  0FED  3F41               	moviw [1]fsr1
  5626  0FEE  00F4               	movwf	Configuration_WriteByte@data
  5627  0FEF  3000               	movlw	0
  5628  0FF0  318D  2500  318F   	fcall	_Configuration_WriteByte
  5629                           
  5630                           ;configuration.h: 111: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5631  0FF3  0023               	movlb	3	; select bank3
  5632  0FF4  1D95               	btfss	21,3	;volsfr
  5633  0FF5  2FFB               	goto	l3343
  5634  0FF6  3010               	movlw	16
  5635  0FF7  0020               	movlb	0	; select bank0
  5636  0FF8  00DB               	movwf	??_Configuration_Save
  5637  0FF9  085B               	movf	??_Configuration_Save,w
  5638  0FFA  00DD               	movwf	Configuration_Save@returnCode
  5639  0FFB                     l3343:	
  5640                           
  5641                           ;configuration.h: 112: }
  5642                           ;configuration.h: 115: EECON1bits.WREN=0; ;
  5643  0FFB  0023               	movlb	3	; select bank3
  5644  0FFC  1115               	bcf	21,2	;volsfr
  5645                           
  5646                           ;configuration.h: 118: INTCONbits.GIE=1; ;
  5647  0FFD  178B               	bsf	11,7	;volatile
  5648                           
  5649                           ;configuration.h: 120: return RETURN_CODE_NOERROR ;
  5650  0FFE  3000               	movlw	0
  5651  0FFF  0008               	return
  5652  1000                     __end_of_Configuration_Save:	
  5653                           
  5654                           	psect	text12
  5655  0D00                     __ptext12:	
  5656 ;; *************** function _Configuration_WriteByte *****************
  5657 ;; Defined at:
  5658 ;;		line 158 in file "src/configuration.h"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  address         1    wreg     unsigned char 
  5661 ;;  data            1    4[COMMON] unsigned char 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  address         1    5[COMMON] unsigned char 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;		None               void
  5666 ;; Registers used:
  5667 ;;		wreg, status,2
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5673 ;;      Params:         1       0       0       0       0       0
  5674 ;;      Locals:         1       0       0       0       0       0
  5675 ;;      Temps:          0       0       0       0       0       0
  5676 ;;      Totals:         2       0       0       0       0       0
  5677 ;;Total ram usage:        2 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    1
  5680 ;; This function calls:
  5681 ;;		Nothing
  5682 ;; This function is called by:
  5683 ;;		_Configuration_Save
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function _Configuration_WriteByte
  5689  0D00                     _Configuration_WriteByte:	
  5690                           
  5691                           ;incstack = 0
  5692                           ; Regs used in _Configuration_WriteByte: [wreg+status,2]
  5693                           ;Configuration_WriteByte@address stored from wreg
  5694  0D00  00F5               	movwf	Configuration_WriteByte@address
  5695                           
  5696                           ;configuration.h: 159: EEADRH=0x00;EEADRL=(address); ;
  5697  0D01  0023               	movlb	3	; select bank3
  5698  0D02  0192               	clrf	18	;volatile
  5699  0D03  0875               	movf	Configuration_WriteByte@address,w
  5700  0D04  0091               	movwf	17	;volatile
  5701                           
  5702                           ;configuration.h: 160: EEDATH=0x00;EEDATL=(data); ;
  5703  0D05  0194               	clrf	20	;volatile
  5704  0D06  0874               	movf	Configuration_WriteByte@data,w
  5705  0D07  0093               	movwf	19	;volatile
  5706                           
  5707                           ;configuration.h: 161: EECON2=0x55;EECON2=0xAA; ;
  5708  0D08  3055               	movlw	85
  5709  0D09  0096               	movwf	22	;volsfr
  5710  0D0A  30AA               	movlw	170
  5711  0D0B  0096               	movwf	22	;volsfr
  5712                           
  5713                           ;configuration.h: 162: EECON1bits.WR=1; ;
  5714  0D0C  1495               	bsf	21,1	;volsfr
  5715  0D0D                     l172:	
  5716                           ;configuration.h: 163: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5717                           
  5718  0D0D  0020               	movlb	0	; select bank0
  5719  0D0E  1E12               	btfss	18,4	;volatile
  5720  0D0F  2D0D               	goto	l172
  5721  0D10  1212               	bcf	18,4	;volatile
  5722  0D11  0008               	return
  5723  0D12                     __end_of_Configuration_WriteByte:	
  5724                           
  5725                           	psect	text13
  5726  0E9D                     __ptext13:	
  5727 ;; *************** function _Configuration_Load *****************
  5728 ;; Defined at:
  5729 ;;		line 126 in file "src/configuration.h"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  config          1    wreg     PTR struct .
  5732 ;;		 -> configration_(13), 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  config          1    4[BANK0 ] PTR struct .
  5735 ;;		 -> configration_(13), 
  5736 ;;  i               1    3[BANK0 ] unsigned char 
  5737 ;;  ptrConfig       1    2[BANK0 ] PTR unsigned char 
  5738 ;;		 -> configration_(13), 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      enum E2863
  5741 ;; Registers used:
  5742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5748 ;;      Params:         0       0       0       0       0       0
  5749 ;;      Locals:         0       3       0       0       0       0
  5750 ;;      Temps:          0       2       0       0       0       0
  5751 ;;      Totals:         0       5       0       0       0       0
  5752 ;;Total ram usage:        5 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    2
  5755 ;; This function calls:
  5756 ;;		_Configuration_ReadByte
  5757 ;; This function is called by:
  5758 ;;		_main
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _Configuration_Load
  5764  0E9D                     _Configuration_Load:	
  5765                           
  5766                           ;incstack = 0
  5767                           ; Regs used in _Configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5768                           ;Configuration_Load@config stored from wreg
  5769  0E9D  0020               	movlb	0	; select bank0
  5770  0E9E  00DF               	movwf	Configuration_Load@config
  5771                           
  5772                           ;configuration.h: 128: EepromData_t* ptrConfig = (EepromData_t*) config ;
  5773  0E9F  085F               	movf	Configuration_Load@config,w
  5774  0EA0  00DB               	movwf	??_Configuration_Load
  5775  0EA1  085B               	movf	??_Configuration_Load,w
  5776  0EA2  00DD               	movwf	Configuration_Load@ptrConfig
  5777                           
  5778                           ;configuration.h: 131: INTCONbits.GIE=0; ;
  5779  0EA3  138B               	bcf	11,7	;volatile
  5780                           
  5781                           ;configuration.h: 134: config->romOffset = Configuration_ReadByte( 0x00 , MEMORY_SELECT_
      +                          EEPROM ) ;
  5782  0EA4  01F4               	clrf	Configuration_ReadByte@memorySelect
  5783  0EA5  3000               	movlw	0
  5784  0EA6  318C  24EE  318E   	fcall	_Configuration_ReadByte
  5785  0EA9  0020               	movlb	0	; select bank0
  5786  0EAA  00DB               	movwf	??_Configuration_Load
  5787  0EAB  0A5F               	incf	Configuration_Load@config,w
  5788  0EAC  0086               	movwf	6
  5789  0EAD  0187               	clrf	7
  5790  0EAE  085B               	movf	??_Configuration_Load,w
  5791  0EAF  0081               	movwf	1
  5792                           
  5793                           ;configuration.h: 137: if ( config->romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
      +                           return RETURN_CODE_INVALID_OFFSET ;
  5794  0EB0  0A5F               	incf	Configuration_Load@config,w
  5795  0EB1  0086               	movwf	6
  5796  0EB2  0187               	clrf	7
  5797  0EB3  30F3               	movlw	243
  5798  0EB4  0201               	subwf	1,w
  5799  0EB5  1C03               	skipc
  5800  0EB6  2EB9               	goto	l3361
  5801  0EB7  3030               	movlw	48
  5802  0EB8  0008               	return
  5803  0EB9                     l3361:	
  5804                           
  5805                           ;configuration.h: 139: config->checkSum = 0x00 ;
  5806  0EB9  085F               	movf	Configuration_Load@config,w
  5807  0EBA  3E0C               	addlw	12
  5808  0EBB  0086               	movwf	6
  5809  0EBC  0187               	clrf	7
  5810  0EBD  0181               	clrf	1
  5811                           
  5812                           ;configuration.h: 142: for ( Uint08_t i = 0 ; i < sizeof(ConfigurationData) ; i++ ) {
  5813  0EBE  01DE               	clrf	Configuration_Load@i
  5814  0EBF  300D               	movlw	13
  5815  0EC0  025E               	subwf	Configuration_Load@i,w
  5816  0EC1  1803               	btfsc	3,0
  5817  0EC2  2EEC               	goto	l168
  5818  0EC3                     l3369:	
  5819                           
  5820                           ;configuration.h: 143: ptrConfig[i] = Configuration_ReadByte( config->romOffset + i , ME
      +                          MORY_SELECT_EEPROM ) ;
  5821  0EC3  01F4               	clrf	Configuration_ReadByte@memorySelect
  5822  0EC4  0A5F               	incf	Configuration_Load@config,w
  5823  0EC5  0086               	movwf	6
  5824  0EC6  0187               	clrf	7
  5825  0EC7  0801               	movf	1,w
  5826  0EC8  075E               	addwf	Configuration_Load@i,w
  5827  0EC9  318C  24EE  318E   	fcall	_Configuration_ReadByte
  5828  0ECC  0020               	movlb	0	; select bank0
  5829  0ECD  00DB               	movwf	??_Configuration_Load
  5830  0ECE  085E               	movf	Configuration_Load@i,w
  5831  0ECF  075D               	addwf	Configuration_Load@ptrConfig,w
  5832  0ED0  00DC               	movwf	??_Configuration_Load+1
  5833  0ED1  085C               	movf	??_Configuration_Load+1,w
  5834  0ED2  0086               	movwf	6
  5835  0ED3  0187               	clrf	7
  5836  0ED4  085B               	movf	??_Configuration_Load,w
  5837  0ED5  0081               	movwf	1
  5838                           
  5839                           ;configuration.h: 144: config->checkSum ^= ptrConfig[i] ;
  5840  0ED6  085E               	movf	Configuration_Load@i,w
  5841  0ED7  075D               	addwf	Configuration_Load@ptrConfig,w
  5842  0ED8  00DB               	movwf	??_Configuration_Load
  5843  0ED9  085B               	movf	??_Configuration_Load,w
  5844  0EDA  0086               	movwf	6
  5845  0EDB  0187               	clrf	7
  5846  0EDC  0801               	movf	1,w
  5847  0EDD  00DC               	movwf	??_Configuration_Load+1
  5848  0EDE  085F               	movf	Configuration_Load@config,w
  5849  0EDF  3E0C               	addlw	12
  5850  0EE0  0086               	movwf	6
  5851  0EE1  0187               	clrf	7
  5852  0EE2  085C               	movf	??_Configuration_Load+1,w
  5853  0EE3  0681               	xorwf	1,f
  5854  0EE4  3001               	movlw	1
  5855  0EE5  00DB               	movwf	??_Configuration_Load
  5856  0EE6  085B               	movf	??_Configuration_Load,w
  5857  0EE7  07DE               	addwf	Configuration_Load@i,f
  5858  0EE8  300D               	movlw	13
  5859  0EE9  025E               	subwf	Configuration_Load@i,w
  5860  0EEA  1C03               	skipc
  5861  0EEB  2EC3               	goto	l3369
  5862  0EEC                     l168:	
  5863                           
  5864                           ;configuration.h: 145: }
  5865                           ;configuration.h: 148: INTCONbits.GIE=1; ;
  5866  0EEC  178B               	bsf	11,7	;volatile
  5867                           
  5868                           ;configuration.h: 151: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5869  0EED  085F               	movf	Configuration_Load@config,w
  5870  0EEE  3E0C               	addlw	12
  5871  0EEF  0086               	movwf	6
  5872  0EF0  0187               	clrf	7
  5873  0EF1  0801               	movf	1,w
  5874  0EF2  1903               	btfsc	3,2
  5875  0EF3  2EF6               	goto	l3383
  5876  0EF4  3020               	movlw	32
  5877  0EF5  0008               	return
  5878  0EF6                     l3383:	
  5879                           
  5880                           ;configuration.h: 153: return RETURN_CODE_NOERROR ;
  5881  0EF6  3000               	movlw	0
  5882  0EF7  0008               	return
  5883  0EF8                     __end_of_Configuration_Load:	
  5884                           
  5885                           	psect	text14
  5886  0CEE                     __ptext14:	
  5887 ;; *************** function _Configuration_ReadByte *****************
  5888 ;; Defined at:
  5889 ;;		line 168 in file "src/configuration.h"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  address         1    wreg     unsigned char 
  5892 ;;  memorySelect    1    4[COMMON] enum E2869
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  address         1    5[COMMON] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      unsigned char 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5904 ;;      Params:         1       0       0       0       0       0
  5905 ;;      Locals:         1       0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0
  5907 ;;      Totals:         2       0       0       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    1
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_Configuration_Save
  5915 ;;		_Configuration_Load
  5916 ;;		_main
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           
  5921                           ;psect for function _Configuration_ReadByte
  5922  0CEE                     _Configuration_ReadByte:	
  5923                           
  5924                           ;incstack = 0
  5925                           ; Regs used in _Configuration_ReadByte: [wreg+status,2+status,0]
  5926                           ;Configuration_ReadByte@address stored from wreg
  5927  0CEE  00F5               	movwf	Configuration_ReadByte@address
  5928                           
  5929                           ;configuration.h: 169: EEADRH=0x00;EEADRL=(address); ;
  5930  0CEF  0023               	movlb	3	; select bank3
  5931  0CF0  0192               	clrf	18	;volatile
  5932  0CF1  0875               	movf	Configuration_ReadByte@address,w
  5933  0CF2  0091               	movwf	17	;volatile
  5934                           
  5935                           ;configuration.h: 170: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5936  0CF3  1395               	bcf	21,7	;volsfr
  5937  0CF4  0874               	movf	Configuration_ReadByte@memorySelect,w
  5938  0CF5  1903               	btfsc	3,2
  5939  0CF6  2CF9               	goto	l178
  5940  0CF7  1715               	bsf	21,6	;volsfr
  5941  0CF8  2CFA               	goto	l179
  5942  0CF9                     l178:	
  5943  0CF9  1315               	bcf	21,6	;volsfr
  5944  0CFA                     l179:	
  5945                           
  5946                           ;configuration.h: 171: EECON1bits.RD=1; ;
  5947  0CFA  1415               	bsf	21,0	;volsfr
  5948                           
  5949                           ;configuration.h: 172: __nop() ;
  5950  0CFB  0000               	nop
  5951                           
  5952                           ;configuration.h: 173: __nop() ;
  5953  0CFC  0000               	nop
  5954                           
  5955                           ;configuration.h: 174: return EEDATL ;
  5956  0CFD  0023               	movlb	3	; select bank3
  5957  0CFE  0813               	movf	19,w	;volatile
  5958  0CFF  0008               	return
  5959  0D00                     __end_of_Configuration_ReadByte:	
  5960                           
  5961                           	psect	intentry
  5962  0004                     __pintentry:	
  5963 ;; *************** function _isr *****************
  5964 ;; Defined at:
  5965 ;;		line 957 in file "src/main.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;		None
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;		None
  5970 ;; Return value:  Size  Location     Type
  5971 ;;		None               void
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5979 ;;      Params:         0       0       0       0       0       0
  5980 ;;      Locals:         0       0       0       0       0       0
  5981 ;;      Temps:          4       0       0       0       0       0
  5982 ;;      Totals:         4       0       0       0       0       0
  5983 ;;Total ram usage:        4 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		Interrupt level 1
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992  0004                     _isr:	
  5993                           
  5994                           ;incstack = 0
  5995                           ; Regs used in _isr: [wreg+status,2+status,0]
  5996  0004  3180               	pagesel	$
  5997  0005  0020               	movlb	0	; select bank0
  5998  0006  087F               	movf	127,w
  5999  0007  00F3               	movwf	??_isr+3
  6000                           
  6001                           ;main.c: 958: static struct {
  6002                           ;main.c: 959: Uint08_t count1ms ;
  6003                           ;main.c: 960: Uint08_t count10ms ;
  6004                           ;main.c: 961: } prescaler = { 0 , 0 } ;
  6005                           ;main.c: 963: if( !PIR3bits.TMR6IF ) return ;
  6006  0008  1D93               	btfss	19,3	;volatile
  6007  0009  2871               	goto	i1l447
  6008                           
  6009                           ;main.c: 964: PIR3bits.TMR6IF = 0 ;
  6010  000A  1193               	bcf	19,3	;volatile
  6011                           
  6012                           ;main.c: 967: tempoCounter_ += configration_.tempo ;
  6013  000B  0822               	movf	_configration_+2,w
  6014  000C  00F0               	movwf	??_isr
  6015  000D  0823               	movf	_configration_+3,w
  6016  000E  00F1               	movwf	??_isr+1
  6017  000F  01F2               	clrf	??_isr+2
  6018  0010  0870               	movf	??_isr,w
  6019  0011  07C9               	addwf	_tempoCounter_,f
  6020  0012  0871               	movf	??_isr+1,w
  6021  0013  3DCA               	addwfc	_tempoCounter_+1,f
  6022  0014  0872               	movf	??_isr+2,w
  6023  0015  3DCB               	addwfc	_tempoCounter_+2,f
  6024                           
  6025                           ;main.c: 970: if( --prescaler.count1ms ) return ;
  6026  0016  3001               	movlw	1
  6027  0017  02F8               	subwf	isr@prescaler,f
  6028  0018  1D03               	btfss	3,2
  6029  0019  2871               	goto	i1l447
  6030                           
  6031                           ;main.c: 971: prescaler.count1ms = 80 ;
  6032  001A  3050               	movlw	80
  6033  001B  00F0               	movwf	??_isr
  6034  001C  0870               	movf	??_isr,w
  6035  001D  00F8               	movwf	isr@prescaler
  6036                           
  6037                           ;main.c: 974: if( soundDurationCount_.click && !--soundDurationCount_.click && !soundDur
      +                          ationCount_.key )
  6038  001E  0850               	movf	_soundDurationCount_,w
  6039  001F  1903               	btfsc	3,2
  6040  0020  2829               	goto	i1l2949
  6041  0021  3001               	movlw	1
  6042  0022  02D0               	subwf	_soundDurationCount_,f
  6043  0023  1D03               	btfss	3,2
  6044  0024  2829               	goto	i1l2949
  6045  0025  0851               	movf	_soundDurationCount_+1,w
  6046  0026  1D03               	btfss	3,2
  6047  0027  2829               	goto	i1l2949
  6048                           
  6049                           ;main.c: 975: events_.sound.off=1 ;
  6050  0028  1448               	bsf	_events_+2,0
  6051  0029                     i1l2949:	
  6052                           
  6053                           ;main.c: 976: if( soundDurationCount_.key && ! --soundDurationCount_.key )
  6054  0029  0851               	movf	_soundDurationCount_+1,w
  6055  002A  1903               	btfsc	3,2
  6056  002B  2831               	goto	i1l2955
  6057  002C  3001               	movlw	1
  6058  002D  02D1               	subwf	_soundDurationCount_+1,f
  6059  002E  1D03               	btfss	3,2
  6060  002F  2831               	goto	i1l2955
  6061                           
  6062                           ;main.c: 977: events_.sound.off=1 ;
  6063  0030  1448               	bsf	_events_+2,0
  6064  0031                     i1l2955:	
  6065                           
  6066                           ;main.c: 980: if( --prescaler.count10ms ) return ;
  6067  0031  3001               	movlw	1
  6068  0032  02F9               	subwf	isr@prescaler+1,f
  6069  0033  1D03               	btfss	3,2
  6070  0034  2871               	goto	i1l447
  6071                           
  6072                           ;main.c: 981: prescaler.count10ms = 10 ;
  6073  0035  300A               	movlw	10
  6074  0036  00F0               	movwf	??_isr
  6075  0037  0870               	movf	??_isr,w
  6076  0038  00F9               	movwf	isr@prescaler+1
  6077                           
  6078                           ;main.c: 984: if( stateReturnCounter_ && ! --stateReturnCounter_ ) {
  6079  0039  0859               	movf	_stateReturnCounter_,w
  6080  003A  1903               	btfsc	3,2
  6081  003B  2844               	goto	i1l2967
  6082  003C  3001               	movlw	1
  6083  003D  02D9               	subwf	_stateReturnCounter_,f
  6084  003E  1D03               	btfss	3,2
  6085  003F  2844               	goto	i1l2967
  6086                           
  6087                           ;main.c: 985: events_.output.changeState=1 ;
  6088  0040  1447               	bsf	_events_+1,0
  6089                           
  6090                           ;main.c: 986: events_.output.resetMetronome=1 ;
  6091  0041  15C7               	bsf	_events_+1,3
  6092                           
  6093                           ;main.c: 987: machineState_ = STATE_METRONOME ;
  6094  0042  01D6               	clrf	_machineState_
  6095  0043  0AD6               	incf	_machineState_,f
  6096  0044                     i1l2967:	
  6097                           
  6098                           ;main.c: 988: }
  6099                           ;main.c: 991: static struct {
  6100                           ;main.c: 992: Uint08_t Up ;
  6101                           ;main.c: 993: Uint08_t Down ;
  6102                           ;main.c: 994: } keyHoldCount = { 0 , 0 } ;
  6103                           ;main.c: 996: sampledPortAState_.byte = (~PORTA&0xE0) ;
  6104  0044  090C               	comf	12,w	;volatile
  6105  0045  39E0               	andlw	224
  6106  0046  00F0               	movwf	??_isr
  6107  0047  0870               	movf	??_isr,w
  6108  0048  00D7               	movwf	_sampledPortAState_
  6109                           
  6110                           ;main.c: 998: if( sampledPortAState_.keyUp && !sampledPortAState_.keyDown ) {
  6111  0049  1BD7               	btfsc	_sampledPortAState_,7
  6112  004A  1B57               	btfsc	_sampledPortAState_,6
  6113  004B  2856               	goto	i1l2979
  6114                           
  6115                           ;main.c: 999: if( !--keyHoldCount.Up ) {
  6116  004C  3001               	movlw	1
  6117  004D  02F6               	subwf	isr@keyHoldCount,f
  6118  004E  1D03               	btfss	3,2
  6119  004F  285A               	goto	i1l2981
  6120                           
  6121                           ;main.c: 1000: keyHoldCount.Up = 4 ;
  6122  0050  3004               	movlw	4
  6123  0051  00F0               	movwf	??_isr
  6124  0052  0870               	movf	??_isr,w
  6125  0053  00F6               	movwf	isr@keyHoldCount
  6126                           
  6127                           ;main.c: 1001: events_.keyPress.upHold=1 ;
  6128  0054  1646               	bsf	_events_,4
  6129                           
  6130                           ;main.c: 1002: }
  6131                           ;main.c: 1003: }
  6132  0055  285A               	goto	i1l2981
  6133  0056                     i1l2979:	
  6134                           
  6135                           ;main.c: 1004: else
  6136                           ;main.c: 1005: keyHoldCount.Up = 0x40 ;
  6137  0056  3040               	movlw	64
  6138  0057  00F0               	movwf	??_isr
  6139  0058  0870               	movf	??_isr,w
  6140  0059  00F6               	movwf	isr@keyHoldCount
  6141  005A                     i1l2981:	
  6142                           
  6143                           ;main.c: 1007: if( sampledPortAState_.keyDown && !sampledPortAState_.keyUp ) {
  6144  005A  1B57               	btfsc	_sampledPortAState_,6
  6145  005B  1BD7               	btfsc	_sampledPortAState_,7
  6146  005C  2867               	goto	i1l2991
  6147                           
  6148                           ;main.c: 1008: if( !--keyHoldCount.Down ) {
  6149  005D  3001               	movlw	1
  6150  005E  02F7               	subwf	isr@keyHoldCount+1,f
  6151  005F  1D03               	btfss	3,2
  6152  0060  286B               	goto	i1l2993
  6153                           
  6154                           ;main.c: 1009: keyHoldCount.Down = 4 ;
  6155  0061  3004               	movlw	4
  6156  0062  00F0               	movwf	??_isr
  6157  0063  0870               	movf	??_isr,w
  6158  0064  00F7               	movwf	isr@keyHoldCount+1
  6159                           
  6160                           ;main.c: 1010: events_.keyPress.downHold=1 ;
  6161  0065  16C6               	bsf	_events_,5
  6162                           
  6163                           ;main.c: 1011: }
  6164                           ;main.c: 1012: }
  6165  0066  286B               	goto	i1l2993
  6166  0067                     i1l2991:	
  6167                           
  6168                           ;main.c: 1013: else
  6169                           ;main.c: 1014: keyHoldCount.Down = 0x40 ;
  6170  0067  3040               	movlw	64
  6171  0068  00F0               	movwf	??_isr
  6172  0069  0870               	movf	??_isr,w
  6173  006A  00F7               	movwf	isr@keyHoldCount+1
  6174  006B                     i1l2993:	
  6175                           
  6176                           ;main.c: 1016: if( PIR3bits.TMR6IF ) machineError_ = ERROR_INTERRUPT ;
  6177  006B  1D93               	btfss	19,3	;volatile
  6178  006C  2871               	goto	i1l447
  6179  006D  3002               	movlw	2
  6180  006E  00F0               	movwf	??_isr
  6181  006F  0870               	movf	??_isr,w
  6182  0070  00D5               	movwf	_machineError_
  6183  0071                     i1l447:	
  6184  0071  0873               	movf	??_isr+3,w
  6185  0072  00FF               	movwf	127
  6186  0073  0009               	retfie
  6187  0074                     __end_of_isr:	
  6188  007E                     btemp	set	126	;btemp
  6189  007E                     wtemp	set	126
  6190  007E                     wtemp0	set	126
  6191  0080                     wtemp1	set	128
  6192  0082                     wtemp2	set	130
  6193  0084                     wtemp3	set	132
  6194  0086                     wtemp4	set	134
  6195  0088                     wtemp5	set	136
  6196  007F                     wtemp6	set	127
  6197  007E                     ttemp	set	126
  6198  007E                     ttemp0	set	126
  6199  0081                     ttemp1	set	129
  6200  0084                     ttemp2	set	132
  6201  0087                     ttemp3	set	135
  6202  007F                     ttemp4	set	127
  6203  007E                     ltemp	set	126
  6204  007E                     ltemp0	set	126
  6205  0082                     ltemp1	set	130
  6206  0086                     ltemp2	set	134
  6207  0080                     ltemp3	set	128


Data Sizes:
    Strings     328
    Constant    68
    Data        190
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     15      74
    BANK1            80      0      80
    BANK2            80      0      72
    BANK3            80     17      17
    BANK4            48      0       0

Pointer List with Targets:

    currentSingleMessage_	PTR const unsigned char  size(2) Largest target is 4096
		 -> ROM(CODE[4096]), STR_31(CODE[10]), STR_30(CODE[7]), STR_28(CODE[12]), 
		 -> STR_27(CODE[6]), STR_26(CODE[7]), 

    currentMenuInfoPtr_.menuMessage	PTR PTR const unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    currentMenuInfoPtr_	PTR struct . size(1) Largest target is 5
		 -> menuInfoInformation_(BANK0[5]), NULL(NULL[0]), menuInfoDuration_(BANK0[5]), menuInfoTone_(BANK0[5]), 
		 -> menuInfoMain_(BANK0[5]), 

    currentConfirmationInfoPtr_.message	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), 

    currentConfirmationInfoPtr_	PTR struct . size(1) Largest target is 5
		 -> confirmationReset_(BANK1[5]), ConfirmationSave_(BANK1[5]), confirmationLoad_(BANK0[5]), NULL(NULL[0]), 

    currentValueInfoPtr_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    currentValueInfoPtr_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    currentValueInfoPtr_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    currentValueInfoPtr_	PTR struct . size(2) Largest target is 27
		 -> valueInfoOscillatorTune_(BANK1[8]), valueInfoPulseWidth_(BANK1[8]), valueInfoDurationKey_(BANK1[8]), valueInfoDurationClick_(BANK1[8]), 
		 -> valueInfoTone_(BANK2[24]), valueInfoBeatCount_(BANK1[8]), valueInfoTempo_(BANK1[8]), NULL(NULL[0]), 

    valueInfoOscillatorTune_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoOscillatorTune_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoOscillatorTune_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.oscillatorTune(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoPulseWidth_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoPulseWidth_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoPulseWidth_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.pulseWidth(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoDurationKey_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoDurationKey_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoDurationKey_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration.key(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoDurationClick_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoDurationClick_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoDurationClick_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration.click(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoTone_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoTone_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoTone_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.tone(BANK0[3]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoBeatCount_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoBeatCount_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoBeatCount_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_.beatCount(BANK0[1]), configration_(BANK0[13]), 

    S712$value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    valueInfoTempo_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_52(CODE[10]), STR_50(CODE[12]), STR_48(CODE[9]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[6]), 

    S712$title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    valueInfoTempo_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_51(CODE[14]), STR_49(CODE[14]), STR_47(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), 
		 -> STR_35(CODE[10]), 

    S715$valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoTempo_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    confirmationReset_.message	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), 

    ConfirmationSave_.message	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), 

    S704$message	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), 

    confirmationLoad_.message	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), 

    menuInfoInformation_.menuMessage	PTR PTR const unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoDuration_.menuMessage	PTR PTR const unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoTone_.menuMessage	PTR PTR const unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    S699$menuMessage	PTR PTR const unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoMain_.menuMessage	PTR PTR const unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    S648$INTERRUPT	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_31(CODE[10]), 

    MESSAGE.ERROR.INTERRUPT	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_31(CODE[10]), 

    S648$EEPROM	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_30(CODE[7]), 

    MESSAGE.ERROR.EEPROM	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_30(CODE[7]), 

    S648$TITLE	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_29(CODE[13]), 

    MESSAGE.ERROR.TITLE	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_29(CODE[13]), 

    S644$INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_28(CODE[12]), 

    MESSAGE.MEMORY.INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_28(CODE[12]), 

    S644$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), 

    S644$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_26(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_26(CODE[7]), 

    S641$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_25(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_25(CODE[4]), 

    S641$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_24(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_24(CODE[4]), 

    S638$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    S638$MAIN_TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE.METRONOME.MAIN_TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 

    MESSAGE_MENU_ITEM_DURATION	PTR const unsigned char [3] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    Configuration_Load@config	PTR struct . size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Save@config	PTR struct . size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    ParallelLCD_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    ParallelLCD_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_52(CODE[10]), STR_51(CODE[14]), STR_50(CODE[12]), STR_49(CODE[14]), 
		 -> STR_48(CODE[9]), STR_47(CODE[9]), STR_46(CODE[6]), STR_45(CODE[9]), 
		 -> STR_44(CODE[6]), STR_43(CODE[5]), STR_42(CODE[6]), STR_41(CODE[5]), 
		 -> STR_40(CODE[6]), STR_39(CODE[5]), STR_38(CODE[11]), STR_37(CODE[14]), 
		 -> STR_36(CODE[6]), STR_35(CODE[10]), ROM(CODE[4096]), STR_31(CODE[10]), 
		 -> STR_30(CODE[7]), STR_29(CODE[13]), STR_28(CODE[12]), STR_27(CODE[6]), 
		 -> STR_26(CODE[7]), STR_25(CODE[4]), STR_24(CODE[4]), STR_22(CODE[10]), 
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    ParallelLCD_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 28
		 -> main@valueString(BANK3[6]), informationValueBuffer(BANK2[28]), STR_34(CODE[8]), STR_33(CODE[7]), 
		 -> STR_32(CODE[7]), STR_23(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_Configuration_ReadByte
    _main->___bmul
    _ParallelLCD_WriteStringClearing->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->___bmul
    _ParallelLCD_WriteCharacter->_ParallelLCD_WriteByte
    _ParallelLCD_SetCgram->_ParallelLCD_WriteByte
    _ParallelLCD_Initialize->_ParallelLCD_WriteByte
    _ParallelLCD_ClearRow->_ParallelLCD_WriteByte
    _Configuration_Save->_Configuration_ReadByte
    _Configuration_Save->_Configuration_WriteByte
    _Configuration_Load->_Configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Configuration_Save
    _main->_ParallelLCD_WriteString
    _ParallelLCD_WriteString->___bmul
    _ParallelLCD_ClearDisplay->_ParallelLCD_ClearRow

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   21415
                                              6 BANK0      9     9      0
                                              0 BANK3     17    17      0
                 _Configuration_Load
             _Configuration_ReadByte
                 _Configuration_Save
           _ParallelLCD_ClearDisplay
               _ParallelLCD_ClearRow
             _ParallelLCD_Initialize
               _ParallelLCD_SetCgram
         _ParallelLCD_WriteCharacter
            _ParallelLCD_WriteString
    _ParallelLCD_WriteStringClearing
                             ___bmul
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     232
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteStringClearing                      5     3      2    3258
                                              0 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteString                              4     2      2    2498
                                              2 BANK0      4     2      2
              _ParallelLCD_WriteByte
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteCharacter                           2     1      1    2284
                                              0 BANK0      2     1      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_SetCgram                                 5     3      2    2265
                                              0 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_Initialize                               4     1      3    2256
                                              0 BANK0      4     1      3
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearDisplay                             0     0      0    1961
               _ParallelLCD_ClearRow
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearRow                                 3     3      0    1961
                                              0 BANK0      3     3      0
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (2) _ParallelLCD_WriteByte                                2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Save                                   6     6      0    1623
                                              0 BANK0      6     6      0
             _Configuration_ReadByte
            _Configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_WriteByte                              2     1      1     242
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Load                                   5     5      0    1155
                                              0 BANK0      5     5      0
             _Configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_ReadByte                               2     1      1     602
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration_Load
     _Configuration_ReadByte
   _Configuration_ReadByte
   _Configuration_Save
     _Configuration_ReadByte
     _Configuration_WriteByte
   _ParallelLCD_ClearDisplay
     _ParallelLCD_ClearRow
       _ParallelLCD_WriteByte
   _ParallelLCD_ClearRow
     _ParallelLCD_WriteByte
   _ParallelLCD_Initialize
     _ParallelLCD_WriteByte
   _ParallelLCD_SetCgram
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteCharacter
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteString
     _ParallelLCD_WriteByte
     ___bmul (ARG)
   _ParallelLCD_WriteStringClearing
     _ParallelLCD_WriteByte
   ___bmul
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      FD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      F      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      48      10       90.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     11      11      12       21.2%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      FD      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Aug 16 12:47:00 2015

                                       pc 0002                            ___bmul@product 005B  
                             __CFG_CP$OFF 0000             ParallelLCD_ClearRow@rowSelect 005C  
                                     l150 07F4                                       l151 07F5  
                                     l306 025D                                       l147 07E9  
                                     l172 0D0D                                       l261 00CE  
                                     l422 0714                                       l326 034B  
                                     l168 0EEC                                       l280 01FC  
                                     l272 01CF                                       l264 00D1  
                                     l257 00C9                                       l178 0CF9  
                                     l338 031B                                       l282 0203  
                                     l258 01C8                                       l179 0CFA  
                                     l275 01EA                                       l276 01F4  
                                     l285 0216                                       l277 01F2  
                                     l269 01BB                                       l366 0498  
                                     l383 055D                                       l367 04F9  
                                     l359 0499                                       l287 0214  
                                     l279 01FE                                       l288 0215  
                                     l399 06FB                                       _PR2 001B  
                                     _PR4 0416                              __CFG_CPD$OFF 0000  
                                     _PR6 041D                                       _isr 0004  
                            __CFG_IDLOC0$ 0001                              __CFG_IDLOC1$ 0001  
                            __CFG_IDLOC2$ 0000                              __CFG_IDLOC3$ 0000  
                            __CFG_BORV$HI 0000                                       wreg 0009  
                                    S4091 09D6                                      S4093 09E6  
                                    S4095 09A8                                      S4087 09C2  
                                    S4089 098C                               _soundState_ 0058  
                            __CFG_LVP$OFF 0000                           __end_of_MESSAGE 0814  
                                    l3311 0FA4                                      l3307 0F98  
                                    l3333 0FE0                                      l3343 0FFB  
                                    l3423 00B8                                      l3361 0EB9  
                                    l3329 0FAE                                      l3249 0D45  
                                    l3601 02AF                                      l3425 00B9  
                                    l3267 0DF9                                      l3603 02B4  
                                    l3523 021B                                      l3443 00D4  
                                    l3269 0DFF                                      l3613 02CA  
                                    l3605 02B9                                      l3533 022A  
                                    l3621 02CF                                      l3509 0207  
                                    l3461 0147                                      l3453 0117  
                                    l3383 0EF6                                      l3615 02CB  
                                    l3607 02C3                                      l3551 0240  
                                    l3623 02EF                                      l3369 0EC3  
                                    l3393 0D1B                                      l3721 03A9  
                                    l3641 0307                                      l3633 02FC  
                                    l3553 0242                                      l3545 0238  
                                    l3529 0222                                      l3481 01A0  
                                    l3811 04C1                                      l3731 03BD  
                                    l3707 0397                                      l3643 0309  
                                    l3539 0231                                      l3389 0D15  
                                    l3805 04B5                                      l3741 03C7  
                                    l3725 03AF                                      l3653 0314  
                                    l3645 030B                                      l3637 0301  
                                    l3565 0251                                      l3549 023E  
                                    l3573 0260                                      l3477 0178  
                                    l3903 06D6                                      l3831 04FD  
                                    l3823 04EA                                      l3663 0327  
                                    l3647 030D                                      l3591 0293  
                                    l3583 0282                                      l3575 026B  
                                    l3559 0249                                      l3921 0736  
                                    l3913 070B                                      l3817 04DE  
                                    l3809 04BF                                      l3761 03DB  
                                    l3665 032F                                      l3657 031F  
                                    l3673 0341                                      l3907 06ED  
                                    l3851 0545                                      l3843 0528  
                                    l3827 04EC                                      l3691 0383  
                                    l3683 0357                                      l3659 0323  
                                    l3587 028A                                      l3595 0295  
                                    l3941 076C                                      l3933 0759  
                                    l3925 0749                                      l3845 052A  
                                    l3861 0550                                      l3773 040C  
                                    l3765 03E8                                      l3781 042D  
                                    l3749 03CD                                      l3693 0385  
                                    l3669 0338                                      l3597 02A4  
                                    l3943 078D                                      l3919 072E  
                                    l3927 0752                                      l3871 05D9  
                                    l3839 051D                                      l3961 07DC  
                                    l3953 07A9                                      l3865 0561  
                                    l3857 054E                                      l3769 03FA  
                                    l3955 07C8                                      l3875 0600  
                                    l3779 041F                                      l3965 07E1  
                                    l3949 0798                                      l3893 0688  
                                    l3885 0645                                      l3877 0618  
                                    l3797 049E                                      l3959 07D2  
                                    l3887 0648                                      l3899 06C8  
                                    ?_isr 0070                                      STR_1 0906  
                            __CFG_WDTE$ON 0000                                      STR_2 08BF  
                                    STR_3 08DE                                      STR_4 0844  
                                    STR_5 086D                                      STR_6 08F2  
                                    STR_7 0975                                      STR_8 097A  
                                    STR_9 097F                                      _LATB 010D  
                                    u2405 0DAB                                      u3215 0779  
                ??_ParallelLCD_Initialize 0076                                      u2615 00E3  
                                    u2625 0104                                      u2845 0361  
                                    u2934 03B6                                      u2935 03B5  
                                    u2855 037F                                      u2785 0275  
                                    u2975 0430                                      u2985 0451  
                                    u2995 0473                                      _TMR0 0015  
                                    _TMR1 0016                                      _TMR2 001A  
                                    _TMR4 0415                                      _TMR6 041C  
                            __CFG_WRT$OFF 0000                       _MESSAGE_INFORMATION 00A0  
                                    _main 00A8                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                           _valueInfoTempo_ 00D8  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0074  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_IESO$OFF 0000                         ___bmul@multiplier 005C  
     __size_of_ParallelLCD_WriteCharacter 000E                                     ??_isr 0070  
         ParallelLCD_WriteString@position 0060                   ??_ParallelLCD_WriteByte 0075  
                                   ?_main 0070                   _Configuration_WriteByte 0D00  
                                   STR_10 096F                                     STR_11 0906  
                                   STR_12 094B                                     STR_20 08B4  
                                   STR_13 0951                                     STR_21 089E  
                                   STR_30 093D                                     STR_22 08D4  
                                   STR_14 0957                                     STR_31 08FC  
                                   STR_23 0928                                     STR_15 0906  
                                   STR_24 0984                                     STR_40 094B  
                                   STR_16 0886                                     STR_32 092F  
                                   STR_25 0988                                     STR_41 08E3  
                                   STR_33 0936                                     STR_17 08CA  
                                   STR_26 0944                                     STR_42 0951  
                                   STR_34 0918                                     STR_50 0892  
                                   STR_18 0920                                     STR_27 095D  
                                   STR_43 08E3                                     STR_35 08D4  
                                   STR_51 0852                                     STR_19 08A9  
                                   STR_28 087A                                     STR_44 0957  
                                   STR_36 0969                                     STR_52 08E8  
                                   STR_29 0860                                     STR_45 0849  
                                   STR_37 0852                                     STR_46 0963  
                                   STR_38 08BF                                     STR_39 08E3  
                                   STR_47 0849                                     STR_48 090F  
                                   STR_49 0852                                     i1l447 0071  
             Configuration_Save@ptrConfig 005E                        main@prevPortAState 005A  
                  ParallelLCD_WriteByte@r 0074                                     _PORTA 000C  
                                   _TRISA 008C                                     _TRISB 008D  
                           __CFG_PWRTE$ON 0000                            __CFG_FCMEN$OFF 0000  
         __end_of_PARALLEL_LCD_ROW_SELECT 082C                                     main@i 01B0  
                            main@tmpValue 01A7                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                         __end_of_CHAR_CODE 0827  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F              __end_of_ParallelLCD_ClearRow 0D3E  
                          __CFG_MCLRE$OFF 0000                           __initialization 0076  
        ParallelLCD_WriteStringClearing@i 005F                              __end_of_main 07E8  
                     _soundDurationCount_ 0050                              _beatCounter_ 0052  
                                  ??_main 0061              __end_of_ParallelLCD_SetCgram 0DCF  
                      _Configuration_Load 0E9D                        _Configuration_Save 0F5F  
                       __end_of_HEX_TABLE 0824                            __CFG_PLLEN$OFF 0000  
                Configuration_Load@config 005F                             main@isNonZero 01A6  
                     ?_Configuration_Load 0070                       ?_Configuration_Save 0070  
                                  _EEADRH 0192                                    _EEADRL 0191  
                                  _EEDATH 0194                                    _CCPR4H 0319  
                                  _EEDATL 0193                                    _CCPR4L 0318  
                                  _EECON2 0196                                    _BITMAP 082C  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  i1l2955 0031                                    i1l2981 005A  
                                  i1l2949 0029                                    i1l2991 0067  
                                  i1l2967 0044                                    i1l2993 006B  
                                  i1l2979 0056           __size_of_ParallelLCD_Initialize 0021  
        ParallelLCD_WriteString@stringPtr 005D        ParallelLCD_WriteCharacter@position 005C  
              ParallelLCD_SetCgram@bitmap 005B                                    ___bmul 0D12  
                    ??_Configuration_Load 005B                      ??_Configuration_Save 005B  
                          __CFG_STVREN$ON 0000                      _currentValueInfoPtr_ 004E  
               ??_Configuration_WriteByte 0075            Configuration_WriteByte@address 0075  
                   _valueInfoDurationKey_ 00C0                   __end_of__initialization 00A5  
                Configuration_Save@config 0060                       ___bmul@multiplicand 0074  
                          __pcstackCOMMON 0070                              __pidataBANK0 0D7F  
                            __pidataBANK1 0E4D                              __pidataBANK2 0E05  
                           _menuInfoMain_ 003C                  ??_Configuration_ReadByte 0075  
                           _menuInfoTone_ 0041                    _ParallelLCD_Initialize 0D5E  
     ParallelLCD_WriteCharacter@character 005B                            _OPTION_REGbits 0095  
                    _ParallelLCD_ClearRow 0D24                                __pbssBANK0 0046  
           Configuration_ReadByte@address 0075                 ParallelLCD_WriteByte@data 0075  
                    _ParallelLCD_SetCgram 0DA5                  ?_ParallelLCD_WriteString 005D  
                   ParallelLCD_ClearRow@i 005D                                __pmaintext 00A8  
                                 ?___bmul 0074                                __pintentry 0004  
    ParallelLCD_Initialize@configFunction 005E                                   _CCPTMRS 029E  
                      _sampledPortAState_ 0057            __size_of_ParallelLCD_WriteByte 0016  
                     _currentMenuInfoPtr_ 0054             __end_of_ParallelLCD_WriteByte 07FE  
                                 _MESSAGE 0800                     ?_ParallelLCD_ClearRow 0070  
       __size_of_ParallelLCD_ClearDisplay 0008               Configuration_Load@ptrConfig 005D  
               ?_ParallelLCD_ClearDisplay 0070                            main@keyPressed 01AB  
                                 _OSCTUNE 0098                         _menuInfoDuration_ 0032  
                   ?_ParallelLCD_SetCgram 005B                         _confirmationLoad_ 002D  
                               _CHAR_CODE 0824                         main@COMPARE_UNITS 0827  
                         __size_of___bmul 0012                              isr@prescaler 0078  
         __size_of_Configuration_ReadByte 0012                                _initialize 0EF8  
                                 __ptext1 0EF8                                   __ptext2 0D12  
                                 __ptext3 0DCF                                   __ptext4 0D3E  
                                 __ptext5 0CE0                                   __ptext6 0DA5  
                                 __ptext7 0D5E                                   __ptext8 0CD8  
                                 __ptext9 0D24                    _informationValueBuffer 0120  
                               _T1CONbits 0018                                 _T2CONbits 001C  
                                 _events_ 0046                _MESSAGE_MENU_ITEM_DURATION 00E0  
                            __size_of_isr 0070              ??_ParallelLCD_WriteCharacter 0076  
                               _T4CONbits 0417                                 _T6CONbits 041E  
                   ParallelLCD_SetCgram@i 005F                                 _HEX_TABLE 0814  
                                 main@chr 01AA                                   clrloop0 0CD3  
                          main@portAState 01AF                      end_of_initialization 00A5  
                          main@returnCode 01AD           __end_of_ParallelLCD_WriteString 0D5E  
                                 init_ram 0CCC                                   initloop 0CCD  
               __end_ofmain@COMPARE_UNITS 082A                   _PARALLEL_LCD_ROW_SELECT 082A  
                            __pstringtext 0800                    ??_ParallelLCD_ClearRow 005B  
                        __CFG_FOSC$INTOSC 0000                     _currentSingleMessage_ 004C  
                  _Configuration_ReadByte 0CEE                            __end_of_BITMAP 0844  
                  ??_ParallelLCD_SetCgram 005D              ParallelLCD_SetCgram@charCode 005E  
                             _CCP1CONbits 0293                               _CCP2CONbits 029A  
                             _CCP3CONbits 0313                               _CCP4CONbits 031A  
                          _valueInfoTone_ 013C                                main@userId 01AE  
 __end_of_ParallelLCD_WriteStringClearing 0E05  __size_of_ParallelLCD_WriteStringClearing 0036  
       ??_ParallelLCD_WriteStringClearing 005D          ?_ParallelLCD_WriteStringClearing 005B  
         _ParallelLCD_WriteStringClearing 0DCF                   ?_ParallelLCD_Initialize 005B  
             __size_of_Configuration_Load 005B               __size_of_Configuration_Save 00A1  
                          __end_of___bmul 0D24                               ?_initialize 0070  
                     start_initialization 0076                               __end_of_isr 0074  
      Configuration_ReadByte@memorySelect 0074            __end_of_ParallelLCD_Initialize 0D7F  
                ?_Configuration_WriteByte 0074                                  ??___bmul 0075  
        __end_of_ParallelLCD_ClearDisplay 0CE0                               _CCPTMRSbits 029E  
                             __pdataBANK0 0020                               __pdataBANK1 00A0  
                             __pdataBANK2 0120          __size_of_ParallelLCD_WriteString 0020  
      __end_of_ParallelLCD_WriteCharacter 0CEE                _ParallelLCD_WriteCharacter 0CE0  
                             __pbssCOMMON 0076                                 ___latbits 0001  
                           __pcstackBANK0 005B                             __pcstackBANK3 01A0  
                     __size_of_initialize 0067       ParallelLCD_Initialize@configDisplay 005B  
                         main@compareUnit 01A9                                 __pswtext1 09C2  
                               __pswtext2 098C                                 __pswtext3 09D6  
                               __pswtext4 09E6                                 __pswtext5 09A8  
                     _valueInfoBeatCount_ 00B0               _currentConfirmationInfoPtr_ 0053  
   ParallelLCD_Initialize@configEntryMode 005D                     _ParallelLCD_WriteByte 07E8  
         __end_of_Configuration_WriteByte 0D12                                  _LATAbits 010C  
                               clear_ram0 0CD2                                  _PIE1bits 0091  
                                _PIE3bits 0093                         _ConfirmationSave_ 00E6  
                                _PIR1bits 0011                                  _PIR2bits 0012  
                                _PIR3bits 0013               Configuration_WriteByte@data 0074  
                _ParallelLCD_ClearDisplay 0CD8                                 main@phase 01AC  
                 ?_Configuration_ReadByte 0074              Configuration_Save@returnCode 005D  
                           _tempoCounter_ 0049  ParallelLCD_WriteStringClearing@stringPtr 005B  
                              _EECON1bits 0195                        _confirmationReset_ 00EB  
                _valueInfoOscillatorTune_ 00C8                      _valueInfoPulseWidth_ 00D0  
                            ??_initialize 0074                   _ParallelLCD_WriteString 0D3E  
          __end_of_Configuration_ReadByte 0D00                    _MESSAGE_MENU_ITEM_MAIN 0154  
                  _MESSAGE_MENU_ITEM_TONE 00A8                    ?_ParallelLCD_WriteByte 0074  
           __size_of_ParallelLCD_ClearRow 001A        ParallelLCD_Initialize@configCursor 005C  
                                __ptext10 07E8                                  __ptext11 0F5F  
                                __ptext12 0D00                                  __ptext13 0E9D  
                                __ptext14 0CEE                             __size_of_main 0740  
           __size_of_ParallelLCD_SetCgram 002A                        __end_of_initialize 0F5F  
              __end_of_Configuration_Load 0EF8                __end_of_Configuration_Save 1000  
 ParallelLCD_WriteStringClearing@position 005E                           main@valueString 01A0  
        __size_of_Configuration_WriteByte 0012               ?_ParallelLCD_WriteCharacter 005B  
                             _OSCTUNEbits 0098                                _INTCONbits 000B  
                         isr@keyHoldCount 0076                       Configuration_Load@i 005E  
                                intlevel1 0000                       Configuration_Save@i 005F  
                       __CFG_CLKOUTEN$OFF 0000                                _OSCCONbits 0099  
               ??_ParallelLCD_WriteString 005F                             _configration_ 0020  
                           _machineError_ 0055                                _WDTCONbits 0097  
                           _machineState_ 0056                   _valueInfoDurationClick_ 00B8  
                    _menuInfoInformation_ 0037                       _stateReturnCounter_ 0059  
              ??_ParallelLCD_ClearDisplay 0076  
