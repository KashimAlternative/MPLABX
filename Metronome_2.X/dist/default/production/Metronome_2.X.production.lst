

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Aug 14 10:33:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	swtext2,local,class=CONST,delta=2
    22                           	psect	swtext3,local,class=CONST,delta=2
    23                           	psect	swtext4,local,class=CONST,delta=2
    24                           	psect	swtext5,local,class=CONST,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000D                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0013                     	;# 
    58  0014                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  0091                     	;# 
    73  0092                     	;# 
    74  0093                     	;# 
    75  0094                     	;# 
    76  0095                     	;# 
    77  0096                     	;# 
    78  0097                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009B                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  0111                     	;# 
    90  0112                     	;# 
    91  0113                     	;# 
    92  0114                     	;# 
    93  0115                     	;# 
    94  0116                     	;# 
    95  0117                     	;# 
    96  0118                     	;# 
    97  0119                     	;# 
    98  011A                     	;# 
    99  011B                     	;# 
   100  011D                     	;# 
   101  011E                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0191                     	;# 
   105  0191                     	;# 
   106  0192                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0199                     	;# 
   114  019A                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019C                     	;# 
   120  019C                     	;# 
   121  019D                     	;# 
   122  019E                     	;# 
   123  019F                     	;# 
   124  020C                     	;# 
   125  020D                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0219                     	;# 
   142  021A                     	;# 
   143  021B                     	;# 
   144  021C                     	;# 
   145  021D                     	;# 
   146  021E                     	;# 
   147  021F                     	;# 
   148  0291                     	;# 
   149  0291                     	;# 
   150  0292                     	;# 
   151  0293                     	;# 
   152  0294                     	;# 
   153  0295                     	;# 
   154  0295                     	;# 
   155  0296                     	;# 
   156  0298                     	;# 
   157  0298                     	;# 
   158  0299                     	;# 
   159  029A                     	;# 
   160  029B                     	;# 
   161  029C                     	;# 
   162  029C                     	;# 
   163  029D                     	;# 
   164  029E                     	;# 
   165  029E                     	;# 
   166  0311                     	;# 
   167  0311                     	;# 
   168  0312                     	;# 
   169  0313                     	;# 
   170  0318                     	;# 
   171  0318                     	;# 
   172  0319                     	;# 
   173  031A                     	;# 
   174  0394                     	;# 
   175  0395                     	;# 
   176  0396                     	;# 
   177  039A                     	;# 
   178  039C                     	;# 
   179  039D                     	;# 
   180  039E                     	;# 
   181  039F                     	;# 
   182  0415                     	;# 
   183  0416                     	;# 
   184  0417                     	;# 
   185  041C                     	;# 
   186  041D                     	;# 
   187  041E                     	;# 
   188  0FE4                     	;# 
   189  0FE5                     	;# 
   190  0FE6                     	;# 
   191  0FE7                     	;# 
   192  0FE8                     	;# 
   193  0FE9                     	;# 
   194  0FEA                     	;# 
   195  0FEB                     	;# 
   196  0FED                     	;# 
   197  0FEE                     	;# 
   198  0FEF                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0DF0                     __pidataBANK0:	
   202                           
   203                           ;initializer for _MESSAGE_INFORMATION
   204  0DF0  340E               	retlw	low (STR_18| (0+32768))
   205  0DF1  3489               	retlw	high (STR_18| (0+32768))
   206  0DF2  3498               	retlw	low (STR_19| (0+32768))
   207  0DF3  3488               	retlw	high (STR_19| (0+32768))
   208  0DF4  34A3               	retlw	low (STR_20| (0+32768))
   209  0DF5  3488               	retlw	high (STR_20| (0+32768))
   210  0DF6  348D               	retlw	low (STR_21| (0+32768))
   211  0DF7  3488               	retlw	high (STR_21| (0+32768))
   212                           
   213                           ;initializer for _configration_
   214  0DF8  3400               	retlw	0
   215  0DF9  3400               	retlw	0
   216  0DFA  3478               	retlw	120
   217  0DFB  3400               	retlw	0
   218  0DFC  3404               	retlw	4
   219  0DFD  3410               	retlw	16
   220  0DFE  3410               	retlw	16
   221  0DFF  34F9               	retlw	249
   222  0E00  343E               	retlw	62
   223  0E01  3452               	retlw	82
   224  0E02  3401               	retlw	1
   225  0E03  3400               	retlw	0
   226  0E04  3400               	retlw	0
   227                           
   228                           ;initializer for _menuInfoInformation_
   229  0E05  3400               	retlw	0
   230  0E06  3400               	retlw	0
   231  0E07  3402               	retlw	2
   232  0E08  3400               	retlw	0
   233  0E09  3400               	retlw	0
   234  0E0A  3400               	retlw	0
   235                           
   236                           ;initializer for _menuInfoMain_
   237  0E0B  3400               	retlw	0
   238  0E0C  3400               	retlw	0
   239  0E0D  3409               	retlw	9
   240  0E0E  343C               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| (0+256))
   241  0E0F  3400               	retlw	0
   242  0E10  3400               	retlw	0
   243                           
   244                           ;initializer for _menuInfoTone_
   245  0E11  3400               	retlw	0
   246  0E12  3400               	retlw	0
   247  0E13  3403               	retlw	3
   248  0E14  3450               	retlw	low (_MESSAGE_MENU_ITEM_TONE| (0+256))
   249  0E15  3400               	retlw	0
   250  0E16  3400               	retlw	0
   251                           
   252                           	psect	idataBANK1
   253  0EB5                     __pidataBANK1:	
   254                           
   255                           ;initializer for main@F3091
   256  0EB5  343D               	retlw	61
   257  0EB6  3420               	retlw	32
   258  0EB7  3430               	retlw	48
   259  0EB8  3430               	retlw	48
   260  0EB9  3430               	retlw	48
   261  0EBA  3400               	retlw	0
   262                           
   263                           ;initializer for _valueInfoBeatCount_
   264  0EBB  3400               	retlw	0
   265  0EBC  3440               	retlw	64
   266  0EBD  3400               	retlw	0
   267  0EBE  344E               	retlw	low (STR_35| (0+32768))
   268  0EBF  3488               	retlw	high (STR_35| (0+32768))
   269  0EC0  34AE               	retlw	low (STR_2| (0+32768))
   270  0EC1  3488               	retlw	high (STR_2| (0+32768))
   271                           
   272                           ;initializer for _valueInfoDurationClick_
   273  0EC2  3400               	retlw	0
   274  0EC3  34FF               	retlw	255
   275  0EC4  3400               	retlw	0
   276  0EC5  3445               	retlw	low ((STR_4+5)| (0+32768))
   277  0EC6  3488               	retlw	high ((STR_4+5)| (0+32768))
   278  0EC7  344A               	retlw	low (STR_40| (0+32768))
   279  0EC8  3489               	retlw	high (STR_40| (0+32768))
   280                           
   281                           ;initializer for _valueInfoDurationKey_
   282  0EC9  3400               	retlw	0
   283  0ECA  34FF               	retlw	255
   284  0ECB  3400               	retlw	0
   285  0ECC  3445               	retlw	low ((STR_4+5)| (0+32768))
   286  0ECD  3488               	retlw	high ((STR_4+5)| (0+32768))
   287  0ECE  34FD               	retlw	low (STR_42| (0+32768))
   288  0ECF  3488               	retlw	high (STR_42| (0+32768))
   289                           
   290                           ;initializer for _valueInfoOscillatorTune_
   291  0ED0  3400               	retlw	0
   292  0ED1  341E               	retlw	30
   293  0ED2  34E2               	retlw	226
   294  0ED3  344E               	retlw	low (STR_35| (0+32768))
   295  0ED4  3488               	retlw	high (STR_35| (0+32768))
   296  0ED5  34D7               	retlw	low (STR_46| (0+32768))
   297  0ED6  3488               	retlw	high (STR_46| (0+32768))
   298                           
   299                           ;initializer for _valueInfoPulseWidth_
   300  0ED7  3400               	retlw	0
   301  0ED8  3407               	retlw	7
   302  0ED9  3401               	retlw	1
   303  0EDA  344E               	retlw	low (STR_35| (0+32768))
   304  0EDB  3488               	retlw	high (STR_35| (0+32768))
   305  0EDC  3481               	retlw	low (STR_44| (0+32768))
   306  0EDD  3488               	retlw	high (STR_44| (0+32768))
   307                           
   308                           ;initializer for _valueInfoTempo_
   309  0EDE  3400               	retlw	0
   310  0EDF  3400               	retlw	0
   311  0EE0  3400               	retlw	0
   312  0EE1  34C3               	retlw	low (STR_22| (0+32768))
   313  0EE2  3488               	retlw	high (STR_22| (0+32768))
   314  0EE3  3450               	retlw	low (STR_34| (0+32768))
   315  0EE4  3489               	retlw	high (STR_34| (0+32768))
   316                           
   317                           ;initializer for _valueInfoTone_
   318  0EE5  3400               	retlw	0
   319  0EE6  34FF               	retlw	255
   320  0EE7  3400               	retlw	0
   321  0EE8  34D2               	retlw	low ((STR_3+5)| (0+32768))
   322  0EE9  3488               	retlw	high ((STR_3+5)| (0+32768))
   323  0EEA  34D2               	retlw	low ((STR_3+5)| (0+32768))
   324  0EEB  3488               	retlw	high ((STR_3+5)| (0+32768))
   325                           
   326                           ;initializer for _menuInfoConfirmLoad_
   327  0EEC  3400               	retlw	0
   328  0EED  3400               	retlw	0
   329  0EEE  3401               	retlw	1
   330  0EEF  3400               	retlw	0
   331  0EF0  341D               	retlw	low (STR_30| (0+32768))
   332  0EF1  3489               	retlw	high (STR_30| (0+32768))
   333                           
   334                           ;initializer for _menuInfoConfirmReset_
   335  0EF2  3400               	retlw	0
   336  0EF3  3400               	retlw	0
   337  0EF4  3401               	retlw	1
   338  0EF5  3400               	retlw	0
   339  0EF6  3406               	retlw	low (STR_32| (0+32768))
   340  0EF7  3489               	retlw	high (STR_32| (0+32768))
   341                           
   342                           ;initializer for _menuInfoConfirmSave_
   343  0EF8  3400               	retlw	0
   344  0EF9  3400               	retlw	0
   345  0EFA  3401               	retlw	1
   346  0EFB  3400               	retlw	0
   347  0EFC  3424               	retlw	low (STR_31| (0+32768))
   348  0EFD  3489               	retlw	high (STR_31| (0+32768))
   349                           
   350                           ;initializer for _menuInfoDuration_
   351  0EFE  3400               	retlw	0
   352  0EFF  3400               	retlw	0
   353  0F00  3402               	retlw	2
   354  0F01  3458               	retlw	low (_MESSAGE_MENU_ITEM_DURATION| (0+256))
   355  0F02  3400               	retlw	0
   356  0F03  3400               	retlw	0
   357                           
   358                           	psect	idataBANK2
   359  0E77                     __pidataBANK2:	
   360                           
   361                           ;initializer for _informationValueBuffer
   362  0E77  3420               	retlw	32
   363  0E78  342D               	retlw	45
   364  0E79  342D               	retlw	45
   365  0E7A  342E               	retlw	46
   366  0E7B  342D               	retlw	45
   367  0E7C  342D               	retlw	45
   368  0E7D  3400               	retlw	0
   369  0E7E  3420               	retlw	32
   370  0E7F  3420               	retlw	32
   371  0E80  3430               	retlw	48
   372  0E81  3478               	retlw	120
   373  0E82  342D               	retlw	45
   374  0E83  342D               	retlw	45
   375  0E84  3400               	retlw	0
   376  0E85  3420               	retlw	32
   377  0E86  3420               	retlw	32
   378  0E87  3430               	retlw	48
   379  0E88  3478               	retlw	120
   380  0E89  342D               	retlw	45
   381  0E8A  342D               	retlw	45
   382  0E8B  3400               	retlw	0
   383  0E8C  3420               	retlw	32
   384  0E8D  3420               	retlw	32
   385  0E8E  3430               	retlw	48
   386  0E8F  3478               	retlw	120
   387  0E90  3430               	retlw	48
   388  0E91  3430               	retlw	48
   389  0E92  3400               	retlw	0
   390                           
   391                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   392  0E93  34F4               	retlw	low (STR_1| (0+32768))
   393  0E94  3488               	retlw	high (STR_1| (0+32768))
   394  0E95  34AE               	retlw	low (STR_2| (0+32768))
   395  0E96  3488               	retlw	high (STR_2| (0+32768))
   396  0E97  34CD               	retlw	low (STR_3| (0+32768))
   397  0E98  3488               	retlw	high (STR_3| (0+32768))
   398  0E99  3440               	retlw	low (STR_4| (0+32768))
   399  0E9A  3488               	retlw	high (STR_4| (0+32768))
   400  0E9B  345C               	retlw	low (STR_5| (0+32768))
   401  0E9C  3488               	retlw	high (STR_5| (0+32768))
   402  0E9D  34E1               	retlw	low (STR_6| (0+32768))
   403  0E9E  3488               	retlw	high (STR_6| (0+32768))
   404  0E9F  345C               	retlw	low (STR_7| (0+32768))
   405  0EA0  3489               	retlw	high (STR_7| (0+32768))
   406  0EA1  3461               	retlw	low (STR_8| (0+32768))
   407  0EA2  3489               	retlw	high (STR_8| (0+32768))
   408  0EA3  3466               	retlw	low (STR_9| (0+32768))
   409  0EA4  3489               	retlw	high (STR_9| (0+32768))
   410  0EA5  3456               	retlw	low (STR_10| (0+32768))
   411  0EA6  3489               	retlw	high (STR_10| (0+32768))
   412                           
   413                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   414  0EA7  34F4               	retlw	low (STR_1| (0+32768))
   415  0EA8  3488               	retlw	high (STR_1| (0+32768))
   416  0EA9  3432               	retlw	low (STR_12| (0+32768))
   417  0EAA  3489               	retlw	high (STR_12| (0+32768))
   418  0EAB  3438               	retlw	low (STR_13| (0+32768))
   419  0EAC  3489               	retlw	high (STR_13| (0+32768))
   420  0EAD  343E               	retlw	low (STR_14| (0+32768))
   421  0EAE  3489               	retlw	high (STR_14| (0+32768))
   422                           
   423                           ;initializer for _MESSAGE_MENU_ITEM_DURATION
   424  0EAF  34F4               	retlw	low (STR_1| (0+32768))
   425  0EB0  3488               	retlw	high (STR_1| (0+32768))
   426  0EB1  3475               	retlw	low (STR_16| (0+32768))
   427  0EB2  3488               	retlw	high (STR_16| (0+32768))
   428  0EB3  34B9               	retlw	low (STR_17| (0+32768))
   429  0EB4  3488               	retlw	high (STR_17| (0+32768))
   430                           
   431                           	psect	stringtext
   432  0800                     __pstringtext:	
   433  0800                     _HEX_TABLE:	
   434  0800  3430               	retlw	48
   435  0801  3431               	retlw	49
   436  0802  3432               	retlw	50
   437  0803  3433               	retlw	51
   438  0804  3434               	retlw	52
   439  0805  3435               	retlw	53
   440  0806  3436               	retlw	54
   441  0807  3437               	retlw	55
   442  0808  3438               	retlw	56
   443  0809  3439               	retlw	57
   444  080A  3441               	retlw	65
   445  080B  3442               	retlw	66
   446  080C  3443               	retlw	67
   447  080D  3444               	retlw	68
   448  080E  3445               	retlw	69
   449  080F  3446               	retlw	70
   450  0810                     __end_of_HEX_TABLE:	
   451  0810                     _MESSAGE:	
   452  0810  34C3               	retlw	low (STR_22| (0+32768))
   453  0811  3488               	retlw	high (STR_22| (0+32768))
   454  0812  3416               	retlw	low (STR_23| (0+32768))
   455  0813  3489               	retlw	high (STR_23| (0+32768))
   456  0814  346B               	retlw	low (STR_24| (0+32768))
   457  0815  3489               	retlw	high (STR_24| (0+32768))
   458  0816  346F               	retlw	low (STR_25| (0+32768))
   459  0817  3489               	retlw	high (STR_25| (0+32768))
   460  0818  342B               	retlw	low (STR_26| (0+32768))
   461  0819  3489               	retlw	high (STR_26| (0+32768))
   462  081A  3444               	retlw	low (STR_27| (0+32768))
   463  081B  3489               	retlw	high (STR_27| (0+32768))
   464  081C  3469               	retlw	low (STR_28| (0+32768))
   465  081D  3488               	retlw	high (STR_28| (0+32768))
   466  081E  34EB               	retlw	low (STR_29| (0+32768))
   467  081F  3488               	retlw	high (STR_29| (0+32768))
   468  0820                     __end_of_MESSAGE:	
   469  0820                     _CHAR_CODE:	
   470  0820  3400               	retlw	0
   471  0821  3401               	retlw	1
   472  0822  3402               	retlw	2
   473  0823                     __end_of_CHAR_CODE:	
   474  0823                     main@COMPARE_UNITS:	
   475  0823  3464               	retlw	100
   476  0824  340A               	retlw	10
   477  0825  3401               	retlw	1
   478  0826                     __end_ofmain@COMPARE_UNITS:	
   479  0826                     _PARALLEL_LCD_ROW_SELECT:	
   480  0826  3480               	retlw	128
   481  0827  34C0               	retlw	192
   482  0828                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   483  0828                     _BITMAP:	
   484  0828  3410               	retlw	16
   485  0829  3418               	retlw	24
   486  082A  341C               	retlw	28
   487  082B  341E               	retlw	30
   488  082C  341C               	retlw	28
   489  082D  3418               	retlw	24
   490  082E  3410               	retlw	16
   491  082F  3400               	retlw	0
   492  0830  3400               	retlw	0
   493  0831  3404               	retlw	4
   494  0832  340E               	retlw	14
   495  0833  341F               	retlw	31
   496  0834  3400               	retlw	0
   497  0835  3400               	retlw	0
   498  0836  3400               	retlw	0
   499  0837  3400               	retlw	0
   500  0838  3400               	retlw	0
   501  0839  3400               	retlw	0
   502  083A  3400               	retlw	0
   503  083B  3400               	retlw	0
   504  083C  341F               	retlw	31
   505  083D  340E               	retlw	14
   506  083E  3404               	retlw	4
   507  083F  3400               	retlw	0
   508  0840                     __end_of_BITMAP:	
   509  0016                     _TMR1	set	22
   510  000B                     _INTCONbits	set	11
   511  0011                     _PIR1bits	set	17
   512  0012                     _PIR2bits	set	18
   513  0013                     _PIR3bits	set	19
   514  000C                     _PORTA	set	12
   515  001B                     _PR2	set	27
   516  0018                     _T1CONbits	set	24
   517  001C                     _T2CONbits	set	28
   518  0015                     _TMR0	set	21
   519  001A                     _TMR2	set	26
   520  0095                     _OPTION_REGbits	set	149
   521  0099                     _OSCCONbits	set	153
   522  0098                     _OSCTUNE	set	152
   523  0098                     _OSCTUNEbits	set	152
   524  0091                     _PIE1bits	set	145
   525  0093                     _PIE3bits	set	147
   526  008C                     _TRISA	set	140
   527  008D                     _TRISB	set	141
   528  0097                     _WDTCONbits	set	151
   529  010C                     _LATAbits	set	268
   530  010D                     _LATB	set	269
   531  018C                     _ANSELA	set	396
   532  018D                     _ANSELB	set	397
   533  0192                     _EEADRH	set	402
   534  0191                     _EEADRL	set	401
   535  0195                     _EECON1bits	set	405
   536  0196                     _EECON2	set	406
   537  0194                     _EEDATH	set	404
   538  0193                     _EEDATL	set	403
   539  0293                     _CCP1CONbits	set	659
   540  029A                     _CCP2CONbits	set	666
   541  029E                     _CCPTMRS	set	670
   542  029E                     _CCPTMRSbits	set	670
   543  0313                     _CCP3CONbits	set	787
   544  031A                     _CCP4CONbits	set	794
   545  0319                     _CCPR4H	set	793
   546  0318                     _CCPR4L	set	792
   547  0416                     _PR4	set	1046
   548  041D                     _PR6	set	1053
   549  0417                     _T4CONbits	set	1047
   550  041E                     _T6CONbits	set	1054
   551  0415                     _TMR4	set	1045
   552  041C                     _TMR6	set	1052
   553  0840                     STR_4:	
   554  0840  3441               	retlw	65	;'A'
   555  0841  3464               	retlw	100	;'d'
   556  0842  346A               	retlw	106	;'j'
   557  0843  342E               	retlw	46	;'.'
   558  0844  3420               	retlw	32	;' '
   559  0845  3444               	retlw	68	;'D'
   560  0846  3475               	retlw	117	;'u'
   561  0847  3472               	retlw	114	;'r'
   562  0848  3461               	retlw	97	;'a'
   563  0849  3474               	retlw	116	;'t'
   564  084A  3469               	retlw	105	;'i'
   565  084B  346F               	retlw	111	;'o'
   566  084C  346E               	retlw	110	;'n'
   567  084D  3400               	retlw	0
   568  084E                     STR_35:	
   569  084E  3443               	retlw	67	;'C'
   570  084F  346F               	retlw	111	;'o'
   571  0850  346E               	retlw	110	;'n'
   572  0851  3466               	retlw	102	;'f'
   573  0852  3469               	retlw	105	;'i'
   574  0853  3467               	retlw	103	;'g'
   575  0854  3475               	retlw	117	;'u'
   576  0855  3472               	retlw	114	;'r'
   577  0856  3461               	retlw	97	;'a'
   578  0857  3474               	retlw	116	;'t'
   579  0858  3469               	retlw	105	;'i'
   580  0859  346F               	retlw	111	;'o'
   581  085A  346E               	retlw	110	;'n'
   582  085B  3400               	retlw	0
   583  085C                     STR_5:	
   584  085C  3441               	retlw	65	;'A'
   585  085D  3464               	retlw	100	;'d'
   586  085E  346A               	retlw	106	;'j'
   587  085F  342E               	retlw	46	;'.'
   588  0860  3420               	retlw	32	;' '
   589  0861  3450               	retlw	80	;'P'
   590  0862  342D               	retlw	45	;'-'
   591  0863  3457               	retlw	87	;'W'
   592  0864  3469               	retlw	105	;'i'
   593  0865  3464               	retlw	100	;'d'
   594  0866  3474               	retlw	116	;'t'
   595  0867  3468               	retlw	104	;'h'
   596  0868  3400               	retlw	0
   597  0869                     STR_28:	
   598  0869  3449               	retlw	73	;'I'
   599  086A  346E               	retlw	110	;'n'
   600  086B  3469               	retlw	105	;'i'
   601  086C  3474               	retlw	116	;'t'
   602  086D  3469               	retlw	105	;'i'
   603  086E  3461               	retlw	97	;'a'
   604  086F  346C               	retlw	108	;'l'
   605  0870  3469               	retlw	105	;'i'
   606  0871  347A               	retlw	122	;'z'
   607  0872  3465               	retlw	101	;'e'
   608  0873  3464               	retlw	100	;'d'
   609  0874  3400               	retlw	0
   610  0875                     STR_16:	
   611  0875  3443               	retlw	67	;'C'
   612  0876  346C               	retlw	108	;'l'
   613  0877  3469               	retlw	105	;'i'
   614  0878  3463               	retlw	99	;'c'
   615  0879  346B               	retlw	107	;'k'
   616  087A  3420               	retlw	32	;' '
   617  087B  3453               	retlw	83	;'S'
   618  087C  346F               	retlw	111	;'o'
   619  087D  3475               	retlw	117	;'u'
   620  087E  346E               	retlw	110	;'n'
   621  087F  3464               	retlw	100	;'d'
   622  0880  3400               	retlw	0
   623  0881                     STR_44:	
   624  0881  3450               	retlw	80	;'P'
   625  0882  3475               	retlw	117	;'u'
   626  0883  346C               	retlw	108	;'l'
   627  0884  3473               	retlw	115	;'s'
   628  0885  3465               	retlw	101	;'e'
   629  0886  3420               	retlw	32	;' '
   630  0887  3457               	retlw	87	;'W'
   631  0888  3469               	retlw	105	;'i'
   632  0889  3464               	retlw	100	;'d'
   633  088A  3474               	retlw	116	;'t'
   634  088B  3468               	retlw	104	;'h'
   635  088C  3400               	retlw	0
   636  088D                     STR_21:	
   637  088D  3445               	retlw	69	;'E'
   638  088E  3472               	retlw	114	;'r'
   639  088F  3472               	retlw	114	;'r'
   640  0890  346F               	retlw	111	;'o'
   641  0891  3472               	retlw	114	;'r'
   642  0892  3420               	retlw	32	;' '
   643  0893  3443               	retlw	67	;'C'
   644  0894  346F               	retlw	111	;'o'
   645  0895  3464               	retlw	100	;'d'
   646  0896  3465               	retlw	101	;'e'
   647  0897  3400               	retlw	0
   648  0898                     STR_19:	
   649  0898  3452               	retlw	82	;'R'
   650  0899  344F               	retlw	79	;'O'
   651  089A  344D               	retlw	77	;'M'
   652  089B  3420               	retlw	32	;' '
   653  089C  344F               	retlw	79	;'O'
   654  089D  3466               	retlw	102	;'f'
   655  089E  3466               	retlw	102	;'f'
   656  089F  3473               	retlw	115	;'s'
   657  08A0  3465               	retlw	101	;'e'
   658  08A1  3474               	retlw	116	;'t'
   659  08A2  3400               	retlw	0
   660  08A3                     STR_20:	
   661  08A3  3453               	retlw	83	;'S'
   662  08A4  3461               	retlw	97	;'a'
   663  08A5  3476               	retlw	118	;'v'
   664  08A6  3465               	retlw	101	;'e'
   665  08A7  3420               	retlw	32	;' '
   666  08A8  3443               	retlw	67	;'C'
   667  08A9  346F               	retlw	111	;'o'
   668  08AA  3475               	retlw	117	;'u'
   669  08AB  346E               	retlw	110	;'n'
   670  08AC  3474               	retlw	116	;'t'
   671  08AD  3400               	retlw	0
   672  08AE                     STR_2:	
   673  08AE  3442               	retlw	66	;'B'
   674  08AF  3465               	retlw	101	;'e'
   675  08B0  3461               	retlw	97	;'a'
   676  08B1  3474               	retlw	116	;'t'
   677  08B2  3420               	retlw	32	;' '
   678  08B3  3443               	retlw	67	;'C'
   679  08B4  346F               	retlw	111	;'o'
   680  08B5  3475               	retlw	117	;'u'
   681  08B6  346E               	retlw	110	;'n'
   682  08B7  3474               	retlw	116	;'t'
   683  08B8  3400               	retlw	0
   684  08B9                     STR_17:	
   685  08B9  344B               	retlw	75	;'K'
   686  08BA  3465               	retlw	101	;'e'
   687  08BB  3479               	retlw	121	;'y'
   688  08BC  3420               	retlw	32	;' '
   689  08BD  3453               	retlw	83	;'S'
   690  08BE  346F               	retlw	111	;'o'
   691  08BF  3475               	retlw	117	;'u'
   692  08C0  346E               	retlw	110	;'n'
   693  08C1  3464               	retlw	100	;'d'
   694  08C2  3400               	retlw	0
   695  08C3                     STR_22:	
   696  08C3  344D               	retlw	77	;'M'
   697  08C4  3465               	retlw	101	;'e'
   698  08C5  3474               	retlw	116	;'t'
   699  08C6  3472               	retlw	114	;'r'
   700  08C7  346F               	retlw	111	;'o'
   701  08C8  346E               	retlw	110	;'n'
   702  08C9  346F               	retlw	111	;'o'
   703  08CA  346D               	retlw	109	;'m'
   704  08CB  3465               	retlw	101	;'e'
   705  08CC  3400               	retlw	0
   706  08CD                     STR_3:	
   707  08CD  3441               	retlw	65	;'A'
   708  08CE  3464               	retlw	100	;'d'
   709  08CF  346A               	retlw	106	;'j'
   710  08D0  342E               	retlw	46	;'.'
   711  08D1  3420               	retlw	32	;' '
   712  08D2  3454               	retlw	84	;'T'
   713  08D3  346F               	retlw	111	;'o'
   714  08D4  346E               	retlw	110	;'n'
   715  08D5  3465               	retlw	101	;'e'
   716  08D6  3400               	retlw	0
   717  08D7                     STR_46:	
   718  08D7  344F               	retlw	79	;'O'
   719  08D8  3473               	retlw	115	;'s'
   720  08D9  3463               	retlw	99	;'c'
   721  08DA  342E               	retlw	46	;'.'
   722  08DB  3420               	retlw	32	;' '
   723  08DC  3454               	retlw	84	;'T'
   724  08DD  3475               	retlw	117	;'u'
   725  08DE  346E               	retlw	110	;'n'
   726  08DF  3465               	retlw	101	;'e'
   727  08E0  3400               	retlw	0
   728  08E1                     STR_6:	
   729  08E1  3441               	retlw	65	;'A'
   730  08E2  3464               	retlw	100	;'d'
   731  08E3  346A               	retlw	106	;'j'
   732  08E4  342E               	retlw	46	;'.'
   733  08E5  3420               	retlw	32	;' '
   734  08E6  3454               	retlw	84	;'T'
   735  08E7  3475               	retlw	117	;'u'
   736  08E8  346E               	retlw	110	;'n'
   737  08E9  3465               	retlw	101	;'e'
   738  08EA  3400               	retlw	0
   739  08EB                     STR_29:	
   740  08EB  3445               	retlw	69	;'E'
   741  08EC  3452               	retlw	82	;'R'
   742  08ED  3452               	retlw	82	;'R'
   743  08EE  344F               	retlw	79	;'O'
   744  08EF  3452               	retlw	82	;'R'
   745  08F0  3420               	retlw	32	;' '
   746  08F1  3421               	retlw	33	;'!'
   747  08F2  3421               	retlw	33	;'!'
   748  08F3  3400               	retlw	0
   749  08F4                     STR_1:	
   750  08F4  343C               	retlw	60	;'<'
   751  08F5  3420               	retlw	32	;' '
   752  08F6  3452               	retlw	82	;'R'
   753  08F7  3465               	retlw	101	;'e'
   754  08F8  3474               	retlw	116	;'t'
   755  08F9  3475               	retlw	117	;'u'
   756  08FA  3472               	retlw	114	;'r'
   757  08FB  346E               	retlw	110	;'n'
   758  08FC  3400               	retlw	0
   759  08FD                     STR_42:	
   760  08FD  344B               	retlw	75	;'K'
   761  08FE  3465               	retlw	101	;'e'
   762  08FF  3479               	retlw	121	;'y'
   763  0900  3420               	retlw	32	;' '
   764  0901  3442               	retlw	66	;'B'
   765  0902  3465               	retlw	101	;'e'
   766  0903  3465               	retlw	101	;'e'
   767  0904  3470               	retlw	112	;'p'
   768  0905  3400               	retlw	0
   769  0906                     STR_32:	
   770  0906  3452               	retlw	82	;'R'
   771  0907  3465               	retlw	101	;'e'
   772  0908  3473               	retlw	115	;'s'
   773  0909  3465               	retlw	101	;'e'
   774  090A  3474               	retlw	116	;'t'
   775  090B  3420               	retlw	32	;' '
   776  090C  343F               	retlw	63	;'?'
   777  090D  3400               	retlw	0
   778  090E                     STR_18:	
   779  090E  3456               	retlw	86	;'V'
   780  090F  3465               	retlw	101	;'e'
   781  0910  3472               	retlw	114	;'r'
   782  0911  3473               	retlw	115	;'s'
   783  0912  3469               	retlw	105	;'i'
   784  0913  346F               	retlw	111	;'o'
   785  0914  346E               	retlw	110	;'n'
   786  0915  3400               	retlw	0
   787  0916                     STR_23:	
   788  0916  3423               	retlw	35	;'#'
   789  0917  344D               	retlw	77	;'M'
   790  0918  3475               	retlw	117	;'u'
   791  0919  3474               	retlw	116	;'t'
   792  091A  3465               	retlw	101	;'e'
   793  091B  3423               	retlw	35	;'#'
   794  091C  3400               	retlw	0
   795  091D                     STR_30:	
   796  091D  344C               	retlw	76	;'L'
   797  091E  346F               	retlw	111	;'o'
   798  091F  3461               	retlw	97	;'a'
   799  0920  3464               	retlw	100	;'d'
   800  0921  3420               	retlw	32	;' '
   801  0922  343F               	retlw	63	;'?'
   802  0923  3400               	retlw	0
   803  0924                     STR_31:	
   804  0924  3453               	retlw	83	;'S'
   805  0925  3461               	retlw	97	;'a'
   806  0926  3476               	retlw	118	;'v'
   807  0927  3465               	retlw	101	;'e'
   808  0928  3420               	retlw	32	;' '
   809  0929  343F               	retlw	63	;'?'
   810  092A  3400               	retlw	0
   811  092B                     STR_26:	
   812  092B  344C               	retlw	76	;'L'
   813  092C  346F               	retlw	111	;'o'
   814  092D  3461               	retlw	97	;'a'
   815  092E  3464               	retlw	100	;'d'
   816  092F  3465               	retlw	101	;'e'
   817  0930  3464               	retlw	100	;'d'
   818  0931  3400               	retlw	0
   819  0932                     STR_12:	
   820  0932  3454               	retlw	84	;'T'
   821  0933  346F               	retlw	111	;'o'
   822  0934  346E               	retlw	110	;'n'
   823  0935  3465               	retlw	101	;'e'
   824  0936  3430               	retlw	48	;'0'
   825  0937  3400               	retlw	0
   826  0938                     STR_13:	
   827  0938  3454               	retlw	84	;'T'
   828  0939  346F               	retlw	111	;'o'
   829  093A  346E               	retlw	110	;'n'
   830  093B  3465               	retlw	101	;'e'
   831  093C  3431               	retlw	49	;'1'
   832  093D  3400               	retlw	0
   833  093E                     STR_14:	
   834  093E  3454               	retlw	84	;'T'
   835  093F  346F               	retlw	111	;'o'
   836  0940  346E               	retlw	110	;'n'
   837  0941  3465               	retlw	101	;'e'
   838  0942  3432               	retlw	50	;'2'
   839  0943  3400               	retlw	0
   840  0944                     STR_27:	
   841  0944  3453               	retlw	83	;'S'
   842  0945  3461               	retlw	97	;'a'
   843  0946  3476               	retlw	118	;'v'
   844  0947  3465               	retlw	101	;'e'
   845  0948  3464               	retlw	100	;'d'
   846  0949  3400               	retlw	0
   847  094A                     STR_40:	
   848  094A  3443               	retlw	67	;'C'
   849  094B  346C               	retlw	108	;'l'
   850  094C  3469               	retlw	105	;'i'
   851  094D  3463               	retlw	99	;'c'
   852  094E  346B               	retlw	107	;'k'
   853  094F  3400               	retlw	0
   854  0950                     STR_34:	
   855  0950  3454               	retlw	84	;'T'
   856  0951  3465               	retlw	101	;'e'
   857  0952  346D               	retlw	109	;'m'
   858  0953  3470               	retlw	112	;'p'
   859  0954  346F               	retlw	111	;'o'
   860  0955  3400               	retlw	0
   861  0956                     STR_10:	
   862  0956  3452               	retlw	82	;'R'
   863  0957  3465               	retlw	101	;'e'
   864  0958  3473               	retlw	115	;'s'
   865  0959  3465               	retlw	101	;'e'
   866  095A  3474               	retlw	116	;'t'
   867  095B  3400               	retlw	0
   868  095C                     STR_7:	
   869  095C  344C               	retlw	76	;'L'
   870  095D  346F               	retlw	111	;'o'
   871  095E  3461               	retlw	97	;'a'
   872  095F  3464               	retlw	100	;'d'
   873  0960  3400               	retlw	0
   874  0961                     STR_8:	
   875  0961  3453               	retlw	83	;'S'
   876  0962  3461               	retlw	97	;'a'
   877  0963  3476               	retlw	118	;'v'
   878  0964  3465               	retlw	101	;'e'
   879  0965  3400               	retlw	0
   880  0966                     STR_9:	
   881  0966  3449               	retlw	73	;'I'
   882  0967  346E               	retlw	110	;'n'
   883  0968  3466               	retlw	102	;'f'
   884  0969  346F               	retlw	111	;'o'
   885  096A  3400               	retlw	0
   886  096B                     STR_24:	
   887  096B  344E               	retlw	78	;'N'
   888  096C  346F               	retlw	111	;'o'
   889  096D  3420               	retlw	32	;' '
   890  096E  3400               	retlw	0
   891  096F                     STR_25:	
   892  096F  3459               	retlw	89	;'Y'
   893  0970  3465               	retlw	101	;'e'
   894  0971  3473               	retlw	115	;'s'
   895  0972  3400               	retlw	0
   896  08C3                     
   897                           ; #config settings
   898  0000                     
   899                           	psect	cinit
   900  007C                     start_initialization:	
   901  007C                     __initialization:	
   902                           
   903                           ; Clear objects allocated to COMMON
   904  007C  01F6               	clrf	__pbssCOMMON& (0+127)
   905  007D  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   906  007E  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   907  007F  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   908                           
   909                           ; Clear objects allocated to BANK0
   910  0080  3047               	movlw	low __pbssBANK0
   911  0081  0084               	movwf	4
   912  0082  3000               	movlw	high __pbssBANK0
   913  0083  0085               	movwf	5
   914  0084  3011               	movlw	17
   915  0085  318A  22B4  3180   	fcall	clear_ram0
   916                           
   917                           ; Initialize objects allocated to BANK0
   918  0088  30F0               	movlw	low __pidataBANK0
   919  0089  0084               	movwf	4
   920  008A  308D               	movlw	(high __pidataBANK0)| (0+128)
   921  008B  0085               	movwf	5
   922  008C  3020               	movlw	low __pdataBANK0
   923  008D  0086               	movwf	6
   924  008E  3000               	movlw	high __pdataBANK0
   925  008F  0087               	movwf	7
   926  0090  3027               	movlw	39
   927  0091  318A  22BA  3180   	fcall	init_ram
   928                           
   929                           ; Initialize objects allocated to BANK1
   930  0094  30B5               	movlw	low __pidataBANK1
   931  0095  0084               	movwf	4
   932  0096  308E               	movlw	(high __pidataBANK1)| (0+128)
   933  0097  0085               	movwf	5
   934  0098  30A0               	movlw	low __pdataBANK1
   935  0099  0086               	movwf	6
   936  009A  3000               	movlw	high __pdataBANK1
   937  009B  0087               	movwf	7
   938  009C  304F               	movlw	79
   939  009D  318A  22BA  3180   	fcall	init_ram
   940                           
   941                           ; Initialize objects allocated to BANK2
   942  00A0  3077               	movlw	low __pidataBANK2
   943  00A1  0084               	movwf	4
   944  00A2  308E               	movlw	(high __pidataBANK2)| (0+128)
   945  00A3  0085               	movwf	5
   946  00A4  3020               	movlw	low __pdataBANK2
   947  00A5  0086               	movwf	6
   948  00A6  3001               	movlw	high __pdataBANK2
   949  00A7  0087               	movwf	7
   950  00A8  303E               	movlw	62
   951  00A9  318A  22BA         	fcall	init_ram
   952  00AB                     end_of_initialization:	
   953                           ;End of C runtime variable initialization code
   954                           
   955  00AB                     __end_of__initialization:	
   956  00AB  0020               	movlb	0
   957  00AC  3180  28AE         	ljmp	_main	;jump to C main() function
   958                           
   959                           	psect	bssCOMMON
   960  0076                     __pbssCOMMON:	
   961  0076                     _keyHoldCount_:	
   962  0076                     	ds	2
   963  0078                     isr@eventPrescaler:	
   964  0078                     	ds	2
   965                           
   966                           	psect	bssBANK0
   967  0047                     __pbssBANK0:	
   968  0047                     _tempoCounter_:	
   969  0047                     	ds	3
   970  004A                     _currentSingleMessage_:	
   971  004A                     	ds	2
   972  004C                     _soundDurationCount_:	
   973  004C                     	ds	2
   974  004E                     _beatCounter_:	
   975  004E                     	ds	1
   976  004F                     _currentMenuInfoPtr_:	
   977  004F                     	ds	1
   978  0050                     _currentValueInfoPtr_:	
   979  0050                     	ds	1
   980  0051                     _inputEvent_:	
   981  0051                     	ds	1
   982  0052                     _isMute_:	
   983  0052                     	ds	1
   984  0053                     _machineState_:	
   985  0053                     	ds	1
   986  0054                     _outputEvent_:	
   987  0054                     	ds	1
   988  0055                     _portAState_:	
   989  0055                     	ds	1
   990  0056                     _stateReturnCounter_:	
   991  0056                     	ds	1
   992  0057                     main@prevPortAState:	
   993  0057                     	ds	1
   994                           
   995                           	psect	dataBANK0
   996  0020                     __pdataBANK0:	
   997  0020                     _MESSAGE_INFORMATION:	
   998  0020                     	ds	8
   999  0028                     _configration_:	
  1000  0028                     	ds	13
  1001  0035                     _menuInfoInformation_:	
  1002  0035                     	ds	6
  1003  003B                     _menuInfoMain_:	
  1004  003B                     	ds	6
  1005  0041                     _menuInfoTone_:	
  1006  0041                     	ds	6
  1007                           
  1008                           	psect	dataBANK1
  1009  00A0                     __pdataBANK1:	
  1010  00A0                     main@F3091:	
  1011  00A0                     	ds	6
  1012  00A6                     _valueInfoBeatCount_:	
  1013  00A6                     	ds	7
  1014  00AD                     _valueInfoDurationClick_:	
  1015  00AD                     	ds	7
  1016  00B4                     _valueInfoDurationKey_:	
  1017  00B4                     	ds	7
  1018  00BB                     _valueInfoOscillatorTune_:	
  1019  00BB                     	ds	7
  1020  00C2                     _valueInfoPulseWidth_:	
  1021  00C2                     	ds	7
  1022  00C9                     _valueInfoTempo_:	
  1023  00C9                     	ds	7
  1024  00D0                     _valueInfoTone_:	
  1025  00D0                     	ds	7
  1026  00D7                     _menuInfoConfirmLoad_:	
  1027  00D7                     	ds	6
  1028  00DD                     _menuInfoConfirmReset_:	
  1029  00DD                     	ds	6
  1030  00E3                     _menuInfoConfirmSave_:	
  1031  00E3                     	ds	6
  1032  00E9                     _menuInfoDuration_:	
  1033  00E9                     	ds	6
  1034                           
  1035                           	psect	dataBANK2
  1036  0120                     __pdataBANK2:	
  1037  0120                     _informationValueBuffer:	
  1038  0120                     	ds	28
  1039  013C                     _MESSAGE_MENU_ITEM_MAIN:	
  1040  013C                     	ds	20
  1041  0150                     _MESSAGE_MENU_ITEM_TONE:	
  1042  0150                     	ds	8
  1043  0158                     _MESSAGE_MENU_ITEM_DURATION:	
  1044  0158                     	ds	6
  1045                           
  1046                           	psect	clrtext
  1047  0AB4                     clear_ram0:	
  1048                           ;	Called with FSR0 containing the base address, and
  1049                           ;	WREG with the size to clear
  1050                           
  1051  0AB4  0064               	clrwdt	;clear the watchdog before getting into this loop
  1052  0AB5                     clrloop0:	
  1053  0AB5  0180               	clrf	0	;clear RAM location pointed to by FSR
  1054  0AB6  3101               	addfsr 0,1
  1055  0AB7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1056  0AB8  2AB5               	goto	clrloop0	;have we reached the end yet?
  1057  0AB9  3400               	retlw	0	;all done for this memory range, return
  1058                           
  1059                           	psect	inittext
  1060  0ABA                     init_ram:	
  1061  0ABA  00FE               	movwf	126
  1062  0ABB                     initloop:	
  1063  0ABB  0012               	moviw fsr0++
  1064  0ABC  001E               	movwi fsr1++
  1065  0ABD  0BFE               	decfsz	126,f
  1066  0ABE  2ABB               	goto	initloop
  1067  0ABF  3400               	retlw	0
  1068                           
  1069                           	psect	cstackBANK2
  1070  015E                     __pcstackBANK2:	
  1071  015E                     main@valueString:	
  1072                           
  1073                           ; 6 bytes @ 0x0
  1074  015E                     	ds	6
  1075  0164                     main@isNonZero:	
  1076                           
  1077                           ; 1 bytes @ 0x6
  1078  0164                     	ds	1
  1079  0165                     main@tmpValue:	
  1080                           
  1081                           ; 2 bytes @ 0x7
  1082  0165                     	ds	2
  1083  0167                     main@chr:	
  1084                           
  1085                           ; 1 bytes @ 0x9
  1086  0167                     	ds	1
  1087  0168                     main@keyPressed:	
  1088                           
  1089                           ; 1 bytes @ 0xA
  1090  0168                     	ds	1
  1091  0169                     main@phase:	
  1092                           
  1093                           ; 1 bytes @ 0xB
  1094  0169                     	ds	1
  1095  016A                     main@returnCode:	
  1096                           
  1097                           ; 1 bytes @ 0xC
  1098  016A                     	ds	1
  1099  016B                     main@userId:	
  1100                           
  1101                           ; 1 bytes @ 0xD
  1102  016B                     	ds	1
  1103  016C                     main@i:	
  1104                           
  1105                           ; 1 bytes @ 0xE
  1106  016C                     	ds	1
  1107                           
  1108                           	psect	cstackCOMMON
  1109  0070                     __pcstackCOMMON:	
  1110  0070                     ?_initialize:	
  1111  0070                     ?_ParallelLCD_ClearRow:	
  1112                           ; 0 bytes @ 0x0
  1113                           
  1114  0070                     ?_ParallelLCD_ClearDisplay:	
  1115                           ; 0 bytes @ 0x0
  1116                           
  1117  0070                     ?_main:	
  1118                           ; 0 bytes @ 0x0
  1119                           
  1120  0070                     ?_isr:	
  1121                           ; 0 bytes @ 0x0
  1122                           
  1123  0070                     ??_isr:	
  1124                           ; 0 bytes @ 0x0
  1125                           
  1126  0070                     ?_Configuration_Save:	
  1127                           ; 0 bytes @ 0x0
  1128                           
  1129  0070                     ?_Configuration_Load:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132                           
  1133                           ; 1 bytes @ 0x0
  1134  0070                     	ds	4
  1135  0074                     ?_ParallelLCD_WriteByte:	
  1136  0074                     ?_Configuration_WriteByte:	
  1137                           ; 0 bytes @ 0x4
  1138                           
  1139  0074                     ??_initialize:	
  1140                           ; 0 bytes @ 0x4
  1141                           
  1142  0074                     ?_Configuration_ReadByte:	
  1143                           ; 0 bytes @ 0x4
  1144                           
  1145  0074                     ?___bmul:	
  1146                           ; 1 bytes @ 0x4
  1147                           
  1148  0074                     ParallelLCD_WriteByte@r:	
  1149                           ; 1 bytes @ 0x4
  1150                           
  1151  0074                     Configuration_WriteByte@data:	
  1152                           ; 1 bytes @ 0x4
  1153                           
  1154  0074                     Configuration_ReadByte@memorySelect:	
  1155                           ; 1 bytes @ 0x4
  1156                           
  1157  0074                     ___bmul@multiplicand:	
  1158                           ; 1 bytes @ 0x4
  1159                           
  1160                           
  1161                           ; 1 bytes @ 0x4
  1162  0074                     	ds	1
  1163  0075                     ??_ParallelLCD_WriteByte:	
  1164  0075                     ??_Configuration_ReadByte:	
  1165                           ; 0 bytes @ 0x5
  1166                           
  1167  0075                     ??_Configuration_WriteByte:	
  1168                           ; 0 bytes @ 0x5
  1169                           
  1170  0075                     ??___bmul:	
  1171                           ; 0 bytes @ 0x5
  1172                           
  1173  0075                     ParallelLCD_WriteByte@data:	
  1174                           ; 0 bytes @ 0x5
  1175                           
  1176  0075                     Configuration_WriteByte@address:	
  1177                           ; 1 bytes @ 0x5
  1178                           
  1179  0075                     Configuration_ReadByte@address:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182                           
  1183                           ; 1 bytes @ 0x5
  1184  0075                     	ds	1
  1185  0076                     ??_ParallelLCD_Initialize:	
  1186  0076                     ??_ParallelLCD_WriteCharacter:	
  1187                           ; 0 bytes @ 0x6
  1188                           
  1189  0076                     ??_ParallelLCD_ClearDisplay:	
  1190                           ; 0 bytes @ 0x6
  1191                           
  1192                           
  1193                           	psect	cstackBANK0
  1194  0058                     __pcstackBANK0:	
  1195                           ; 0 bytes @ 0x6
  1196                           
  1197  0058                     ?_ParallelLCD_Initialize:	
  1198  0058                     ?_ParallelLCD_WriteCharacter:	
  1199                           ; 0 bytes @ 0x0
  1200                           
  1201  0058                     ?_ParallelLCD_WriteStringClearing:	
  1202                           ; 0 bytes @ 0x0
  1203                           
  1204  0058                     ??_ParallelLCD_ClearRow:	
  1205                           ; 0 bytes @ 0x0
  1206                           
  1207  0058                     ?_ParallelLCD_SetCgram:	
  1208                           ; 0 bytes @ 0x0
  1209                           
  1210  0058                     ??_Configuration_Save:	
  1211                           ; 0 bytes @ 0x0
  1212                           
  1213  0058                     ??_Configuration_Load:	
  1214                           ; 0 bytes @ 0x0
  1215                           
  1216  0058                     ParallelLCD_Initialize@configDisplay:	
  1217                           ; 0 bytes @ 0x0
  1218                           
  1219  0058                     ParallelLCD_WriteCharacter@character:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0058                     ___bmul@product:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225  0058                     ParallelLCD_WriteStringClearing@stringPtr:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0058                     ParallelLCD_SetCgram@bitmap:	
  1229                           ; 2 bytes @ 0x0
  1230                           
  1231                           
  1232                           ; 2 bytes @ 0x0
  1233  0058                     	ds	1
  1234  0059                     ParallelLCD_Initialize@configCursor:	
  1235  0059                     ParallelLCD_WriteCharacter@position:	
  1236                           ; 1 bytes @ 0x1
  1237                           
  1238  0059                     ParallelLCD_ClearRow@rowSelect:	
  1239                           ; 1 bytes @ 0x1
  1240                           
  1241  0059                     ___bmul@multiplier:	
  1242                           ; 1 bytes @ 0x1
  1243                           
  1244                           
  1245                           ; 1 bytes @ 0x1
  1246  0059                     	ds	1
  1247  005A                     ?_ParallelLCD_WriteString:	
  1248  005A                     ??_ParallelLCD_WriteStringClearing:	
  1249                           ; 0 bytes @ 0x2
  1250                           
  1251  005A                     ??_ParallelLCD_SetCgram:	
  1252                           ; 0 bytes @ 0x2
  1253                           
  1254  005A                     ParallelLCD_Initialize@configEntryMode:	
  1255                           ; 0 bytes @ 0x2
  1256                           
  1257  005A                     ParallelLCD_ClearRow@i:	
  1258                           ; 1 bytes @ 0x2
  1259                           
  1260  005A                     Configuration_Save@returnCode:	
  1261                           ; 1 bytes @ 0x2
  1262                           
  1263  005A                     Configuration_Load@ptrConfig:	
  1264                           ; 1 bytes @ 0x2
  1265                           
  1266  005A                     ParallelLCD_WriteString@stringPtr:	
  1267                           ; 1 bytes @ 0x2
  1268                           
  1269                           
  1270                           ; 2 bytes @ 0x2
  1271  005A                     	ds	1
  1272  005B                     ParallelLCD_Initialize@configFunction:	
  1273  005B                     ParallelLCD_WriteStringClearing@position:	
  1274                           ; 1 bytes @ 0x3
  1275                           
  1276  005B                     ParallelLCD_SetCgram@charCode:	
  1277                           ; 1 bytes @ 0x3
  1278                           
  1279  005B                     Configuration_Save@ptrConfig:	
  1280                           ; 1 bytes @ 0x3
  1281                           
  1282  005B                     Configuration_Load@i:	
  1283                           ; 1 bytes @ 0x3
  1284                           
  1285                           
  1286                           ; 1 bytes @ 0x3
  1287  005B                     	ds	1
  1288  005C                     ??_ParallelLCD_WriteString:	
  1289  005C                     ParallelLCD_WriteStringClearing@i:	
  1290                           ; 0 bytes @ 0x4
  1291                           
  1292  005C                     ParallelLCD_SetCgram@i:	
  1293                           ; 1 bytes @ 0x4
  1294                           
  1295  005C                     Configuration_Save@i:	
  1296                           ; 1 bytes @ 0x4
  1297                           
  1298  005C                     Configuration_Load@config:	
  1299                           ; 1 bytes @ 0x4
  1300                           
  1301                           
  1302                           ; 1 bytes @ 0x4
  1303  005C                     	ds	1
  1304  005D                     ParallelLCD_WriteString@position:	
  1305  005D                     Configuration_Save@config:	
  1306                           ; 1 bytes @ 0x5
  1307                           
  1308                           
  1309                           ; 1 bytes @ 0x5
  1310  005D                     	ds	1
  1311  005E                     ??_main:	
  1312                           
  1313                           ; 0 bytes @ 0x6
  1314  005E                     	ds	4
  1315                           
  1316                           	psect	maintext
  1317  00AE                     __pmaintext:	
  1318 ;;
  1319 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1320 ;;
  1321 ;; *************** function _main *****************
  1322 ;; Defined at:
  1323 ;;		line 240 in file "src/main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  chr             1    9[BANK2 ] unsigned char 
  1328 ;;  i               1   14[BANK2 ] unsigned char 
  1329 ;;  userId          1   13[BANK2 ] unsigned char 
  1330 ;;  valueString     6    0[BANK2 ] unsigned char [6]
  1331 ;;  tmpValue        2    7[BANK2 ] unsigned int 
  1332 ;;  isNonZero       1    6[BANK2 ] enum E2778
  1333 ;;  returnCode      1   12[BANK2 ] enum E2863
  1334 ;;  keyPressed      1   10[BANK2 ] struct .
  1335 ;;  phase           1   11[BANK2 ] unsigned char 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;		None               void
  1338 ;; Registers used:
  1339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : B1F/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1345 ;;      Params:         0       0       0       0       0       0
  1346 ;;      Locals:         0       0       0      15       0       0
  1347 ;;      Temps:          0       4       0       0       0       0
  1348 ;;      Totals:         0       4       0      15       0       0
  1349 ;;Total ram usage:       19 bytes
  1350 ;; Hardware stack levels required when called:    4
  1351 ;; This function calls:
  1352 ;;		_Configuration_Load
  1353 ;;		_Configuration_ReadByte
  1354 ;;		_Configuration_Save
  1355 ;;		_ParallelLCD_ClearDisplay
  1356 ;;		_ParallelLCD_ClearRow
  1357 ;;		_ParallelLCD_Initialize
  1358 ;;		_ParallelLCD_SetCgram
  1359 ;;		_ParallelLCD_WriteCharacter
  1360 ;;		_ParallelLCD_WriteString
  1361 ;;		_ParallelLCD_WriteStringClearing
  1362 ;;		___bmul
  1363 ;;		_initialize
  1364 ;; This function is called by:
  1365 ;;		Startup code after reset
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           
  1370                           ;psect for function _main
  1371  00AE                     _main:	
  1372                           
  1373                           ;main.c: 243: initialize( ) ;
  1374                           
  1375                           ;incstack = 0
  1376                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1377  00AE  3187  278F  3180   	fcall	_initialize
  1378                           
  1379                           ;main.c: 246: if( (~PORTA&0xE0) == 0xC0 )
  1380  00B1  0020               	movlb	0	; select bank0
  1381  00B2  090C               	comf	12,w	;volatile
  1382  00B3  00DE               	movwf	??_main
  1383  00B4  30E0               	movlw	224
  1384  00B5  055E               	andwf	??_main,w
  1385  00B6  3AC0               	xorlw	192
  1386  00B7  1D03               	skipz
  1387  00B8  28BE               	goto	l3368
  1388                           
  1389                           ;main.c: 247: machineState_ = STATE_INITIALIZE ;
  1390  00B9  3011               	movlw	17
  1391  00BA  00DE               	movwf	??_main
  1392  00BB  085E               	movf	??_main,w
  1393  00BC  00D3               	movwf	_machineState_
  1394  00BD  28BF               	goto	l3370
  1395  00BE                     l3368:	
  1396                           
  1397                           ;main.c: 248: else
  1398                           ;main.c: 249: machineState_ = STATE_BOOT ;
  1399  00BE  01D3               	clrf	_machineState_
  1400  00BF                     l3370:	
  1401                           
  1402                           ;main.c: 250: outputEvent_.changeState=1 ;
  1403  00BF  1454               	bsf	_outputEvent_,0
  1404                           
  1405                           ;main.c: 253: PR2 = 124 ;
  1406  00C0  307C               	movlw	124
  1407  00C1  009B               	movwf	27	;volatile
  1408                           
  1409                           ;main.c: 254: {CCPR4L=(PR2>>1);} ;
  1410  00C2  361B               	lsrf	27,w	;volatile
  1411  00C3  0026               	movlb	6	; select bank6
  1412  00C4  0098               	movwf	24	;volatile
  1413                           
  1414                           ;main.c: 257: T4CONbits.TMR4ON = 1 ;
  1415  00C5  0028               	movlb	8	; select bank8
  1416  00C6  1517               	bsf	23,2	;volatile
  1417                           
  1418                           ;main.c: 260: T1CONbits.TMR1ON = 1 ;
  1419  00C7  0020               	movlb	0	; select bank0
  1420  00C8  1418               	bsf	24,0	;volatile
  1421                           
  1422                           ;main.c: 263: for( Uint08_t phase = 0 ; phase < 0xE ; phase++ ) {
  1423  00C9  0022               	movlb	2	; select bank2
  1424  00CA  01E9               	clrf	main@phase^(0+256)
  1425  00CB  300E               	movlw	14
  1426  00CC  0269               	subwf	main@phase^(0+256),w
  1427  00CD  1803               	btfsc	3,0
  1428  00CE  29B7               	goto	l258
  1429  00CF                     l257:	
  1430  00CF  0064               	clrwdt	;# 
  1431                           
  1432                           ;main.c: 267: TMR1 = 0x0000 ;
  1433  00D0  0020               	movlb	0	; select bank0
  1434  00D1  0196               	clrf	22	;volatile
  1435  00D2  0197               	clrf	23	;volatile
  1436                           
  1437                           ;main.c: 269: switch( phase ) {
  1438  00D3  298F               	goto	l3420
  1439  00D4                     l261:	
  1440                           ;main.c: 270: case 0x0:
  1441                           
  1442                           
  1443                           ;main.c: 271: case 0x2:
  1444                           ;main.c: 273: T2CONbits.TMR2ON = 1 ;
  1445  00D4  0020               	movlb	0	; select bank0
  1446  00D5  151C               	bsf	28,2	;volatile
  1447                           
  1448                           ;main.c: 274: break ;
  1449  00D6  29AA               	goto	l269
  1450  00D7                     l264:	
  1451                           ;main.c: 276: case 0x1:
  1452                           
  1453                           
  1454                           ;main.c: 277: case 0xC:
  1455                           ;main.c: 279: T2CONbits.TMR2ON = 0 ;
  1456  00D7  0020               	movlb	0	; select bank0
  1457  00D8  111C               	bcf	28,2	;volatile
  1458                           
  1459                           ;main.c: 280: break ;
  1460  00D9  29AA               	goto	l269
  1461  00DA                     l3388:	
  1462                           ;main.c: 282: case 0x3:
  1463                           
  1464                           
  1465                           ;main.c: 284: {
  1466                           ;main.c: 285: Uint08_t userId ;
  1467                           ;main.c: 286: userId = Configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1468  00DA  01F4               	clrf	Configuration_ReadByte@memorySelect
  1469  00DB  0AF4               	incf	Configuration_ReadByte@memorySelect,f
  1470  00DC  3000               	movlw	0
  1471  00DD  318A  2294  3180   	fcall	_Configuration_ReadByte
  1472  00E0  0020               	movlb	0	; select bank0
  1473  00E1  00DE               	movwf	??_main
  1474  00E2  085E               	movf	??_main,w
  1475  00E3  0022               	movlb	2	; select bank2
  1476  00E4  00EB               	movwf	main@userId^(0+256)
  1477                           
  1478                           ;main.c: 287: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1479  00E5  086B               	movf	main@userId^(0+256),w
  1480  00E6  0020               	movlb	0	; select bank0
  1481  00E7  00DE               	movwf	??_main
  1482  00E8  3004               	movlw	4
  1483  00E9                     u2675:	
  1484  00E9  36DE               	lsrf	??_main,f
  1485  00EA  0B89               	decfsz	9,f
  1486  00EB  28E9               	goto	u2675
  1487  00EC  085E               	movf	??_main,w
  1488  00ED  3830               	iorlw	48
  1489  00EE  00DF               	movwf	??_main+1
  1490  00EF  085F               	movf	??_main+1,w
  1491  00F0  0022               	movlb	2	; select bank2
  1492  00F1  00A1               	movwf	(_informationValueBuffer^(0+256)+1)
  1493                           
  1494                           ;main.c: 288: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1495  00F2  086B               	movf	main@userId^(0+256),w
  1496  00F3  390F               	andlw	15
  1497  00F4  3830               	iorlw	48
  1498  00F5  0020               	movlb	0	; select bank0
  1499  00F6  00DE               	movwf	??_main
  1500  00F7  085E               	movf	??_main,w
  1501  00F8  0022               	movlb	2	; select bank2
  1502  00F9  00A2               	movwf	(_informationValueBuffer^(0+256)+2)
  1503                           
  1504                           ;main.c: 289: userId = Configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1505  00FA  01F4               	clrf	Configuration_ReadByte@memorySelect
  1506  00FB  0AF4               	incf	Configuration_ReadByte@memorySelect,f
  1507  00FC  3001               	movlw	1
  1508  00FD  318A  2294  3180   	fcall	_Configuration_ReadByte
  1509  0100  0020               	movlb	0	; select bank0
  1510  0101  00DE               	movwf	??_main
  1511  0102  085E               	movf	??_main,w
  1512  0103  0022               	movlb	2	; select bank2
  1513  0104  00EB               	movwf	main@userId^(0+256)
  1514                           
  1515                           ;main.c: 290: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1516  0105  086B               	movf	main@userId^(0+256),w
  1517  0106  0020               	movlb	0	; select bank0
  1518  0107  00DE               	movwf	??_main
  1519  0108  3004               	movlw	4
  1520  0109                     u2685:	
  1521  0109  36DE               	lsrf	??_main,f
  1522  010A  0B89               	decfsz	9,f
  1523  010B  2909               	goto	u2685
  1524  010C  085E               	movf	??_main,w
  1525  010D  3830               	iorlw	48
  1526  010E  00DF               	movwf	??_main+1
  1527  010F  085F               	movf	??_main+1,w
  1528  0110  0022               	movlb	2	; select bank2
  1529  0111  00A4               	movwf	(_informationValueBuffer^(0+256)+4)
  1530                           
  1531                           ;main.c: 291: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1532  0112  086B               	movf	main@userId^(0+256),w
  1533  0113  390F               	andlw	15
  1534  0114  3830               	iorlw	48
  1535  0115  0020               	movlb	0	; select bank0
  1536  0116  00DE               	movwf	??_main
  1537  0117  085E               	movf	??_main,w
  1538  0118  0022               	movlb	2	; select bank2
  1539  0119  00A5               	movwf	(_informationValueBuffer^(0+256)+5)
  1540                           
  1541                           ;main.c: 292: }
  1542                           ;main.c: 293: break ;
  1543  011A  29AA               	goto	l269
  1544  011B                     l3398:	
  1545                           ;main.c: 295: case 0x4:
  1546                           
  1547                           
  1548                           ;main.c: 297: ParallelLCD_Initialize(
  1549                           ;main.c: 298: PARALLEL_LCD_CONFIG_8BIT_MODE | PARALLEL_LCD_CONFIG_2LINE_MODE ,
  1550                           ;main.c: 299: PARALLEL_LCD_CONFIG_DISPLAY_ON ,
  1551                           ;main.c: 300: PARALLEL_LCD_CONFIG_CURSOR_NONE ,
  1552                           ;main.c: 301: PARALLEL_LCD_CONFIG_INCREMENTAL
  1553                           ;main.c: 302: ) ;
  1554  011B  3004               	movlw	4
  1555  011C  0020               	movlb	0	; select bank0
  1556  011D  00DE               	movwf	??_main
  1557  011E  085E               	movf	??_main,w
  1558  011F  00D8               	movwf	ParallelLCD_Initialize@configDisplay
  1559  0120  01D9               	clrf	ParallelLCD_Initialize@configCursor
  1560  0121  3002               	movlw	2
  1561  0122  00DF               	movwf	??_main+1
  1562  0123  085F               	movf	??_main+1,w
  1563  0124  00DA               	movwf	ParallelLCD_Initialize@configEntryMode
  1564  0125  3018               	movlw	24
  1565  0126  318D  25CF  3180   	fcall	_ParallelLCD_Initialize
  1566                           
  1567                           ;main.c: 305: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          .METRONOME.MAIN_TILE ) ;
  1568  0129  3010               	movlw	low (_MESSAGE| (0+32768))
  1569  012A  0084               	movwf	4
  1570  012B  3088               	movlw	high (_MESSAGE| (0+32768))
  1571  012C  0085               	movwf	5
  1572  012D  3F00               	moviw [0]fsr0
  1573  012E  0020               	movlb	0	; select bank0
  1574  012F  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1575  0130  3F01               	moviw [1]fsr0
  1576  0131  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1577  0132  3080               	movlw	128
  1578  0133  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  1579                           
  1580                           ;main.c: 306: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , MESSAGE
      +                          _INFORMATION[ INFORMATION_ITEM_VERSION ] ) ;
  1581  0136  0020               	movlb	0	; select bank0
  1582  0137  0820               	movf	_MESSAGE_INFORMATION,w
  1583  0138  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1584  0139  0821               	movf	_MESSAGE_INFORMATION+1,w
  1585  013A  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1586  013B  30C0               	movlw	192
  1587  013C  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  1588                           
  1589                           ;main.c: 307: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xA , &informationVal
      +                          ueBuffer[ INFORMATION_ITEM_VERSION ] ) ;
  1590  013F  3020               	movlw	low _informationValueBuffer
  1591  0140  0020               	movlb	0	; select bank0
  1592  0141  00DA               	movwf	ParallelLCD_WriteString@stringPtr
  1593  0142  3001               	movlw	high _informationValueBuffer
  1594  0143  00DB               	movwf	ParallelLCD_WriteString@stringPtr+1
  1595  0144  30CA               	movlw	202
  1596  0145  318A  2220  3180   	fcall	_ParallelLCD_WriteString
  1597  0148                     l3406:	
  1598                           ;main.c: 309: case 0x5:
  1599                           
  1600                           
  1601                           ;main.c: 310: valueInfoBeatCount_.valuePtr = &configration_.beatCount ;
  1602  0148  302C               	movlw	(low ((_configration_| 0+4)))& (0+255)
  1603  0149  0020               	movlb	0	; select bank0
  1604  014A  00DE               	movwf	??_main
  1605  014B  085E               	movf	??_main,w
  1606  014C  0021               	movlb	1	; select bank1
  1607  014D  00A6               	movwf	_valueInfoBeatCount_^(0+128)
  1608                           
  1609                           ;main.c: 311: valueInfoDurationClick_.valuePtr = &configration_.duration.click ;
  1610  014E  302D               	movlw	(low ((_configration_| 0+5)))& (0+255)
  1611  014F  0020               	movlb	0	; select bank0
  1612  0150  00DE               	movwf	??_main
  1613  0151  085E               	movf	??_main,w
  1614  0152  0021               	movlb	1	; select bank1
  1615  0153  00AD               	movwf	_valueInfoDurationClick_^(0+128)
  1616                           
  1617                           ;main.c: 312: valueInfoDurationKey_.valuePtr = &configration_.duration.key ;
  1618  0154  302E               	movlw	(low ((_configration_| 0+6)))& (0+255)
  1619  0155  0020               	movlb	0	; select bank0
  1620  0156  00DE               	movwf	??_main
  1621  0157  085E               	movf	??_main,w
  1622  0158  0021               	movlb	1	; select bank1
  1623  0159  00B4               	movwf	_valueInfoDurationKey_^(0+128)
  1624                           
  1625                           ;main.c: 313: valueInfoPulseWidth_.valuePtr = &configration_.pulseWidth ;
  1626  015A  3032               	movlw	(low ((_configration_| 0+10)))& (0+255)
  1627  015B  0020               	movlb	0	; select bank0
  1628  015C  00DE               	movwf	??_main
  1629  015D  085E               	movf	??_main,w
  1630  015E  0021               	movlb	1	; select bank1
  1631  015F  00C2               	movwf	_valueInfoPulseWidth_^(0+128)
  1632                           
  1633                           ;main.c: 314: valueInfoOscillatorTune_.valuePtr = ( Uint08_t* ) & configration_.oscillat
      +                          orTune ;
  1634  0160  3033               	movlw	(low ((_configration_| 0+11)))& (0+255)
  1635  0161  0020               	movlb	0	; select bank0
  1636  0162  00DE               	movwf	??_main
  1637  0163  085E               	movf	??_main,w
  1638  0164  0021               	movlb	1	; select bank1
  1639  0165  00BB               	movwf	_valueInfoOscillatorTune_^(0+128)
  1640                           
  1641                           ;main.c: 315: break ;
  1642  0166  29AA               	goto	l269
  1643  0167                     l3416:	
  1644                           ;main.c: 317: case 0x6:
  1645                           
  1646                           
  1647                           ;main.c: 319: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1648  0167  3030               	movlw	low ((_BITMAP| (0+32768)+8))
  1649  0168  0020               	movlb	0	; select bank0
  1650  0169  00D8               	movwf	ParallelLCD_SetCgram@bitmap
  1651  016A  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1652  016B  00D9               	movwf	ParallelLCD_SetCgram@bitmap+1
  1653  016C  3021               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1654  016D  0084               	movwf	4
  1655  016E  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1656  016F  0085               	movwf	5
  1657  0170  0800               	movf	0,w	;code access
  1658  0171  318E  2617  3180   	fcall	_ParallelLCD_SetCgram
  1659                           
  1660                           ;main.c: 320: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1661  0174  3038               	movlw	low ((_BITMAP| (0+32768)+16))
  1662  0175  0020               	movlb	0	; select bank0
  1663  0176  00D8               	movwf	ParallelLCD_SetCgram@bitmap
  1664  0177  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1665  0178  00D9               	movwf	ParallelLCD_SetCgram@bitmap+1
  1666  0179  3022               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1667  017A  0084               	movwf	4
  1668  017B  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1669  017C  0085               	movwf	5
  1670  017D  0800               	movf	0,w	;code access
  1671  017E  318E  2617  3180   	fcall	_ParallelLCD_SetCgram
  1672                           
  1673                           ;main.c: 321: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1674  0181  3028               	movlw	low (_BITMAP| (0+32768))
  1675  0182  0020               	movlb	0	; select bank0
  1676  0183  00D8               	movwf	ParallelLCD_SetCgram@bitmap
  1677  0184  3088               	movlw	high (_BITMAP| (0+32768))
  1678  0185  00D9               	movwf	ParallelLCD_SetCgram@bitmap+1
  1679  0186  3020               	movlw	low (_CHAR_CODE| (0+32768))
  1680  0187  0084               	movwf	4
  1681  0188  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1682  0189  0085               	movwf	5
  1683  018A  0800               	movf	0,w	;code access
  1684  018B  318E  2617  3180   	fcall	_ParallelLCD_SetCgram
  1685                           
  1686                           ;main.c: 324: }
  1687                           
  1688                           ;main.c: 322: break ;
  1689  018E  29AA               	goto	l269
  1690  018F                     l3420:	
  1691  018F  0022               	movlb	2	; select bank2
  1692  0190  0869               	movf	main@phase^(0+256),w
  1693                           
  1694                           ; Switch size 1, requested type "space"
  1695                           ; Number of cases is 8, Range of values is 0 to 12
  1696                           ; switch strategies available:
  1697                           ; Name         Instructions Cycles
  1698                           ; simple_byte           25    13 (average)
  1699                           ; direct_byte           32     6 (fixed)
  1700                           ; jumptable            260     6 (fixed)
  1701                           ;	Chosen strategy is simple_byte
  1702  0191  3A00               	xorlw	0	; case 0
  1703  0192  1903               	skipnz
  1704  0193  28D4               	goto	l261
  1705  0194  3A01               	xorlw	1	; case 1
  1706  0195  1903               	skipnz
  1707  0196  28D7               	goto	l264
  1708  0197  3A03               	xorlw	3	; case 2
  1709  0198  1903               	skipnz
  1710  0199  28D4               	goto	l261
  1711  019A  3A01               	xorlw	1	; case 3
  1712  019B  1903               	skipnz
  1713  019C  28DA               	goto	l3388
  1714  019D  3A07               	xorlw	7	; case 4
  1715  019E  1903               	skipnz
  1716  019F  291B               	goto	l3398
  1717  01A0  3A01               	xorlw	1	; case 5
  1718  01A1  1903               	skipnz
  1719  01A2  2948               	goto	l3406
  1720  01A3  3A03               	xorlw	3	; case 6
  1721  01A4  1903               	skipnz
  1722  01A5  2967               	goto	l3416
  1723  01A6  3A0A               	xorlw	10	; case 12
  1724  01A7  1903               	skipnz
  1725  01A8  28D7               	goto	l264
  1726  01A9  29AA               	goto	l269
  1727  01AA                     l269:	
  1728                           ;main.c: 326: while( !PIR1bits.TMR1IF ) ;
  1729                           
  1730  01AA  0020               	movlb	0	; select bank0
  1731  01AB  1C11               	btfss	17,0	;volatile
  1732  01AC  29AA               	goto	l269
  1733                           
  1734                           ;main.c: 327: PIR1bits.TMR1IF = 0 ;
  1735  01AD  1011               	bcf	17,0	;volatile
  1736  01AE  3001               	movlw	1
  1737  01AF  00DE               	movwf	??_main
  1738  01B0  085E               	movf	??_main,w
  1739  01B1  0022               	movlb	2	; select bank2
  1740  01B2  07E9               	addwf	main@phase^(0+256),f
  1741  01B3  300E               	movlw	14
  1742  01B4  0269               	subwf	main@phase^(0+256),w
  1743  01B5  1C03               	skipc
  1744  01B6  28CF               	goto	l257
  1745  01B7                     l258:	
  1746                           
  1747                           ;main.c: 329: }
  1748                           ;main.c: 333: INTCONbits.PEIE = 1 ;
  1749  01B7  170B               	bsf	11,6	;volatile
  1750                           
  1751                           ;main.c: 334: T6CONbits.TMR6ON = 1 ;
  1752  01B8  0028               	movlb	8	; select bank8
  1753  01B9  151E               	bsf	30,2	;volatile
  1754                           
  1755                           ;main.c: 335: PIE3bits.TMR6IE = 1 ;
  1756  01BA  0021               	movlb	1	; select bank1
  1757  01BB  1593               	bsf	19,3	;volatile
  1758  01BC                     l272:	
  1759                           ;main.c: 338: for( ; ; ) {
  1760                           
  1761  01BC  0064               	clrwdt	;# 
  1762                           
  1763                           ;main.c: 344: static UniPortAState prevPortAState = { 0x00 } ;
  1764                           ;main.c: 345: UniPortAState keyPressed ;
  1765                           ;main.c: 347: keyPressed.byte = ( portAState_.byte ^ prevPortAState.byte ) & portAState_
      +                          .byte ;
  1766  01BD  0020               	movlb	0	; select bank0
  1767  01BE  0855               	movf	_portAState_,w
  1768  01BF  0657               	xorwf	main@prevPortAState,w
  1769  01C0  0555               	andwf	_portAState_,w
  1770  01C1  00DE               	movwf	??_main
  1771  01C2  085E               	movf	??_main,w
  1772  01C3  0022               	movlb	2	; select bank2
  1773  01C4  00E8               	movwf	main@keyPressed^(0+256)
  1774                           
  1775                           ;main.c: 348: prevPortAState.byte = portAState_.byte ;
  1776  01C5  0020               	movlb	0	; select bank0
  1777  01C6  0855               	movf	_portAState_,w
  1778  01C7  00DE               	movwf	??_main
  1779  01C8  085E               	movf	??_main,w
  1780  01C9  00D7               	movwf	main@prevPortAState
  1781                           
  1782                           ;main.c: 350: if( keyPressed.keyMenu ) {
  1783  01CA  0022               	movlb	2	; select bank2
  1784  01CB  1EE8               	btfss	main@keyPressed^(0+256),5
  1785  01CC  29CF               	goto	l275
  1786                           
  1787                           ;main.c: 351: inputEvent_.keyPressMenu=1 ;
  1788  01CD  0020               	movlb	0	; select bank0
  1789  01CE  1551               	bsf	_inputEvent_,2
  1790  01CF                     l275:	
  1791                           
  1792                           ;main.c: 352: }
  1793                           ;main.c: 354: if( keyPressed.keyUp ) {
  1794  01CF  0022               	movlb	2	; select bank2
  1795  01D0  1FE8               	btfss	main@keyPressed^(0+256),7
  1796  01D1  29D8               	goto	l276
  1797                           
  1798                           ;main.c: 355: if( portAState_.keyDown )
  1799  01D2  0020               	movlb	0	; select bank0
  1800  01D3  1F55               	btfss	_portAState_,6
  1801  01D4  29D7               	goto	l277
  1802                           
  1803                           ;main.c: 356: inputEvent_.keyPressUpDown=1 ;
  1804  01D5  15D1               	bsf	_inputEvent_,3
  1805  01D6  29D8               	goto	l276
  1806  01D7                     l277:	
  1807                           
  1808                           ;main.c: 357: else
  1809                           ;main.c: 358: inputEvent_.keyPressUp=1 ;
  1810  01D7  1451               	bsf	_inputEvent_,0
  1811  01D8                     l276:	
  1812                           
  1813                           ;main.c: 359: }
  1814                           ;main.c: 361: if( keyPressed.keyDown ) {
  1815  01D8  0022               	movlb	2	; select bank2
  1816  01D9  1F68               	btfss	main@keyPressed^(0+256),6
  1817  01DA  29E1               	goto	l279
  1818                           
  1819                           ;main.c: 362: if( portAState_.keyUp )
  1820  01DB  0020               	movlb	0	; select bank0
  1821  01DC  1FD5               	btfss	_portAState_,7
  1822  01DD  29E0               	goto	l280
  1823                           
  1824                           ;main.c: 363: inputEvent_.keyPressUpDown=1 ;
  1825  01DE  15D1               	bsf	_inputEvent_,3
  1826  01DF  29E1               	goto	l279
  1827  01E0                     l280:	
  1828                           
  1829                           ;main.c: 364: else
  1830                           ;main.c: 365: inputEvent_.keyPressDown=1 ;
  1831  01E0  14D1               	bsf	_inputEvent_,1
  1832  01E1                     l279:	
  1833                           
  1834                           ;main.c: 366: }
  1835                           ;main.c: 368: if( (inputEvent_.keyPressHeldUp&&!(inputEvent_.keyPressHeldUp=0)) )
  1836  01E1  0020               	movlb	0	; select bank0
  1837  01E2  1E51               	btfss	_inputEvent_,4
  1838  01E3  29E6               	goto	l282
  1839  01E4  1251               	bcf	_inputEvent_,4
  1840                           
  1841                           ;main.c: 369: inputEvent_.keyPressUp=1 ;
  1842  01E5  1451               	bsf	_inputEvent_,0
  1843  01E6                     l282:	
  1844                           
  1845                           ;main.c: 371: if( (inputEvent_.keyPressHeldDown&&!(inputEvent_.keyPressHeldDown=0)) )
  1846  01E6  1ED1               	btfss	_inputEvent_,5
  1847  01E7  29EA               	goto	l3446
  1848  01E8  12D1               	bcf	_inputEvent_,5
  1849                           
  1850                           ;main.c: 372: inputEvent_.keyPressDown=1 ;
  1851  01E9  14D1               	bsf	_inputEvent_,1
  1852  01EA                     l3446:	
  1853                           
  1854                           ;main.c: 374: if( inputEvent_.all ) {
  1855  01EA  0851               	movf	_inputEvent_,w
  1856  01EB  1D03               	btfss	3,2
  1857                           
  1858                           ;main.c: 375: outputEvent_.soundOnKey=1 ;
  1859  01EC  1654               	bsf	_outputEvent_,4
  1860                           
  1861                           ;main.c: 376: }
  1862                           ;main.c: 379: if( (inputEvent_.keyPressUpDown&&!(inputEvent_.keyPressUpDown=0)) ) {
  1863  01ED  1DD1               	btfss	_inputEvent_,3
  1864  01EE  29FB               	goto	l285
  1865  01EF  11D1               	bcf	_inputEvent_,3
  1866                           
  1867                           ;main.c: 380: if( machineState_ == STATE_METRONOME ) {
  1868  01F0  0353               	decf	_machineState_,w
  1869  01F1  1D03               	btfss	3,2
  1870  01F2  29FB               	goto	l285
  1871                           
  1872                           ;main.c: 381: {if(isMute_){isMute_=0;}else{isMute_=1;}} ;
  1873  01F3  0852               	movf	_isMute_,w
  1874  01F4  1903               	btfsc	3,2
  1875  01F5  29F8               	goto	l287
  1876  01F6  01D2               	clrf	_isMute_
  1877  01F7  29FA               	goto	l288
  1878  01F8                     l287:	
  1879  01F8  01D2               	clrf	_isMute_
  1880  01F9  0AD2               	incf	_isMute_,f
  1881  01FA                     l288:	
  1882                           
  1883                           ;main.c: 382: outputEvent_.changeMessage=1 ;
  1884  01FA  14D4               	bsf	_outputEvent_,1
  1885  01FB                     l285:	
  1886                           
  1887                           ;main.c: 383: }
  1888                           ;main.c: 384: }
  1889                           ;main.c: 387: if( (inputEvent_.keyPressMenu&&!(inputEvent_.keyPressMenu=0)) ) {
  1890  01FB  1D51               	btfss	_inputEvent_,2
  1891  01FC  2A95               	goto	l289
  1892  01FD  1151               	bcf	_inputEvent_,2
  1893                           
  1894                           ;main.c: 388: outputEvent_.changeState=1 ;
  1895  01FE  1454               	bsf	_outputEvent_,0
  1896                           
  1897                           ;main.c: 390: switch( machineState_ ) {
  1898  01FF  2A88               	goto	l3556
  1899  0200                     l3460:	
  1900                           ;main.c: 392: case STATE_METRONOME:
  1901                           
  1902                           
  1903                           ;main.c: 393: machineState_ = STATE_MENU_MAIN ;
  1904  0200  3002               	movlw	2
  1905  0201  00DE               	movwf	??_main
  1906  0202  085E               	movf	??_main,w
  1907  0203  00D3               	movwf	_machineState_
  1908                           
  1909                           ;main.c: 394: menuInfoMain_.select = 0 ;
  1910  0204  01BB               	clrf	_menuInfoMain_
  1911                           
  1912                           ;main.c: 395: menuInfoMain_.cursorPosition = 0 ;
  1913  0205  01BC               	clrf	_menuInfoMain_+1
  1914                           
  1915                           ;main.c: 396: break ;
  1916  0206  2A95               	goto	l289
  1917  0207                     l3466:	
  1918                           ;main.c: 400: case MENU_ITEM_MAIN_BEAT_COUNT:
  1919                           
  1920                           ;main.c: 399: switch( menuInfoMain_.select ) {
  1921                           
  1922                           ;main.c: 398: case STATE_MENU_MAIN:
  1923                           
  1924                           
  1925                           ;main.c: 401: machineState_ = STATE_ADJUST_BEAT_COUNT ;
  1926  0207  3005               	movlw	5
  1927  0208  2A78               	goto	L16
  1928  0209                     l3468:	
  1929                           ;main.c: 404: case MENU_ITEM_MAIN_TONE_MENU:
  1930                           
  1931                           ;main.c: 402: break ;
  1932                           
  1933                           
  1934                           ;main.c: 405: machineState_ = STATE_MENU_TONE ;
  1935  0209  3003               	movlw	3
  1936  020A  00DE               	movwf	??_main
  1937  020B  085E               	movf	??_main,w
  1938  020C  00D3               	movwf	_machineState_
  1939                           
  1940                           ;main.c: 406: menuInfoTone_.select = 0 ;
  1941  020D  01C1               	clrf	_menuInfoTone_
  1942                           
  1943                           ;main.c: 407: menuInfoTone_.cursorPosition = 0 ;
  1944  020E  01C2               	clrf	_menuInfoTone_+1
  1945                           
  1946                           ;main.c: 408: break ;
  1947  020F  2A95               	goto	l289
  1948  0210                     l3474:	
  1949                           ;main.c: 410: case MENU_ITEM_MAIN_ADJUST_DURATION:
  1950                           
  1951                           
  1952                           ;main.c: 411: machineState_ = STATE_MENU_DURATION ;
  1953  0210  3004               	movlw	4
  1954  0211  00DE               	movwf	??_main
  1955  0212  085E               	movf	??_main,w
  1956  0213  00D3               	movwf	_machineState_
  1957                           
  1958                           ;main.c: 412: menuInfoDuration_.select = 0 ;
  1959  0214  0021               	movlb	1	; select bank1
  1960  0215  01E9               	clrf	_menuInfoDuration_^(0+128)
  1961                           
  1962                           ;main.c: 413: menuInfoDuration_.cursorPosition = 0 ;
  1963  0216  01EA               	clrf	(_menuInfoDuration_^(0+128)+1)
  1964                           
  1965                           ;main.c: 414: break ;
  1966  0217  2A95               	goto	l289
  1967  0218                     l3480:	
  1968                           ;main.c: 416: case MENU_ITEM_MAIN_PULSE_WIDTH:
  1969                           
  1970                           
  1971                           ;main.c: 417: machineState_ = STATE_ADJUST_PULSE_WIDTH ;
  1972  0218  3008               	movlw	8
  1973  0219  2A73               	goto	L39
  1974  021A                     l3482:	
  1975                           ;main.c: 420: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  1976                           
  1977                           ;main.c: 418: break ;
  1978                           
  1979                           
  1980                           ;main.c: 421: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  1981  021A  300A               	movlw	10
  1982  021B  2A78               	goto	L16
  1983  021C                     l3484:	
  1984                           ;main.c: 424: case MENU_ITEM_MAIN_INFORMATION:
  1985                           
  1986                           ;main.c: 422: break ;
  1987                           
  1988                           
  1989                           ;main.c: 425: machineState_ = STATE_INFORMATION ;
  1990  021C  300B               	movlw	11
  1991  021D  2A78               	goto	L16
  1992  021E                     l3486:	
  1993                           ;main.c: 428: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  1994                           
  1995                           ;main.c: 426: break ;
  1996                           
  1997                           
  1998                           ;main.c: 429: machineState_ = STATE_CONFIRM_LOAD ;
  1999  021E  300E               	movlw	14
  2000  021F  00DE               	movwf	??_main
  2001  0220  085E               	movf	??_main,w
  2002  0221  00D3               	movwf	_machineState_
  2003                           
  2004                           ;main.c: 430: menuInfoConfirmLoad_.select = 0 ;
  2005  0222  0021               	movlb	1	; select bank1
  2006  0223  01D7               	clrf	_menuInfoConfirmLoad_^(0+128)
  2007                           
  2008                           ;main.c: 431: menuInfoConfirmLoad_.cursorPosition = 0 ;
  2009  0224  01D8               	clrf	(_menuInfoConfirmLoad_^(0+128)+1)
  2010                           
  2011                           ;main.c: 432: break ;
  2012  0225  2A95               	goto	l289
  2013  0226                     l3492:	
  2014                           ;main.c: 434: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  2015                           
  2016                           
  2017                           ;main.c: 435: machineState_ = STATE_CONFIRM_SAVE ;
  2018  0226  300C               	movlw	12
  2019  0227  0020               	movlb	0	; select bank0
  2020  0228  00DE               	movwf	??_main
  2021  0229  085E               	movf	??_main,w
  2022  022A  00D3               	movwf	_machineState_
  2023                           
  2024                           ;main.c: 436: menuInfoConfirmSave_.select = 0 ;
  2025  022B  0021               	movlb	1	; select bank1
  2026  022C  01E3               	clrf	_menuInfoConfirmSave_^(0+128)
  2027                           
  2028                           ;main.c: 437: menuInfoConfirmSave_.cursorPosition = 0 ;
  2029  022D  01E4               	clrf	(_menuInfoConfirmSave_^(0+128)+1)
  2030                           
  2031                           ;main.c: 438: break ;
  2032  022E  2A95               	goto	l289
  2033  022F                     l3498:	
  2034                           ;main.c: 440: case MENU_ITEM_MAIN_RESET:
  2035                           
  2036                           
  2037                           ;main.c: 441: machineState_ = STATE_CONFIRM_RESET ;
  2038  022F  3010               	movlw	16
  2039  0230  0020               	movlb	0	; select bank0
  2040  0231  00DE               	movwf	??_main
  2041  0232  085E               	movf	??_main,w
  2042  0233  00D3               	movwf	_machineState_
  2043                           
  2044                           ;main.c: 442: menuInfoConfirmReset_.select = 0 ;
  2045  0234  0021               	movlb	1	; select bank1
  2046  0235  01DD               	clrf	_menuInfoConfirmReset_^(0+128)
  2047                           
  2048                           ;main.c: 443: menuInfoConfirmReset_.cursorPosition = 0 ;
  2049  0236  01DE               	clrf	(_menuInfoConfirmReset_^(0+128)+1)
  2050                           
  2051                           ;main.c: 444: break ;
  2052  0237  2A95               	goto	l289
  2053  0238                     l306:	
  2054                           ;main.c: 447: default:
  2055                           
  2056                           ;main.c: 446: case MENU_ITEM_MAIN_RETURN:
  2057                           
  2058                           
  2059                           ;main.c: 448: machineState_ = STATE_METRONOME ;
  2060  0238  0020               	movlb	0	; select bank0
  2061  0239  01D3               	clrf	_machineState_
  2062  023A  0AD3               	incf	_machineState_,f
  2063                           
  2064                           ;main.c: 451: }
  2065                           
  2066                           ;main.c: 449: break ;
  2067  023B  2A95               	goto	l289
  2068  023C                     l3506:	
  2069  023C  083B               	movf	_menuInfoMain_,w
  2070                           
  2071                           ; Switch size 1, requested type "space"
  2072                           ; Number of cases is 10, Range of values is 0 to 9
  2073                           ; switch strategies available:
  2074                           ; Name         Instructions Cycles
  2075                           ; direct_byte           26     6 (fixed)
  2076                           ; simple_byte           31    16 (average)
  2077                           ; jumptable            260     6 (fixed)
  2078                           ;	Chosen strategy is direct_byte
  2079  023D  0084               	movwf	4
  2080  023E  300A               	movlw	10
  2081  023F  0204               	subwf	4,w
  2082  0240  1803               	skipnc
  2083  0241  2A38               	goto	l306
  2084  0242  3189               	movlp	high S4016
  2085  0243  3504               	lslf	4,w
  2086  0244  3EE7               	addlw	low S4016
  2087  0245  0082               	movwf	2
  2088                           
  2089                           ;main.c: 452: break ;
  2090  0246  2A95               	goto	l289
  2091  0247                     l3508:	
  2092                           ;main.c: 454: case STATE_MENU_TONE:
  2093                           
  2094                           
  2095                           ;main.c: 455: if( menuInfoTone_.select == MENU_ITEM_TONE_RETURN )
  2096  0247  0841               	movf	_menuInfoTone_,w
  2097  0248  1903               	btfsc	3,2
  2098  0249  2A75               	goto	l3542
  2099                           
  2100                           ;main.c: 457: else
  2101                           ;main.c: 458: machineState_ = STATE_ADJUST_TONE ;
  2102                           
  2103                           ;main.c: 456: machineState_ = STATE_MENU_MAIN ;
  2104  024A  3009               	movlw	9
  2105  024B  2A78               	goto	L16
  2106  024C                     l3514:	
  2107                           ;main.c: 463: case MENU_ITEM_DURATION_ADJUST_CLICK:
  2108                           
  2109                           ;main.c: 462: switch( currentMenuInfoPtr_->select ) {
  2110                           
  2111                           ;main.c: 461: case STATE_MENU_DURATION:
  2112                           
  2113                           ;main.c: 459: break ;
  2114                           
  2115                           
  2116                           ;main.c: 464: machineState_ = STATE_ADJUST_DURATION_CLICK ;
  2117  024C  3006               	movlw	6
  2118  024D  2A78               	goto	L16
  2119  024E                     l3516:	
  2120                           ;main.c: 467: case MENU_ITEM_DURATION_ADJUST_KEY:
  2121                           
  2122                           ;main.c: 465: break ;
  2123                           
  2124                           
  2125                           ;main.c: 468: machineState_ = STATE_ADJUST_DURATION_KEY ;
  2126  024E  3007               	movlw	7
  2127  024F  2A78               	goto	L16
  2128  0250                     l3518:	
  2129                           ;main.c: 472: default:
  2130                           
  2131                           ;main.c: 471: case MENU_ITEM_DURATION_RETURN:
  2132                           
  2133                           ;main.c: 469: break ;
  2134                           
  2135  0250  2A75               	goto	l3542
  2136  0251                     l3522:	
  2137                           ;main.c: 476: }
  2138                           
  2139                           ;main.c: 474: break ;
  2140                           
  2141                           ;main.c: 473: machineState_ = STATE_MENU_MAIN ;
  2142                           
  2143  0251  084F               	movf	_currentMenuInfoPtr_,w
  2144  0252  0086               	movwf	6
  2145  0253  0187               	clrf	7
  2146  0254  0801               	movf	1,w
  2147                           
  2148                           ; Switch size 1, requested type "space"
  2149                           ; Number of cases is 3, Range of values is 0 to 2
  2150                           ; switch strategies available:
  2151                           ; Name         Instructions Cycles
  2152                           ; simple_byte           10     6 (average)
  2153                           ; direct_byte           12     6 (fixed)
  2154                           ; jumptable            260     6 (fixed)
  2155                           ;	Chosen strategy is simple_byte
  2156  0255  3A00               	xorlw	0	; case 0
  2157  0256  1903               	skipnz
  2158  0257  2A50               	goto	l3518
  2159  0258  3A01               	xorlw	1	; case 1
  2160  0259  1903               	skipnz
  2161  025A  2A4C               	goto	l3514
  2162  025B  3A03               	xorlw	3	; case 2
  2163  025C  1903               	skipnz
  2164  025D  2A4E               	goto	l3516
  2165  025E  2A50               	goto	l3518
  2166                           
  2167                           ;main.c: 477: break ;
  2168  025F  2A95               	goto	l289
  2169  0260                     l3524:	
  2170                           ;main.c: 479: case STATE_CONFIRM_LOAD:
  2171                           
  2172                           
  2173                           ;main.c: 480: if( menuInfoConfirmLoad_.select )
  2174  0260  0021               	movlb	1	; select bank1
  2175  0261  0857               	movf	_menuInfoConfirmLoad_^(0+128),w
  2176  0262  1903               	btfsc	3,2
  2177  0263  2A72               	goto	l3540
  2178                           
  2179                           ;main.c: 481: machineState_ = STATE_LOAD ;
  2180  0264  300F               	movlw	15
  2181  0265  2A73               	goto	L39
  2182  0266                     l3530:	
  2183                           ;main.c: 486: case STATE_CONFIRM_SAVE:
  2184                           
  2185                           ;main.c: 484: break ;
  2186                           
  2187                           ;main.c: 482: else
  2188                           ;main.c: 483: machineState_ = STATE_MENU_MAIN ;
  2189                           
  2190                           
  2191                           ;main.c: 487: if( menuInfoConfirmSave_.select )
  2192  0266  0021               	movlb	1	; select bank1
  2193  0267  0863               	movf	_menuInfoConfirmSave_^(0+128),w
  2194  0268  1903               	btfsc	3,2
  2195  0269  2A72               	goto	l3540
  2196                           
  2197                           ;main.c: 488: machineState_ = STATE_SAVE ;
  2198  026A  300D               	movlw	13
  2199  026B  2A73               	goto	L39
  2200  026C                     l3536:	
  2201                           ;main.c: 493: case STATE_CONFIRM_RESET:
  2202                           
  2203                           ;main.c: 491: break ;
  2204                           
  2205                           ;main.c: 489: else
  2206                           ;main.c: 490: machineState_ = STATE_MENU_MAIN ;
  2207                           
  2208                           
  2209                           ;main.c: 494: if( menuInfoConfirmReset_.select )
  2210  026C  0021               	movlb	1	; select bank1
  2211  026D  085D               	movf	_menuInfoConfirmReset_^(0+128),w
  2212  026E  1903               	btfsc	3,2
  2213  026F  2A72               	goto	l3540
  2214                           
  2215                           ;main.c: 495: machineState_ = STATE_RESET ;
  2216  0270  3012               	movlw	18
  2217  0271  2A73               	goto	L39
  2218  0272                     l3540:	
  2219                           
  2220                           ;main.c: 496: else
  2221                           ;main.c: 497: machineState_ = STATE_MENU_MAIN ;
  2222  0272  3002               	movlw	2
  2223  0273                     L39:	
  2224  0273  0020               	movlb	0	; select bank0
  2225  0274  2A78               	goto	L16
  2226  0275                     l3542:	
  2227                           ;main.c: 500: case STATE_ADJUST_BEAT_COUNT:
  2228                           
  2229                           ;main.c: 498: break ;
  2230                           
  2231                           
  2232                           ;main.c: 501: case STATE_ADJUST_PULSE_WIDTH:
  2233                           ;main.c: 502: case STATE_INFORMATION:
  2234                           ;main.c: 503: machineState_ = STATE_MENU_MAIN ;
  2235  0275  3002               	movlw	2
  2236  0276  2A78               	goto	L16
  2237  0277                     l3544:	
  2238                           ;main.c: 506: case STATE_ADJUST_DURATION_CLICK:
  2239                           
  2240                           ;main.c: 504: break ;
  2241                           
  2242                           
  2243                           ;main.c: 507: case STATE_ADJUST_DURATION_KEY:
  2244                           ;main.c: 508: machineState_ = STATE_MENU_DURATION ;
  2245  0277  3004               	movlw	4
  2246  0278                     L16:	
  2247  0278  00DE               	movwf	??_main
  2248  0279  085E               	movf	??_main,w
  2249  027A  00D3               	movwf	_machineState_
  2250                           
  2251                           ;main.c: 509: break ;
  2252  027B  2A95               	goto	l289
  2253  027C                     l3546:	
  2254                           ;main.c: 511: case STATE_ADJUST_OSCILLATOR_TUNE:
  2255                           
  2256                           
  2257                           ;main.c: 512: machineState_ = STATE_MENU_MAIN ;
  2258  027C  3002               	movlw	2
  2259  027D  2A7F               	goto	L33
  2260  027E                     l3550:	
  2261                           ;main.c: 516: case STATE_ADJUST_TONE:
  2262                           
  2263                           ;main.c: 514: break ;
  2264                           
  2265                           ;main.c: 513: outputEvent_.soundOff=1 ;
  2266                           
  2267                           
  2268                           ;main.c: 517: machineState_ = STATE_MENU_TONE ;
  2269  027E  3003               	movlw	3
  2270  027F                     L33:	
  2271  027F  00DE               	movwf	??_main
  2272  0280  085E               	movf	??_main,w
  2273  0281  00D3               	movwf	_machineState_
  2274                           
  2275                           ;main.c: 518: outputEvent_.soundOff=1 ;
  2276  0282  16D4               	bsf	_outputEvent_,5
  2277                           
  2278                           ;main.c: 519: break ;
  2279  0283  2A95               	goto	l289
  2280  0284                     l334:	
  2281                           ;main.c: 521: case STATE_INITIALIZE:
  2282                           
  2283                           
  2284                           ;main.c: 522: case STATE_ERROR:
  2285                           ;main.c: 523: machineState_ = STATE_METRONOME ;
  2286  0284  01D3               	clrf	_machineState_
  2287  0285  0AD3               	incf	_machineState_,f
  2288                           
  2289                           ;main.c: 524: outputEvent_.resetMetronome=1 ;
  2290  0286  1754               	bsf	_outputEvent_,6
  2291                           
  2292                           ;main.c: 527: }
  2293                           
  2294                           ;main.c: 525: break ;
  2295  0287  2A95               	goto	l289
  2296  0288                     l3556:	
  2297  0288  0853               	movf	_machineState_,w
  2298                           
  2299                           ; Switch size 1, requested type "space"
  2300                           ; Number of cases is 16, Range of values is 1 to 19
  2301                           ; switch strategies available:
  2302                           ; Name         Instructions Cycles
  2303                           ; direct_byte           47     9 (fixed)
  2304                           ; simple_byte           49    25 (average)
  2305                           ; jumptable            263     9 (fixed)
  2306                           ;	Chosen strategy is direct_byte
  2307  0289  3EFF               	addlw	-1
  2308  028A  1C03               	skipc
  2309  028B  2A95               	goto	l289
  2310  028C  0084               	movwf	4
  2311  028D  3013               	movlw	19
  2312  028E  0204               	subwf	4,w
  2313  028F  1803               	skipnc
  2314  0290  2A95               	goto	l289
  2315  0291  3189               	movlp	high S4018
  2316  0292  3504               	lslf	4,w
  2317  0293  3E9B               	addlw	low S4018
  2318  0294  0082               	movwf	2
  2319  0295                     l289:	
  2320                           
  2321                           ;main.c: 529: }
  2322                           ;main.c: 532: if( (outputEvent_.changeState&&!(outputEvent_.changeState=0)) ) {
  2323  0295  0020               	movlb	0	; select bank0
  2324  0296  1C54               	btfss	_outputEvent_,0
  2325  0297  2AFE               	goto	l335
  2326  0298  1054               	bcf	_outputEvent_,0
  2327                           
  2328                           ;main.c: 534: outputEvent_.changeMessage=1 ;
  2329  0299  14D4               	bsf	_outputEvent_,1
  2330                           
  2331                           ;main.c: 536: switch( machineState_ ) {
  2332  029A  2AF4               	goto	l3608
  2333  029B                     l3560:	
  2334                           ;main.c: 537: case STATE_METRONOME:
  2335                           
  2336                           
  2337                           ;main.c: 538: currentValueInfoPtr_ = &valueInfoTempo_ ;
  2338  029B  30C9               	movlw	(low (_valueInfoTempo_| 0))& (0+255)
  2339  029C  2AB0               	goto	L26
  2340  029D                     l3562:	
  2341                           ;main.c: 541: case STATE_MENU_MAIN:
  2342                           
  2343                           ;main.c: 539: break ;
  2344                           
  2345                           
  2346                           ;main.c: 542: currentMenuInfoPtr_ = &menuInfoMain_ ;
  2347  029D  303B               	movlw	(low (_menuInfoMain_| 0))& (0+255)
  2348  029E  2AE0               	goto	L23
  2349  029F                     l3564:	
  2350                           ;main.c: 545: case STATE_MENU_TONE:
  2351                           
  2352                           ;main.c: 543: break ;
  2353                           
  2354                           
  2355                           ;main.c: 546: currentMenuInfoPtr_ = &menuInfoTone_ ;
  2356  029F  3041               	movlw	(low (_menuInfoTone_| 0))& (0+255)
  2357  02A0  2AE0               	goto	L23
  2358  02A1                     l3566:	
  2359                           ;main.c: 549: case STATE_MENU_DURATION:
  2360                           
  2361                           ;main.c: 547: break ;
  2362                           
  2363                           
  2364                           ;main.c: 550: currentMenuInfoPtr_ = &menuInfoDuration_ ;
  2365  02A1  30E9               	movlw	(low (_menuInfoDuration_| 0))& (0+255)
  2366  02A2  2AE0               	goto	L23
  2367  02A3                     l3568:	
  2368                           ;main.c: 553: case STATE_CONFIRM_LOAD:
  2369                           
  2370                           ;main.c: 551: break ;
  2371                           
  2372                           
  2373                           ;main.c: 554: currentMenuInfoPtr_ = &menuInfoConfirmLoad_ ;
  2374  02A3  30D7               	movlw	(low (_menuInfoConfirmLoad_| 0))& (0+255)
  2375  02A4  2AE0               	goto	L23
  2376  02A5                     l3570:	
  2377                           ;main.c: 557: case STATE_CONFIRM_SAVE:
  2378                           
  2379                           ;main.c: 555: break ;
  2380                           
  2381                           
  2382                           ;main.c: 558: currentMenuInfoPtr_ = &menuInfoConfirmSave_ ;
  2383  02A5  30E3               	movlw	(low (_menuInfoConfirmSave_| 0))& (0+255)
  2384  02A6  2AE0               	goto	L23
  2385  02A7                     l3572:	
  2386                           ;main.c: 561: case STATE_CONFIRM_RESET:
  2387                           
  2388                           ;main.c: 559: break ;
  2389                           
  2390                           
  2391                           ;main.c: 562: currentMenuInfoPtr_ = &menuInfoConfirmReset_ ;
  2392  02A7  30DD               	movlw	(low (_menuInfoConfirmReset_| 0))& (0+255)
  2393  02A8  2AE0               	goto	L23
  2394  02A9                     l3574:	
  2395                           ;main.c: 565: case STATE_ADJUST_BEAT_COUNT:
  2396                           
  2397                           ;main.c: 563: break ;
  2398                           
  2399                           
  2400                           ;main.c: 566: currentValueInfoPtr_ = &valueInfoBeatCount_ ;
  2401  02A9  30A6               	movlw	(low (_valueInfoBeatCount_| 0))& (0+255)
  2402  02AA  2AB0               	goto	L26
  2403  02AB                     l3576:	
  2404                           ;main.c: 569: case STATE_ADJUST_DURATION_CLICK:
  2405                           
  2406                           ;main.c: 567: break ;
  2407                           
  2408                           
  2409                           ;main.c: 570: currentValueInfoPtr_ = &valueInfoDurationClick_ ;
  2410  02AB  30AD               	movlw	(low (_valueInfoDurationClick_| 0))& (0+255)
  2411  02AC  2AB0               	goto	L26
  2412  02AD                     l3578:	
  2413                           ;main.c: 573: case STATE_ADJUST_DURATION_KEY:
  2414                           
  2415                           ;main.c: 571: break ;
  2416                           
  2417                           
  2418                           ;main.c: 574: currentValueInfoPtr_ = &valueInfoDurationKey_ ;
  2419  02AD  30B4               	movlw	(low (_valueInfoDurationKey_| 0))& (0+255)
  2420  02AE  2AB0               	goto	L26
  2421  02AF                     l3580:	
  2422                           ;main.c: 577: case STATE_ADJUST_PULSE_WIDTH:
  2423                           
  2424                           ;main.c: 575: break ;
  2425                           
  2426                           
  2427                           ;main.c: 578: currentValueInfoPtr_ = &valueInfoPulseWidth_ ;
  2428  02AF  30C2               	movlw	(low (_valueInfoPulseWidth_| 0))& (0+255)
  2429  02B0                     L26:	
  2430  02B0  00DE               	movwf	??_main
  2431  02B1  085E               	movf	??_main,w
  2432  02B2  00D0               	movwf	_currentValueInfoPtr_
  2433                           
  2434                           ;main.c: 579: break ;
  2435  02B3  2AFE               	goto	l335
  2436  02B4                     l3582:	
  2437                           ;main.c: 581: case STATE_ADJUST_OSCILLATOR_TUNE:
  2438                           
  2439                           
  2440                           ;main.c: 582: currentValueInfoPtr_ = &valueInfoOscillatorTune_ ;
  2441  02B4  30BB               	movlw	(low (_valueInfoOscillatorTune_| 0))& (0+255)
  2442  02B5  00DE               	movwf	??_main
  2443  02B6  085E               	movf	??_main,w
  2444  02B7  00D0               	movwf	_currentValueInfoPtr_
  2445                           
  2446                           ;main.c: 583: PR2 = 141 ;
  2447  02B8  308D               	movlw	141
  2448  02B9  009B               	movwf	27	;volatile
  2449                           
  2450                           ;main.c: 584: {CCPR4L=(PR2>>1);} ;
  2451  02BA  361B               	lsrf	27,w	;volatile
  2452  02BB  2AD8               	goto	L34
  2453  02BC                     l3588:	
  2454                           ;main.c: 588: case STATE_ADJUST_TONE:
  2455                           
  2456                           ;main.c: 586: break ;
  2457                           
  2458                           ;main.c: 585: T2CONbits.TMR2ON = 1 ;
  2459                           
  2460                           
  2461                           ;main.c: 589: valueInfoTone_.valuePtr = &configration_.tone[ menuInfoTone_.select - MENU
      +                          _ITEM_TONE_ADJUST_TONE0 ] ;
  2462  02BC  0841               	movf	_menuInfoTone_,w
  2463  02BD  3EFF               	addlw	255
  2464  02BE  3E2F               	addlw	(low ((_configration_| 0+7)))& (0+255)
  2465  02BF  00DE               	movwf	??_main
  2466  02C0  085E               	movf	??_main,w
  2467  02C1  0021               	movlb	1	; select bank1
  2468  02C2  00D0               	movwf	_valueInfoTone_^(0+128)
  2469                           
  2470                           ;main.c: 590: currentValueInfoPtr_ = &valueInfoTone_ ;
  2471  02C3  30D0               	movlw	(low (_valueInfoTone_| 0))& (0+255)
  2472  02C4  0020               	movlb	0	; select bank0
  2473  02C5  00DE               	movwf	??_main
  2474  02C6  085E               	movf	??_main,w
  2475  02C7  00D0               	movwf	_currentValueInfoPtr_
  2476                           
  2477                           ;main.c: 591: PR2 = *currentValueInfoPtr_->valuePtr ;
  2478  02C8  0850               	movf	_currentValueInfoPtr_,w
  2479  02C9  0086               	movwf	6
  2480  02CA  0187               	clrf	7
  2481  02CB  0801               	movf	1,w
  2482  02CC  0086               	movwf	6
  2483  02CD  0187               	clrf	7
  2484  02CE  0801               	movf	1,w
  2485  02CF  009B               	movwf	27	;volatile
  2486                           
  2487                           ;main.c: 592: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  2488  02D0  081B               	movf	27,w	;volatile
  2489  02D1  00DE               	movwf	??_main
  2490  02D2  0A32               	incf	_configration_+10,w
  2491  02D3  2AD5               	goto	u2884
  2492  02D4                     u2885:	
  2493  02D4  36DE               	lsrf	??_main,f
  2494  02D5                     u2884:	
  2495  02D5  0B89               	decfsz	9,f
  2496  02D6  2AD4               	goto	u2885
  2497  02D7  085E               	movf	??_main,w
  2498  02D8                     L34:	
  2499  02D8  0026               	movlb	6	; select bank6
  2500  02D9  0098               	movwf	24	;volatile
  2501                           
  2502                           ;main.c: 593: T2CONbits.TMR2ON = 1 ;
  2503  02DA  0020               	movlb	0	; select bank0
  2504  02DB  151C               	bsf	28,2	;volatile
  2505                           
  2506                           ;main.c: 594: break ;
  2507  02DC  2AFE               	goto	l335
  2508  02DD                     l3598:	
  2509                           ;main.c: 596: case STATE_INFORMATION:
  2510                           
  2511                           
  2512                           ;main.c: 597: menuInfoInformation_.select = 0 ;
  2513  02DD  01B5               	clrf	_menuInfoInformation_
  2514                           
  2515                           ;main.c: 598: menuInfoInformation_.cursorPosition = 0 ;
  2516  02DE  01B6               	clrf	_menuInfoInformation_+1
  2517                           
  2518                           ;main.c: 599: currentMenuInfoPtr_ = &menuInfoInformation_ ;
  2519  02DF  3035               	movlw	(low (_menuInfoInformation_| 0))& (0+255)
  2520  02E0                     L23:	
  2521  02E0  00DE               	movwf	??_main
  2522  02E1  085E               	movf	??_main,w
  2523  02E2  00CF               	movwf	_currentMenuInfoPtr_
  2524                           
  2525                           ;main.c: 600: break ;
  2526  02E3  2AFE               	goto	l335
  2527  02E4                     l355:	
  2528                           ;main.c: 602: case STATE_BOOT:
  2529                           
  2530                           
  2531                           ;main.c: 603: case STATE_INITIALIZE:
  2532                           ;main.c: 604: case STATE_LOAD:
  2533                           ;main.c: 605: case STATE_SAVE:
  2534                           ;main.c: 606: outputEvent_.accessEeprom=1 ;
  2535  02E4  17D4               	bsf	_outputEvent_,7
  2536                           
  2537                           ;main.c: 607: break ;
  2538  02E5  2AFE               	goto	l335
  2539  02E6                     l3602:	
  2540                           ;main.c: 609: case STATE_RESET:
  2541                           
  2542                           
  2543                           ;main.c: 610: ParallelLCD_ClearDisplay( ) ;
  2544  02E6  3187  27F6  3180   	fcall	_ParallelLCD_ClearDisplay
  2545  02E9  0001               	reset	;# 
  2546  02EA                     l3604:	
  2547                           ;main.c: 613: case STATE_ERROR:
  2548                           
  2549                           
  2550                           ;main.c: 614: currentSingleMessage_ = MESSAGE.ERROR.MESSAGE ;
  2551  02EA  301E               	movlw	low ((_MESSAGE+14)| (0+32768))
  2552  02EB  0084               	movwf	4
  2553  02EC  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  2554  02ED  0085               	movwf	5
  2555  02EE  3F00               	moviw [0]fsr0
  2556  02EF  0020               	movlb	0	; select bank0
  2557  02F0  00CA               	movwf	_currentSingleMessage_
  2558  02F1  3F01               	moviw [1]fsr0
  2559  02F2  00CB               	movwf	_currentSingleMessage_+1
  2560                           
  2561                           ;main.c: 617: }
  2562                           
  2563                           ;main.c: 615: break ;
  2564  02F3  2AFE               	goto	l335
  2565  02F4                     l3608:	
  2566  02F4  0853               	movf	_machineState_,w
  2567                           
  2568                           ; Switch size 1, requested type "space"
  2569                           ; Number of cases is 20, Range of values is 0 to 19
  2570                           ; switch strategies available:
  2571                           ; Name         Instructions Cycles
  2572                           ; direct_byte           46     6 (fixed)
  2573                           ; simple_byte           61    31 (average)
  2574                           ; jumptable            260     6 (fixed)
  2575                           ;	Chosen strategy is direct_byte
  2576  02F5  0084               	movwf	4
  2577  02F6  3014               	movlw	20
  2578  02F7  0204               	subwf	4,w
  2579  02F8  1803               	skipnc
  2580  02F9  2AFE               	goto	l335
  2581  02FA  3189               	movlp	high S4020
  2582  02FB  3504               	lslf	4,w
  2583  02FC  3E73               	addlw	low S4020
  2584  02FD  0082               	movwf	2
  2585  02FE                     l335:	
  2586                           
  2587                           ;main.c: 619: }
  2588                           ;main.c: 622: if( (outputEvent_.accessEeprom&&!(outputEvent_.accessEeprom=0)) ) {
  2589  02FE  1FD4               	btfss	_outputEvent_,7
  2590  02FF  2C62               	goto	l3724
  2591  0300  13D4               	bcf	_outputEvent_,7
  2592                           
  2593                           ;main.c: 624: INTCONbits.GIE=0 ;
  2594  0301  138B               	bcf	11,7	;volatile
  2595                           
  2596                           ;main.c: 626: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  2597  0302  0022               	movlb	2	; select bank2
  2598  0303  01EA               	clrf	main@returnCode^(0+256)
  2599                           
  2600                           ;main.c: 628: outputEvent_.resetMetronome=1 ;
  2601  0304  0020               	movlb	0	; select bank0
  2602  0305  1754               	bsf	_outputEvent_,6
  2603                           
  2604                           ;main.c: 629: outputEvent_.changeMessage=1 ;
  2605  0306  14D4               	bsf	_outputEvent_,1
  2606                           
  2607                           ;main.c: 630: stateReturnCounter_ = 0x40 ;
  2608  0307  3040               	movlw	64
  2609  0308  00DE               	movwf	??_main
  2610  0309  085E               	movf	??_main,w
  2611  030A  00D6               	movwf	_stateReturnCounter_
  2612                           
  2613                           ;main.c: 632: switch( machineState_ ) {
  2614  030B  2B50               	goto	l3638
  2615  030C                     l3620:	
  2616                           ;main.c: 634: case STATE_BOOT:
  2617                           
  2618                           
  2619                           ;main.c: 635: returnCode = Configuration_Load( &configration_ ) ;
  2620  030C  3028               	movlw	(low (_configration_| 0))& (0+255)
  2621  030D  318F  2704  3180   	fcall	_Configuration_Load
  2622  0310  0020               	movlb	0	; select bank0
  2623  0311  00DE               	movwf	??_main
  2624  0312  085E               	movf	??_main,w
  2625  0313  0022               	movlb	2	; select bank2
  2626  0314  00EA               	movwf	main@returnCode^(0+256)
  2627                           
  2628                           ;main.c: 636: stateReturnCounter_ = 1 ;
  2629  0315  0020               	movlb	0	; select bank0
  2630  0316  01D6               	clrf	_stateReturnCounter_
  2631  0317  0AD6               	incf	_stateReturnCounter_,f
  2632                           
  2633                           ;main.c: 637: break ;
  2634  0318  2B5E               	goto	l3640
  2635  0319                     l3624:	
  2636                           ;main.c: 639: case STATE_LOAD:
  2637                           
  2638                           
  2639                           ;main.c: 640: returnCode = Configuration_Load( &configration_ ) ;
  2640  0319  3028               	movlw	(low (_configration_| 0))& (0+255)
  2641  031A  318F  2704  3180   	fcall	_Configuration_Load
  2642  031D  0020               	movlb	0	; select bank0
  2643  031E  00DE               	movwf	??_main
  2644  031F  085E               	movf	??_main,w
  2645  0320  0022               	movlb	2	; select bank2
  2646  0321  00EA               	movwf	main@returnCode^(0+256)
  2647                           
  2648                           ;main.c: 641: currentSingleMessage_ = MESSAGE.MEMORY.LOAD ;
  2649  0322  3018               	movlw	low ((_MESSAGE+8)| (0+32768))
  2650  0323  0084               	movwf	4
  2651  0324  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  2652  0325  0085               	movwf	5
  2653  0326  3F00               	moviw [0]fsr0
  2654  0327  0020               	movlb	0	; select bank0
  2655  0328  00CA               	movwf	_currentSingleMessage_
  2656  0329  3F01               	moviw [1]fsr0
  2657  032A  2B4E               	goto	L28
  2658  032B                     l3628:	
  2659                           ;main.c: 644: case STATE_INITIALIZE:
  2660                           
  2661                           ;main.c: 642: break ;
  2662                           
  2663                           
  2664                           ;main.c: 645: returnCode = Configuration_Save( &configration_ ) ;
  2665  032B  3028               	movlw	(low (_configration_| 0))& (0+255)
  2666  032C  318F  275F  3180   	fcall	_Configuration_Save
  2667  032F  0020               	movlb	0	; select bank0
  2668  0330  00DE               	movwf	??_main
  2669  0331  085E               	movf	??_main,w
  2670  0332  0022               	movlb	2	; select bank2
  2671  0333  00EA               	movwf	main@returnCode^(0+256)
  2672                           
  2673                           ;main.c: 646: currentSingleMessage_ = MESSAGE.MEMORY.INITIALIZE ;
  2674  0334  301C               	movlw	low ((_MESSAGE+12)| (0+32768))
  2675  0335  0084               	movwf	4
  2676  0336  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  2677  0337  0085               	movwf	5
  2678  0338  3F00               	moviw [0]fsr0
  2679  0339  0020               	movlb	0	; select bank0
  2680  033A  00CA               	movwf	_currentSingleMessage_
  2681  033B  3F01               	moviw [1]fsr0
  2682  033C  2B4E               	goto	L28
  2683  033D                     l3632:	
  2684                           ;main.c: 649: case STATE_SAVE:
  2685                           
  2686                           ;main.c: 647: break ;
  2687                           
  2688                           
  2689                           ;main.c: 650: returnCode = Configuration_Save( &configration_ ) ;
  2690  033D  3028               	movlw	(low (_configration_| 0))& (0+255)
  2691  033E  318F  275F  3180   	fcall	_Configuration_Save
  2692  0341  0020               	movlb	0	; select bank0
  2693  0342  00DE               	movwf	??_main
  2694  0343  085E               	movf	??_main,w
  2695  0344  0022               	movlb	2	; select bank2
  2696  0345  00EA               	movwf	main@returnCode^(0+256)
  2697                           
  2698                           ;main.c: 651: currentSingleMessage_ = MESSAGE.MEMORY.SAVE ;
  2699  0346  301A               	movlw	low ((_MESSAGE+10)| (0+32768))
  2700  0347  0084               	movwf	4
  2701  0348  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  2702  0349  0085               	movwf	5
  2703  034A  3F00               	moviw [0]fsr0
  2704  034B  0020               	movlb	0	; select bank0
  2705  034C  00CA               	movwf	_currentSingleMessage_
  2706  034D  3F01               	moviw [1]fsr0
  2707  034E                     L28:	
  2708  034E  00CB               	movwf	_currentSingleMessage_+1
  2709                           
  2710                           ;main.c: 654: }
  2711                           
  2712                           ;main.c: 652: break ;
  2713  034F  2B5E               	goto	l3640
  2714  0350                     l3638:	
  2715  0350  0853               	movf	_machineState_,w
  2716                           
  2717                           ; Switch size 1, requested type "space"
  2718                           ; Number of cases is 4, Range of values is 0 to 17
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte           13     7 (average)
  2722                           ; direct_byte           42     6 (fixed)
  2723                           ; jumptable            260     6 (fixed)
  2724                           ;	Chosen strategy is simple_byte
  2725  0351  3A00               	xorlw	0	; case 0
  2726  0352  1903               	skipnz
  2727  0353  2B0C               	goto	l3620
  2728  0354  3A0D               	xorlw	13	; case 13
  2729  0355  1903               	skipnz
  2730  0356  2B3D               	goto	l3632
  2731  0357  3A02               	xorlw	2	; case 15
  2732  0358  1903               	skipnz
  2733  0359  2B19               	goto	l3624
  2734  035A  3A1E               	xorlw	30	; case 17
  2735  035B  1903               	skipnz
  2736  035C  2B2B               	goto	l3628
  2737  035D  2B5E               	goto	l3640
  2738  035E                     l3640:	
  2739                           
  2740                           ;main.c: 656: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ conf
      +                          igration_.romOffset >> 4 ] ;
  2741  035E  0829               	movf	_configration_+1,w
  2742  035F  00DE               	movwf	??_main
  2743  0360  3004               	movlw	4
  2744  0361                     u2905:	
  2745  0361  36DE               	lsrf	??_main,f
  2746  0362  0B89               	decfsz	9,f
  2747  0363  2B61               	goto	u2905
  2748  0364  085E               	movf	??_main,w
  2749  0365  3E00               	addlw	low (_HEX_TABLE| (0+32768))
  2750  0366  0084               	movwf	4
  2751  0367  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2752  0368  1803               	skipnc
  2753  0369  3E01               	addlw	1
  2754  036A  0085               	movwf	5
  2755  036B  0800               	movf	0,w	;code access
  2756  036C  00DF               	movwf	??_main+1
  2757  036D  085F               	movf	??_main+1,w
  2758  036E  0022               	movlb	2	; select bank2
  2759  036F  00AB               	movwf	(_informationValueBuffer^(0+256)+11)
  2760                           
  2761                           ;main.c: 657: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][5] = HEX_TABLE[ conf
      +                          igration_.romOffset & 0x0F ] ;
  2762  0370  0020               	movlb	0	; select bank0
  2763  0371  0829               	movf	_configration_+1,w
  2764  0372  390F               	andlw	15
  2765  0373  3E00               	addlw	low (_HEX_TABLE| (0+32768))
  2766  0374  0084               	movwf	4
  2767  0375  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2768  0376  1803               	skipnc
  2769  0377  3E01               	addlw	1
  2770  0378  0085               	movwf	5
  2771  0379  0800               	movf	0,w	;code access
  2772  037A  00DE               	movwf	??_main
  2773  037B  085E               	movf	??_main,w
  2774  037C  0022               	movlb	2	; select bank2
  2775  037D  00AC               	movwf	(_informationValueBuffer^(0+256)+12)
  2776                           
  2777                           ;main.c: 658: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          figration_.writeCount >> 4 ] ;
  2778  037E  0020               	movlb	0	; select bank0
  2779  037F  0828               	movf	_configration_,w
  2780  0380  00DE               	movwf	??_main
  2781  0381  3004               	movlw	4
  2782  0382                     u2915:	
  2783  0382  36DE               	lsrf	??_main,f
  2784  0383  0B89               	decfsz	9,f
  2785  0384  2B82               	goto	u2915
  2786  0385  085E               	movf	??_main,w
  2787  0386  3E00               	addlw	low (_HEX_TABLE| (0+32768))
  2788  0387  0084               	movwf	4
  2789  0388  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2790  0389  1803               	skipnc
  2791  038A  3E01               	addlw	1
  2792  038B  0085               	movwf	5
  2793  038C  0800               	movf	0,w	;code access
  2794  038D  00DF               	movwf	??_main+1
  2795  038E  085F               	movf	??_main+1,w
  2796  038F  0022               	movlb	2	; select bank2
  2797  0390  00B2               	movwf	(_informationValueBuffer^(0+256)+18)
  2798                           
  2799                           ;main.c: 659: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][5] = HEX_TABLE[ con
      +                          figration_.writeCount & 0x0F ] ;
  2800  0391  0020               	movlb	0	; select bank0
  2801  0392  0828               	movf	_configration_,w
  2802  0393  390F               	andlw	15
  2803  0394  3E00               	addlw	low (_HEX_TABLE| (0+32768))
  2804  0395  0084               	movwf	4
  2805  0396  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2806  0397  1803               	skipnc
  2807  0398  3E01               	addlw	1
  2808  0399  0085               	movwf	5
  2809  039A  0800               	movf	0,w	;code access
  2810  039B  00DE               	movwf	??_main
  2811  039C  085E               	movf	??_main,w
  2812  039D  0022               	movlb	2	; select bank2
  2813  039E  00B3               	movwf	(_informationValueBuffer^(0+256)+19)
  2814                           
  2815                           ;main.c: 660: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  2816  039F  086A               	movf	main@returnCode^(0+256),w
  2817  03A0  0020               	movlb	0	; select bank0
  2818  03A1  00DE               	movwf	??_main
  2819  03A2  3004               	movlw	4
  2820  03A3                     u2925:	
  2821  03A3  36DE               	lsrf	??_main,f
  2822  03A4  0B89               	decfsz	9,f
  2823  03A5  2BA3               	goto	u2925
  2824  03A6  085E               	movf	??_main,w
  2825  03A7  3E00               	addlw	low (_HEX_TABLE| (0+32768))
  2826  03A8  0084               	movwf	4
  2827  03A9  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2828  03AA  1803               	skipnc
  2829  03AB  3E01               	addlw	1
  2830  03AC  0085               	movwf	5
  2831  03AD  0800               	movf	0,w	;code access
  2832  03AE  00DF               	movwf	??_main+1
  2833  03AF  085F               	movf	??_main+1,w
  2834  03B0  0022               	movlb	2	; select bank2
  2835  03B1  00B9               	movwf	(_informationValueBuffer^(0+256)+25)
  2836                           
  2837                           ;main.c: 661: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][5] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  2838  03B2  086A               	movf	main@returnCode^(0+256),w
  2839  03B3  390F               	andlw	15
  2840  03B4  3E00               	addlw	low (_HEX_TABLE| (0+32768))
  2841  03B5  0084               	movwf	4
  2842  03B6  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2843  03B7  1803               	skipnc
  2844  03B8  3E01               	addlw	1
  2845  03B9  0085               	movwf	5
  2846  03BA  0800               	movf	0,w	;code access
  2847  03BB  0020               	movlb	0	; select bank0
  2848  03BC  00DE               	movwf	??_main
  2849  03BD  085E               	movf	??_main,w
  2850  03BE  0022               	movlb	2	; select bank2
  2851  03BF  00BA               	movwf	(_informationValueBuffer^(0+256)+26)
  2852                           
  2853                           ;main.c: 663: if( returnCode ) {
  2854  03C0  086A               	movf	main@returnCode^(0+256),w
  2855  03C1  1903               	btfsc	3,2
  2856  03C2  2BCA               	goto	l3658
  2857                           
  2858                           ;main.c: 664: machineState_ = STATE_ERROR ;
  2859  03C3  3013               	movlw	19
  2860  03C4  0020               	movlb	0	; select bank0
  2861  03C5  00DE               	movwf	??_main
  2862  03C6  085E               	movf	??_main,w
  2863  03C7  00D3               	movwf	_machineState_
  2864                           
  2865                           ;main.c: 665: outputEvent_.all = 0x00 ;
  2866  03C8  01D4               	clrf	_outputEvent_
  2867                           
  2868                           ;main.c: 666: outputEvent_.changeState=1 ;
  2869  03C9  1454               	bsf	_outputEvent_,0
  2870  03CA                     l3658:	
  2871                           
  2872                           ;main.c: 667: }
  2873                           ;main.c: 669: INTCONbits.GIE=1 ;
  2874  03CA  178B               	bsf	11,7	;volatile
  2875                           
  2876                           ;main.c: 671: }
  2877                           ;main.c: 674: switch( machineState_ ) {
  2878  03CB  2C62               	goto	l3724
  2879  03CC                     l373:	
  2880                           ;main.c: 676: case STATE_MENU_MAIN:
  2881                           
  2882                           
  2883                           ;main.c: 677: case STATE_MENU_TONE:
  2884                           ;main.c: 678: case STATE_MENU_DURATION:
  2885                           ;main.c: 679: case STATE_CONFIRM_LOAD:
  2886                           ;main.c: 680: case STATE_CONFIRM_SAVE:
  2887                           ;main.c: 681: case STATE_CONFIRM_RESET:
  2888                           ;main.c: 682: case STATE_INFORMATION:
  2889                           ;main.c: 683: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2890  03CC  0020               	movlb	0	; select bank0
  2891  03CD  1CD1               	btfss	_inputEvent_,1
  2892  03CE  2BF0               	goto	l3670
  2893  03CF  10D1               	bcf	_inputEvent_,1
  2894                           
  2895                           ;main.c: 684: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->limit ) {
  2896  03D0  084F               	movf	_currentMenuInfoPtr_,w
  2897  03D1  3E02               	addlw	2
  2898  03D2  0086               	movwf	6
  2899  03D3  0187               	clrf	7
  2900  03D4  084F               	movf	_currentMenuInfoPtr_,w
  2901  03D5  0084               	movwf	4
  2902  03D6  0185               	clrf	5
  2903  03D7  0800               	movf	0,w
  2904  03D8  0601               	xorwf	1,w
  2905  03D9  1903               	skipnz
  2906  03DA  2BF0               	goto	l3670
  2907                           
  2908                           ;main.c: 685: currentMenuInfoPtr_->select++ ;
  2909  03DB  3001               	movlw	1
  2910  03DC  00DE               	movwf	??_main
  2911  03DD  084F               	movf	_currentMenuInfoPtr_,w
  2912  03DE  0086               	movwf	6
  2913  03DF  0187               	clrf	7
  2914  03E0  085E               	movf	??_main,w
  2915  03E1  0781               	addwf	1,f
  2916                           
  2917                           ;main.c: 686: if( !currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosi
      +                          tion++ ;
  2918  03E2  0A4F               	incf	_currentMenuInfoPtr_,w
  2919  03E3  0086               	movwf	6
  2920  03E4  0187               	clrf	7
  2921  03E5  0801               	movf	1,w
  2922  03E6  1D03               	btfss	3,2
  2923  03E7  2BEF               	goto	l3668
  2924  03E8  3001               	movlw	1
  2925  03E9  00DE               	movwf	??_main
  2926  03EA  0A4F               	incf	_currentMenuInfoPtr_,w
  2927  03EB  0086               	movwf	6
  2928  03EC  0187               	clrf	7
  2929  03ED  085E               	movf	??_main,w
  2930  03EE  0781               	addwf	1,f
  2931  03EF                     l3668:	
  2932                           
  2933                           ;main.c: 687: outputEvent_.changeMessage=1 ;
  2934  03EF  14D4               	bsf	_outputEvent_,1
  2935  03F0                     l3670:	
  2936                           
  2937                           ;main.c: 688: }
  2938                           ;main.c: 689: }
  2939                           ;main.c: 690: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2940  03F0  1C51               	btfss	_inputEvent_,0
  2941  03F1  2C70               	goto	l380
  2942  03F2  1051               	bcf	_inputEvent_,0
  2943                           
  2944                           ;main.c: 691: if( currentMenuInfoPtr_->select ) {
  2945  03F3  084F               	movf	_currentMenuInfoPtr_,w
  2946  03F4  0086               	movwf	6
  2947  03F5  0187               	clrf	7
  2948  03F6  0801               	movf	1,w
  2949  03F7  1903               	btfsc	3,2
  2950  03F8  2C70               	goto	l380
  2951                           
  2952                           ;main.c: 692: currentMenuInfoPtr_->select-- ;
  2953  03F9  084F               	movf	_currentMenuInfoPtr_,w
  2954  03FA  0086               	movwf	6
  2955  03FB  0187               	clrf	7
  2956  03FC  3001               	movlw	1
  2957  03FD  0281               	subwf	1,f
  2958                           
  2959                           ;main.c: 693: if( currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosit
      +                          ion-- ;
  2960  03FE  0A4F               	incf	_currentMenuInfoPtr_,w
  2961  03FF  0086               	movwf	6
  2962  0400  0187               	clrf	7
  2963  0401  0801               	movf	1,w
  2964  0402  1903               	btfsc	3,2
  2965  0403  2C09               	goto	l3680
  2966  0404  0A4F               	incf	_currentMenuInfoPtr_,w
  2967  0405  0086               	movwf	6
  2968  0406  0187               	clrf	7
  2969  0407  3001               	movlw	1
  2970  0408  0281               	subwf	1,f
  2971  0409                     l3680:	
  2972                           
  2973                           ;main.c: 694: outputEvent_.changeMessage=1 ;
  2974  0409  14D4               	bsf	_outputEvent_,1
  2975                           
  2976                           ;main.c: 695: }
  2977                           ;main.c: 696: }
  2978                           ;main.c: 697: break ;
  2979  040A  2C70               	goto	l380
  2980  040B                     l381:	
  2981                           ;main.c: 699: case STATE_METRONOME:
  2982                           
  2983                           
  2984                           ;main.c: 700: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2985  040B  1C51               	btfss	_inputEvent_,0
  2986  040C  2C1B               	goto	l3692
  2987  040D  1051               	bcf	_inputEvent_,0
  2988                           
  2989                           ;main.c: 701: if( configration_.tempo < 999 ) {
  2990  040E  3003               	movlw	3
  2991  040F  022B               	subwf	_configration_+3,w
  2992  0410  30E7               	movlw	231
  2993  0411  1903               	skipnz
  2994  0412  022A               	subwf	_configration_+2,w
  2995  0413  1803               	skipnc
  2996  0414  2C1A               	goto	l3690
  2997                           
  2998                           ;main.c: 702: configration_.tempo++ ;
  2999  0415  3001               	movlw	1
  3000  0416  07AA               	addwf	_configration_+2,f
  3001  0417  3000               	movlw	0
  3002  0418  3DAB               	addwfc	_configration_+3,f
  3003                           
  3004                           ;main.c: 703: outputEvent_.changeValue=1 ;
  3005  0419  1554               	bsf	_outputEvent_,2
  3006  041A                     l3690:	
  3007                           
  3008                           ;main.c: 704: }
  3009                           ;main.c: 705: outputEvent_.resetMetronome=1 ;
  3010  041A  1754               	bsf	_outputEvent_,6
  3011  041B                     l3692:	
  3012                           
  3013                           ;main.c: 706: }
  3014                           ;main.c: 707: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  3015  041B  1CD1               	btfss	_inputEvent_,1
  3016  041C  2C70               	goto	l380
  3017  041D  10D1               	bcf	_inputEvent_,1
  3018                           
  3019                           ;main.c: 708: if( configration_.tempo > 1 ) {
  3020  041E  3000               	movlw	0
  3021  041F  022B               	subwf	_configration_+3,w
  3022  0420  3002               	movlw	2
  3023  0421  1903               	skipnz
  3024  0422  022A               	subwf	_configration_+2,w
  3025  0423  1C03               	skipc
  3026  0424  2C2A               	goto	l3702
  3027                           
  3028                           ;main.c: 709: configration_.tempo-- ;
  3029  0425  3001               	movlw	1
  3030  0426  02AA               	subwf	_configration_+2,f
  3031  0427  3000               	movlw	0
  3032  0428  3BAB               	subwfb	_configration_+3,f
  3033                           
  3034                           ;main.c: 710: outputEvent_.changeValue=1 ;
  3035  0429  1554               	bsf	_outputEvent_,2
  3036  042A                     l3702:	
  3037                           
  3038                           ;main.c: 711: }
  3039                           ;main.c: 712: outputEvent_.resetMetronome=1 ;
  3040  042A  1754               	bsf	_outputEvent_,6
  3041                           
  3042                           ;main.c: 713: }
  3043                           ;main.c: 714: break ;
  3044  042B  2C70               	goto	l380
  3045  042C                     l391:	
  3046                           ;main.c: 716: case STATE_ADJUST_BEAT_COUNT:
  3047                           
  3048                           
  3049                           ;main.c: 717: case STATE_ADJUST_PULSE_WIDTH:
  3050                           ;main.c: 718: case STATE_ADJUST_DURATION_CLICK:
  3051                           ;main.c: 719: case STATE_ADJUST_DURATION_KEY:
  3052                           ;main.c: 720: case STATE_ADJUST_TONE:
  3053                           ;main.c: 721: case STATE_ADJUST_OSCILLATOR_TUNE:
  3054                           ;main.c: 722: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  3055  042C  1C51               	btfss	_inputEvent_,0
  3056  042D  2C47               	goto	l3712
  3057  042E  1051               	bcf	_inputEvent_,0
  3058                           
  3059                           ;main.c: 723: if( *currentValueInfoPtr_->valuePtr != currentValueInfoPtr_->limit.upper )
      +                           {
  3060  042F  0850               	movf	_currentValueInfoPtr_,w
  3061  0430  0086               	movwf	6
  3062  0431  0187               	clrf	7
  3063  0432  0801               	movf	1,w
  3064  0433  0086               	movwf	6
  3065  0434  0187               	clrf	7
  3066  0435  0A50               	incf	_currentValueInfoPtr_,w
  3067  0436  0084               	movwf	4
  3068  0437  0185               	clrf	5
  3069  0438  0800               	movf	0,w
  3070  0439  0601               	xorwf	1,w
  3071  043A  1903               	skipnz
  3072  043B  2C47               	goto	l3712
  3073                           
  3074                           ;main.c: 724: ( *currentValueInfoPtr_->valuePtr )++ ;
  3075  043C  3001               	movlw	1
  3076  043D  00DE               	movwf	??_main
  3077  043E  0850               	movf	_currentValueInfoPtr_,w
  3078  043F  0086               	movwf	6
  3079  0440  0187               	clrf	7
  3080  0441  0801               	movf	1,w
  3081  0442  0086               	movwf	6
  3082  0443  0187               	clrf	7
  3083  0444  085E               	movf	??_main,w
  3084  0445  0781               	addwf	1,f
  3085                           
  3086                           ;main.c: 725: outputEvent_.changeValue=1 ;
  3087  0446  1554               	bsf	_outputEvent_,2
  3088  0447                     l3712:	
  3089                           
  3090                           ;main.c: 726: }
  3091                           ;main.c: 727: }
  3092                           ;main.c: 728: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  3093  0447  1CD1               	btfss	_inputEvent_,1
  3094  0448  2C70               	goto	l380
  3095  0449  10D1               	bcf	_inputEvent_,1
  3096                           
  3097                           ;main.c: 729: if( *currentValueInfoPtr_->valuePtr != currentValueInfoPtr_->limit.lower )
      +                           {
  3098  044A  0850               	movf	_currentValueInfoPtr_,w
  3099  044B  0086               	movwf	6
  3100  044C  0187               	clrf	7
  3101  044D  0801               	movf	1,w
  3102  044E  0086               	movwf	6
  3103  044F  0187               	clrf	7
  3104  0450  0850               	movf	_currentValueInfoPtr_,w
  3105  0451  3E02               	addlw	2
  3106  0452  0084               	movwf	4
  3107  0453  0185               	clrf	5
  3108  0454  0800               	movf	0,w
  3109  0455  0601               	xorwf	1,w
  3110  0456  1903               	skipnz
  3111  0457  2C70               	goto	l380
  3112                           
  3113                           ;main.c: 730: ( *currentValueInfoPtr_->valuePtr )-- ;
  3114  0458  0850               	movf	_currentValueInfoPtr_,w
  3115  0459  0086               	movwf	6
  3116  045A  0187               	clrf	7
  3117  045B  0801               	movf	1,w
  3118  045C  0086               	movwf	6
  3119  045D  0187               	clrf	7
  3120  045E  3001               	movlw	1
  3121  045F  0281               	subwf	1,f
  3122                           
  3123                           ;main.c: 731: outputEvent_.changeValue=1 ;
  3124  0460  1554               	bsf	_outputEvent_,2
  3125                           
  3126                           ;main.c: 736: }
  3127                           
  3128                           ;main.c: 732: }
  3129                           ;main.c: 733: }
  3130                           ;main.c: 734: break ;
  3131  0461  2C70               	goto	l380
  3132  0462                     l3724:	
  3133  0462  0020               	movlb	0	; select bank0
  3134  0463  0853               	movf	_machineState_,w
  3135                           
  3136                           ; Switch size 1, requested type "space"
  3137                           ; Number of cases is 14, Range of values is 1 to 16
  3138                           ; switch strategies available:
  3139                           ; Name         Instructions Cycles
  3140                           ; direct_byte           41     9 (fixed)
  3141                           ; simple_byte           43    22 (average)
  3142                           ; jumptable            263     9 (fixed)
  3143                           ;	Chosen strategy is direct_byte
  3144  0464  3EFF               	addlw	-1
  3145  0465  1C03               	skipc
  3146  0466  2C70               	goto	l380
  3147  0467  0084               	movwf	4
  3148  0468  3010               	movlw	16
  3149  0469  0204               	subwf	4,w
  3150  046A  1803               	skipnc
  3151  046B  2C70               	goto	l380
  3152  046C  318A               	movlp	high S4022
  3153  046D  3504               	lslf	4,w
  3154  046E  3E00               	addlw	low S4022
  3155  046F  0082               	movwf	2
  3156  0470                     l380:	
  3157                           
  3158                           ;main.c: 739: if( (outputEvent_.resetMetronome&&!(outputEvent_.resetMetronome=0)) ) {
  3159  0470  1F54               	btfss	_outputEvent_,6
  3160  0471  2C7E               	goto	l3736
  3161  0472  1354               	bcf	_outputEvent_,6
  3162                           
  3163                           ;main.c: 740: INTCONbits.GIE=0 ;
  3164  0473  138B               	bcf	11,7	;volatile
  3165                           
  3166                           ;main.c: 741: tempoCounter_ = 0 ;
  3167  0474  3000               	movlw	0
  3168  0475  00C7               	movwf	_tempoCounter_
  3169  0476  3000               	movlw	0
  3170  0477  00C8               	movwf	_tempoCounter_+1
  3171  0478  3000               	movlw	0
  3172  0479  00C9               	movwf	_tempoCounter_+2
  3173                           
  3174                           ;main.c: 742: beatCounter_ = 0 ;
  3175  047A  01CE               	clrf	_beatCounter_
  3176                           
  3177                           ;main.c: 743: outputEvent_.soundOnClick=1 ;
  3178  047B  15D4               	bsf	_outputEvent_,3
  3179                           
  3180                           ;main.c: 744: INTCONbits.GIE=1 ;
  3181  047C  178B               	bsf	11,7	;volatile
  3182                           
  3183                           ;main.c: 745: }
  3184  047D  2CE2               	goto	l3780
  3185  047E                     l3736:	
  3186                           
  3187                           ;main.c: 746: else {
  3188                           ;main.c: 747: if( tempoCounter_ >= ( 32000000UL * 3 / 25 ) ) {
  3189  047E  303A               	movlw	58
  3190  047F  0249               	subwf	_tempoCounter_+2,w
  3191  0480  1D03               	skipz
  3192  0481  2C88               	goto	u3095
  3193  0482  3098               	movlw	152
  3194  0483  0248               	subwf	_tempoCounter_+1,w
  3195  0484  1D03               	skipz
  3196  0485  2C88               	goto	u3095
  3197  0486  3000               	movlw	0
  3198  0487  0247               	subwf	_tempoCounter_,w
  3199  0488                     u3095:	
  3200  0488  1C03               	skipc
  3201  0489  2CE2               	goto	l3780
  3202                           
  3203                           ;main.c: 748: tempoCounter_ -= ( 32000000UL * 3 / 25 ) ;
  3204  048A  3000               	movlw	0
  3205  048B  00DE               	movwf	??_main
  3206  048C  3098               	movlw	152
  3207  048D  00DF               	movwf	??_main+1
  3208  048E  303A               	movlw	58
  3209  048F  00E0               	movwf	??_main+2
  3210  0490  085E               	movf	??_main,w
  3211  0491  02C7               	subwf	_tempoCounter_,f
  3212  0492  085F               	movf	??_main+1,w
  3213  0493  3BC8               	subwfb	_tempoCounter_+1,f
  3214  0494  0860               	movf	??_main+2,w
  3215  0495  3BC9               	subwfb	_tempoCounter_+2,f
  3216                           
  3217                           ;main.c: 749: if( ++beatCounter_ >= ( configration_.beatCount << 1 ) )
  3218  0496  082C               	movf	_configration_+4,w
  3219  0497  00DE               	movwf	??_main
  3220  0498  01DF               	clrf	??_main+1
  3221  0499  35DE               	lslf	??_main,f
  3222  049A  0DDF               	rlf	??_main+1,f
  3223  049B  3001               	movlw	1
  3224  049C  00E0               	movwf	??_main+2
  3225  049D  0860               	movf	??_main+2,w
  3226  049E  07CE               	addwf	_beatCounter_,f
  3227  049F  085F               	movf	??_main+1,w
  3228  04A0  3A80               	xorlw	128
  3229  04A1  3C80               	sublw	128
  3230  04A2  1D03               	skipz
  3231  04A3  2CA6               	goto	u3105
  3232  04A4  085E               	movf	??_main,w
  3233  04A5  024E               	subwf	_beatCounter_,w
  3234  04A6                     u3105:	
  3235  04A6  1C03               	skipc
  3236  04A7  2CAA               	goto	l3744
  3237                           
  3238                           ;main.c: 750: beatCounter_ = 0 ;
  3239  04A8  0020               	movlb	0	; select bank0
  3240  04A9  01CE               	clrf	_beatCounter_
  3241  04AA                     l3744:	
  3242                           
  3243                           ;main.c: 752: outputEvent_.soundOnClick=1 ;
  3244  04AA  0020               	movlb	0	; select bank0
  3245  04AB  15D4               	bsf	_outputEvent_,3
  3246                           
  3247                           ;main.c: 753: }
  3248                           ;main.c: 754: }
  3249                           ;main.c: 757: switch( machineState_ ) {
  3250  04AC  2CE2               	goto	l3780
  3251  04AD                     l409:	
  3252                           ;main.c: 772: default:
  3253                           
  3254                           ;main.c: 770: break ;
  3255                           
  3256                           ;main.c: 769: case STATE_ADJUST_OSCILLATOR_TUNE:
  3257                           
  3258                           ;main.c: 768: break ;
  3259                           
  3260                           ;main.c: 767: case STATE_ADJUST_TONE:
  3261                           
  3262                           ;main.c: 760: case STATE_INITIALIZE:
  3263                           ;main.c: 761: case STATE_LOAD:
  3264                           ;main.c: 762: case STATE_SAVE:
  3265                           ;main.c: 763: case STATE_ERROR:
  3266                           ;main.c: 765: break ;
  3267                           
  3268                           ;main.c: 759: case STATE_BOOT:
  3269                           
  3270                           
  3271                           ;main.c: 773: if( (outputEvent_.soundOnKey&&!(outputEvent_.soundOnKey=0)) ) {
  3272  04AD  1E54               	btfss	_outputEvent_,4
  3273  04AE  2CBB               	goto	l3754
  3274  04AF  1254               	bcf	_outputEvent_,4
  3275                           
  3276                           ;main.c: 774: soundDurationCount_.key = configration_.duration.key ;
  3277  04B0  082E               	movf	_configration_+6,w
  3278  04B1  00DE               	movwf	??_main
  3279  04B2  085E               	movf	??_main,w
  3280  04B3  00CD               	movwf	_soundDurationCount_+1
  3281                           
  3282                           ;main.c: 775: PR2 = 124 ;
  3283  04B4  307C               	movlw	124
  3284  04B5  009B               	movwf	27	;volatile
  3285                           
  3286                           ;main.c: 776: {CCPR4L=(PR2>>1);} ;
  3287  04B6  361B               	lsrf	27,w	;volatile
  3288  04B7  0026               	movlb	6	; select bank6
  3289  04B8  0098               	movwf	24	;volatile
  3290                           
  3291                           ;main.c: 777: T2CONbits.TMR2ON = 1 ;
  3292  04B9  0020               	movlb	0	; select bank0
  3293  04BA  151C               	bsf	28,2	;volatile
  3294  04BB                     l3754:	
  3295                           
  3296                           ;main.c: 778: }
  3297                           ;main.c: 779: if( (outputEvent_.soundOnClick&&!(outputEvent_.soundOnClick=0)) && !isMute
      +                          _ && !soundDurationCount_.key ) {
  3298  04BB  1DD4               	btfss	_outputEvent_,3
  3299  04BC  2D00               	goto	l3786
  3300  04BD  11D4               	bcf	_outputEvent_,3
  3301  04BE  0852               	movf	_isMute_,w
  3302  04BF  1D03               	btfss	3,2
  3303  04C0  2D00               	goto	l3786
  3304  04C1  084D               	movf	_soundDurationCount_+1,w
  3305  04C2  1D03               	btfss	3,2
  3306  04C3  2D00               	goto	l3786
  3307                           
  3308                           ;main.c: 781: soundDurationCount_.click = configration_.duration.click ;
  3309  04C4  082D               	movf	_configration_+5,w
  3310  04C5  00DE               	movwf	??_main
  3311  04C6  085E               	movf	??_main,w
  3312  04C7  00CC               	movwf	_soundDurationCount_
  3313                           
  3314                           ;main.c: 783: if( beatCounter_ == 0 )
  3315  04C8  084E               	movf	_beatCounter_,w
  3316  04C9  1D03               	btfss	3,2
  3317  04CA  2CCD               	goto	l3768
  3318                           
  3319                           ;main.c: 784: PR2 = configration_.tone[ 1 ] ;
  3320  04CB  0830               	movf	_configration_+8,w
  3321  04CC  2CD4               	goto	L30
  3322  04CD                     l3768:	
  3323                           
  3324                           ;main.c: 785: else if( beatCounter_ == configration_.beatCount )
  3325  04CD  082C               	movf	_configration_+4,w
  3326  04CE  064E               	xorwf	_beatCounter_,w
  3327  04CF  1D03               	skipz
  3328  04D0  2CD3               	goto	l3772
  3329                           
  3330                           ;main.c: 786: PR2 = configration_.tone[ 2 ] ;
  3331  04D1  0831               	movf	_configration_+9,w
  3332  04D2  2CD4               	goto	L30
  3333  04D3                     l3772:	
  3334                           
  3335                           ;main.c: 787: else
  3336                           ;main.c: 788: PR2 = configration_.tone[ 0 ] ;
  3337  04D3  082F               	movf	_configration_+7,w
  3338  04D4                     L30:	
  3339  04D4  009B               	movwf	27	;volatile
  3340                           
  3341                           ;main.c: 790: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  3342  04D5  081B               	movf	27,w	;volatile
  3343  04D6  00DE               	movwf	??_main
  3344  04D7  0A32               	incf	_configration_+10,w
  3345  04D8  2CDA               	goto	u3174
  3346  04D9                     u3175:	
  3347  04D9  36DE               	lsrf	??_main,f
  3348  04DA                     u3174:	
  3349  04DA  0B89               	decfsz	9,f
  3350  04DB  2CD9               	goto	u3175
  3351  04DC  085E               	movf	??_main,w
  3352  04DD  0026               	movlb	6	; select bank6
  3353  04DE  0098               	movwf	24	;volatile
  3354                           
  3355                           ;main.c: 791: T2CONbits.TMR2ON = 1 ;
  3356  04DF  0020               	movlb	0	; select bank0
  3357  04E0  151C               	bsf	28,2	;volatile
  3358                           
  3359                           ;main.c: 795: }
  3360                           
  3361                           ;main.c: 792: }
  3362                           ;main.c: 793: break ;
  3363  04E1  2D00               	goto	l3786
  3364  04E2                     l3780:	
  3365  04E2  0853               	movf	_machineState_,w
  3366                           
  3367                           ; Switch size 1, requested type "space"
  3368                           ; Number of cases is 7, Range of values is 0 to 19
  3369                           ; switch strategies available:
  3370                           ; Name         Instructions Cycles
  3371                           ; simple_byte           22    12 (average)
  3372                           ; direct_byte           46     6 (fixed)
  3373                           ; jumptable            260     6 (fixed)
  3374                           ;	Chosen strategy is simple_byte
  3375  04E3  3A00               	xorlw	0	; case 0
  3376  04E4  1903               	skipnz
  3377  04E5  2D00               	goto	l3786
  3378  04E6  3A09               	xorlw	9	; case 9
  3379  04E7  1903               	skipnz
  3380  04E8  2D00               	goto	l3786
  3381  04E9  3A03               	xorlw	3	; case 10
  3382  04EA  1903               	skipnz
  3383  04EB  2D00               	goto	l3786
  3384  04EC  3A07               	xorlw	7	; case 13
  3385  04ED  1903               	skipnz
  3386  04EE  2D00               	goto	l3786
  3387  04EF  3A02               	xorlw	2	; case 15
  3388  04F0  1903               	skipnz
  3389  04F1  2D00               	goto	l3786
  3390  04F2  3A1E               	xorlw	30	; case 17
  3391  04F3  1903               	skipnz
  3392  04F4  2D00               	goto	l3786
  3393  04F5  3A02               	xorlw	2	; case 19
  3394  04F6  1903               	skipnz
  3395  04F7  2D00               	goto	l3786
  3396  04F8  2CAD               	goto	l409
  3397                           
  3398                           ;main.c: 798: switch( machineState_ ) {
  3399  04F9  2D00               	goto	l3786
  3400  04FA                     l421:	
  3401                           ;main.c: 800: case STATE_BOOT:
  3402                           
  3403  04FA  2CFE               	goto	L31
  3404  04FB                     l425:	
  3405                           ;main.c: 813: default:
  3406                           
  3407                           ;main.c: 809: case STATE_ADJUST_OSCILLATOR_TUNE:
  3408                           ;main.c: 811: break ;
  3409                           
  3410                           ;main.c: 808: case STATE_ADJUST_TONE:
  3411                           
  3412                           ;main.c: 806: break ;
  3413                           
  3414                           ;main.c: 801: case STATE_INITIALIZE:
  3415                           ;main.c: 802: case STATE_LOAD:
  3416                           ;main.c: 803: case STATE_SAVE:
  3417                           ;main.c: 804: case STATE_ERROR:
  3418                           ;main.c: 805: T2CONbits.TMR2ON = 0 ;
  3419                           
  3420                           
  3421                           ;main.c: 814: if( (outputEvent_.soundOff&&!(outputEvent_.soundOff=0)) )
  3422  04FB  1ED4               	btfss	_outputEvent_,5
  3423  04FC  2D17               	goto	l422
  3424  04FD  12D4               	bcf	_outputEvent_,5
  3425  04FE                     L31:	
  3426                           
  3427                           ;main.c: 815: T2CONbits.TMR2ON = 0 ;
  3428  04FE  111C               	bcf	28,2	;volatile
  3429                           
  3430                           ;main.c: 818: }
  3431                           
  3432                           ;main.c: 817: break ;
  3433  04FF  2D17               	goto	l422
  3434  0500                     l3786:	
  3435  0500  0853               	movf	_machineState_,w
  3436                           
  3437                           ; Switch size 1, requested type "space"
  3438                           ; Number of cases is 7, Range of values is 0 to 19
  3439                           ; switch strategies available:
  3440                           ; Name         Instructions Cycles
  3441                           ; simple_byte           22    12 (average)
  3442                           ; direct_byte           46     6 (fixed)
  3443                           ; jumptable            260     6 (fixed)
  3444                           ;	Chosen strategy is simple_byte
  3445  0501  3A00               	xorlw	0	; case 0
  3446  0502  1903               	skipnz
  3447  0503  2CFA               	goto	l421
  3448  0504  3A09               	xorlw	9	; case 9
  3449  0505  1903               	skipnz
  3450  0506  2D17               	goto	l422
  3451  0507  3A03               	xorlw	3	; case 10
  3452  0508  1903               	skipnz
  3453  0509  2D17               	goto	l422
  3454  050A  3A07               	xorlw	7	; case 13
  3455  050B  1903               	skipnz
  3456  050C  2CFA               	goto	l421
  3457  050D  3A02               	xorlw	2	; case 15
  3458  050E  1903               	skipnz
  3459  050F  2CFA               	goto	l421
  3460  0510  3A1E               	xorlw	30	; case 17
  3461  0511  1903               	skipnz
  3462  0512  2CFA               	goto	l421
  3463  0513  3A02               	xorlw	2	; case 19
  3464  0514  1903               	skipnz
  3465  0515  2CFA               	goto	l421
  3466  0516  2CFB               	goto	l425
  3467  0517                     l422:	
  3468                           
  3469                           ;main.c: 821: if( (outputEvent_.changeMessage&&!(outputEvent_.changeMessage=0)) ) {
  3470  0517  1CD4               	btfss	_outputEvent_,1
  3471  0518  2E8A               	goto	l427
  3472  0519  10D4               	bcf	_outputEvent_,1
  3473                           
  3474                           ;main.c: 823: switch( machineState_ ) {
  3475  051A  2E7C               	goto	l3834
  3476  051B                     l3790:	
  3477                           ;main.c: 825: case STATE_MENU_MAIN:
  3478                           
  3479                           
  3480                           ;main.c: 826: case STATE_MENU_TONE:
  3481                           ;main.c: 827: case STATE_MENU_DURATION:
  3482                           ;main.c: 828: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x1 , current
      +                          MenuInfoPtr_->menuMessage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosi
      +                          tion ] ) ;
  3483  051B  084F               	movf	_currentMenuInfoPtr_,w
  3484  051C  3E03               	addlw	3
  3485  051D  0086               	movwf	6
  3486  051E  0187               	clrf	7
  3487  051F  084F               	movf	_currentMenuInfoPtr_,w
  3488  0520  0084               	movwf	4
  3489  0521  0185               	clrf	5
  3490  0522  0800               	movf	0,w
  3491  0523  00DE               	movwf	??_main
  3492  0524  0A4F               	incf	_currentMenuInfoPtr_,w
  3493  0525  0084               	movwf	4
  3494  0526  0185               	clrf	5
  3495  0527  0300               	decf	0,w
  3496  0528  3AFF               	xorlw	255
  3497  0529  075E               	addwf	??_main,w
  3498  052A  0709               	addwf	9,w
  3499  052B  0701               	addwf	1,w
  3500  052C  00DF               	movwf	??_main+1
  3501  052D  085F               	movf	??_main+1,w
  3502  052E  0086               	movwf	6
  3503  052F  3001               	movlw	1	; select bank2/3
  3504  0530  0087               	movwf	7
  3505  0531  3F40               	moviw [0]fsr1
  3506  0532  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3507  0533  3F41               	moviw [1]fsr1
  3508  0534  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3509  0535  3081               	movlw	129
  3510  0536  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3511                           
  3512                           ;main.c: 829: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x1 , current
      +                          MenuInfoPtr_->menuMessage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosi
      +                          tion + 1 ] ) ;
  3513  0539  0020               	movlb	0	; select bank0
  3514  053A  084F               	movf	_currentMenuInfoPtr_,w
  3515  053B  3E03               	addlw	3
  3516  053C  0086               	movwf	6
  3517  053D  0187               	clrf	7
  3518  053E  084F               	movf	_currentMenuInfoPtr_,w
  3519  053F  0084               	movwf	4
  3520  0540  0185               	clrf	5
  3521  0541  0800               	movf	0,w
  3522  0542  00DE               	movwf	??_main
  3523  0543  0A4F               	incf	_currentMenuInfoPtr_,w
  3524  0544  0084               	movwf	4
  3525  0545  0185               	clrf	5
  3526  0546  0300               	decf	0,w
  3527  0547  3AFF               	xorlw	255
  3528  0548  075E               	addwf	??_main,w
  3529  0549  0709               	addwf	9,w
  3530  054A  3E02               	addlw	2
  3531  054B  0701               	addwf	1,w
  3532  054C  00DF               	movwf	??_main+1
  3533  054D  085F               	movf	??_main+1,w
  3534  054E  0086               	movwf	6
  3535  054F  3001               	movlw	1	; select bank2/3
  3536  0550  0087               	movwf	7
  3537  0551  3F40               	moviw [0]fsr1
  3538  0552  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3539  0553  3F41               	moviw [1]fsr1
  3540  0554  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3541  0555  30C1               	movlw	193
  3542  0556  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3543                           
  3544                           ;main.c: 831: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->cursorPosition )
  3545  0559  0020               	movlb	0	; select bank0
  3546  055A  0A4F               	incf	_currentMenuInfoPtr_,w
  3547  055B  0086               	movwf	6
  3548  055C  0187               	clrf	7
  3549  055D  084F               	movf	_currentMenuInfoPtr_,w
  3550  055E  0084               	movwf	4
  3551  055F  0185               	clrf	5
  3552  0560  0800               	movf	0,w
  3553  0561  0601               	xorwf	1,w
  3554  0562  1903               	skipnz
  3555  0563  2D70               	goto	l3796
  3556                           
  3557                           ;main.c: 832: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_0 | 0xF , CHAR_CODE.CU
      +                          RSOR_UP ) ;
  3558  0564  3021               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3559  0565  0084               	movwf	4
  3560  0566  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3561  0567  0085               	movwf	5
  3562  0568  0800               	movf	0,w	;code access
  3563  0569  00DE               	movwf	??_main
  3564  056A  085E               	movf	??_main,w
  3565  056B  00D8               	movwf	ParallelLCD_WriteCharacter@character
  3566  056C  308F               	movlw	143
  3567  056D  318A  22A6  3180   	fcall	_ParallelLCD_WriteCharacter
  3568  0570                     l3796:	
  3569                           
  3570                           ;main.c: 833: if( currentMenuInfoPtr_->select != ( currentMenuInfoPtr_->limit + currentM
      +                          enuInfoPtr_->cursorPosition - 1 ) )
  3571  0570  0020               	movlb	0	; select bank0
  3572  0571  0A4F               	incf	_currentMenuInfoPtr_,w
  3573  0572  0086               	movwf	6
  3574  0573  0187               	clrf	7
  3575  0574  084F               	movf	_currentMenuInfoPtr_,w
  3576  0575  3E02               	addlw	2
  3577  0576  0084               	movwf	4
  3578  0577  0185               	clrf	5
  3579  0578  0800               	movf	0,w
  3580  0579  0701               	addwf	1,w
  3581  057A  00DE               	movwf	??_main
  3582  057B  01DF               	clrf	??_main+1
  3583  057C  0DDF               	rlf	??_main+1,f
  3584  057D  085E               	movf	??_main,w
  3585  057E  3EFF               	addlw	255
  3586  057F  00E0               	movwf	??_main+2
  3587  0580  30FF               	movlw	255
  3588  0581  3D5F               	addwfc	??_main+1,w
  3589  0582  00E1               	movwf	??_main+3
  3590  0583  084F               	movf	_currentMenuInfoPtr_,w
  3591  0584  0086               	movwf	6
  3592  0585  0187               	clrf	7
  3593  0586  0801               	movf	1,w
  3594  0587  0660               	xorwf	??_main+2,w
  3595  0588  0461               	iorwf	??_main+3,w
  3596  0589  1903               	skipnz
  3597  058A  2D97               	goto	l3800
  3598                           
  3599                           ;main.c: 834: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_1 | 0xF , CHAR_CODE.CU
      +                          RSOR_DOWN ) ;
  3600  058B  3022               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3601  058C  0084               	movwf	4
  3602  058D  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3603  058E  0085               	movwf	5
  3604  058F  0800               	movf	0,w	;code access
  3605  0590  00DE               	movwf	??_main
  3606  0591  085E               	movf	??_main,w
  3607  0592  00D8               	movwf	ParallelLCD_WriteCharacter@character
  3608  0593  30CF               	movlw	207
  3609  0594  318A  22A6  3180   	fcall	_ParallelLCD_WriteCharacter
  3610  0597                     l3800:	
  3611                           
  3612                           ;main.c: 836: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuInfoPtr_->c
      +                          ursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3613  0597  3020               	movlw	low (_CHAR_CODE| (0+32768))
  3614  0598  0084               	movwf	4
  3615  0599  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3616  059A  0085               	movwf	5
  3617  059B  0800               	movf	0,w	;code access
  3618  059C  0020               	movlb	0	; select bank0
  3619  059D  00DE               	movwf	??_main
  3620  059E  085E               	movf	??_main,w
  3621  059F  00D8               	movwf	ParallelLCD_WriteCharacter@character
  3622  05A0  0A4F               	incf	_currentMenuInfoPtr_,w
  3623  05A1  0086               	movwf	6
  3624  05A2  0187               	clrf	7
  3625  05A3  0801               	movf	1,w
  3626  05A4  3E26               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3627  05A5  0084               	movwf	4
  3628  05A6  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3629  05A7  1803               	skipnc
  3630  05A8  3E01               	addlw	1
  3631  05A9  0085               	movwf	5
  3632  05AA  0800               	movf	0,w	;code access
  3633  05AB  318A  22A6  3180   	fcall	_ParallelLCD_WriteCharacter
  3634                           
  3635                           ;main.c: 838: break ;
  3636  05AE  2E8A               	goto	l427
  3637  05AF                     l3802:	
  3638                           ;main.c: 840: case STATE_METRONOME:
  3639                           
  3640                           
  3641                           ;main.c: 841: case STATE_ADJUST_BEAT_COUNT:
  3642                           ;main.c: 842: case STATE_ADJUST_TONE:
  3643                           ;main.c: 843: case STATE_ADJUST_DURATION_CLICK:
  3644                           ;main.c: 844: case STATE_ADJUST_DURATION_KEY:
  3645                           ;main.c: 845: case STATE_ADJUST_PULSE_WIDTH:
  3646                           ;main.c: 846: case STATE_ADJUST_OSCILLATOR_TUNE:
  3647                           ;main.c: 847: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , current
      +                          ValueInfoPtr_->message.title ) ;
  3648  05AF  0020               	movlb	0	; select bank0
  3649  05B0  0850               	movf	_currentValueInfoPtr_,w
  3650  05B1  3E03               	addlw	3
  3651  05B2  0086               	movwf	6
  3652  05B3  0187               	clrf	7
  3653  05B4  3F40               	moviw [0]fsr1
  3654  05B5  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3655  05B6  3F41               	moviw [1]fsr1
  3656  05B7  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3657  05B8  3080               	movlw	128
  3658  05B9  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3659                           
  3660                           ;main.c: 848: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , current
      +                          ValueInfoPtr_->message.value ) ;
  3661  05BC  0020               	movlb	0	; select bank0
  3662  05BD  0850               	movf	_currentValueInfoPtr_,w
  3663  05BE  3E05               	addlw	5
  3664  05BF  0086               	movwf	6
  3665  05C0  0187               	clrf	7
  3666  05C1  3F40               	moviw [0]fsr1
  3667  05C2  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3668  05C3  3F41               	moviw [1]fsr1
  3669  05C4  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3670  05C5  30C0               	movlw	192
  3671  05C6  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3672                           
  3673                           ;main.c: 849: if( machineState_ == STATE_METRONOME ) {
  3674  05C9  0020               	movlb	0	; select bank0
  3675  05CA  0353               	decf	_machineState_,w
  3676  05CB  1D03               	btfss	3,2
  3677  05CC  2DDD               	goto	l3810
  3678                           
  3679                           ;main.c: 850: if( isMute_ )
  3680  05CD  0852               	movf	_isMute_,w
  3681  05CE  1903               	btfsc	3,2
  3682  05CF  2DEB               	goto	l3814
  3683                           
  3684                           ;main.c: 851: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0xA , MESSAGE.METRONO
      +                          ME.MUTE ) ;
  3685  05D0  3012               	movlw	low ((_MESSAGE+2)| (0+32768))
  3686  05D1  0084               	movwf	4
  3687  05D2  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3688  05D3  0085               	movwf	5
  3689  05D4  3F00               	moviw [0]fsr0
  3690  05D5  00DA               	movwf	ParallelLCD_WriteString@stringPtr
  3691  05D6  3F01               	moviw [1]fsr0
  3692  05D7  00DB               	movwf	ParallelLCD_WriteString@stringPtr+1
  3693  05D8  308A               	movlw	138
  3694  05D9  318A  2220  3180   	fcall	_ParallelLCD_WriteString
  3695                           
  3696                           ;main.c: 852: }
  3697  05DC  2DEB               	goto	l3814
  3698  05DD                     l3810:	
  3699                           
  3700                           ;main.c: 853: else if( machineState_ == STATE_ADJUST_TONE )
  3701  05DD  3009               	movlw	9
  3702  05DE  0020               	movlb	0	; select bank0
  3703  05DF  0653               	xorwf	_machineState_,w
  3704  05E0  1D03               	btfss	3,2
  3705  05E1  2DEB               	goto	l3814
  3706                           
  3707                           ;main.c: 854: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_1 | 0x5 , menuInfoTone
      +                          _.select - MENU_ITEM_TONE_ADJUST_TONE0 + '0' ) ;
  3708  05E2  0841               	movf	_menuInfoTone_,w
  3709  05E3  3E2F               	addlw	47
  3710  05E4  00DE               	movwf	??_main
  3711  05E5  085E               	movf	??_main,w
  3712  05E6  00D8               	movwf	ParallelLCD_WriteCharacter@character
  3713  05E7  30C5               	movlw	197
  3714  05E8  318A  22A6  3180   	fcall	_ParallelLCD_WriteCharacter
  3715  05EB                     l3814:	
  3716                           
  3717                           ;main.c: 856: outputEvent_.changeValue=1 ;
  3718  05EB  0020               	movlb	0	; select bank0
  3719  05EC  1554               	bsf	_outputEvent_,2
  3720                           
  3721                           ;main.c: 857: break ;
  3722  05ED  2E8A               	goto	l427
  3723  05EE                     l3816:	
  3724                           ;main.c: 859: case STATE_INFORMATION:
  3725                           
  3726                           
  3727                           ;main.c: 860: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          _INFORMATION[ menuInfoInformation_.select ] ) ;
  3728  05EE  3535               	lslf	_menuInfoInformation_,w
  3729  05EF  3E20               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3730  05F0  0086               	movwf	6
  3731  05F1  0187               	clrf	7
  3732  05F2  3F40               	moviw [0]fsr1
  3733  05F3  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3734  05F4  3F41               	moviw [1]fsr1
  3735  05F5  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3736  05F6  3080               	movlw	128
  3737  05F7  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3738                           
  3739                           ;main.c: 861: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0xA , &informationVal
      +                          ueBuffer[ menuInfoInformation_.select ] ) ;
  3740  05FA  3007               	movlw	7
  3741  05FB  0020               	movlb	0	; select bank0
  3742  05FC  00DE               	movwf	??_main
  3743  05FD  085E               	movf	??_main,w
  3744  05FE  00F4               	movwf	___bmul@multiplicand
  3745  05FF  0835               	movf	_menuInfoInformation_,w
  3746  0600  318A  2270  3180   	fcall	___bmul
  3747  0603  3E20               	addlw	(low (_informationValueBuffer| (0+256)))& (0+255)
  3748  0604  0020               	movlb	0	; select bank0
  3749  0605  00DA               	movwf	ParallelLCD_WriteString@stringPtr
  3750  0606  3001               	movlw	1
  3751  0607  00DB               	movwf	ParallelLCD_WriteString@stringPtr+1
  3752  0608  308A               	movlw	138
  3753  0609  318A  2220  3180   	fcall	_ParallelLCD_WriteString
  3754                           
  3755                           ;main.c: 862: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , MESSAGE
      +                          _INFORMATION[ menuInfoInformation_.select + 1 ] ) ;
  3756  060C  0020               	movlb	0	; select bank0
  3757  060D  3535               	lslf	_menuInfoInformation_,w
  3758  060E  3E02               	addlw	2
  3759  060F  3E20               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3760  0610  0086               	movwf	6
  3761  0611  0187               	clrf	7
  3762  0612  3F40               	moviw [0]fsr1
  3763  0613  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3764  0614  3F41               	moviw [1]fsr1
  3765  0615  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3766  0616  30C0               	movlw	192
  3767  0617  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3768                           
  3769                           ;main.c: 863: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xA , &informationVal
      +                          ueBuffer[ menuInfoInformation_.select + 1 ] ) ;
  3770  061A  3007               	movlw	7
  3771  061B  0020               	movlb	0	; select bank0
  3772  061C  00DE               	movwf	??_main
  3773  061D  085E               	movf	??_main,w
  3774  061E  00F4               	movwf	___bmul@multiplicand
  3775  061F  0835               	movf	_menuInfoInformation_,w
  3776  0620  3E01               	addlw	1
  3777  0621  318A  2270  3180   	fcall	___bmul
  3778  0624  3E20               	addlw	(low (_informationValueBuffer| (0+256)))& (0+255)
  3779  0625  0020               	movlb	0	; select bank0
  3780  0626  00DA               	movwf	ParallelLCD_WriteString@stringPtr
  3781  0627  3001               	movlw	1
  3782  0628  00DB               	movwf	ParallelLCD_WriteString@stringPtr+1
  3783  0629  30CA               	movlw	202
  3784  062A  318A  2220  3180   	fcall	_ParallelLCD_WriteString
  3785                           
  3786                           ;main.c: 864: break ;
  3787  062D  2E8A               	goto	l427
  3788  062E                     l3822:	
  3789                           ;main.c: 867: case STATE_CONFIRM_LOAD:
  3790                           
  3791                           
  3792                           ;main.c: 868: case STATE_CONFIRM_SAVE:
  3793                           ;main.c: 869: case STATE_CONFIRM_RESET:
  3794                           ;main.c: 870: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0xD , MESSAGE
      +                          .CONFIRM.NO ) ;
  3795  062E  3014               	movlw	low ((_MESSAGE+4)| (0+32768))
  3796  062F  0084               	movwf	4
  3797  0630  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  3798  0631  0085               	movwf	5
  3799  0632  3F00               	moviw [0]fsr0
  3800  0633  0020               	movlb	0	; select bank0
  3801  0634  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3802  0635  3F01               	moviw [1]fsr0
  3803  0636  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3804  0637  308D               	movlw	141
  3805  0638  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3806                           
  3807                           ;main.c: 871: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xD , MESSAGE
      +                          .CONFIRM.YES ) ;
  3808  063B  3016               	movlw	low ((_MESSAGE+6)| (0+32768))
  3809  063C  0084               	movwf	4
  3810  063D  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3811  063E  0085               	movwf	5
  3812  063F  3F00               	moviw [0]fsr0
  3813  0640  0020               	movlb	0	; select bank0
  3814  0641  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3815  0642  3F01               	moviw [1]fsr0
  3816  0643  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3817  0644  30CD               	movlw	205
  3818  0645  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3819                           
  3820                           ;main.c: 872: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , currentMenuInfo
      +                          Ptr_->singleMessage ) ;
  3821  0648  0020               	movlb	0	; select bank0
  3822  0649  084F               	movf	_currentMenuInfoPtr_,w
  3823  064A  3E04               	addlw	4
  3824  064B  0086               	movwf	6
  3825  064C  0187               	clrf	7
  3826  064D  3F40               	moviw [0]fsr1
  3827  064E  00DA               	movwf	ParallelLCD_WriteString@stringPtr
  3828  064F  3F41               	moviw [1]fsr1
  3829  0650  00DB               	movwf	ParallelLCD_WriteString@stringPtr+1
  3830  0651  3080               	movlw	128
  3831  0652  318A  2220  3180   	fcall	_ParallelLCD_WriteString
  3832                           
  3833                           ;main.c: 873: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentMenuInfoPtr_->
      +                          cursorPosition ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3834  0655  3020               	movlw	low (_CHAR_CODE| (0+32768))
  3835  0656  0084               	movwf	4
  3836  0657  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3837  0658  0085               	movwf	5
  3838  0659  0800               	movf	0,w	;code access
  3839  065A  0020               	movlb	0	; select bank0
  3840  065B  00DE               	movwf	??_main
  3841  065C  085E               	movf	??_main,w
  3842  065D  00D8               	movwf	ParallelLCD_WriteCharacter@character
  3843  065E  0A4F               	incf	_currentMenuInfoPtr_,w
  3844  065F  0086               	movwf	6
  3845  0660  0187               	clrf	7
  3846  0661  0801               	movf	1,w
  3847  0662  3E26               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3848  0663  0084               	movwf	4
  3849  0664  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3850  0665  1803               	skipnc
  3851  0666  3E01               	addlw	1
  3852  0667  0085               	movwf	5
  3853  0668  0800               	movf	0,w	;code access
  3854  0669  380C               	iorlw	12
  3855  066A  318A  22A6  3180   	fcall	_ParallelLCD_WriteCharacter
  3856                           
  3857                           ;main.c: 874: break ;
  3858  066D  2E8A               	goto	l427
  3859  066E                     l3828:	
  3860                           ;main.c: 876: case STATE_LOAD:
  3861                           
  3862                           
  3863                           ;main.c: 877: case STATE_SAVE:
  3864                           ;main.c: 878: case STATE_INITIALIZE:
  3865                           ;main.c: 879: case STATE_ERROR:
  3866                           ;main.c: 880: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , current
      +                          SingleMessage_ ) ;
  3867  066E  0020               	movlb	0	; select bank0
  3868  066F  084A               	movf	_currentSingleMessage_,w
  3869  0670  00D8               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3870  0671  084B               	movf	_currentSingleMessage_+1,w
  3871  0672  00D9               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3872  0673  3080               	movlw	128
  3873  0674  318E  2641  3180   	fcall	_ParallelLCD_WriteStringClearing
  3874                           
  3875                           ;main.c: 881: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  3876  0677  30C0               	movlw	192
  3877  0678  318A  2240  3180   	fcall	_ParallelLCD_ClearRow
  3878                           
  3879                           ;main.c: 884: }
  3880                           
  3881                           ;main.c: 882: break ;
  3882  067B  2E8A               	goto	l427
  3883  067C                     l3834:	
  3884  067C  0020               	movlb	0	; select bank0
  3885  067D  0853               	movf	_machineState_,w
  3886                           
  3887                           ; Switch size 1, requested type "space"
  3888                           ; Number of cases is 18, Range of values is 1 to 19
  3889                           ; switch strategies available:
  3890                           ; Name         Instructions Cycles
  3891                           ; direct_byte           47     9 (fixed)
  3892                           ; simple_byte           55    28 (average)
  3893                           ; jumptable            263     9 (fixed)
  3894                           ;	Chosen strategy is direct_byte
  3895  067E  3EFF               	addlw	-1
  3896  067F  1C03               	skipc
  3897  0680  2E8A               	goto	l427
  3898  0681  0084               	movwf	4
  3899  0682  3013               	movlw	19
  3900  0683  0204               	subwf	4,w
  3901  0684  1803               	skipnc
  3902  0685  2E8A               	goto	l427
  3903  0686  3189               	movlp	high S4024
  3904  0687  3504               	lslf	4,w
  3905  0688  3EC1               	addlw	low S4024
  3906  0689  0082               	movwf	2
  3907  068A                     l427:	
  3908                           
  3909                           ;main.c: 886: }
  3910                           ;main.c: 889: if( (outputEvent_.changeValue&&!(outputEvent_.changeValue=0)) ) {
  3911  068A  0020               	movlb	0	; select bank0
  3912  068B  1D54               	btfss	_outputEvent_,2
  3913  068C  29BC               	goto	l272
  3914  068D  1154               	bcf	_outputEvent_,2
  3915                           
  3916                           ;main.c: 891: Uint16_t tmpValue ;
  3917                           ;main.c: 892: Char_t valueString[6] = "= 000" ;
  3918  068E  30A0               	movlw	low main@F3091
  3919  068F  0086               	movwf	6
  3920  0690  3000               	movlw	high main@F3091
  3921  0691  0087               	movwf	7
  3922  0692  305E               	movlw	low main@valueString
  3923  0693  0084               	movwf	4
  3924  0694  3001               	movlw	high main@valueString
  3925  0695  0085               	movwf	5
  3926  0696  3006               	movlw	6
  3927  0697  00DE               	movwf	??_main
  3928  0698                     u3260:	
  3929  0698  0016               	moviw fsr1++
  3930  0699  001A               	movwi fsr0++
  3931  069A  0BDE               	decfsz	??_main,f
  3932  069B  2E98               	goto	u3260
  3933                           
  3934                           ;main.c: 894: switch( machineState_ ) {
  3935  069C  2ED9               	goto	l3852
  3936  069D                     l3840:	
  3937                           ;main.c: 896: case STATE_METRONOME:
  3938                           
  3939                           
  3940                           ;main.c: 897: tmpValue = configration_.tempo ;
  3941  069D  082B               	movf	_configration_+3,w
  3942  069E  0022               	movlb	2	; select bank2
  3943  069F  00E6               	movwf	(main@tmpValue+1)^(0+256)
  3944  06A0  0020               	movlb	0	; select bank0
  3945  06A1  082A               	movf	_configration_+2,w
  3946  06A2  0022               	movlb	2	; select bank2
  3947  06A3  00E5               	movwf	main@tmpValue^(0+256)
  3948                           
  3949                           ;main.c: 898: break ;
  3950  06A4  2EE2               	goto	l3854
  3951  06A5                     l460:	
  3952                           ;main.c: 900: case STATE_ADJUST_OSCILLATOR_TUNE:
  3953                           
  3954                           
  3955                           ;main.c: 901: if( (Uint08_t)configration_.oscillatorTune & 0x80 ) {
  3956  06A5  1FB3               	btfss	_configration_+11,7
  3957  06A6  2EBF               	goto	l3846
  3958                           
  3959                           ;main.c: 902: tmpValue = -configration_.oscillatorTune ;
  3960  06A7  0833               	movf	_configration_+11,w
  3961  06A8  00DE               	movwf	??_main
  3962  06A9  01DF               	clrf	??_main+1
  3963  06AA  1BDE               	btfsc	??_main,7
  3964  06AB  03DF               	decf	??_main+1,f
  3965  06AC  09DE               	comf	??_main,f
  3966  06AD  09DF               	comf	??_main+1,f
  3967  06AE  0ADE               	incf	??_main,f
  3968  06AF  1903               	skipnz
  3969  06B0  0ADF               	incf	??_main+1,f
  3970  06B1  085E               	movf	??_main,w
  3971  06B2  0022               	movlb	2	; select bank2
  3972  06B3  00E5               	movwf	main@tmpValue^(0+256)
  3973  06B4  0020               	movlb	0	; select bank0
  3974  06B5  085F               	movf	??_main+1,w
  3975  06B6  0022               	movlb	2	; select bank2
  3976  06B7  00E6               	movwf	(main@tmpValue+1)^(0+256)
  3977                           
  3978                           ;main.c: 903: valueString[1] = '-' ;
  3979  06B8  302D               	movlw	45
  3980  06B9  0020               	movlb	0	; select bank0
  3981  06BA  00DE               	movwf	??_main
  3982  06BB  085E               	movf	??_main,w
  3983  06BC  0022               	movlb	2	; select bank2
  3984  06BD  00DF               	movwf	(main@valueString^(0+256)+1)
  3985                           
  3986                           ;main.c: 904: }
  3987  06BE  2EE2               	goto	l3854
  3988  06BF                     l3846:	
  3989                           
  3990                           ;main.c: 905: else {
  3991                           ;main.c: 906: tmpValue = (Uint16_t)configration_.oscillatorTune ;
  3992  06BF  0020               	movlb	0	; select bank0
  3993  06C0  0833               	movf	_configration_+11,w
  3994  06C1  0022               	movlb	2	; select bank2
  3995  06C2  00E5               	movwf	main@tmpValue^(0+256)
  3996  06C3  01E6               	clrf	(main@tmpValue+1)^(0+256)
  3997  06C4  1BE5               	btfsc	main@tmpValue^(0+256),7
  3998  06C5  03E6               	decf	(main@tmpValue+1)^(0+256),f
  3999                           
  4000                           ;main.c: 907: }
  4001                           ;main.c: 908: break ;
  4002  06C6  2EE2               	goto	l3854
  4003  06C7                     l3848:	
  4004                           ;main.c: 910: default:
  4005                           
  4006                           
  4007                           ;main.c: 911: tmpValue = *currentValueInfoPtr_->valuePtr ;
  4008  06C7  0020               	movlb	0	; select bank0
  4009  06C8  0850               	movf	_currentValueInfoPtr_,w
  4010  06C9  0086               	movwf	6
  4011  06CA  0187               	clrf	7
  4012  06CB  0801               	movf	1,w
  4013  06CC  0086               	movwf	6
  4014  06CD  0187               	clrf	7
  4015  06CE  0801               	movf	1,w
  4016  06CF  00DE               	movwf	??_main
  4017  06D0  01DF               	clrf	??_main+1
  4018  06D1  085E               	movf	??_main,w
  4019  06D2  0022               	movlb	2	; select bank2
  4020  06D3  00E5               	movwf	main@tmpValue^(0+256)
  4021  06D4  0020               	movlb	0	; select bank0
  4022  06D5  085F               	movf	??_main+1,w
  4023  06D6  0022               	movlb	2	; select bank2
  4024  06D7  00E6               	movwf	(main@tmpValue+1)^(0+256)
  4025                           
  4026                           ;main.c: 913: }
  4027                           
  4028                           ;main.c: 912: break ;
  4029  06D8  2EE2               	goto	l3854
  4030  06D9                     l3852:	
  4031  06D9  0020               	movlb	0	; select bank0
  4032  06DA  0853               	movf	_machineState_,w
  4033                           
  4034                           ; Switch size 1, requested type "space"
  4035                           ; Number of cases is 2, Range of values is 1 to 10
  4036                           ; switch strategies available:
  4037                           ; Name         Instructions Cycles
  4038                           ; simple_byte            7     4 (average)
  4039                           ; direct_byte           29     9 (fixed)
  4040                           ; jumptable            263     9 (fixed)
  4041                           ;	Chosen strategy is simple_byte
  4042  06DB  3A01               	xorlw	1	; case 1
  4043  06DC  1903               	skipnz
  4044  06DD  2E9D               	goto	l3840
  4045  06DE  3A0B               	xorlw	11	; case 10
  4046  06DF  1903               	skipnz
  4047  06E0  2EA5               	goto	l460
  4048  06E1  2EC7               	goto	l3848
  4049  06E2                     l3854:	
  4050                           
  4051                           ;main.c: 915: Bool_t isNonZero = BOOL_FALSE ;
  4052  06E2  0022               	movlb	2	; select bank2
  4053  06E3  01E4               	clrf	main@isNonZero^(0+256)
  4054                           
  4055                           ;main.c: 916: const Uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 , } ;
  4056                           ;main.c: 917: for( Uint08_t i = 0 ; i < 3 ; i++ ) {
  4057  06E4  01EC               	clrf	main@i^(0+256)
  4058  06E5  3003               	movlw	3
  4059  06E6  026C               	subwf	main@i^(0+256),w
  4060  06E7  1803               	btfsc	3,0
  4061  06E8  2F63               	goto	l3884
  4062  06E9                     l3860:	
  4063                           
  4064                           ;main.c: 918: Char_t chr = '0' ;
  4065  06E9  3030               	movlw	48
  4066  06EA  0020               	movlb	0	; select bank0
  4067  06EB  00DE               	movwf	??_main
  4068  06EC  085E               	movf	??_main,w
  4069  06ED  0022               	movlb	2	; select bank2
  4070  06EE  00E7               	movwf	main@chr^(0+256)
  4071  06EF                     l3866:	
  4072                           ;main.c: 919: while( tmpValue >= COMPARE_UNITS[i] ) {
  4073                           
  4074  06EF  086C               	movf	main@i^(0+256),w
  4075  06F0  3E23               	addlw	low (main@COMPARE_UNITS| (0+32768))
  4076  06F1  0084               	movwf	4
  4077  06F2  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  4078  06F3  1803               	skipnc
  4079  06F4  3E01               	addlw	1
  4080  06F5  0085               	movwf	5
  4081  06F6  0800               	movf	0,w	;code access
  4082  06F7  0020               	movlb	0	; select bank0
  4083  06F8  00DE               	movwf	??_main
  4084  06F9  01DF               	clrf	??_main+1
  4085  06FA  085F               	movf	??_main+1,w
  4086  06FB  0022               	movlb	2	; select bank2
  4087  06FC  0266               	subwf	(main@tmpValue+1)^(0+256),w
  4088  06FD  1D03               	skipz
  4089  06FE  2F03               	goto	u3295
  4090  06FF  0020               	movlb	0	; select bank0
  4091  0700  085E               	movf	??_main,w
  4092  0701  0022               	movlb	2	; select bank2
  4093  0702  0265               	subwf	main@tmpValue^(0+256),w
  4094  0703                     u3295:	
  4095  0703  1C03               	btfss	3,0
  4096  0704  2F1E               	goto	l3868
  4097                           
  4098                           ;main.c: 920: tmpValue -= COMPARE_UNITS[i] ;
  4099  0705  086C               	movf	main@i^(0+256),w
  4100  0706  3E23               	addlw	low (main@COMPARE_UNITS| (0+32768))
  4101  0707  0084               	movwf	4
  4102  0708  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  4103  0709  1803               	skipnc
  4104  070A  3E01               	addlw	1
  4105  070B  0085               	movwf	5
  4106  070C  0800               	movf	0,w	;code access
  4107  070D  0020               	movlb	0	; select bank0
  4108  070E  00DE               	movwf	??_main
  4109  070F  01DF               	clrf	??_main+1
  4110  0710  085E               	movf	??_main,w
  4111  0711  0022               	movlb	2	; select bank2
  4112  0712  02E5               	subwf	main@tmpValue^(0+256),f
  4113  0713  0020               	movlb	0	; select bank0
  4114  0714  085F               	movf	??_main+1,w
  4115  0715  0022               	movlb	2	; select bank2
  4116  0716  3BE6               	subwfb	(main@tmpValue+1)^(0+256),f
  4117                           
  4118                           ;main.c: 921: chr++ ;
  4119  0717  3001               	movlw	1
  4120  0718  0020               	movlb	0	; select bank0
  4121  0719  00DE               	movwf	??_main
  4122  071A  085E               	movf	??_main,w
  4123  071B  0022               	movlb	2	; select bank2
  4124  071C  07E7               	addwf	main@chr^(0+256),f
  4125  071D  2EEF               	goto	l3866
  4126  071E                     l3868:	
  4127                           
  4128                           ;main.c: 922: }
  4129                           ;main.c: 924: if( isNonZero || chr > '0' || i == 2 ) {
  4130  071E  0864               	movf	main@isNonZero^(0+256),w
  4131  071F  1D03               	btfss	3,2
  4132  0720  2F29               	goto	l3874
  4133  0721  3031               	movlw	49
  4134  0722  0267               	subwf	main@chr^(0+256),w
  4135  0723  1803               	skipnc
  4136  0724  2F29               	goto	l3874
  4137  0725  3002               	movlw	2
  4138  0726  066C               	xorwf	main@i^(0+256),w
  4139  0727  1D03               	btfss	3,2
  4140  0728  2F3A               	goto	l3878
  4141  0729                     l3874:	
  4142                           
  4143                           ;main.c: 925: valueString[ i + 2 ] = chr ;
  4144  0729  0867               	movf	main@chr^(0+256),w
  4145  072A  0020               	movlb	0	; select bank0
  4146  072B  00DE               	movwf	??_main
  4147  072C  0022               	movlb	2	; select bank2
  4148  072D  086C               	movf	main@i^(0+256),w
  4149  072E  3E02               	addlw	2
  4150  072F  3E5E               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4151  0730  0086               	movwf	6
  4152  0731  3001               	movlw	1	; select bank2/3
  4153  0732  0087               	movwf	7
  4154  0733  0020               	movlb	0	; select bank0
  4155  0734  085E               	movf	??_main,w
  4156  0735  0081               	movwf	1
  4157                           
  4158                           ;main.c: 926: isNonZero = BOOL_TRUE ;
  4159  0736  0022               	movlb	2	; select bank2
  4160  0737  01E4               	clrf	main@isNonZero^(0+256)
  4161  0738  0AE4               	incf	main@isNonZero^(0+256),f
  4162                           
  4163                           ;main.c: 927: }
  4164  0739  2F59               	goto	l3880
  4165  073A                     l3878:	
  4166                           
  4167                           ;main.c: 928: else {
  4168                           ;main.c: 929: valueString[ i + 2 ] = valueString[ i + 1 ] ;
  4169  073A  086C               	movf	main@i^(0+256),w
  4170  073B  3E01               	addlw	1
  4171  073C  3E5E               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4172  073D  0086               	movwf	6
  4173  073E  3001               	movlw	1	; select bank2/3
  4174  073F  0087               	movwf	7
  4175  0740  0801               	movf	1,w
  4176  0741  0020               	movlb	0	; select bank0
  4177  0742  00DE               	movwf	??_main
  4178  0743  0022               	movlb	2	; select bank2
  4179  0744  086C               	movf	main@i^(0+256),w
  4180  0745  3E02               	addlw	2
  4181  0746  3E5E               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4182  0747  0086               	movwf	6
  4183  0748  3001               	movlw	1	; select bank2/3
  4184  0749  0087               	movwf	7
  4185  074A  0020               	movlb	0	; select bank0
  4186  074B  085E               	movf	??_main,w
  4187  074C  0081               	movwf	1
  4188                           
  4189                           ;main.c: 930: valueString[ i + 1 ] = ' ' ;
  4190  074D  3020               	movlw	32
  4191  074E  00DE               	movwf	??_main
  4192  074F  0022               	movlb	2	; select bank2
  4193  0750  086C               	movf	main@i^(0+256),w
  4194  0751  3E01               	addlw	1
  4195  0752  3E5E               	addlw	(low (main@valueString| (0+256)))& (0+255)
  4196  0753  0086               	movwf	6
  4197  0754  3001               	movlw	1	; select bank2/3
  4198  0755  0087               	movwf	7
  4199  0756  0020               	movlb	0	; select bank0
  4200  0757  085E               	movf	??_main,w
  4201  0758  0081               	movwf	1
  4202  0759                     l3880:	
  4203  0759  3001               	movlw	1
  4204  075A  0020               	movlb	0	; select bank0
  4205  075B  00DE               	movwf	??_main
  4206  075C  085E               	movf	??_main,w
  4207  075D  0022               	movlb	2	; select bank2
  4208  075E  07EC               	addwf	main@i^(0+256),f
  4209  075F  3003               	movlw	3
  4210  0760  026C               	subwf	main@i^(0+256),w
  4211  0761  1C03               	skipc
  4212  0762  2EE9               	goto	l3860
  4213  0763                     l3884:	
  4214                           
  4215                           ;main.c: 931: }
  4216                           ;main.c: 932: }
  4217                           ;main.c: 934: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xB , &valueString ) 
      +                          ;
  4218  0763  305E               	movlw	low main@valueString
  4219  0764  0020               	movlb	0	; select bank0
  4220  0765  00DA               	movwf	ParallelLCD_WriteString@stringPtr
  4221  0766  3001               	movlw	high main@valueString
  4222  0767  00DB               	movwf	ParallelLCD_WriteString@stringPtr+1
  4223  0768  30CB               	movlw	203
  4224  0769  318A  2220  3180   	fcall	_ParallelLCD_WriteString
  4225                           
  4226                           ;main.c: 936: switch( machineState_ ) {
  4227  076C  2F85               	goto	l3894
  4228  076D                     l3886:	
  4229                           ;main.c: 937: case STATE_ADJUST_OSCILLATOR_TUNE:
  4230                           
  4231                           
  4232                           ;main.c: 938: OSCTUNE = configration_.oscillatorTune ;
  4233  076D  0020               	movlb	0	; select bank0
  4234  076E  0833               	movf	_configration_+11,w
  4235  076F  0021               	movlb	1	; select bank1
  4236  0770  2F83               	goto	L32
  4237  0771                     l3888:	
  4238                           ;main.c: 940: case STATE_ADJUST_TONE:
  4239                           
  4240                           ;main.c: 939: break ;
  4241                           
  4242                           
  4243                           ;main.c: 941: PR2 = *currentValueInfoPtr_->valuePtr ;
  4244  0771  0020               	movlb	0	; select bank0
  4245  0772  0850               	movf	_currentValueInfoPtr_,w
  4246  0773  0086               	movwf	6
  4247  0774  0187               	clrf	7
  4248  0775  0801               	movf	1,w
  4249  0776  0086               	movwf	6
  4250  0777  0187               	clrf	7
  4251  0778  0801               	movf	1,w
  4252  0779  009B               	movwf	27	;volatile
  4253                           
  4254                           ;main.c: 942: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  4255  077A  081B               	movf	27,w	;volatile
  4256  077B  00DE               	movwf	??_main
  4257  077C  0A32               	incf	_configration_+10,w
  4258  077D  2F7F               	goto	u3344
  4259  077E                     u3345:	
  4260  077E  36DE               	lsrf	??_main,f
  4261  077F                     u3344:	
  4262  077F  0B89               	decfsz	9,f
  4263  0780  2F7E               	goto	u3345
  4264  0781  085E               	movf	??_main,w
  4265  0782  0026               	movlb	6	; select bank6
  4266  0783                     L32:	
  4267  0783  0098               	movwf	24	;volatile
  4268                           
  4269                           ;main.c: 944: }
  4270                           
  4271                           ;main.c: 943: break ;
  4272  0784  29BC               	goto	l272
  4273  0785                     l3894:	
  4274  0785  0020               	movlb	0	; select bank0
  4275  0786  0853               	movf	_machineState_,w
  4276                           
  4277                           ; Switch size 1, requested type "space"
  4278                           ; Number of cases is 2, Range of values is 9 to 10
  4279                           ; switch strategies available:
  4280                           ; Name         Instructions Cycles
  4281                           ; simple_byte            7     4 (average)
  4282                           ; direct_byte           13     9 (fixed)
  4283                           ; jumptable            263     9 (fixed)
  4284                           ;	Chosen strategy is simple_byte
  4285  0787  3A09               	xorlw	9	; case 9
  4286  0788  1903               	skipnz
  4287  0789  2F71               	goto	l3888
  4288  078A  3A03               	xorlw	3	; case 10
  4289  078B  1903               	skipnz
  4290  078C  2F6D               	goto	l3886
  4291  078D  29BC               	goto	l272
  4292                           
  4293                           ;main.c: 945: }
  4294                           ;main.c: 947: }
  4295  078E  29BC               	goto	l272
  4296  078F                     __end_of_main:	
  4297                           
  4298                           	psect	swtext1
  4299  09E7                     __pswtext1:	
  4300  09E7                     S4016:	
  4301  09E7  3182  2A38         	ljmp	l306
  4302  09E9  3182  2A07         	ljmp	l3466
  4303  09EB  3182  2A09         	ljmp	l3468
  4304  09ED  3182  2A10         	ljmp	l3474
  4305  09EF  3182  2A18         	ljmp	l3480
  4306  09F1  3182  2A1A         	ljmp	l3482
  4307  09F3  3182  2A1E         	ljmp	l3486
  4308  09F5  3182  2A26         	ljmp	l3492
  4309  09F7  3182  2A1C         	ljmp	l3484
  4310  09F9  3182  2A2F         	ljmp	l3498
  4311                           
  4312                           	psect	swtext2
  4313  099B                     __pswtext2:	
  4314  099B                     S4018:	
  4315  099B  3182  2A00         	ljmp	l3460
  4316  099D  3182  2A3C         	ljmp	l3506
  4317  099F  3182  2A47         	ljmp	l3508
  4318  09A1  3182  2A51         	ljmp	l3522
  4319  09A3  3182  2A75         	ljmp	l3542
  4320  09A5  3182  2A77         	ljmp	l3544
  4321  09A7  3182  2A77         	ljmp	l3544
  4322  09A9  3182  2A75         	ljmp	l3542
  4323  09AB  3182  2A7E         	ljmp	l3550
  4324  09AD  3182  2A7C         	ljmp	l3546
  4325  09AF  3182  2A75         	ljmp	l3542
  4326  09B1  3182  2A66         	ljmp	l3530
  4327  09B3  3182  2A95         	ljmp	l289
  4328  09B5  3182  2A60         	ljmp	l3524
  4329  09B7  3182  2A95         	ljmp	l289
  4330  09B9  3182  2A6C         	ljmp	l3536
  4331  09BB  3182  2A84         	ljmp	l334
  4332  09BD  3182  2A95         	ljmp	l289
  4333  09BF  3182  2A84         	ljmp	l334
  4334                           
  4335                           	psect	swtext3
  4336  0973                     __pswtext3:	
  4337  0973                     S4020:	
  4338  0973  3182  2AE4         	ljmp	l355
  4339  0975  3182  2A9B         	ljmp	l3560
  4340  0977  3182  2A9D         	ljmp	l3562
  4341  0979  3182  2A9F         	ljmp	l3564
  4342  097B  3182  2AA1         	ljmp	l3566
  4343  097D  3182  2AA9         	ljmp	l3574
  4344  097F  3182  2AAB         	ljmp	l3576
  4345  0981  3182  2AAD         	ljmp	l3578
  4346  0983  3182  2AAF         	ljmp	l3580
  4347  0985  3182  2ABC         	ljmp	l3588
  4348  0987  3182  2AB4         	ljmp	l3582
  4349  0989  3182  2ADD         	ljmp	l3598
  4350  098B  3182  2AA5         	ljmp	l3570
  4351  098D  3182  2AE4         	ljmp	l355
  4352  098F  3182  2AA3         	ljmp	l3568
  4353  0991  3182  2AE4         	ljmp	l355
  4354  0993  3182  2AA7         	ljmp	l3572
  4355  0995  3182  2AE4         	ljmp	l355
  4356  0997  3182  2AE6         	ljmp	l3602
  4357  0999  3182  2AEA         	ljmp	l3604
  4358                           
  4359                           	psect	swtext4
  4360  0A00                     __pswtext4:	
  4361  0A00                     S4022:	
  4362  0A00  3184  2C0B         	ljmp	l381
  4363  0A02  3183  2BCC         	ljmp	l373
  4364  0A04  3183  2BCC         	ljmp	l373
  4365  0A06  3183  2BCC         	ljmp	l373
  4366  0A08  3184  2C2C         	ljmp	l391
  4367  0A0A  3184  2C2C         	ljmp	l391
  4368  0A0C  3184  2C2C         	ljmp	l391
  4369  0A0E  3184  2C2C         	ljmp	l391
  4370  0A10  3184  2C2C         	ljmp	l391
  4371  0A12  3184  2C2C         	ljmp	l391
  4372  0A14  3183  2BCC         	ljmp	l373
  4373  0A16  3183  2BCC         	ljmp	l373
  4374  0A18  3184  2C70         	ljmp	l380
  4375  0A1A  3183  2BCC         	ljmp	l373
  4376  0A1C  3184  2C70         	ljmp	l380
  4377  0A1E  3183  2BCC         	ljmp	l373
  4378                           
  4379                           	psect	swtext5
  4380  09C1                     __pswtext5:	
  4381  09C1                     S4024:	
  4382  09C1  3185  2DAF         	ljmp	l3802
  4383  09C3  3185  2D1B         	ljmp	l3790
  4384  09C5  3185  2D1B         	ljmp	l3790
  4385  09C7  3185  2D1B         	ljmp	l3790
  4386  09C9  3185  2DAF         	ljmp	l3802
  4387  09CB  3185  2DAF         	ljmp	l3802
  4388  09CD  3185  2DAF         	ljmp	l3802
  4389  09CF  3185  2DAF         	ljmp	l3802
  4390  09D1  3185  2DAF         	ljmp	l3802
  4391  09D3  3185  2DAF         	ljmp	l3802
  4392  09D5  3185  2DEE         	ljmp	l3816
  4393  09D7  3186  2E2E         	ljmp	l3822
  4394  09D9  3186  2E6E         	ljmp	l3828
  4395  09DB  3186  2E2E         	ljmp	l3822
  4396  09DD  3186  2E6E         	ljmp	l3828
  4397  09DF  3186  2E2E         	ljmp	l3822
  4398  09E1  3186  2E6E         	ljmp	l3828
  4399  09E3  3186  2E8A         	ljmp	l427
  4400  09E5  3186  2E6E         	ljmp	l3828
  4401                           
  4402                           	psect	text1
  4403  078F                     __ptext1:	
  4404 ;; *************** function _initialize *****************
  4405 ;; Defined at:
  4406 ;;		line 5 in file "src/pic16f1827_init.h"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;		None
  4411 ;; Return value:  Size  Location     Type
  4412 ;;		None               void
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4420 ;;      Params:         0       0       0       0       0       0
  4421 ;;      Locals:         0       0       0       0       0       0
  4422 ;;      Temps:          0       0       0       0       0       0
  4423 ;;      Totals:         0       0       0       0       0       0
  4424 ;;Total ram usage:        0 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    1
  4427 ;; This function calls:
  4428 ;;		Nothing
  4429 ;; This function is called by:
  4430 ;;		_main
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _initialize
  4436  078F                     _initialize:	
  4437                           
  4438                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4442  078F  0021               	movlb	1	; select bank1
  4443  0790  0819               	movf	25,w	;volatile
  4444  0791  3987               	andlw	-121
  4445  0792  3870               	iorlw	112
  4446  0793  0099               	movwf	25	;volatile
  4447                           
  4448                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4449  0794  30FC               	movlw	-4
  4450  0795  0599               	andwf	25,f	;volatile
  4451                           
  4452                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4453  0796  1799               	bsf	25,7	;volatile
  4454                           
  4455                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4456  0797  30C0               	movlw	-64
  4457  0798  0598               	andwf	24,f	;volatile
  4458                           
  4459                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4460  0799  0817               	movf	23,w	;volatile
  4461  079A  39C1               	andlw	-63
  4462  079B  381E               	iorlw	30
  4463  079C  0097               	movwf	23	;volatile
  4464                           
  4465                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4466  079D  138B               	bcf	11,7	;volatile
  4467                           
  4468                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4469  079E  130B               	bcf	11,6	;volatile
  4470                           
  4471                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4472  079F  1595               	bsf	21,3	;volatile
  4473                           
  4474                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4475  07A0  1295               	bcf	21,5	;volatile
  4476                           
  4477                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4478  07A1  1615               	bsf	21,4	;volatile
  4479                           
  4480                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4481  07A2  0020               	movlb	0	; select bank0
  4482  07A3  0195               	clrf	21	;volatile
  4483                           
  4484                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4485  07A4  128B               	bcf	11,5	;volatile
  4486                           
  4487                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4488  07A5  110B               	bcf	11,2	;volatile
  4489                           
  4490                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4491  07A6  1018               	bcf	24,0	;volatile
  4492                           
  4493                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4494  07A7  303F               	movlw	-193
  4495  07A8  0598               	andwf	24,f	;volatile
  4496                           
  4497                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4498  07A9  3030               	movlw	48
  4499  07AA  0498               	iorwf	24,f	;volatile
  4500                           
  4501                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4502  07AB  1118               	bcf	24,2	;volatile
  4503                           
  4504                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4505  07AC  0196               	clrf	22	;volatile
  4506  07AD  0197               	clrf	23	;volatile
  4507                           
  4508                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4509  07AE  1011               	bcf	17,0	;volatile
  4510                           
  4511                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4512  07AF  0021               	movlb	1	; select bank1
  4513  07B0  1011               	bcf	17,0	;volatile
  4514                           
  4515                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4516  07B1  0020               	movlb	0	; select bank0
  4517  07B2  111C               	bcf	28,2	;volatile
  4518                           
  4519                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4520  07B3  3087               	movlw	-121
  4521  07B4  059C               	andwf	28,f	;volatile
  4522                           
  4523                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4524  07B5  3003               	movlw	3
  4525  07B6  049C               	iorwf	28,f	;volatile
  4526                           
  4527                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4528  07B7  307C               	movlw	124
  4529  07B8  009B               	movwf	27	;volatile
  4530                           
  4531                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4532  07B9  019A               	clrf	26	;volatile
  4533                           
  4534                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4535  07BA  1091               	bcf	17,1	;volatile
  4536                           
  4537                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4538  07BB  0021               	movlb	1	; select bank1
  4539  07BC  1091               	bcf	17,1	;volatile
  4540                           
  4541                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4542  07BD  0028               	movlb	8	; select bank8
  4543  07BE  1117               	bcf	23,2	;volatile
  4544                           
  4545                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4546  07BF  3087               	movlw	-121
  4547  07C0  0597               	andwf	23,f	;volatile
  4548                           
  4549                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4550  07C1  0817               	movf	23,w	;volatile
  4551  07C2  39FC               	andlw	-4
  4552  07C3  3801               	iorlw	1
  4553  07C4  0097               	movwf	23	;volatile
  4554                           
  4555                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4556  07C5  304F               	movlw	79
  4557  07C6  0096               	movwf	22	;volatile
  4558                           
  4559                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4560  07C7  0195               	clrf	21	;volatile
  4561                           
  4562                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4563  07C8  0020               	movlb	0	; select bank0
  4564  07C9  1093               	bcf	19,1	;volatile
  4565                           
  4566                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4567  07CA  0021               	movlb	1	; select bank1
  4568  07CB  1093               	bcf	19,1	;volatile
  4569                           
  4570                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4571  07CC  0028               	movlb	8	; select bank8
  4572  07CD  111E               	bcf	30,2	;volatile
  4573                           
  4574                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4575  07CE  3087               	movlw	-121
  4576  07CF  059E               	andwf	30,f	;volatile
  4577                           
  4578                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4579  07D0  30FC               	movlw	-4
  4580  07D1  059E               	andwf	30,f	;volatile
  4581                           
  4582                           ;pic16f1827_init.h: 59: PR6 = 124 ;
  4583  07D2  307C               	movlw	124
  4584  07D3  009D               	movwf	29	;volatile
  4585                           
  4586                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4587  07D4  019C               	clrf	28	;volatile
  4588                           
  4589                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4590  07D5  0020               	movlb	0	; select bank0
  4591  07D6  1193               	bcf	19,3	;volatile
  4592                           
  4593                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4594  07D7  0021               	movlb	1	; select bank1
  4595  07D8  1193               	bcf	19,3	;volatile
  4596                           
  4597                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4598  07D9  0025               	movlb	5	; select bank5
  4599  07DA  019E               	clrf	30	;volatile
  4600                           
  4601                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4602  07DB  30F0               	movlw	-16
  4603  07DC  0593               	andwf	19,f	;volatile
  4604                           
  4605                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4606  07DD  30F0               	movlw	-16
  4607  07DE  059A               	andwf	26,f	;volatile
  4608                           
  4609                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4610  07DF  30F0               	movlw	-16
  4611  07E0  0026               	movlb	6	; select bank6
  4612  07E1  0593               	andwf	19,f	;volatile
  4613                           
  4614                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4615  07E2  081A               	movf	26,w	;volatile
  4616  07E3  39F0               	andlw	-16
  4617  07E4  380C               	iorlw	12
  4618  07E5  009A               	movwf	26	;volatile
  4619                           
  4620                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4621  07E6  30CF               	movlw	-49
  4622  07E7  059A               	andwf	26,f	;volatile
  4623                           
  4624                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4625  07E8  303F               	movlw	-193
  4626  07E9  0025               	movlb	5	; select bank5
  4627  07EA  059E               	andwf	30,f	;volatile
  4628                           
  4629                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4630  07EB  0026               	movlb	6	; select bank6
  4631  07EC  0198               	clrf	24	;volatile
  4632                           
  4633                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4634  07ED  0199               	clrf	25	;volatile
  4635                           
  4636                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4637  07EE  0023               	movlb	3	; select bank3
  4638  07EF  018C               	clrf	12	;volatile
  4639                           
  4640                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4641  07F0  018D               	clrf	13	;volatile
  4642                           
  4643                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4644  07F1  30E0               	movlw	224
  4645  07F2  0021               	movlb	1	; select bank1
  4646  07F3  008C               	movwf	12	;volatile
  4647                           
  4648                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4649  07F4  018D               	clrf	13	;volatile
  4650  07F5  0008               	return
  4651  07F6                     __end_of_initialize:	
  4652                           
  4653                           	psect	text2
  4654  0A70                     __ptext2:	
  4655 ;; *************** function ___bmul *****************
  4656 ;; Defined at:
  4657 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  multiplier      1    wreg     unsigned char 
  4660 ;;  multiplicand    1    4[COMMON] unsigned char 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  multiplier      1    1[BANK0 ] unsigned char 
  4663 ;;  product         1    0[BANK0 ] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      unsigned char 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4673 ;;      Params:         1       0       0       0       0       0
  4674 ;;      Locals:         0       2       0       0       0       0
  4675 ;;      Temps:          1       0       0       0       0       0
  4676 ;;      Totals:         2       2       0       0       0       0
  4677 ;;Total ram usage:        4 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    1
  4680 ;; This function calls:
  4681 ;;		Nothing
  4682 ;; This function is called by:
  4683 ;;		_main
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function ___bmul
  4689  0A70                     ___bmul:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4693                           ;___bmul@multiplier stored from wreg
  4694  0A70  0020               	movlb	0	; select bank0
  4695  0A71  00D9               	movwf	___bmul@multiplier
  4696  0A72  01D8               	clrf	___bmul@product
  4697  0A73                     l3334:	
  4698  0A73  1C59               	btfss	___bmul@multiplier,0
  4699  0A74  2A79               	goto	l3338
  4700  0A75  0874               	movf	___bmul@multiplicand,w
  4701  0A76  00F5               	movwf	??___bmul
  4702  0A77  0875               	movf	??___bmul,w
  4703  0A78  07D8               	addwf	___bmul@product,f
  4704  0A79                     l3338:	
  4705  0A79  1003               	clrc
  4706  0A7A  0DF4               	rlf	___bmul@multiplicand,f
  4707  0A7B  1003               	clrc
  4708  0A7C  0CD9               	rrf	___bmul@multiplier,f
  4709  0A7D  0859               	movf	___bmul@multiplier,w
  4710  0A7E  1D03               	btfss	3,2
  4711  0A7F  2A73               	goto	l3334
  4712  0A80  0858               	movf	___bmul@product,w
  4713  0A81  0008               	return
  4714  0A82                     __end_of___bmul:	
  4715                           
  4716                           	psect	text3
  4717  0E41                     __ptext3:	
  4718 ;; *************** function _ParallelLCD_WriteStringClearing *****************
  4719 ;; Defined at:
  4720 ;;		line 106 in file "src/../../_Common/ParallelLCD.h"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  position        1    wreg     enum E2805
  4723 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4724 ;;		 -> STR_46(10), STR_45(14), STR_44(12), STR_43(14), 
  4725 ;;		 -> STR_42(9), STR_41(9), STR_40(6), STR_39(9), 
  4726 ;;		 -> STR_38(5), STR_37(5), STR_36(11), STR_35(14), 
  4727 ;;		 -> STR_34(6), STR_33(10), ROM(4096), STR_29(9), 
  4728 ;;		 -> STR_28(12), STR_27(6), STR_26(7), STR_25(4), 
  4729 ;;		 -> STR_24(4), STR_22(10), STR_21(11), STR_20(11), 
  4730 ;;		 -> STR_19(11), STR_18(8), STR_17(10), STR_16(12), 
  4731 ;;		 -> STR_15(9), STR_14(6), STR_13(6), STR_12(6), 
  4732 ;;		 -> STR_11(9), STR_10(6), STR_9(5), STR_8(5), 
  4733 ;;		 -> STR_7(5), STR_6(10), STR_5(13), STR_4(14), 
  4734 ;;		 -> STR_3(10), STR_2(11), STR_1(9), 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  position        1    3[BANK0 ] enum E2805
  4737 ;;  i               1    4[BANK0 ] unsigned char 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;		None               void
  4740 ;; Registers used:
  4741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4747 ;;      Params:         0       2       0       0       0       0
  4748 ;;      Locals:         0       2       0       0       0       0
  4749 ;;      Temps:          0       1       0       0       0       0
  4750 ;;      Totals:         0       5       0       0       0       0
  4751 ;;Total ram usage:        5 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    2
  4754 ;; This function calls:
  4755 ;;		_ParallelLCD_WriteByte
  4756 ;; This function is called by:
  4757 ;;		_main
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           
  4762                           ;psect for function _ParallelLCD_WriteStringClearing
  4763  0E41                     _ParallelLCD_WriteStringClearing:	
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _ParallelLCD_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  4767                           ;ParallelLCD_WriteStringClearing@position stored from wreg
  4768  0E41  0020               	movlb	0	; select bank0
  4769  0E42  00DB               	movwf	ParallelLCD_WriteStringClearing@position
  4770                           
  4771                           ;ParallelLCD.h: 107: ParallelLCD_WriteByte( position & 0xF0 , BOOL_FALSE ) ;
  4772  0E43  01F4               	clrf	ParallelLCD_WriteByte@r
  4773  0E44  085B               	movf	ParallelLCD_WriteStringClearing@position,w
  4774  0E45  39F0               	andlw	240
  4775  0E46  318A  225A  318E   	fcall	_ParallelLCD_WriteByte
  4776                           
  4777                           ;ParallelLCD.h: 108: for ( Uint08_t i = 0 ; i != 16 ; i++ ) {
  4778  0E49  0020               	movlb	0	; select bank0
  4779  0E4A  01DC               	clrf	ParallelLCD_WriteStringClearing@i
  4780  0E4B                     L40:	
  4781  0E4B  3010               	movlw	16
  4782  0E4C  065C               	xorwf	ParallelLCD_WriteStringClearing@i,w
  4783  0E4D  1903               	btfsc	3,2
  4784  0E4E  0008               	return
  4785                           
  4786                           ;ParallelLCD.h: 109: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4787  0E4F  085B               	movf	ParallelLCD_WriteStringClearing@position,w
  4788  0E50  390F               	andlw	15
  4789  0E51  025C               	subwf	ParallelLCD_WriteStringClearing@i,w
  4790  0E52  1C03               	skipc
  4791  0E53  2E6B               	goto	l3212
  4792  0E54  0858               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4793  0E55  0084               	movwf	4
  4794  0E56  0859               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4795  0E57  0085               	movwf	5
  4796  0E58  0012               	moviw fsr0++
  4797  0E59  1903               	btfsc	3,2
  4798  0E5A  2E6B               	goto	l3212
  4799                           
  4800                           ;ParallelLCD.h: 110: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4801  0E5B  01F4               	clrf	ParallelLCD_WriteByte@r
  4802  0E5C  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4803  0E5D  0858               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4804  0E5E  0084               	movwf	4
  4805  0E5F  0859               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4806  0E60  0085               	movwf	5
  4807  0E61  0800               	movf	0,w	;code access
  4808  0E62  318A  225A  318E   	fcall	_ParallelLCD_WriteByte
  4809  0E65  3001               	movlw	1
  4810  0E66  0020               	movlb	0	; select bank0
  4811  0E67  07D8               	addwf	ParallelLCD_WriteStringClearing@stringPtr,f
  4812  0E68  3000               	movlw	0
  4813  0E69  3DD9               	addwfc	ParallelLCD_WriteStringClearing@stringPtr+1,f
  4814  0E6A  2E71               	goto	l3214
  4815  0E6B                     l3212:	
  4816                           
  4817                           ;ParallelLCD.h: 111: else
  4818                           ;ParallelLCD.h: 112: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4819  0E6B  01F4               	clrf	ParallelLCD_WriteByte@r
  4820  0E6C  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4821  0E6D  3020               	movlw	32
  4822  0E6E  318A  225A  318E   	fcall	_ParallelLCD_WriteByte
  4823  0E71                     l3214:	
  4824  0E71  3001               	movlw	1
  4825  0E72  0020               	movlb	0	; select bank0
  4826  0E73  00DA               	movwf	??_ParallelLCD_WriteStringClearing
  4827  0E74  085A               	movf	??_ParallelLCD_WriteStringClearing,w
  4828  0E75  07DC               	addwf	ParallelLCD_WriteStringClearing@i,f
  4829  0E76  2E4B               	goto	L40
  4830  0E77                     __end_of_ParallelLCD_WriteStringClearing:	
  4831                           
  4832                           	psect	text4
  4833  0A20                     __ptext4:	
  4834 ;; *************** function _ParallelLCD_WriteString *****************
  4835 ;; Defined at:
  4836 ;;		line 97 in file "src/../../_Common/ParallelLCD.h"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  position        1    wreg     enum E2805
  4839 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  4840 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_32(8), STR_31(7), 
  4841 ;;		 -> STR_30(7), ROM(4096), STR_23(7), 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  position        1    5[BANK0 ] enum E2805
  4844 ;; Return value:  Size  Location     Type
  4845 ;;		None               void
  4846 ;; Registers used:
  4847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : 0/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4853 ;;      Params:         0       2       0       0       0       0
  4854 ;;      Locals:         0       1       0       0       0       0
  4855 ;;      Temps:          0       1       0       0       0       0
  4856 ;;      Totals:         0       4       0       0       0       0
  4857 ;;Total ram usage:        4 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; Hardware stack levels required when called:    2
  4860 ;; This function calls:
  4861 ;;		_ParallelLCD_WriteByte
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           
  4868                           ;psect for function _ParallelLCD_WriteString
  4869  0A20                     _ParallelLCD_WriteString:	
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _ParallelLCD_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4873                           ;ParallelLCD_WriteString@position stored from wreg
  4874  0A20  0020               	movlb	0	; select bank0
  4875  0A21  00DD               	movwf	ParallelLCD_WriteString@position
  4876                           
  4877                           ;ParallelLCD.h: 98: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4878  0A22  01F4               	clrf	ParallelLCD_WriteByte@r
  4879  0A23  085D               	movf	ParallelLCD_WriteString@position,w
  4880  0A24  318A  225A  318A   	fcall	_ParallelLCD_WriteByte
  4881  0A27                     l3194:	
  4882                           ;ParallelLCD.h: 99: while ( *stringPtr ) {
  4883                           
  4884  0A27  0020               	movlb	0	; select bank0
  4885  0A28  085A               	movf	ParallelLCD_WriteString@stringPtr,w
  4886  0A29  0084               	movwf	4
  4887  0A2A  085B               	movf	ParallelLCD_WriteString@stringPtr+1,w
  4888  0A2B  0085               	movwf	5
  4889  0A2C  0012               	moviw fsr0++
  4890  0A2D  1903               	btfsc	3,2
  4891  0A2E  0008               	return
  4892                           
  4893                           ;ParallelLCD.h: 100: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4894  0A2F  01F4               	clrf	ParallelLCD_WriteByte@r
  4895  0A30  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4896  0A31  0020               	movlb	0	; select bank0
  4897  0A32  085A               	movf	ParallelLCD_WriteString@stringPtr,w
  4898  0A33  0084               	movwf	4
  4899  0A34  085B               	movf	ParallelLCD_WriteString@stringPtr+1,w
  4900  0A35  0085               	movwf	5
  4901  0A36  0800               	movf	0,w	;code access
  4902  0A37  318A  225A  318A   	fcall	_ParallelLCD_WriteByte
  4903  0A3A  3001               	movlw	1
  4904  0A3B  0020               	movlb	0	; select bank0
  4905  0A3C  07DA               	addwf	ParallelLCD_WriteString@stringPtr,f
  4906  0A3D  3000               	movlw	0
  4907  0A3E  3DDB               	addwfc	ParallelLCD_WriteString@stringPtr+1,f
  4908  0A3F  2A27               	goto	l3194
  4909  0A40                     __end_of_ParallelLCD_WriteString:	
  4910                           
  4911                           	psect	text5
  4912  0AA6                     __ptext5:	
  4913 ;; *************** function _ParallelLCD_WriteCharacter *****************
  4914 ;; Defined at:
  4915 ;;		line 90 in file "src/../../_Common/ParallelLCD.h"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  position        1    wreg     enum E2805
  4918 ;;  character       1    0[BANK0 ] unsigned char 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  position        1    1[BANK0 ] enum E2805
  4921 ;; Return value:  Size  Location     Type
  4922 ;;		None               void
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0, pclath, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4930 ;;      Params:         0       1       0       0       0       0
  4931 ;;      Locals:         0       1       0       0       0       0
  4932 ;;      Temps:          0       0       0       0       0       0
  4933 ;;      Totals:         0       2       0       0       0       0
  4934 ;;Total ram usage:        2 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    2
  4937 ;; This function calls:
  4938 ;;		_ParallelLCD_WriteByte
  4939 ;; This function is called by:
  4940 ;;		_main
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _ParallelLCD_WriteCharacter
  4946  0AA6                     _ParallelLCD_WriteCharacter:	
  4947                           
  4948                           ;incstack = 0
  4949                           ; Regs used in _ParallelLCD_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4950                           ;ParallelLCD_WriteCharacter@position stored from wreg
  4951  0AA6  0020               	movlb	0	; select bank0
  4952  0AA7  00D9               	movwf	ParallelLCD_WriteCharacter@position
  4953                           
  4954                           ;ParallelLCD.h: 91: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4955  0AA8  01F4               	clrf	ParallelLCD_WriteByte@r
  4956  0AA9  0859               	movf	ParallelLCD_WriteCharacter@position,w
  4957  0AAA  318A  225A  318A   	fcall	_ParallelLCD_WriteByte
  4958                           
  4959                           ;ParallelLCD.h: 92: ParallelLCD_WriteByte( character , BOOL_TRUE ) ;
  4960  0AAD  01F4               	clrf	ParallelLCD_WriteByte@r
  4961  0AAE  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4962  0AAF  0020               	movlb	0	; select bank0
  4963  0AB0  0858               	movf	ParallelLCD_WriteCharacter@character,w
  4964  0AB1  318A  225A         	fcall	_ParallelLCD_WriteByte
  4965  0AB3  0008               	return
  4966  0AB4                     __end_of_ParallelLCD_WriteCharacter:	
  4967                           
  4968                           	psect	text6
  4969  0E17                     __ptext6:	
  4970 ;; *************** function _ParallelLCD_SetCgram *****************
  4971 ;; Defined at:
  4972 ;;		line 143 in file "src/../../_Common/ParallelLCD.h"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  charCode        1    wreg     unsigned char 
  4975 ;;  bitmap          2    0[BANK0 ] PTR const unsigned char 
  4976 ;;		 -> BITMAP(24), 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  charCode        1    3[BANK0 ] unsigned char 
  4979 ;;  i               1    4[BANK0 ] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;		None               void
  4982 ;; Registers used:
  4983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4989 ;;      Params:         0       2       0       0       0       0
  4990 ;;      Locals:         0       2       0       0       0       0
  4991 ;;      Temps:          0       1       0       0       0       0
  4992 ;;      Totals:         0       5       0       0       0       0
  4993 ;;Total ram usage:        5 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    2
  4996 ;; This function calls:
  4997 ;;		_ParallelLCD_WriteByte
  4998 ;; This function is called by:
  4999 ;;		_main
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _ParallelLCD_SetCgram
  5005  0E17                     _ParallelLCD_SetCgram:	
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _ParallelLCD_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5009                           ;ParallelLCD_SetCgram@charCode stored from wreg
  5010  0E17  0020               	movlb	0	; select bank0
  5011  0E18  00DB               	movwf	ParallelLCD_SetCgram@charCode
  5012                           
  5013                           ;ParallelLCD.h: 144: ParallelLCD_WriteByte( ( ( charCode << 3 ) & 0b00111111 ) | 0b01000
      +                          000 , BOOL_FALSE ) ;
  5014  0E19  01F4               	clrf	ParallelLCD_WriteByte@r
  5015  0E1A  085B               	movf	ParallelLCD_SetCgram@charCode,w
  5016  0E1B  00DA               	movwf	??_ParallelLCD_SetCgram
  5017  0E1C  3002               	movlw	2
  5018  0E1D                     u2465:	
  5019  0E1D  35DA               	lslf	??_ParallelLCD_SetCgram,f
  5020  0E1E  3EFF               	addlw	-1
  5021  0E1F  1D03               	skipz
  5022  0E20  2E1D               	goto	u2465
  5023  0E21  355A               	lslf	??_ParallelLCD_SetCgram,w
  5024  0E22  393F               	andlw	63
  5025  0E23  3840               	iorlw	64
  5026  0E24  318A  225A  318E   	fcall	_ParallelLCD_WriteByte
  5027                           
  5028                           ;ParallelLCD.h: 145: for ( Uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  5029  0E27  0020               	movlb	0	; select bank0
  5030  0E28  01DC               	clrf	ParallelLCD_SetCgram@i
  5031  0E29                     L41:	
  5032  0E29  3008               	movlw	8
  5033  0E2A  065C               	xorwf	ParallelLCD_SetCgram@i,w
  5034  0E2B  1903               	btfsc	3,2
  5035  0E2C  0008               	return
  5036                           
  5037                           ;ParallelLCD.h: 146: ParallelLCD_WriteByte( *bitmap , BOOL_TRUE ) ;
  5038  0E2D  01F4               	clrf	ParallelLCD_WriteByte@r
  5039  0E2E  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5040  0E2F  0858               	movf	ParallelLCD_SetCgram@bitmap,w
  5041  0E30  0084               	movwf	4
  5042  0E31  0859               	movf	ParallelLCD_SetCgram@bitmap+1,w
  5043  0E32  0085               	movwf	5
  5044  0E33  0800               	movf	0,w	;code access
  5045  0E34  318A  225A  318E   	fcall	_ParallelLCD_WriteByte
  5046  0E37  3001               	movlw	1
  5047  0E38  0020               	movlb	0	; select bank0
  5048  0E39  00DA               	movwf	??_ParallelLCD_SetCgram
  5049  0E3A  085A               	movf	??_ParallelLCD_SetCgram,w
  5050  0E3B  07DC               	addwf	ParallelLCD_SetCgram@i,f
  5051  0E3C  3001               	movlw	1
  5052  0E3D  07D8               	addwf	ParallelLCD_SetCgram@bitmap,f
  5053  0E3E  3000               	movlw	0
  5054  0E3F  3DD9               	addwfc	ParallelLCD_SetCgram@bitmap+1,f
  5055  0E40  2E29               	goto	L41
  5056  0E41                     __end_of_ParallelLCD_SetCgram:	
  5057                           
  5058                           	psect	text7
  5059  0DCF                     __ptext7:	
  5060 ;; *************** function _ParallelLCD_Initialize *****************
  5061 ;; Defined at:
  5062 ;;		line 76 in file "src/../../_Common/ParallelLCD.h"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  configFuncti    1    wreg     enum E2783
  5065 ;;  configDispla    1    0[BANK0 ] enum E2789
  5066 ;;  configCursor    1    1[BANK0 ] enum E2795
  5067 ;;  configEntryM    1    2[BANK0 ] enum E2800
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  configFuncti    1    3[BANK0 ] enum E2783
  5070 ;; Return value:  Size  Location     Type
  5071 ;;		None               void
  5072 ;; Registers used:
  5073 ;;		wreg, status,2, status,0, pclath, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5079 ;;      Params:         0       3       0       0       0       0
  5080 ;;      Locals:         0       1       0       0       0       0
  5081 ;;      Temps:          0       0       0       0       0       0
  5082 ;;      Totals:         0       4       0       0       0       0
  5083 ;;Total ram usage:        4 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    2
  5086 ;; This function calls:
  5087 ;;		_ParallelLCD_WriteByte
  5088 ;; This function is called by:
  5089 ;;		_main
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           
  5094                           ;psect for function _ParallelLCD_Initialize
  5095  0DCF                     _ParallelLCD_Initialize:	
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _ParallelLCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5099                           ;ParallelLCD_Initialize@configFunction stored from wreg
  5100  0DCF  0020               	movlb	0	; select bank0
  5101  0DD0  00DB               	movwf	ParallelLCD_Initialize@configFunction
  5102                           
  5103                           ;ParallelLCD.h: 82: ParallelLCD_WriteByte( ( configFunction & 0x1C ) | 0x20 , BOOL_FALSE
      +                           ) ;
  5104  0DD1  01F4               	clrf	ParallelLCD_WriteByte@r
  5105  0DD2  085B               	movf	ParallelLCD_Initialize@configFunction,w
  5106  0DD3  391C               	andlw	28
  5107  0DD4  3820               	iorlw	32
  5108  0DD5  318A  225A  318D   	fcall	_ParallelLCD_WriteByte
  5109                           
  5110                           ;ParallelLCD.h: 83: ParallelLCD_WriteByte( ( configDisplay & 0x0C ) | 0x08 , BOOL_FALSE 
      +                          ) ;
  5111  0DD8  01F4               	clrf	ParallelLCD_WriteByte@r
  5112  0DD9  0020               	movlb	0	; select bank0
  5113  0DDA  0858               	movf	ParallelLCD_Initialize@configDisplay,w
  5114  0DDB  390C               	andlw	12
  5115  0DDC  3808               	iorlw	8
  5116  0DDD  318A  225A  318D   	fcall	_ParallelLCD_WriteByte
  5117                           
  5118                           ;ParallelLCD.h: 84: ParallelLCD_WriteByte( ( configCursor & 0x07 ) | 0x10 , BOOL_FALSE )
      +                           ;
  5119  0DE0  01F4               	clrf	ParallelLCD_WriteByte@r
  5120  0DE1  0020               	movlb	0	; select bank0
  5121  0DE2  0859               	movf	ParallelLCD_Initialize@configCursor,w
  5122  0DE3  3907               	andlw	7
  5123  0DE4  3810               	iorlw	16
  5124  0DE5  318A  225A  318D   	fcall	_ParallelLCD_WriteByte
  5125                           
  5126                           ;ParallelLCD.h: 85: ParallelLCD_WriteByte( ( configEntryMode & 0x03 ) | 0x04 , BOOL_FALS
      +                          E ) ;
  5127  0DE8  01F4               	clrf	ParallelLCD_WriteByte@r
  5128  0DE9  0020               	movlb	0	; select bank0
  5129  0DEA  085A               	movf	ParallelLCD_Initialize@configEntryMode,w
  5130  0DEB  3903               	andlw	3
  5131  0DEC  3804               	iorlw	4
  5132  0DED  318A  225A         	fcall	_ParallelLCD_WriteByte
  5133  0DEF  0008               	return
  5134  0DF0                     __end_of_ParallelLCD_Initialize:	
  5135                           
  5136                           	psect	text8
  5137  07F6                     __ptext8:	
  5138 ;; *************** function _ParallelLCD_ClearDisplay *****************
  5139 ;; Defined at:
  5140 ;;		line 151 in file "src/../../_Common/ParallelLCD.h"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;		None               void
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5154 ;;      Params:         0       0       0       0       0       0
  5155 ;;      Locals:         0       0       0       0       0       0
  5156 ;;      Temps:          0       0       0       0       0       0
  5157 ;;      Totals:         0       0       0       0       0       0
  5158 ;;Total ram usage:        0 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    3
  5161 ;; This function calls:
  5162 ;;		_ParallelLCD_ClearRow
  5163 ;; This function is called by:
  5164 ;;		_main
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           
  5169                           ;psect for function _ParallelLCD_ClearDisplay
  5170  07F6                     _ParallelLCD_ClearDisplay:	
  5171                           
  5172                           ;ParallelLCD.h: 152: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_0 ) ;
  5173                           
  5174                           ;incstack = 0
  5175                           ; Regs used in _ParallelLCD_ClearDisplay: [wreg+status,2+status,0+pclath+cstack]
  5176  07F6  3080               	movlw	128
  5177  07F7  318A  2240  3187   	fcall	_ParallelLCD_ClearRow
  5178                           
  5179                           ;ParallelLCD.h: 153: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  5180  07FA  30C0               	movlw	192
  5181  07FB  318A  2240         	fcall	_ParallelLCD_ClearRow
  5182  07FD  0008               	return
  5183  07FE                     __end_of_ParallelLCD_ClearDisplay:	
  5184                           
  5185                           	psect	text9
  5186  0A40                     __ptext9:	
  5187 ;; *************** function _ParallelLCD_ClearRow *****************
  5188 ;; Defined at:
  5189 ;;		line 127 in file "src/../../_Common/ParallelLCD.h"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  rowSelect       1    wreg     enum E2805
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  rowSelect       1    1[BANK0 ] enum E2805
  5194 ;;  i               1    2[BANK0 ] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;		None               void
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5204 ;;      Params:         0       0       0       0       0       0
  5205 ;;      Locals:         0       2       0       0       0       0
  5206 ;;      Temps:          0       1       0       0       0       0
  5207 ;;      Totals:         0       3       0       0       0       0
  5208 ;;Total ram usage:        3 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    2
  5211 ;; This function calls:
  5212 ;;		_ParallelLCD_WriteByte
  5213 ;; This function is called by:
  5214 ;;		_ParallelLCD_ClearDisplay
  5215 ;;		_main
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           
  5220                           ;psect for function _ParallelLCD_ClearRow
  5221  0A40                     _ParallelLCD_ClearRow:	
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _ParallelLCD_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  5225                           ;ParallelLCD_ClearRow@rowSelect stored from wreg
  5226  0A40  0020               	movlb	0	; select bank0
  5227  0A41  00D9               	movwf	ParallelLCD_ClearRow@rowSelect
  5228                           
  5229                           ;ParallelLCD.h: 128: ParallelLCD_WriteByte( rowSelect & 0xF0 , BOOL_FALSE ) ;
  5230  0A42  01F4               	clrf	ParallelLCD_WriteByte@r
  5231  0A43  0859               	movf	ParallelLCD_ClearRow@rowSelect,w
  5232  0A44  39F0               	andlw	240
  5233  0A45  318A  225A  318A   	fcall	_ParallelLCD_WriteByte
  5234                           
  5235                           ;ParallelLCD.h: 129: for ( Uint08_t i = 0 ; i != 16 ; i++ )
  5236  0A48  0020               	movlb	0	; select bank0
  5237  0A49  01DA               	clrf	ParallelLCD_ClearRow@i
  5238  0A4A                     L42:	
  5239  0A4A  3010               	movlw	16
  5240  0A4B  065A               	xorwf	ParallelLCD_ClearRow@i,w
  5241  0A4C  1903               	btfsc	3,2
  5242  0A4D  0008               	return
  5243                           
  5244                           ;ParallelLCD.h: 130: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  5245  0A4E  01F4               	clrf	ParallelLCD_WriteByte@r
  5246  0A4F  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5247  0A50  3020               	movlw	32
  5248  0A51  318A  225A  318A   	fcall	_ParallelLCD_WriteByte
  5249  0A54  3001               	movlw	1
  5250  0A55  0020               	movlb	0	; select bank0
  5251  0A56  00D8               	movwf	??_ParallelLCD_ClearRow
  5252  0A57  0858               	movf	??_ParallelLCD_ClearRow,w
  5253  0A58  07DA               	addwf	ParallelLCD_ClearRow@i,f
  5254  0A59  2A4A               	goto	L42
  5255  0A5A                     __end_of_ParallelLCD_ClearRow:	
  5256                           
  5257                           	psect	text10
  5258  0A5A                     __ptext10:	
  5259 ;; *************** function _ParallelLCD_WriteByte *****************
  5260 ;; Defined at:
  5261 ;;		line 164 in file "src/../../_Common/ParallelLCD.h"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  data            1    wreg     unsigned char 
  5264 ;;  r               1    4[COMMON] enum E2778
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;  data            1    5[COMMON] unsigned char 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;		None               void
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5276 ;;      Params:         1       0       0       0       0       0
  5277 ;;      Locals:         1       0       0       0       0       0
  5278 ;;      Temps:          0       0       0       0       0       0
  5279 ;;      Totals:         2       0       0       0       0       0
  5280 ;;Total ram usage:        2 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    1
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_ParallelLCD_Initialize
  5287 ;;		_ParallelLCD_WriteCharacter
  5288 ;;		_ParallelLCD_WriteString
  5289 ;;		_ParallelLCD_WriteStringClearing
  5290 ;;		_ParallelLCD_ClearRow
  5291 ;;		_ParallelLCD_SetCgram
  5292 ;;		_ParallelLCD_WriteHexNumber
  5293 ;;		_ParallelLCD_ClearPartial
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _ParallelLCD_WriteByte
  5299  0A5A                     _ParallelLCD_WriteByte:	
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _ParallelLCD_WriteByte: [wreg+status,2+status,0]
  5303                           ;ParallelLCD_WriteByte@data stored from wreg
  5304  0A5A  00F5               	movwf	ParallelLCD_WriteByte@data
  5305  0A5B                     l147:	
  5306                           ;ParallelLCD.h: 165: {while(!PIR3bits.TMR4IF);} ;
  5307                           
  5308  0A5B  0020               	movlb	0	; select bank0
  5309  0A5C  1C93               	btfss	19,1	;volatile
  5310  0A5D  2A5B               	goto	l147
  5311                           
  5312                           ;ParallelLCD.h: 166: {LATB=data;} ;
  5313  0A5E  0875               	movf	ParallelLCD_WriteByte@data,w
  5314  0A5F  0022               	movlb	2	; select bank2
  5315  0A60  008D               	movwf	13	;volatile
  5316                           
  5317                           ;ParallelLCD.h: 167: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  5318  0A61  0874               	movf	ParallelLCD_WriteByte@r,w
  5319  0A62  1903               	btfsc	3,2
  5320  0A63  2A66               	goto	l150
  5321  0A64  148C               	bsf	12,1	;volatile
  5322  0A65  2A67               	goto	l151
  5323  0A66                     l150:	
  5324  0A66  108C               	bcf	12,1	;volatile
  5325  0A67                     l151:	
  5326                           
  5327                           ;ParallelLCD.h: 168: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  5328  0A67  140C               	bsf	12,0	;volatile
  5329  0A68  0000               	nop
  5330  0A69  0022               	movlb	2	; select bank2
  5331  0A6A  100C               	bcf	12,0	;volatile
  5332                           
  5333                           ;ParallelLCD.h: 169: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  5334  0A6B  0028               	movlb	8	; select bank8
  5335  0A6C  0195               	clrf	21	;volatile
  5336  0A6D  0020               	movlb	0	; select bank0
  5337  0A6E  1093               	bcf	19,1	;volatile
  5338  0A6F  0008               	return
  5339  0A70                     __end_of_ParallelLCD_WriteByte:	
  5340                           
  5341                           	psect	text11
  5342  0F5F                     __ptext11:	
  5343 ;; *************** function _Configuration_Save *****************
  5344 ;; Defined at:
  5345 ;;		line 70 in file "src/configuration.h"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  config          1    wreg     PTR struct .
  5348 ;;		 -> configration_(13), 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  config          1    5[BANK0 ] PTR struct .
  5351 ;;		 -> configration_(13), 
  5352 ;;  i               1    4[BANK0 ] unsigned char 
  5353 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  5354 ;;		 -> configration_(13), 
  5355 ;;  returnCode      1    2[BANK0 ] enum E2863
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      enum E2863
  5358 ;; Registers used:
  5359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5365 ;;      Params:         0       0       0       0       0       0
  5366 ;;      Locals:         0       4       0       0       0       0
  5367 ;;      Temps:          0       2       0       0       0       0
  5368 ;;      Totals:         0       6       0       0       0       0
  5369 ;;Total ram usage:        6 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    2
  5372 ;; This function calls:
  5373 ;;		_Configuration_ReadByte
  5374 ;;		_Configuration_WriteByte
  5375 ;; This function is called by:
  5376 ;;		_main
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _Configuration_Save
  5382  0F5F                     _Configuration_Save:	
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _Configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5386                           ;Configuration_Save@config stored from wreg
  5387  0F5F  0020               	movlb	0	; select bank0
  5388  0F60  00DD               	movwf	Configuration_Save@config
  5389                           
  5390                           ;configuration.h: 72: EepromData_t* ptrConfig = (EepromData_t*) config ;
  5391  0F61  085D               	movf	Configuration_Save@config,w
  5392  0F62  00D8               	movwf	??_Configuration_Save
  5393  0F63  0858               	movf	??_Configuration_Save,w
  5394  0F64  00DB               	movwf	Configuration_Save@ptrConfig
  5395                           
  5396                           ;configuration.h: 73: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5397  0F65  01DA               	clrf	Configuration_Save@returnCode
  5398                           
  5399                           ;configuration.h: 76: INTCONbits.GIE=0; ;
  5400  0F66  138B               	bcf	11,7	;volatile
  5401                           
  5402                           ;configuration.h: 79: config->romOffset = Configuration_ReadByte( 0x00 , MEMORY_SELECT_E
      +                          EPROM ) ;
  5403  0F67  01F4               	clrf	Configuration_ReadByte@memorySelect
  5404  0F68  3000               	movlw	0
  5405  0F69  318A  2294  318F   	fcall	_Configuration_ReadByte
  5406  0F6C  0020               	movlb	0	; select bank0
  5407  0F6D  00D8               	movwf	??_Configuration_Save
  5408  0F6E  0A5D               	incf	Configuration_Save@config,w
  5409  0F6F  0086               	movwf	6
  5410  0F70  0187               	clrf	7
  5411  0F71  0858               	movf	??_Configuration_Save,w
  5412  0F72  0081               	movwf	1
  5413                           
  5414                           ;configuration.h: 82: config->writeCount = Configuration_ReadByte( config->romOffset , M
      +                          EMORY_SELECT_EEPROM ) ;
  5415  0F73  01F4               	clrf	Configuration_ReadByte@memorySelect
  5416  0F74  0A5D               	incf	Configuration_Save@config,w
  5417  0F75  0086               	movwf	6
  5418  0F76  0187               	clrf	7
  5419  0F77  0801               	movf	1,w
  5420  0F78  318A  2294  318F   	fcall	_Configuration_ReadByte
  5421  0F7B  0020               	movlb	0	; select bank0
  5422  0F7C  00D8               	movwf	??_Configuration_Save
  5423  0F7D  085D               	movf	Configuration_Save@config,w
  5424  0F7E  0086               	movwf	6
  5425  0F7F  0187               	clrf	7
  5426  0F80  0858               	movf	??_Configuration_Save,w
  5427  0F81  0081               	movwf	1
  5428                           
  5429                           ;configuration.h: 85: if ( ++config->writeCount == 1 ) {
  5430  0F82  3001               	movlw	1
  5431  0F83  00D8               	movwf	??_Configuration_Save
  5432  0F84  085D               	movf	Configuration_Save@config,w
  5433  0F85  0086               	movwf	6
  5434  0F86  0187               	clrf	7
  5435  0F87  0858               	movf	??_Configuration_Save,w
  5436  0F88  0781               	addwf	1,f
  5437  0F89  0301               	decf	1,w
  5438  0F8A  1D03               	btfss	3,2
  5439  0F8B  2F98               	goto	l3252
  5440                           
  5441                           ;configuration.h: 86: config->romOffset += sizeof(ConfigurationData) ;
  5442  0F8C  300D               	movlw	13
  5443  0F8D  00D8               	movwf	??_Configuration_Save
  5444  0F8E  0A5D               	incf	Configuration_Save@config,w
  5445  0F8F  0086               	movwf	6
  5446  0F90  0187               	clrf	7
  5447  0F91  0858               	movf	??_Configuration_Save,w
  5448  0F92  0781               	addwf	1,f
  5449                           
  5450                           ;configuration.h: 87: config->writeCount = 1 ;
  5451  0F93  085D               	movf	Configuration_Save@config,w
  5452  0F94  0086               	movwf	6
  5453  0F95  0187               	clrf	7
  5454  0F96  0181               	clrf	1
  5455  0F97  0A81               	incf	1,f
  5456  0F98                     l3252:	
  5457                           
  5458                           ;configuration.h: 88: }
  5459                           ;configuration.h: 90: if ( config->romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5460  0F98  0A5D               	incf	Configuration_Save@config,w
  5461  0F99  0086               	movwf	6
  5462  0F9A  0187               	clrf	7
  5463  0F9B  30F3               	movlw	243
  5464  0F9C  0201               	subwf	1,w
  5465  0F9D  1C03               	skipc
  5466  0F9E  2FA4               	goto	l3256
  5467                           
  5468                           ;configuration.h: 91: config->romOffset = 1 ;
  5469  0F9F  0A5D               	incf	Configuration_Save@config,w
  5470  0FA0  0086               	movwf	6
  5471  0FA1  0187               	clrf	7
  5472  0FA2  0181               	clrf	1
  5473  0FA3  0A81               	incf	1,f
  5474  0FA4                     l3256:	
  5475                           
  5476                           ;configuration.h: 94: EECON1bits.WREN=1; ;
  5477  0FA4  0023               	movlb	3	; select bank3
  5478  0FA5  1515               	bsf	21,2	;volsfr
  5479                           
  5480                           ;configuration.h: 96: config->checkSum = 0x00 ;
  5481  0FA6  0020               	movlb	0	; select bank0
  5482  0FA7  085D               	movf	Configuration_Save@config,w
  5483  0FA8  3E0C               	addlw	12
  5484  0FA9  0086               	movwf	6
  5485  0FAA  0187               	clrf	7
  5486  0FAB  0181               	clrf	1
  5487                           
  5488                           ;configuration.h: 99: for ( Uint08_t i = 0 ; i < sizeof(ConfigurationData) ; i++ ) {
  5489  0FAC  01DC               	clrf	Configuration_Save@i
  5490  0FAD  2FB3               	goto	L43
  5491  0FAE                     l3274:	
  5492                           ;configuration.h: 104: break ;
  5493                           
  5494  0FAE  3001               	movlw	1
  5495  0FAF  0020               	movlb	0	; select bank0
  5496  0FB0  00D8               	movwf	??_Configuration_Save
  5497  0FB1  0858               	movf	??_Configuration_Save,w
  5498  0FB2  07DC               	addwf	Configuration_Save@i,f
  5499  0FB3                     L43:	
  5500  0FB3  300D               	movlw	13
  5501  0FB4  025C               	subwf	Configuration_Save@i,w
  5502  0FB5  1803               	btfsc	3,0
  5503  0FB6  2FE0               	goto	l3278
  5504                           
  5505                           ;configuration.h: 100: Configuration_WriteByte( config->romOffset + i , ptrConfig[i] ) ;
  5506  0FB7  085C               	movf	Configuration_Save@i,w
  5507  0FB8  075B               	addwf	Configuration_Save@ptrConfig,w
  5508  0FB9  00D8               	movwf	??_Configuration_Save
  5509  0FBA  0858               	movf	??_Configuration_Save,w
  5510  0FBB  0086               	movwf	6
  5511  0FBC  0187               	clrf	7
  5512  0FBD  0801               	movf	1,w
  5513  0FBE  00D9               	movwf	??_Configuration_Save+1
  5514  0FBF  0859               	movf	??_Configuration_Save+1,w
  5515  0FC0  00F4               	movwf	Configuration_WriteByte@data
  5516  0FC1  0A5D               	incf	Configuration_Save@config,w
  5517  0FC2  0086               	movwf	6
  5518  0FC3  0187               	clrf	7
  5519  0FC4  0801               	movf	1,w
  5520  0FC5  075C               	addwf	Configuration_Save@i,w
  5521  0FC6  318A  2282  318F   	fcall	_Configuration_WriteByte
  5522                           
  5523                           ;configuration.h: 101: config->checkSum ^= ptrConfig[i] ;
  5524  0FC9  0020               	movlb	0	; select bank0
  5525  0FCA  085C               	movf	Configuration_Save@i,w
  5526  0FCB  075B               	addwf	Configuration_Save@ptrConfig,w
  5527  0FCC  00D8               	movwf	??_Configuration_Save
  5528  0FCD  0858               	movf	??_Configuration_Save,w
  5529  0FCE  0086               	movwf	6
  5530  0FCF  0187               	clrf	7
  5531  0FD0  0801               	movf	1,w
  5532  0FD1  00D9               	movwf	??_Configuration_Save+1
  5533  0FD2  085D               	movf	Configuration_Save@config,w
  5534  0FD3  3E0C               	addlw	12
  5535  0FD4  0086               	movwf	6
  5536  0FD5  0187               	clrf	7
  5537  0FD6  0859               	movf	??_Configuration_Save+1,w
  5538  0FD7  0681               	xorwf	1,f
  5539                           
  5540                           ;configuration.h: 102: if ( EECON1bits.WRERR ) {
  5541  0FD8  0023               	movlb	3	; select bank3
  5542  0FD9  1D95               	btfss	21,3	;volsfr
  5543  0FDA  2FAE               	goto	l3274
  5544                           
  5545                           ;configuration.h: 103: returnCode = RETURN_CODE_WRITE_ERROR ;
  5546  0FDB  3010               	movlw	16
  5547  0FDC  0020               	movlb	0	; select bank0
  5548  0FDD  00D8               	movwf	??_Configuration_Save
  5549  0FDE  0858               	movf	??_Configuration_Save,w
  5550  0FDF  00DA               	movwf	Configuration_Save@returnCode
  5551  0FE0                     l3278:	
  5552                           
  5553                           ;configuration.h: 105: }
  5554                           ;configuration.h: 106: }
  5555                           ;configuration.h: 109: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5556  0FE0  085D               	movf	Configuration_Save@config,w
  5557  0FE1  0086               	movwf	6
  5558  0FE2  0187               	clrf	7
  5559  0FE3  0301               	decf	1,w
  5560  0FE4  1D03               	btfss	3,2
  5561  0FE5  2FFB               	goto	l3288
  5562  0FE6  0023               	movlb	3	; select bank3
  5563  0FE7  1995               	btfsc	21,3	;volsfr
  5564  0FE8  2FFB               	goto	l3288
  5565                           
  5566                           ;configuration.h: 110: Configuration_WriteByte( 0x00 , config->romOffset ) ;
  5567  0FE9  0020               	movlb	0	; select bank0
  5568  0FEA  085D               	movf	Configuration_Save@config,w
  5569  0FEB  0086               	movwf	6
  5570  0FEC  0187               	clrf	7
  5571  0FED  3F41               	moviw [1]fsr1
  5572  0FEE  00F4               	movwf	Configuration_WriteByte@data
  5573  0FEF  3000               	movlw	0
  5574  0FF0  318A  2282  318F   	fcall	_Configuration_WriteByte
  5575                           
  5576                           ;configuration.h: 111: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5577  0FF3  0023               	movlb	3	; select bank3
  5578  0FF4  1D95               	btfss	21,3	;volsfr
  5579  0FF5  2FFB               	goto	l3288
  5580  0FF6  3010               	movlw	16
  5581  0FF7  0020               	movlb	0	; select bank0
  5582  0FF8  00D8               	movwf	??_Configuration_Save
  5583  0FF9  0858               	movf	??_Configuration_Save,w
  5584  0FFA  00DA               	movwf	Configuration_Save@returnCode
  5585  0FFB                     l3288:	
  5586                           
  5587                           ;configuration.h: 112: }
  5588                           ;configuration.h: 115: EECON1bits.WREN=0; ;
  5589  0FFB  0023               	movlb	3	; select bank3
  5590  0FFC  1115               	bcf	21,2	;volsfr
  5591                           
  5592                           ;configuration.h: 118: INTCONbits.GIE=1; ;
  5593  0FFD  178B               	bsf	11,7	;volatile
  5594                           
  5595                           ;configuration.h: 120: return RETURN_CODE_NOERROR ;
  5596  0FFE  3000               	movlw	0
  5597  0FFF  0008               	return
  5598  1000                     __end_of_Configuration_Save:	
  5599                           
  5600                           	psect	text12
  5601  0A82                     __ptext12:	
  5602 ;; *************** function _Configuration_WriteByte *****************
  5603 ;; Defined at:
  5604 ;;		line 158 in file "src/configuration.h"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  address         1    wreg     unsigned char 
  5607 ;;  data            1    4[COMMON] unsigned char 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  address         1    5[COMMON] unsigned char 
  5610 ;; Return value:  Size  Location     Type
  5611 ;;		None               void
  5612 ;; Registers used:
  5613 ;;		wreg, status,2
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5619 ;;      Params:         1       0       0       0       0       0
  5620 ;;      Locals:         1       0       0       0       0       0
  5621 ;;      Temps:          0       0       0       0       0       0
  5622 ;;      Totals:         2       0       0       0       0       0
  5623 ;;Total ram usage:        2 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; Hardware stack levels required when called:    1
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_Configuration_Save
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           
  5634                           ;psect for function _Configuration_WriteByte
  5635  0A82                     _Configuration_WriteByte:	
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _Configuration_WriteByte: [wreg+status,2]
  5639                           ;Configuration_WriteByte@address stored from wreg
  5640  0A82  00F5               	movwf	Configuration_WriteByte@address
  5641                           
  5642                           ;configuration.h: 159: EEADRH=0x00;EEADRL=(address); ;
  5643  0A83  0023               	movlb	3	; select bank3
  5644  0A84  0192               	clrf	18	;volatile
  5645  0A85  0875               	movf	Configuration_WriteByte@address,w
  5646  0A86  0091               	movwf	17	;volatile
  5647                           
  5648                           ;configuration.h: 160: EEDATH=0x00;EEDATL=(data); ;
  5649  0A87  0194               	clrf	20	;volatile
  5650  0A88  0874               	movf	Configuration_WriteByte@data,w
  5651  0A89  0093               	movwf	19	;volatile
  5652                           
  5653                           ;configuration.h: 161: EECON2=0x55;EECON2=0xAA; ;
  5654  0A8A  3055               	movlw	85
  5655  0A8B  0096               	movwf	22	;volsfr
  5656  0A8C  30AA               	movlw	170
  5657  0A8D  0096               	movwf	22	;volsfr
  5658                           
  5659                           ;configuration.h: 162: EECON1bits.WR=1; ;
  5660  0A8E  1495               	bsf	21,1	;volsfr
  5661  0A8F                     l172:	
  5662                           ;configuration.h: 163: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5663                           
  5664  0A8F  0020               	movlb	0	; select bank0
  5665  0A90  1E12               	btfss	18,4	;volatile
  5666  0A91  2A8F               	goto	l172
  5667  0A92  1212               	bcf	18,4	;volatile
  5668  0A93  0008               	return
  5669  0A94                     __end_of_Configuration_WriteByte:	
  5670                           
  5671                           	psect	text13
  5672  0F04                     __ptext13:	
  5673 ;; *************** function _Configuration_Load *****************
  5674 ;; Defined at:
  5675 ;;		line 126 in file "src/configuration.h"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  config          1    wreg     PTR struct .
  5678 ;;		 -> configration_(13), 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  config          1    4[BANK0 ] PTR struct .
  5681 ;;		 -> configration_(13), 
  5682 ;;  i               1    3[BANK0 ] unsigned char 
  5683 ;;  ptrConfig       1    2[BANK0 ] PTR unsigned char 
  5684 ;;		 -> configration_(13), 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      enum E2863
  5687 ;; Registers used:
  5688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5694 ;;      Params:         0       0       0       0       0       0
  5695 ;;      Locals:         0       3       0       0       0       0
  5696 ;;      Temps:          0       2       0       0       0       0
  5697 ;;      Totals:         0       5       0       0       0       0
  5698 ;;Total ram usage:        5 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    2
  5701 ;; This function calls:
  5702 ;;		_Configuration_ReadByte
  5703 ;; This function is called by:
  5704 ;;		_main
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _Configuration_Load
  5710  0F04                     _Configuration_Load:	
  5711                           
  5712                           ;incstack = 0
  5713                           ; Regs used in _Configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5714                           ;Configuration_Load@config stored from wreg
  5715  0F04  0020               	movlb	0	; select bank0
  5716  0F05  00DC               	movwf	Configuration_Load@config
  5717                           
  5718                           ;configuration.h: 128: EepromData_t* ptrConfig = (EepromData_t*) config ;
  5719  0F06  085C               	movf	Configuration_Load@config,w
  5720  0F07  00D8               	movwf	??_Configuration_Load
  5721  0F08  0858               	movf	??_Configuration_Load,w
  5722  0F09  00DA               	movwf	Configuration_Load@ptrConfig
  5723                           
  5724                           ;configuration.h: 131: INTCONbits.GIE=0; ;
  5725  0F0A  138B               	bcf	11,7	;volatile
  5726                           
  5727                           ;configuration.h: 134: config->romOffset = Configuration_ReadByte( 0x00 , MEMORY_SELECT_
      +                          EEPROM ) ;
  5728  0F0B  01F4               	clrf	Configuration_ReadByte@memorySelect
  5729  0F0C  3000               	movlw	0
  5730  0F0D  318A  2294  318F   	fcall	_Configuration_ReadByte
  5731  0F10  0020               	movlb	0	; select bank0
  5732  0F11  00D8               	movwf	??_Configuration_Load
  5733  0F12  0A5C               	incf	Configuration_Load@config,w
  5734  0F13  0086               	movwf	6
  5735  0F14  0187               	clrf	7
  5736  0F15  0858               	movf	??_Configuration_Load,w
  5737  0F16  0081               	movwf	1
  5738                           
  5739                           ;configuration.h: 137: if ( config->romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
      +                           return RETURN_CODE_INVALID_OFFSET ;
  5740  0F17  0A5C               	incf	Configuration_Load@config,w
  5741  0F18  0086               	movwf	6
  5742  0F19  0187               	clrf	7
  5743  0F1A  30F3               	movlw	243
  5744  0F1B  0201               	subwf	1,w
  5745  0F1C  1C03               	skipc
  5746  0F1D  2F20               	goto	l3306
  5747  0F1E  3030               	movlw	48
  5748  0F1F  0008               	return
  5749  0F20                     l3306:	
  5750                           
  5751                           ;configuration.h: 139: config->checkSum = 0x00 ;
  5752  0F20  085C               	movf	Configuration_Load@config,w
  5753  0F21  3E0C               	addlw	12
  5754  0F22  0086               	movwf	6
  5755  0F23  0187               	clrf	7
  5756  0F24  0181               	clrf	1
  5757                           
  5758                           ;configuration.h: 142: for ( Uint08_t i = 0 ; i < sizeof(ConfigurationData) ; i++ ) {
  5759  0F25  01DB               	clrf	Configuration_Load@i
  5760  0F26  300D               	movlw	13
  5761  0F27  025B               	subwf	Configuration_Load@i,w
  5762  0F28  1803               	btfsc	3,0
  5763  0F29  2F53               	goto	l168
  5764  0F2A                     l3314:	
  5765                           
  5766                           ;configuration.h: 143: ptrConfig[i] = Configuration_ReadByte( config->romOffset + i , ME
      +                          MORY_SELECT_EEPROM ) ;
  5767  0F2A  01F4               	clrf	Configuration_ReadByte@memorySelect
  5768  0F2B  0A5C               	incf	Configuration_Load@config,w
  5769  0F2C  0086               	movwf	6
  5770  0F2D  0187               	clrf	7
  5771  0F2E  0801               	movf	1,w
  5772  0F2F  075B               	addwf	Configuration_Load@i,w
  5773  0F30  318A  2294  318F   	fcall	_Configuration_ReadByte
  5774  0F33  0020               	movlb	0	; select bank0
  5775  0F34  00D8               	movwf	??_Configuration_Load
  5776  0F35  085B               	movf	Configuration_Load@i,w
  5777  0F36  075A               	addwf	Configuration_Load@ptrConfig,w
  5778  0F37  00D9               	movwf	??_Configuration_Load+1
  5779  0F38  0859               	movf	??_Configuration_Load+1,w
  5780  0F39  0086               	movwf	6
  5781  0F3A  0187               	clrf	7
  5782  0F3B  0858               	movf	??_Configuration_Load,w
  5783  0F3C  0081               	movwf	1
  5784                           
  5785                           ;configuration.h: 144: config->checkSum ^= ptrConfig[i] ;
  5786  0F3D  085B               	movf	Configuration_Load@i,w
  5787  0F3E  075A               	addwf	Configuration_Load@ptrConfig,w
  5788  0F3F  00D8               	movwf	??_Configuration_Load
  5789  0F40  0858               	movf	??_Configuration_Load,w
  5790  0F41  0086               	movwf	6
  5791  0F42  0187               	clrf	7
  5792  0F43  0801               	movf	1,w
  5793  0F44  00D9               	movwf	??_Configuration_Load+1
  5794  0F45  085C               	movf	Configuration_Load@config,w
  5795  0F46  3E0C               	addlw	12
  5796  0F47  0086               	movwf	6
  5797  0F48  0187               	clrf	7
  5798  0F49  0859               	movf	??_Configuration_Load+1,w
  5799  0F4A  0681               	xorwf	1,f
  5800  0F4B  3001               	movlw	1
  5801  0F4C  00D8               	movwf	??_Configuration_Load
  5802  0F4D  0858               	movf	??_Configuration_Load,w
  5803  0F4E  07DB               	addwf	Configuration_Load@i,f
  5804  0F4F  300D               	movlw	13
  5805  0F50  025B               	subwf	Configuration_Load@i,w
  5806  0F51  1C03               	skipc
  5807  0F52  2F2A               	goto	l3314
  5808  0F53                     l168:	
  5809                           
  5810                           ;configuration.h: 145: }
  5811                           ;configuration.h: 148: INTCONbits.GIE=1; ;
  5812  0F53  178B               	bsf	11,7	;volatile
  5813                           
  5814                           ;configuration.h: 151: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5815  0F54  085C               	movf	Configuration_Load@config,w
  5816  0F55  3E0C               	addlw	12
  5817  0F56  0086               	movwf	6
  5818  0F57  0187               	clrf	7
  5819  0F58  0801               	movf	1,w
  5820  0F59  1903               	btfsc	3,2
  5821  0F5A  2F5D               	goto	l3328
  5822  0F5B  3020               	movlw	32
  5823  0F5C  0008               	return
  5824  0F5D                     l3328:	
  5825                           
  5826                           ;configuration.h: 153: return RETURN_CODE_NOERROR ;
  5827  0F5D  3000               	movlw	0
  5828  0F5E  0008               	return
  5829  0F5F                     __end_of_Configuration_Load:	
  5830                           
  5831                           	psect	text14
  5832  0A94                     __ptext14:	
  5833 ;; *************** function _Configuration_ReadByte *****************
  5834 ;; Defined at:
  5835 ;;		line 168 in file "src/configuration.h"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  address         1    wreg     unsigned char 
  5838 ;;  memorySelect    1    4[COMMON] enum E2869
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  address         1    5[COMMON] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  1    wreg      unsigned char 
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5850 ;;      Params:         1       0       0       0       0       0
  5851 ;;      Locals:         1       0       0       0       0       0
  5852 ;;      Temps:          0       0       0       0       0       0
  5853 ;;      Totals:         2       0       0       0       0       0
  5854 ;;Total ram usage:        2 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    1
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_Configuration_Save
  5861 ;;		_Configuration_Load
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           
  5867                           ;psect for function _Configuration_ReadByte
  5868  0A94                     _Configuration_ReadByte:	
  5869                           
  5870                           ;incstack = 0
  5871                           ; Regs used in _Configuration_ReadByte: [wreg+status,2+status,0]
  5872                           ;Configuration_ReadByte@address stored from wreg
  5873  0A94  00F5               	movwf	Configuration_ReadByte@address
  5874                           
  5875                           ;configuration.h: 169: EEADRH=0x00;EEADRL=(address); ;
  5876  0A95  0023               	movlb	3	; select bank3
  5877  0A96  0192               	clrf	18	;volatile
  5878  0A97  0875               	movf	Configuration_ReadByte@address,w
  5879  0A98  0091               	movwf	17	;volatile
  5880                           
  5881                           ;configuration.h: 170: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5882  0A99  1395               	bcf	21,7	;volsfr
  5883  0A9A  0874               	movf	Configuration_ReadByte@memorySelect,w
  5884  0A9B  1903               	btfsc	3,2
  5885  0A9C  2A9F               	goto	l178
  5886  0A9D  1715               	bsf	21,6	;volsfr
  5887  0A9E  2AA0               	goto	l179
  5888  0A9F                     l178:	
  5889  0A9F  1315               	bcf	21,6	;volsfr
  5890  0AA0                     l179:	
  5891                           
  5892                           ;configuration.h: 171: EECON1bits.RD=1; ;
  5893  0AA0  1415               	bsf	21,0	;volsfr
  5894                           
  5895                           ;configuration.h: 172: __nop() ;
  5896  0AA1  0000               	nop
  5897                           
  5898                           ;configuration.h: 173: __nop() ;
  5899  0AA2  0000               	nop
  5900                           
  5901                           ;configuration.h: 174: return EEDATL ;
  5902  0AA3  0023               	movlb	3	; select bank3
  5903  0AA4  0813               	movf	19,w	;volatile
  5904  0AA5  0008               	return
  5905  0AA6                     __end_of_Configuration_ReadByte:	
  5906                           
  5907                           	psect	intentry
  5908  0004                     __pintentry:	
  5909 ;; *************** function _isr *****************
  5910 ;; Defined at:
  5911 ;;		line 954 in file "src/main.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;		None               void
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5925 ;;      Params:         0       0       0       0       0       0
  5926 ;;      Locals:         0       0       0       0       0       0
  5927 ;;      Temps:          4       0       0       0       0       0
  5928 ;;      Totals:         4       0       0       0       0       0
  5929 ;;Total ram usage:        4 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		Interrupt level 1
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938  0004                     _isr:	
  5939                           
  5940                           ;incstack = 0
  5941                           ; Regs used in _isr: [wreg+status,2+status,0]
  5942  0004  3180               	pagesel	$
  5943  0005  0020               	movlb	0	; select bank0
  5944  0006  087F               	movf	127,w
  5945  0007  00F3               	movwf	??_isr+3
  5946                           
  5947                           ;main.c: 955: if( !PIR3bits.TMR6IF ) return ;
  5948  0008  1D93               	btfss	19,3	;volatile
  5949  0009  2876               	goto	i1l484
  5950                           
  5951                           ;main.c: 956: PIR3bits.TMR6IF = 0 ;
  5952  000A  1193               	bcf	19,3	;volatile
  5953                           
  5954                           ;main.c: 958: static Uint16_t eventPrescaler = 0 ;
  5955                           ;main.c: 961: tempoCounter_ += configration_.tempo ;
  5956  000B  082A               	movf	_configration_+2,w
  5957  000C  00F0               	movwf	??_isr
  5958  000D  082B               	movf	_configration_+3,w
  5959  000E  00F1               	movwf	??_isr+1
  5960  000F  01F2               	clrf	??_isr+2
  5961  0010  0870               	movf	??_isr,w
  5962  0011  07C7               	addwf	_tempoCounter_,f
  5963  0012  0871               	movf	??_isr+1,w
  5964  0013  3DC8               	addwfc	_tempoCounter_+1,f
  5965  0014  0872               	movf	??_isr+2,w
  5966  0015  3DC9               	addwfc	_tempoCounter_+2,f
  5967                           
  5968                           ;main.c: 964: if( !( eventPrescaler & 0x7F ) ) {
  5969  0016  307F               	movlw	127
  5970  0017  0578               	andwf	isr@eventPrescaler,w
  5971  0018  00F0               	movwf	??_isr
  5972  0019  3000               	movlw	0
  5973  001A  0579               	andwf	isr@eventPrescaler+1,w
  5974  001B  00F1               	movwf	??_isr+1
  5975  001C  0870               	movf	??_isr,w
  5976  001D  0471               	iorwf	??_isr+1,w
  5977  001E  1D03               	btfss	3,2
  5978  001F  2833               	goto	i1l2900
  5979                           
  5980                           ;main.c: 965: if( soundDurationCount_.click && !--soundDurationCount_.click && !soundDur
      +                          ationCount_.key )
  5981  0020  084C               	movf	_soundDurationCount_,w
  5982  0021  1903               	btfsc	3,2
  5983  0022  282B               	goto	i1l2894
  5984  0023  3001               	movlw	1
  5985  0024  02CC               	subwf	_soundDurationCount_,f
  5986  0025  1D03               	btfss	3,2
  5987  0026  282B               	goto	i1l2894
  5988  0027  084D               	movf	_soundDurationCount_+1,w
  5989  0028  1D03               	btfss	3,2
  5990  0029  282B               	goto	i1l2894
  5991                           
  5992                           ;main.c: 966: outputEvent_.soundOff=1 ;
  5993  002A  16D4               	bsf	_outputEvent_,5
  5994  002B                     i1l2894:	
  5995                           
  5996                           ;main.c: 967: if( soundDurationCount_.key && ! --soundDurationCount_.key )
  5997  002B  084D               	movf	_soundDurationCount_+1,w
  5998  002C  1903               	btfsc	3,2
  5999  002D  2833               	goto	i1l2900
  6000  002E  3001               	movlw	1
  6001  002F  02CD               	subwf	_soundDurationCount_+1,f
  6002  0030  1D03               	btfss	3,2
  6003  0031  2833               	goto	i1l2900
  6004                           
  6005                           ;main.c: 968: outputEvent_.soundOff=1 ;
  6006  0032  16D4               	bsf	_outputEvent_,5
  6007  0033                     i1l2900:	
  6008                           
  6009                           ;main.c: 969: }
  6010                           ;main.c: 972: if( ++eventPrescaler != 640 ) return ;
  6011  0033  3001               	movlw	1
  6012  0034  07F8               	addwf	isr@eventPrescaler,f
  6013  0035  3000               	movlw	0
  6014  0036  3DF9               	addwfc	isr@eventPrescaler+1,f
  6015  0037  3080               	movlw	128
  6016  0038  0678               	xorwf	isr@eventPrescaler,w
  6017  0039  3002               	movlw	2
  6018  003A  1903               	skipnz
  6019  003B  0679               	xorwf	isr@eventPrescaler+1,w
  6020  003C  1D03               	btfss	3,2
  6021  003D  2876               	goto	i1l484
  6022                           
  6023                           ;main.c: 973: eventPrescaler = 0 ;
  6024  003E  01F8               	clrf	isr@eventPrescaler
  6025  003F  01F9               	clrf	isr@eventPrescaler+1
  6026                           
  6027                           ;main.c: 976: if( stateReturnCounter_ &&! --stateReturnCounter_ ) {
  6028  0040  0856               	movf	_stateReturnCounter_,w
  6029  0041  1903               	btfsc	3,2
  6030  0042  284B               	goto	i1l2912
  6031  0043  3001               	movlw	1
  6032  0044  02D6               	subwf	_stateReturnCounter_,f
  6033  0045  1D03               	btfss	3,2
  6034  0046  284B               	goto	i1l2912
  6035                           
  6036                           ;main.c: 977: outputEvent_.changeState=1 ;
  6037  0047  1454               	bsf	_outputEvent_,0
  6038                           
  6039                           ;main.c: 978: outputEvent_.resetMetronome=1 ;
  6040  0048  1754               	bsf	_outputEvent_,6
  6041                           
  6042                           ;main.c: 979: machineState_ = STATE_METRONOME ;
  6043  0049  01D3               	clrf	_machineState_
  6044  004A  0AD3               	incf	_machineState_,f
  6045  004B                     i1l2912:	
  6046                           
  6047                           ;main.c: 980: }
  6048                           ;main.c: 983: portAState_.byte = (~PORTA&0xE0) ;
  6049  004B  090C               	comf	12,w	;volatile
  6050  004C  39E0               	andlw	224
  6051  004D  00F0               	movwf	??_isr
  6052  004E  0870               	movf	??_isr,w
  6053  004F  00D5               	movwf	_portAState_
  6054                           
  6055                           ;main.c: 985: if( portAState_.keyUp && !portAState_.keyDown ) {
  6056  0050  1BD5               	btfsc	_portAState_,7
  6057  0051  1B55               	btfsc	_portAState_,6
  6058  0052  2861               	goto	i1l2924
  6059                           
  6060                           ;main.c: 986: if( ++keyHoldCount_.Up == 0x40 ) {
  6061  0053  3001               	movlw	1
  6062  0054  00F0               	movwf	??_isr
  6063  0055  0870               	movf	??_isr,w
  6064  0056  07F6               	addwf	_keyHoldCount_,f
  6065  0057  3040               	movlw	64
  6066  0058  0676               	xorwf	_keyHoldCount_,w
  6067  0059  1D03               	btfss	3,2
  6068  005A  2862               	goto	i1l2926
  6069                           
  6070                           ;main.c: 987: keyHoldCount_.Up = 0x3C ;
  6071  005B  303C               	movlw	60
  6072  005C  00F0               	movwf	??_isr
  6073  005D  0870               	movf	??_isr,w
  6074  005E  00F6               	movwf	_keyHoldCount_
  6075                           
  6076                           ;main.c: 988: inputEvent_.keyPressHeldUp=1 ;
  6077  005F  1651               	bsf	_inputEvent_,4
  6078                           
  6079                           ;main.c: 989: }
  6080                           ;main.c: 990: }
  6081  0060  2862               	goto	i1l2926
  6082  0061                     i1l2924:	
  6083                           
  6084                           ;main.c: 991: else
  6085                           ;main.c: 992: keyHoldCount_.Up = 0 ;
  6086  0061  01F6               	clrf	_keyHoldCount_
  6087  0062                     i1l2926:	
  6088                           
  6089                           ;main.c: 994: if( portAState_.keyDown && !portAState_.keyUp ) {
  6090  0062  1B55               	btfsc	_portAState_,6
  6091  0063  1BD5               	btfsc	_portAState_,7
  6092  0064  2873               	goto	i1l2936
  6093                           
  6094                           ;main.c: 995: if( ++keyHoldCount_.Down == 0x40 ) {
  6095  0065  3001               	movlw	1
  6096  0066  00F0               	movwf	??_isr
  6097  0067  0870               	movf	??_isr,w
  6098  0068  07F7               	addwf	_keyHoldCount_+1,f
  6099  0069  3040               	movlw	64
  6100  006A  0677               	xorwf	_keyHoldCount_+1,w
  6101  006B  1D03               	btfss	3,2
  6102  006C  2874               	goto	i1l2938
  6103                           
  6104                           ;main.c: 996: keyHoldCount_.Down = 0x3C ;
  6105  006D  303C               	movlw	60
  6106  006E  00F0               	movwf	??_isr
  6107  006F  0870               	movf	??_isr,w
  6108  0070  00F7               	movwf	_keyHoldCount_+1
  6109                           
  6110                           ;main.c: 997: inputEvent_.keyPressHeldDown=1 ;
  6111  0071  16D1               	bsf	_inputEvent_,5
  6112                           
  6113                           ;main.c: 998: }
  6114                           ;main.c: 999: }
  6115  0072  2874               	goto	i1l2938
  6116  0073                     i1l2936:	
  6117                           
  6118                           ;main.c: 1000: else
  6119                           ;main.c: 1001: keyHoldCount_.Down = 0 ;
  6120  0073  01F7               	clrf	_keyHoldCount_+1
  6121  0074                     i1l2938:	
  6122                           
  6123                           ;main.c: 1003: if( PIR3bits.TMR6IF ) asm("reset") ;
  6124  0074  1993               	btfsc	19,3	;volatile
  6125  0075  0001               	reset	;# 
  6126  0076                     i1l484:	
  6127  0076  0873               	movf	??_isr+3,w
  6128  0077  0020               	movlb	0	; select bank0
  6129  0078  00FF               	movwf	127
  6130  0079  0009               	retfie
  6131  007A                     __end_of_isr:	
  6132  007E                     btemp	set	126	;btemp
  6133  007E                     wtemp	set	126
  6134  007E                     wtemp0	set	126
  6135  0080                     wtemp1	set	128
  6136  0082                     wtemp2	set	130
  6137  0084                     wtemp3	set	132
  6138  0086                     wtemp4	set	134
  6139  0088                     wtemp5	set	136
  6140  007F                     wtemp6	set	127
  6141  007E                     ttemp	set	126
  6142  007E                     ttemp0	set	126
  6143  0081                     ttemp1	set	129
  6144  0084                     ttemp2	set	132
  6145  0087                     ttemp3	set	135
  6146  007F                     ttemp4	set	127
  6147  007E                     ltemp	set	126
  6148  007E                     ltemp0	set	126
  6149  0082                     ltemp1	set	130
  6150  0086                     ltemp2	set	134
  6151  0080                     ltemp3	set	128


Data Sizes:
    Strings     307
    Constant    64
    Data        180
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     10      66
    BANK1            80      0      79
    BANK2            80     15      77
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    currentSingleMessage_	PTR const unsigned char  size(2) Largest target is 4096
		 -> ROM(CODE[4096]), STR_29(CODE[9]), STR_28(CODE[12]), STR_27(CODE[6]), 
		 -> STR_26(CODE[7]), 

    currentValueInfoPtr_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    currentValueInfoPtr_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    currentValueInfoPtr_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    currentValueInfoPtr_	PTR struct . size(1) Largest target is 8
		 -> valueInfoOscillatorTune_(BANK1[7]), valueInfoPulseWidth_(BANK1[7]), valueInfoDurationKey_(BANK1[7]), valueInfoDurationClick_(BANK1[7]), 
		 -> valueInfoTone_(BANK1[7]), valueInfoBeatCount_(BANK1[7]), valueInfoTempo_(BANK1[7]), NULL(NULL[0]), 

    currentMenuInfoPtr_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    currentMenuInfoPtr_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    currentMenuInfoPtr_	PTR struct . size(1) Largest target is 7
		 -> menuInfoInformation_(BANK0[6]), menuInfoConfirmReset_(BANK1[6]), menuInfoConfirmSave_(BANK1[6]), menuInfoConfirmLoad_(BANK1[6]), 
		 -> NULL(NULL[0]), menuInfoDuration_(BANK1[6]), menuInfoTone_(BANK0[6]), menuInfoMain_(BANK0[6]), 

    valueInfoOscillatorTune_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoOscillatorTune_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoOscillatorTune_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.oscillatorTune(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoPulseWidth_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoPulseWidth_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoPulseWidth_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.pulseWidth(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoDurationKey_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoDurationKey_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoDurationKey_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration.key(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoDurationClick_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoDurationClick_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoDurationClick_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration.click(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoTone_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoTone_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoTone_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.tone(BANK0[3]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoBeatCount_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoBeatCount_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoBeatCount_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_.beatCount(BANK0[1]), configration_(BANK0[13]), 

    S704$value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    valueInfoTempo_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_46(CODE[10]), STR_44(CODE[12]), STR_42(CODE[9]), STR_40(CODE[6]), 
		 -> STR_38(CODE[5]), STR_36(CODE[11]), STR_34(CODE[6]), 

    S704$title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    valueInfoTempo_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_45(CODE[14]), STR_43(CODE[14]), STR_41(CODE[9]), STR_39(CODE[9]), 
		 -> STR_37(CODE[5]), STR_35(CODE[14]), STR_33(CODE[10]), 

    S707$valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoTempo_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    menuInfoInformation_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoInformation_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoConfirmReset_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoConfirmReset_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoConfirmSave_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoConfirmSave_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoConfirmLoad_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoConfirmLoad_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoDuration_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoDuration_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoTone_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoTone_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    S695$singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    menuInfoMain_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_32(CODE[8]), STR_31(CODE[7]), STR_30(CODE[7]), ROM(CODE[4096]), 

    S695$menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoMain_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    S648$MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_29(CODE[9]), 

    MESSAGE.ERROR.MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_29(CODE[9]), 

    S644$INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_28(CODE[12]), 

    MESSAGE.MEMORY.INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_28(CODE[12]), 

    S644$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), 

    S644$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_26(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_26(CODE[7]), 

    S641$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_25(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_25(CODE[4]), 

    S641$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_24(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_24(CODE[4]), 

    S638$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    S638$MAIN_TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE.METRONOME.MAIN_TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 

    MESSAGE_MENU_ITEM_DURATION	PTR const unsigned char [3] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    Configuration_Load@config	PTR struct . size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Save@config	PTR struct . size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    ParallelLCD_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    ParallelLCD_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_46(CODE[10]), STR_45(CODE[14]), STR_44(CODE[12]), STR_43(CODE[14]), 
		 -> STR_42(CODE[9]), STR_41(CODE[9]), STR_40(CODE[6]), STR_39(CODE[9]), 
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[11]), STR_35(CODE[14]), 
		 -> STR_34(CODE[6]), STR_33(CODE[10]), ROM(CODE[4096]), STR_29(CODE[9]), 
		 -> STR_28(CODE[12]), STR_27(CODE[6]), STR_26(CODE[7]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_22(CODE[10]), STR_21(CODE[11]), STR_20(CODE[11]), 
		 -> STR_19(CODE[11]), STR_18(CODE[8]), STR_17(CODE[10]), STR_16(CODE[12]), 
		 -> STR_15(CODE[9]), STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), 
		 -> STR_11(CODE[9]), STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), 
		 -> STR_3(CODE[10]), STR_2(CODE[11]), STR_1(CODE[9]), 

    ParallelLCD_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 4096
		 -> main@valueString(BANK2[6]), informationValueBuffer(BANK2[28]), STR_32(CODE[8]), STR_31(CODE[7]), 
		 -> STR_30(CODE[7]), ROM(CODE[4096]), STR_23(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_Configuration_ReadByte
    _main->___bmul
    _ParallelLCD_WriteStringClearing->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->___bmul
    _ParallelLCD_WriteCharacter->_ParallelLCD_WriteByte
    _ParallelLCD_SetCgram->_ParallelLCD_WriteByte
    _ParallelLCD_Initialize->_ParallelLCD_WriteByte
    _ParallelLCD_ClearRow->_ParallelLCD_WriteByte
    _Configuration_Save->_Configuration_ReadByte
    _Configuration_Save->_Configuration_WriteByte
    _Configuration_Load->_Configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Configuration_Save
    _main->_ParallelLCD_WriteString
    _ParallelLCD_WriteString->___bmul
    _ParallelLCD_ClearDisplay->_ParallelLCD_ClearRow

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   21070
                                              6 BANK0      4     4      0
                                              0 BANK2     15    15      0
                 _Configuration_Load
             _Configuration_ReadByte
                 _Configuration_Save
           _ParallelLCD_ClearDisplay
               _ParallelLCD_ClearRow
             _ParallelLCD_Initialize
               _ParallelLCD_SetCgram
         _ParallelLCD_WriteCharacter
            _ParallelLCD_WriteString
    _ParallelLCD_WriteStringClearing
                             ___bmul
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     206
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteStringClearing                      5     3      2    3078
                                              0 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteString                              4     2      2    2498
                                              2 BANK0      4     2      2
              _ParallelLCD_WriteByte
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteCharacter                           2     1      1    2374
                                              0 BANK0      2     1      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_SetCgram                                 5     3      2    2265
                                              0 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_Initialize                               4     1      3    2256
                                              0 BANK0      4     1      3
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearDisplay                             0     0      0    1961
               _ParallelLCD_ClearRow
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearRow                                 3     3      0    1961
                                              0 BANK0      3     3      0
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (2) _ParallelLCD_WriteByte                                2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Save                                   6     6      0    1623
                                              0 BANK0      6     6      0
             _Configuration_ReadByte
            _Configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_WriteByte                              2     1      1     242
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Load                                   5     5      0    1155
                                              0 BANK0      5     5      0
             _Configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_ReadByte                               2     1      1     602
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration_Load
     _Configuration_ReadByte
   _Configuration_ReadByte
   _Configuration_Save
     _Configuration_ReadByte
     _Configuration_WriteByte
   _ParallelLCD_ClearDisplay
     _ParallelLCD_ClearRow
       _ParallelLCD_WriteByte
   _ParallelLCD_ClearRow
     _ParallelLCD_WriteByte
   _ParallelLCD_Initialize
     _ParallelLCD_WriteByte
   _ParallelLCD_SetCgram
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteCharacter
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteString
     _ParallelLCD_WriteByte
     ___bmul (ARG)
   _ParallelLCD_WriteStringClearing
     _ParallelLCD_WriteByte
   ___bmul
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      E8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      A      42       6       82.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      F      4D      10       96.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      E8      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Aug 14 10:33:56 2015

                                       pc 0002                            ___bmul@product 0058  
                             __CFG_CP$OFF 0000             ParallelLCD_ClearRow@rowSelect 0059  
                                     l150 0A66                                       l151 0A67  
                                     l306 0238                                       l147 0A5B  
                                     l172 0A8F                                       l421 04FA  
                                     l261 00D4                                       l422 0517  
                                     l334 0284                                       l335 02FE  
                                     l168 0F53                                       l280 01E0  
                                     l272 01BC                                       l264 00D7  
                                     l425 04FB                                       l409 04AD  
                                     l257 00CF                                       l178 0A9F  
                                     l282 01E6                                       l258 01B7  
                                     l179 0AA0                                       l427 068A  
                                     l355 02E4                                       l275 01CF  
                                     l460 06A5                                       l380 0470  
                                     l276 01D8                                       l381 040B  
                                     l373 03CC                                       l285 01FB  
                                     l277 01D7                                       l269 01AA  
                                     l391 042C                                       l287 01F8  
                                     l279 01E1                                       l288 01FA  
                                     l289 0295                                       _PR2 001B  
                                     _PR4 0416                              __CFG_CPD$OFF 0000  
                                     _PR6 041D                                       _isr 0004  
                            __CFG_IDLOC0$ 0001                              __CFG_IDLOC1$ 0001  
                            __CFG_IDLOC2$ 0000                              __CFG_IDLOC3$ 0000  
                            __CFG_BORV$HI 0000                                       wreg 0009  
                                    S4020 0973                                      S4022 0A00  
                                    S4024 09C1                                      S4016 09E7  
                                    S4018 099B                              __CFG_LVP$OFF 0000  
                         __end_of_MESSAGE 0820                                      l3212 0E6B  
                                    l3214 0E71                                      l3314 0F2A  
                                    l3306 0F20                                      l3252 0F98  
                                    l3420 018F                                      l3334 0A73  
                                    l3406 0148                                      l3328 0F5D  
                                    l3256 0FA4                                      l3416 0167  
                                    l3274 0FAE                                      l3194 0A27  
                                    l3338 0A79                                      l3602 02E6  
                                    l3530 0266                                      l3514 024C  
                                    l3522 0251                                      l3506 023C  
                                    l3370 00BF                                      l3620 030C  
                                    l3604 02EA                                      l3540 0272  
                                    l3524 0260                                      l3516 024E  
                                    l3508 0247                                      l3460 0200  
                                    l3278 0FE0                                      l3702 042A  
                                    l3550 027E                                      l3542 0275  
                                    l3518 0250                                      l3446 01EA  
                                    l3288 0FFB                                      l3800 0597  
                                    l3712 0447                                      l3632 033D  
                                    l3624 0319                                      l3640 035E  
                                    l3560 029B                                      l3608 02F4  
                                    l3544 0277                                      l3536 026C  
                                    l3480 0218                                      l3368 00BE  
                                    l3810 05DD                                      l3802 05AF  
                                    l3570 02A5                                      l3562 029D  
                                    l3546 027C                                      l3482 021A  
                                    l3474 0210                                      l3466 0207  
                                    l3628 032B                                      l3724 0462  
                                    l3580 02AF                                      l3572 02A7  
                                    l3564 029F                                      l3492 0226  
                                    l3484 021C                                      l3468 0209  
                                    l3556 0288                                      l3388 00DA  
                                    l3822 062E                                      l3814 05EB  
                                    l3670 03F0                                      l3638 0350  
                                    l3582 02B4                                      l3574 02A9  
                                    l3566 02A1                                      l3486 021E  
                                    l3398 011B                                      l3840 069D  
                                    l3816 05EE                                      l3744 04AA  
                                    l3736 047E                                      l3680 0409  
                                    l3576 02AB                                      l3568 02A3  
                                    l3834 067C                                      l3754 04BB  
                                    l3690 041A                                      l3658 03CA  
                                    l3578 02AD                                      l3498 022F  
                                    l3860 06E9                                      l3852 06D9  
                                    l3828 066E                                      l3772 04D3  
                                    l3780 04E2                                      l3692 041B  
                                    l3668 03EF                                      l3588 02BC  
                                    l3846 06BF                                      l3854 06E2  
                                    l3790 051B                                      l3598 02DD  
                                    l3880 0759                                      l3848 06C7  
                                    l3768 04CD                                      l3874 0729  
                                    l3866 06EF                                      l3786 0500  
                                    l3868 071E                                      l3884 0763  
                                    l3796 0570                                      l3886 076D  
                                    l3894 0785                                      l3878 073A  
                                    l3888 0771                                      ?_isr 0070  
                                    STR_1 08F4                              __CFG_WDTE$ON 0000  
                                    STR_2 08AE                                      STR_3 08CD  
                                    STR_4 0840                                      STR_5 085C  
                                    STR_6 08E1                                      STR_7 095C  
                                    STR_8 0961                                      STR_9 0966  
                                    _LATB 010D                                      u3105 04A6  
                ??_ParallelLCD_Initialize 0076                                      u3260 0698  
                                    u3174 04DA                                      u3175 04D9  
                                    u3095 0488                                      u3344 077F  
                                    u2465 0E1D                                      u3345 077E  
                                    u3295 0703                                      u2905 0361  
                                    u2915 0382                                      u2675 00E9  
                                    u2925 03A3                                      u2685 0109  
                                    u2884 02D5                                      u2885 02D4  
                                    _TMR0 0015                                      _TMR1 0016  
                                    _TMR2 001A                                      _TMR4 0415  
                                    _TMR6 041C                              __CFG_WRT$OFF 0000  
                     _MESSAGE_INFORMATION 0020                                      _main 00AE  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                         _valueInfoTempo_ 00C9                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      ltemp 007E  
                                    start 007A                                      ttemp 007E  
                                    wtemp 007E                             __CFG_IESO$OFF 0000  
                       ___bmul@multiplier 0059       __size_of_ParallelLCD_WriteCharacter 000E  
                                   ??_isr 0070           ParallelLCD_WriteString@position 005D  
                           _keyHoldCount_ 0076                   ??_ParallelLCD_WriteByte 0075  
                                   ?_main 0070                   _Configuration_WriteByte 0A82  
                                   STR_10 0956                                     STR_11 08F4  
                                   STR_12 0932                                     STR_20 08A3  
                                   STR_13 0938                                     STR_21 088D  
                                   STR_22 08C3                                     STR_14 093E  
                                   STR_30 091D                                     STR_23 0916  
                                   STR_15 08F4                                     STR_31 0924  
                                   STR_24 096B                                     STR_16 0875  
                                   STR_32 0906                                     STR_40 094A  
                                   STR_25 096F                                     STR_17 08B9  
                                   STR_33 08C3                                     STR_41 0845  
                                   STR_26 092B                                     STR_34 0950  
                                   STR_42 08FD                                     STR_18 090E  
                                   STR_27 0944                                     STR_43 084E  
                                   STR_35 084E                                     STR_19 0898  
                                   STR_28 0869                                     STR_44 0881  
                                   STR_36 08AE                                     STR_29 08EB  
                                   STR_37 08D2                                     STR_45 084E  
                                   STR_38 08D2                                     STR_46 08D7  
                                   STR_39 0845                                     i1l484 0076  
             Configuration_Save@ptrConfig 005B                        main@prevPortAState 0057  
                  ParallelLCD_WriteByte@r 0074                              _outputEvent_ 0054  
                                   _PORTA 000C                                     _TRISA 008C  
                                   _TRISB 008D                             __CFG_PWRTE$ON 0000  
                          __CFG_FCMEN$OFF 0000           __end_of_PARALLEL_LCD_ROW_SELECT 0828  
                                   main@i 016C                              main@tmpValue 0165  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                       __end_of_CHAR_CODE 0823                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
            __end_of_ParallelLCD_ClearRow 0A5A                            __CFG_MCLRE$OFF 0000  
                         __initialization 007C          ParallelLCD_WriteStringClearing@i 005C  
                            __end_of_main 078F                       _soundDurationCount_ 004C  
                            _beatCounter_ 004E                                    ??_main 005E  
            __end_of_ParallelLCD_SetCgram 0E41                        _Configuration_Load 0F04  
                      _Configuration_Save 0F5F                         __end_of_HEX_TABLE 0810  
                          __CFG_PLLEN$OFF 0000                  Configuration_Load@config 005C  
                           main@isNonZero 0164                       ?_Configuration_Load 0070  
                     ?_Configuration_Save 0070                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _EEDATH 0194  
                                  _CCPR4H 0319                                    _EEDATL 0193  
                                  _CCPR4L 0318                                    _EECON2 0196  
                                  _BITMAP 0828                                    _ANSELA 018C  
                                  _ANSELB 018D                                    i1l2900 0033  
                                  i1l2912 004B                                    i1l2924 0061  
                                  i1l2926 0062                                    i1l2936 0073  
                                  i1l2938 0074                                    i1l2894 002B  
         __size_of_ParallelLCD_Initialize 0021          ParallelLCD_WriteString@stringPtr 005A  
      ParallelLCD_WriteCharacter@position 0059                ParallelLCD_SetCgram@bitmap 0058  
                                  ___bmul 0A70                      ??_Configuration_Load 0058  
                    ??_Configuration_Save 0058                            __CFG_STVREN$ON 0000  
                    _currentValueInfoPtr_ 0050                 ??_Configuration_WriteByte 0075  
          Configuration_WriteByte@address 0075                     _valueInfoDurationKey_ 00B4  
                 __end_of__initialization 00AB                  Configuration_Save@config 005D  
                     ___bmul@multiplicand 0074                            __pcstackCOMMON 0070  
                            __pidataBANK0 0DF0                              __pidataBANK1 0EB5  
                            __pidataBANK2 0E77                             _menuInfoMain_ 003B  
                ??_Configuration_ReadByte 0075                             _menuInfoTone_ 0041  
                  _ParallelLCD_Initialize 0DCF       ParallelLCD_WriteCharacter@character 0058  
                          _OPTION_REGbits 0095                      _ParallelLCD_ClearRow 0A40  
                              __pbssBANK0 0047             Configuration_ReadByte@address 0075  
               ParallelLCD_WriteByte@data 0075                      _ParallelLCD_SetCgram 0E17  
                ?_ParallelLCD_WriteString 005A                     ParallelLCD_ClearRow@i 005A  
                              __pmaintext 00AE                                   ?___bmul 0074  
                              __pintentry 0004      ParallelLCD_Initialize@configFunction 005B  
                                 _CCPTMRS 029E            __size_of_ParallelLCD_WriteByte 0016  
                     _currentMenuInfoPtr_ 004F             __end_of_ParallelLCD_WriteByte 0A70  
                                 _MESSAGE 0810                     ?_ParallelLCD_ClearRow 0070  
       __size_of_ParallelLCD_ClearDisplay 0008               Configuration_Load@ptrConfig 005A  
               ?_ParallelLCD_ClearDisplay 0070                            main@keyPressed 0168  
                                 _OSCTUNE 0098                         _menuInfoDuration_ 00E9  
                   ?_ParallelLCD_SetCgram 0058                                 _CHAR_CODE 0820  
                       main@COMPARE_UNITS 0823                           __size_of___bmul 0012  
         __size_of_Configuration_ReadByte 0012                                _initialize 078F  
                                 __ptext1 078F                                   __ptext2 0A70  
                                 __ptext3 0E41                                   __ptext4 0A20  
                                 __ptext5 0AA6                                   __ptext6 0E17  
                                 __ptext7 0DCF                                   __ptext8 07F6  
                                 __ptext9 0A40                                   _isMute_ 0052  
                  _informationValueBuffer 0120                                 _T1CONbits 0018  
                               _T2CONbits 001C                _MESSAGE_MENU_ITEM_DURATION 0158  
                            __size_of_isr 0076              ??_ParallelLCD_WriteCharacter 0076  
                               _T4CONbits 0417                                 _T6CONbits 041E  
                   ParallelLCD_SetCgram@i 005C                                 _HEX_TABLE 0800  
                                 main@chr 0167                                   clrloop0 0AB5  
                    end_of_initialization 00AB                            main@returnCode 016A  
         __end_of_ParallelLCD_WriteString 0A40                                   init_ram 0ABA  
                                 initloop 0ABB                 __end_ofmain@COMPARE_UNITS 0826  
                 _PARALLEL_LCD_ROW_SELECT 0826                              __pstringtext 0800  
                  ??_ParallelLCD_ClearRow 0058                          __CFG_FOSC$INTOSC 0000  
                   _currentSingleMessage_ 004A                    _Configuration_ReadByte 0A94  
                          __end_of_BITMAP 0840                    ??_ParallelLCD_SetCgram 005A  
            ParallelLCD_SetCgram@charCode 005B                               _CCP1CONbits 0293  
                             _CCP2CONbits 029A                               _CCP3CONbits 0313  
                             _CCP4CONbits 031A                            _valueInfoTone_ 00D0  
                              main@userId 016B   __end_of_ParallelLCD_WriteStringClearing 0E77  
__size_of_ParallelLCD_WriteStringClearing 0036         ??_ParallelLCD_WriteStringClearing 005A  
        ?_ParallelLCD_WriteStringClearing 0058           _ParallelLCD_WriteStringClearing 0E41  
                 ?_ParallelLCD_Initialize 0058               __size_of_Configuration_Load 005B  
             __size_of_Configuration_Save 00A1                            __end_of___bmul 0A82  
                             ?_initialize 0070                       start_initialization 007C  
                             __end_of_isr 007A        Configuration_ReadByte@memorySelect 0074  
          __end_of_ParallelLCD_Initialize 0DF0                  ?_Configuration_WriteByte 0074  
                                ??___bmul 0075          __end_of_ParallelLCD_ClearDisplay 07FE  
                             _CCPTMRSbits 029E                               __pdataBANK0 0020  
                             __pdataBANK1 00A0                               __pdataBANK2 0120  
                   _menuInfoConfirmReset_ 00DD          __size_of_ParallelLCD_WriteString 0020  
      __end_of_ParallelLCD_WriteCharacter 0AB4                _ParallelLCD_WriteCharacter 0AA6  
                             __pbssCOMMON 0076                                 ___latbits 0001  
                           __pcstackBANK0 0058                             __pcstackBANK2 015E  
                     __size_of_initialize 0067       ParallelLCD_Initialize@configDisplay 0058  
                               __pswtext1 09E7                                 __pswtext2 099B  
                               __pswtext3 0973                                 __pswtext4 0A00  
                               __pswtext5 09C1                       _valueInfoBeatCount_ 00A6  
   ParallelLCD_Initialize@configEntryMode 005A                     _ParallelLCD_WriteByte 0A5A  
         __end_of_Configuration_WriteByte 0A94                                  _LATAbits 010C  
                               clear_ram0 0AB4                                  _PIE1bits 0091  
                                _PIE3bits 0093                                  _PIR1bits 0011  
                                _PIR2bits 0012                                  _PIR3bits 0013  
             Configuration_WriteByte@data 0074                                 main@F3091 00A0  
                _ParallelLCD_ClearDisplay 07F6                                 main@phase 0169  
                 ?_Configuration_ReadByte 0074              Configuration_Save@returnCode 005A  
                           _tempoCounter_ 0047  ParallelLCD_WriteStringClearing@stringPtr 0058  
                              _EECON1bits 0195                      _menuInfoConfirmLoad_ 00D7  
                    _menuInfoConfirmSave_ 00E3                  _valueInfoOscillatorTune_ 00BB  
                    _valueInfoPulseWidth_ 00C2                              ??_initialize 0074  
                 _ParallelLCD_WriteString 0A20            __end_of_Configuration_ReadByte 0AA6  
                  _MESSAGE_MENU_ITEM_MAIN 013C                    _MESSAGE_MENU_ITEM_TONE 0150  
                  ?_ParallelLCD_WriteByte 0074             __size_of_ParallelLCD_ClearRow 001A  
      ParallelLCD_Initialize@configCursor 0059                                  __ptext10 0A5A  
                                __ptext11 0F5F                                  __ptext12 0A82  
                                __ptext13 0F04                                  __ptext14 0A94  
                           __size_of_main 06E1             __size_of_ParallelLCD_SetCgram 002A  
                      __end_of_initialize 07F6                __end_of_Configuration_Load 0F5F  
                             _inputEvent_ 0051                __end_of_Configuration_Save 1000  
 ParallelLCD_WriteStringClearing@position 005B                           main@valueString 015E  
        __size_of_Configuration_WriteByte 0012               ?_ParallelLCD_WriteCharacter 0058  
                             _OSCTUNEbits 0098                                _INTCONbits 000B  
                       isr@eventPrescaler 0078                       Configuration_Load@i 005B  
                                intlevel1 0000                       Configuration_Save@i 005C  
                       __CFG_CLKOUTEN$OFF 0000                                _OSCCONbits 0099  
               ??_ParallelLCD_WriteString 005C                             _configration_ 0028  
                             _portAState_ 0055                                _WDTCONbits 0097  
                           _machineState_ 0053                   _valueInfoDurationClick_ 00AD  
                    _menuInfoInformation_ 0035                       _stateReturnCounter_ 0056  
              ??_ParallelLCD_ClearDisplay 0076  
