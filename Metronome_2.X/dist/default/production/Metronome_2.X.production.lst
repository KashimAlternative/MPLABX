

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 12 11:27:25 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	swtext3,local,class=CONST,delta=2
    20                           	psect	swtext4,local,class=CONST,delta=2
    21                           	psect	swtext5,local,class=CONST,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001E                     	;# 
    66  001F                     	;# 
    67  008C                     	;# 
    68  008D                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0094                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  0111                     	;# 
    87  0112                     	;# 
    88  0113                     	;# 
    89  0114                     	;# 
    90  0115                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  0118                     	;# 
    94  0119                     	;# 
    95  011A                     	;# 
    96  011B                     	;# 
    97  011D                     	;# 
    98  011E                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  0191                     	;# 
   102  0191                     	;# 
   103  0192                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0194                     	;# 
   108  0195                     	;# 
   109  0196                     	;# 
   110  0199                     	;# 
   111  019A                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019C                     	;# 
   117  019C                     	;# 
   118  019D                     	;# 
   119  019E                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020D                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0212                     	;# 
   127  0213                     	;# 
   128  0213                     	;# 
   129  0214                     	;# 
   130  0214                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  0219                     	;# 
   139  021A                     	;# 
   140  021B                     	;# 
   141  021C                     	;# 
   142  021D                     	;# 
   143  021E                     	;# 
   144  021F                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0294                     	;# 
   150  0295                     	;# 
   151  0295                     	;# 
   152  0296                     	;# 
   153  0298                     	;# 
   154  0298                     	;# 
   155  0299                     	;# 
   156  029A                     	;# 
   157  029B                     	;# 
   158  029C                     	;# 
   159  029C                     	;# 
   160  029D                     	;# 
   161  029E                     	;# 
   162  029E                     	;# 
   163  0311                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0318                     	;# 
   168  0318                     	;# 
   169  0319                     	;# 
   170  031A                     	;# 
   171  0394                     	;# 
   172  0395                     	;# 
   173  0396                     	;# 
   174  039A                     	;# 
   175  039C                     	;# 
   176  039D                     	;# 
   177  039E                     	;# 
   178  039F                     	;# 
   179  0415                     	;# 
   180  0416                     	;# 
   181  0417                     	;# 
   182  041C                     	;# 
   183  041D                     	;# 
   184  041E                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196                           
   197                           	psect	idataBANK0
   198  07DF                     __pidataBANK0:	
   199                           
   200                           ;initializer for _configration_
   201  07DF  3400               	retlw	0
   202  07E0  3478               	retlw	120
   203  07E1  3400               	retlw	0
   204  07E2  3404               	retlw	4
   205  07E3  3420               	retlw	32
   206  07E4  3420               	retlw	32
   207  07E5  3401               	retlw	1
   208  07E6  34F9               	retlw	249
   209  07E7  343E               	retlw	62
   210  07E8  3452               	retlw	82
   211  07E9  3400               	retlw	0
   212  07EA  3400               	retlw	0
   213                           
   214                           ;initializer for _menuInfoConfirm_
   215  07EB  3400               	retlw	0
   216  07EC  3400               	retlw	0
   217  07ED  3401               	retlw	1
   218  07EE  3400               	retlw	0
   219                           
   220                           ;initializer for _menuInfoDuration_
   221  07EF  3400               	retlw	0
   222  07F0  3400               	retlw	0
   223  07F1  3402               	retlw	2
   224  07F2  34E6               	retlw	low (_MESSAGE_MENU_ITEM_DURATION| 0)
   225                           
   226                           ;initializer for _menuInfoInformation_
   227  07F3  3400               	retlw	0
   228  07F4  3400               	retlw	0
   229  07F5  3402               	retlw	2
   230  07F6  3400               	retlw	0
   231                           
   232                           ;initializer for _menuInfoMain_
   233  07F7  3400               	retlw	0
   234  07F8  3400               	retlw	0
   235  07F9  3409               	retlw	9
   236  07FA  34CA               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| 0)
   237                           
   238                           ;initializer for _menuInfoTone_
   239  07FB  3400               	retlw	0
   240  07FC  3400               	retlw	0
   241  07FD  3403               	retlw	3
   242  07FE  34DE               	retlw	low (_MESSAGE_MENU_ITEM_TONE| 0)
   243                           
   244                           	psect	idataBANK1
   245  0EFB                     __pidataBANK1:	
   246                           
   247                           ;initializer for _MESSAGE_INFORMATION
   248  0EFB  3411               	retlw	low (STR_18| (0+32768))
   249  0EFC  3489               	retlw	high (STR_18| (0+32768))
   250  0EFD  34A4               	retlw	low (STR_19| (0+32768))
   251  0EFE  3488               	retlw	high (STR_19| (0+32768))
   252  0EFF  34AF               	retlw	low (STR_20| (0+32768))
   253  0F00  3488               	retlw	high (STR_20| (0+32768))
   254  0F01  3499               	retlw	low (STR_21| (0+32768))
   255  0F02  3488               	retlw	high (STR_21| (0+32768))
   256                           
   257                           ;initializer for main@F3074
   258  0F03  343D               	retlw	61
   259  0F04  3420               	retlw	32
   260  0F05  3430               	retlw	48
   261  0F06  3430               	retlw	48
   262  0F07  3430               	retlw	48
   263  0F08  3400               	retlw	0
   264                           
   265                           ;initializer for _informationValueBuffer
   266  0F09  3420               	retlw	32
   267  0F0A  342D               	retlw	45
   268  0F0B  342D               	retlw	45
   269  0F0C  342E               	retlw	46
   270  0F0D  342D               	retlw	45
   271  0F0E  342D               	retlw	45
   272  0F0F  3400               	retlw	0
   273  0F10  3420               	retlw	32
   274  0F11  3420               	retlw	32
   275  0F12  3420               	retlw	32
   276  0F13  342D               	retlw	45
   277  0F14  342D               	retlw	45
   278  0F15  3468               	retlw	104
   279  0F16  3400               	retlw	0
   280  0F17  3420               	retlw	32
   281  0F18  3420               	retlw	32
   282  0F19  3420               	retlw	32
   283  0F1A  342D               	retlw	45
   284  0F1B  342D               	retlw	45
   285  0F1C  3468               	retlw	104
   286  0F1D  3400               	retlw	0
   287  0F1E  3420               	retlw	32
   288  0F1F  3420               	retlw	32
   289  0F20  3420               	retlw	32
   290  0F21  3430               	retlw	48
   291  0F22  3430               	retlw	48
   292  0F23  3468               	retlw	104
   293  0F24  3400               	retlw	0
   294                           
   295                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   296  0F25  3400               	retlw	low (STR_1| (0+32768))
   297  0F26  3489               	retlw	high (STR_1| (0+32768))
   298  0F27  34BA               	retlw	low (STR_2| (0+32768))
   299  0F28  3488               	retlw	high (STR_2| (0+32768))
   300  0F29  34D9               	retlw	low (STR_3| (0+32768))
   301  0F2A  3488               	retlw	high (STR_3| (0+32768))
   302  0F2B  345A               	retlw	low (STR_4| (0+32768))
   303  0F2C  3488               	retlw	high (STR_4| (0+32768))
   304  0F2D  3468               	retlw	low (STR_5| (0+32768))
   305  0F2E  3488               	retlw	high (STR_5| (0+32768))
   306  0F2F  34ED               	retlw	low (STR_6| (0+32768))
   307  0F30  3488               	retlw	high (STR_6| (0+32768))
   308  0F31  3466               	retlw	low (STR_7| (0+32768))
   309  0F32  3489               	retlw	high (STR_7| (0+32768))
   310  0F33  346B               	retlw	low (STR_8| (0+32768))
   311  0F34  3489               	retlw	high (STR_8| (0+32768))
   312  0F35  3470               	retlw	low (STR_9| (0+32768))
   313  0F36  3489               	retlw	high (STR_9| (0+32768))
   314  0F37  3460               	retlw	low (STR_10| (0+32768))
   315  0F38  3489               	retlw	high (STR_10| (0+32768))
   316                           
   317                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   318  0F39  3400               	retlw	low (STR_1| (0+32768))
   319  0F3A  3489               	retlw	high (STR_1| (0+32768))
   320  0F3B  343C               	retlw	low (STR_12| (0+32768))
   321  0F3C  3489               	retlw	high (STR_12| (0+32768))
   322  0F3D  3442               	retlw	low (STR_13| (0+32768))
   323  0F3E  3489               	retlw	high (STR_13| (0+32768))
   324  0F3F  3448               	retlw	low (STR_14| (0+32768))
   325  0F40  3489               	retlw	high (STR_14| (0+32768))
   326                           
   327                           ;initializer for _MESSAGE_MENU_ITEM_DURATION
   328  0F41  3400               	retlw	low (STR_1| (0+32768))
   329  0F42  3489               	retlw	high (STR_1| (0+32768))
   330  0F43  3481               	retlw	low (STR_16| (0+32768))
   331  0F44  3488               	retlw	high (STR_16| (0+32768))
   332  0F45  34C5               	retlw	low (STR_17| (0+32768))
   333  0F46  3488               	retlw	high (STR_17| (0+32768))
   334                           
   335                           	psect	stringtext
   336  0800                     __pstringtext:	
   337  0800                     _MESSAGE:	
   338  0800  34CF               	retlw	low (STR_22| (0+32768))
   339  0801  3488               	retlw	high (STR_22| (0+32768))
   340  0802  3419               	retlw	low (STR_23| (0+32768))
   341  0803  3489               	retlw	high (STR_23| (0+32768))
   342  0804  345A               	retlw	low (STR_24| (0+32768))
   343  0805  3489               	retlw	high (STR_24| (0+32768))
   344  0806  3435               	retlw	low (STR_25| (0+32768))
   345  0807  3489               	retlw	high (STR_25| (0+32768))
   346  0808  34DE               	retlw	low ((STR_3+5)| (0+32768))
   347  0809  3488               	retlw	high ((STR_3+5)| (0+32768))
   348  080A  345F               	retlw	low ((STR_4+5)| (0+32768))
   349  080B  3488               	retlw	high ((STR_4+5)| (0+32768))
   350  080C  34BA               	retlw	low (STR_2| (0+32768))
   351  080D  3488               	retlw	high (STR_2| (0+32768))
   352  080E  34DE               	retlw	low ((STR_3+5)| (0+32768))
   353  080F  3488               	retlw	high ((STR_3+5)| (0+32768))
   354  0810  3454               	retlw	low (STR_30| (0+32768))
   355  0811  3489               	retlw	high (STR_30| (0+32768))
   356  0812  347D               	retlw	low (STR_31| (0+32768))
   357  0813  3489               	retlw	high (STR_31| (0+32768))
   358  0814  348D               	retlw	low (STR_32| (0+32768))
   359  0815  3488               	retlw	high (STR_32| (0+32768))
   360  0816  34E3               	retlw	low (STR_33| (0+32768))
   361  0817  3488               	retlw	high (STR_33| (0+32768))
   362  0818  3420               	retlw	low (STR_34| (0+32768))
   363  0819  3489               	retlw	high (STR_34| (0+32768))
   364  081A  3427               	retlw	low (STR_35| (0+32768))
   365  081B  3489               	retlw	high (STR_35| (0+32768))
   366  081C  3409               	retlw	low (STR_36| (0+32768))
   367  081D  3489               	retlw	high (STR_36| (0+32768))
   368  081E  3475               	retlw	low (STR_37| (0+32768))
   369  081F  3489               	retlw	high (STR_37| (0+32768))
   370  0820  3479               	retlw	low (STR_38| (0+32768))
   371  0821  3489               	retlw	high (STR_38| (0+32768))
   372  0822  342E               	retlw	low (STR_39| (0+32768))
   373  0823  3489               	retlw	high (STR_39| (0+32768))
   374  0824  344E               	retlw	low (STR_40| (0+32768))
   375  0825  3489               	retlw	high (STR_40| (0+32768))
   376  0826  3475               	retlw	low (STR_41| (0+32768))
   377  0827  3488               	retlw	high (STR_41| (0+32768))
   378  0828  34F7               	retlw	low (STR_42| (0+32768))
   379  0829  3488               	retlw	high (STR_42| (0+32768))
   380  082A                     __end_of_MESSAGE:	
   381  082A                     _HEX_TABLE:	
   382  082A  3430               	retlw	48
   383  082B  3431               	retlw	49
   384  082C  3432               	retlw	50
   385  082D  3433               	retlw	51
   386  082E  3434               	retlw	52
   387  082F  3435               	retlw	53
   388  0830  3436               	retlw	54
   389  0831  3437               	retlw	55
   390  0832  3438               	retlw	56
   391  0833  3439               	retlw	57
   392  0834  3441               	retlw	65
   393  0835  3442               	retlw	66
   394  0836  3443               	retlw	67
   395  0837  3444               	retlw	68
   396  0838  3445               	retlw	69
   397  0839  3446               	retlw	70
   398  083A                     __end_of_HEX_TABLE:	
   399  083A                     _CHAR_CODE:	
   400  083A  3400               	retlw	0
   401  083B  3401               	retlw	1
   402  083C  3402               	retlw	2
   403  083D                     __end_of_CHAR_CODE:	
   404  083D                     main@COMPARE_UNITS:	
   405  083D  3464               	retlw	100
   406  083E  340A               	retlw	10
   407  083F  3401               	retlw	1
   408  0840                     __end_ofmain@COMPARE_UNITS:	
   409  0840                     _PARALLEL_LCD_ROW_SELECT:	
   410  0840  3480               	retlw	128
   411  0841  34C0               	retlw	192
   412  0842                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   413  0842                     _BITMAP:	
   414  0842  3410               	retlw	16
   415  0843  3418               	retlw	24
   416  0844  341C               	retlw	28
   417  0845  341E               	retlw	30
   418  0846  341C               	retlw	28
   419  0847  3418               	retlw	24
   420  0848  3410               	retlw	16
   421  0849  3400               	retlw	0
   422  084A  3400               	retlw	0
   423  084B  3404               	retlw	4
   424  084C  340E               	retlw	14
   425  084D  341F               	retlw	31
   426  084E  3400               	retlw	0
   427  084F  3400               	retlw	0
   428  0850  3400               	retlw	0
   429  0851  3400               	retlw	0
   430  0852  3400               	retlw	0
   431  0853  3400               	retlw	0
   432  0854  3400               	retlw	0
   433  0855  3400               	retlw	0
   434  0856  341F               	retlw	31
   435  0857  340E               	retlw	14
   436  0858  3404               	retlw	4
   437  0859  3400               	retlw	0
   438  085A                     __end_of_BITMAP:	
   439  0016                     _TMR1	set	22
   440  000B                     _INTCONbits	set	11
   441  0011                     _PIR1bits	set	17
   442  0012                     _PIR2bits	set	18
   443  0013                     _PIR3bits	set	19
   444  000C                     _PORTA	set	12
   445  001B                     _PR2	set	27
   446  0018                     _T1CONbits	set	24
   447  001C                     _T2CONbits	set	28
   448  0015                     _TMR0	set	21
   449  001A                     _TMR2	set	26
   450  0095                     _OPTION_REGbits	set	149
   451  0099                     _OSCCONbits	set	153
   452  0098                     _OSCTUNE	set	152
   453  0098                     _OSCTUNEbits	set	152
   454  0091                     _PIE1bits	set	145
   455  0093                     _PIE3bits	set	147
   456  008C                     _TRISA	set	140
   457  008D                     _TRISB	set	141
   458  0097                     _WDTCONbits	set	151
   459  010C                     _LATAbits	set	268
   460  010D                     _LATB	set	269
   461  018C                     _ANSELA	set	396
   462  018D                     _ANSELB	set	397
   463  0192                     _EEADRH	set	402
   464  0191                     _EEADRL	set	401
   465  0195                     _EECON1bits	set	405
   466  0196                     _EECON2	set	406
   467  0194                     _EEDATH	set	404
   468  0193                     _EEDATL	set	403
   469  0293                     _CCP1CONbits	set	659
   470  029A                     _CCP2CONbits	set	666
   471  029E                     _CCPTMRS	set	670
   472  029E                     _CCPTMRSbits	set	670
   473  0313                     _CCP3CONbits	set	787
   474  031A                     _CCP4CONbits	set	794
   475  0319                     _CCPR4H	set	793
   476  0318                     _CCPR4L	set	792
   477  0416                     _PR4	set	1046
   478  041D                     _PR6	set	1053
   479  0417                     _T4CONbits	set	1047
   480  041E                     _T6CONbits	set	1054
   481  0415                     _TMR4	set	1045
   482  041C                     _TMR6	set	1052
   483  085A                     STR_4:	
   484  085A  3441               	retlw	65	;'A'
   485  085B  3464               	retlw	100	;'d'
   486  085C  346A               	retlw	106	;'j'
   487  085D  342E               	retlw	46	;'.'
   488  085E  3420               	retlw	32	;' '
   489  085F  3444               	retlw	68	;'D'
   490  0860  3475               	retlw	117	;'u'
   491  0861  3472               	retlw	114	;'r'
   492  0862  3461               	retlw	97	;'a'
   493  0863  3474               	retlw	116	;'t'
   494  0864  3469               	retlw	105	;'i'
   495  0865  346F               	retlw	111	;'o'
   496  0866  346E               	retlw	110	;'n'
   497  0867  3400               	retlw	0
   498  0868                     STR_5:	
   499  0868  3441               	retlw	65	;'A'
   500  0869  3464               	retlw	100	;'d'
   501  086A  346A               	retlw	106	;'j'
   502  086B  342E               	retlw	46	;'.'
   503  086C  3420               	retlw	32	;' '
   504  086D  3450               	retlw	80	;'P'
   505  086E  342D               	retlw	45	;'-'
   506  086F  3457               	retlw	87	;'W'
   507  0870  3469               	retlw	105	;'i'
   508  0871  3464               	retlw	100	;'d'
   509  0872  3474               	retlw	116	;'t'
   510  0873  3468               	retlw	104	;'h'
   511  0874  3400               	retlw	0
   512  0875                     STR_41:	
   513  0875  3449               	retlw	73	;'I'
   514  0876  346E               	retlw	110	;'n'
   515  0877  3469               	retlw	105	;'i'
   516  0878  3474               	retlw	116	;'t'
   517  0879  3469               	retlw	105	;'i'
   518  087A  3461               	retlw	97	;'a'
   519  087B  346C               	retlw	108	;'l'
   520  087C  3469               	retlw	105	;'i'
   521  087D  347A               	retlw	122	;'z'
   522  087E  3465               	retlw	101	;'e'
   523  087F  3464               	retlw	100	;'d'
   524  0880  3400               	retlw	0
   525  0881                     STR_16:	
   526  0881  3443               	retlw	67	;'C'
   527  0882  346C               	retlw	108	;'l'
   528  0883  3469               	retlw	105	;'i'
   529  0884  3463               	retlw	99	;'c'
   530  0885  346B               	retlw	107	;'k'
   531  0886  3420               	retlw	32	;' '
   532  0887  3453               	retlw	83	;'S'
   533  0888  346F               	retlw	111	;'o'
   534  0889  3475               	retlw	117	;'u'
   535  088A  346E               	retlw	110	;'n'
   536  088B  3464               	retlw	100	;'d'
   537  088C  3400               	retlw	0
   538  088D                     STR_32:	
   539  088D  3450               	retlw	80	;'P'
   540  088E  3475               	retlw	117	;'u'
   541  088F  346C               	retlw	108	;'l'
   542  0890  3473               	retlw	115	;'s'
   543  0891  3465               	retlw	101	;'e'
   544  0892  3420               	retlw	32	;' '
   545  0893  3457               	retlw	87	;'W'
   546  0894  3469               	retlw	105	;'i'
   547  0895  3464               	retlw	100	;'d'
   548  0896  3474               	retlw	116	;'t'
   549  0897  3468               	retlw	104	;'h'
   550  0898  3400               	retlw	0
   551  0899                     STR_21:	
   552  0899  3445               	retlw	69	;'E'
   553  089A  3472               	retlw	114	;'r'
   554  089B  3472               	retlw	114	;'r'
   555  089C  346F               	retlw	111	;'o'
   556  089D  3472               	retlw	114	;'r'
   557  089E  3420               	retlw	32	;' '
   558  089F  3443               	retlw	67	;'C'
   559  08A0  346F               	retlw	111	;'o'
   560  08A1  3464               	retlw	100	;'d'
   561  08A2  3465               	retlw	101	;'e'
   562  08A3  3400               	retlw	0
   563  08A4                     STR_19:	
   564  08A4  3452               	retlw	82	;'R'
   565  08A5  344F               	retlw	79	;'O'
   566  08A6  344D               	retlw	77	;'M'
   567  08A7  3420               	retlw	32	;' '
   568  08A8  344F               	retlw	79	;'O'
   569  08A9  3466               	retlw	102	;'f'
   570  08AA  3466               	retlw	102	;'f'
   571  08AB  3473               	retlw	115	;'s'
   572  08AC  3465               	retlw	101	;'e'
   573  08AD  3474               	retlw	116	;'t'
   574  08AE  3400               	retlw	0
   575  08AF                     STR_20:	
   576  08AF  3453               	retlw	83	;'S'
   577  08B0  3461               	retlw	97	;'a'
   578  08B1  3476               	retlw	118	;'v'
   579  08B2  3465               	retlw	101	;'e'
   580  08B3  3420               	retlw	32	;' '
   581  08B4  3443               	retlw	67	;'C'
   582  08B5  346F               	retlw	111	;'o'
   583  08B6  3475               	retlw	117	;'u'
   584  08B7  346E               	retlw	110	;'n'
   585  08B8  3474               	retlw	116	;'t'
   586  08B9  3400               	retlw	0
   587  08BA                     STR_2:	
   588  08BA  3442               	retlw	66	;'B'
   589  08BB  3465               	retlw	101	;'e'
   590  08BC  3461               	retlw	97	;'a'
   591  08BD  3474               	retlw	116	;'t'
   592  08BE  3420               	retlw	32	;' '
   593  08BF  3443               	retlw	67	;'C'
   594  08C0  346F               	retlw	111	;'o'
   595  08C1  3475               	retlw	117	;'u'
   596  08C2  346E               	retlw	110	;'n'
   597  08C3  3474               	retlw	116	;'t'
   598  08C4  3400               	retlw	0
   599  08C5                     STR_17:	
   600  08C5  344B               	retlw	75	;'K'
   601  08C6  3465               	retlw	101	;'e'
   602  08C7  3479               	retlw	121	;'y'
   603  08C8  3420               	retlw	32	;' '
   604  08C9  3453               	retlw	83	;'S'
   605  08CA  346F               	retlw	111	;'o'
   606  08CB  3475               	retlw	117	;'u'
   607  08CC  346E               	retlw	110	;'n'
   608  08CD  3464               	retlw	100	;'d'
   609  08CE  3400               	retlw	0
   610  08CF                     STR_22:	
   611  08CF  344D               	retlw	77	;'M'
   612  08D0  3465               	retlw	101	;'e'
   613  08D1  3474               	retlw	116	;'t'
   614  08D2  3472               	retlw	114	;'r'
   615  08D3  346F               	retlw	111	;'o'
   616  08D4  346E               	retlw	110	;'n'
   617  08D5  346F               	retlw	111	;'o'
   618  08D6  346D               	retlw	109	;'m'
   619  08D7  3465               	retlw	101	;'e'
   620  08D8  3400               	retlw	0
   621  08D9                     STR_3:	
   622  08D9  3441               	retlw	65	;'A'
   623  08DA  3464               	retlw	100	;'d'
   624  08DB  346A               	retlw	106	;'j'
   625  08DC  342E               	retlw	46	;'.'
   626  08DD  3420               	retlw	32	;' '
   627  08DE  3454               	retlw	84	;'T'
   628  08DF  346F               	retlw	111	;'o'
   629  08E0  346E               	retlw	110	;'n'
   630  08E1  3465               	retlw	101	;'e'
   631  08E2  3400               	retlw	0
   632  08E3                     STR_33:	
   633  08E3  344F               	retlw	79	;'O'
   634  08E4  3473               	retlw	115	;'s'
   635  08E5  3463               	retlw	99	;'c'
   636  08E6  342E               	retlw	46	;'.'
   637  08E7  3420               	retlw	32	;' '
   638  08E8  3454               	retlw	84	;'T'
   639  08E9  3475               	retlw	117	;'u'
   640  08EA  346E               	retlw	110	;'n'
   641  08EB  3465               	retlw	101	;'e'
   642  08EC  3400               	retlw	0
   643  08ED                     STR_6:	
   644  08ED  3441               	retlw	65	;'A'
   645  08EE  3464               	retlw	100	;'d'
   646  08EF  346A               	retlw	106	;'j'
   647  08F0  342E               	retlw	46	;'.'
   648  08F1  3420               	retlw	32	;' '
   649  08F2  3454               	retlw	84	;'T'
   650  08F3  3475               	retlw	117	;'u'
   651  08F4  346E               	retlw	110	;'n'
   652  08F5  3465               	retlw	101	;'e'
   653  08F6  3400               	retlw	0
   654  08F7                     STR_42:	
   655  08F7  3445               	retlw	69	;'E'
   656  08F8  3452               	retlw	82	;'R'
   657  08F9  3452               	retlw	82	;'R'
   658  08FA  344F               	retlw	79	;'O'
   659  08FB  3452               	retlw	82	;'R'
   660  08FC  3420               	retlw	32	;' '
   661  08FD  3421               	retlw	33	;'!'
   662  08FE  3421               	retlw	33	;'!'
   663  08FF  3400               	retlw	0
   664  0900                     STR_1:	
   665  0900  343C               	retlw	60	;'<'
   666  0901  3420               	retlw	32	;' '
   667  0902  3452               	retlw	82	;'R'
   668  0903  3465               	retlw	101	;'e'
   669  0904  3474               	retlw	116	;'t'
   670  0905  3475               	retlw	117	;'u'
   671  0906  3472               	retlw	114	;'r'
   672  0907  346E               	retlw	110	;'n'
   673  0908  3400               	retlw	0
   674  0909                     STR_36:	
   675  0909  3452               	retlw	82	;'R'
   676  090A  3465               	retlw	101	;'e'
   677  090B  3473               	retlw	115	;'s'
   678  090C  3465               	retlw	101	;'e'
   679  090D  3474               	retlw	116	;'t'
   680  090E  3420               	retlw	32	;' '
   681  090F  343F               	retlw	63	;'?'
   682  0910  3400               	retlw	0
   683  0911                     STR_18:	
   684  0911  3456               	retlw	86	;'V'
   685  0912  3465               	retlw	101	;'e'
   686  0913  3472               	retlw	114	;'r'
   687  0914  3473               	retlw	115	;'s'
   688  0915  3469               	retlw	105	;'i'
   689  0916  346F               	retlw	111	;'o'
   690  0917  346E               	retlw	110	;'n'
   691  0918  3400               	retlw	0
   692  0919                     STR_23:	
   693  0919  3423               	retlw	35	;'#'
   694  091A  344D               	retlw	77	;'M'
   695  091B  3475               	retlw	117	;'u'
   696  091C  3474               	retlw	116	;'t'
   697  091D  3465               	retlw	101	;'e'
   698  091E  3423               	retlw	35	;'#'
   699  091F  3400               	retlw	0
   700  0920                     STR_34:	
   701  0920  344C               	retlw	76	;'L'
   702  0921  346F               	retlw	111	;'o'
   703  0922  3461               	retlw	97	;'a'
   704  0923  3464               	retlw	100	;'d'
   705  0924  3420               	retlw	32	;' '
   706  0925  343F               	retlw	63	;'?'
   707  0926  3400               	retlw	0
   708  0927                     STR_35:	
   709  0927  3453               	retlw	83	;'S'
   710  0928  3461               	retlw	97	;'a'
   711  0929  3476               	retlw	118	;'v'
   712  092A  3465               	retlw	101	;'e'
   713  092B  3420               	retlw	32	;' '
   714  092C  343F               	retlw	63	;'?'
   715  092D  3400               	retlw	0
   716  092E                     STR_39:	
   717  092E  344C               	retlw	76	;'L'
   718  092F  346F               	retlw	111	;'o'
   719  0930  3461               	retlw	97	;'a'
   720  0931  3464               	retlw	100	;'d'
   721  0932  3465               	retlw	101	;'e'
   722  0933  3464               	retlw	100	;'d'
   723  0934  3400               	retlw	0
   724  0935                     STR_25:	
   725  0935  3443               	retlw	67	;'C'
   726  0936  346F               	retlw	111	;'o'
   727  0937  346E               	retlw	110	;'n'
   728  0938  3466               	retlw	102	;'f'
   729  0939  3469               	retlw	105	;'i'
   730  093A  3467               	retlw	103	;'g'
   731  093B  3400               	retlw	0
   732  093C                     STR_12:	
   733  093C  3454               	retlw	84	;'T'
   734  093D  346F               	retlw	111	;'o'
   735  093E  346E               	retlw	110	;'n'
   736  093F  3465               	retlw	101	;'e'
   737  0940  3430               	retlw	48	;'0'
   738  0941  3400               	retlw	0
   739  0942                     STR_13:	
   740  0942  3454               	retlw	84	;'T'
   741  0943  346F               	retlw	111	;'o'
   742  0944  346E               	retlw	110	;'n'
   743  0945  3465               	retlw	101	;'e'
   744  0946  3431               	retlw	49	;'1'
   745  0947  3400               	retlw	0
   746  0948                     STR_14:	
   747  0948  3454               	retlw	84	;'T'
   748  0949  346F               	retlw	111	;'o'
   749  094A  346E               	retlw	110	;'n'
   750  094B  3465               	retlw	101	;'e'
   751  094C  3432               	retlw	50	;'2'
   752  094D  3400               	retlw	0
   753  094E                     STR_40:	
   754  094E  3453               	retlw	83	;'S'
   755  094F  3461               	retlw	97	;'a'
   756  0950  3476               	retlw	118	;'v'
   757  0951  3465               	retlw	101	;'e'
   758  0952  3464               	retlw	100	;'d'
   759  0953  3400               	retlw	0
   760  0954                     STR_30:	
   761  0954  3443               	retlw	67	;'C'
   762  0955  346C               	retlw	108	;'l'
   763  0956  3469               	retlw	105	;'i'
   764  0957  3463               	retlw	99	;'c'
   765  0958  346B               	retlw	107	;'k'
   766  0959  3400               	retlw	0
   767  095A                     STR_24:	
   768  095A  3454               	retlw	84	;'T'
   769  095B  3465               	retlw	101	;'e'
   770  095C  346D               	retlw	109	;'m'
   771  095D  3470               	retlw	112	;'p'
   772  095E  346F               	retlw	111	;'o'
   773  095F  3400               	retlw	0
   774  0960                     STR_10:	
   775  0960  3452               	retlw	82	;'R'
   776  0961  3465               	retlw	101	;'e'
   777  0962  3473               	retlw	115	;'s'
   778  0963  3465               	retlw	101	;'e'
   779  0964  3474               	retlw	116	;'t'
   780  0965  3400               	retlw	0
   781  0966                     STR_7:	
   782  0966  344C               	retlw	76	;'L'
   783  0967  346F               	retlw	111	;'o'
   784  0968  3461               	retlw	97	;'a'
   785  0969  3464               	retlw	100	;'d'
   786  096A  3400               	retlw	0
   787  096B                     STR_8:	
   788  096B  3453               	retlw	83	;'S'
   789  096C  3461               	retlw	97	;'a'
   790  096D  3476               	retlw	118	;'v'
   791  096E  3465               	retlw	101	;'e'
   792  096F  3400               	retlw	0
   793  0970                     STR_9:	
   794  0970  3449               	retlw	73	;'I'
   795  0971  346E               	retlw	110	;'n'
   796  0972  3466               	retlw	102	;'f'
   797  0973  346F               	retlw	111	;'o'
   798  0974  3400               	retlw	0
   799  0975                     STR_37:	
   800  0975  344E               	retlw	78	;'N'
   801  0976  346F               	retlw	111	;'o'
   802  0977  3420               	retlw	32	;' '
   803  0978  3400               	retlw	0
   804  0979                     STR_38:	
   805  0979  3459               	retlw	89	;'Y'
   806  097A  3465               	retlw	101	;'e'
   807  097B  3473               	retlw	115	;'s'
   808  097C  3400               	retlw	0
   809  097D                     STR_31:	
   810  097D  344B               	retlw	75	;'K'
   811  097E  3465               	retlw	101	;'e'
   812  097F  3479               	retlw	121	;'y'
   813  0980  3400               	retlw	0
   814  08DE                     
   815                           ; #config settings
   816  0000                     
   817                           	psect	cinit
   818  00AA                     start_initialization:	
   819  00AA                     __initialization:	
   820                           
   821                           ; Clear objects allocated to COMMON
   822  00AA  01F6               	clrf	__pbssCOMMON& (0+127)
   823  00AB  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   824  00AC  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   825  00AD  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   826                           
   827                           ; Clear objects allocated to BANK0
   828  00AE  305A               	movlw	low __pbssBANK0
   829  00AF  0084               	movwf	4
   830  00B0  3000               	movlw	high __pbssBANK0
   831  00B1  0085               	movwf	5
   832  00B2  3015               	movlw	21
   833  00B3  318A  22DC  3180   	fcall	clear_ram0
   834                           
   835                           ; Initialize objects allocated to BANK0
   836  00B6  30DF               	movlw	low __pidataBANK0
   837  00B7  0084               	movwf	4
   838  00B8  3087               	movlw	(high __pidataBANK0)| (0+128)
   839  00B9  0085               	movwf	5
   840  00BA  3020               	movlw	low __pdataBANK0
   841  00BB  0086               	movwf	6
   842  00BC  3000               	movlw	high __pdataBANK0
   843  00BD  0087               	movwf	7
   844  00BE  3020               	movlw	32
   845  00BF  318A  22E2  3180   	fcall	init_ram
   846                           
   847                           ; Initialize objects allocated to BANK1
   848  00C2  30FB               	movlw	low __pidataBANK1
   849  00C3  0084               	movwf	4
   850  00C4  308E               	movlw	(high __pidataBANK1)| (0+128)
   851  00C5  0085               	movwf	5
   852  00C6  30A0               	movlw	low __pdataBANK1
   853  00C7  0086               	movwf	6
   854  00C8  3000               	movlw	high __pdataBANK1
   855  00C9  0087               	movwf	7
   856  00CA  304C               	movlw	76
   857  00CB  318A  22E2         	fcall	init_ram
   858  00CD                     end_of_initialization:	
   859                           ;End of C runtime variable initialization code
   860                           
   861  00CD                     __end_of__initialization:	
   862  00CD  0020               	movlb	0
   863  00CE  3180  28D0         	ljmp	_main	;jump to C main() function
   864                           
   865                           	psect	bssCOMMON
   866  0076                     __pbssCOMMON:	
   867  0076                     _keyHoldCount_:	
   868  0076                     	ds	2
   869  0078                     isr@eventPrescaler:	
   870  0078                     	ds	2
   871                           
   872                           	psect	bssBANK0
   873  005A                     __pbssBANK0:	
   874  005A                     _currentValueInfo_:	
   875  005A                     	ds	7
   876  0061                     _tempoCounter_:	
   877  0061                     	ds	3
   878  0064                     _soundDurationCount_:	
   879  0064                     	ds	2
   880  0066                     _beatCounter_:	
   881  0066                     	ds	1
   882  0067                     _currentMenuInfoPtr_:	
   883  0067                     	ds	1
   884  0068                     _inputEvent_:	
   885  0068                     	ds	1
   886  0069                     _isMute_:	
   887  0069                     	ds	1
   888  006A                     _machineState_:	
   889  006A                     	ds	1
   890  006B                     _outputEvent_:	
   891  006B                     	ds	1
   892  006C                     _portAState_:	
   893  006C                     	ds	1
   894  006D                     _stateReturnCounter_:	
   895  006D                     	ds	1
   896  006E                     main@prevPortAState:	
   897  006E                     	ds	1
   898                           
   899                           	psect	dataBANK0
   900  0020                     __pdataBANK0:	
   901  0020                     _configration_:	
   902  0020                     	ds	12
   903  002C                     _menuInfoConfirm_:	
   904  002C                     	ds	4
   905  0030                     _menuInfoDuration_:	
   906  0030                     	ds	4
   907  0034                     _menuInfoInformation_:	
   908  0034                     	ds	4
   909  0038                     _menuInfoMain_:	
   910  0038                     	ds	4
   911  003C                     _menuInfoTone_:	
   912  003C                     	ds	4
   913                           
   914                           	psect	dataBANK1
   915  00A0                     __pdataBANK1:	
   916  00A0                     _MESSAGE_INFORMATION:	
   917  00A0                     	ds	8
   918  00A8                     main@F3074:	
   919  00A8                     	ds	6
   920  00AE                     _informationValueBuffer:	
   921  00AE                     	ds	28
   922  00CA                     _MESSAGE_MENU_ITEM_MAIN:	
   923  00CA                     	ds	20
   924  00DE                     _MESSAGE_MENU_ITEM_TONE:	
   925  00DE                     	ds	8
   926  00E6                     _MESSAGE_MENU_ITEM_DURATION:	
   927  00E6                     	ds	6
   928                           
   929                           	psect	clrtext
   930  0ADC                     clear_ram0:	
   931                           ;	Called with FSR0 containing the base address, and
   932                           ;	WREG with the size to clear
   933                           
   934  0ADC  0064               	clrwdt	;clear the watchdog before getting into this loop
   935  0ADD                     clrloop0:	
   936  0ADD  0180               	clrf	0	;clear RAM location pointed to by FSR
   937  0ADE  3101               	addfsr 0,1
   938  0ADF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   939  0AE0  2ADD               	goto	clrloop0	;have we reached the end yet?
   940  0AE1  3400               	retlw	0	;all done for this memory range, return
   941                           
   942                           	psect	inittext
   943  0AE2                     init_ram:	
   944  0AE2  00FE               	movwf	126
   945  0AE3                     initloop:	
   946  0AE3  0012               	moviw fsr0++
   947  0AE4  001E               	movwi fsr1++
   948  0AE5  0BFE               	decfsz	126,f
   949  0AE6  2AE3               	goto	initloop
   950  0AE7  3400               	retlw	0
   951                           
   952                           	psect	cstackCOMMON
   953  0070                     __pcstackCOMMON:	
   954  0070                     ?_initialize:	
   955  0070                     ?__parallel_lcd_Initialize:	
   956                           ; 0 bytes @ 0x0
   957                           
   958  0070                     ?__parallel_lcd_ClearRow:	
   959                           ; 0 bytes @ 0x0
   960                           
   961  0070                     ?_main:	
   962                           ; 0 bytes @ 0x0
   963                           
   964  0070                     ?_isr:	
   965                           ; 0 bytes @ 0x0
   966                           
   967  0070                     ??_isr:	
   968                           ; 0 bytes @ 0x0
   969                           
   970  0070                     ?__configuration_Save:	
   971                           ; 0 bytes @ 0x0
   972                           
   973  0070                     ?__configuration_Load:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?__configuration_GetRomOffset:	
   977                           ; 1 bytes @ 0x0
   978                           
   979                           
   980                           ; 1 bytes @ 0x0
   981  0070                     	ds	4
   982  0074                     ?__private_parallel_lcd_WriteByte:	
   983  0074                     ?__configuration_WriteByte:	
   984                           ; 0 bytes @ 0x4
   985                           
   986  0074                     ??_initialize:	
   987                           ; 0 bytes @ 0x4
   988                           
   989  0074                     ?__configuration_ReadByte:	
   990                           ; 0 bytes @ 0x4
   991                           
   992  0074                     ?___bmul:	
   993                           ; 1 bytes @ 0x4
   994                           
   995  0074                     __private_parallel_lcd_WriteByte@r:	
   996                           ; 1 bytes @ 0x4
   997                           
   998  0074                     __configuration_WriteByte@data:	
   999                           ; 1 bytes @ 0x4
  1000                           
  1001  0074                     __configuration_ReadByte@memorySelect:	
  1002                           ; 1 bytes @ 0x4
  1003                           
  1004  0074                     ___bmul@multiplicand:	
  1005                           ; 1 bytes @ 0x4
  1006                           
  1007                           
  1008                           ; 1 bytes @ 0x4
  1009  0074                     	ds	1
  1010  0075                     ??__private_parallel_lcd_WriteByte:	
  1011  0075                     ??__configuration_ReadByte:	
  1012                           ; 0 bytes @ 0x5
  1013                           
  1014  0075                     ??__configuration_WriteByte:	
  1015                           ; 0 bytes @ 0x5
  1016                           
  1017  0075                     ??___bmul:	
  1018                           ; 0 bytes @ 0x5
  1019                           
  1020  0075                     __private_parallel_lcd_WriteByte@data:	
  1021                           ; 0 bytes @ 0x5
  1022                           
  1023  0075                     __configuration_WriteByte@address:	
  1024                           ; 1 bytes @ 0x5
  1025                           
  1026  0075                     __configuration_ReadByte@address:	
  1027                           ; 1 bytes @ 0x5
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0x5
  1031  0075                     	ds	1
  1032  0076                     ??__parallel_lcd_Initialize:	
  1033  0076                     ??__parallel_lcd_WriteCharacter:	
  1034                           ; 0 bytes @ 0x6
  1035                           
  1036  0076                     ??__configuration_GetRomOffset:	
  1037                           ; 0 bytes @ 0x6
  1038                           
  1039                           
  1040                           	psect	cstackBANK0
  1041  0040                     __pcstackBANK0:	
  1042                           ; 0 bytes @ 0x6
  1043                           
  1044  0040                     ?__parallel_lcd_WriteCharacter:	
  1045  0040                     ?__parallel_lcd_WriteStringClearing:	
  1046                           ; 0 bytes @ 0x0
  1047                           
  1048  0040                     ??__parallel_lcd_ClearRow:	
  1049                           ; 0 bytes @ 0x0
  1050                           
  1051  0040                     ?__parallel_lcd_SetCgram:	
  1052                           ; 0 bytes @ 0x0
  1053                           
  1054  0040                     ??__configuration_Save:	
  1055                           ; 0 bytes @ 0x0
  1056                           
  1057  0040                     ??__configuration_Load:	
  1058                           ; 0 bytes @ 0x0
  1059                           
  1060  0040                     __parallel_lcd_WriteCharacter@character:	
  1061                           ; 0 bytes @ 0x0
  1062                           
  1063  0040                     ___bmul@product:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0040                     __parallel_lcd_WriteStringClearing@stringPtr:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0040                     __parallel_lcd_SetCgram@bitmap:	
  1070                           ; 2 bytes @ 0x0
  1071                           
  1072                           
  1073                           ; 2 bytes @ 0x0
  1074  0040                     	ds	1
  1075  0041                     __parallel_lcd_WriteCharacter@position:	
  1076  0041                     __parallel_lcd_ClearRow@rowSelect:	
  1077                           ; 1 bytes @ 0x1
  1078                           
  1079  0041                     ___bmul@multiplier:	
  1080                           ; 1 bytes @ 0x1
  1081                           
  1082                           
  1083                           ; 1 bytes @ 0x1
  1084  0041                     	ds	1
  1085  0042                     ?__parallel_lcd_WriteString:	
  1086  0042                     ??__parallel_lcd_WriteStringClearing:	
  1087                           ; 0 bytes @ 0x2
  1088                           
  1089  0042                     ??__parallel_lcd_SetCgram:	
  1090                           ; 0 bytes @ 0x2
  1091                           
  1092  0042                     __parallel_lcd_ClearRow@i:	
  1093                           ; 0 bytes @ 0x2
  1094                           
  1095  0042                     __configuration_Save@returnCode:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0042                     __configuration_Load@ptrConfig:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101  0042                     __parallel_lcd_WriteString@stringPtr:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104                           
  1105                           ; 2 bytes @ 0x2
  1106  0042                     	ds	1
  1107  0043                     __parallel_lcd_WriteStringClearing@position:	
  1108  0043                     __parallel_lcd_SetCgram@charCode:	
  1109                           ; 1 bytes @ 0x3
  1110                           
  1111  0043                     __configuration_Save@ptrConfig:	
  1112                           ; 1 bytes @ 0x3
  1113                           
  1114  0043                     __configuration_Load@romOffset:	
  1115                           ; 1 bytes @ 0x3
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x3
  1119  0043                     	ds	1
  1120  0044                     ??__parallel_lcd_WriteString:	
  1121  0044                     __parallel_lcd_WriteStringClearing@i:	
  1122                           ; 0 bytes @ 0x4
  1123                           
  1124  0044                     __parallel_lcd_SetCgram@i:	
  1125                           ; 1 bytes @ 0x4
  1126                           
  1127  0044                     __configuration_Save@romOffset:	
  1128                           ; 1 bytes @ 0x4
  1129                           
  1130  0044                     __configuration_Load@config:	
  1131                           ; 1 bytes @ 0x4
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x4
  1135  0044                     	ds	1
  1136  0045                     __parallel_lcd_WriteString@position:	
  1137  0045                     __configuration_Save@i:	
  1138                           ; 1 bytes @ 0x5
  1139                           
  1140  0045                     __configuration_Load@i:	
  1141                           ; 1 bytes @ 0x5
  1142                           
  1143                           
  1144                           ; 1 bytes @ 0x5
  1145  0045                     	ds	1
  1146  0046                     __configuration_Save@config:	
  1147                           
  1148                           ; 1 bytes @ 0x6
  1149  0046                     	ds	1
  1150  0047                     ??_main:	
  1151                           
  1152                           ; 0 bytes @ 0x7
  1153  0047                     	ds	4
  1154  004B                     main@valueString:	
  1155                           
  1156                           ; 6 bytes @ 0xB
  1157  004B                     	ds	6
  1158  0051                     main@isNonZero:	
  1159                           
  1160                           ; 1 bytes @ 0x11
  1161  0051                     	ds	1
  1162  0052                     main@tmpValue:	
  1163                           
  1164                           ; 2 bytes @ 0x12
  1165  0052                     	ds	2
  1166  0054                     main@romOffset:	
  1167                           
  1168                           ; 1 bytes @ 0x14
  1169  0054                     	ds	1
  1170  0055                     main@keyPressed:	
  1171                           
  1172                           ; 1 bytes @ 0x15
  1173  0055                     	ds	1
  1174  0056                     main@phase:	
  1175                           
  1176                           ; 1 bytes @ 0x16
  1177  0056                     	ds	1
  1178  0057                     main@returnCode:	
  1179                           
  1180                           ; 1 bytes @ 0x17
  1181  0057                     	ds	1
  1182  0058                     main@userId:	
  1183                           
  1184                           ; 1 bytes @ 0x18
  1185  0058                     	ds	1
  1186  0059                     main@i:	
  1187                           
  1188                           ; 1 bytes @ 0x19
  1189  0059                     	ds	1
  1190                           
  1191                           	psect	maintext
  1192  00D0                     __pmaintext:	
  1193 ;;
  1194 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1195 ;;
  1196 ;; *************** function _main *****************
  1197 ;; Defined at:
  1198 ;;		line 204 in file "src/main.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  i               1   25[BANK0 ] unsigned char 
  1203 ;;  userId          1   24[BANK0 ] unsigned char 
  1204 ;;  valueString     6   11[BANK0 ] unsigned char [6]
  1205 ;;  tmpValue        2   18[BANK0 ] unsigned int 
  1206 ;;  isNonZero       1   17[BANK0 ] unsigned char 
  1207 ;;  returnCode      1   23[BANK0 ] enum E2827
  1208 ;;  romOffset       1   20[BANK0 ] unsigned char 
  1209 ;;  keyPressed      1   21[BANK0 ] struct .
  1210 ;;  phase           1   22[BANK0 ] unsigned char 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;		None               void
  1213 ;; Registers used:
  1214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : B1F/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1220 ;;      Params:         0       0       0       0       0       0
  1221 ;;      Locals:         0      15       0       0       0       0
  1222 ;;      Temps:          0       4       0       0       0       0
  1223 ;;      Totals:         0      19       0       0       0       0
  1224 ;;Total ram usage:       19 bytes
  1225 ;; Hardware stack levels required when called:    3
  1226 ;; This function calls:
  1227 ;;		___bmul
  1228 ;;		__configuration_GetRomOffset
  1229 ;;		__configuration_Load
  1230 ;;		__configuration_ReadByte
  1231 ;;		__configuration_Save
  1232 ;;		__parallel_lcd_ClearRow
  1233 ;;		__parallel_lcd_Initialize
  1234 ;;		__parallel_lcd_SetCgram
  1235 ;;		__parallel_lcd_WriteCharacter
  1236 ;;		__parallel_lcd_WriteString
  1237 ;;		__parallel_lcd_WriteStringClearing
  1238 ;;		_initialize
  1239 ;; This function is called by:
  1240 ;;		Startup code after reset
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           
  1245                           ;psect for function _main
  1246  00D0                     _main:	
  1247                           
  1248                           ;main.c: 207: initialize( ) ;
  1249                           
  1250                           ;incstack = 0
  1251                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1252  00D0  318F  2799  3180   	fcall	_initialize
  1253                           
  1254                           ;main.c: 210: if( (~PORTA&0xE0) == 0xC0 )
  1255  00D3  0020               	movlb	0	; select bank0
  1256  00D4  090C               	comf	12,w	;volatile
  1257  00D5  00C7               	movwf	??_main
  1258  00D6  30E0               	movlw	224
  1259  00D7  0547               	andwf	??_main,w
  1260  00D8  3AC0               	xorlw	192
  1261  00D9  1D03               	skipz
  1262  00DA  28E0               	goto	l3286
  1263                           
  1264                           ;main.c: 211: machineState_ = STATE_INITIALIZE ;
  1265  00DB  3011               	movlw	17
  1266  00DC  00C7               	movwf	??_main
  1267  00DD  0847               	movf	??_main,w
  1268  00DE  00EA               	movwf	_machineState_
  1269  00DF  28E1               	goto	l3288
  1270  00E0                     l3286:	
  1271                           
  1272                           ;main.c: 212: else
  1273                           ;main.c: 213: machineState_ = STATE_BOOT ;
  1274  00E0  01EA               	clrf	_machineState_
  1275  00E1                     l3288:	
  1276                           
  1277                           ;main.c: 214: outputEvent_.changeState = 1 ;
  1278  00E1  146B               	bsf	_outputEvent_,0
  1279                           
  1280                           ;main.c: 217: PR2 = 124 ;
  1281  00E2  307C               	movlw	124
  1282  00E3  009B               	movwf	27	;volatile
  1283                           
  1284                           ;main.c: 218: {CCPR4L=(PR2>>1);} ;
  1285  00E4  361B               	lsrf	27,w	;volatile
  1286  00E5  0026               	movlb	6	; select bank6
  1287  00E6  0098               	movwf	24	;volatile
  1288                           
  1289                           ;main.c: 221: T4CONbits.TMR4ON = 1 ;
  1290  00E7  0028               	movlb	8	; select bank8
  1291  00E8  1517               	bsf	23,2	;volatile
  1292                           
  1293                           ;main.c: 224: T1CONbits.TMR1ON = 1 ;
  1294  00E9  0020               	movlb	0	; select bank0
  1295  00EA  1418               	bsf	24,0	;volatile
  1296                           
  1297                           ;main.c: 227: for( uint08_t phase = 0 ; phase < 0xE ; phase++ ) {
  1298  00EB  01D6               	clrf	main@phase
  1299  00EC  300E               	movlw	14
  1300  00ED  0256               	subwf	main@phase,w
  1301  00EE  1803               	btfsc	3,0
  1302  00EF  29A7               	goto	l238
  1303  00F0                     l237:	
  1304  00F0  0064               	clrwdt	;# 
  1305                           
  1306                           ;main.c: 231: TMR1 = 0x0000 ;
  1307  00F1  0020               	movlb	0	; select bank0
  1308  00F2  0196               	clrf	22	;volatile
  1309  00F3  0197               	clrf	23	;volatile
  1310                           
  1311                           ;main.c: 233: switch( phase ) {
  1312  00F4  2983               	goto	l3332
  1313  00F5                     l241:	
  1314                           ;main.c: 234: case 0x0:
  1315                           
  1316                           
  1317                           ;main.c: 235: case 0x2:
  1318                           ;main.c: 237: T2CONbits.TMR2ON = 1 ;
  1319  00F5  151C               	bsf	28,2	;volatile
  1320                           
  1321                           ;main.c: 238: break ;
  1322  00F6  299B               	goto	l248
  1323  00F7                     l244:	
  1324                           ;main.c: 240: case 0x1:
  1325                           
  1326                           
  1327                           ;main.c: 241: case 0xC:
  1328                           ;main.c: 243: T2CONbits.TMR2ON = 0 ;
  1329  00F7  111C               	bcf	28,2	;volatile
  1330                           
  1331                           ;main.c: 244: break ;
  1332  00F8  299B               	goto	l248
  1333  00F9                     l3306:	
  1334                           ;main.c: 246: case 0x3:
  1335                           
  1336                           
  1337                           ;main.c: 248: {
  1338                           ;main.c: 249: uint08_t userId ;
  1339                           ;main.c: 250: userId = _configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1340  00F9  01F4               	clrf	__configuration_ReadByte@memorySelect
  1341  00FA  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1342  00FB  3000               	movlw	0
  1343  00FC  318A  22AA  3180   	fcall	__configuration_ReadByte
  1344  00FF  0020               	movlb	0	; select bank0
  1345  0100  00C7               	movwf	??_main
  1346  0101  0847               	movf	??_main,w
  1347  0102  00D8               	movwf	main@userId
  1348                           
  1349                           ;main.c: 251: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1350  0103  0858               	movf	main@userId,w
  1351  0104  00C7               	movwf	??_main
  1352  0105  3004               	movlw	4
  1353  0106                     u2595:	
  1354  0106  36C7               	lsrf	??_main,f
  1355  0107  0B89               	decfsz	9,f
  1356  0108  2906               	goto	u2595
  1357  0109  0847               	movf	??_main,w
  1358  010A  3830               	iorlw	48
  1359  010B  00C8               	movwf	??_main+1
  1360  010C  0848               	movf	??_main+1,w
  1361  010D  0021               	movlb	1	; select bank1
  1362  010E  00AF               	movwf	(_informationValueBuffer^(0+128)+1)
  1363                           
  1364                           ;main.c: 252: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1365  010F  0020               	movlb	0	; select bank0
  1366  0110  0858               	movf	main@userId,w
  1367  0111  390F               	andlw	15
  1368  0112  3830               	iorlw	48
  1369  0113  00C7               	movwf	??_main
  1370  0114  0847               	movf	??_main,w
  1371  0115  0021               	movlb	1	; select bank1
  1372  0116  00B0               	movwf	(_informationValueBuffer^(0+128)+2)
  1373                           
  1374                           ;main.c: 253: userId = _configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1375  0117  01F4               	clrf	__configuration_ReadByte@memorySelect
  1376  0118  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1377  0119  3001               	movlw	1
  1378  011A  318A  22AA  3180   	fcall	__configuration_ReadByte
  1379  011D  0020               	movlb	0	; select bank0
  1380  011E  00C7               	movwf	??_main
  1381  011F  0847               	movf	??_main,w
  1382  0120  00D8               	movwf	main@userId
  1383                           
  1384                           ;main.c: 254: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1385  0121  0858               	movf	main@userId,w
  1386  0122  00C7               	movwf	??_main
  1387  0123  3004               	movlw	4
  1388  0124                     u2605:	
  1389  0124  36C7               	lsrf	??_main,f
  1390  0125  0B89               	decfsz	9,f
  1391  0126  2924               	goto	u2605
  1392  0127  0847               	movf	??_main,w
  1393  0128  3830               	iorlw	48
  1394  0129  00C8               	movwf	??_main+1
  1395  012A  0848               	movf	??_main+1,w
  1396  012B  0021               	movlb	1	; select bank1
  1397  012C  00B2               	movwf	(_informationValueBuffer^(0+128)+4)
  1398                           
  1399                           ;main.c: 255: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1400  012D  0020               	movlb	0	; select bank0
  1401  012E  0858               	movf	main@userId,w
  1402  012F  390F               	andlw	15
  1403  0130  3830               	iorlw	48
  1404  0131  00C7               	movwf	??_main
  1405  0132  0847               	movf	??_main,w
  1406  0133  0021               	movlb	1	; select bank1
  1407  0134  00B3               	movwf	(_informationValueBuffer^(0+128)+5)
  1408                           
  1409                           ;main.c: 256: }
  1410                           ;main.c: 257: break ;
  1411  0135  299B               	goto	l248
  1412  0136                     l3316:	
  1413                           ;main.c: 259: case 0x4:
  1414                           
  1415                           
  1416                           ;main.c: 261: _parallel_lcd_Initialize( ) ;
  1417  0136  318A  2284  3180   	fcall	__parallel_lcd_Initialize
  1418                           
  1419                           ;main.c: 264: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  1420  0139  3000               	movlw	low (_MESSAGE| (0+32768))
  1421  013A  0084               	movwf	4
  1422  013B  3088               	movlw	high (_MESSAGE| (0+32768))
  1423  013C  0085               	movwf	5
  1424  013D  3F00               	moviw [0]fsr0
  1425  013E  0020               	movlb	0	; select bank0
  1426  013F  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1427  0140  3F01               	moviw [1]fsr0
  1428  0141  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1429  0142  3080               	movlw	128
  1430  0143  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  1431                           
  1432                           ;main.c: 265: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ INFOR
      +                          MATION_ITEM_VERSION ] ) ;
  1433  0146  0021               	movlb	1	; select bank1
  1434  0147  0820               	movf	_MESSAGE_INFORMATION^(0+128),w
  1435  0148  0020               	movlb	0	; select bank0
  1436  0149  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1437  014A  0021               	movlb	1	; select bank1
  1438  014B  0821               	movf	(_MESSAGE_INFORMATION+1)^(0+128),w
  1439  014C  0020               	movlb	0	; select bank0
  1440  014D  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1441  014E  30C0               	movlw	192
  1442  014F  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  1443                           
  1444                           ;main.c: 266: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ INFORMATI
      +                          ON_ITEM_VERSION ] ) ;
  1445  0152  30AE               	movlw	low _informationValueBuffer
  1446  0153  0020               	movlb	0	; select bank0
  1447  0154  00C2               	movwf	__parallel_lcd_WriteString@stringPtr
  1448  0155  3000               	movlw	high _informationValueBuffer
  1449  0156  00C3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  1450  0157  30CA               	movlw	202
  1451  0158  318A  2220  3180   	fcall	__parallel_lcd_WriteString
  1452  015B                     l3324:	
  1453                           ;main.c: 268: case 0x6:
  1454                           
  1455                           
  1456                           ;main.c: 270: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1457  015B  304A               	movlw	low ((_BITMAP| (0+32768)+8))
  1458  015C  0020               	movlb	0	; select bank0
  1459  015D  00C0               	movwf	__parallel_lcd_SetCgram@bitmap
  1460  015E  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1461  015F  00C1               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1462  0160  303B               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1463  0161  0084               	movwf	4
  1464  0162  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1465  0163  0085               	movwf	5
  1466  0164  0800               	movf	0,w	;code access
  1467  0165  318E  269B  3180   	fcall	__parallel_lcd_SetCgram
  1468                           
  1469                           ;main.c: 271: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1470  0168  3052               	movlw	low ((_BITMAP| (0+32768)+16))
  1471  0169  0020               	movlb	0	; select bank0
  1472  016A  00C0               	movwf	__parallel_lcd_SetCgram@bitmap
  1473  016B  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1474  016C  00C1               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1475  016D  303C               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1476  016E  0084               	movwf	4
  1477  016F  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1478  0170  0085               	movwf	5
  1479  0171  0800               	movf	0,w	;code access
  1480  0172  318E  269B  3180   	fcall	__parallel_lcd_SetCgram
  1481                           
  1482                           ;main.c: 272: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1483  0175  3042               	movlw	low (_BITMAP| (0+32768))
  1484  0176  0020               	movlb	0	; select bank0
  1485  0177  00C0               	movwf	__parallel_lcd_SetCgram@bitmap
  1486  0178  3088               	movlw	high (_BITMAP| (0+32768))
  1487  0179  00C1               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1488  017A  303A               	movlw	low (_CHAR_CODE| (0+32768))
  1489  017B  0084               	movwf	4
  1490  017C  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1491  017D  0085               	movwf	5
  1492  017E  0800               	movf	0,w	;code access
  1493  017F  318E  269B  3180   	fcall	__parallel_lcd_SetCgram
  1494                           
  1495                           ;main.c: 275: }
  1496                           
  1497                           ;main.c: 273: break ;
  1498  0182  299B               	goto	l248
  1499  0183                     l3332:	
  1500  0183  0020               	movlb	0	; select bank0
  1501  0184  0856               	movf	main@phase,w
  1502                           
  1503                           ; Switch size 1, requested type "space"
  1504                           ; Number of cases is 7, Range of values is 0 to 12
  1505                           ; switch strategies available:
  1506                           ; Name         Instructions Cycles
  1507                           ; simple_byte           22    12 (average)
  1508                           ; direct_byte           32     6 (fixed)
  1509                           ; jumptable            260     6 (fixed)
  1510                           ;	Chosen strategy is simple_byte
  1511  0185  3A00               	xorlw	0	; case 0
  1512  0186  1903               	skipnz
  1513  0187  28F5               	goto	l241
  1514  0188  3A01               	xorlw	1	; case 1
  1515  0189  1903               	skipnz
  1516  018A  28F7               	goto	l244
  1517  018B  3A03               	xorlw	3	; case 2
  1518  018C  1903               	skipnz
  1519  018D  28F5               	goto	l241
  1520  018E  3A01               	xorlw	1	; case 3
  1521  018F  1903               	skipnz
  1522  0190  28F9               	goto	l3306
  1523  0191  3A07               	xorlw	7	; case 4
  1524  0192  1903               	skipnz
  1525  0193  2936               	goto	l3316
  1526  0194  3A02               	xorlw	2	; case 6
  1527  0195  1903               	skipnz
  1528  0196  295B               	goto	l3324
  1529  0197  3A0A               	xorlw	10	; case 12
  1530  0198  1903               	skipnz
  1531  0199  28F7               	goto	l244
  1532  019A  299B               	goto	l248
  1533  019B                     l248:	
  1534                           ;main.c: 277: while( !PIR1bits.TMR1IF ) ;
  1535                           
  1536  019B  0020               	movlb	0	; select bank0
  1537  019C  1C11               	btfss	17,0	;volatile
  1538  019D  299B               	goto	l248
  1539                           
  1540                           ;main.c: 278: PIR1bits.TMR1IF = 0 ;
  1541  019E  1011               	bcf	17,0	;volatile
  1542  019F  3001               	movlw	1
  1543  01A0  00C7               	movwf	??_main
  1544  01A1  0847               	movf	??_main,w
  1545  01A2  07D6               	addwf	main@phase,f
  1546  01A3  300E               	movlw	14
  1547  01A4  0256               	subwf	main@phase,w
  1548  01A5  1C03               	skipc
  1549  01A6  28F0               	goto	l237
  1550  01A7                     l238:	
  1551                           
  1552                           ;main.c: 280: }
  1553                           ;main.c: 284: INTCONbits.PEIE = 1 ;
  1554  01A7  170B               	bsf	11,6	;volatile
  1555                           
  1556                           ;main.c: 285: T6CONbits.TMR6ON = 1 ;
  1557  01A8  0028               	movlb	8	; select bank8
  1558  01A9  151E               	bsf	30,2	;volatile
  1559                           
  1560                           ;main.c: 286: PIE3bits.TMR6IE = 1 ;
  1561  01AA  0021               	movlb	1	; select bank1
  1562  01AB  1593               	bsf	19,3	;volatile
  1563  01AC                     l251:	
  1564                           ;main.c: 289: for( ; ; ) {
  1565                           
  1566  01AC  0064               	clrwdt	;# 
  1567                           
  1568                           ;main.c: 295: static UniPortAState prevPortAState = { 0x00 } ;
  1569                           ;main.c: 296: UniPortAState keyPressed ;
  1570                           ;main.c: 298: keyPressed.byte = ( portAState_.byte ^ prevPortAState.byte ) & portAState_
      +                          .byte ;
  1571  01AD  0020               	movlb	0	; select bank0
  1572  01AE  086C               	movf	_portAState_,w
  1573  01AF  066E               	xorwf	main@prevPortAState,w
  1574  01B0  056C               	andwf	_portAState_,w
  1575  01B1  00C7               	movwf	??_main
  1576  01B2  0847               	movf	??_main,w
  1577  01B3  00D5               	movwf	main@keyPressed
  1578                           
  1579                           ;main.c: 299: prevPortAState.byte = portAState_.byte ;
  1580  01B4  086C               	movf	_portAState_,w
  1581  01B5  00C7               	movwf	??_main
  1582  01B6  0847               	movf	??_main,w
  1583  01B7  00EE               	movwf	main@prevPortAState
  1584                           
  1585                           ;main.c: 301: if( keyPressed.keyMenu ) {
  1586  01B8  1AD5               	btfsc	main@keyPressed,5
  1587                           
  1588                           ;main.c: 302: inputEvent_.keyPressMenu = 1 ;
  1589  01B9  1568               	bsf	_inputEvent_,2
  1590                           
  1591                           ;main.c: 303: }
  1592                           ;main.c: 305: if( keyPressed.keyUp ) {
  1593  01BA  1FD5               	btfss	main@keyPressed,7
  1594  01BB  29C1               	goto	l255
  1595                           
  1596                           ;main.c: 306: if( portAState_.keyDown )
  1597  01BC  1F6C               	btfss	_portAState_,6
  1598  01BD  29C0               	goto	l256
  1599                           
  1600                           ;main.c: 307: inputEvent_.keyPressUpDown = 1 ;
  1601  01BE  15E8               	bsf	_inputEvent_,3
  1602  01BF  29C1               	goto	l255
  1603  01C0                     l256:	
  1604                           
  1605                           ;main.c: 308: else
  1606                           ;main.c: 309: inputEvent_.keyPressUp = 1 ;
  1607  01C0  1468               	bsf	_inputEvent_,0
  1608  01C1                     l255:	
  1609                           
  1610                           ;main.c: 310: }
  1611                           ;main.c: 312: if( keyPressed.keyDown ) {
  1612  01C1  1F55               	btfss	main@keyPressed,6
  1613  01C2  29C8               	goto	l258
  1614                           
  1615                           ;main.c: 313: if( portAState_.keyUp )
  1616  01C3  1FEC               	btfss	_portAState_,7
  1617  01C4  29C7               	goto	l259
  1618                           
  1619                           ;main.c: 314: inputEvent_.keyPressUpDown = 1 ;
  1620  01C5  15E8               	bsf	_inputEvent_,3
  1621  01C6  29C8               	goto	l258
  1622  01C7                     l259:	
  1623                           
  1624                           ;main.c: 315: else
  1625                           ;main.c: 316: inputEvent_.keyPressDown = 1 ;
  1626  01C7  14E8               	bsf	_inputEvent_,1
  1627  01C8                     l258:	
  1628                           
  1629                           ;main.c: 317: }
  1630                           ;main.c: 319: if( (inputEvent_.keyPressHeldUp&&!(inputEvent_.keyPressHeldUp=0)) )
  1631  01C8  1E68               	btfss	_inputEvent_,4
  1632  01C9  29CC               	goto	l261
  1633  01CA  1268               	bcf	_inputEvent_,4
  1634                           
  1635                           ;main.c: 320: inputEvent_.keyPressUp = 1 ;
  1636  01CB  1468               	bsf	_inputEvent_,0
  1637  01CC                     l261:	
  1638                           
  1639                           ;main.c: 322: if( (inputEvent_.keyPressHeldDown&&!(inputEvent_.keyPressHeldDown=0)) )
  1640  01CC  1EE8               	btfss	_inputEvent_,5
  1641  01CD  29D0               	goto	l3358
  1642  01CE  12E8               	bcf	_inputEvent_,5
  1643                           
  1644                           ;main.c: 323: inputEvent_.keyPressDown = 1 ;
  1645  01CF  14E8               	bsf	_inputEvent_,1
  1646  01D0                     l3358:	
  1647                           
  1648                           ;main.c: 325: if( inputEvent_.all ) {
  1649  01D0  0868               	movf	_inputEvent_,w
  1650  01D1  1D03               	btfss	3,2
  1651                           
  1652                           ;main.c: 326: outputEvent_.soundOnKey = 1 ;
  1653  01D2  166B               	bsf	_outputEvent_,4
  1654                           
  1655                           ;main.c: 327: }
  1656                           ;main.c: 330: if( (outputEvent_.accessEeprom&&!(outputEvent_.accessEeprom=0)) ) {
  1657  01D3  1FEB               	btfss	_outputEvent_,7
  1658  01D4  2A6D               	goto	l3398
  1659  01D5  13EB               	bcf	_outputEvent_,7
  1660                           
  1661                           ;main.c: 332: INTCONbits.GIE=0 ;
  1662  01D6  138B               	bcf	11,7	;volatile
  1663                           
  1664                           ;main.c: 334: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  1665  01D7  01D7               	clrf	main@returnCode
  1666                           
  1667                           ;main.c: 336: switch( machineState_ ) {
  1668  01D8  29EB               	goto	l3372
  1669  01D9                     l266:	
  1670                           ;main.c: 338: case STATE_BOOT:
  1671                           
  1672                           
  1673                           ;main.c: 339: machineState_ = STATE_METRONOME ;
  1674  01D9  01EA               	clrf	_machineState_
  1675  01DA  0AEA               	incf	_machineState_,f
  1676                           
  1677                           ;main.c: 340: outputEvent_.changeState = 1 ;
  1678  01DB  146B               	bsf	_outputEvent_,0
  1679                           
  1680                           ;main.c: 341: outputEvent_.resetMetronome = 1 ;
  1681  01DC  176B               	bsf	_outputEvent_,6
  1682  01DD                     l3366:	
  1683                           ;main.c: 342: case STATE_LOAD:
  1684                           
  1685                           
  1686                           ;main.c: 343: returnCode = _configuration_Load( &configration_ ) ;
  1687  01DD  3020               	movlw	(low (_configration_| 0))& (0+255)
  1688  01DE  318F  2747  3180   	fcall	__configuration_Load
  1689  01E1  29E6               	goto	L1
  1690  01E2                     l3368:	
  1691                           ;main.c: 346: case STATE_INITIALIZE:
  1692                           
  1693                           ;main.c: 344: break ;
  1694                           
  1695                           
  1696                           ;main.c: 347: case STATE_SAVE:
  1697                           ;main.c: 348: returnCode = _configuration_Save( &configration_ ) ;
  1698  01E2  3020               	movlw	(low (_configration_| 0))& (0+255)
  1699  01E3  3187  2751  3180   	fcall	__configuration_Save
  1700  01E6                     L1:	
  1701  01E6  0020               	movlb	0	; select bank0
  1702  01E7  00C7               	movwf	??_main
  1703  01E8  0847               	movf	??_main,w
  1704  01E9  00D7               	movwf	main@returnCode
  1705                           
  1706                           ;main.c: 351: }
  1707                           
  1708                           ;main.c: 349: break ;
  1709  01EA  29F9               	goto	l3374
  1710  01EB                     l3372:	
  1711  01EB  086A               	movf	_machineState_,w
  1712                           
  1713                           ; Switch size 1, requested type "space"
  1714                           ; Number of cases is 4, Range of values is 0 to 17
  1715                           ; switch strategies available:
  1716                           ; Name         Instructions Cycles
  1717                           ; simple_byte           13     7 (average)
  1718                           ; direct_byte           42     6 (fixed)
  1719                           ; jumptable            260     6 (fixed)
  1720                           ;	Chosen strategy is simple_byte
  1721  01EC  3A00               	xorlw	0	; case 0
  1722  01ED  1903               	skipnz
  1723  01EE  29D9               	goto	l266
  1724  01EF  3A0D               	xorlw	13	; case 13
  1725  01F0  1903               	skipnz
  1726  01F1  29E2               	goto	l3368
  1727  01F2  3A02               	xorlw	2	; case 15
  1728  01F3  1903               	skipnz
  1729  01F4  29DD               	goto	l3366
  1730  01F5  3A1E               	xorlw	30	; case 17
  1731  01F6  1903               	skipnz
  1732  01F7  29E2               	goto	l3368
  1733  01F8  29F9               	goto	l3374
  1734  01F9                     l3374:	
  1735                           
  1736                           ;main.c: 353: uint08_t romOffset = _configuration_GetRomOffset( ) ;
  1737  01F9  318A  22E8  3180   	fcall	__configuration_GetRomOffset
  1738  01FC  0020               	movlb	0	; select bank0
  1739  01FD  00C7               	movwf	??_main
  1740  01FE  0847               	movf	??_main,w
  1741  01FF  00D4               	movwf	main@romOffset
  1742                           
  1743                           ;main.c: 354: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][3] = HEX_TABLE[ romO
      +                          ffset >> 4 ] ;
  1744  0200  0854               	movf	main@romOffset,w
  1745  0201  00C7               	movwf	??_main
  1746  0202  3004               	movlw	4
  1747  0203                     u2725:	
  1748  0203  36C7               	lsrf	??_main,f
  1749  0204  0B89               	decfsz	9,f
  1750  0205  2A03               	goto	u2725
  1751  0206  0847               	movf	??_main,w
  1752  0207  3E2A               	addlw	low (_HEX_TABLE| (0+32768))
  1753  0208  0084               	movwf	4
  1754  0209  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1755  020A  1803               	skipnc
  1756  020B  3E01               	addlw	1
  1757  020C  0085               	movwf	5
  1758  020D  0800               	movf	0,w	;code access
  1759  020E  00C8               	movwf	??_main+1
  1760  020F  0848               	movf	??_main+1,w
  1761  0210  0021               	movlb	1	; select bank1
  1762  0211  00B8               	movwf	(_informationValueBuffer^(0+128)+10)
  1763                           
  1764                           ;main.c: 355: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ romO
      +                          ffset & 0x0F ] ;
  1765  0212  0020               	movlb	0	; select bank0
  1766  0213  0854               	movf	main@romOffset,w
  1767  0214  390F               	andlw	15
  1768  0215  3E2A               	addlw	low (_HEX_TABLE| (0+32768))
  1769  0216  0084               	movwf	4
  1770  0217  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1771  0218  1803               	skipnc
  1772  0219  3E01               	addlw	1
  1773  021A  0085               	movwf	5
  1774  021B  0800               	movf	0,w	;code access
  1775  021C  00C7               	movwf	??_main
  1776  021D  0847               	movf	??_main,w
  1777  021E  0021               	movlb	1	; select bank1
  1778  021F  00B9               	movwf	(_informationValueBuffer^(0+128)+11)
  1779                           
  1780                           ;main.c: 356: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][3] = HEX_TABLE[ con
      +                          figration_.writeCount >> 4 ] ;
  1781  0220  0020               	movlb	0	; select bank0
  1782  0221  0820               	movf	_configration_,w
  1783  0222  00C7               	movwf	??_main
  1784  0223  3004               	movlw	4
  1785  0224                     u2735:	
  1786  0224  36C7               	lsrf	??_main,f
  1787  0225  0B89               	decfsz	9,f
  1788  0226  2A24               	goto	u2735
  1789  0227  0847               	movf	??_main,w
  1790  0228  3E2A               	addlw	low (_HEX_TABLE| (0+32768))
  1791  0229  0084               	movwf	4
  1792  022A  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1793  022B  1803               	skipnc
  1794  022C  3E01               	addlw	1
  1795  022D  0085               	movwf	5
  1796  022E  0800               	movf	0,w	;code access
  1797  022F  00C8               	movwf	??_main+1
  1798  0230  0848               	movf	??_main+1,w
  1799  0231  0021               	movlb	1	; select bank1
  1800  0232  00BF               	movwf	(_informationValueBuffer^(0+128)+17)
  1801                           
  1802                           ;main.c: 357: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          figration_.writeCount & 0x0F ] ;
  1803  0233  0020               	movlb	0	; select bank0
  1804  0234  0820               	movf	_configration_,w
  1805  0235  390F               	andlw	15
  1806  0236  3E2A               	addlw	low (_HEX_TABLE| (0+32768))
  1807  0237  0084               	movwf	4
  1808  0238  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1809  0239  1803               	skipnc
  1810  023A  3E01               	addlw	1
  1811  023B  0085               	movwf	5
  1812  023C  0800               	movf	0,w	;code access
  1813  023D  00C7               	movwf	??_main
  1814  023E  0847               	movf	??_main,w
  1815  023F  0021               	movlb	1	; select bank1
  1816  0240  00C0               	movwf	(_informationValueBuffer^(0+128)+18)
  1817                           
  1818                           ;main.c: 358: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][3] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  1819  0241  0020               	movlb	0	; select bank0
  1820  0242  0857               	movf	main@returnCode,w
  1821  0243  00C7               	movwf	??_main
  1822  0244  3004               	movlw	4
  1823  0245                     u2745:	
  1824  0245  36C7               	lsrf	??_main,f
  1825  0246  0B89               	decfsz	9,f
  1826  0247  2A45               	goto	u2745
  1827  0248  0847               	movf	??_main,w
  1828  0249  3E2A               	addlw	low (_HEX_TABLE| (0+32768))
  1829  024A  0084               	movwf	4
  1830  024B  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1831  024C  1803               	skipnc
  1832  024D  3E01               	addlw	1
  1833  024E  0085               	movwf	5
  1834  024F  0800               	movf	0,w	;code access
  1835  0250  00C8               	movwf	??_main+1
  1836  0251  0848               	movf	??_main+1,w
  1837  0252  0021               	movlb	1	; select bank1
  1838  0253  00C6               	movwf	(_informationValueBuffer^(0+128)+24)
  1839                           
  1840                           ;main.c: 359: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  1841  0254  0020               	movlb	0	; select bank0
  1842  0255  0857               	movf	main@returnCode,w
  1843  0256  390F               	andlw	15
  1844  0257  3E2A               	addlw	low (_HEX_TABLE| (0+32768))
  1845  0258  0084               	movwf	4
  1846  0259  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1847  025A  1803               	skipnc
  1848  025B  3E01               	addlw	1
  1849  025C  0085               	movwf	5
  1850  025D  0800               	movf	0,w	;code access
  1851  025E  00C7               	movwf	??_main
  1852  025F  0847               	movf	??_main,w
  1853  0260  0021               	movlb	1	; select bank1
  1854  0261  00C7               	movwf	(_informationValueBuffer^(0+128)+25)
  1855                           
  1856                           ;main.c: 361: if( returnCode ) {
  1857  0262  0020               	movlb	0	; select bank0
  1858  0263  0857               	movf	main@returnCode,w
  1859  0264  1903               	btfsc	3,2
  1860  0265  2A6C               	goto	l3396
  1861                           
  1862                           ;main.c: 362: machineState_ = STATE_ERROR ;
  1863  0266  3013               	movlw	19
  1864  0267  00C7               	movwf	??_main
  1865  0268  0847               	movf	??_main,w
  1866  0269  00EA               	movwf	_machineState_
  1867                           
  1868                           ;main.c: 363: outputEvent_.all = 0x00 ;
  1869  026A  01EB               	clrf	_outputEvent_
  1870                           
  1871                           ;main.c: 364: outputEvent_.changeState = 1 ;
  1872  026B  146B               	bsf	_outputEvent_,0
  1873  026C                     l3396:	
  1874                           
  1875                           ;main.c: 365: }
  1876                           ;main.c: 367: INTCONbits.GIE=1 ;
  1877  026C  178B               	bsf	11,7	;volatile
  1878  026D                     l3398:	
  1879                           
  1880                           ;main.c: 369: }
  1881                           ;main.c: 372: if( (inputEvent_.keyPressUpDown&&!(inputEvent_.keyPressUpDown=0)) ) {
  1882  026D  1DE8               	btfss	_inputEvent_,3
  1883  026E  2A7B               	goto	l272
  1884  026F  11E8               	bcf	_inputEvent_,3
  1885                           
  1886                           ;main.c: 373: if( machineState_ == STATE_METRONOME ) {
  1887  0270  036A               	decf	_machineState_,w
  1888  0271  1D03               	btfss	3,2
  1889  0272  2A7B               	goto	l272
  1890                           
  1891                           ;main.c: 374: {if(isMute_){isMute_=0;}else{isMute_=1;}} ;
  1892  0273  0869               	movf	_isMute_,w
  1893  0274  1903               	btfsc	3,2
  1894  0275  2A78               	goto	l274
  1895  0276  01E9               	clrf	_isMute_
  1896  0277  2A7A               	goto	l275
  1897  0278                     l274:	
  1898  0278  01E9               	clrf	_isMute_
  1899  0279  0AE9               	incf	_isMute_,f
  1900  027A                     l275:	
  1901                           
  1902                           ;main.c: 375: outputEvent_.changeMessage = 1 ;
  1903  027A  14EB               	bsf	_outputEvent_,1
  1904  027B                     l272:	
  1905                           
  1906                           ;main.c: 376: }
  1907                           ;main.c: 377: }
  1908                           ;main.c: 380: if( (inputEvent_.keyPressMenu&&!(inputEvent_.keyPressMenu=0)) ) {
  1909  027B  1D68               	btfss	_inputEvent_,2
  1910  027C  2B15               	goto	l276
  1911  027D  1168               	bcf	_inputEvent_,2
  1912                           
  1913                           ;main.c: 381: outputEvent_.changeState = 1 ;
  1914  027E  146B               	bsf	_outputEvent_,0
  1915                           
  1916                           ;main.c: 383: switch( machineState_ ) {
  1917  027F  2B08               	goto	l3496
  1918  0280                     l3410:	
  1919                           ;main.c: 387: case MENU_ITEM_MAIN_BEAT_COUNT:
  1920                           
  1921                           ;main.c: 386: switch( menuInfoMain_.select ) {
  1922                           
  1923                           ;main.c: 385: case STATE_MENU_MAIN:
  1924                           
  1925                           
  1926                           ;main.c: 388: machineState_ = STATE_ADJUST_BEAT_COUNT ;
  1927  0280  3005               	movlw	5
  1928  0281  2B00               	goto	L21
  1929  0282                     l3412:	
  1930                           ;main.c: 391: case MENU_ITEM_MAIN_TONE_MENU:
  1931                           
  1932                           ;main.c: 389: break ;
  1933                           
  1934                           
  1935                           ;main.c: 392: machineState_ = STATE_MENU_TONE ;
  1936  0282  3003               	movlw	3
  1937  0283  00C7               	movwf	??_main
  1938  0284  0847               	movf	??_main,w
  1939  0285  00EA               	movwf	_machineState_
  1940                           
  1941                           ;main.c: 393: menuInfoTone_.select = 0 ;
  1942  0286  01BC               	clrf	_menuInfoTone_
  1943                           
  1944                           ;main.c: 394: menuInfoTone_.cursorPosition = 0 ;
  1945  0287  01BD               	clrf	_menuInfoTone_+1
  1946                           
  1947                           ;main.c: 395: break ;
  1948  0288  2B15               	goto	l276
  1949  0289                     l3418:	
  1950                           ;main.c: 397: case MENU_ITEM_MAIN_ADJUST_DURATION:
  1951                           
  1952                           
  1953                           ;main.c: 398: machineState_ = STATE_MENU_DURATION ;
  1954  0289  3004               	movlw	4
  1955  028A  00C7               	movwf	??_main
  1956  028B  0847               	movf	??_main,w
  1957  028C  00EA               	movwf	_machineState_
  1958                           
  1959                           ;main.c: 399: menuInfoDuration_.select = 0 ;
  1960  028D  01B0               	clrf	_menuInfoDuration_
  1961                           
  1962                           ;main.c: 400: menuInfoDuration_.cursorPosition = 0 ;
  1963  028E  01B1               	clrf	_menuInfoDuration_+1
  1964                           
  1965                           ;main.c: 401: break ;
  1966  028F  2B15               	goto	l276
  1967  0290                     l3424:	
  1968                           ;main.c: 403: case MENU_ITEM_MAIN_PULSE_WIDTH:
  1969                           
  1970                           
  1971                           ;main.c: 404: machineState_ = STATE_ADJUST_PULSE_WIDTH ;
  1972  0290  3008               	movlw	8
  1973  0291  2B00               	goto	L21
  1974  0292                     l3426:	
  1975                           ;main.c: 407: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  1976                           
  1977                           ;main.c: 405: break ;
  1978                           
  1979                           
  1980                           ;main.c: 408: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  1981  0292  300A               	movlw	10
  1982  0293  2B00               	goto	L21
  1983  0294                     l3428:	
  1984                           ;main.c: 411: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  1985                           
  1986                           ;main.c: 409: break ;
  1987                           
  1988                           
  1989                           ;main.c: 412: machineState_ = STATE_CONFIRM_LOAD ;
  1990  0294  300E               	movlw	14
  1991  0295  00C7               	movwf	??_main
  1992  0296  0847               	movf	??_main,w
  1993  0297  00EA               	movwf	_machineState_
  1994                           
  1995                           ;main.c: 413: currentValueInfo_.messageTitle = MESSAGE.CONFIRM.LOAD ;
  1996  0298  3018               	movlw	low ((_MESSAGE+24)| (0+32768))
  1997  0299  0084               	movwf	4
  1998  029A  3088               	movlw	high ((_MESSAGE+24)| (0+32768))
  1999  029B  0085               	movwf	5
  2000  029C  3F00               	moviw [0]fsr0
  2001  029D  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2002  029E  3F01               	moviw [1]fsr0
  2003  029F  2AB9               	goto	L6
  2004  02A0                     l3432:	
  2005                           ;main.c: 416: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  2006                           
  2007                           ;main.c: 414: break ;
  2008                           
  2009                           
  2010                           ;main.c: 417: machineState_ = STATE_CONFIRM_SAVE ;
  2011  02A0  300C               	movlw	12
  2012  02A1  00C7               	movwf	??_main
  2013  02A2  0847               	movf	??_main,w
  2014  02A3  00EA               	movwf	_machineState_
  2015                           
  2016                           ;main.c: 418: currentValueInfo_.messageTitle = MESSAGE.CONFIRM.SAVE ;
  2017  02A4  301A               	movlw	low ((_MESSAGE+26)| (0+32768))
  2018  02A5  0084               	movwf	4
  2019  02A6  3088               	movlw	high ((_MESSAGE+26)| (0+32768))
  2020  02A7  0085               	movwf	5
  2021  02A8  3F00               	moviw [0]fsr0
  2022  02A9  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2023  02AA  3F01               	moviw [1]fsr0
  2024  02AB  2AB9               	goto	L6
  2025  02AC                     l3436:	
  2026                           ;main.c: 421: case MENU_ITEM_MAIN_INFORMATION:
  2027                           
  2028                           ;main.c: 419: break ;
  2029                           
  2030                           
  2031                           ;main.c: 422: machineState_ = STATE_INFORMATION ;
  2032  02AC  300B               	movlw	11
  2033  02AD  2B00               	goto	L21
  2034  02AE                     l3438:	
  2035                           ;main.c: 425: case MENU_ITEM_MAIN_RESET:
  2036                           
  2037                           ;main.c: 423: break ;
  2038                           
  2039                           
  2040                           ;main.c: 426: machineState_ = STATE_CONFIRM_RESET ;
  2041  02AE  3010               	movlw	16
  2042  02AF  00C7               	movwf	??_main
  2043  02B0  0847               	movf	??_main,w
  2044  02B1  00EA               	movwf	_machineState_
  2045                           
  2046                           ;main.c: 427: currentValueInfo_.messageTitle = MESSAGE.CONFIRM.RESET ;
  2047  02B2  301C               	movlw	low ((_MESSAGE+28)| (0+32768))
  2048  02B3  0084               	movwf	4
  2049  02B4  3088               	movlw	high ((_MESSAGE+28)| (0+32768))
  2050  02B5  0085               	movwf	5
  2051  02B6  3F00               	moviw [0]fsr0
  2052  02B7  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2053  02B8  3F01               	moviw [1]fsr0
  2054  02B9                     L6:	
  2055  02B9  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2056                           
  2057                           ;main.c: 428: break ;
  2058  02BA  2B15               	goto	l276
  2059  02BB                     l291:	
  2060                           ;main.c: 431: default:
  2061                           
  2062                           ;main.c: 430: case MENU_ITEM_MAIN_RETURN:
  2063                           
  2064                           
  2065                           ;main.c: 432: machineState_ = STATE_METRONOME ;
  2066  02BB  01EA               	clrf	_machineState_
  2067  02BC  0AEA               	incf	_machineState_,f
  2068                           
  2069                           ;main.c: 435: }
  2070                           
  2071                           ;main.c: 433: break ;
  2072  02BD  2B15               	goto	l276
  2073  02BE                     l3444:	
  2074  02BE  0838               	movf	_menuInfoMain_,w
  2075                           
  2076                           ; Switch size 1, requested type "space"
  2077                           ; Number of cases is 10, Range of values is 0 to 9
  2078                           ; switch strategies available:
  2079                           ; Name         Instructions Cycles
  2080                           ; direct_byte           26     6 (fixed)
  2081                           ; simple_byte           31    16 (average)
  2082                           ; jumptable            260     6 (fixed)
  2083                           ;	Chosen strategy is direct_byte
  2084  02BF  0084               	movwf	4
  2085  02C0  300A               	movlw	10
  2086  02C1  0204               	subwf	4,w
  2087  02C2  1803               	skipnc
  2088  02C3  2ABB               	goto	l291
  2089  02C4  318A               	movlp	high S3930
  2090  02C5  3504               	lslf	4,w
  2091  02C6  3E70               	addlw	low S3930
  2092  02C7  0082               	movwf	2
  2093                           
  2094                           ;main.c: 436: break ;
  2095  02C8  2B15               	goto	l276
  2096  02C9                     l3446:	
  2097                           ;main.c: 438: case STATE_MENU_TONE:
  2098                           
  2099                           
  2100                           ;main.c: 439: if( menuInfoTone_.select == MENU_ITEM_TONE_RETURN )
  2101  02C9  083C               	movf	_menuInfoTone_,w
  2102  02CA  1903               	btfsc	3,2
  2103  02CB  2AFC               	goto	L38
  2104                           
  2105                           ;main.c: 441: else
  2106                           ;main.c: 442: machineState_ = STATE_ADJUST_TONE ;
  2107                           
  2108                           ;main.c: 440: machineState_ = STATE_MENU_MAIN ;
  2109  02CC  3009               	movlw	9
  2110  02CD  2B00               	goto	L21
  2111  02CE                     l3452:	
  2112                           ;main.c: 447: case MENU_ITEM_DURATION_ADJUST_CLICK:
  2113                           
  2114                           ;main.c: 446: switch( currentMenuInfoPtr_->select ) {
  2115                           
  2116                           ;main.c: 445: case STATE_MENU_DURATION:
  2117                           
  2118                           ;main.c: 443: break ;
  2119                           
  2120                           
  2121                           ;main.c: 448: machineState_ = STATE_ADJUST_DURATION_CLICK ;
  2122  02CE  3006               	movlw	6
  2123  02CF  2B00               	goto	L21
  2124  02D0                     l3454:	
  2125                           ;main.c: 451: case MENU_ITEM_DURATION_ADJUST_KEY:
  2126                           
  2127                           ;main.c: 449: break ;
  2128                           
  2129                           
  2130                           ;main.c: 452: machineState_ = STATE_ADJUST_DURATION_KEY ;
  2131  02D0  3007               	movlw	7
  2132  02D1  2B00               	goto	L21
  2133  02D2                     l3456:	
  2134                           ;main.c: 456: default:
  2135                           
  2136                           ;main.c: 455: case MENU_ITEM_DURATION_RETURN:
  2137                           
  2138                           ;main.c: 453: break ;
  2139                           
  2140  02D2  2AFC               	goto	L38
  2141  02D3                     l3460:	
  2142                           ;main.c: 460: }
  2143                           
  2144                           ;main.c: 458: break ;
  2145                           
  2146                           ;main.c: 457: machineState_ = STATE_MENU_MAIN ;
  2147                           
  2148  02D3  0867               	movf	_currentMenuInfoPtr_,w
  2149  02D4  0086               	movwf	6
  2150  02D5  0187               	clrf	7
  2151  02D6  0801               	movf	1,w
  2152                           
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 3, Range of values is 0 to 2
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           10     6 (average)
  2158                           ; direct_byte           12     6 (fixed)
  2159                           ; jumptable            260     6 (fixed)
  2160                           ;	Chosen strategy is simple_byte
  2161  02D7  3A00               	xorlw	0	; case 0
  2162  02D8  1903               	skipnz
  2163  02D9  2AD2               	goto	l3456
  2164  02DA  3A01               	xorlw	1	; case 1
  2165  02DB  1903               	skipnz
  2166  02DC  2ACE               	goto	l3452
  2167  02DD  3A03               	xorlw	3	; case 2
  2168  02DE  1903               	skipnz
  2169  02DF  2AD0               	goto	l3454
  2170  02E0  2AD2               	goto	l3456
  2171                           
  2172                           ;main.c: 461: break ;
  2173  02E1  2B15               	goto	l276
  2174  02E2                     l3462:	
  2175                           ;main.c: 463: case STATE_CONFIRM_LOAD:
  2176                           
  2177                           
  2178                           ;main.c: 464: if( menuInfoConfirm_.select )
  2179  02E2  082C               	movf	_menuInfoConfirm_,w
  2180  02E3  1903               	btfsc	3,2
  2181  02E4  2AFC               	goto	L38
  2182                           
  2183                           ;main.c: 465: machineState_ = STATE_LOAD ;
  2184  02E5  300F               	movlw	15
  2185  02E6  2B00               	goto	L21
  2186  02E7                     l3468:	
  2187                           ;main.c: 470: case STATE_CONFIRM_SAVE:
  2188                           
  2189                           ;main.c: 468: break ;
  2190                           
  2191                           ;main.c: 466: else
  2192                           ;main.c: 467: machineState_ = STATE_MENU_MAIN ;
  2193                           
  2194                           
  2195                           ;main.c: 471: if( menuInfoConfirm_.select )
  2196  02E7  082C               	movf	_menuInfoConfirm_,w
  2197  02E8  1903               	btfsc	3,2
  2198  02E9  2AFC               	goto	L38
  2199                           
  2200                           ;main.c: 472: machineState_ = STATE_SAVE ;
  2201  02EA  300D               	movlw	13
  2202  02EB  2B00               	goto	L21
  2203  02EC                     l3474:	
  2204                           ;main.c: 477: case STATE_CONFIRM_RESET:
  2205                           
  2206                           ;main.c: 475: break ;
  2207                           
  2208                           ;main.c: 473: else
  2209                           ;main.c: 474: machineState_ = STATE_MENU_MAIN ;
  2210                           
  2211                           
  2212                           ;main.c: 478: if( menuInfoConfirm_.select )
  2213  02EC  082C               	movf	_menuInfoConfirm_,w
  2214  02ED  1903               	btfsc	3,2
  2215  02EE  2AFC               	goto	L38
  2216                           
  2217                           ;main.c: 479: machineState_ = STATE_RESET ;
  2218  02EF  3012               	movlw	18
  2219  02F0  2B00               	goto	L21
  2220  02F1                     l3480:	
  2221                           ;main.c: 484: case STATE_METRONOME:
  2222                           
  2223                           ;main.c: 482: break ;
  2224                           
  2225                           ;main.c: 480: else
  2226                           ;main.c: 481: machineState_ = STATE_MENU_MAIN ;
  2227                           
  2228                           
  2229                           ;main.c: 485: machineState_ = STATE_MENU_MAIN ;
  2230  02F1  3002               	movlw	2
  2231  02F2  00C7               	movwf	??_main
  2232  02F3  0847               	movf	??_main,w
  2233  02F4  00EA               	movwf	_machineState_
  2234                           
  2235                           ;main.c: 486: menuInfoMain_.select = 0 ;
  2236  02F5  01B8               	clrf	_menuInfoMain_
  2237                           
  2238                           ;main.c: 487: menuInfoMain_.cursorPosition = 0 ;
  2239  02F6  01B9               	clrf	_menuInfoMain_+1
  2240                           
  2241                           ;main.c: 488: break ;
  2242  02F7  2B15               	goto	l276
  2243  02F8                     l3486:	
  2244                           ;main.c: 490: case STATE_ADJUST_BEAT_COUNT:
  2245                           
  2246  02F8  2AFC               	goto	L38
  2247  02F9                     l3488:	
  2248                           ;main.c: 496: case STATE_ADJUST_DURATION_CLICK:
  2249                           
  2250                           ;main.c: 494: break ;
  2251                           
  2252                           ;main.c: 491: case STATE_ADJUST_PULSE_WIDTH:
  2253                           ;main.c: 492: case STATE_INFORMATION:
  2254                           ;main.c: 493: machineState_ = STATE_MENU_MAIN ;
  2255                           
  2256                           
  2257                           ;main.c: 497: case STATE_ADJUST_DURATION_KEY:
  2258                           ;main.c: 498: machineState_ = STATE_MENU_DURATION ;
  2259  02F9  3004               	movlw	4
  2260  02FA  2B00               	goto	L21
  2261  02FB                     l318:	
  2262                           ;main.c: 501: case STATE_ADJUST_OSCILLATOR_TUNE:
  2263                           
  2264                           ;main.c: 499: break ;
  2265                           
  2266                           
  2267                           ;main.c: 502: outputEvent_.soundOff = 1 ;
  2268  02FB  16EB               	bsf	_outputEvent_,5
  2269  02FC                     L38:	
  2270                           
  2271                           ;main.c: 503: machineState_ = STATE_MENU_MAIN ;
  2272  02FC  3002               	movlw	2
  2273  02FD  2B00               	goto	L21
  2274  02FE                     l319:	
  2275                           ;main.c: 506: case STATE_ADJUST_TONE:
  2276                           
  2277                           ;main.c: 504: break ;
  2278                           
  2279                           
  2280                           ;main.c: 507: outputEvent_.soundOff = 1 ;
  2281  02FE  16EB               	bsf	_outputEvent_,5
  2282                           
  2283                           ;main.c: 508: machineState_ = STATE_MENU_TONE ;
  2284  02FF  3003               	movlw	3
  2285  0300                     L21:	
  2286  0300  00C7               	movwf	??_main
  2287  0301  0847               	movf	??_main,w
  2288  0302  00EA               	movwf	_machineState_
  2289                           
  2290                           ;main.c: 509: break ;
  2291  0303  2B15               	goto	l276
  2292  0304                     l321:	
  2293                           ;main.c: 511: case STATE_INITIALIZE:
  2294                           
  2295                           
  2296                           ;main.c: 512: case STATE_ERROR:
  2297                           ;main.c: 513: machineState_ = STATE_METRONOME ;
  2298  0304  01EA               	clrf	_machineState_
  2299  0305  0AEA               	incf	_machineState_,f
  2300                           
  2301                           ;main.c: 514: outputEvent_.resetMetronome = 1 ;
  2302  0306  176B               	bsf	_outputEvent_,6
  2303                           
  2304                           ;main.c: 517: }
  2305                           
  2306                           ;main.c: 515: break ;
  2307  0307  2B15               	goto	l276
  2308  0308                     l3496:	
  2309  0308  086A               	movf	_machineState_,w
  2310                           
  2311                           ; Switch size 1, requested type "space"
  2312                           ; Number of cases is 16, Range of values is 1 to 19
  2313                           ; switch strategies available:
  2314                           ; Name         Instructions Cycles
  2315                           ; direct_byte           47     9 (fixed)
  2316                           ; simple_byte           49    25 (average)
  2317                           ; jumptable            263     9 (fixed)
  2318                           ;	Chosen strategy is direct_byte
  2319  0309  3EFF               	addlw	-1
  2320  030A  1C03               	skipc
  2321  030B  2B15               	goto	l276
  2322  030C  0084               	movwf	4
  2323  030D  3013               	movlw	19
  2324  030E  0204               	subwf	4,w
  2325  030F  1803               	skipnc
  2326  0310  2B15               	goto	l276
  2327  0311  3189               	movlp	high S3932
  2328  0312  3504               	lslf	4,w
  2329  0313  3EA9               	addlw	low S3932
  2330  0314  0082               	movwf	2
  2331  0315                     l276:	
  2332                           
  2333                           ;main.c: 519: }
  2334                           ;main.c: 522: if( (outputEvent_.changeState&&!(outputEvent_.changeState=0)) ) {
  2335  0315  1C6B               	btfss	_outputEvent_,0
  2336  0316  2CAB               	goto	l3652
  2337  0317  106B               	bcf	_outputEvent_,0
  2338                           
  2339                           ;main.c: 524: outputEvent_.changeMessage = 1 ;
  2340  0318  14EB               	bsf	_outputEvent_,1
  2341                           
  2342                           ;main.c: 526: switch( machineState_ ) {
  2343  0319  2C1C               	goto	l3586
  2344  031A                     l3500:	
  2345                           ;main.c: 527: case STATE_METRONOME:
  2346                           
  2347                           
  2348                           ;main.c: 528: currentValueInfo_.messageTitle = MESSAGE.METRONOME.TILE ;
  2349  031A  3000               	movlw	low (_MESSAGE| (0+32768))
  2350  031B  0084               	movwf	4
  2351  031C  3088               	movlw	high (_MESSAGE| (0+32768))
  2352  031D  0085               	movwf	5
  2353  031E  3F00               	moviw [0]fsr0
  2354  031F  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2355  0320  3F01               	moviw [1]fsr0
  2356  0321  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2357                           
  2358                           ;main.c: 529: currentValueInfo_.messageValue = MESSAGE.METRONOME.TEMPO ;
  2359  0322  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  2360  0323  0084               	movwf	4
  2361  0324  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  2362  0325  0085               	movwf	5
  2363  0326  3F00               	moviw [0]fsr0
  2364  0327  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2365  0328  3F01               	moviw [1]fsr0
  2366  0329  2B9B               	goto	L29
  2367  032A                     l3502:	
  2368                           ;main.c: 532: case STATE_MENU_MAIN:
  2369                           
  2370                           ;main.c: 530: break ;
  2371                           
  2372                           
  2373                           ;main.c: 533: currentMenuInfoPtr_ = &menuInfoMain_ ;
  2374  032A  3038               	movlw	(low (_menuInfoMain_| 0))& (0+255)
  2375  032B  2BE2               	goto	L26
  2376  032C                     l3504:	
  2377                           ;main.c: 536: case STATE_MENU_TONE:
  2378                           
  2379                           ;main.c: 534: break ;
  2380                           
  2381                           
  2382                           ;main.c: 537: currentMenuInfoPtr_ = &menuInfoTone_ ;
  2383  032C  303C               	movlw	(low (_menuInfoTone_| 0))& (0+255)
  2384  032D  2BE2               	goto	L26
  2385  032E                     l3506:	
  2386                           ;main.c: 540: case STATE_MENU_DURATION:
  2387                           
  2388                           ;main.c: 538: break ;
  2389                           
  2390                           
  2391                           ;main.c: 541: currentMenuInfoPtr_ = &menuInfoDuration_ ;
  2392  032E  3030               	movlw	(low (_menuInfoDuration_| 0))& (0+255)
  2393  032F  2BE2               	goto	L26
  2394  0330                     l3508:	
  2395                           ;main.c: 544: case STATE_CONFIRM_LOAD:
  2396                           
  2397                           ;main.c: 542: break ;
  2398                           
  2399                           
  2400                           ;main.c: 545: case STATE_CONFIRM_SAVE:
  2401                           ;main.c: 546: case STATE_CONFIRM_RESET:
  2402                           ;main.c: 547: menuInfoConfirm_.select = 0 ;
  2403  0330  01AC               	clrf	_menuInfoConfirm_
  2404                           
  2405                           ;main.c: 548: menuInfoConfirm_.cursorPosition = 0 ;
  2406  0331  01AD               	clrf	_menuInfoConfirm_+1
  2407                           
  2408                           ;main.c: 549: currentMenuInfoPtr_ = &menuInfoConfirm_ ;
  2409  0332  302C               	movlw	(low (_menuInfoConfirm_| 0))& (0+255)
  2410  0333  2BE2               	goto	L26
  2411  0334                     l332:	
  2412                           ;main.c: 552: case STATE_ADJUST_BEAT_COUNT:
  2413                           
  2414                           ;main.c: 550: break ;
  2415                           
  2416                           
  2417                           ;main.c: 553: outputEvent_.changeValue = 1 ;
  2418  0334  156B               	bsf	_outputEvent_,2
  2419                           
  2420                           ;main.c: 554: currentValueInfo_.valuePtr = &configration_.beatCount ;
  2421  0335  3023               	movlw	(low ((_configration_| 0+3)))& (0+255)
  2422  0336  00C7               	movwf	??_main
  2423  0337  0847               	movf	??_main,w
  2424  0338  00DA               	movwf	_currentValueInfo_
  2425                           
  2426                           ;main.c: 555: currentValueInfo_.limitUpper = 64 ;
  2427  0339  3040               	movlw	64
  2428  033A  00C7               	movwf	??_main
  2429  033B  0847               	movf	??_main,w
  2430  033C  00DB               	movwf	_currentValueInfo_+1
  2431                           
  2432                           ;main.c: 556: currentValueInfo_.limitLower = 0 ;
  2433  033D  01DC               	clrf	_currentValueInfo_+2
  2434                           
  2435                           ;main.c: 557: currentValueInfo_.messageTitle = MESSAGE.CONFIGURATION.TITLE ;
  2436  033E  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  2437  033F  0084               	movwf	4
  2438  0340  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  2439  0341  0085               	movwf	5
  2440  0342  3F00               	moviw [0]fsr0
  2441  0343  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2442  0344  3F01               	moviw [1]fsr0
  2443  0345  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2444                           
  2445                           ;main.c: 558: currentValueInfo_.messageValue = MESSAGE.CONFIGURATION.BEAT_COUNT ;
  2446  0346  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  2447  0347  0084               	movwf	4
  2448  0348  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  2449  0349  0085               	movwf	5
  2450  034A  3F00               	moviw [0]fsr0
  2451  034B  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2452  034C  3F01               	moviw [1]fsr0
  2453  034D  2B9B               	goto	L29
  2454  034E                     l333:	
  2455                           ;main.c: 561: case STATE_ADJUST_DURATION_CLICK:
  2456                           
  2457                           ;main.c: 559: break ;
  2458                           
  2459                           
  2460                           ;main.c: 562: outputEvent_.changeValue = 1 ;
  2461  034E  156B               	bsf	_outputEvent_,2
  2462                           
  2463                           ;main.c: 563: currentValueInfo_.valuePtr = &configration_.duration.click ;
  2464  034F  3024               	movlw	(low ((_configration_| 0+4)))& (0+255)
  2465  0350  00C7               	movwf	??_main
  2466  0351  0847               	movf	??_main,w
  2467  0352  00DA               	movwf	_currentValueInfo_
  2468                           
  2469                           ;main.c: 564: currentValueInfo_.limitUpper = 0xFF ;
  2470  0353  30FF               	movlw	255
  2471  0354  00C7               	movwf	??_main
  2472  0355  0847               	movf	??_main,w
  2473  0356  00DB               	movwf	_currentValueInfo_+1
  2474                           
  2475                           ;main.c: 565: currentValueInfo_.limitLower = 0x00 ;
  2476  0357  01DC               	clrf	_currentValueInfo_+2
  2477                           
  2478                           ;main.c: 566: currentValueInfo_.messageTitle = MESSAGE.CONFIGURATION.TITLE_DURATION ;
  2479  0358  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  2480  0359  0084               	movwf	4
  2481  035A  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  2482  035B  0085               	movwf	5
  2483  035C  3F00               	moviw [0]fsr0
  2484  035D  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2485  035E  3F01               	moviw [1]fsr0
  2486  035F  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2487                           
  2488                           ;main.c: 567: currentValueInfo_.messageValue = MESSAGE.CONFIGURATION.DURATION_CLICK ;
  2489  0360  3010               	movlw	low ((_MESSAGE+16)| (0+32768))
  2490  0361  0084               	movwf	4
  2491  0362  3088               	movlw	high ((_MESSAGE+16)| (0+32768))
  2492  0363  0085               	movwf	5
  2493  0364  3F00               	moviw [0]fsr0
  2494  0365  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2495  0366  3F01               	moviw [1]fsr0
  2496  0367  2B9B               	goto	L29
  2497  0368                     l334:	
  2498                           ;main.c: 570: case STATE_ADJUST_DURATION_KEY:
  2499                           
  2500                           ;main.c: 568: break ;
  2501                           
  2502                           
  2503                           ;main.c: 571: outputEvent_.changeValue = 1 ;
  2504  0368  156B               	bsf	_outputEvent_,2
  2505                           
  2506                           ;main.c: 572: currentValueInfo_.valuePtr = &configration_.duration.key ;
  2507  0369  3025               	movlw	(low ((_configration_| 0+5)))& (0+255)
  2508  036A  00C7               	movwf	??_main
  2509  036B  0847               	movf	??_main,w
  2510  036C  00DA               	movwf	_currentValueInfo_
  2511                           
  2512                           ;main.c: 573: currentValueInfo_.limitUpper = 0xFF ;
  2513  036D  30FF               	movlw	255
  2514  036E  00C7               	movwf	??_main
  2515  036F  0847               	movf	??_main,w
  2516  0370  00DB               	movwf	_currentValueInfo_+1
  2517                           
  2518                           ;main.c: 574: currentValueInfo_.limitLower = 0x00 ;
  2519  0371  01DC               	clrf	_currentValueInfo_+2
  2520                           
  2521                           ;main.c: 575: currentValueInfo_.messageTitle = MESSAGE.CONFIGURATION.TITLE_DURATION ;
  2522  0372  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  2523  0373  0084               	movwf	4
  2524  0374  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  2525  0375  0085               	movwf	5
  2526  0376  3F00               	moviw [0]fsr0
  2527  0377  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2528  0378  3F01               	moviw [1]fsr0
  2529  0379  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2530                           
  2531                           ;main.c: 576: currentValueInfo_.messageValue = MESSAGE.CONFIGURATION.DURATION_KEY ;
  2532  037A  3012               	movlw	low ((_MESSAGE+18)| (0+32768))
  2533  037B  0084               	movwf	4
  2534  037C  3088               	movlw	high ((_MESSAGE+18)| (0+32768))
  2535  037D  0085               	movwf	5
  2536  037E  3F00               	moviw [0]fsr0
  2537  037F  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2538  0380  3F01               	moviw [1]fsr0
  2539  0381  2B9B               	goto	L29
  2540  0382                     l335:	
  2541                           ;main.c: 579: case STATE_ADJUST_PULSE_WIDTH:
  2542                           
  2543                           ;main.c: 577: break ;
  2544                           
  2545                           
  2546                           ;main.c: 580: outputEvent_.changeValue = 1 ;
  2547  0382  156B               	bsf	_outputEvent_,2
  2548                           
  2549                           ;main.c: 581: currentValueInfo_.valuePtr = &configration_.pulseWidth ;
  2550  0383  3026               	movlw	(low ((_configration_| 0+6)))& (0+255)
  2551  0384  00C7               	movwf	??_main
  2552  0385  0847               	movf	??_main,w
  2553  0386  00DA               	movwf	_currentValueInfo_
  2554                           
  2555                           ;main.c: 582: currentValueInfo_.limitUpper = 0x07 ;
  2556  0387  3007               	movlw	7
  2557  0388  00C7               	movwf	??_main
  2558  0389  0847               	movf	??_main,w
  2559  038A  00DB               	movwf	_currentValueInfo_+1
  2560                           
  2561                           ;main.c: 583: currentValueInfo_.limitLower = 0x00 ;
  2562  038B  01DC               	clrf	_currentValueInfo_+2
  2563                           
  2564                           ;main.c: 584: currentValueInfo_.messageTitle = MESSAGE.CONFIGURATION.TITLE ;
  2565  038C  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  2566  038D  0084               	movwf	4
  2567  038E  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  2568  038F  0085               	movwf	5
  2569  0390  3F00               	moviw [0]fsr0
  2570  0391  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2571  0392  3F01               	moviw [1]fsr0
  2572  0393  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2573                           
  2574                           ;main.c: 585: currentValueInfo_.messageValue = MESSAGE.CONFIGURATION.PULSE_WIDTH ;
  2575  0394  3014               	movlw	low ((_MESSAGE+20)| (0+32768))
  2576  0395  0084               	movwf	4
  2577  0396  3088               	movlw	high ((_MESSAGE+20)| (0+32768))
  2578  0397  0085               	movwf	5
  2579  0398  3F00               	moviw [0]fsr0
  2580  0399  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2581  039A  3F01               	moviw [1]fsr0
  2582  039B                     L29:	
  2583  039B  00E0               	movwf	(low ((_currentValueInfo_| 0+5))+1)
  2584                           
  2585                           ;main.c: 586: break ;
  2586  039C  2CAB               	goto	l3652
  2587  039D                     l336:	
  2588                           ;main.c: 588: case STATE_ADJUST_OSCILLATOR_TUNE:
  2589                           
  2590                           
  2591                           ;main.c: 589: outputEvent_.changeValue = 1 ;
  2592  039D  156B               	bsf	_outputEvent_,2
  2593                           
  2594                           ;main.c: 590: currentValueInfo_.valuePtr = ( uint08_t* ) & configration_.oscillatorTune 
      +                          ;
  2595  039E  302A               	movlw	(low ((_configration_| 0+10)))& (0+255)
  2596  039F  00C7               	movwf	??_main
  2597  03A0  0847               	movf	??_main,w
  2598  03A1  00DA               	movwf	_currentValueInfo_
  2599                           
  2600                           ;main.c: 591: currentValueInfo_.limitUpper = (uint08_t)30 ;
  2601  03A2  301E               	movlw	30
  2602  03A3  00C7               	movwf	??_main
  2603  03A4  0847               	movf	??_main,w
  2604  03A5  00DB               	movwf	_currentValueInfo_+1
  2605                           
  2606                           ;main.c: 592: currentValueInfo_.limitLower = (uint08_t)30 ;
  2607  03A6  301E               	movlw	30
  2608  03A7  00C7               	movwf	??_main
  2609  03A8  0847               	movf	??_main,w
  2610  03A9  00DC               	movwf	_currentValueInfo_+2
  2611                           
  2612                           ;main.c: 593: currentValueInfo_.messageTitle = MESSAGE.CONFIGURATION.TITLE ;
  2613  03AA  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  2614  03AB  0084               	movwf	4
  2615  03AC  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  2616  03AD  0085               	movwf	5
  2617  03AE  3F00               	moviw [0]fsr0
  2618  03AF  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2619  03B0  3F01               	moviw [1]fsr0
  2620  03B1  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2621                           
  2622                           ;main.c: 594: currentValueInfo_.messageValue = MESSAGE.CONFIGURATION.OSCILLATOR_TUNE ;
  2623  03B2  3016               	movlw	low ((_MESSAGE+22)| (0+32768))
  2624  03B3  0084               	movwf	4
  2625  03B4  3088               	movlw	high ((_MESSAGE+22)| (0+32768))
  2626  03B5  0085               	movwf	5
  2627  03B6  3F00               	moviw [0]fsr0
  2628  03B7  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2629  03B8  3F01               	moviw [1]fsr0
  2630  03B9  00E0               	movwf	(low ((_currentValueInfo_| 0+5))+1)
  2631                           
  2632                           ;main.c: 595: PR2 = 141 ;
  2633  03BA  308D               	movlw	141
  2634  03BB  009B               	movwf	27	;volatile
  2635                           
  2636                           ;main.c: 596: {CCPR4L=(PR2>>1);} ;
  2637  03BC  361B               	lsrf	27,w	;volatile
  2638  03BD  0026               	movlb	6	; select bank6
  2639  03BE  0098               	movwf	24	;volatile
  2640                           
  2641                           ;main.c: 597: T2CONbits.TMR2ON = 1 ;
  2642  03BF  0020               	movlb	0	; select bank0
  2643  03C0  2BDD               	goto	l3564
  2644  03C1                     l337:	
  2645                           ;main.c: 600: case STATE_ADJUST_TONE:
  2646                           
  2647                           ;main.c: 598: break ;
  2648                           
  2649                           
  2650                           ;main.c: 601: outputEvent_.changeValue = 1 ;
  2651  03C1  156B               	bsf	_outputEvent_,2
  2652                           
  2653                           ;main.c: 602: currentValueInfo_.valuePtr = &configration_.tone[ menuInfoTone_.select - M
      +                          ENU_ITEM_TONE_ADJUST_TONE0 ] ;
  2654  03C2  083C               	movf	_menuInfoTone_,w
  2655  03C3  3EFF               	addlw	255
  2656  03C4  3E27               	addlw	(low ((_configration_| 0+7)))& (0+255)
  2657  03C5  00C7               	movwf	??_main
  2658  03C6  0847               	movf	??_main,w
  2659  03C7  00DA               	movwf	_currentValueInfo_
  2660                           
  2661                           ;main.c: 603: currentValueInfo_.limitUpper = 0xFF ;
  2662  03C8  30FF               	movlw	255
  2663  03C9  00C7               	movwf	??_main
  2664  03CA  0847               	movf	??_main,w
  2665  03CB  00DB               	movwf	_currentValueInfo_+1
  2666                           
  2667                           ;main.c: 604: currentValueInfo_.limitLower = 0x00 ;
  2668  03CC  01DC               	clrf	_currentValueInfo_+2
  2669                           
  2670                           ;main.c: 605: currentValueInfo_.messageTitle = MESSAGE.CONFIGURATION.TITLE_TONE ;
  2671  03CD  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  2672  03CE  0084               	movwf	4
  2673  03CF  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  2674  03D0  0085               	movwf	5
  2675  03D1  3F00               	moviw [0]fsr0
  2676  03D2  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2677  03D3  3F01               	moviw [1]fsr0
  2678  03D4  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2679                           
  2680                           ;main.c: 606: currentValueInfo_.messageValue = MESSAGE.CONFIGURATION.TONE ;
  2681  03D5  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  2682  03D6  0084               	movwf	4
  2683  03D7  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  2684  03D8  0085               	movwf	5
  2685  03D9  3F00               	moviw [0]fsr0
  2686  03DA  00DF               	movwf	low ((_currentValueInfo_| 0+5))
  2687  03DB  3F01               	moviw [1]fsr0
  2688  03DC  00E0               	movwf	(low ((_currentValueInfo_| 0+5))+1)
  2689  03DD                     l3564:	
  2690                           
  2691                           ;main.c: 607: T2CONbits.TMR2ON = 1 ;
  2692  03DD  151C               	bsf	28,2	;volatile
  2693                           
  2694                           ;main.c: 608: break ;
  2695  03DE  2CAB               	goto	l3652
  2696  03DF                     l3566:	
  2697                           ;main.c: 610: case STATE_INFORMATION:
  2698                           
  2699                           
  2700                           ;main.c: 611: menuInfoInformation_.select = 0 ;
  2701  03DF  01B4               	clrf	_menuInfoInformation_
  2702                           
  2703                           ;main.c: 612: menuInfoInformation_.cursorPosition = 0 ;
  2704  03E0  01B5               	clrf	_menuInfoInformation_+1
  2705                           
  2706                           ;main.c: 613: currentMenuInfoPtr_ = &menuInfoInformation_ ;
  2707  03E1  3034               	movlw	(low (_menuInfoInformation_| 0))& (0+255)
  2708  03E2                     L26:	
  2709  03E2  00C7               	movwf	??_main
  2710  03E3  0847               	movf	??_main,w
  2711  03E4  00E7               	movwf	_currentMenuInfoPtr_
  2712                           
  2713                           ;main.c: 614: break ;
  2714  03E5  2CAB               	goto	l3652
  2715  03E6                     l339:	
  2716                           ;main.c: 616: case STATE_LOAD:
  2717                           
  2718                           
  2719                           ;main.c: 617: outputEvent_.resetMetronome = 1 ;
  2720  03E6  176B               	bsf	_outputEvent_,6
  2721                           
  2722                           ;main.c: 618: outputEvent_.accessEeprom = 1 ;
  2723  03E7  17EB               	bsf	_outputEvent_,7
  2724                           
  2725                           ;main.c: 619: currentValueInfo_.messageTitle = MESSAGE.MEMORY.LOAD ;
  2726  03E8  3022               	movlw	low ((_MESSAGE+34)| (0+32768))
  2727  03E9  0084               	movwf	4
  2728  03EA  3088               	movlw	high ((_MESSAGE+34)| (0+32768))
  2729  03EB  0085               	movwf	5
  2730  03EC  3F00               	moviw [0]fsr0
  2731  03ED  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2732  03EE  3F01               	moviw [1]fsr0
  2733  03EF  2BF8               	goto	L35
  2734  03F0                     l340:	
  2735                           ;main.c: 623: case STATE_SAVE:
  2736                           
  2737                           ;main.c: 621: break ;
  2738                           
  2739                           ;main.c: 620: stateReturnCounter_ = 0x40 ;
  2740                           
  2741                           
  2742                           ;main.c: 624: outputEvent_.accessEeprom = 1 ;
  2743  03F0  17EB               	bsf	_outputEvent_,7
  2744                           
  2745                           ;main.c: 625: currentValueInfo_.messageTitle = MESSAGE.MEMORY.SAVE ;
  2746  03F1  3024               	movlw	low ((_MESSAGE+36)| (0+32768))
  2747  03F2  0084               	movwf	4
  2748  03F3  3088               	movlw	high ((_MESSAGE+36)| (0+32768))
  2749  03F4  0085               	movwf	5
  2750  03F5  3F00               	moviw [0]fsr0
  2751  03F6  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2752  03F7  3F01               	moviw [1]fsr0
  2753  03F8                     L35:	
  2754  03F8  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2755                           
  2756                           ;main.c: 626: stateReturnCounter_ = 0x40 ;
  2757  03F9  3040               	movlw	64
  2758  03FA  00C7               	movwf	??_main
  2759  03FB  0847               	movf	??_main,w
  2760  03FC  00ED               	movwf	_stateReturnCounter_
  2761                           
  2762                           ;main.c: 627: break ;
  2763  03FD  2CAB               	goto	l3652
  2764  03FE                     l341:	
  2765                           ;main.c: 629: case STATE_BOOT:
  2766                           
  2767                           
  2768                           ;main.c: 630: outputEvent_.accessEeprom = 1 ;
  2769  03FE  17EB               	bsf	_outputEvent_,7
  2770                           
  2771                           ;main.c: 631: break ;
  2772  03FF  2CAB               	goto	l3652
  2773  0400                     l342:	
  2774                           ;main.c: 633: case STATE_INITIALIZE:
  2775                           
  2776                           
  2777                           ;main.c: 634: outputEvent_.accessEeprom = 1 ;
  2778  0400  17EB               	bsf	_outputEvent_,7
  2779                           
  2780                           ;main.c: 635: currentValueInfo_.messageTitle = MESSAGE.MEMORY.INITIALIZE ;
  2781  0401  3026               	movlw	low ((_MESSAGE+38)| (0+32768))
  2782  0402  0084               	movwf	4
  2783  0403  3088               	movlw	high ((_MESSAGE+38)| (0+32768))
  2784  0404  0085               	movwf	5
  2785  0405  3F00               	moviw [0]fsr0
  2786  0406  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2787  0407  3F01               	moviw [1]fsr0
  2788  0408  2C1A               	goto	L30
  2789  0409                     l3580:	
  2790                           ;main.c: 638: case STATE_RESET:
  2791                           
  2792                           ;main.c: 636: break ;
  2793                           
  2794                           
  2795                           ;main.c: 639: _parallel_lcd_ClearRow( 0x80 ) ;
  2796  0409  3080               	movlw	128
  2797  040A  318A  2240  3180   	fcall	__parallel_lcd_ClearRow
  2798                           
  2799                           ;main.c: 640: _parallel_lcd_ClearRow( 0xC0 ) ;
  2800  040D  30C0               	movlw	192
  2801  040E  318A  2240  3180   	fcall	__parallel_lcd_ClearRow
  2802  0411  0001               	reset	;# 
  2803  0412                     l3582:	
  2804                           ;main.c: 643: case STATE_ERROR:
  2805                           
  2806                           
  2807                           ;main.c: 644: currentValueInfo_.messageTitle = MESSAGE.ERROR.MESSAGE ;
  2808  0412  3028               	movlw	low ((_MESSAGE+40)| (0+32768))
  2809  0413  0084               	movwf	4
  2810  0414  3088               	movlw	high ((_MESSAGE+40)| (0+32768))
  2811  0415  0085               	movwf	5
  2812  0416  3F00               	moviw [0]fsr0
  2813  0417  0020               	movlb	0	; select bank0
  2814  0418  00DD               	movwf	low ((_currentValueInfo_| 0+3))
  2815  0419  3F01               	moviw [1]fsr0
  2816  041A                     L30:	
  2817  041A  00DE               	movwf	(low ((_currentValueInfo_| 0+3))+1)
  2818                           
  2819                           ;main.c: 647: }
  2820                           
  2821                           ;main.c: 645: break ;
  2822  041B  2CAB               	goto	l3652
  2823  041C                     l3586:	
  2824  041C  086A               	movf	_machineState_,w
  2825                           
  2826                           ; Switch size 1, requested type "space"
  2827                           ; Number of cases is 20, Range of values is 0 to 19
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; direct_byte           46     6 (fixed)
  2831                           ; simple_byte           61    31 (average)
  2832                           ; jumptable            260     6 (fixed)
  2833                           ;	Chosen strategy is direct_byte
  2834  041D  0084               	movwf	4
  2835  041E  3014               	movlw	20
  2836  041F  0204               	subwf	4,w
  2837  0420  1803               	skipnc
  2838  0421  2CAB               	goto	l3652
  2839  0422  3189               	movlp	high S3934
  2840  0423  3504               	lslf	4,w
  2841  0424  3E81               	addlw	low S3934
  2842  0425  0082               	movwf	2
  2843                           
  2844                           ;main.c: 649: }
  2845                           ;main.c: 652: switch( machineState_ ) {
  2846  0426  2CAB               	goto	l3652
  2847  0427                     l352:	
  2848                           ;main.c: 654: case STATE_MENU_MAIN:
  2849                           
  2850                           
  2851                           ;main.c: 655: case STATE_MENU_TONE:
  2852                           ;main.c: 656: case STATE_MENU_DURATION:
  2853                           ;main.c: 657: case STATE_CONFIRM_LOAD:
  2854                           ;main.c: 658: case STATE_CONFIRM_SAVE:
  2855                           ;main.c: 659: case STATE_CONFIRM_RESET:
  2856                           ;main.c: 660: case STATE_INFORMATION:
  2857                           ;main.c: 661: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2858  0427  1CE8               	btfss	_inputEvent_,1
  2859  0428  2C4A               	goto	l3598
  2860  0429  10E8               	bcf	_inputEvent_,1
  2861                           
  2862                           ;main.c: 662: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->limit ) {
  2863  042A  0867               	movf	_currentMenuInfoPtr_,w
  2864  042B  3E02               	addlw	2
  2865  042C  0086               	movwf	6
  2866  042D  0187               	clrf	7
  2867  042E  0867               	movf	_currentMenuInfoPtr_,w
  2868  042F  0084               	movwf	4
  2869  0430  0185               	clrf	5
  2870  0431  0800               	movf	0,w
  2871  0432  0601               	xorwf	1,w
  2872  0433  1903               	skipnz
  2873  0434  2C4A               	goto	l3598
  2874                           
  2875                           ;main.c: 663: currentMenuInfoPtr_->select++ ;
  2876  0435  3001               	movlw	1
  2877  0436  00C7               	movwf	??_main
  2878  0437  0867               	movf	_currentMenuInfoPtr_,w
  2879  0438  0086               	movwf	6
  2880  0439  0187               	clrf	7
  2881  043A  0847               	movf	??_main,w
  2882  043B  0781               	addwf	1,f
  2883                           
  2884                           ;main.c: 664: if( !currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosi
      +                          tion++ ;
  2885  043C  0A67               	incf	_currentMenuInfoPtr_,w
  2886  043D  0086               	movwf	6
  2887  043E  0187               	clrf	7
  2888  043F  0801               	movf	1,w
  2889  0440  1D03               	btfss	3,2
  2890  0441  2C49               	goto	l3596
  2891  0442  3001               	movlw	1
  2892  0443  00C7               	movwf	??_main
  2893  0444  0A67               	incf	_currentMenuInfoPtr_,w
  2894  0445  0086               	movwf	6
  2895  0446  0187               	clrf	7
  2896  0447  0847               	movf	??_main,w
  2897  0448  0781               	addwf	1,f
  2898  0449                     l3596:	
  2899                           
  2900                           ;main.c: 665: outputEvent_.changeMessage = 1 ;
  2901  0449  14EB               	bsf	_outputEvent_,1
  2902  044A                     l3598:	
  2903                           
  2904                           ;main.c: 666: }
  2905                           ;main.c: 667: }
  2906                           ;main.c: 668: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2907  044A  1C68               	btfss	_inputEvent_,0
  2908  044B  2CB8               	goto	l359
  2909  044C  1068               	bcf	_inputEvent_,0
  2910                           
  2911                           ;main.c: 669: if( currentMenuInfoPtr_->select ) {
  2912  044D  0867               	movf	_currentMenuInfoPtr_,w
  2913  044E  0086               	movwf	6
  2914  044F  0187               	clrf	7
  2915  0450  0801               	movf	1,w
  2916  0451  1903               	btfsc	3,2
  2917  0452  2CB8               	goto	l359
  2918                           
  2919                           ;main.c: 670: currentMenuInfoPtr_->select-- ;
  2920  0453  0867               	movf	_currentMenuInfoPtr_,w
  2921  0454  0086               	movwf	6
  2922  0455  0187               	clrf	7
  2923  0456  3001               	movlw	1
  2924  0457  0281               	subwf	1,f
  2925                           
  2926                           ;main.c: 671: if( currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosit
      +                          ion-- ;
  2927  0458  0A67               	incf	_currentMenuInfoPtr_,w
  2928  0459  0086               	movwf	6
  2929  045A  0187               	clrf	7
  2930  045B  0801               	movf	1,w
  2931  045C  1903               	btfsc	3,2
  2932  045D  2C63               	goto	l3608
  2933  045E  0A67               	incf	_currentMenuInfoPtr_,w
  2934  045F  0086               	movwf	6
  2935  0460  0187               	clrf	7
  2936  0461  3001               	movlw	1
  2937  0462  0281               	subwf	1,f
  2938  0463                     l3608:	
  2939                           
  2940                           ;main.c: 672: outputEvent_.changeMessage = 1 ;
  2941  0463  14EB               	bsf	_outputEvent_,1
  2942                           
  2943                           ;main.c: 673: }
  2944                           ;main.c: 674: }
  2945                           ;main.c: 675: break ;
  2946  0464  2CB8               	goto	l359
  2947  0465                     l360:	
  2948                           ;main.c: 677: case STATE_METRONOME:
  2949                           
  2950                           
  2951                           ;main.c: 678: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2952  0465  1C68               	btfss	_inputEvent_,0
  2953  0466  2C75               	goto	l3620
  2954  0467  1068               	bcf	_inputEvent_,0
  2955                           
  2956                           ;main.c: 679: if( configration_.tempo < 999 ) {
  2957  0468  3003               	movlw	3
  2958  0469  0222               	subwf	_configration_+2,w
  2959  046A  30E7               	movlw	231
  2960  046B  1903               	skipnz
  2961  046C  0221               	subwf	_configration_+1,w
  2962  046D  1803               	skipnc
  2963  046E  2C74               	goto	l3618
  2964                           
  2965                           ;main.c: 680: configration_.tempo++ ;
  2966  046F  3001               	movlw	1
  2967  0470  07A1               	addwf	_configration_+1,f
  2968  0471  3000               	movlw	0
  2969  0472  3DA2               	addwfc	_configration_+2,f
  2970                           
  2971                           ;main.c: 681: outputEvent_.changeValue = 1 ;
  2972  0473  156B               	bsf	_outputEvent_,2
  2973  0474                     l3618:	
  2974                           
  2975                           ;main.c: 682: }
  2976                           ;main.c: 683: outputEvent_.resetMetronome = 1 ;
  2977  0474  176B               	bsf	_outputEvent_,6
  2978  0475                     l3620:	
  2979                           
  2980                           ;main.c: 684: }
  2981                           ;main.c: 685: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2982  0475  1CE8               	btfss	_inputEvent_,1
  2983  0476  2CB8               	goto	l359
  2984  0477  10E8               	bcf	_inputEvent_,1
  2985                           
  2986                           ;main.c: 686: if( configration_.tempo > 1 ) {
  2987  0478  3000               	movlw	0
  2988  0479  0222               	subwf	_configration_+2,w
  2989  047A  3002               	movlw	2
  2990  047B  1903               	skipnz
  2991  047C  0221               	subwf	_configration_+1,w
  2992  047D  1C03               	skipc
  2993  047E  2C84               	goto	l3630
  2994                           
  2995                           ;main.c: 687: configration_.tempo-- ;
  2996  047F  3001               	movlw	1
  2997  0480  02A1               	subwf	_configration_+1,f
  2998  0481  3000               	movlw	0
  2999  0482  3BA2               	subwfb	_configration_+2,f
  3000                           
  3001                           ;main.c: 688: outputEvent_.changeValue = 1 ;
  3002  0483  156B               	bsf	_outputEvent_,2
  3003  0484                     l3630:	
  3004                           
  3005                           ;main.c: 689: }
  3006                           ;main.c: 690: outputEvent_.resetMetronome = 1 ;
  3007  0484  176B               	bsf	_outputEvent_,6
  3008                           
  3009                           ;main.c: 691: }
  3010                           ;main.c: 692: break ;
  3011  0485  2CB8               	goto	l359
  3012  0486                     l370:	
  3013                           ;main.c: 694: case STATE_ADJUST_BEAT_COUNT:
  3014                           
  3015                           
  3016                           ;main.c: 695: case STATE_ADJUST_PULSE_WIDTH:
  3017                           ;main.c: 696: case STATE_ADJUST_DURATION_CLICK:
  3018                           ;main.c: 697: case STATE_ADJUST_DURATION_KEY:
  3019                           ;main.c: 698: case STATE_ADJUST_TONE:
  3020                           ;main.c: 699: case STATE_ADJUST_OSCILLATOR_TUNE:
  3021                           ;main.c: 700: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  3022  0486  1C68               	btfss	_inputEvent_,0
  3023  0487  2C98               	goto	l3640
  3024  0488  1068               	bcf	_inputEvent_,0
  3025                           
  3026                           ;main.c: 701: if( *currentValueInfo_.valuePtr != currentValueInfo_.limitUpper ) {
  3027  0489  085A               	movf	_currentValueInfo_,w
  3028  048A  0086               	movwf	6
  3029  048B  0187               	clrf	7
  3030  048C  085B               	movf	_currentValueInfo_+1,w
  3031  048D  0601               	xorwf	1,w
  3032  048E  1903               	skipnz
  3033  048F  2C98               	goto	l3640
  3034                           
  3035                           ;main.c: 702: ( *currentValueInfo_.valuePtr )++ ;
  3036  0490  3001               	movlw	1
  3037  0491  00C7               	movwf	??_main
  3038  0492  085A               	movf	_currentValueInfo_,w
  3039  0493  0086               	movwf	6
  3040  0494  0187               	clrf	7
  3041  0495  0847               	movf	??_main,w
  3042  0496  0781               	addwf	1,f
  3043                           
  3044                           ;main.c: 703: outputEvent_.changeValue = 1 ;
  3045  0497  156B               	bsf	_outputEvent_,2
  3046  0498                     l3640:	
  3047                           
  3048                           ;main.c: 704: }
  3049                           ;main.c: 705: }
  3050                           ;main.c: 706: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  3051  0498  1CE8               	btfss	_inputEvent_,1
  3052  0499  2CB8               	goto	l359
  3053  049A  10E8               	bcf	_inputEvent_,1
  3054                           
  3055                           ;main.c: 707: if( *currentValueInfo_.valuePtr != currentValueInfo_.limitLower ) {
  3056  049B  085A               	movf	_currentValueInfo_,w
  3057  049C  0086               	movwf	6
  3058  049D  0187               	clrf	7
  3059  049E  085C               	movf	_currentValueInfo_+2,w
  3060  049F  0601               	xorwf	1,w
  3061  04A0  1903               	skipnz
  3062  04A1  2CB8               	goto	l359
  3063                           
  3064                           ;main.c: 708: ( *currentValueInfo_.valuePtr )++ ;
  3065  04A2  3001               	movlw	1
  3066  04A3  00C7               	movwf	??_main
  3067  04A4  085A               	movf	_currentValueInfo_,w
  3068  04A5  0086               	movwf	6
  3069  04A6  0187               	clrf	7
  3070  04A7  0847               	movf	??_main,w
  3071  04A8  0781               	addwf	1,f
  3072                           
  3073                           ;main.c: 709: outputEvent_.changeValue = 1 ;
  3074  04A9  156B               	bsf	_outputEvent_,2
  3075                           
  3076                           ;main.c: 714: }
  3077                           
  3078                           ;main.c: 710: }
  3079                           ;main.c: 711: }
  3080                           ;main.c: 712: break ;
  3081  04AA  2CB8               	goto	l359
  3082  04AB                     l3652:	
  3083  04AB  086A               	movf	_machineState_,w
  3084                           
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 14, Range of values is 1 to 16
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; direct_byte           41     9 (fixed)
  3090                           ; simple_byte           43    22 (average)
  3091                           ; jumptable            263     9 (fixed)
  3092                           ;	Chosen strategy is direct_byte
  3093  04AC  3EFF               	addlw	-1
  3094  04AD  1C03               	skipc
  3095  04AE  2CB8               	goto	l359
  3096  04AF  0084               	movwf	4
  3097  04B0  3010               	movlw	16
  3098  04B1  0204               	subwf	4,w
  3099  04B2  1803               	skipnc
  3100  04B3  2CB8               	goto	l359
  3101  04B4  318A               	movlp	high S3936
  3102  04B5  3504               	lslf	4,w
  3103  04B6  3E00               	addlw	low S3936
  3104  04B7  0082               	movwf	2
  3105  04B8                     l359:	
  3106                           
  3107                           ;main.c: 717: if( (outputEvent_.resetMetronome&&!(outputEvent_.resetMetronome=0)) ) {
  3108  04B8  1F6B               	btfss	_outputEvent_,6
  3109  04B9  2CFB               	goto	l3698
  3110  04BA  136B               	bcf	_outputEvent_,6
  3111                           
  3112                           ;main.c: 718: INTCONbits.GIE=0 ;
  3113  04BB  138B               	bcf	11,7	;volatile
  3114                           
  3115                           ;main.c: 719: tempoCounter_ = 0 ;
  3116  04BC  3000               	movlw	0
  3117  04BD  00E1               	movwf	_tempoCounter_
  3118  04BE  3000               	movlw	0
  3119  04BF  00E2               	movwf	_tempoCounter_+1
  3120  04C0  3000               	movlw	0
  3121  04C1  00E3               	movwf	_tempoCounter_+2
  3122                           
  3123                           ;main.c: 720: beatCounter_ = 0 ;
  3124  04C2  01E6               	clrf	_beatCounter_
  3125                           
  3126                           ;main.c: 721: outputEvent_.soundOnClick = 1 ;
  3127  04C3  15EB               	bsf	_outputEvent_,3
  3128                           
  3129                           ;main.c: 722: INTCONbits.GIE=1 ;
  3130  04C4  178B               	bsf	11,7	;volatile
  3131                           
  3132                           ;main.c: 723: }
  3133                           ;main.c: 726: switch( machineState_ ) {
  3134  04C5  2CFB               	goto	l3698
  3135  04C6                     l385:	
  3136                           ;main.c: 741: default:
  3137                           
  3138                           ;main.c: 739: break ;
  3139                           
  3140                           ;main.c: 738: case STATE_ADJUST_OSCILLATOR_TUNE:
  3141                           
  3142                           ;main.c: 737: break ;
  3143                           
  3144                           ;main.c: 736: case STATE_ADJUST_TONE:
  3145                           
  3146                           ;main.c: 729: case STATE_INITIALIZE:
  3147                           ;main.c: 730: case STATE_LOAD:
  3148                           ;main.c: 731: case STATE_SAVE:
  3149                           ;main.c: 732: case STATE_ERROR:
  3150                           ;main.c: 734: break ;
  3151                           
  3152                           ;main.c: 728: case STATE_BOOT:
  3153                           
  3154                           
  3155                           ;main.c: 742: if( (outputEvent_.soundOnKey&&!(outputEvent_.soundOnKey=0)) ) {
  3156  04C6  1E6B               	btfss	_outputEvent_,4
  3157  04C7  2CD4               	goto	l3672
  3158  04C8  126B               	bcf	_outputEvent_,4
  3159                           
  3160                           ;main.c: 743: soundDurationCount_.key = configration_.duration.key ;
  3161  04C9  0825               	movf	_configration_+5,w
  3162  04CA  00C7               	movwf	??_main
  3163  04CB  0847               	movf	??_main,w
  3164  04CC  00E5               	movwf	_soundDurationCount_+1
  3165                           
  3166                           ;main.c: 744: PR2 = 124 ;
  3167  04CD  307C               	movlw	124
  3168  04CE  009B               	movwf	27	;volatile
  3169                           
  3170                           ;main.c: 745: {CCPR4L=(PR2>>1);} ;
  3171  04CF  361B               	lsrf	27,w	;volatile
  3172  04D0  0026               	movlb	6	; select bank6
  3173  04D1  0098               	movwf	24	;volatile
  3174                           
  3175                           ;main.c: 746: T2CONbits.TMR2ON = 1 ;
  3176  04D2  0020               	movlb	0	; select bank0
  3177  04D3  151C               	bsf	28,2	;volatile
  3178  04D4                     l3672:	
  3179                           
  3180                           ;main.c: 747: }
  3181                           ;main.c: 748: if( (outputEvent_.soundOnClick&&!(outputEvent_.soundOnClick=0)) && !isMute
      +                          _ && !soundDurationCount_.key ) {
  3182  04D4  1DEB               	btfss	_outputEvent_,3
  3183  04D5  2D19               	goto	l3704
  3184  04D6  11EB               	bcf	_outputEvent_,3
  3185  04D7  0869               	movf	_isMute_,w
  3186  04D8  1D03               	btfss	3,2
  3187  04D9  2D19               	goto	l3704
  3188  04DA  0865               	movf	_soundDurationCount_+1,w
  3189  04DB  1D03               	btfss	3,2
  3190  04DC  2D19               	goto	l3704
  3191                           
  3192                           ;main.c: 750: soundDurationCount_.click = configration_.duration.click ;
  3193  04DD  0824               	movf	_configration_+4,w
  3194  04DE  00C7               	movwf	??_main
  3195  04DF  0847               	movf	??_main,w
  3196  04E0  00E4               	movwf	_soundDurationCount_
  3197                           
  3198                           ;main.c: 752: if( beatCounter_ == 0 )
  3199  04E1  0866               	movf	_beatCounter_,w
  3200  04E2  1D03               	btfss	3,2
  3201  04E3  2CE6               	goto	l3686
  3202                           
  3203                           ;main.c: 753: PR2 = configration_.tone[ 1 ] ;
  3204  04E4  0828               	movf	_configration_+8,w
  3205  04E5  2CED               	goto	L32
  3206  04E6                     l3686:	
  3207                           
  3208                           ;main.c: 754: else if( beatCounter_ == configration_.beatCount )
  3209  04E6  0823               	movf	_configration_+3,w
  3210  04E7  0666               	xorwf	_beatCounter_,w
  3211  04E8  1D03               	skipz
  3212  04E9  2CEC               	goto	l3690
  3213                           
  3214                           ;main.c: 755: PR2 = configration_.tone[ 2 ] ;
  3215  04EA  0829               	movf	_configration_+9,w
  3216  04EB  2CED               	goto	L32
  3217  04EC                     l3690:	
  3218                           
  3219                           ;main.c: 756: else
  3220                           ;main.c: 757: PR2 = configration_.tone[ 0 ] ;
  3221  04EC  0827               	movf	_configration_+7,w
  3222  04ED                     L32:	
  3223  04ED  009B               	movwf	27	;volatile
  3224                           
  3225                           ;main.c: 759: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  3226  04EE  081B               	movf	27,w	;volatile
  3227  04EF  00C7               	movwf	??_main
  3228  04F0  0A26               	incf	_configration_+6,w
  3229  04F1  2CF3               	goto	u3064
  3230  04F2                     u3065:	
  3231  04F2  36C7               	lsrf	??_main,f
  3232  04F3                     u3064:	
  3233  04F3  0B89               	decfsz	9,f
  3234  04F4  2CF2               	goto	u3065
  3235  04F5  0847               	movf	??_main,w
  3236  04F6  0026               	movlb	6	; select bank6
  3237  04F7  0098               	movwf	24	;volatile
  3238                           
  3239                           ;main.c: 760: T2CONbits.TMR2ON = 1 ;
  3240  04F8  0020               	movlb	0	; select bank0
  3241  04F9  151C               	bsf	28,2	;volatile
  3242                           
  3243                           ;main.c: 764: }
  3244                           
  3245                           ;main.c: 761: }
  3246                           ;main.c: 762: break ;
  3247  04FA  2D19               	goto	l3704
  3248  04FB                     l3698:	
  3249  04FB  086A               	movf	_machineState_,w
  3250                           
  3251                           ; Switch size 1, requested type "space"
  3252                           ; Number of cases is 7, Range of values is 0 to 19
  3253                           ; switch strategies available:
  3254                           ; Name         Instructions Cycles
  3255                           ; simple_byte           22    12 (average)
  3256                           ; direct_byte           46     6 (fixed)
  3257                           ; jumptable            260     6 (fixed)
  3258                           ;	Chosen strategy is simple_byte
  3259  04FC  3A00               	xorlw	0	; case 0
  3260  04FD  1903               	skipnz
  3261  04FE  2D19               	goto	l3704
  3262  04FF  3A09               	xorlw	9	; case 9
  3263  0500  1903               	skipnz
  3264  0501  2D19               	goto	l3704
  3265  0502  3A03               	xorlw	3	; case 10
  3266  0503  1903               	skipnz
  3267  0504  2D19               	goto	l3704
  3268  0505  3A07               	xorlw	7	; case 13
  3269  0506  1903               	skipnz
  3270  0507  2D19               	goto	l3704
  3271  0508  3A02               	xorlw	2	; case 15
  3272  0509  1903               	skipnz
  3273  050A  2D19               	goto	l3704
  3274  050B  3A1E               	xorlw	30	; case 17
  3275  050C  1903               	skipnz
  3276  050D  2D19               	goto	l3704
  3277  050E  3A02               	xorlw	2	; case 19
  3278  050F  1903               	skipnz
  3279  0510  2D19               	goto	l3704
  3280  0511  2CC6               	goto	l385
  3281                           
  3282                           ;main.c: 767: switch( machineState_ ) {
  3283  0512  2D19               	goto	l3704
  3284  0513                     l397:	
  3285                           ;main.c: 769: case STATE_BOOT:
  3286                           
  3287  0513  2D17               	goto	L33
  3288  0514                     l401:	
  3289                           ;main.c: 782: default:
  3290                           
  3291                           ;main.c: 778: case STATE_ADJUST_OSCILLATOR_TUNE:
  3292                           ;main.c: 780: break ;
  3293                           
  3294                           ;main.c: 777: case STATE_ADJUST_TONE:
  3295                           
  3296                           ;main.c: 775: break ;
  3297                           
  3298                           ;main.c: 770: case STATE_INITIALIZE:
  3299                           ;main.c: 771: case STATE_LOAD:
  3300                           ;main.c: 772: case STATE_SAVE:
  3301                           ;main.c: 773: case STATE_ERROR:
  3302                           ;main.c: 774: T2CONbits.TMR2ON = 0 ;
  3303                           
  3304                           
  3305                           ;main.c: 783: if( (outputEvent_.soundOff&&!(outputEvent_.soundOff=0)) )
  3306  0514  1EEB               	btfss	_outputEvent_,5
  3307  0515  2D30               	goto	l398
  3308  0516  12EB               	bcf	_outputEvent_,5
  3309  0517                     L33:	
  3310                           
  3311                           ;main.c: 784: T2CONbits.TMR2ON = 0 ;
  3312  0517  111C               	bcf	28,2	;volatile
  3313                           
  3314                           ;main.c: 787: }
  3315                           
  3316                           ;main.c: 786: break ;
  3317  0518  2D30               	goto	l398
  3318  0519                     l3704:	
  3319  0519  086A               	movf	_machineState_,w
  3320                           
  3321                           ; Switch size 1, requested type "space"
  3322                           ; Number of cases is 7, Range of values is 0 to 19
  3323                           ; switch strategies available:
  3324                           ; Name         Instructions Cycles
  3325                           ; simple_byte           22    12 (average)
  3326                           ; direct_byte           46     6 (fixed)
  3327                           ; jumptable            260     6 (fixed)
  3328                           ;	Chosen strategy is simple_byte
  3329  051A  3A00               	xorlw	0	; case 0
  3330  051B  1903               	skipnz
  3331  051C  2D13               	goto	l397
  3332  051D  3A09               	xorlw	9	; case 9
  3333  051E  1903               	skipnz
  3334  051F  2D30               	goto	l398
  3335  0520  3A03               	xorlw	3	; case 10
  3336  0521  1903               	skipnz
  3337  0522  2D30               	goto	l398
  3338  0523  3A07               	xorlw	7	; case 13
  3339  0524  1903               	skipnz
  3340  0525  2D13               	goto	l397
  3341  0526  3A02               	xorlw	2	; case 15
  3342  0527  1903               	skipnz
  3343  0528  2D13               	goto	l397
  3344  0529  3A1E               	xorlw	30	; case 17
  3345  052A  1903               	skipnz
  3346  052B  2D13               	goto	l397
  3347  052C  3A02               	xorlw	2	; case 19
  3348  052D  1903               	skipnz
  3349  052E  2D13               	goto	l397
  3350  052F  2D14               	goto	l401
  3351  0530                     l398:	
  3352                           
  3353                           ;main.c: 790: if( (outputEvent_.changeMessage&&!(outputEvent_.changeMessage=0)) ) {
  3354  0530  1CEB               	btfss	_outputEvent_,1
  3355  0531  2E95               	goto	l403
  3356  0532  10EB               	bcf	_outputEvent_,1
  3357                           
  3358                           ;main.c: 792: switch( machineState_ ) {
  3359  0533  2E87               	goto	l3750
  3360  0534                     l3708:	
  3361                           ;main.c: 794: case STATE_MENU_MAIN:
  3362                           
  3363                           
  3364                           ;main.c: 795: case STATE_MENU_TONE:
  3365                           ;main.c: 796: case STATE_MENU_DURATION:
  3366                           ;main.c: 797: _parallel_lcd_WriteStringClearing( 0x80 | 0x1 , currentMenuInfoPtr_->menuM
      +                          essage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosition ] ) ;
  3367  0534  0867               	movf	_currentMenuInfoPtr_,w
  3368  0535  3E03               	addlw	3
  3369  0536  0086               	movwf	6
  3370  0537  0187               	clrf	7
  3371  0538  0867               	movf	_currentMenuInfoPtr_,w
  3372  0539  0084               	movwf	4
  3373  053A  0185               	clrf	5
  3374  053B  0800               	movf	0,w
  3375  053C  00C7               	movwf	??_main
  3376  053D  0A67               	incf	_currentMenuInfoPtr_,w
  3377  053E  0084               	movwf	4
  3378  053F  0185               	clrf	5
  3379  0540  0300               	decf	0,w
  3380  0541  3AFF               	xorlw	255
  3381  0542  0747               	addwf	??_main,w
  3382  0543  0709               	addwf	9,w
  3383  0544  0701               	addwf	1,w
  3384  0545  00C8               	movwf	??_main+1
  3385  0546  0848               	movf	??_main+1,w
  3386  0547  0086               	movwf	6
  3387  0548  0187               	clrf	7
  3388  0549  3F40               	moviw [0]fsr1
  3389  054A  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3390  054B  3F41               	moviw [1]fsr1
  3391  054C  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3392  054D  3081               	movlw	129
  3393  054E  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3394                           
  3395                           ;main.c: 798: _parallel_lcd_WriteStringClearing( 0xC0 | 0x1 , currentMenuInfoPtr_->menuM
      +                          essage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosition + 1 ] ) ;
  3396  0551  0020               	movlb	0	; select bank0
  3397  0552  0867               	movf	_currentMenuInfoPtr_,w
  3398  0553  3E03               	addlw	3
  3399  0554  0086               	movwf	6
  3400  0555  0187               	clrf	7
  3401  0556  0867               	movf	_currentMenuInfoPtr_,w
  3402  0557  0084               	movwf	4
  3403  0558  0185               	clrf	5
  3404  0559  0800               	movf	0,w
  3405  055A  00C7               	movwf	??_main
  3406  055B  0A67               	incf	_currentMenuInfoPtr_,w
  3407  055C  0084               	movwf	4
  3408  055D  0185               	clrf	5
  3409  055E  0300               	decf	0,w
  3410  055F  3AFF               	xorlw	255
  3411  0560  0747               	addwf	??_main,w
  3412  0561  0709               	addwf	9,w
  3413  0562  3E02               	addlw	2
  3414  0563  0701               	addwf	1,w
  3415  0564  00C8               	movwf	??_main+1
  3416  0565  0848               	movf	??_main+1,w
  3417  0566  0086               	movwf	6
  3418  0567  0187               	clrf	7
  3419  0568  3F40               	moviw [0]fsr1
  3420  0569  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3421  056A  3F41               	moviw [1]fsr1
  3422  056B  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3423  056C  30C1               	movlw	193
  3424  056D  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3425                           
  3426                           ;main.c: 800: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->cursorPosition )
  3427  0570  0020               	movlb	0	; select bank0
  3428  0571  0A67               	incf	_currentMenuInfoPtr_,w
  3429  0572  0086               	movwf	6
  3430  0573  0187               	clrf	7
  3431  0574  0867               	movf	_currentMenuInfoPtr_,w
  3432  0575  0084               	movwf	4
  3433  0576  0185               	clrf	5
  3434  0577  0800               	movf	0,w
  3435  0578  0601               	xorwf	1,w
  3436  0579  1903               	skipnz
  3437  057A  2D87               	goto	l3714
  3438                           
  3439                           ;main.c: 801: _parallel_lcd_WriteCharacter( 0x80 | 0xF , CHAR_CODE.CURSOR_UP ) ;
  3440  057B  303B               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3441  057C  0084               	movwf	4
  3442  057D  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3443  057E  0085               	movwf	5
  3444  057F  0800               	movf	0,w	;code access
  3445  0580  00C7               	movwf	??_main
  3446  0581  0847               	movf	??_main,w
  3447  0582  00C0               	movwf	__parallel_lcd_WriteCharacter@character
  3448  0583  308F               	movlw	143
  3449  0584  318A  22CE  3180   	fcall	__parallel_lcd_WriteCharacter
  3450  0587                     l3714:	
  3451                           
  3452                           ;main.c: 802: if( currentMenuInfoPtr_->select != ( currentMenuInfoPtr_->limit + currentM
      +                          enuInfoPtr_->cursorPosition - 1 ) )
  3453  0587  0020               	movlb	0	; select bank0
  3454  0588  0A67               	incf	_currentMenuInfoPtr_,w
  3455  0589  0086               	movwf	6
  3456  058A  0187               	clrf	7
  3457  058B  0867               	movf	_currentMenuInfoPtr_,w
  3458  058C  3E02               	addlw	2
  3459  058D  0084               	movwf	4
  3460  058E  0185               	clrf	5
  3461  058F  0800               	movf	0,w
  3462  0590  0701               	addwf	1,w
  3463  0591  00C7               	movwf	??_main
  3464  0592  01C8               	clrf	??_main+1
  3465  0593  0DC8               	rlf	??_main+1,f
  3466  0594  0847               	movf	??_main,w
  3467  0595  3EFF               	addlw	255
  3468  0596  00C9               	movwf	??_main+2
  3469  0597  30FF               	movlw	255
  3470  0598  3D48               	addwfc	??_main+1,w
  3471  0599  00CA               	movwf	??_main+3
  3472  059A  0867               	movf	_currentMenuInfoPtr_,w
  3473  059B  0086               	movwf	6
  3474  059C  0187               	clrf	7
  3475  059D  0801               	movf	1,w
  3476  059E  0649               	xorwf	??_main+2,w
  3477  059F  044A               	iorwf	??_main+3,w
  3478  05A0  1903               	skipnz
  3479  05A1  2DAE               	goto	l3718
  3480                           
  3481                           ;main.c: 803: _parallel_lcd_WriteCharacter( 0xC0 | 0xF , CHAR_CODE.CURSOR_DOWN ) ;
  3482  05A2  303C               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3483  05A3  0084               	movwf	4
  3484  05A4  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3485  05A5  0085               	movwf	5
  3486  05A6  0800               	movf	0,w	;code access
  3487  05A7  00C7               	movwf	??_main
  3488  05A8  0847               	movf	??_main,w
  3489  05A9  00C0               	movwf	__parallel_lcd_WriteCharacter@character
  3490  05AA  30CF               	movlw	207
  3491  05AB  318A  22CE  3180   	fcall	__parallel_lcd_WriteCharacter
  3492  05AE                     l3718:	
  3493                           
  3494                           ;main.c: 805: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuInfoPtr_-
      +                          >cursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3495  05AE  303A               	movlw	low (_CHAR_CODE| (0+32768))
  3496  05AF  0084               	movwf	4
  3497  05B0  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3498  05B1  0085               	movwf	5
  3499  05B2  0800               	movf	0,w	;code access
  3500  05B3  0020               	movlb	0	; select bank0
  3501  05B4  00C7               	movwf	??_main
  3502  05B5  0847               	movf	??_main,w
  3503  05B6  00C0               	movwf	__parallel_lcd_WriteCharacter@character
  3504  05B7  0A67               	incf	_currentMenuInfoPtr_,w
  3505  05B8  0086               	movwf	6
  3506  05B9  0187               	clrf	7
  3507  05BA  0801               	movf	1,w
  3508  05BB  3E40               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3509  05BC  0084               	movwf	4
  3510  05BD  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3511  05BE  1803               	skipnc
  3512  05BF  3E01               	addlw	1
  3513  05C0  0085               	movwf	5
  3514  05C1  0800               	movf	0,w	;code access
  3515  05C2  318A  22CE  3180   	fcall	__parallel_lcd_WriteCharacter
  3516                           
  3517                           ;main.c: 807: break ;
  3518  05C5  2E95               	goto	l403
  3519  05C6                     l3720:	
  3520                           ;main.c: 809: case STATE_CONFIRM_LOAD:
  3521                           
  3522                           
  3523                           ;main.c: 810: case STATE_CONFIRM_SAVE:
  3524                           ;main.c: 811: case STATE_CONFIRM_RESET:
  3525                           ;main.c: 812: _parallel_lcd_WriteStringClearing( 0x80 | 0xD , MESSAGE.CONFIRM.NO ) ;
  3526  05C6  301E               	movlw	low ((_MESSAGE+30)| (0+32768))
  3527  05C7  0084               	movwf	4
  3528  05C8  3088               	movlw	high ((_MESSAGE+30)| (0+32768))
  3529  05C9  0085               	movwf	5
  3530  05CA  3F00               	moviw [0]fsr0
  3531  05CB  0020               	movlb	0	; select bank0
  3532  05CC  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3533  05CD  3F01               	moviw [1]fsr0
  3534  05CE  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3535  05CF  308D               	movlw	141
  3536  05D0  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3537                           
  3538                           ;main.c: 813: _parallel_lcd_WriteStringClearing( 0xC0 | 0xD , MESSAGE.CONFIRM.YES ) ;
  3539  05D3  3020               	movlw	low ((_MESSAGE+32)| (0+32768))
  3540  05D4  0084               	movwf	4
  3541  05D5  3088               	movlw	high ((_MESSAGE+32)| (0+32768))
  3542  05D6  0085               	movwf	5
  3543  05D7  3F00               	moviw [0]fsr0
  3544  05D8  0020               	movlb	0	; select bank0
  3545  05D9  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3546  05DA  3F01               	moviw [1]fsr0
  3547  05DB  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3548  05DC  30CD               	movlw	205
  3549  05DD  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3550                           
  3551                           ;main.c: 814: _parallel_lcd_WriteString( 0x80 | 0x0 , currentValueInfo_.messageTitle ) ;
  3552  05E0  0020               	movlb	0	; select bank0
  3553  05E1  085D               	movf	low ((_currentValueInfo_| 0+3)),w
  3554  05E2  00C2               	movwf	__parallel_lcd_WriteString@stringPtr
  3555  05E3  085E               	movf	(low ((_currentValueInfo_| 0+3))+1),w
  3556  05E4  00C3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3557  05E5  3080               	movlw	128
  3558  05E6  318A  2220  3180   	fcall	__parallel_lcd_WriteString
  3559                           
  3560                           ;main.c: 815: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentMenuInfoPtr_
      +                          ->cursorPosition ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3561  05E9  303A               	movlw	low (_CHAR_CODE| (0+32768))
  3562  05EA  0084               	movwf	4
  3563  05EB  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3564  05EC  0085               	movwf	5
  3565  05ED  0800               	movf	0,w	;code access
  3566  05EE  0020               	movlb	0	; select bank0
  3567  05EF  00C7               	movwf	??_main
  3568  05F0  0847               	movf	??_main,w
  3569  05F1  00C0               	movwf	__parallel_lcd_WriteCharacter@character
  3570  05F2  0A67               	incf	_currentMenuInfoPtr_,w
  3571  05F3  0086               	movwf	6
  3572  05F4  0187               	clrf	7
  3573  05F5  0801               	movf	1,w
  3574  05F6  3E40               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3575  05F7  0084               	movwf	4
  3576  05F8  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3577  05F9  1803               	skipnc
  3578  05FA  3E01               	addlw	1
  3579  05FB  0085               	movwf	5
  3580  05FC  0800               	movf	0,w	;code access
  3581  05FD  380C               	iorlw	12
  3582  05FE  318A  22CE  3180   	fcall	__parallel_lcd_WriteCharacter
  3583                           
  3584                           ;main.c: 817: break ;
  3585  0601  2E95               	goto	l403
  3586  0602                     l3724:	
  3587                           ;main.c: 819: case STATE_METRONOME:
  3588                           
  3589                           
  3590                           ;main.c: 820: case STATE_ADJUST_BEAT_COUNT:
  3591                           ;main.c: 821: case STATE_ADJUST_TONE:
  3592                           ;main.c: 822: case STATE_ADJUST_DURATION_CLICK:
  3593                           ;main.c: 823: case STATE_ADJUST_DURATION_KEY:
  3594                           ;main.c: 824: case STATE_ADJUST_PULSE_WIDTH:
  3595                           ;main.c: 825: case STATE_ADJUST_OSCILLATOR_TUNE:
  3596                           ;main.c: 826: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , currentValueInfo_.messageT
      +                          itle ) ;
  3597  0602  0020               	movlb	0	; select bank0
  3598  0603  085D               	movf	low ((_currentValueInfo_| 0+3)),w
  3599  0604  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3600  0605  085E               	movf	(low ((_currentValueInfo_| 0+3))+1),w
  3601  0606  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3602  0607  3080               	movlw	128
  3603  0608  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3604                           
  3605                           ;main.c: 827: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , currentValueInfo_.messageV
      +                          alue ) ;
  3606  060B  0020               	movlb	0	; select bank0
  3607  060C  085F               	movf	low ((_currentValueInfo_| 0+5)),w
  3608  060D  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3609  060E  0860               	movf	(low ((_currentValueInfo_| 0+5))+1),w
  3610  060F  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3611  0610  30C0               	movlw	192
  3612  0611  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3613                           
  3614                           ;main.c: 828: if( machineState_ == STATE_METRONOME && isMute_ )
  3615  0614  0020               	movlb	0	; select bank0
  3616  0615  036A               	decf	_machineState_,w
  3617  0616  1D03               	btfss	3,2
  3618  0617  2E28               	goto	l3732
  3619  0618  0869               	movf	_isMute_,w
  3620  0619  1903               	btfsc	3,2
  3621  061A  2E28               	goto	l3732
  3622                           
  3623                           ;main.c: 829: _parallel_lcd_WriteString( 0x80 | 0xA , MESSAGE.METRONOME.MUTE ) ;
  3624  061B  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  3625  061C  0084               	movwf	4
  3626  061D  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3627  061E  0085               	movwf	5
  3628  061F  3F00               	moviw [0]fsr0
  3629  0620  00C2               	movwf	__parallel_lcd_WriteString@stringPtr
  3630  0621  3F01               	moviw [1]fsr0
  3631  0622  00C3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3632  0623  308A               	movlw	138
  3633  0624  318A  2220  3180   	fcall	__parallel_lcd_WriteString
  3634  0627  2E36               	goto	l3736
  3635  0628                     l3732:	
  3636                           
  3637                           ;main.c: 830: else if( machineState_ == STATE_ADJUST_TONE )
  3638  0628  3009               	movlw	9
  3639  0629  0020               	movlb	0	; select bank0
  3640  062A  066A               	xorwf	_machineState_,w
  3641  062B  1D03               	btfss	3,2
  3642  062C  2E36               	goto	l3736
  3643                           
  3644                           ;main.c: 831: _parallel_lcd_WriteCharacter( 0xC0 | 0x5 , menuInfoTone_.select - MENU_ITE
      +                          M_TONE_ADJUST_TONE0 + '0' ) ;
  3645  062D  083C               	movf	_menuInfoTone_,w
  3646  062E  3E2F               	addlw	47
  3647  062F  00C7               	movwf	??_main
  3648  0630  0847               	movf	??_main,w
  3649  0631  00C0               	movwf	__parallel_lcd_WriteCharacter@character
  3650  0632  30C5               	movlw	197
  3651  0633  318A  22CE  3180   	fcall	__parallel_lcd_WriteCharacter
  3652  0636                     l3736:	
  3653                           
  3654                           ;main.c: 833: outputEvent_.changeValue = 1 ;
  3655  0636  0020               	movlb	0	; select bank0
  3656  0637  156B               	bsf	_outputEvent_,2
  3657                           
  3658                           ;main.c: 834: break ;
  3659  0638  2E95               	goto	l403
  3660  0639                     l3738:	
  3661                           ;main.c: 836: case STATE_INFORMATION:
  3662                           
  3663                           
  3664                           ;main.c: 837: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE_INFORMATION[ menuI
      +                          nfoInformation_.select ] ) ;
  3665  0639  3534               	lslf	_menuInfoInformation_,w
  3666  063A  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3667  063B  0086               	movwf	6
  3668  063C  0187               	clrf	7
  3669  063D  3F40               	moviw [0]fsr1
  3670  063E  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3671  063F  3F41               	moviw [1]fsr1
  3672  0640  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3673  0641  3080               	movlw	128
  3674  0642  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3675                           
  3676                           ;main.c: 838: _parallel_lcd_WriteString( 0x80 | 0xA , &informationValueBuffer[ menuInfoI
      +                          nformation_.select ] ) ;
  3677  0645  3007               	movlw	7
  3678  0646  0020               	movlb	0	; select bank0
  3679  0647  00C7               	movwf	??_main
  3680  0648  0847               	movf	??_main,w
  3681  0649  00F4               	movwf	___bmul@multiplicand
  3682  064A  0834               	movf	_menuInfoInformation_,w
  3683  064B  318A  22BC  3180   	fcall	___bmul
  3684  064E  3EAE               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3685  064F  0020               	movlb	0	; select bank0
  3686  0650  00C2               	movwf	__parallel_lcd_WriteString@stringPtr
  3687  0651  3000               	movlw	0
  3688  0652  00C3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3689  0653  308A               	movlw	138
  3690  0654  318A  2220  3180   	fcall	__parallel_lcd_WriteString
  3691                           
  3692                           ;main.c: 839: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ menuI
      +                          nfoInformation_.select + 1 ] ) ;
  3693  0657  0020               	movlb	0	; select bank0
  3694  0658  3534               	lslf	_menuInfoInformation_,w
  3695  0659  3E02               	addlw	2
  3696  065A  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3697  065B  0086               	movwf	6
  3698  065C  0187               	clrf	7
  3699  065D  3F40               	moviw [0]fsr1
  3700  065E  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3701  065F  3F41               	moviw [1]fsr1
  3702  0660  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3703  0661  30C0               	movlw	192
  3704  0662  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3705                           
  3706                           ;main.c: 840: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ menuInfoI
      +                          nformation_.select + 1 ] ) ;
  3707  0665  3007               	movlw	7
  3708  0666  0020               	movlb	0	; select bank0
  3709  0667  00C7               	movwf	??_main
  3710  0668  0847               	movf	??_main,w
  3711  0669  00F4               	movwf	___bmul@multiplicand
  3712  066A  0834               	movf	_menuInfoInformation_,w
  3713  066B  3E01               	addlw	1
  3714  066C  318A  22BC  3180   	fcall	___bmul
  3715  066F  3EAE               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3716  0670  0020               	movlb	0	; select bank0
  3717  0671  00C2               	movwf	__parallel_lcd_WriteString@stringPtr
  3718  0672  3000               	movlw	0
  3719  0673  00C3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3720  0674  30CA               	movlw	202
  3721  0675  318A  2220  3180   	fcall	__parallel_lcd_WriteString
  3722                           
  3723                           ;main.c: 841: break ;
  3724  0678  2E95               	goto	l403
  3725  0679                     l3744:	
  3726                           ;main.c: 843: case STATE_LOAD:
  3727                           
  3728                           
  3729                           ;main.c: 844: case STATE_SAVE:
  3730                           ;main.c: 845: case STATE_INITIALIZE:
  3731                           ;main.c: 846: case STATE_ERROR:
  3732                           ;main.c: 847: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , currentValueInfo_.messageT
      +                          itle ) ;
  3733  0679  0020               	movlb	0	; select bank0
  3734  067A  085D               	movf	low ((_currentValueInfo_| 0+3)),w
  3735  067B  00C0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3736  067C  085E               	movf	(low ((_currentValueInfo_| 0+3))+1),w
  3737  067D  00C1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3738  067E  3080               	movlw	128
  3739  067F  318E  26C5  3180   	fcall	__parallel_lcd_WriteStringClearing
  3740                           
  3741                           ;main.c: 848: _parallel_lcd_ClearRow( 0xC0 ) ;
  3742  0682  30C0               	movlw	192
  3743  0683  318A  2240  3180   	fcall	__parallel_lcd_ClearRow
  3744                           
  3745                           ;main.c: 851: }
  3746                           
  3747                           ;main.c: 849: break ;
  3748  0686  2E95               	goto	l403
  3749  0687                     l3750:	
  3750  0687  0020               	movlb	0	; select bank0
  3751  0688  086A               	movf	_machineState_,w
  3752                           
  3753                           ; Switch size 1, requested type "space"
  3754                           ; Number of cases is 18, Range of values is 1 to 19
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; direct_byte           47     9 (fixed)
  3758                           ; simple_byte           55    28 (average)
  3759                           ; jumptable            263     9 (fixed)
  3760                           ;	Chosen strategy is direct_byte
  3761  0689  3EFF               	addlw	-1
  3762  068A  1C03               	skipc
  3763  068B  2E95               	goto	l403
  3764  068C  0084               	movwf	4
  3765  068D  3013               	movlw	19
  3766  068E  0204               	subwf	4,w
  3767  068F  1803               	skipnc
  3768  0690  2E95               	goto	l403
  3769  0691  3189               	movlp	high S3938
  3770  0692  3504               	lslf	4,w
  3771  0693  3ECF               	addlw	low S3938
  3772  0694  0082               	movwf	2
  3773  0695                     l403:	
  3774                           
  3775                           ;main.c: 853: }
  3776                           ;main.c: 856: if( (outputEvent_.changeValue&&!(outputEvent_.changeValue=0)) ) {
  3777  0695  0020               	movlb	0	; select bank0
  3778  0696  1D6B               	btfss	_outputEvent_,2
  3779  0697  29AC               	goto	l251
  3780  0698  116B               	bcf	_outputEvent_,2
  3781                           
  3782                           ;main.c: 858: uint16_t tmpValue ;
  3783                           ;main.c: 859: char valueString[6] = "= 000" ;
  3784  0699  30A8               	movlw	low main@F3074
  3785  069A  0086               	movwf	6
  3786  069B  3000               	movlw	high main@F3074
  3787  069C  0087               	movwf	7
  3788  069D  304B               	movlw	low main@valueString
  3789  069E  0084               	movwf	4
  3790  069F  3000               	movlw	high main@valueString
  3791  06A0  0085               	movwf	5
  3792  06A1  3006               	movlw	6
  3793  06A2  00C7               	movwf	??_main
  3794  06A3                     u3150:	
  3795  06A3  0016               	moviw fsr1++
  3796  06A4  001A               	movwi fsr0++
  3797  06A5  0BC7               	decfsz	??_main,f
  3798  06A6  2EA3               	goto	u3150
  3799                           
  3800                           ;main.c: 861: switch( machineState_ ) {
  3801  06A7  2ED3               	goto	l3768
  3802  06A8                     l3756:	
  3803                           ;main.c: 863: case STATE_METRONOME:
  3804                           
  3805                           
  3806                           ;main.c: 864: tmpValue = configration_.tempo ;
  3807  06A8  0822               	movf	_configration_+2,w
  3808  06A9  00D3               	movwf	main@tmpValue+1
  3809  06AA  0821               	movf	_configration_+1,w
  3810  06AB  00D2               	movwf	main@tmpValue
  3811                           
  3812                           ;main.c: 865: break ;
  3813  06AC  2EDB               	goto	l3770
  3814  06AD                     l435:	
  3815                           ;main.c: 867: case STATE_ADJUST_OSCILLATOR_TUNE:
  3816                           
  3817                           
  3818                           ;main.c: 868: if( (uint08_t)configration_.oscillatorTune & 0x80 ) {
  3819  06AD  1FAA               	btfss	_configration_+10,7
  3820  06AE  2EC2               	goto	l3762
  3821                           
  3822                           ;main.c: 869: tmpValue = -configration_.oscillatorTune ;
  3823  06AF  082A               	movf	_configration_+10,w
  3824  06B0  00C7               	movwf	??_main
  3825  06B1  01C8               	clrf	??_main+1
  3826  06B2  1BC7               	btfsc	??_main,7
  3827  06B3  03C8               	decf	??_main+1,f
  3828  06B4  09C7               	comf	??_main,f
  3829  06B5  09C8               	comf	??_main+1,f
  3830  06B6  0AC7               	incf	??_main,f
  3831  06B7  1903               	skipnz
  3832  06B8  0AC8               	incf	??_main+1,f
  3833  06B9  0847               	movf	??_main,w
  3834  06BA  00D2               	movwf	main@tmpValue
  3835  06BB  0848               	movf	??_main+1,w
  3836  06BC  00D3               	movwf	main@tmpValue+1
  3837                           
  3838                           ;main.c: 870: valueString[1] = '-' ;
  3839  06BD  302D               	movlw	45
  3840  06BE  00C7               	movwf	??_main
  3841  06BF  0847               	movf	??_main,w
  3842  06C0  00CC               	movwf	main@valueString+1
  3843                           
  3844                           ;main.c: 871: }
  3845  06C1  2EDB               	goto	l3770
  3846  06C2                     l3762:	
  3847                           
  3848                           ;main.c: 872: else {
  3849                           ;main.c: 873: tmpValue = (uint16_t)configration_.oscillatorTune ;
  3850  06C2  082A               	movf	_configration_+10,w
  3851  06C3  00D2               	movwf	main@tmpValue
  3852  06C4  01D3               	clrf	main@tmpValue+1
  3853  06C5  1BD2               	btfsc	main@tmpValue,7
  3854  06C6  03D3               	decf	main@tmpValue+1,f
  3855                           
  3856                           ;main.c: 874: }
  3857                           ;main.c: 875: break ;
  3858  06C7  2EDB               	goto	l3770
  3859  06C8                     l3764:	
  3860                           ;main.c: 877: default:
  3861                           
  3862                           
  3863                           ;main.c: 878: tmpValue = *currentValueInfo_.valuePtr ;
  3864  06C8  085A               	movf	_currentValueInfo_,w
  3865  06C9  0086               	movwf	6
  3866  06CA  0187               	clrf	7
  3867  06CB  0801               	movf	1,w
  3868  06CC  00C7               	movwf	??_main
  3869  06CD  01C8               	clrf	??_main+1
  3870  06CE  0847               	movf	??_main,w
  3871  06CF  00D2               	movwf	main@tmpValue
  3872  06D0  0848               	movf	??_main+1,w
  3873  06D1  00D3               	movwf	main@tmpValue+1
  3874                           
  3875                           ;main.c: 880: }
  3876                           
  3877                           ;main.c: 879: break ;
  3878  06D2  2EDB               	goto	l3770
  3879  06D3                     l3768:	
  3880  06D3  086A               	movf	_machineState_,w
  3881                           
  3882                           ; Switch size 1, requested type "space"
  3883                           ; Number of cases is 2, Range of values is 1 to 10
  3884                           ; switch strategies available:
  3885                           ; Name         Instructions Cycles
  3886                           ; simple_byte            7     4 (average)
  3887                           ; direct_byte           29     9 (fixed)
  3888                           ; jumptable            263     9 (fixed)
  3889                           ;	Chosen strategy is simple_byte
  3890  06D4  3A01               	xorlw	1	; case 1
  3891  06D5  1903               	skipnz
  3892  06D6  2EA8               	goto	l3756
  3893  06D7  3A0B               	xorlw	11	; case 10
  3894  06D8  1903               	skipnz
  3895  06D9  2EAD               	goto	l435
  3896  06DA  2EC8               	goto	l3764
  3897  06DB                     l3770:	
  3898                           
  3899                           ;main.c: 882: uint08_t isNonZero = BOOL_FALSE ;
  3900  06DB  01D1               	clrf	main@isNonZero
  3901                           
  3902                           ;main.c: 883: const uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 , } ;
  3903                           ;main.c: 884: for( uint08_t i = 0 ; i < 3 ; i++ ) {
  3904  06DC  01D9               	clrf	main@i
  3905  06DD  2F2C               	goto	L37
  3906  06DE                     l3782:	
  3907  06DE  0859               	movf	main@i,w
  3908  06DF  3E3D               	addlw	low (main@COMPARE_UNITS| (0+32768))
  3909  06E0  0084               	movwf	4
  3910  06E1  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  3911  06E2  1803               	skipnc
  3912  06E3  3E01               	addlw	1
  3913  06E4  0085               	movwf	5
  3914  06E5  0800               	movf	0,w	;code access
  3915  06E6  00C7               	movwf	??_main
  3916  06E7  01C8               	clrf	??_main+1
  3917  06E8  0848               	movf	??_main+1,w
  3918  06E9  0253               	subwf	main@tmpValue+1,w
  3919  06EA  1D03               	skipz
  3920  06EB  2EEE               	goto	u3185
  3921  06EC  0847               	movf	??_main,w
  3922  06ED  0252               	subwf	main@tmpValue,w
  3923  06EE                     u3185:	
  3924  06EE  1C03               	btfss	3,0
  3925  06EF  2F0A               	goto	l3784
  3926                           
  3927                           ;main.c: 887: tmpValue -= COMPARE_UNITS[i] ;
  3928                           
  3929                           ;main.c: 886: while( tmpValue >= COMPARE_UNITS[i] ) {
  3930  06F0  0859               	movf	main@i,w
  3931  06F1  3E3D               	addlw	low (main@COMPARE_UNITS| (0+32768))
  3932  06F2  0084               	movwf	4
  3933  06F3  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  3934  06F4  1803               	skipnc
  3935  06F5  3E01               	addlw	1
  3936  06F6  0085               	movwf	5
  3937  06F7  0800               	movf	0,w	;code access
  3938  06F8  00C7               	movwf	??_main
  3939  06F9  01C8               	clrf	??_main+1
  3940  06FA  0847               	movf	??_main,w
  3941  06FB  02D2               	subwf	main@tmpValue,f
  3942  06FC  0848               	movf	??_main+1,w
  3943  06FD  3BD3               	subwfb	main@tmpValue+1,f
  3944                           
  3945                           ;main.c: 888: valueString[ i + 2 ]++ ;
  3946  06FE  3001               	movlw	1
  3947  06FF  00C7               	movwf	??_main
  3948  0700  0859               	movf	main@i,w
  3949  0701  3E02               	addlw	2
  3950  0702  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  3951  0703  0086               	movwf	6
  3952  0704  0187               	clrf	7
  3953  0705  0847               	movf	??_main,w
  3954  0706  0781               	addwf	1,f
  3955                           
  3956                           ;main.c: 889: isNonZero = BOOL_TRUE ;
  3957  0707  01D1               	clrf	main@isNonZero
  3958  0708  0AD1               	incf	main@isNonZero,f
  3959  0709  2EDE               	goto	l3782
  3960  070A                     l3784:	
  3961                           
  3962                           ;main.c: 890: }
  3963                           ;main.c: 892: if( i == 2 ) break ;
  3964  070A  3002               	movlw	2
  3965  070B  0659               	xorwf	main@i,w
  3966  070C  1903               	btfsc	3,2
  3967  070D  2F30               	goto	l3798
  3968                           
  3969                           ;main.c: 894: if( isNonZero ) continue ;
  3970  070E  0851               	movf	main@isNonZero,w
  3971  070F  1D03               	btfss	3,2
  3972  0710  2F28               	goto	l3794
  3973                           
  3974                           ;main.c: 896: valueString[ i + 2 ] = valueString[ i + 1 ] ;
  3975  0711  0859               	movf	main@i,w
  3976  0712  3E01               	addlw	1
  3977  0713  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  3978  0714  0086               	movwf	6
  3979  0715  0187               	clrf	7
  3980  0716  0801               	movf	1,w
  3981  0717  00C7               	movwf	??_main
  3982  0718  0859               	movf	main@i,w
  3983  0719  3E02               	addlw	2
  3984  071A  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  3985  071B  0086               	movwf	6
  3986  071C  0187               	clrf	7
  3987  071D  0847               	movf	??_main,w
  3988  071E  0081               	movwf	1
  3989                           
  3990                           ;main.c: 897: valueString[ i + 1 ] = ' ' ;
  3991  071F  3020               	movlw	32
  3992  0720  00C7               	movwf	??_main
  3993  0721  0859               	movf	main@i,w
  3994  0722  3E01               	addlw	1
  3995  0723  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  3996  0724  0086               	movwf	6
  3997  0725  0187               	clrf	7
  3998  0726  0847               	movf	??_main,w
  3999  0727  0081               	movwf	1
  4000  0728                     l3794:	
  4001  0728  3001               	movlw	1
  4002  0729  00C7               	movwf	??_main
  4003  072A  0847               	movf	??_main,w
  4004  072B  07D9               	addwf	main@i,f
  4005  072C                     L37:	
  4006  072C  3003               	movlw	3
  4007  072D  0259               	subwf	main@i,w
  4008  072E  1C03               	skipc
  4009  072F  2EDE               	goto	l3782
  4010  0730                     l3798:	
  4011                           
  4012                           ;main.c: 899: }
  4013                           ;main.c: 901: _parallel_lcd_WriteString( 0xC0 | 0xB , &valueString ) ;
  4014  0730  304B               	movlw	low main@valueString
  4015  0731  00C2               	movwf	__parallel_lcd_WriteString@stringPtr
  4016  0732  3000               	movlw	high main@valueString
  4017  0733  00C3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  4018  0734  30CB               	movlw	203
  4019  0735  318A  2220  3180   	fcall	__parallel_lcd_WriteString
  4020                           
  4021                           ;main.c: 903: switch( machineState_ ) {
  4022  0738  2F47               	goto	l3808
  4023  0739                     l3800:	
  4024                           ;main.c: 904: case STATE_ADJUST_OSCILLATOR_TUNE:
  4025                           
  4026                           
  4027                           ;main.c: 905: OSCTUNE = configration_.oscillatorTune ;
  4028  0739  0020               	movlb	0	; select bank0
  4029  073A  082A               	movf	_configration_+10,w
  4030  073B  0021               	movlb	1	; select bank1
  4031  073C  2F45               	goto	L34
  4032  073D                     l3802:	
  4033                           ;main.c: 907: case STATE_ADJUST_TONE:
  4034                           
  4035                           ;main.c: 906: break ;
  4036                           
  4037                           
  4038                           ;main.c: 908: PR2 = *currentValueInfo_.valuePtr ;
  4039  073D  0020               	movlb	0	; select bank0
  4040  073E  085A               	movf	_currentValueInfo_,w
  4041  073F  0086               	movwf	6
  4042  0740  0187               	clrf	7
  4043  0741  0801               	movf	1,w
  4044  0742  009B               	movwf	27	;volatile
  4045                           
  4046                           ;main.c: 909: {CCPR4L=(PR2>>1);} ;
  4047  0743  361B               	lsrf	27,w	;volatile
  4048  0744  0026               	movlb	6	; select bank6
  4049  0745                     L34:	
  4050  0745  0098               	movwf	24	;volatile
  4051                           
  4052                           ;main.c: 911: }
  4053                           
  4054                           ;main.c: 910: break ;
  4055  0746  29AC               	goto	l251
  4056  0747                     l3808:	
  4057  0747  0020               	movlb	0	; select bank0
  4058  0748  086A               	movf	_machineState_,w
  4059                           
  4060                           ; Switch size 1, requested type "space"
  4061                           ; Number of cases is 2, Range of values is 9 to 10
  4062                           ; switch strategies available:
  4063                           ; Name         Instructions Cycles
  4064                           ; simple_byte            7     4 (average)
  4065                           ; direct_byte           13     9 (fixed)
  4066                           ; jumptable            263     9 (fixed)
  4067                           ;	Chosen strategy is simple_byte
  4068  0749  3A09               	xorlw	9	; case 9
  4069  074A  1903               	skipnz
  4070  074B  2F3D               	goto	l3802
  4071  074C  3A03               	xorlw	3	; case 10
  4072  074D  1903               	skipnz
  4073  074E  2F39               	goto	l3800
  4074  074F  29AC               	goto	l251
  4075                           
  4076                           ;main.c: 912: }
  4077                           ;main.c: 914: }
  4078  0750  29AC               	goto	l251
  4079  0751                     __end_of_main:	
  4080                           
  4081                           	psect	swtext1
  4082  0A70                     __pswtext1:	
  4083  0A70                     S3930:	
  4084  0A70  3182  2ABB         	ljmp	l291
  4085  0A72  3182  2A80         	ljmp	l3410
  4086  0A74  3182  2A82         	ljmp	l3412
  4087  0A76  3182  2A89         	ljmp	l3418
  4088  0A78  3182  2A90         	ljmp	l3424
  4089  0A7A  3182  2A92         	ljmp	l3426
  4090  0A7C  3182  2A94         	ljmp	l3428
  4091  0A7E  3182  2AA0         	ljmp	l3432
  4092  0A80  3182  2AAC         	ljmp	l3436
  4093  0A82  3182  2AAE         	ljmp	l3438
  4094                           
  4095                           	psect	swtext2
  4096  09A9                     __pswtext2:	
  4097  09A9                     S3932:	
  4098  09A9  3182  2AF1         	ljmp	l3480
  4099  09AB  3182  2ABE         	ljmp	l3444
  4100  09AD  3182  2AC9         	ljmp	l3446
  4101  09AF  3182  2AD3         	ljmp	l3460
  4102  09B1  3182  2AF8         	ljmp	l3486
  4103  09B3  3182  2AF9         	ljmp	l3488
  4104  09B5  3182  2AF9         	ljmp	l3488
  4105  09B7  3182  2AF8         	ljmp	l3486
  4106  09B9  3182  2AFE         	ljmp	l319
  4107  09BB  3182  2AFB         	ljmp	l318
  4108  09BD  3182  2AF8         	ljmp	l3486
  4109  09BF  3182  2AE7         	ljmp	l3468
  4110  09C1  3183  2B15         	ljmp	l276
  4111  09C3  3182  2AE2         	ljmp	l3462
  4112  09C5  3183  2B15         	ljmp	l276
  4113  09C7  3182  2AEC         	ljmp	l3474
  4114  09C9  3183  2B04         	ljmp	l321
  4115  09CB  3183  2B15         	ljmp	l276
  4116  09CD  3183  2B04         	ljmp	l321
  4117                           
  4118                           	psect	swtext3
  4119  0981                     __pswtext3:	
  4120  0981                     S3934:	
  4121  0981  3183  2BFE         	ljmp	l341
  4122  0983  3183  2B1A         	ljmp	l3500
  4123  0985  3183  2B2A         	ljmp	l3502
  4124  0987  3183  2B2C         	ljmp	l3504
  4125  0989  3183  2B2E         	ljmp	l3506
  4126  098B  3183  2B34         	ljmp	l332
  4127  098D  3183  2B4E         	ljmp	l333
  4128  098F  3183  2B68         	ljmp	l334
  4129  0991  3183  2B82         	ljmp	l335
  4130  0993  3183  2BC1         	ljmp	l337
  4131  0995  3183  2B9D         	ljmp	l336
  4132  0997  3183  2BDF         	ljmp	l3566
  4133  0999  3183  2B30         	ljmp	l3508
  4134  099B  3183  2BF0         	ljmp	l340
  4135  099D  3183  2B30         	ljmp	l3508
  4136  099F  3183  2BE6         	ljmp	l339
  4137  09A1  3183  2B30         	ljmp	l3508
  4138  09A3  3184  2C00         	ljmp	l342
  4139  09A5  3184  2C09         	ljmp	l3580
  4140  09A7  3184  2C12         	ljmp	l3582
  4141                           
  4142                           	psect	swtext4
  4143  0A00                     __pswtext4:	
  4144  0A00                     S3936:	
  4145  0A00  3184  2C65         	ljmp	l360
  4146  0A02  3184  2C27         	ljmp	l352
  4147  0A04  3184  2C27         	ljmp	l352
  4148  0A06  3184  2C27         	ljmp	l352
  4149  0A08  3184  2C86         	ljmp	l370
  4150  0A0A  3184  2C86         	ljmp	l370
  4151  0A0C  3184  2C86         	ljmp	l370
  4152  0A0E  3184  2C86         	ljmp	l370
  4153  0A10  3184  2C86         	ljmp	l370
  4154  0A12  3184  2C86         	ljmp	l370
  4155  0A14  3184  2C27         	ljmp	l352
  4156  0A16  3184  2C27         	ljmp	l352
  4157  0A18  3184  2CB8         	ljmp	l359
  4158  0A1A  3184  2C27         	ljmp	l352
  4159  0A1C  3184  2CB8         	ljmp	l359
  4160  0A1E  3184  2C27         	ljmp	l352
  4161                           
  4162                           	psect	swtext5
  4163  09CF                     __pswtext5:	
  4164  09CF                     S3938:	
  4165  09CF  3186  2E02         	ljmp	l3724
  4166  09D1  3185  2D34         	ljmp	l3708
  4167  09D3  3185  2D34         	ljmp	l3708
  4168  09D5  3185  2D34         	ljmp	l3708
  4169  09D7  3186  2E02         	ljmp	l3724
  4170  09D9  3186  2E02         	ljmp	l3724
  4171  09DB  3186  2E02         	ljmp	l3724
  4172  09DD  3186  2E02         	ljmp	l3724
  4173  09DF  3186  2E02         	ljmp	l3724
  4174  09E1  3186  2E02         	ljmp	l3724
  4175  09E3  3186  2E39         	ljmp	l3738
  4176  09E5  3185  2DC6         	ljmp	l3720
  4177  09E7  3186  2E79         	ljmp	l3744
  4178  09E9  3185  2DC6         	ljmp	l3720
  4179  09EB  3186  2E79         	ljmp	l3744
  4180  09ED  3185  2DC6         	ljmp	l3720
  4181  09EF  3186  2E79         	ljmp	l3744
  4182  09F1  3186  2E95         	ljmp	l403
  4183  09F3  3186  2E79         	ljmp	l3744
  4184                           
  4185                           	psect	text1
  4186  0F99                     __ptext1:	
  4187 ;; *************** function _initialize *****************
  4188 ;; Defined at:
  4189 ;;		line 5 in file "src/pic16f1827_init.h"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;		None               void
  4196 ;; Registers used:
  4197 ;;		wreg, status,2, status,0
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4203 ;;      Params:         0       0       0       0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0
  4206 ;;      Totals:         0       0       0       0       0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    1
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_main
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function _initialize
  4219  0F99                     _initialize:	
  4220                           
  4221                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4225  0F99  0021               	movlb	1	; select bank1
  4226  0F9A  0819               	movf	25,w	;volatile
  4227  0F9B  3987               	andlw	-121
  4228  0F9C  3870               	iorlw	112
  4229  0F9D  0099               	movwf	25	;volatile
  4230                           
  4231                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4232  0F9E  30FC               	movlw	-4
  4233  0F9F  0599               	andwf	25,f	;volatile
  4234                           
  4235                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4236  0FA0  1799               	bsf	25,7	;volatile
  4237                           
  4238                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4239  0FA1  30C0               	movlw	-64
  4240  0FA2  0598               	andwf	24,f	;volatile
  4241                           
  4242                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4243  0FA3  0817               	movf	23,w	;volatile
  4244  0FA4  39C1               	andlw	-63
  4245  0FA5  381E               	iorlw	30
  4246  0FA6  0097               	movwf	23	;volatile
  4247                           
  4248                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4249  0FA7  138B               	bcf	11,7	;volatile
  4250                           
  4251                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4252  0FA8  130B               	bcf	11,6	;volatile
  4253                           
  4254                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4255  0FA9  1595               	bsf	21,3	;volatile
  4256                           
  4257                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4258  0FAA  1295               	bcf	21,5	;volatile
  4259                           
  4260                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4261  0FAB  1615               	bsf	21,4	;volatile
  4262                           
  4263                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4264  0FAC  0020               	movlb	0	; select bank0
  4265  0FAD  0195               	clrf	21	;volatile
  4266                           
  4267                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4268  0FAE  128B               	bcf	11,5	;volatile
  4269                           
  4270                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4271  0FAF  110B               	bcf	11,2	;volatile
  4272                           
  4273                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4274  0FB0  1018               	bcf	24,0	;volatile
  4275                           
  4276                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4277  0FB1  303F               	movlw	-193
  4278  0FB2  0598               	andwf	24,f	;volatile
  4279                           
  4280                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4281  0FB3  3030               	movlw	48
  4282  0FB4  0498               	iorwf	24,f	;volatile
  4283                           
  4284                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4285  0FB5  1118               	bcf	24,2	;volatile
  4286                           
  4287                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4288  0FB6  0196               	clrf	22	;volatile
  4289  0FB7  0197               	clrf	23	;volatile
  4290                           
  4291                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4292  0FB8  1011               	bcf	17,0	;volatile
  4293                           
  4294                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4295  0FB9  0021               	movlb	1	; select bank1
  4296  0FBA  1011               	bcf	17,0	;volatile
  4297                           
  4298                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4299  0FBB  0020               	movlb	0	; select bank0
  4300  0FBC  111C               	bcf	28,2	;volatile
  4301                           
  4302                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4303  0FBD  3087               	movlw	-121
  4304  0FBE  059C               	andwf	28,f	;volatile
  4305                           
  4306                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4307  0FBF  3003               	movlw	3
  4308  0FC0  049C               	iorwf	28,f	;volatile
  4309                           
  4310                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4311  0FC1  307C               	movlw	124
  4312  0FC2  009B               	movwf	27	;volatile
  4313                           
  4314                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4315  0FC3  019A               	clrf	26	;volatile
  4316                           
  4317                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4318  0FC4  1091               	bcf	17,1	;volatile
  4319                           
  4320                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4321  0FC5  0021               	movlb	1	; select bank1
  4322  0FC6  1091               	bcf	17,1	;volatile
  4323                           
  4324                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4325  0FC7  0028               	movlb	8	; select bank8
  4326  0FC8  1117               	bcf	23,2	;volatile
  4327                           
  4328                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4329  0FC9  3087               	movlw	-121
  4330  0FCA  0597               	andwf	23,f	;volatile
  4331                           
  4332                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4333  0FCB  0817               	movf	23,w	;volatile
  4334  0FCC  39FC               	andlw	-4
  4335  0FCD  3801               	iorlw	1
  4336  0FCE  0097               	movwf	23	;volatile
  4337                           
  4338                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4339  0FCF  304F               	movlw	79
  4340  0FD0  0096               	movwf	22	;volatile
  4341                           
  4342                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4343  0FD1  0195               	clrf	21	;volatile
  4344                           
  4345                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4346  0FD2  0020               	movlb	0	; select bank0
  4347  0FD3  1093               	bcf	19,1	;volatile
  4348                           
  4349                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4350  0FD4  0021               	movlb	1	; select bank1
  4351  0FD5  1093               	bcf	19,1	;volatile
  4352                           
  4353                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4354  0FD6  0028               	movlb	8	; select bank8
  4355  0FD7  111E               	bcf	30,2	;volatile
  4356                           
  4357                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4358  0FD8  3087               	movlw	-121
  4359  0FD9  059E               	andwf	30,f	;volatile
  4360                           
  4361                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4362  0FDA  30FC               	movlw	-4
  4363  0FDB  059E               	andwf	30,f	;volatile
  4364                           
  4365                           ;pic16f1827_init.h: 59: PR6 = 124 ;
  4366  0FDC  307C               	movlw	124
  4367  0FDD  009D               	movwf	29	;volatile
  4368                           
  4369                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4370  0FDE  019C               	clrf	28	;volatile
  4371                           
  4372                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4373  0FDF  0020               	movlb	0	; select bank0
  4374  0FE0  1193               	bcf	19,3	;volatile
  4375                           
  4376                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4377  0FE1  0021               	movlb	1	; select bank1
  4378  0FE2  1193               	bcf	19,3	;volatile
  4379                           
  4380                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4381  0FE3  0025               	movlb	5	; select bank5
  4382  0FE4  019E               	clrf	30	;volatile
  4383                           
  4384                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4385  0FE5  30F0               	movlw	-16
  4386  0FE6  0593               	andwf	19,f	;volatile
  4387                           
  4388                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4389  0FE7  30F0               	movlw	-16
  4390  0FE8  059A               	andwf	26,f	;volatile
  4391                           
  4392                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4393  0FE9  30F0               	movlw	-16
  4394  0FEA  0026               	movlb	6	; select bank6
  4395  0FEB  0593               	andwf	19,f	;volatile
  4396                           
  4397                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4398  0FEC  081A               	movf	26,w	;volatile
  4399  0FED  39F0               	andlw	-16
  4400  0FEE  380C               	iorlw	12
  4401  0FEF  009A               	movwf	26	;volatile
  4402                           
  4403                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4404  0FF0  30CF               	movlw	-49
  4405  0FF1  059A               	andwf	26,f	;volatile
  4406                           
  4407                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4408  0FF2  303F               	movlw	-193
  4409  0FF3  0025               	movlb	5	; select bank5
  4410  0FF4  059E               	andwf	30,f	;volatile
  4411                           
  4412                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4413  0FF5  0026               	movlb	6	; select bank6
  4414  0FF6  0198               	clrf	24	;volatile
  4415                           
  4416                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4417  0FF7  0199               	clrf	25	;volatile
  4418                           
  4419                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4420  0FF8  0023               	movlb	3	; select bank3
  4421  0FF9  018C               	clrf	12	;volatile
  4422                           
  4423                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4424  0FFA  018D               	clrf	13	;volatile
  4425                           
  4426                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4427  0FFB  30E0               	movlw	224
  4428  0FFC  0021               	movlb	1	; select bank1
  4429  0FFD  008C               	movwf	12	;volatile
  4430                           
  4431                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4432  0FFE  018D               	clrf	13	;volatile
  4433  0FFF  0008               	return
  4434  1000                     __end_of_initialize:	
  4435                           
  4436                           	psect	text2
  4437  0EC5                     __ptext2:	
  4438 ;; *************** function __parallel_lcd_WriteStringClearing *****************
  4439 ;; Defined at:
  4440 ;;		line 72 in file "src/../../_Common/parallel_LCD.h"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  position        1    wreg     unsigned char 
  4443 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4444 ;;		 -> STR_42(9), STR_41(12), STR_40(6), STR_39(7), 
  4445 ;;		 -> STR_38(4), STR_37(4), STR_36(8), STR_35(7), 
  4446 ;;		 -> STR_34(7), STR_33(10), STR_32(12), STR_31(4), 
  4447 ;;		 -> STR_30(6), STR_29(5), STR_28(11), STR_27(9), 
  4448 ;;		 -> STR_26(5), STR_25(7), STR_24(6), STR_22(10), 
  4449 ;;		 -> STR_21(11), STR_20(11), STR_19(11), STR_18(8), 
  4450 ;;		 -> STR_17(10), STR_16(12), STR_15(9), STR_14(6), 
  4451 ;;		 -> STR_13(6), STR_12(6), STR_11(9), STR_10(6), 
  4452 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(10), 
  4453 ;;		 -> STR_5(13), STR_4(14), STR_3(10), STR_2(11), 
  4454 ;;		 -> STR_1(9), 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  position        1    3[BANK0 ] unsigned char 
  4457 ;;  i               1    4[BANK0 ] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;		None               void
  4460 ;; Registers used:
  4461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4467 ;;      Params:         0       2       0       0       0       0
  4468 ;;      Locals:         0       2       0       0       0       0
  4469 ;;      Temps:          0       1       0       0       0       0
  4470 ;;      Totals:         0       5       0       0       0       0
  4471 ;;Total ram usage:        5 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    2
  4474 ;; This function calls:
  4475 ;;		__private_parallel_lcd_WriteByte
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           
  4482                           ;psect for function __parallel_lcd_WriteStringClearing
  4483  0EC5                     __parallel_lcd_WriteStringClearing:	
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in __parallel_lcd_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  4487                           ;__parallel_lcd_WriteStringClearing@position stored from wreg
  4488  0EC5  0020               	movlb	0	; select bank0
  4489  0EC6  00C3               	movwf	__parallel_lcd_WriteStringClearing@position
  4490                           
  4491                           ;parallel_LCD.h: 73: _private_parallel_lcd_WriteByte( position & 0xF0 , 0 ) ;
  4492  0EC7  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4493  0EC8  0843               	movf	__parallel_lcd_WriteStringClearing@position,w
  4494  0EC9  39F0               	andlw	240
  4495  0ECA  318A  225A  318E   	fcall	__private_parallel_lcd_WriteByte
  4496                           
  4497                           ;parallel_LCD.h: 74: for ( uint08_t i = 0 ; i != 16 ; i++ ) {
  4498  0ECD  0020               	movlb	0	; select bank0
  4499  0ECE  01C4               	clrf	__parallel_lcd_WriteStringClearing@i
  4500  0ECF                     L39:	
  4501  0ECF  3010               	movlw	16
  4502  0ED0  0644               	xorwf	__parallel_lcd_WriteStringClearing@i,w
  4503  0ED1  1903               	btfsc	3,2
  4504  0ED2  0008               	return
  4505                           
  4506                           ;parallel_LCD.h: 75: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4507  0ED3  0843               	movf	__parallel_lcd_WriteStringClearing@position,w
  4508  0ED4  390F               	andlw	15
  4509  0ED5  0244               	subwf	__parallel_lcd_WriteStringClearing@i,w
  4510  0ED6  1C03               	skipc
  4511  0ED7  2EEF               	goto	l3122
  4512  0ED8  0840               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4513  0ED9  0084               	movwf	4
  4514  0EDA  0841               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4515  0EDB  0085               	movwf	5
  4516  0EDC  0012               	moviw fsr0++
  4517  0EDD  1903               	btfsc	3,2
  4518  0EDE  2EEF               	goto	l3122
  4519                           
  4520                           ;parallel_LCD.h: 76: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4521  0EDF  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4522  0EE0  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4523  0EE1  0840               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4524  0EE2  0084               	movwf	4
  4525  0EE3  0841               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4526  0EE4  0085               	movwf	5
  4527  0EE5  0800               	movf	0,w	;code access
  4528  0EE6  318A  225A  318E   	fcall	__private_parallel_lcd_WriteByte
  4529  0EE9  3001               	movlw	1
  4530  0EEA  0020               	movlb	0	; select bank0
  4531  0EEB  07C0               	addwf	__parallel_lcd_WriteStringClearing@stringPtr,f
  4532  0EEC  3000               	movlw	0
  4533  0EED  3DC1               	addwfc	__parallel_lcd_WriteStringClearing@stringPtr+1,f
  4534  0EEE  2EF5               	goto	l3124
  4535  0EEF                     l3122:	
  4536                           
  4537                           ;parallel_LCD.h: 77: else
  4538                           ;parallel_LCD.h: 78: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4539  0EEF  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4540  0EF0  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4541  0EF1  3020               	movlw	32
  4542  0EF2  318A  225A  318E   	fcall	__private_parallel_lcd_WriteByte
  4543  0EF5                     l3124:	
  4544  0EF5  3001               	movlw	1
  4545  0EF6  0020               	movlb	0	; select bank0
  4546  0EF7  00C2               	movwf	??__parallel_lcd_WriteStringClearing
  4547  0EF8  0842               	movf	??__parallel_lcd_WriteStringClearing,w
  4548  0EF9  07C4               	addwf	__parallel_lcd_WriteStringClearing@i,f
  4549  0EFA  2ECF               	goto	L39
  4550  0EFB                     __end_of__parallel_lcd_WriteStringClearing:	
  4551                           
  4552                           	psect	text3
  4553  0A20                     __ptext3:	
  4554 ;; *************** function __parallel_lcd_WriteString *****************
  4555 ;; Defined at:
  4556 ;;		line 63 in file "src/../../_Common/parallel_LCD.h"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  position        1    wreg     unsigned char 
  4559 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  4560 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_42(9), STR_41(12), 
  4561 ;;		 -> STR_40(6), STR_39(7), STR_36(8), STR_35(7), 
  4562 ;;		 -> STR_34(7), STR_27(9), STR_26(5), STR_25(7), 
  4563 ;;		 -> STR_23(7), STR_22(10), 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  position        1    5[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;		None               void
  4568 ;; Registers used:
  4569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4575 ;;      Params:         0       2       0       0       0       0
  4576 ;;      Locals:         0       1       0       0       0       0
  4577 ;;      Temps:          0       1       0       0       0       0
  4578 ;;      Totals:         0       4       0       0       0       0
  4579 ;;Total ram usage:        4 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    2
  4582 ;; This function calls:
  4583 ;;		__private_parallel_lcd_WriteByte
  4584 ;; This function is called by:
  4585 ;;		_main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function __parallel_lcd_WriteString
  4591  0A20                     __parallel_lcd_WriteString:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in __parallel_lcd_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4595                           ;__parallel_lcd_WriteString@position stored from wreg
  4596  0A20  0020               	movlb	0	; select bank0
  4597  0A21  00C5               	movwf	__parallel_lcd_WriteString@position
  4598                           
  4599                           ;parallel_LCD.h: 64: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4600  0A22  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4601  0A23  0845               	movf	__parallel_lcd_WriteString@position,w
  4602  0A24  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4603  0A27                     l3104:	
  4604                           ;parallel_LCD.h: 65: while ( *stringPtr ) {
  4605                           
  4606  0A27  0020               	movlb	0	; select bank0
  4607  0A28  0842               	movf	__parallel_lcd_WriteString@stringPtr,w
  4608  0A29  0084               	movwf	4
  4609  0A2A  0843               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4610  0A2B  0085               	movwf	5
  4611  0A2C  0012               	moviw fsr0++
  4612  0A2D  1903               	btfsc	3,2
  4613  0A2E  0008               	return
  4614                           
  4615                           ;parallel_LCD.h: 66: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4616  0A2F  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4617  0A30  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4618  0A31  0020               	movlb	0	; select bank0
  4619  0A32  0842               	movf	__parallel_lcd_WriteString@stringPtr,w
  4620  0A33  0084               	movwf	4
  4621  0A34  0843               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4622  0A35  0085               	movwf	5
  4623  0A36  0800               	movf	0,w	;code access
  4624  0A37  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4625  0A3A  3001               	movlw	1
  4626  0A3B  0020               	movlb	0	; select bank0
  4627  0A3C  07C2               	addwf	__parallel_lcd_WriteString@stringPtr,f
  4628  0A3D  3000               	movlw	0
  4629  0A3E  3DC3               	addwfc	__parallel_lcd_WriteString@stringPtr+1,f
  4630  0A3F  2A27               	goto	l3104
  4631  0A40                     __end_of__parallel_lcd_WriteString:	
  4632                           
  4633                           	psect	text4
  4634  0ACE                     __ptext4:	
  4635 ;; *************** function __parallel_lcd_WriteCharacter *****************
  4636 ;; Defined at:
  4637 ;;		line 56 in file "src/../../_Common/parallel_LCD.h"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  position        1    wreg     unsigned char 
  4640 ;;  character       1    0[BANK0 ] unsigned char 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;  position        1    1[BANK0 ] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;		None               void
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4652 ;;      Params:         0       1       0       0       0       0
  4653 ;;      Locals:         0       1       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0
  4655 ;;      Totals:         0       2       0       0       0       0
  4656 ;;Total ram usage:        2 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    2
  4659 ;; This function calls:
  4660 ;;		__private_parallel_lcd_WriteByte
  4661 ;; This function is called by:
  4662 ;;		_main
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function __parallel_lcd_WriteCharacter
  4668  0ACE                     __parallel_lcd_WriteCharacter:	
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in __parallel_lcd_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4672                           ;__parallel_lcd_WriteCharacter@position stored from wreg
  4673  0ACE  0020               	movlb	0	; select bank0
  4674  0ACF  00C1               	movwf	__parallel_lcd_WriteCharacter@position
  4675                           
  4676                           ;parallel_LCD.h: 57: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4677  0AD0  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4678  0AD1  0841               	movf	__parallel_lcd_WriteCharacter@position,w
  4679  0AD2  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4680                           
  4681                           ;parallel_LCD.h: 58: _private_parallel_lcd_WriteByte( character , 1 ) ;
  4682  0AD5  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4683  0AD6  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4684  0AD7  0020               	movlb	0	; select bank0
  4685  0AD8  0840               	movf	__parallel_lcd_WriteCharacter@character,w
  4686  0AD9  318A  225A         	fcall	__private_parallel_lcd_WriteByte
  4687  0ADB  0008               	return
  4688  0ADC                     __end_of__parallel_lcd_WriteCharacter:	
  4689                           
  4690                           	psect	text5
  4691  0E9B                     __ptext5:	
  4692 ;; *************** function __parallel_lcd_SetCgram *****************
  4693 ;; Defined at:
  4694 ;;		line 109 in file "src/../../_Common/parallel_LCD.h"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  charCode        1    wreg     unsigned char 
  4697 ;;  bitmap          2    0[BANK0 ] PTR const unsigned char 
  4698 ;;		 -> BITMAP(24), 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  charCode        1    3[BANK0 ] unsigned char 
  4701 ;;  i               1    4[BANK0 ] unsigned char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;		None               void
  4704 ;; Registers used:
  4705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4711 ;;      Params:         0       2       0       0       0       0
  4712 ;;      Locals:         0       2       0       0       0       0
  4713 ;;      Temps:          0       1       0       0       0       0
  4714 ;;      Totals:         0       5       0       0       0       0
  4715 ;;Total ram usage:        5 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    2
  4718 ;; This function calls:
  4719 ;;		__private_parallel_lcd_WriteByte
  4720 ;; This function is called by:
  4721 ;;		_main
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           
  4726                           ;psect for function __parallel_lcd_SetCgram
  4727  0E9B                     __parallel_lcd_SetCgram:	
  4728                           
  4729                           ;incstack = 0
  4730                           ; Regs used in __parallel_lcd_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4731                           ;__parallel_lcd_SetCgram@charCode stored from wreg
  4732  0E9B  0020               	movlb	0	; select bank0
  4733  0E9C  00C3               	movwf	__parallel_lcd_SetCgram@charCode
  4734                           
  4735                           ;parallel_LCD.h: 110: _private_parallel_lcd_WriteByte( ( ( charCode << 3 ) & 0b00111111 
      +                          ) | 0b01000000 , 0 ) ;
  4736  0E9D  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4737  0E9E  0843               	movf	__parallel_lcd_SetCgram@charCode,w
  4738  0E9F  00C2               	movwf	??__parallel_lcd_SetCgram
  4739  0EA0  3002               	movlw	2
  4740  0EA1                     u2385:	
  4741  0EA1  35C2               	lslf	??__parallel_lcd_SetCgram,f
  4742  0EA2  3EFF               	addlw	-1
  4743  0EA3  1D03               	skipz
  4744  0EA4  2EA1               	goto	u2385
  4745  0EA5  3542               	lslf	??__parallel_lcd_SetCgram,w
  4746  0EA6  393F               	andlw	63
  4747  0EA7  3840               	iorlw	64
  4748  0EA8  318A  225A  318E   	fcall	__private_parallel_lcd_WriteByte
  4749                           
  4750                           ;parallel_LCD.h: 111: for ( uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  4751  0EAB  0020               	movlb	0	; select bank0
  4752  0EAC  01C4               	clrf	__parallel_lcd_SetCgram@i
  4753  0EAD                     L40:	
  4754  0EAD  3008               	movlw	8
  4755  0EAE  0644               	xorwf	__parallel_lcd_SetCgram@i,w
  4756  0EAF  1903               	btfsc	3,2
  4757  0EB0  0008               	return
  4758                           
  4759                           ;parallel_LCD.h: 112: _private_parallel_lcd_WriteByte( *bitmap , 1 ) ;
  4760  0EB1  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4761  0EB2  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4762  0EB3  0840               	movf	__parallel_lcd_SetCgram@bitmap,w
  4763  0EB4  0084               	movwf	4
  4764  0EB5  0841               	movf	__parallel_lcd_SetCgram@bitmap+1,w
  4765  0EB6  0085               	movwf	5
  4766  0EB7  0800               	movf	0,w	;code access
  4767  0EB8  318A  225A  318E   	fcall	__private_parallel_lcd_WriteByte
  4768  0EBB  3001               	movlw	1
  4769  0EBC  0020               	movlb	0	; select bank0
  4770  0EBD  00C2               	movwf	??__parallel_lcd_SetCgram
  4771  0EBE  0842               	movf	??__parallel_lcd_SetCgram,w
  4772  0EBF  07C4               	addwf	__parallel_lcd_SetCgram@i,f
  4773  0EC0  3001               	movlw	1
  4774  0EC1  07C0               	addwf	__parallel_lcd_SetCgram@bitmap,f
  4775  0EC2  3000               	movlw	0
  4776  0EC3  3DC1               	addwfc	__parallel_lcd_SetCgram@bitmap+1,f
  4777  0EC4  2EAD               	goto	L40
  4778  0EC5                     __end_of__parallel_lcd_SetCgram:	
  4779                           
  4780                           	psect	text6
  4781  0A84                     __ptext6:	
  4782 ;; *************** function __parallel_lcd_Initialize *****************
  4783 ;; Defined at:
  4784 ;;		line 47 in file "src/../../_Common/parallel_LCD.h"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;		None               void
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0, pclath, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4798 ;;      Params:         0       0       0       0       0       0
  4799 ;;      Locals:         0       0       0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0
  4801 ;;      Totals:         0       0       0       0       0       0
  4802 ;;Total ram usage:        0 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    2
  4805 ;; This function calls:
  4806 ;;		__private_parallel_lcd_WriteByte
  4807 ;; This function is called by:
  4808 ;;		_main
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function __parallel_lcd_Initialize
  4814  0A84                     __parallel_lcd_Initialize:	
  4815                           
  4816                           ;parallel_LCD.h: 48: _private_parallel_lcd_WriteByte( 0x20 | 0x10 | 0x08 | 0x00 , 0 ) ;
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in __parallel_lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4820  0A84  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4821  0A85  3038               	movlw	56
  4822  0A86  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4823                           
  4824                           ;parallel_LCD.h: 49: _private_parallel_lcd_WriteByte( 0x08 | 0x04 , 0 ) ;
  4825  0A89  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4826  0A8A  300C               	movlw	12
  4827  0A8B  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4828                           
  4829                           ;parallel_LCD.h: 50: _private_parallel_lcd_WriteByte( 0x10 | 0x00 | 0x00 , 0 ) ;
  4830  0A8E  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4831  0A8F  3010               	movlw	16
  4832  0A90  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4833                           
  4834                           ;parallel_LCD.h: 51: _private_parallel_lcd_WriteByte( 0x04 | 0x02 | 0x00 , 0 ) ;
  4835  0A93  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4836  0A94  3006               	movlw	6
  4837  0A95  318A  225A         	fcall	__private_parallel_lcd_WriteByte
  4838  0A97  0008               	return
  4839  0A98                     __end_of__parallel_lcd_Initialize:	
  4840                           
  4841                           	psect	text7
  4842  0A40                     __ptext7:	
  4843 ;; *************** function __parallel_lcd_ClearRow *****************
  4844 ;; Defined at:
  4845 ;;		line 93 in file "src/../../_Common/parallel_LCD.h"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  rowSelect       1    wreg     unsigned char 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  rowSelect       1    1[BANK0 ] unsigned char 
  4850 ;;  i               1    2[BANK0 ] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0, pclath, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4860 ;;      Params:         0       0       0       0       0       0
  4861 ;;      Locals:         0       2       0       0       0       0
  4862 ;;      Temps:          0       1       0       0       0       0
  4863 ;;      Totals:         0       3       0       0       0       0
  4864 ;;Total ram usage:        3 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    2
  4867 ;; This function calls:
  4868 ;;		__private_parallel_lcd_WriteByte
  4869 ;; This function is called by:
  4870 ;;		_main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function __parallel_lcd_ClearRow
  4876  0A40                     __parallel_lcd_ClearRow:	
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in __parallel_lcd_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  4880                           ;__parallel_lcd_ClearRow@rowSelect stored from wreg
  4881  0A40  0020               	movlb	0	; select bank0
  4882  0A41  00C1               	movwf	__parallel_lcd_ClearRow@rowSelect
  4883                           
  4884                           ;parallel_LCD.h: 94: _private_parallel_lcd_WriteByte( rowSelect & 0xF0 , 0 ) ;
  4885  0A42  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4886  0A43  0841               	movf	__parallel_lcd_ClearRow@rowSelect,w
  4887  0A44  39F0               	andlw	240
  4888  0A45  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4889                           
  4890                           ;parallel_LCD.h: 95: for ( uint08_t i = 0 ; i != 16 ; i++ )
  4891  0A48  0020               	movlb	0	; select bank0
  4892  0A49  01C2               	clrf	__parallel_lcd_ClearRow@i
  4893  0A4A                     L41:	
  4894  0A4A  3010               	movlw	16
  4895  0A4B  0642               	xorwf	__parallel_lcd_ClearRow@i,w
  4896  0A4C  1903               	btfsc	3,2
  4897  0A4D  0008               	return
  4898                           
  4899                           ;parallel_LCD.h: 96: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4900  0A4E  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4901  0A4F  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4902  0A50  3020               	movlw	32
  4903  0A51  318A  225A  318A   	fcall	__private_parallel_lcd_WriteByte
  4904  0A54  3001               	movlw	1
  4905  0A55  0020               	movlb	0	; select bank0
  4906  0A56  00C0               	movwf	??__parallel_lcd_ClearRow
  4907  0A57  0840               	movf	??__parallel_lcd_ClearRow,w
  4908  0A58  07C2               	addwf	__parallel_lcd_ClearRow@i,f
  4909  0A59  2A4A               	goto	L41
  4910  0A5A                     __end_of__parallel_lcd_ClearRow:	
  4911                           
  4912                           	psect	text8
  4913  0A5A                     __ptext8:	
  4914 ;; *************** function __private_parallel_lcd_WriteByte *****************
  4915 ;; Defined at:
  4916 ;;		line 130 in file "src/../../_Common/parallel_LCD.h"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  data            1    wreg     unsigned char 
  4919 ;;  r               1    4[COMMON] unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  data            1    5[COMMON] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4931 ;;      Params:         1       0       0       0       0       0
  4932 ;;      Locals:         1       0       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0
  4934 ;;      Totals:         2       0       0       0       0       0
  4935 ;;Total ram usage:        2 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		__parallel_lcd_Initialize
  4942 ;;		__parallel_lcd_WriteCharacter
  4943 ;;		__parallel_lcd_WriteString
  4944 ;;		__parallel_lcd_WriteStringClearing
  4945 ;;		__parallel_lcd_ClearRow
  4946 ;;		__parallel_lcd_SetCgram
  4947 ;;		__parallel_lcd_WriteHexNumber
  4948 ;;		__parallel_lcd_ClearPartial
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           
  4953                           ;psect for function __private_parallel_lcd_WriteByte
  4954  0A5A                     __private_parallel_lcd_WriteByte:	
  4955                           
  4956                           ;incstack = 0
  4957                           ; Regs used in __private_parallel_lcd_WriteByte: [wreg+status,2+status,0]
  4958                           ;__private_parallel_lcd_WriteByte@data stored from wreg
  4959  0A5A  00F5               	movwf	__private_parallel_lcd_WriteByte@data
  4960  0A5B                     l144:	
  4961                           ;parallel_LCD.h: 131: {while(!PIR3bits.TMR4IF);} ;
  4962                           
  4963  0A5B  0020               	movlb	0	; select bank0
  4964  0A5C  1C93               	btfss	19,1	;volatile
  4965  0A5D  2A5B               	goto	l144
  4966                           
  4967                           ;parallel_LCD.h: 132: {LATB=data;} ;
  4968  0A5E  0875               	movf	__private_parallel_lcd_WriteByte@data,w
  4969  0A5F  0022               	movlb	2	; select bank2
  4970  0A60  008D               	movwf	13	;volatile
  4971                           
  4972                           ;parallel_LCD.h: 133: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  4973  0A61  0874               	movf	__private_parallel_lcd_WriteByte@r,w
  4974  0A62  1903               	btfsc	3,2
  4975  0A63  2A66               	goto	l147
  4976  0A64  148C               	bsf	12,1	;volatile
  4977  0A65  2A67               	goto	l148
  4978  0A66                     l147:	
  4979  0A66  108C               	bcf	12,1	;volatile
  4980  0A67                     l148:	
  4981                           
  4982                           ;parallel_LCD.h: 134: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  4983  0A67  140C               	bsf	12,0	;volatile
  4984  0A68  0000               	nop
  4985  0A69  0022               	movlb	2	; select bank2
  4986  0A6A  100C               	bcf	12,0	;volatile
  4987                           
  4988                           ;parallel_LCD.h: 135: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  4989  0A6B  0028               	movlb	8	; select bank8
  4990  0A6C  0195               	clrf	21	;volatile
  4991  0A6D  0020               	movlb	0	; select bank0
  4992  0A6E  1093               	bcf	19,1	;volatile
  4993  0A6F  0008               	return
  4994  0A70                     __end_of__private_parallel_lcd_WriteByte:	
  4995                           
  4996                           	psect	text9
  4997  0751                     __ptext9:	
  4998 ;; *************** function __configuration_Save *****************
  4999 ;; Defined at:
  5000 ;;		line 64 in file "src/configuration.h"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  config          1    wreg     PTR struct .
  5003 ;;		 -> configration_(12), 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  config          1    6[BANK0 ] PTR struct .
  5006 ;;		 -> configration_(12), 
  5007 ;;  i               1    5[BANK0 ] unsigned char 
  5008 ;;  romOffset       1    4[BANK0 ] unsigned char 
  5009 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  5010 ;;		 -> configration_(12), 
  5011 ;;  returnCode      1    2[BANK0 ] enum E2827
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  1    wreg      enum E2827
  5014 ;; Registers used:
  5015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5021 ;;      Params:         0       0       0       0       0       0
  5022 ;;      Locals:         0       5       0       0       0       0
  5023 ;;      Temps:          0       2       0       0       0       0
  5024 ;;      Totals:         0       7       0       0       0       0
  5025 ;;Total ram usage:        7 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    2
  5028 ;; This function calls:
  5029 ;;		__configuration_ReadByte
  5030 ;;		__configuration_WriteByte
  5031 ;; This function is called by:
  5032 ;;		_main
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function __configuration_Save
  5038  0751                     __configuration_Save:	
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in __configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5042                           ;__configuration_Save@config stored from wreg
  5043  0751  0020               	movlb	0	; select bank0
  5044  0752  00C6               	movwf	__configuration_Save@config
  5045                           
  5046                           ;configuration.h: 66: uint08_t* ptrConfig = (uint08_t*) config ;
  5047  0753  0846               	movf	__configuration_Save@config,w
  5048  0754  00C0               	movwf	??__configuration_Save
  5049  0755  0840               	movf	??__configuration_Save,w
  5050  0756  00C3               	movwf	__configuration_Save@ptrConfig
  5051                           
  5052                           ;configuration.h: 67: uint08_t romOffset ;
  5053                           ;configuration.h: 68: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5054  0757  01C2               	clrf	__configuration_Save@returnCode
  5055                           
  5056                           ;configuration.h: 71: INTCONbits.GIE=0; ;
  5057  0758  138B               	bcf	11,7	;volatile
  5058                           
  5059                           ;configuration.h: 74: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM )
      +                           ;
  5060  0759  01F4               	clrf	__configuration_ReadByte@memorySelect
  5061  075A  3000               	movlw	0
  5062  075B  318A  22AA  3187   	fcall	__configuration_ReadByte
  5063  075E  0020               	movlb	0	; select bank0
  5064  075F  00C0               	movwf	??__configuration_Save
  5065  0760  0840               	movf	??__configuration_Save,w
  5066  0761  00C4               	movwf	__configuration_Save@romOffset
  5067                           
  5068                           ;configuration.h: 77: config->writeCount = _configuration_ReadByte( romOffset , MEMORY_S
      +                          ELECT_EEPROM ) ;
  5069  0762  01F4               	clrf	__configuration_ReadByte@memorySelect
  5070  0763  0844               	movf	__configuration_Save@romOffset,w
  5071  0764  318A  22AA  3187   	fcall	__configuration_ReadByte
  5072  0767  0020               	movlb	0	; select bank0
  5073  0768  00C0               	movwf	??__configuration_Save
  5074  0769  0846               	movf	__configuration_Save@config,w
  5075  076A  0086               	movwf	6
  5076  076B  0187               	clrf	7
  5077  076C  0840               	movf	??__configuration_Save,w
  5078  076D  0081               	movwf	1
  5079                           
  5080                           ;configuration.h: 80: if ( ++config->writeCount == 1 ) {
  5081  076E  3001               	movlw	1
  5082  076F  00C0               	movwf	??__configuration_Save
  5083  0770  0846               	movf	__configuration_Save@config,w
  5084  0771  0086               	movwf	6
  5085  0772  0187               	clrf	7
  5086  0773  0840               	movf	??__configuration_Save,w
  5087  0774  0781               	addwf	1,f
  5088  0775  0301               	decf	1,w
  5089  0776  1D03               	btfss	3,2
  5090  0777  2F81               	goto	l3174
  5091                           
  5092                           ;configuration.h: 81: romOffset += sizeof(ConfigurationData) ;
  5093  0778  300C               	movlw	12
  5094  0779  00C0               	movwf	??__configuration_Save
  5095  077A  0840               	movf	??__configuration_Save,w
  5096  077B  07C4               	addwf	__configuration_Save@romOffset,f
  5097                           
  5098                           ;configuration.h: 82: config->writeCount = 1 ;
  5099  077C  0846               	movf	__configuration_Save@config,w
  5100  077D  0086               	movwf	6
  5101  077E  0187               	clrf	7
  5102  077F  0181               	clrf	1
  5103  0780  0A81               	incf	1,f
  5104  0781                     l3174:	
  5105                           
  5106                           ;configuration.h: 83: }
  5107                           ;configuration.h: 85: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5108  0781  30F4               	movlw	244
  5109  0782  0244               	subwf	__configuration_Save@romOffset,w
  5110  0783  1C03               	skipc
  5111  0784  2F87               	goto	l153
  5112                           
  5113                           ;configuration.h: 86: romOffset = 1 ;
  5114  0785  01C4               	clrf	__configuration_Save@romOffset
  5115  0786  0AC4               	incf	__configuration_Save@romOffset,f
  5116  0787                     l153:	
  5117                           
  5118                           ;configuration.h: 89: EECON1bits.WREN=1; ;
  5119  0787  0023               	movlb	3	; select bank3
  5120  0788  1515               	bsf	21,2	;volsfr
  5121                           
  5122                           ;configuration.h: 91: config->checkSum = 0x00 ;
  5123  0789  0020               	movlb	0	; select bank0
  5124  078A  0846               	movf	__configuration_Save@config,w
  5125  078B  3E0B               	addlw	11
  5126  078C  0086               	movwf	6
  5127  078D  0187               	clrf	7
  5128  078E  0181               	clrf	1
  5129                           
  5130                           ;configuration.h: 94: for ( uint08_t i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5131  078F  01C5               	clrf	__configuration_Save@i
  5132  0790  2F96               	goto	L42
  5133  0791                     l3194:	
  5134                           ;configuration.h: 99: break ;
  5135                           
  5136  0791  3001               	movlw	1
  5137  0792  0020               	movlb	0	; select bank0
  5138  0793  00C0               	movwf	??__configuration_Save
  5139  0794  0840               	movf	??__configuration_Save,w
  5140  0795  07C5               	addwf	__configuration_Save@i,f
  5141  0796                     L42:	
  5142  0796  300C               	movlw	12
  5143  0797  0645               	xorwf	__configuration_Save@i,w
  5144  0798  1903               	btfsc	3,2
  5145  0799  2FC0               	goto	l3196
  5146                           
  5147                           ;configuration.h: 95: _configuration_WriteByte( romOffset + i , ptrConfig[i] ) ;
  5148  079A  0845               	movf	__configuration_Save@i,w
  5149  079B  0743               	addwf	__configuration_Save@ptrConfig,w
  5150  079C  00C0               	movwf	??__configuration_Save
  5151  079D  0840               	movf	??__configuration_Save,w
  5152  079E  0086               	movwf	6
  5153  079F  0187               	clrf	7
  5154  07A0  0801               	movf	1,w
  5155  07A1  00C1               	movwf	??__configuration_Save+1
  5156  07A2  0841               	movf	??__configuration_Save+1,w
  5157  07A3  00F4               	movwf	__configuration_WriteByte@data
  5158  07A4  0844               	movf	__configuration_Save@romOffset,w
  5159  07A5  0745               	addwf	__configuration_Save@i,w
  5160  07A6  318A  2298  3187   	fcall	__configuration_WriteByte
  5161                           
  5162                           ;configuration.h: 96: config->checkSum ^= ptrConfig[i] ;
  5163  07A9  0020               	movlb	0	; select bank0
  5164  07AA  0845               	movf	__configuration_Save@i,w
  5165  07AB  0743               	addwf	__configuration_Save@ptrConfig,w
  5166  07AC  00C0               	movwf	??__configuration_Save
  5167  07AD  0840               	movf	??__configuration_Save,w
  5168  07AE  0086               	movwf	6
  5169  07AF  0187               	clrf	7
  5170  07B0  0801               	movf	1,w
  5171  07B1  00C1               	movwf	??__configuration_Save+1
  5172  07B2  0846               	movf	__configuration_Save@config,w
  5173  07B3  3E0B               	addlw	11
  5174  07B4  0086               	movwf	6
  5175  07B5  0187               	clrf	7
  5176  07B6  0841               	movf	??__configuration_Save+1,w
  5177  07B7  0681               	xorwf	1,f
  5178                           
  5179                           ;configuration.h: 97: if ( EECON1bits.WRERR ) {
  5180  07B8  0023               	movlb	3	; select bank3
  5181  07B9  1D95               	btfss	21,3	;volsfr
  5182  07BA  2F91               	goto	l3194
  5183                           
  5184                           ;configuration.h: 98: returnCode = RETURN_CODE_WRITE_ERROR ;
  5185  07BB  3010               	movlw	16
  5186  07BC  0020               	movlb	0	; select bank0
  5187  07BD  00C0               	movwf	??__configuration_Save
  5188  07BE  0840               	movf	??__configuration_Save,w
  5189  07BF  00C2               	movwf	__configuration_Save@returnCode
  5190  07C0                     l3196:	
  5191                           
  5192                           ;configuration.h: 100: }
  5193                           ;configuration.h: 101: }
  5194                           ;configuration.h: 104: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5195  07C0  0846               	movf	__configuration_Save@config,w
  5196  07C1  0086               	movwf	6
  5197  07C2  0187               	clrf	7
  5198  07C3  0301               	decf	1,w
  5199  07C4  1D03               	btfss	3,2
  5200  07C5  2FDA               	goto	l3206
  5201  07C6  0023               	movlb	3	; select bank3
  5202  07C7  1995               	btfsc	21,3	;volsfr
  5203  07C8  2FDA               	goto	l3206
  5204                           
  5205                           ;configuration.h: 105: _configuration_WriteByte( 0x00 , romOffset ) ;
  5206  07C9  0020               	movlb	0	; select bank0
  5207  07CA  0844               	movf	__configuration_Save@romOffset,w
  5208  07CB  00C0               	movwf	??__configuration_Save
  5209  07CC  0840               	movf	??__configuration_Save,w
  5210  07CD  00F4               	movwf	__configuration_WriteByte@data
  5211  07CE  3000               	movlw	0
  5212  07CF  318A  2298  3187   	fcall	__configuration_WriteByte
  5213                           
  5214                           ;configuration.h: 106: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5215  07D2  0023               	movlb	3	; select bank3
  5216  07D3  1D95               	btfss	21,3	;volsfr
  5217  07D4  2FDA               	goto	l3206
  5218  07D5  3010               	movlw	16
  5219  07D6  0020               	movlb	0	; select bank0
  5220  07D7  00C0               	movwf	??__configuration_Save
  5221  07D8  0840               	movf	??__configuration_Save,w
  5222  07D9  00C2               	movwf	__configuration_Save@returnCode
  5223  07DA                     l3206:	
  5224                           
  5225                           ;configuration.h: 107: }
  5226                           ;configuration.h: 110: EECON1bits.WREN=0; ;
  5227  07DA  0023               	movlb	3	; select bank3
  5228  07DB  1115               	bcf	21,2	;volsfr
  5229                           
  5230                           ;configuration.h: 113: INTCONbits.GIE=1; ;
  5231  07DC  178B               	bsf	11,7	;volatile
  5232                           
  5233                           ;configuration.h: 115: return RETURN_CODE_NOERROR ;
  5234  07DD  3000               	movlw	0
  5235  07DE  0008               	return
  5236  07DF                     __end_of__configuration_Save:	
  5237                           
  5238                           	psect	text10
  5239  0A98                     __ptext10:	
  5240 ;; *************** function __configuration_WriteByte *****************
  5241 ;; Defined at:
  5242 ;;		line 160 in file "src/configuration.h"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  address         1    wreg     unsigned char 
  5245 ;;  data            1    4[COMMON] unsigned char 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  address         1    5[COMMON] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;		None               void
  5250 ;; Registers used:
  5251 ;;		wreg, status,2
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5257 ;;      Params:         1       0       0       0       0       0
  5258 ;;      Locals:         1       0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0
  5260 ;;      Totals:         2       0       0       0       0       0
  5261 ;;Total ram usage:        2 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    1
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		__configuration_Save
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function __configuration_WriteByte
  5273  0A98                     __configuration_WriteByte:	
  5274                           
  5275                           ;incstack = 0
  5276                           ; Regs used in __configuration_WriteByte: [wreg+status,2]
  5277                           ;__configuration_WriteByte@address stored from wreg
  5278  0A98  00F5               	movwf	__configuration_WriteByte@address
  5279                           
  5280                           ;configuration.h: 161: EEADRH=0x00;EEADRL=(address); ;
  5281  0A99  0023               	movlb	3	; select bank3
  5282  0A9A  0192               	clrf	18	;volatile
  5283  0A9B  0875               	movf	__configuration_WriteByte@address,w
  5284  0A9C  0091               	movwf	17	;volatile
  5285                           
  5286                           ;configuration.h: 162: EEDATH=0x00;EEDATL=(data); ;
  5287  0A9D  0194               	clrf	20	;volatile
  5288  0A9E  0874               	movf	__configuration_WriteByte@data,w
  5289  0A9F  0093               	movwf	19	;volatile
  5290                           
  5291                           ;configuration.h: 163: EECON2=0x55;EECON2=0xAA; ;
  5292  0AA0  3055               	movlw	85
  5293  0AA1  0096               	movwf	22	;volsfr
  5294  0AA2  30AA               	movlw	170
  5295  0AA3  0096               	movwf	22	;volsfr
  5296                           
  5297                           ;configuration.h: 164: EECON1bits.WR=1; ;
  5298  0AA4  1495               	bsf	21,1	;volsfr
  5299  0AA5                     l172:	
  5300                           ;configuration.h: 165: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5301                           
  5302  0AA5  0020               	movlb	0	; select bank0
  5303  0AA6  1E12               	btfss	18,4	;volatile
  5304  0AA7  2AA5               	goto	l172
  5305  0AA8  1212               	bcf	18,4	;volatile
  5306  0AA9  0008               	return
  5307  0AAA                     __end_of__configuration_WriteByte:	
  5308                           
  5309                           	psect	text11
  5310  0F47                     __ptext11:	
  5311 ;; *************** function __configuration_Load *****************
  5312 ;; Defined at:
  5313 ;;		line 121 in file "src/configuration.h"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  config          1    wreg     PTR struct .
  5316 ;;		 -> configration_(12), 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  config          1    4[BANK0 ] PTR struct .
  5319 ;;		 -> configration_(12), 
  5320 ;;  i               1    5[BANK0 ] unsigned char 
  5321 ;;  romOffset       1    3[BANK0 ] unsigned char 
  5322 ;;  ptrConfig       1    2[BANK0 ] PTR unsigned char 
  5323 ;;		 -> configration_(12), 
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      enum E2827
  5326 ;; Registers used:
  5327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5333 ;;      Params:         0       0       0       0       0       0
  5334 ;;      Locals:         0       4       0       0       0       0
  5335 ;;      Temps:          0       2       0       0       0       0
  5336 ;;      Totals:         0       6       0       0       0       0
  5337 ;;Total ram usage:        6 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    2
  5340 ;; This function calls:
  5341 ;;		__configuration_ReadByte
  5342 ;; This function is called by:
  5343 ;;		_main
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function __configuration_Load
  5349  0F47                     __configuration_Load:	
  5350                           
  5351                           ;incstack = 0
  5352                           ; Regs used in __configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5353                           ;__configuration_Load@config stored from wreg
  5354  0F47  0020               	movlb	0	; select bank0
  5355  0F48  00C4               	movwf	__configuration_Load@config
  5356                           
  5357                           ;configuration.h: 123: uint08_t* ptrConfig = (uint08_t*) config ;
  5358  0F49  0844               	movf	__configuration_Load@config,w
  5359  0F4A  00C0               	movwf	??__configuration_Load
  5360  0F4B  0840               	movf	??__configuration_Load,w
  5361  0F4C  00C2               	movwf	__configuration_Load@ptrConfig
  5362                           
  5363                           ;configuration.h: 124: uint08_t romOffset ;
  5364                           ;configuration.h: 127: INTCONbits.GIE=0; ;
  5365  0F4D  138B               	bcf	11,7	;volatile
  5366                           
  5367                           ;configuration.h: 130: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM 
      +                          ) ;
  5368  0F4E  01F4               	clrf	__configuration_ReadByte@memorySelect
  5369  0F4F  3000               	movlw	0
  5370  0F50  318A  22AA  318F   	fcall	__configuration_ReadByte
  5371  0F53  0020               	movlb	0	; select bank0
  5372  0F54  00C0               	movwf	??__configuration_Load
  5373  0F55  0840               	movf	??__configuration_Load,w
  5374  0F56  00C3               	movwf	__configuration_Load@romOffset
  5375                           
  5376                           ;configuration.h: 133: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) ) return 
      +                          RETURN_CODE_INVALID_OFFSET ;
  5377  0F57  30F4               	movlw	244
  5378  0F58  0243               	subwf	__configuration_Load@romOffset,w
  5379  0F59  1C03               	skipc
  5380  0F5A  2F5D               	goto	l3224
  5381  0F5B  3030               	movlw	48
  5382  0F5C  0008               	return
  5383  0F5D                     l3224:	
  5384                           
  5385                           ;configuration.h: 135: config->checkSum = 0x00 ;
  5386  0F5D  0844               	movf	__configuration_Load@config,w
  5387  0F5E  3E0B               	addlw	11
  5388  0F5F  0086               	movwf	6
  5389  0F60  0187               	clrf	7
  5390  0F61  0181               	clrf	1
  5391                           
  5392                           ;configuration.h: 138: for ( uint08_t i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5393  0F62  01C5               	clrf	__configuration_Load@i
  5394  0F63  300C               	movlw	12
  5395  0F64  0645               	xorwf	__configuration_Load@i,w
  5396  0F65  1903               	btfsc	3,2
  5397  0F66  2F8D               	goto	l165
  5398  0F67                     l3232:	
  5399                           
  5400                           ;configuration.h: 139: ptrConfig[i] = _configuration_ReadByte( romOffset + i , MEMORY_SE
      +                          LECT_EEPROM ) ;
  5401  0F67  01F4               	clrf	__configuration_ReadByte@memorySelect
  5402  0F68  0843               	movf	__configuration_Load@romOffset,w
  5403  0F69  0745               	addwf	__configuration_Load@i,w
  5404  0F6A  318A  22AA  318F   	fcall	__configuration_ReadByte
  5405  0F6D  0020               	movlb	0	; select bank0
  5406  0F6E  00C0               	movwf	??__configuration_Load
  5407  0F6F  0845               	movf	__configuration_Load@i,w
  5408  0F70  0742               	addwf	__configuration_Load@ptrConfig,w
  5409  0F71  00C1               	movwf	??__configuration_Load+1
  5410  0F72  0841               	movf	??__configuration_Load+1,w
  5411  0F73  0086               	movwf	6
  5412  0F74  0187               	clrf	7
  5413  0F75  0840               	movf	??__configuration_Load,w
  5414  0F76  0081               	movwf	1
  5415                           
  5416                           ;configuration.h: 140: config->checkSum ^= ptrConfig[i] ;
  5417  0F77  0845               	movf	__configuration_Load@i,w
  5418  0F78  0742               	addwf	__configuration_Load@ptrConfig,w
  5419  0F79  00C0               	movwf	??__configuration_Load
  5420  0F7A  0840               	movf	??__configuration_Load,w
  5421  0F7B  0086               	movwf	6
  5422  0F7C  0187               	clrf	7
  5423  0F7D  0801               	movf	1,w
  5424  0F7E  00C1               	movwf	??__configuration_Load+1
  5425  0F7F  0844               	movf	__configuration_Load@config,w
  5426  0F80  3E0B               	addlw	11
  5427  0F81  0086               	movwf	6
  5428  0F82  0187               	clrf	7
  5429  0F83  0841               	movf	??__configuration_Load+1,w
  5430  0F84  0681               	xorwf	1,f
  5431  0F85  3001               	movlw	1
  5432  0F86  00C0               	movwf	??__configuration_Load
  5433  0F87  0840               	movf	??__configuration_Load,w
  5434  0F88  07C5               	addwf	__configuration_Load@i,f
  5435  0F89  300C               	movlw	12
  5436  0F8A  0645               	xorwf	__configuration_Load@i,w
  5437  0F8B  1D03               	btfss	3,2
  5438  0F8C  2F67               	goto	l3232
  5439  0F8D                     l165:	
  5440                           
  5441                           ;configuration.h: 141: }
  5442                           ;configuration.h: 144: INTCONbits.GIE=1; ;
  5443  0F8D  178B               	bsf	11,7	;volatile
  5444                           
  5445                           ;configuration.h: 147: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5446  0F8E  0844               	movf	__configuration_Load@config,w
  5447  0F8F  3E0B               	addlw	11
  5448  0F90  0086               	movwf	6
  5449  0F91  0187               	clrf	7
  5450  0F92  0801               	movf	1,w
  5451  0F93  1903               	btfsc	3,2
  5452  0F94  2F97               	goto	l3246
  5453  0F95  3020               	movlw	32
  5454  0F96  0008               	return
  5455  0F97                     l3246:	
  5456                           
  5457                           ;configuration.h: 149: return RETURN_CODE_NOERROR ;
  5458  0F97  3000               	movlw	0
  5459  0F98  0008               	return
  5460  0F99                     __end_of__configuration_Load:	
  5461                           
  5462                           	psect	text12
  5463  0AE8                     __ptext12:	
  5464 ;; *************** function __configuration_GetRomOffset *****************
  5465 ;; Defined at:
  5466 ;;		line 154 in file "src/configuration.h"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      unsigned char 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5480 ;;      Params:         0       0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0
  5483 ;;      Totals:         0       0       0       0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    2
  5487 ;; This function calls:
  5488 ;;		__configuration_ReadByte
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function __configuration_GetRomOffset
  5496  0AE8                     __configuration_GetRomOffset:	
  5497                           
  5498                           ;configuration.h: 155: return _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM ) ;
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in __configuration_GetRomOffset: [wreg+status,2+status,0+pclath+cstack]
  5502  0AE8  01F4               	clrf	__configuration_ReadByte@memorySelect
  5503  0AE9  3000               	movlw	0
  5504  0AEA  318A  22AA         	fcall	__configuration_ReadByte
  5505  0AEC  0008               	return
  5506  0AED                     __end_of__configuration_GetRomOffset:	
  5507                           
  5508                           	psect	text13
  5509  0AAA                     __ptext13:	
  5510 ;; *************** function __configuration_ReadByte *****************
  5511 ;; Defined at:
  5512 ;;		line 170 in file "src/configuration.h"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  address         1    wreg     unsigned char 
  5515 ;;  memorySelect    1    4[COMMON] enum E2833
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  address         1    5[COMMON] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      unsigned char 
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5527 ;;      Params:         1       0       0       0       0       0
  5528 ;;      Locals:         1       0       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0
  5530 ;;      Totals:         2       0       0       0       0       0
  5531 ;;Total ram usage:        2 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		__configuration_Save
  5538 ;;		__configuration_Load
  5539 ;;		__configuration_GetRomOffset
  5540 ;;		_main
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           
  5545                           ;psect for function __configuration_ReadByte
  5546  0AAA                     __configuration_ReadByte:	
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in __configuration_ReadByte: [wreg+status,2+status,0]
  5550                           ;__configuration_ReadByte@address stored from wreg
  5551  0AAA  00F5               	movwf	__configuration_ReadByte@address
  5552                           
  5553                           ;configuration.h: 171: EEADRH=0x00;EEADRL=(address); ;
  5554  0AAB  0023               	movlb	3	; select bank3
  5555  0AAC  0192               	clrf	18	;volatile
  5556  0AAD  0875               	movf	__configuration_ReadByte@address,w
  5557  0AAE  0091               	movwf	17	;volatile
  5558                           
  5559                           ;configuration.h: 172: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5560  0AAF  1395               	bcf	21,7	;volsfr
  5561  0AB0  0874               	movf	__configuration_ReadByte@memorySelect,w
  5562  0AB1  1903               	btfsc	3,2
  5563  0AB2  2AB5               	goto	l178
  5564  0AB3  1715               	bsf	21,6	;volsfr
  5565  0AB4  2AB6               	goto	l179
  5566  0AB5                     l178:	
  5567  0AB5  1315               	bcf	21,6	;volsfr
  5568  0AB6                     l179:	
  5569                           
  5570                           ;configuration.h: 173: EECON1bits.RD=1; ;
  5571  0AB6  1415               	bsf	21,0	;volsfr
  5572                           
  5573                           ;configuration.h: 174: __nop() ;
  5574  0AB7  0000               	nop
  5575                           
  5576                           ;configuration.h: 175: __nop() ;
  5577  0AB8  0000               	nop
  5578                           
  5579                           ;configuration.h: 176: return EEDATL ;
  5580  0AB9  0023               	movlb	3	; select bank3
  5581  0ABA  0813               	movf	19,w	;volatile
  5582  0ABB  0008               	return
  5583  0ABC                     __end_of__configuration_ReadByte:	
  5584                           
  5585                           	psect	text14
  5586  0ABC                     __ptext14:	
  5587 ;; *************** function ___bmul *****************
  5588 ;; Defined at:
  5589 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  multiplier      1    wreg     unsigned char 
  5592 ;;  multiplicand    1    4[COMMON] unsigned char 
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  multiplier      1    1[BANK0 ] unsigned char 
  5595 ;;  product         1    0[BANK0 ] unsigned char 
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      unsigned char 
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5605 ;;      Params:         1       0       0       0       0       0
  5606 ;;      Locals:         0       2       0       0       0       0
  5607 ;;      Temps:          1       0       0       0       0       0
  5608 ;;      Totals:         2       2       0       0       0       0
  5609 ;;Total ram usage:        4 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    1
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_main
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function ___bmul
  5621  0ABC                     ___bmul:	
  5622                           
  5623                           ;incstack = 0
  5624                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5625                           ;___bmul@multiplier stored from wreg
  5626  0ABC  0020               	movlb	0	; select bank0
  5627  0ABD  00C1               	movwf	___bmul@multiplier
  5628  0ABE  01C0               	clrf	___bmul@product
  5629  0ABF                     l3252:	
  5630  0ABF  1C41               	btfss	___bmul@multiplier,0
  5631  0AC0  2AC5               	goto	l3256
  5632  0AC1  0874               	movf	___bmul@multiplicand,w
  5633  0AC2  00F5               	movwf	??___bmul
  5634  0AC3  0875               	movf	??___bmul,w
  5635  0AC4  07C0               	addwf	___bmul@product,f
  5636  0AC5                     l3256:	
  5637  0AC5  1003               	clrc
  5638  0AC6  0DF4               	rlf	___bmul@multiplicand,f
  5639  0AC7  1003               	clrc
  5640  0AC8  0CC1               	rrf	___bmul@multiplier,f
  5641  0AC9  0841               	movf	___bmul@multiplier,w
  5642  0ACA  1D03               	btfss	3,2
  5643  0ACB  2ABF               	goto	l3252
  5644  0ACC  0840               	movf	___bmul@product,w
  5645  0ACD  0008               	return
  5646  0ACE                     __end_of___bmul:	
  5647                           
  5648                           	psect	intentry
  5649  0004                     __pintentry:	
  5650 ;; *************** function _isr *****************
  5651 ;; Defined at:
  5652 ;;		line 921 in file "src/main.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;		None
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;		None               void
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5666 ;;      Params:         0       0       0       0       0       0
  5667 ;;      Locals:         0       0       0       0       0       0
  5668 ;;      Temps:          4       0       0       0       0       0
  5669 ;;      Totals:         4       0       0       0       0       0
  5670 ;;Total ram usage:        4 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		Interrupt level 1
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679  0004                     _isr:	
  5680                           
  5681                           ;incstack = 0
  5682                           ; Regs used in _isr: [wreg+status,2+status,0]
  5683  0004  3180               	pagesel	$
  5684  0005  0020               	movlb	0	; select bank0
  5685  0006  087F               	movf	127,w
  5686  0007  00F3               	movwf	??_isr+3
  5687                           
  5688                           ;main.c: 922: if( !PIR3bits.TMR6IF ) return ;
  5689  0008  1D93               	btfss	19,3	;volatile
  5690  0009  28A4               	goto	i1l458
  5691                           
  5692                           ;main.c: 923: PIR3bits.TMR6IF = 0 ;
  5693  000A  1193               	bcf	19,3	;volatile
  5694                           
  5695                           ;main.c: 925: static uint16_t eventPrescaler = 0 ;
  5696                           ;main.c: 928: tempoCounter_ += configration_.tempo ;
  5697  000B  0821               	movf	_configration_+1,w
  5698  000C  00F0               	movwf	??_isr
  5699  000D  0822               	movf	_configration_+2,w
  5700  000E  00F1               	movwf	??_isr+1
  5701  000F  01F2               	clrf	??_isr+2
  5702  0010  0870               	movf	??_isr,w
  5703  0011  07E1               	addwf	_tempoCounter_,f
  5704  0012  0871               	movf	??_isr+1,w
  5705  0013  3DE2               	addwfc	_tempoCounter_+1,f
  5706  0014  0872               	movf	??_isr+2,w
  5707  0015  3DE3               	addwfc	_tempoCounter_+2,f
  5708                           
  5709                           ;main.c: 931: if( tempoCounter_ >= ( 32000000UL * 3 / 25 ) ) {
  5710  0016  303A               	movlw	58
  5711  0017  0263               	subwf	_tempoCounter_+2,w
  5712  0018  1D03               	skipz
  5713  0019  2820               	goto	u211_25
  5714  001A  3098               	movlw	152
  5715  001B  0262               	subwf	_tempoCounter_+1,w
  5716  001C  1D03               	skipz
  5717  001D  2820               	goto	u211_25
  5718  001E  3000               	movlw	0
  5719  001F  0261               	subwf	_tempoCounter_,w
  5720  0020                     u211_25:	
  5721  0020  1C03               	skipc
  5722  0021  2844               	goto	i1l2924
  5723                           
  5724                           ;main.c: 932: tempoCounter_ -= ( 32000000UL * 3 / 25 ) ;
  5725  0022  3000               	movlw	0
  5726  0023  00F0               	movwf	??_isr
  5727  0024  3098               	movlw	152
  5728  0025  00F1               	movwf	??_isr+1
  5729  0026  303A               	movlw	58
  5730  0027  00F2               	movwf	??_isr+2
  5731  0028  0870               	movf	??_isr,w
  5732  0029  02E1               	subwf	_tempoCounter_,f
  5733  002A  0871               	movf	??_isr+1,w
  5734  002B  3BE2               	subwfb	_tempoCounter_+1,f
  5735  002C  0872               	movf	??_isr+2,w
  5736  002D  3BE3               	subwfb	_tempoCounter_+2,f
  5737                           
  5738                           ;main.c: 933: if( ++beatCounter_ >= ( configration_.beatCount << 1 ) )
  5739  002E  0823               	movf	_configration_+3,w
  5740  002F  00F0               	movwf	??_isr
  5741  0030  01F1               	clrf	??_isr+1
  5742  0031  35F0               	lslf	??_isr,f
  5743  0032  0DF1               	rlf	??_isr+1,f
  5744  0033  3001               	movlw	1
  5745  0034  00F2               	movwf	??_isr+2
  5746  0035  0872               	movf	??_isr+2,w
  5747  0036  07E6               	addwf	_beatCounter_,f
  5748  0037  0871               	movf	??_isr+1,w
  5749  0038  3A80               	xorlw	128
  5750  0039  3C80               	sublw	128
  5751  003A  1D03               	skipz
  5752  003B  283E               	goto	u212_25
  5753  003C  0870               	movf	??_isr,w
  5754  003D  0266               	subwf	_beatCounter_,w
  5755  003E                     u212_25:	
  5756  003E  1C03               	skipc
  5757  003F  2842               	goto	i1l2922
  5758                           
  5759                           ;main.c: 934: beatCounter_ = 0 ;
  5760  0040  0020               	movlb	0	; select bank0
  5761  0041  01E6               	clrf	_beatCounter_
  5762  0042                     i1l2922:	
  5763                           
  5764                           ;main.c: 936: outputEvent_.soundOnClick = 1 ;
  5765  0042  0020               	movlb	0	; select bank0
  5766  0043  15EB               	bsf	_outputEvent_,3
  5767  0044                     i1l2924:	
  5768                           
  5769                           ;main.c: 937: }
  5770                           ;main.c: 940: if( !( eventPrescaler & 0x3F ) ) {
  5771  0044  303F               	movlw	63
  5772  0045  0578               	andwf	isr@eventPrescaler,w
  5773  0046  00F0               	movwf	??_isr
  5774  0047  3000               	movlw	0
  5775  0048  0579               	andwf	isr@eventPrescaler+1,w
  5776  0049  00F1               	movwf	??_isr+1
  5777  004A  0870               	movf	??_isr,w
  5778  004B  0471               	iorwf	??_isr+1,w
  5779  004C  1D03               	btfss	3,2
  5780  004D  2861               	goto	i1l2940
  5781                           
  5782                           ;main.c: 941: if( soundDurationCount_.click && !--soundDurationCount_.click && !soundDur
      +                          ationCount_.key )
  5783  004E  0864               	movf	_soundDurationCount_,w
  5784  004F  1903               	btfsc	3,2
  5785  0050  2859               	goto	i1l2934
  5786  0051  3001               	movlw	1
  5787  0052  02E4               	subwf	_soundDurationCount_,f
  5788  0053  1D03               	btfss	3,2
  5789  0054  2859               	goto	i1l2934
  5790  0055  0865               	movf	_soundDurationCount_+1,w
  5791  0056  1D03               	btfss	3,2
  5792  0057  2859               	goto	i1l2934
  5793                           
  5794                           ;main.c: 942: outputEvent_.soundOff = 1 ;
  5795  0058  16EB               	bsf	_outputEvent_,5
  5796  0059                     i1l2934:	
  5797                           
  5798                           ;main.c: 943: if( soundDurationCount_.key && ! --soundDurationCount_.key )
  5799  0059  0865               	movf	_soundDurationCount_+1,w
  5800  005A  1903               	btfsc	3,2
  5801  005B  2861               	goto	i1l2940
  5802  005C  3001               	movlw	1
  5803  005D  02E5               	subwf	_soundDurationCount_+1,f
  5804  005E  1D03               	btfss	3,2
  5805  005F  2861               	goto	i1l2940
  5806                           
  5807                           ;main.c: 944: outputEvent_.soundOff = 1 ;
  5808  0060  16EB               	bsf	_outputEvent_,5
  5809  0061                     i1l2940:	
  5810                           
  5811                           ;main.c: 945: }
  5812                           ;main.c: 948: if( ++eventPrescaler != 640 ) return ;
  5813  0061  3001               	movlw	1
  5814  0062  07F8               	addwf	isr@eventPrescaler,f
  5815  0063  3000               	movlw	0
  5816  0064  3DF9               	addwfc	isr@eventPrescaler+1,f
  5817  0065  3080               	movlw	128
  5818  0066  0678               	xorwf	isr@eventPrescaler,w
  5819  0067  3002               	movlw	2
  5820  0068  1903               	skipnz
  5821  0069  0679               	xorwf	isr@eventPrescaler+1,w
  5822  006A  1D03               	btfss	3,2
  5823  006B  28A4               	goto	i1l458
  5824                           
  5825                           ;main.c: 949: eventPrescaler = 0 ;
  5826  006C  01F8               	clrf	isr@eventPrescaler
  5827  006D  01F9               	clrf	isr@eventPrescaler+1
  5828                           
  5829                           ;main.c: 952: if( stateReturnCounter_ &&! --stateReturnCounter_ ) {
  5830  006E  086D               	movf	_stateReturnCounter_,w
  5831  006F  1903               	btfsc	3,2
  5832  0070  2879               	goto	i1l2952
  5833  0071  3001               	movlw	1
  5834  0072  02ED               	subwf	_stateReturnCounter_,f
  5835  0073  1D03               	btfss	3,2
  5836  0074  2879               	goto	i1l2952
  5837                           
  5838                           ;main.c: 953: outputEvent_.changeState = 1 ;
  5839  0075  146B               	bsf	_outputEvent_,0
  5840                           
  5841                           ;main.c: 954: outputEvent_.resetMetronome = 1 ;
  5842  0076  176B               	bsf	_outputEvent_,6
  5843                           
  5844                           ;main.c: 955: machineState_ = STATE_METRONOME ;
  5845  0077  01EA               	clrf	_machineState_
  5846  0078  0AEA               	incf	_machineState_,f
  5847  0079                     i1l2952:	
  5848                           
  5849                           ;main.c: 956: }
  5850                           ;main.c: 959: portAState_.byte = (~PORTA&0xE0) ;
  5851  0079  090C               	comf	12,w	;volatile
  5852  007A  39E0               	andlw	224
  5853  007B  00F0               	movwf	??_isr
  5854  007C  0870               	movf	??_isr,w
  5855  007D  00EC               	movwf	_portAState_
  5856                           
  5857                           ;main.c: 961: if( portAState_.keyUp && !portAState_.keyDown ) {
  5858  007E  1BEC               	btfsc	_portAState_,7
  5859  007F  1B6C               	btfsc	_portAState_,6
  5860  0080  288F               	goto	i1l2964
  5861                           
  5862                           ;main.c: 962: if( ++keyHoldCount_.Up == 0x40 ) {
  5863  0081  3001               	movlw	1
  5864  0082  00F0               	movwf	??_isr
  5865  0083  0870               	movf	??_isr,w
  5866  0084  07F6               	addwf	_keyHoldCount_,f
  5867  0085  3040               	movlw	64
  5868  0086  0676               	xorwf	_keyHoldCount_,w
  5869  0087  1D03               	btfss	3,2
  5870  0088  2890               	goto	i1l2966
  5871                           
  5872                           ;main.c: 963: keyHoldCount_.Up = 0x3C ;
  5873  0089  303C               	movlw	60
  5874  008A  00F0               	movwf	??_isr
  5875  008B  0870               	movf	??_isr,w
  5876  008C  00F6               	movwf	_keyHoldCount_
  5877                           
  5878                           ;main.c: 964: inputEvent_.keyPressHeldUp = 1 ;
  5879  008D  1668               	bsf	_inputEvent_,4
  5880                           
  5881                           ;main.c: 965: }
  5882                           ;main.c: 966: }
  5883  008E  2890               	goto	i1l2966
  5884  008F                     i1l2964:	
  5885                           
  5886                           ;main.c: 967: else
  5887                           ;main.c: 968: keyHoldCount_.Up = 0 ;
  5888  008F  01F6               	clrf	_keyHoldCount_
  5889  0090                     i1l2966:	
  5890                           
  5891                           ;main.c: 970: if( portAState_.keyDown && !portAState_.keyUp ) {
  5892  0090  1B6C               	btfsc	_portAState_,6
  5893  0091  1BEC               	btfsc	_portAState_,7
  5894  0092  28A1               	goto	i1l2976
  5895                           
  5896                           ;main.c: 971: if( ++keyHoldCount_.Down == 0x40 ) {
  5897  0093  3001               	movlw	1
  5898  0094  00F0               	movwf	??_isr
  5899  0095  0870               	movf	??_isr,w
  5900  0096  07F7               	addwf	_keyHoldCount_+1,f
  5901  0097  3040               	movlw	64
  5902  0098  0677               	xorwf	_keyHoldCount_+1,w
  5903  0099  1D03               	btfss	3,2
  5904  009A  28A2               	goto	i1l2978
  5905                           
  5906                           ;main.c: 972: keyHoldCount_.Down = 0x3C ;
  5907  009B  303C               	movlw	60
  5908  009C  00F0               	movwf	??_isr
  5909  009D  0870               	movf	??_isr,w
  5910  009E  00F7               	movwf	_keyHoldCount_+1
  5911                           
  5912                           ;main.c: 973: inputEvent_.keyPressHeldDown = 1 ;
  5913  009F  16E8               	bsf	_inputEvent_,5
  5914                           
  5915                           ;main.c: 974: }
  5916                           ;main.c: 975: }
  5917  00A0  28A2               	goto	i1l2978
  5918  00A1                     i1l2976:	
  5919                           
  5920                           ;main.c: 976: else
  5921                           ;main.c: 977: keyHoldCount_.Down = 0 ;
  5922  00A1  01F7               	clrf	_keyHoldCount_+1
  5923  00A2                     i1l2978:	
  5924                           
  5925                           ;main.c: 979: if( PIR3bits.TMR6IF ) asm("reset") ;
  5926  00A2  1993               	btfsc	19,3	;volatile
  5927  00A3  0001               	reset	;# 
  5928  00A4                     i1l458:	
  5929  00A4  0873               	movf	??_isr+3,w
  5930  00A5  0020               	movlb	0	; select bank0
  5931  00A6  00FF               	movwf	127
  5932  00A7  0009               	retfie
  5933  00A8                     __end_of_isr:	
  5934  007E                     btemp	set	126	;btemp
  5935  007E                     wtemp	set	126
  5936  007E                     wtemp0	set	126
  5937  0080                     wtemp1	set	128
  5938  0082                     wtemp2	set	130
  5939  0084                     wtemp3	set	132
  5940  0086                     wtemp4	set	134
  5941  0088                     wtemp5	set	136
  5942  007F                     wtemp6	set	127
  5943  007E                     ttemp	set	126
  5944  007E                     ttemp0	set	126
  5945  0081                     ttemp1	set	129
  5946  0084                     ttemp2	set	132
  5947  0087                     ttemp3	set	135
  5948  007F                     ttemp4	set	127
  5949  007E                     ltemp	set	126
  5950  007E                     ltemp0	set	126
  5951  0082                     ltemp1	set	130
  5952  0086                     ltemp2	set	134
  5953  0080                     ltemp3	set	128


Data Sizes:
    Strings     295
    Constant    90
    Data        108
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     26      79
    BANK1            80      0      76
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    currentMenuInfoPtr_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    currentMenuInfoPtr_	PTR struct . size(1) Largest target is 5
		 -> menuInfoInformation_(BANK0[4]), menuInfoConfirm_(BANK0[4]), NULL(NULL[0]), menuInfoDuration_(BANK0[4]), 
		 -> menuInfoTone_(BANK0[4]), menuInfoMain_(BANK0[4]), 

    S693$messageValue	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_33(CODE[10]), STR_32(CODE[12]), STR_31(CODE[4]), STR_30(CODE[6]), 
		 -> STR_29(CODE[5]), STR_28(CODE[11]), STR_24(CODE[6]), 

    currentValueInfo_.messageValue	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_33(CODE[10]), STR_32(CODE[12]), STR_31(CODE[4]), STR_30(CODE[6]), 
		 -> STR_29(CODE[5]), STR_28(CODE[11]), STR_24(CODE[6]), 

    S693$messageTitle	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_42(CODE[9]), STR_41(CODE[12]), STR_40(CODE[6]), STR_39(CODE[7]), 
		 -> STR_36(CODE[8]), STR_35(CODE[7]), STR_34(CODE[7]), STR_27(CODE[9]), 
		 -> STR_26(CODE[5]), STR_25(CODE[7]), STR_22(CODE[10]), 

    currentValueInfo_.messageTitle	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_42(CODE[9]), STR_41(CODE[12]), STR_40(CODE[6]), STR_39(CODE[7]), 
		 -> STR_36(CODE[8]), STR_35(CODE[7]), STR_34(CODE[7]), STR_27(CODE[9]), 
		 -> STR_26(CODE[5]), STR_25(CODE[7]), STR_22(CODE[10]), 

    S693$valuePtr	PTR unsigned char  size(1) Largest target is 12
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[12]), 

    currentValueInfo_.valuePtr	PTR unsigned char  size(1) Largest target is 12
		 -> NULL(NULL[0]), configration_.oscillatorTune(BANK0[1]), configration_.tone(BANK0[3]), configration_.pulseWidth(BANK0[1]), 
		 -> configration_.duration.key(BANK0[1]), configration_.duration.click(BANK0[1]), configration_.duration(BANK0[2]), configration_.beatCount(BANK0[1]), 
		 -> configration_(BANK0[12]), 

    menuInfoInformation_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuInfoConfirm_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuInfoDuration_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuInfoTone_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S688$menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuInfoMain_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK1[6]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S637$MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_42(CODE[9]), 

    MESSAGE.ERROR.MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_42(CODE[9]), 

    S633$INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_41(CODE[12]), 

    MESSAGE.MEMORY.INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_41(CODE[12]), 

    S633$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_40(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_40(CODE[6]), 

    S633$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_39(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_39(CODE[7]), 

    S627$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_38(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_38(CODE[4]), 

    S627$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_37(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_37(CODE[4]), 

    S627$RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_36(CODE[8]), 

    MESSAGE.CONFIRM.RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_36(CODE[8]), 

    S627$SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_35(CODE[7]), 

    MESSAGE.CONFIRM.SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_35(CODE[7]), 

    S627$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[7]), 

    MESSAGE.CONFIRM.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[7]), 

    S617$OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_33(CODE[10]), 

    MESSAGE.CONFIGURATION.OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_33(CODE[10]), 

    S617$PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_32(CODE[12]), 

    MESSAGE.CONFIGURATION.PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_32(CODE[12]), 

    S617$DURATION_KEY	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    MESSAGE.CONFIGURATION.DURATION_KEY	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    S617$DURATION_CLICK	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), 

    MESSAGE.CONFIGURATION.DURATION_CLICK	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), 

    S617$TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_29(CODE[5]), 

    MESSAGE.CONFIGURATION.TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_29(CODE[5]), 

    S617$BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_28(CODE[11]), 

    MESSAGE.CONFIGURATION.BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_28(CODE[11]), 

    S617$TITLE_DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_27(CODE[9]), 

    MESSAGE.CONFIGURATION.TITLE_DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_27(CODE[9]), 

    S617$TITLE_TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_26(CODE[5]), 

    MESSAGE.CONFIGURATION.TITLE_TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_26(CODE[5]), 

    S617$TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_25(CODE[7]), 

    MESSAGE.CONFIGURATION.TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_25(CODE[7]), 

    S613$TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_24(CODE[6]), 

    MESSAGE.METRONOME.TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_24(CODE[6]), 

    S613$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    S613$TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE.METRONOME.TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 

    MESSAGE_MENU_ITEM_DURATION	PTR const unsigned char [3] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    _configuration_Load@config	PTR struct . size(1) Largest target is 12
		 -> configration_(BANK0[12]), 

    _configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 12
		 -> configration_(BANK0[12]), 

    _configuration_Save@config	PTR struct . size(1) Largest target is 12
		 -> configration_(BANK0[12]), 

    _configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 12
		 -> configration_(BANK0[12]), 

    _parallel_lcd_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    _parallel_lcd_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_42(CODE[9]), STR_41(CODE[12]), STR_40(CODE[6]), STR_39(CODE[7]), 
		 -> STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[8]), STR_35(CODE[7]), 
		 -> STR_34(CODE[7]), STR_33(CODE[10]), STR_32(CODE[12]), STR_31(CODE[4]), 
		 -> STR_30(CODE[6]), STR_29(CODE[5]), STR_28(CODE[11]), STR_27(CODE[9]), 
		 -> STR_26(CODE[5]), STR_25(CODE[7]), STR_24(CODE[6]), STR_22(CODE[10]), 
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    _parallel_lcd_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 28
		 -> main@valueString(BANK0[6]), informationValueBuffer(BANK1[28]), STR_42(CODE[9]), STR_41(CODE[12]), 
		 -> STR_40(CODE[6]), STR_39(CODE[7]), STR_36(CODE[8]), STR_35(CODE[7]), 
		 -> STR_34(CODE[7]), STR_27(CODE[9]), STR_26(CODE[5]), STR_25(CODE[7]), 
		 -> STR_23(CODE[7]), STR_22(CODE[10]), 


Critical Paths under _main in COMMON

    _main->___bmul
    _main->__configuration_ReadByte
    __parallel_lcd_WriteStringClearing->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteString->___bmul
    __parallel_lcd_WriteString->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteCharacter->__private_parallel_lcd_WriteByte
    __parallel_lcd_SetCgram->__private_parallel_lcd_WriteByte
    __parallel_lcd_Initialize->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearRow->__private_parallel_lcd_WriteByte
    __configuration_Save->__configuration_ReadByte
    __configuration_Save->__configuration_WriteByte
    __configuration_Load->__configuration_ReadByte
    __configuration_GetRomOffset->__configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->__configuration_Save
    __parallel_lcd_WriteString->___bmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   18936
                                              7 BANK0     19    19      0
                             ___bmul
        __configuration_GetRomOffset
                __configuration_Load
            __configuration_ReadByte
                __configuration_Save
             __parallel_lcd_ClearRow
           __parallel_lcd_Initialize
             __parallel_lcd_SetCgram
       __parallel_lcd_WriteCharacter
          __parallel_lcd_WriteString
  __parallel_lcd_WriteStringClearing
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteStringClearing                    5     3      2    3078
                                              0 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteString                            4     2      2    2498
                                              2 BANK0      4     2      2
                             ___bmul (ARG)
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteCharacter                         2     1      1    2374
                                              0 BANK0      2     1      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_SetCgram                               5     3      2    2265
                                              0 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_Initialize                             0     0      0    1862
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearRow                               3     3      0    1961
                                              0 BANK0      3     3      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) __private_parallel_lcd_WriteByte                      2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Save                                  7     7      0    1412
                                              0 BANK0      7     7      0
            __configuration_ReadByte
           __configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) __configuration_WriteByte                             2     1      1     196
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Load                                  6     6      0    1046
                                              0 BANK0      6     6      0
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (1) __configuration_GetRomOffset                          0     0      0     576
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) __configuration_ReadByte                              2     1      1     576
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     206
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   __configuration_GetRomOffset
     __configuration_ReadByte
   __configuration_Load
     __configuration_ReadByte
   __configuration_ReadByte
   __configuration_Save
     __configuration_ReadByte
     __configuration_WriteByte
   __parallel_lcd_ClearRow
     __private_parallel_lcd_WriteByte
   __parallel_lcd_Initialize
     __private_parallel_lcd_WriteByte
   __parallel_lcd_SetCgram
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteCharacter
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteString
     ___bmul (ARG)
     __private_parallel_lcd_WriteByte (ARG)
   __parallel_lcd_WriteStringClearing
     __private_parallel_lcd_WriteByte
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A5       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1A      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      A5      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 12 11:27:25 2015

                                          pc 0002                               ___bmul@product 0040  
                 ??__parallel_lcd_Initialize 0076                                  __CFG_CP$OFF 0000  
                 ?__parallel_lcd_WriteString 0042                                          l144 0A5B  
                                        l153 0787                                          l401 0514  
                                        l321 0304                                          l241 00F5  
                                        l147 0A66                                          l403 0695  
                                        l251 01AC                                          l172 0AA5  
                                        l148 0A67                                          l340 03F0  
                                        l332 0334                                          l244 00F7  
                                        l165 0F8D                                          l341 03FE  
                                        l333 034E                                          l261 01CC  
                                        l237 00F0                                          l342 0400  
                                        l334 0368                                          l318 02FB  
                                        l238 01A7                                          l335 0382  
                                        l319 02FE                                          l255 01C1  
                                        l360 0465                                          l352 0427  
                                        l336 039D                                          l272 027B  
                                        l256 01C0                                          l248 019B  
                                        l337 03C1                                          l178 0AB5  
                                        l370 0486                                          l274 0278  
                                        l266 01D9                                          l258 01C8  
                                        l179 0AB6                                          l435 06AD  
                                        l339 03E6                                          l291 02BB  
                                        l275 027A                                          l259 01C7  
                                        l276 0315                                          l359 04B8  
                                        l385 04C6                                          l397 0513  
                                        l398 0530                                          _PR2 001B  
                                        _PR4 0416                                 __CFG_CPD$OFF 0000  
                                        _PR6 041D                                          _isr 0004  
                               __CFG_IDLOC0$ 0001                                 __CFG_IDLOC1$ 0001  
                               __CFG_IDLOC2$ 0000                                 __CFG_IDLOC3$ 0000  
                               __CFG_BORV$HI 0000                                          wreg 0009  
                                       S3930 0A70                                         S3932 09A9  
                                       S3934 0981                                         S3936 0A00  
                                       S3938 09CF                                 __CFG_LVP$OFF 0000  
                            __end_of_MESSAGE 082A                                         l3104 0A27  
                                       l3122 0EEF                                         l3124 0EF5  
                                       l3206 07DA                                         l3232 0F67  
                                       l3224 0F5D                                         l3410 0280  
                                       l3306 00F9                                         l3252 0ABF  
                                       l3500 031A                                         l3412 0282  
                                       l3324 015B                                         l3316 0136  
                                       l3332 0183                                         l3246 0F97  
                                       l3174 0781                                         l3502 032A  
                                       l3256 0AC5                                         l3504 032C  
                                       l3432 02A0                                         l3424 0290  
                                       l3194 0791                                         l3506 032E  
                                       l3426 0292                                         l3418 0289  
                                       l3196 07C0                                         l3620 0475  
                                       l3508 0330                                         l3452 02CE  
                                       l3460 02D3                                         l3436 02AC  
                                       l3428 0294                                         l3444 02BE  
                                       l3372 01EB                                         l3630 0484  
                                       l3462 02E2                                         l3454 02D0  
                                       l3446 02C9                                         l3438 02AE  
                                       l3374 01F9                                         l3366 01DD  
                                       l3358 01D0                                         l3286 00E0  
                                       l3800 0739                                         l3720 05C6  
                                       l3704 0519                                         l3640 0498  
                                       l3608 0463                                         l3480 02F1  
                                       l3456 02D2                                         l3368 01E2  
                                       l3288 00E1                                         l3802 073D  
                                       l3714 0587                                         l3618 0474  
                                       l3474 02EC                                         l3732 0628  
                                       l3724 0602                                         l3708 0534  
                                       l3580 0409                                         l3564 03DD  
                                       l3652 04AB                                         l3468 02E7  
                                       l3396 026C                                         l3718 05AE  
                                       l3750 0687                                         l3582 0412  
                                       l3566 03DF                                         l3486 02F8  
                                       l3398 026D                                         l3808 0747  
                                       l3744 0679                                         l3736 0636  
                                       l3672 04D4                                         l3488 02F9  
                                       l3496 0308                                         l3762 06C2  
                                       l3770 06DB                                         l3738 0639  
                                       l3690 04EC                                         l3586 041C  
                                       l3764 06C8                                         l3756 06A8  
                                       l3596 0449                                         l3782 06DE  
                                       l3686 04E6                                         l3598 044A  
                                       l3784 070A                                         l3768 06D3  
                                       l3794 0728                                         l3698 04FB  
                                       l3798 0730                                         ?_isr 0070  
                                       STR_1 0900                                 __CFG_WDTE$ON 0000  
                                       STR_2 08BA                                         STR_3 08D9  
                                       STR_4 085A                                         STR_5 0868  
                                       STR_6 08ED                                         STR_7 0966  
                                       STR_8 096B                                         STR_9 0970  
                                       _LATB 010D                                         u3150 06A3  
                                       u3064 04F3                                         u3065 04F2  
                                       u2605 0124                                         u2385 0EA1  
                                       u3185 06EE                                         u2725 0203  
                                       u2735 0224                                         u2745 0245  
                                       u2595 0106                                         _TMR0 0015  
                                       _TMR1 0016                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                               __CFG_WRT$OFF 0000                          _MESSAGE_INFORMATION 00A0  
                                       _main 00D0                                         fsr0h 0005  
                                       fsr1h 0007                                         fsr0l 0004  
                                       indf0 0000                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                              __CFG_BOREN$ON 0000                                         ltemp 007E  
                                       start 00A8                                         ttemp 007E  
                                       wtemp 007E                                __CFG_IESO$OFF 0000  
                          ___bmul@multiplier 0041                                        ??_isr 0070  
                              _keyHoldCount_ 0076                                        ?_main 0070  
                                      STR_10 0960                                        STR_11 0900  
                                      STR_12 093C                                        STR_20 08AF  
                                      STR_13 0942                                        STR_21 0899  
                                      STR_30 0954                                        STR_22 08CF  
                                      STR_14 0948                                        STR_31 097D  
                                      STR_23 0919                                        STR_15 0900  
                                      STR_40 094E                                        STR_32 088D  
                                      STR_24 095A                                        STR_16 0881  
                                      STR_41 0875                                        STR_33 08E3  
                                      STR_25 0935                                        STR_17 08C5  
                                      STR_42 08F7                                        STR_34 0920  
                                      STR_26 08DE                                        STR_18 0911  
                                      STR_35 0927                                        STR_27 085F  
                                      STR_19 08A4                                        STR_36 0909  
                                      STR_28 08BA                                        STR_37 0975  
                                      STR_29 08DE                                        STR_38 0979  
                                      STR_39 092E                                        i1l458 00A4  
                         main@prevPortAState 006E                                 _outputEvent_ 006B  
                                      _PORTA 000C                                        _TRISA 008C  
                                      _TRISB 008D                                __CFG_PWRTE$ON 0000  
                             __CFG_FCMEN$OFF 0000              __end_of_PARALLEL_LCD_ROW_SELECT 0842  
                   ?__configuration_ReadByte 0074                                        main@i 0059  
                               main@tmpValue 0052                                        ltemp0 007E  
                                      ltemp1 0082                                        ltemp2 0086  
                                      ltemp3 0080                            __end_of_CHAR_CODE 083D  
                                      ttemp0 007E                                        ttemp1 0081  
                                      ttemp2 0084                                        ttemp3 0087  
                                      ttemp4 007F                                        status 0003  
                                      wtemp0 007E                                        wtemp1 0080  
                                      wtemp2 0082                                        wtemp3 0084  
                                      wtemp4 0086                                        wtemp5 0088  
                                      wtemp6 007F                               __CFG_MCLRE$OFF 0000  
                            __initialization 00AA                                 __end_of_main 0751  
                        _soundDurationCount_ 0064                                 _beatCounter_ 0066  
                                     ??_main 0047                            __end_of_HEX_TABLE 083A  
                             __CFG_PLLEN$OFF 0000                __parallel_lcd_SetCgram@bitmap 0040  
            __configuration_ReadByte@address 0075                                main@isNonZero 0051  
                                     _EEADRH 0192                                       _EEADRL 0191  
                                     _EEDATH 0194                                       _CCPR4H 0319  
                                     _EEDATL 0193                                       _CCPR4L 0318  
                                     _EECON2 0196                             _menuInfoConfirm_ 002C  
                                     _BITMAP 0842                                       _ANSELA 018C  
                                     _ANSELB 018D                                       i1l2922 0042  
                                     i1l2940 0061                                       i1l2924 0044  
                                     u211_25 0020                                       i1l2934 0059  
                                     i1l2952 0079                                       i1l2964 008F  
                                     u212_25 003E                                       i1l2966 0090  
                                     i1l2976 00A1                                       i1l2978 00A2  
                   ??__parallel_lcd_ClearRow 0040                                       ___bmul 0ABC  
           __end_of__parallel_lcd_Initialize 0A98                               __CFG_STVREN$ON 0000  
                   ??__parallel_lcd_SetCgram 0042                                main@romOffset 0054  
       __private_parallel_lcd_WriteByte@data 0075                      __end_of__initialization 00CD  
                   __configuration_WriteByte 0A98                          ___bmul@multiplicand 0074  
                __end_of__configuration_Load 0F99                  __end_of__configuration_Save 07DF  
                             __pcstackCOMMON 0070                                 __pidataBANK0 07DF  
                               __pidataBANK1 0EFB         __end_of__parallel_lcd_WriteCharacter 0ADC  
      __size_of__parallel_lcd_WriteCharacter 000E                 __parallel_lcd_WriteCharacter 0ACE  
                              _menuInfoMain_ 0038                                _menuInfoTone_ 003C  
                ??__parallel_lcd_WriteString 0044                               _OPTION_REGbits 0095  
                                 __pbssBANK0 005A              __size_of__parallel_lcd_ClearRow 001A  
                                 __pmaintext 00D0                                      ?___bmul 0074  
                                 __pintentry 0004                __configuration_WriteByte@data 0074  
              ?__parallel_lcd_WriteCharacter 0040              __size_of__parallel_lcd_SetCgram 002A  
                                    _CCPTMRS 029E                 ?__configuration_GetRomOffset 0070  
                        _currentMenuInfoPtr_ 0067                                      _MESSAGE 0800  
                             main@keyPressed 0055                                      _OSCTUNE 0098  
                          _menuInfoDuration_ 0030            __size_of__parallel_lcd_Initialize 0014  
                  ?__parallel_lcd_Initialize 0070                    __parallel_lcd_WriteString 0A20  
                                  _CHAR_CODE 083A                        __configuration_Load@i 0045  
           __size_of__configuration_ReadByte 0012                        __configuration_Save@i 0045  
                          main@COMPARE_UNITS 083D                              __size_of___bmul 0012  
             __configuration_Save@returnCode 0042                                   _initialize 0F99  
                                    __ptext1 0F99                                      __ptext2 0EC5  
                                    __ptext3 0A20                                      __ptext4 0ACE  
                     __parallel_lcd_ClearRow 0A40                                      __ptext5 0E9B  
                                    __ptext6 0A84                                      __ptext7 0A40  
                                    __ptext8 0A5A                                      __ptext9 0751  
                                    _isMute_ 0069                       _informationValueBuffer 00AE  
                                  _T1CONbits 0018                                    _T2CONbits 001C  
                 _MESSAGE_MENU_ITEM_DURATION 00E6                                 __size_of_isr 00A4  
                                  _T4CONbits 0417                                    _T6CONbits 041E  
                                  _HEX_TABLE 082A                                      clrloop0 0ADD  
                       end_of_initialization 00CD                       __parallel_lcd_SetCgram 0E9B  
                             main@returnCode 0057          __parallel_lcd_WriteStringClearing@i 0044  
                                    init_ram 0AE2                                      initloop 0AE3  
                  __end_ofmain@COMPARE_UNITS 0840                      _PARALLEL_LCD_ROW_SELECT 0840  
                               __pstringtext 0800                   __configuration_Load@config 0044  
                           __CFG_FOSC$INTOSC 0000          __parallel_lcd_WriteString@stringPtr 0042  
                 ??__configuration_WriteByte 0075                               __end_of_BITMAP 085A  
                                _CCP1CONbits 0293                                  _CCP2CONbits 029A  
       __size_of__configuration_GetRomOffset 0005                                  _CCP3CONbits 0313  
                                _CCP4CONbits 031A                                   main@userId 0058  
                             __end_of___bmul 0ACE                                  ?_initialize 0070  
                        start_initialization 00AA                                  __end_of_isr 00A8  
       __configuration_ReadByte@memorySelect 0074                   __configuration_Save@config 0046  
                    __configuration_ReadByte 0AAA           __size_of__parallel_lcd_WriteString 0020  
                                   ??___bmul 0075                                  _CCPTMRSbits 029E  
                                __pdataBANK0 0020                                  __pdataBANK1 00A0  
               __size_of__configuration_Load 0052                 __size_of__configuration_Save 008E  
           __parallel_lcd_ClearRow@rowSelect 0041        __parallel_lcd_WriteCharacter@position 0041  
                                __pbssCOMMON 0076                                    ___latbits 0001  
                              __pcstackBANK0 0040                          __size_of_initialize 0067  
          __end_of__parallel_lcd_WriteString 0A40                      ?__parallel_lcd_ClearRow 0070  
                   __parallel_lcd_ClearRow@i 0042                                    __pswtext1 0A70  
                                  __pswtext2 09A9                                    __pswtext3 0981  
                                  __pswtext4 0A00                                    __pswtext5 09CF  
              __configuration_Save@romOffset 0044             __end_of__configuration_WriteByte 0AAA  
                    ?__parallel_lcd_SetCgram 0040                __configuration_Save@ptrConfig 0043  
    __end_of__private_parallel_lcd_WriteByte 0A70     __size_of__private_parallel_lcd_WriteByte 0016  
          ??__private_parallel_lcd_WriteByte 0075             ?__private_parallel_lcd_WriteByte 0074  
            __private_parallel_lcd_WriteByte 0A5A                    ??__configuration_ReadByte 0075  
                                   _LATAbits 010C                                    clear_ram0 0ADC  
                                   _PIE1bits 0091                                     _PIE3bits 0093  
                                   _PIR1bits 0011                                     _PIR2bits 0012  
                                   _PIR3bits 0013               __end_of__parallel_lcd_ClearRow 0A5A  
                                  main@F3074 00A8           __parallel_lcd_WriteString@position 0045  
     __parallel_lcd_WriteCharacter@character 0040               __end_of__parallel_lcd_SetCgram 0EC5  
                                  main@phase 0056                     __parallel_lcd_Initialize 0A84  
                              _tempoCounter_ 0061                     __parallel_lcd_SetCgram@i 0044  
__parallel_lcd_WriteStringClearing@stringPtr 0040                                   _EECON1bits 0195  
          __private_parallel_lcd_WriteByte@r 0074              __end_of__configuration_ReadByte 0ABC  
                               ??_initialize 0074          __end_of__configuration_GetRomOffset 0AED  
                __configuration_GetRomOffset 0AE8              __parallel_lcd_SetCgram@charCode 0043  
                     _MESSAGE_MENU_ITEM_MAIN 00CA                       _MESSAGE_MENU_ITEM_TONE 00DE  
                                   __ptext10 0A98                                     __ptext11 0F47  
                                   __ptext12 0AE8                                     __ptext13 0AAA  
                                   __ptext14 0ABC                ??__configuration_GetRomOffset 0076  
                        __configuration_Load 0F47                          __configuration_Save 0751  
                              __size_of_main 0681                           __end_of_initialize 1000  
  __end_of__parallel_lcd_WriteStringClearing 0EFB   __size_of__parallel_lcd_WriteStringClearing 0036  
        ??__parallel_lcd_WriteStringClearing 0042           ?__parallel_lcd_WriteStringClearing 0040  
          __parallel_lcd_WriteStringClearing 0EC5                                  _inputEvent_ 0068  
          __size_of__configuration_WriteByte 0012                    ?__configuration_WriteByte 0074  
 __parallel_lcd_WriteStringClearing@position 0043                         ?__configuration_Load 0070  
                       ?__configuration_Save 0070                              main@valueString 004B  
                                _OSCTUNEbits 0098                                   _INTCONbits 000B  
                          _currentValueInfo_ 005A               ??__parallel_lcd_WriteCharacter 0076  
                          isr@eventPrescaler 0078                                     intlevel1 0000  
                          __CFG_CLKOUTEN$OFF 0000             __configuration_WriteByte@address 0075  
                                 _OSCCONbits 0099                                _configration_ 0020  
                      ??__configuration_Load 0040                        ??__configuration_Save 0040  
                                _portAState_ 006C                __configuration_Load@romOffset 0043  
                                 _WDTCONbits 0097                                _machineState_ 006A  
              __configuration_Load@ptrConfig 0042                         _menuInfoInformation_ 0034  
                        _stateReturnCounter_ 006D  
