

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Aug 11 13:00:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	swtext3,local,class=CONST,delta=2
    20                           	psect	swtext4,local,class=CONST,delta=2
    21                           	psect	swtext5,local,class=CONST,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001E                     	;# 
    66  001F                     	;# 
    67  008C                     	;# 
    68  008D                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0094                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  0111                     	;# 
    87  0112                     	;# 
    88  0113                     	;# 
    89  0114                     	;# 
    90  0115                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  0118                     	;# 
    94  0119                     	;# 
    95  011A                     	;# 
    96  011B                     	;# 
    97  011D                     	;# 
    98  011E                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  0191                     	;# 
   102  0191                     	;# 
   103  0192                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0194                     	;# 
   108  0195                     	;# 
   109  0196                     	;# 
   110  0199                     	;# 
   111  019A                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019C                     	;# 
   117  019C                     	;# 
   118  019D                     	;# 
   119  019E                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020D                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0212                     	;# 
   127  0213                     	;# 
   128  0213                     	;# 
   129  0214                     	;# 
   130  0214                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  0219                     	;# 
   139  021A                     	;# 
   140  021B                     	;# 
   141  021C                     	;# 
   142  021D                     	;# 
   143  021E                     	;# 
   144  021F                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0294                     	;# 
   150  0295                     	;# 
   151  0295                     	;# 
   152  0296                     	;# 
   153  0298                     	;# 
   154  0298                     	;# 
   155  0299                     	;# 
   156  029A                     	;# 
   157  029B                     	;# 
   158  029C                     	;# 
   159  029C                     	;# 
   160  029D                     	;# 
   161  029E                     	;# 
   162  029E                     	;# 
   163  0311                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0318                     	;# 
   168  0318                     	;# 
   169  0319                     	;# 
   170  031A                     	;# 
   171  0394                     	;# 
   172  0395                     	;# 
   173  0396                     	;# 
   174  039A                     	;# 
   175  039C                     	;# 
   176  039D                     	;# 
   177  039E                     	;# 
   178  039F                     	;# 
   179  0415                     	;# 
   180  0416                     	;# 
   181  0417                     	;# 
   182  041C                     	;# 
   183  041D                     	;# 
   184  041E                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196                           
   197                           	psect	idataBANK0
   198  07DC                     __pidataBANK0:	
   199                           
   200                           ;initializer for _MESSAGE_INFORMATION
   201  07DC  34F2               	retlw	low (STR_15| (0+32768))
   202  07DD  3488               	retlw	high (STR_15| (0+32768))
   203  07DE  348F               	retlw	low (STR_16| (0+32768))
   204  07DF  3488               	retlw	high (STR_16| (0+32768))
   205  07E0  349A               	retlw	low (STR_17| (0+32768))
   206  07E1  3488               	retlw	high (STR_17| (0+32768))
   207  07E2  3484               	retlw	low (STR_18| (0+32768))
   208  07E3  3488               	retlw	high (STR_18| (0+32768))
   209                           
   210                           ;initializer for _configration_
   211  07E4  3400               	retlw	0
   212  07E5  3478               	retlw	120
   213  07E6  3400               	retlw	0
   214  07E7  3404               	retlw	4
   215  07E8  3420               	retlw	32
   216  07E9  3401               	retlw	1
   217  07EA  34F9               	retlw	249
   218  07EB  343E               	retlw	62
   219  07EC  3452               	retlw	82
   220  07ED  3400               	retlw	0
   221  07EE  3400               	retlw	0
   222                           
   223                           ;initializer for _menuStateConfirm_
   224  07EF  3400               	retlw	0
   225  07F0  3400               	retlw	0
   226  07F1  3401               	retlw	1
   227  07F2  3400               	retlw	0
   228                           
   229                           ;initializer for _menuStateInformation_
   230  07F3  3400               	retlw	0
   231  07F4  3400               	retlw	0
   232  07F5  3402               	retlw	2
   233  07F6  3400               	retlw	0
   234                           
   235                           ;initializer for _menuStateMain_
   236  07F7  3400               	retlw	0
   237  07F8  3400               	retlw	0
   238  07F9  3409               	retlw	9
   239  07FA  34C2               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| 0)
   240                           
   241                           ;initializer for _menuStateTone_
   242  07FB  3400               	retlw	0
   243  07FC  3400               	retlw	0
   244  07FD  3403               	retlw	3
   245  07FE  34D6               	retlw	low (_MESSAGE_MENU_ITEM_TONE| 0)
   246                           
   247                           	psect	idataBANK1
   248  0EE2                     __pidataBANK1:	
   249                           
   250                           ;initializer for main@F3053
   251  0EE2  343D               	retlw	61
   252  0EE3  3420               	retlw	32
   253  0EE4  3430               	retlw	48
   254  0EE5  3430               	retlw	48
   255  0EE6  3430               	retlw	48
   256  0EE7  3400               	retlw	0
   257                           
   258                           ;initializer for _informationValueBuffer
   259  0EE8  3420               	retlw	32
   260  0EE9  342D               	retlw	45
   261  0EEA  342D               	retlw	45
   262  0EEB  342E               	retlw	46
   263  0EEC  342D               	retlw	45
   264  0EED  342D               	retlw	45
   265  0EEE  3400               	retlw	0
   266  0EEF  3420               	retlw	32
   267  0EF0  3420               	retlw	32
   268  0EF1  3420               	retlw	32
   269  0EF2  342D               	retlw	45
   270  0EF3  342D               	retlw	45
   271  0EF4  3468               	retlw	104
   272  0EF5  3400               	retlw	0
   273  0EF6  3420               	retlw	32
   274  0EF7  3420               	retlw	32
   275  0EF8  3420               	retlw	32
   276  0EF9  342D               	retlw	45
   277  0EFA  342D               	retlw	45
   278  0EFB  3468               	retlw	104
   279  0EFC  3400               	retlw	0
   280  0EFD  3420               	retlw	32
   281  0EFE  3420               	retlw	32
   282  0EFF  3420               	retlw	32
   283  0F00  3430               	retlw	48
   284  0F01  3430               	retlw	48
   285  0F02  3468               	retlw	104
   286  0F03  3400               	retlw	0
   287                           
   288                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   289  0F04  34E1               	retlw	low (STR_1| (0+32768))
   290  0F05  3488               	retlw	high (STR_1| (0+32768))
   291  0F06  34A5               	retlw	low (STR_2| (0+32768))
   292  0F07  3488               	retlw	high (STR_2| (0+32768))
   293  0F08  34BA               	retlw	low (STR_3| (0+32768))
   294  0F09  3488               	retlw	high (STR_3| (0+32768))
   295  0F0A  3451               	retlw	low (STR_4| (0+32768))
   296  0F0B  3488               	retlw	high (STR_4| (0+32768))
   297  0F0C  345F               	retlw	low (STR_5| (0+32768))
   298  0F0D  3488               	retlw	high (STR_5| (0+32768))
   299  0F0E  34CE               	retlw	low (STR_6| (0+32768))
   300  0F0F  3488               	retlw	high (STR_6| (0+32768))
   301  0F10  3441               	retlw	low (STR_7| (0+32768))
   302  0F11  3489               	retlw	high (STR_7| (0+32768))
   303  0F12  3446               	retlw	low (STR_8| (0+32768))
   304  0F13  3489               	retlw	high (STR_8| (0+32768))
   305  0F14  344B               	retlw	low (STR_9| (0+32768))
   306  0F15  3489               	retlw	high (STR_9| (0+32768))
   307  0F16  343B               	retlw	low (STR_10| (0+32768))
   308  0F17  3489               	retlw	high (STR_10| (0+32768))
   309                           
   310                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   311  0F18  34E1               	retlw	low (STR_1| (0+32768))
   312  0F19  3488               	retlw	high (STR_1| (0+32768))
   313  0F1A  341D               	retlw	low (STR_12| (0+32768))
   314  0F1B  3489               	retlw	high (STR_12| (0+32768))
   315  0F1C  3423               	retlw	low (STR_13| (0+32768))
   316  0F1D  3489               	retlw	high (STR_13| (0+32768))
   317  0F1E  3429               	retlw	low (STR_14| (0+32768))
   318  0F1F  3489               	retlw	high (STR_14| (0+32768))
   319                           
   320                           	psect	stringtext
   321  0800                     __pstringtext:	
   322  0800                     _MESSAGE:	
   323  0800  34B0               	retlw	low (STR_19| (0+32768))
   324  0801  3488               	retlw	high (STR_19| (0+32768))
   325  0802  34FA               	retlw	low (STR_20| (0+32768))
   326  0803  3488               	retlw	high (STR_20| (0+32768))
   327  0804  3435               	retlw	low (STR_21| (0+32768))
   328  0805  3489               	retlw	high (STR_21| (0+32768))
   329  0806  3416               	retlw	low (STR_22| (0+32768))
   330  0807  3489               	retlw	high (STR_22| (0+32768))
   331  0808  34A5               	retlw	low (STR_2| (0+32768))
   332  0809  3488               	retlw	high (STR_2| (0+32768))
   333  080A  34BF               	retlw	low ((STR_3+5)| (0+32768))
   334  080B  3488               	retlw	high ((STR_3+5)| (0+32768))
   335  080C  3456               	retlw	low ((STR_4+5)| (0+32768))
   336  080D  3488               	retlw	high ((STR_4+5)| (0+32768))
   337  080E  3478               	retlw	low (STR_26| (0+32768))
   338  080F  3488               	retlw	high (STR_26| (0+32768))
   339  0810  34C4               	retlw	low (STR_27| (0+32768))
   340  0811  3488               	retlw	high (STR_27| (0+32768))
   341  0812  3401               	retlw	low (STR_28| (0+32768))
   342  0813  3489               	retlw	high (STR_28| (0+32768))
   343  0814  3408               	retlw	low (STR_29| (0+32768))
   344  0815  3489               	retlw	high (STR_29| (0+32768))
   345  0816  34EA               	retlw	low (STR_30| (0+32768))
   346  0817  3488               	retlw	high (STR_30| (0+32768))
   347  0818  3450               	retlw	low (STR_31| (0+32768))
   348  0819  3489               	retlw	high (STR_31| (0+32768))
   349  081A  3454               	retlw	low (STR_32| (0+32768))
   350  081B  3489               	retlw	high (STR_32| (0+32768))
   351  081C  340F               	retlw	low (STR_33| (0+32768))
   352  081D  3489               	retlw	high (STR_33| (0+32768))
   353  081E  342F               	retlw	low (STR_34| (0+32768))
   354  081F  3489               	retlw	high (STR_34| (0+32768))
   355  0820  346C               	retlw	low (STR_35| (0+32768))
   356  0821  3488               	retlw	high (STR_35| (0+32768))
   357  0822  34D8               	retlw	low (STR_36| (0+32768))
   358  0823  3488               	retlw	high (STR_36| (0+32768))
   359  0824                     __end_of_MESSAGE:	
   360  0824                     _HEX_TABLE:	
   361  0824  3430               	retlw	48
   362  0825  3431               	retlw	49
   363  0826  3432               	retlw	50
   364  0827  3433               	retlw	51
   365  0828  3434               	retlw	52
   366  0829  3435               	retlw	53
   367  082A  3436               	retlw	54
   368  082B  3437               	retlw	55
   369  082C  3438               	retlw	56
   370  082D  3439               	retlw	57
   371  082E  3441               	retlw	65
   372  082F  3442               	retlw	66
   373  0830  3443               	retlw	67
   374  0831  3444               	retlw	68
   375  0832  3445               	retlw	69
   376  0833  3446               	retlw	70
   377  0834                     __end_of_HEX_TABLE:	
   378  0834                     _CHAR_CODE:	
   379  0834  3400               	retlw	0
   380  0835  3401               	retlw	1
   381  0836  3402               	retlw	2
   382  0837                     __end_of_CHAR_CODE:	
   383  0837                     _PARALLEL_LCD_ROW_SELECT:	
   384  0837  3480               	retlw	128
   385  0838  34C0               	retlw	192
   386  0839                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   387  0839                     _BITMAP:	
   388  0839  3410               	retlw	16
   389  083A  3418               	retlw	24
   390  083B  341C               	retlw	28
   391  083C  341E               	retlw	30
   392  083D  341C               	retlw	28
   393  083E  3418               	retlw	24
   394  083F  3410               	retlw	16
   395  0840  3400               	retlw	0
   396  0841  3400               	retlw	0
   397  0842  3404               	retlw	4
   398  0843  340E               	retlw	14
   399  0844  341F               	retlw	31
   400  0845  3400               	retlw	0
   401  0846  3400               	retlw	0
   402  0847  3400               	retlw	0
   403  0848  3400               	retlw	0
   404  0849  3400               	retlw	0
   405  084A  3400               	retlw	0
   406  084B  3400               	retlw	0
   407  084C  3400               	retlw	0
   408  084D  341F               	retlw	31
   409  084E  340E               	retlw	14
   410  084F  3404               	retlw	4
   411  0850  3400               	retlw	0
   412  0851                     __end_of_BITMAP:	
   413  0016                     _TMR1	set	22
   414  000B                     _INTCONbits	set	11
   415  0011                     _PIR1bits	set	17
   416  0012                     _PIR2bits	set	18
   417  0013                     _PIR3bits	set	19
   418  000C                     _PORTA	set	12
   419  001B                     _PR2	set	27
   420  0018                     _T1CONbits	set	24
   421  001C                     _T2CONbits	set	28
   422  0015                     _TMR0	set	21
   423  001A                     _TMR2	set	26
   424  0095                     _OPTION_REGbits	set	149
   425  0099                     _OSCCONbits	set	153
   426  0098                     _OSCTUNE	set	152
   427  0098                     _OSCTUNEbits	set	152
   428  0091                     _PIE1bits	set	145
   429  0093                     _PIE3bits	set	147
   430  008C                     _TRISA	set	140
   431  008D                     _TRISB	set	141
   432  0097                     _WDTCONbits	set	151
   433  010C                     _LATAbits	set	268
   434  010D                     _LATB	set	269
   435  018C                     _ANSELA	set	396
   436  018D                     _ANSELB	set	397
   437  0192                     _EEADRH	set	402
   438  0191                     _EEADRL	set	401
   439  0195                     _EECON1bits	set	405
   440  0196                     _EECON2	set	406
   441  0194                     _EEDATH	set	404
   442  0193                     _EEDATL	set	403
   443  0293                     _CCP1CONbits	set	659
   444  029A                     _CCP2CONbits	set	666
   445  029E                     _CCPTMRS	set	670
   446  029E                     _CCPTMRSbits	set	670
   447  0313                     _CCP3CONbits	set	787
   448  031A                     _CCP4CONbits	set	794
   449  0319                     _CCPR4H	set	793
   450  0318                     _CCPR4L	set	792
   451  0416                     _PR4	set	1046
   452  041D                     _PR6	set	1053
   453  0417                     _T4CONbits	set	1047
   454  041E                     _T6CONbits	set	1054
   455  0415                     _TMR4	set	1045
   456  041C                     _TMR6	set	1052
   457  0851                     STR_4:	
   458  0851  3441               	retlw	65	;'A'
   459  0852  3464               	retlw	100	;'d'
   460  0853  346A               	retlw	106	;'j'
   461  0854  342E               	retlw	46	;'.'
   462  0855  3420               	retlw	32	;' '
   463  0856  3444               	retlw	68	;'D'
   464  0857  3475               	retlw	117	;'u'
   465  0858  3472               	retlw	114	;'r'
   466  0859  3461               	retlw	97	;'a'
   467  085A  3474               	retlw	116	;'t'
   468  085B  3469               	retlw	105	;'i'
   469  085C  346F               	retlw	111	;'o'
   470  085D  346E               	retlw	110	;'n'
   471  085E  3400               	retlw	0
   472  085F                     STR_5:	
   473  085F  3441               	retlw	65	;'A'
   474  0860  3464               	retlw	100	;'d'
   475  0861  346A               	retlw	106	;'j'
   476  0862  342E               	retlw	46	;'.'
   477  0863  3420               	retlw	32	;' '
   478  0864  3450               	retlw	80	;'P'
   479  0865  342D               	retlw	45	;'-'
   480  0866  3457               	retlw	87	;'W'
   481  0867  3469               	retlw	105	;'i'
   482  0868  3464               	retlw	100	;'d'
   483  0869  3474               	retlw	116	;'t'
   484  086A  3468               	retlw	104	;'h'
   485  086B  3400               	retlw	0
   486  086C                     STR_35:	
   487  086C  3449               	retlw	73	;'I'
   488  086D  346E               	retlw	110	;'n'
   489  086E  3469               	retlw	105	;'i'
   490  086F  3474               	retlw	116	;'t'
   491  0870  3469               	retlw	105	;'i'
   492  0871  3461               	retlw	97	;'a'
   493  0872  346C               	retlw	108	;'l'
   494  0873  3469               	retlw	105	;'i'
   495  0874  347A               	retlw	122	;'z'
   496  0875  3465               	retlw	101	;'e'
   497  0876  3464               	retlw	100	;'d'
   498  0877  3400               	retlw	0
   499  0878                     STR_26:	
   500  0878  3450               	retlw	80	;'P'
   501  0879  3475               	retlw	117	;'u'
   502  087A  346C               	retlw	108	;'l'
   503  087B  3473               	retlw	115	;'s'
   504  087C  3465               	retlw	101	;'e'
   505  087D  3420               	retlw	32	;' '
   506  087E  3457               	retlw	87	;'W'
   507  087F  3469               	retlw	105	;'i'
   508  0880  3464               	retlw	100	;'d'
   509  0881  3474               	retlw	116	;'t'
   510  0882  3468               	retlw	104	;'h'
   511  0883  3400               	retlw	0
   512  0884                     STR_18:	
   513  0884  3445               	retlw	69	;'E'
   514  0885  3472               	retlw	114	;'r'
   515  0886  3472               	retlw	114	;'r'
   516  0887  346F               	retlw	111	;'o'
   517  0888  3472               	retlw	114	;'r'
   518  0889  3420               	retlw	32	;' '
   519  088A  3443               	retlw	67	;'C'
   520  088B  346F               	retlw	111	;'o'
   521  088C  3464               	retlw	100	;'d'
   522  088D  3465               	retlw	101	;'e'
   523  088E  3400               	retlw	0
   524  088F                     STR_16:	
   525  088F  3452               	retlw	82	;'R'
   526  0890  344F               	retlw	79	;'O'
   527  0891  344D               	retlw	77	;'M'
   528  0892  3420               	retlw	32	;' '
   529  0893  344F               	retlw	79	;'O'
   530  0894  3466               	retlw	102	;'f'
   531  0895  3466               	retlw	102	;'f'
   532  0896  3473               	retlw	115	;'s'
   533  0897  3465               	retlw	101	;'e'
   534  0898  3474               	retlw	116	;'t'
   535  0899  3400               	retlw	0
   536  089A                     STR_17:	
   537  089A  3453               	retlw	83	;'S'
   538  089B  3461               	retlw	97	;'a'
   539  089C  3476               	retlw	118	;'v'
   540  089D  3465               	retlw	101	;'e'
   541  089E  3420               	retlw	32	;' '
   542  089F  3443               	retlw	67	;'C'
   543  08A0  346F               	retlw	111	;'o'
   544  08A1  3475               	retlw	117	;'u'
   545  08A2  346E               	retlw	110	;'n'
   546  08A3  3474               	retlw	116	;'t'
   547  08A4  3400               	retlw	0
   548  08A5                     STR_2:	
   549  08A5  3442               	retlw	66	;'B'
   550  08A6  3465               	retlw	101	;'e'
   551  08A7  3461               	retlw	97	;'a'
   552  08A8  3474               	retlw	116	;'t'
   553  08A9  3420               	retlw	32	;' '
   554  08AA  3443               	retlw	67	;'C'
   555  08AB  346F               	retlw	111	;'o'
   556  08AC  3475               	retlw	117	;'u'
   557  08AD  346E               	retlw	110	;'n'
   558  08AE  3474               	retlw	116	;'t'
   559  08AF  3400               	retlw	0
   560  08B0                     STR_19:	
   561  08B0  344D               	retlw	77	;'M'
   562  08B1  3465               	retlw	101	;'e'
   563  08B2  3474               	retlw	116	;'t'
   564  08B3  3472               	retlw	114	;'r'
   565  08B4  346F               	retlw	111	;'o'
   566  08B5  346E               	retlw	110	;'n'
   567  08B6  346F               	retlw	111	;'o'
   568  08B7  346D               	retlw	109	;'m'
   569  08B8  3465               	retlw	101	;'e'
   570  08B9  3400               	retlw	0
   571  08BA                     STR_3:	
   572  08BA  3441               	retlw	65	;'A'
   573  08BB  3464               	retlw	100	;'d'
   574  08BC  346A               	retlw	106	;'j'
   575  08BD  342E               	retlw	46	;'.'
   576  08BE  3420               	retlw	32	;' '
   577  08BF  3454               	retlw	84	;'T'
   578  08C0  346F               	retlw	111	;'o'
   579  08C1  346E               	retlw	110	;'n'
   580  08C2  3465               	retlw	101	;'e'
   581  08C3  3400               	retlw	0
   582  08C4                     STR_27:	
   583  08C4  344F               	retlw	79	;'O'
   584  08C5  3473               	retlw	115	;'s'
   585  08C6  3463               	retlw	99	;'c'
   586  08C7  342E               	retlw	46	;'.'
   587  08C8  3420               	retlw	32	;' '
   588  08C9  3454               	retlw	84	;'T'
   589  08CA  3475               	retlw	117	;'u'
   590  08CB  346E               	retlw	110	;'n'
   591  08CC  3465               	retlw	101	;'e'
   592  08CD  3400               	retlw	0
   593  08CE                     STR_6:	
   594  08CE  3441               	retlw	65	;'A'
   595  08CF  3464               	retlw	100	;'d'
   596  08D0  346A               	retlw	106	;'j'
   597  08D1  342E               	retlw	46	;'.'
   598  08D2  3420               	retlw	32	;' '
   599  08D3  3454               	retlw	84	;'T'
   600  08D4  3475               	retlw	117	;'u'
   601  08D5  346E               	retlw	110	;'n'
   602  08D6  3465               	retlw	101	;'e'
   603  08D7  3400               	retlw	0
   604  08D8                     STR_36:	
   605  08D8  3445               	retlw	69	;'E'
   606  08D9  3452               	retlw	82	;'R'
   607  08DA  3452               	retlw	82	;'R'
   608  08DB  344F               	retlw	79	;'O'
   609  08DC  3452               	retlw	82	;'R'
   610  08DD  3420               	retlw	32	;' '
   611  08DE  3421               	retlw	33	;'!'
   612  08DF  3421               	retlw	33	;'!'
   613  08E0  3400               	retlw	0
   614  08E1                     STR_1:	
   615  08E1  343C               	retlw	60	;'<'
   616  08E2  3420               	retlw	32	;' '
   617  08E3  3452               	retlw	82	;'R'
   618  08E4  3465               	retlw	101	;'e'
   619  08E5  3474               	retlw	116	;'t'
   620  08E6  3475               	retlw	117	;'u'
   621  08E7  3472               	retlw	114	;'r'
   622  08E8  346E               	retlw	110	;'n'
   623  08E9  3400               	retlw	0
   624  08EA                     STR_30:	
   625  08EA  3452               	retlw	82	;'R'
   626  08EB  3465               	retlw	101	;'e'
   627  08EC  3473               	retlw	115	;'s'
   628  08ED  3465               	retlw	101	;'e'
   629  08EE  3474               	retlw	116	;'t'
   630  08EF  3420               	retlw	32	;' '
   631  08F0  343F               	retlw	63	;'?'
   632  08F1  3400               	retlw	0
   633  08F2                     STR_15:	
   634  08F2  3456               	retlw	86	;'V'
   635  08F3  3465               	retlw	101	;'e'
   636  08F4  3472               	retlw	114	;'r'
   637  08F5  3473               	retlw	115	;'s'
   638  08F6  3469               	retlw	105	;'i'
   639  08F7  346F               	retlw	111	;'o'
   640  08F8  346E               	retlw	110	;'n'
   641  08F9  3400               	retlw	0
   642  08FA                     STR_20:	
   643  08FA  3423               	retlw	35	;'#'
   644  08FB  344D               	retlw	77	;'M'
   645  08FC  3475               	retlw	117	;'u'
   646  08FD  3474               	retlw	116	;'t'
   647  08FE  3465               	retlw	101	;'e'
   648  08FF  3423               	retlw	35	;'#'
   649  0900  3400               	retlw	0
   650  0901                     STR_28:	
   651  0901  344C               	retlw	76	;'L'
   652  0902  346F               	retlw	111	;'o'
   653  0903  3461               	retlw	97	;'a'
   654  0904  3464               	retlw	100	;'d'
   655  0905  3420               	retlw	32	;' '
   656  0906  343F               	retlw	63	;'?'
   657  0907  3400               	retlw	0
   658  0908                     STR_29:	
   659  0908  3453               	retlw	83	;'S'
   660  0909  3461               	retlw	97	;'a'
   661  090A  3476               	retlw	118	;'v'
   662  090B  3465               	retlw	101	;'e'
   663  090C  3420               	retlw	32	;' '
   664  090D  343F               	retlw	63	;'?'
   665  090E  3400               	retlw	0
   666  090F                     STR_33:	
   667  090F  344C               	retlw	76	;'L'
   668  0910  346F               	retlw	111	;'o'
   669  0911  3461               	retlw	97	;'a'
   670  0912  3464               	retlw	100	;'d'
   671  0913  3465               	retlw	101	;'e'
   672  0914  3464               	retlw	100	;'d'
   673  0915  3400               	retlw	0
   674  0916                     STR_22:	
   675  0916  3443               	retlw	67	;'C'
   676  0917  346F               	retlw	111	;'o'
   677  0918  346E               	retlw	110	;'n'
   678  0919  3466               	retlw	102	;'f'
   679  091A  3469               	retlw	105	;'i'
   680  091B  3467               	retlw	103	;'g'
   681  091C  3400               	retlw	0
   682  091D                     STR_12:	
   683  091D  3454               	retlw	84	;'T'
   684  091E  346F               	retlw	111	;'o'
   685  091F  346E               	retlw	110	;'n'
   686  0920  3465               	retlw	101	;'e'
   687  0921  3430               	retlw	48	;'0'
   688  0922  3400               	retlw	0
   689  0923                     STR_13:	
   690  0923  3454               	retlw	84	;'T'
   691  0924  346F               	retlw	111	;'o'
   692  0925  346E               	retlw	110	;'n'
   693  0926  3465               	retlw	101	;'e'
   694  0927  3431               	retlw	49	;'1'
   695  0928  3400               	retlw	0
   696  0929                     STR_14:	
   697  0929  3454               	retlw	84	;'T'
   698  092A  346F               	retlw	111	;'o'
   699  092B  346E               	retlw	110	;'n'
   700  092C  3465               	retlw	101	;'e'
   701  092D  3432               	retlw	50	;'2'
   702  092E  3400               	retlw	0
   703  092F                     STR_34:	
   704  092F  3453               	retlw	83	;'S'
   705  0930  3461               	retlw	97	;'a'
   706  0931  3476               	retlw	118	;'v'
   707  0932  3465               	retlw	101	;'e'
   708  0933  3464               	retlw	100	;'d'
   709  0934  3400               	retlw	0
   710  0935                     STR_21:	
   711  0935  3454               	retlw	84	;'T'
   712  0936  3465               	retlw	101	;'e'
   713  0937  346D               	retlw	109	;'m'
   714  0938  3470               	retlw	112	;'p'
   715  0939  346F               	retlw	111	;'o'
   716  093A  3400               	retlw	0
   717  093B                     STR_10:	
   718  093B  3452               	retlw	82	;'R'
   719  093C  3465               	retlw	101	;'e'
   720  093D  3473               	retlw	115	;'s'
   721  093E  3465               	retlw	101	;'e'
   722  093F  3474               	retlw	116	;'t'
   723  0940  3400               	retlw	0
   724  0941                     STR_7:	
   725  0941  344C               	retlw	76	;'L'
   726  0942  346F               	retlw	111	;'o'
   727  0943  3461               	retlw	97	;'a'
   728  0944  3464               	retlw	100	;'d'
   729  0945  3400               	retlw	0
   730  0946                     STR_8:	
   731  0946  3453               	retlw	83	;'S'
   732  0947  3461               	retlw	97	;'a'
   733  0948  3476               	retlw	118	;'v'
   734  0949  3465               	retlw	101	;'e'
   735  094A  3400               	retlw	0
   736  094B                     STR_9:	
   737  094B  3449               	retlw	73	;'I'
   738  094C  346E               	retlw	110	;'n'
   739  094D  3466               	retlw	102	;'f'
   740  094E  346F               	retlw	111	;'o'
   741  094F  3400               	retlw	0
   742  0950                     STR_31:	
   743  0950  344E               	retlw	78	;'N'
   744  0951  346F               	retlw	111	;'o'
   745  0952  3420               	retlw	32	;' '
   746  0953  3400               	retlw	0
   747  0954                     STR_32:	
   748  0954  3459               	retlw	89	;'Y'
   749  0955  3465               	retlw	101	;'e'
   750  0956  3473               	retlw	115	;'s'
   751  0957  3400               	retlw	0
   752  08BF                     
   753                           ; #config settings
   754  0000                     
   755                           	psect	cinit
   756  00B0                     start_initialization:	
   757  00B0                     __initialization:	
   758                           
   759                           ; Clear objects allocated to COMMON
   760  00B0  01F6               	clrf	__pbssCOMMON& (0+127)
   761  00B1  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   762  00B2  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   763  00B3  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   764                           
   765                           ; Clear objects allocated to BANK0
   766  00B4  305E               	movlw	low __pbssBANK0
   767  00B5  0084               	movwf	4
   768  00B6  3000               	movlw	high __pbssBANK0
   769  00B7  0085               	movwf	5
   770  00B8  3011               	movlw	17
   771  00B9  318D  25D4  3180   	fcall	clear_ram0
   772                           
   773                           ; Initialize objects allocated to BANK0
   774  00BC  30DC               	movlw	low __pidataBANK0
   775  00BD  0084               	movwf	4
   776  00BE  3087               	movlw	(high __pidataBANK0)| (0+128)
   777  00BF  0085               	movwf	5
   778  00C0  3020               	movlw	low __pdataBANK0
   779  00C1  0086               	movwf	6
   780  00C2  3000               	movlw	high __pdataBANK0
   781  00C3  0087               	movwf	7
   782  00C4  3023               	movlw	35
   783  00C5  318D  25CE  3180   	fcall	init_ram
   784                           
   785                           ; Initialize objects allocated to BANK1
   786  00C8  30E2               	movlw	low __pidataBANK1
   787  00C9  0084               	movwf	4
   788  00CA  308E               	movlw	(high __pidataBANK1)| (0+128)
   789  00CB  0085               	movwf	5
   790  00CC  30A0               	movlw	low __pdataBANK1
   791  00CD  0086               	movwf	6
   792  00CE  3000               	movlw	high __pdataBANK1
   793  00CF  0087               	movwf	7
   794  00D0  303E               	movlw	62
   795  00D1  318D  25CE         	fcall	init_ram
   796  00D3                     end_of_initialization:	
   797                           ;End of C runtime variable initialization code
   798                           
   799  00D3                     __end_of__initialization:	
   800  00D3  0020               	movlb	0
   801  00D4  3180  28D6         	ljmp	_main	;jump to C main() function
   802                           
   803                           	psect	bssCOMMON
   804  0076                     __pbssCOMMON:	
   805  0076                     _keyCount_:	
   806  0076                     	ds	2
   807  0078                     isr@eventPrescaler:	
   808  0078                     	ds	2
   809                           
   810                           	psect	bssBANK0
   811  005E                     __pbssBANK0:	
   812  005E                     _tempoCounter_:	
   813  005E                     	ds	3
   814  0061                     _valueLimit_:	
   815  0061                     	ds	2
   816  0063                     _beatCounter_:	
   817  0063                     	ds	1
   818  0064                     _currentMenuStatePtr_:	
   819  0064                     	ds	1
   820  0065                     _currentValuePtr:	
   821  0065                     	ds	1
   822  0066                     _duration_:	
   823  0066                     	ds	1
   824  0067                     _inputEvent_:	
   825  0067                     	ds	1
   826  0068                     _isMute_:	
   827  0068                     	ds	1
   828  0069                     _keyBeepCounter_:	
   829  0069                     	ds	1
   830  006A                     _machineState_:	
   831  006A                     	ds	1
   832  006B                     _outputEvent_:	
   833  006B                     	ds	1
   834  006C                     _portAState_:	
   835  006C                     	ds	1
   836  006D                     _stateReturnCounter_:	
   837  006D                     	ds	1
   838  006E                     main@prevPortAState:	
   839  006E                     	ds	1
   840                           
   841                           	psect	dataBANK0
   842  0020                     __pdataBANK0:	
   843  0020                     _MESSAGE_INFORMATION:	
   844  0020                     	ds	8
   845  0028                     _configration_:	
   846  0028                     	ds	11
   847  0033                     _menuStateConfirm_:	
   848  0033                     	ds	4
   849  0037                     _menuStateInformation_:	
   850  0037                     	ds	4
   851  003B                     _menuStateMain_:	
   852  003B                     	ds	4
   853  003F                     _menuStateTone_:	
   854  003F                     	ds	4
   855                           
   856                           	psect	dataBANK1
   857  00A0                     __pdataBANK1:	
   858  00A0                     main@F3053:	
   859  00A0                     	ds	6
   860  00A6                     _informationValueBuffer:	
   861  00A6                     	ds	28
   862  00C2                     _MESSAGE_MENU_ITEM_MAIN:	
   863  00C2                     	ds	20
   864  00D6                     _MESSAGE_MENU_ITEM_TONE:	
   865  00D6                     	ds	8
   866                           
   867                           	psect	clrtext
   868  0DD4                     clear_ram0:	
   869                           ;	Called with FSR0 containing the base address, and
   870                           ;	WREG with the size to clear
   871                           
   872  0DD4  0064               	clrwdt	;clear the watchdog before getting into this loop
   873  0DD5                     clrloop0:	
   874  0DD5  0180               	clrf	0	;clear RAM location pointed to by FSR
   875  0DD6  3101               	addfsr 0,1
   876  0DD7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   877  0DD8  2DD5               	goto	clrloop0	;have we reached the end yet?
   878  0DD9  3400               	retlw	0	;all done for this memory range, return
   879                           
   880                           	psect	inittext
   881  0DCE                     init_ram:	
   882  0DCE  00FE               	movwf	126
   883  0DCF                     initloop:	
   884  0DCF  0012               	moviw fsr0++
   885  0DD0  001E               	movwi fsr1++
   886  0DD1  0BFE               	decfsz	126,f
   887  0DD2  2DCF               	goto	initloop
   888  0DD3  3400               	retlw	0
   889                           
   890                           	psect	cstackCOMMON
   891  0070                     __pcstackCOMMON:	
   892  0070                     ?_initialize:	
   893  0070                     ?__parallel_lcd_Initialize:	
   894                           ; 0 bytes @ 0x0
   895                           
   896  0070                     ?__parallel_lcd_ClearRow:	
   897                           ; 0 bytes @ 0x0
   898                           
   899  0070                     ?_main:	
   900                           ; 0 bytes @ 0x0
   901                           
   902  0070                     ?_isr:	
   903                           ; 0 bytes @ 0x0
   904                           
   905  0070                     ??_isr:	
   906                           ; 0 bytes @ 0x0
   907                           
   908  0070                     ?__configuration_Save:	
   909                           ; 0 bytes @ 0x0
   910                           
   911  0070                     ?__configuration_Load:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0070                     ?__configuration_GetRomOffset:	
   915                           ; 1 bytes @ 0x0
   916                           
   917                           
   918                           ; 1 bytes @ 0x0
   919  0070                     	ds	4
   920  0074                     ?__private_parallel_lcd_WriteByte:	
   921  0074                     ?__configuration_WriteByte:	
   922                           ; 0 bytes @ 0x4
   923                           
   924  0074                     ??_initialize:	
   925                           ; 0 bytes @ 0x4
   926                           
   927  0074                     ?__configuration_ReadByte:	
   928                           ; 0 bytes @ 0x4
   929                           
   930  0074                     ?___bmul:	
   931                           ; 1 bytes @ 0x4
   932                           
   933  0074                     __private_parallel_lcd_WriteByte@r:	
   934                           ; 1 bytes @ 0x4
   935                           
   936  0074                     __configuration_WriteByte@data:	
   937                           ; 1 bytes @ 0x4
   938                           
   939  0074                     __configuration_ReadByte@memorySelect:	
   940                           ; 1 bytes @ 0x4
   941                           
   942  0074                     ___bmul@multiplicand:	
   943                           ; 1 bytes @ 0x4
   944                           
   945                           
   946                           ; 1 bytes @ 0x4
   947  0074                     	ds	1
   948  0075                     ??__private_parallel_lcd_WriteByte:	
   949  0075                     ??__configuration_ReadByte:	
   950                           ; 0 bytes @ 0x5
   951                           
   952  0075                     ??__configuration_WriteByte:	
   953                           ; 0 bytes @ 0x5
   954                           
   955  0075                     ??___bmul:	
   956                           ; 0 bytes @ 0x5
   957                           
   958  0075                     __private_parallel_lcd_WriteByte@data:	
   959                           ; 0 bytes @ 0x5
   960                           
   961  0075                     __configuration_WriteByte@address:	
   962                           ; 1 bytes @ 0x5
   963                           
   964  0075                     __configuration_ReadByte@address:	
   965                           ; 1 bytes @ 0x5
   966                           
   967                           
   968                           ; 1 bytes @ 0x5
   969  0075                     	ds	1
   970  0076                     ??__parallel_lcd_Initialize:	
   971  0076                     ??__parallel_lcd_WriteCharacter:	
   972                           ; 0 bytes @ 0x6
   973                           
   974  0076                     ??__configuration_GetRomOffset:	
   975                           ; 0 bytes @ 0x6
   976                           
   977                           
   978                           	psect	cstackBANK0
   979  0043                     __pcstackBANK0:	
   980                           ; 0 bytes @ 0x6
   981                           
   982  0043                     ?__parallel_lcd_WriteCharacter:	
   983  0043                     ?__parallel_lcd_WriteStringClearing:	
   984                           ; 0 bytes @ 0x0
   985                           
   986  0043                     ??__parallel_lcd_ClearRow:	
   987                           ; 0 bytes @ 0x0
   988                           
   989  0043                     ?__parallel_lcd_SetCgram:	
   990                           ; 0 bytes @ 0x0
   991                           
   992  0043                     ??__configuration_Save:	
   993                           ; 0 bytes @ 0x0
   994                           
   995  0043                     ??__configuration_Load:	
   996                           ; 0 bytes @ 0x0
   997                           
   998  0043                     __parallel_lcd_WriteCharacter@character:	
   999                           ; 0 bytes @ 0x0
  1000                           
  1001  0043                     ___bmul@product:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0043                     __parallel_lcd_WriteStringClearing@stringPtr:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0043                     __parallel_lcd_SetCgram@bitmap:	
  1008                           ; 2 bytes @ 0x0
  1009                           
  1010                           
  1011                           ; 2 bytes @ 0x0
  1012  0043                     	ds	1
  1013  0044                     __parallel_lcd_WriteCharacter@position:	
  1014  0044                     __parallel_lcd_ClearRow@rowSelect:	
  1015                           ; 1 bytes @ 0x1
  1016                           
  1017  0044                     ___bmul@multiplier:	
  1018                           ; 1 bytes @ 0x1
  1019                           
  1020                           
  1021                           ; 1 bytes @ 0x1
  1022  0044                     	ds	1
  1023  0045                     ?__parallel_lcd_WriteString:	
  1024  0045                     ??__parallel_lcd_WriteStringClearing:	
  1025                           ; 0 bytes @ 0x2
  1026                           
  1027  0045                     ??__parallel_lcd_SetCgram:	
  1028                           ; 0 bytes @ 0x2
  1029                           
  1030  0045                     __parallel_lcd_ClearRow@i:	
  1031                           ; 0 bytes @ 0x2
  1032                           
  1033  0045                     __configuration_Save@returnCode:	
  1034                           ; 1 bytes @ 0x2
  1035                           
  1036  0045                     __configuration_Load@ptrConfig:	
  1037                           ; 1 bytes @ 0x2
  1038                           
  1039  0045                     __parallel_lcd_WriteString@stringPtr:	
  1040                           ; 1 bytes @ 0x2
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0x2
  1044  0045                     	ds	1
  1045  0046                     __parallel_lcd_WriteStringClearing@position:	
  1046  0046                     __parallel_lcd_SetCgram@charCode:	
  1047                           ; 1 bytes @ 0x3
  1048                           
  1049  0046                     __configuration_Save@ptrConfig:	
  1050                           ; 1 bytes @ 0x3
  1051                           
  1052  0046                     __configuration_Load@romOffset:	
  1053                           ; 1 bytes @ 0x3
  1054                           
  1055                           
  1056                           ; 1 bytes @ 0x3
  1057  0046                     	ds	1
  1058  0047                     ??__parallel_lcd_WriteString:	
  1059  0047                     __parallel_lcd_WriteStringClearing@i:	
  1060                           ; 0 bytes @ 0x4
  1061                           
  1062  0047                     __parallel_lcd_SetCgram@i:	
  1063                           ; 1 bytes @ 0x4
  1064                           
  1065  0047                     __configuration_Save@romOffset:	
  1066                           ; 1 bytes @ 0x4
  1067                           
  1068  0047                     __configuration_Load@config:	
  1069                           ; 1 bytes @ 0x4
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x4
  1073  0047                     	ds	1
  1074  0048                     __parallel_lcd_WriteString@position:	
  1075  0048                     __configuration_Save@i:	
  1076                           ; 1 bytes @ 0x5
  1077                           
  1078  0048                     __configuration_Load@i:	
  1079                           ; 1 bytes @ 0x5
  1080                           
  1081                           
  1082                           ; 1 bytes @ 0x5
  1083  0048                     	ds	1
  1084  0049                     __configuration_Save@config:	
  1085                           
  1086                           ; 1 bytes @ 0x6
  1087  0049                     	ds	1
  1088  004A                     ??_main:	
  1089                           
  1090                           ; 0 bytes @ 0x7
  1091  004A                     	ds	4
  1092  004E                     main@valueString:	
  1093                           
  1094                           ; 6 bytes @ 0xB
  1095  004E                     	ds	6
  1096  0054                     main@isNonZero:	
  1097                           
  1098                           ; 1 bytes @ 0x11
  1099  0054                     	ds	1
  1100  0055                     main@tmpValue:	
  1101                           
  1102                           ; 2 bytes @ 0x12
  1103  0055                     	ds	2
  1104  0057                     main@romOffset:	
  1105                           
  1106                           ; 1 bytes @ 0x14
  1107  0057                     	ds	1
  1108  0058                     main@compareUnit:	
  1109                           
  1110                           ; 1 bytes @ 0x15
  1111  0058                     	ds	1
  1112  0059                     main@keyPressed:	
  1113                           
  1114                           ; 1 bytes @ 0x16
  1115  0059                     	ds	1
  1116  005A                     main@phase:	
  1117                           
  1118                           ; 1 bytes @ 0x17
  1119  005A                     	ds	1
  1120  005B                     main@returnCode:	
  1121                           
  1122                           ; 1 bytes @ 0x18
  1123  005B                     	ds	1
  1124  005C                     main@userId:	
  1125                           
  1126                           ; 1 bytes @ 0x19
  1127  005C                     	ds	1
  1128  005D                     main@i:	
  1129                           
  1130                           ; 1 bytes @ 0x1A
  1131  005D                     	ds	1
  1132                           
  1133                           	psect	maintext
  1134  00D6                     __pmaintext:	
  1135 ;;
  1136 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1137 ;;
  1138 ;; *************** function _main *****************
  1139 ;; Defined at:
  1140 ;;		line 196 in file "src/main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  compareUnit     1   21[BANK0 ] unsigned char 
  1145 ;;  i               1   26[BANK0 ] unsigned char 
  1146 ;;  userId          1   25[BANK0 ] unsigned char 
  1147 ;;  valueString     6   11[BANK0 ] unsigned char [6]
  1148 ;;  tmpValue        2   18[BANK0 ] unsigned int 
  1149 ;;  isNonZero       1   17[BANK0 ] unsigned char 
  1150 ;;  returnCode      1   24[BANK0 ] enum E2824
  1151 ;;  romOffset       1   20[BANK0 ] unsigned char 
  1152 ;;  keyPressed      1   22[BANK0 ] struct .
  1153 ;;  phase           1   23[BANK0 ] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;		None               void
  1156 ;; Registers used:
  1157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : B1F/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1163 ;;      Params:         0       0       0       0       0       0
  1164 ;;      Locals:         0      16       0       0       0       0
  1165 ;;      Temps:          0       4       0       0       0       0
  1166 ;;      Totals:         0      20       0       0       0       0
  1167 ;;Total ram usage:       20 bytes
  1168 ;; Hardware stack levels required when called:    3
  1169 ;; This function calls:
  1170 ;;		___bmul
  1171 ;;		__configuration_GetRomOffset
  1172 ;;		__configuration_Load
  1173 ;;		__configuration_ReadByte
  1174 ;;		__configuration_Save
  1175 ;;		__parallel_lcd_ClearRow
  1176 ;;		__parallel_lcd_Initialize
  1177 ;;		__parallel_lcd_SetCgram
  1178 ;;		__parallel_lcd_WriteCharacter
  1179 ;;		__parallel_lcd_WriteString
  1180 ;;		__parallel_lcd_WriteStringClearing
  1181 ;;		_initialize
  1182 ;; This function is called by:
  1183 ;;		Startup code after reset
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           
  1188                           ;psect for function _main
  1189  00D6                     _main:	
  1190                           
  1191                           ;main.c: 199: initialize( ) ;
  1192                           
  1193                           ;incstack = 0
  1194                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1195  00D6  3187  2775  3180   	fcall	_initialize
  1196                           
  1197                           ;main.c: 202: if( (~PORTA&0xE0) == 0xC0 )
  1198  00D9  0020               	movlb	0	; select bank0
  1199  00DA  090C               	comf	12,w	;volatile
  1200  00DB  00CA               	movwf	??_main
  1201  00DC  30E0               	movlw	224
  1202  00DD  054A               	andwf	??_main,w
  1203  00DE  3AC0               	xorlw	192
  1204  00DF  1D03               	skipz
  1205  00E0  28E6               	goto	l3270
  1206                           
  1207                           ;main.c: 203: machineState_ = STATE_INITIALIZE ;
  1208  00E1  300F               	movlw	15
  1209  00E2  00CA               	movwf	??_main
  1210  00E3  084A               	movf	??_main,w
  1211  00E4  00EA               	movwf	_machineState_
  1212  00E5  28E7               	goto	l3272
  1213  00E6                     l3270:	
  1214                           
  1215                           ;main.c: 204: else
  1216                           ;main.c: 205: machineState_ = STATE_BOOT ;
  1217  00E6  01EA               	clrf	_machineState_
  1218  00E7                     l3272:	
  1219                           
  1220                           ;main.c: 206: outputEvent_.accessEeprom = 1 ;
  1221  00E7  17EB               	bsf	_outputEvent_,7
  1222                           
  1223                           ;main.c: 209: PR2 = 124 ;
  1224  00E8  307C               	movlw	124
  1225  00E9  009B               	movwf	27	;volatile
  1226                           
  1227                           ;main.c: 210: {CCPR4L=(PR2>>1);} ;
  1228  00EA  361B               	lsrf	27,w	;volatile
  1229  00EB  0026               	movlb	6	; select bank6
  1230  00EC  0098               	movwf	24	;volatile
  1231                           
  1232                           ;main.c: 213: T4CONbits.TMR4ON = 1 ;
  1233  00ED  0028               	movlb	8	; select bank8
  1234  00EE  1517               	bsf	23,2	;volatile
  1235                           
  1236                           ;main.c: 216: T1CONbits.TMR1ON = 1 ;
  1237  00EF  0020               	movlb	0	; select bank0
  1238  00F0  1418               	bsf	24,0	;volatile
  1239                           
  1240                           ;main.c: 219: for( uint08_t phase = 0 ; phase < 0xE ; phase++ ) {
  1241  00F1  01DA               	clrf	main@phase
  1242  00F2  300E               	movlw	14
  1243  00F3  025A               	subwf	main@phase,w
  1244  00F4  1803               	btfsc	3,0
  1245  00F5  29AA               	goto	l238
  1246  00F6                     l237:	
  1247  00F6  0064               	clrwdt	;# 
  1248                           
  1249                           ;main.c: 223: TMR1 = 0x0000 ;
  1250  00F7  0020               	movlb	0	; select bank0
  1251  00F8  0196               	clrf	22	;volatile
  1252  00F9  0197               	clrf	23	;volatile
  1253                           
  1254                           ;main.c: 225: switch( phase ) {
  1255  00FA  2986               	goto	l3316
  1256  00FB                     l241:	
  1257                           ;main.c: 226: case 0x0:
  1258                           
  1259                           
  1260                           ;main.c: 227: case 0x2:
  1261                           ;main.c: 229: T2CONbits.TMR2ON = 1 ;
  1262  00FB  151C               	bsf	28,2	;volatile
  1263                           
  1264                           ;main.c: 230: break ;
  1265  00FC  299E               	goto	l248
  1266  00FD                     l244:	
  1267                           ;main.c: 232: case 0x1:
  1268                           
  1269                           
  1270                           ;main.c: 233: case 0xC:
  1271                           ;main.c: 235: T2CONbits.TMR2ON = 0 ;
  1272  00FD  111C               	bcf	28,2	;volatile
  1273                           
  1274                           ;main.c: 236: break ;
  1275  00FE  299E               	goto	l248
  1276  00FF                     l3290:	
  1277                           ;main.c: 238: case 0x3:
  1278                           
  1279                           
  1280                           ;main.c: 240: {
  1281                           ;main.c: 241: uint08_t userId ;
  1282                           ;main.c: 242: userId = _configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1283  00FF  01F4               	clrf	__configuration_ReadByte@memorySelect
  1284  0100  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1285  0101  3000               	movlw	0
  1286  0102  318D  25FA  3180   	fcall	__configuration_ReadByte
  1287  0105  0020               	movlb	0	; select bank0
  1288  0106  00CA               	movwf	??_main
  1289  0107  084A               	movf	??_main,w
  1290  0108  00DC               	movwf	main@userId
  1291                           
  1292                           ;main.c: 243: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1293  0109  085C               	movf	main@userId,w
  1294  010A  00CA               	movwf	??_main
  1295  010B  3004               	movlw	4
  1296  010C                     u2575:	
  1297  010C  36CA               	lsrf	??_main,f
  1298  010D  0B89               	decfsz	9,f
  1299  010E  290C               	goto	u2575
  1300  010F  084A               	movf	??_main,w
  1301  0110  3830               	iorlw	48
  1302  0111  00CB               	movwf	??_main+1
  1303  0112  084B               	movf	??_main+1,w
  1304  0113  0021               	movlb	1	; select bank1
  1305  0114  00A7               	movwf	(_informationValueBuffer^(0+128)+1)
  1306                           
  1307                           ;main.c: 244: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1308  0115  0020               	movlb	0	; select bank0
  1309  0116  085C               	movf	main@userId,w
  1310  0117  390F               	andlw	15
  1311  0118  3830               	iorlw	48
  1312  0119  00CA               	movwf	??_main
  1313  011A  084A               	movf	??_main,w
  1314  011B  0021               	movlb	1	; select bank1
  1315  011C  00A8               	movwf	(_informationValueBuffer^(0+128)+2)
  1316                           
  1317                           ;main.c: 245: userId = _configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1318  011D  01F4               	clrf	__configuration_ReadByte@memorySelect
  1319  011E  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1320  011F  3001               	movlw	1
  1321  0120  318D  25FA  3180   	fcall	__configuration_ReadByte
  1322  0123  0020               	movlb	0	; select bank0
  1323  0124  00CA               	movwf	??_main
  1324  0125  084A               	movf	??_main,w
  1325  0126  00DC               	movwf	main@userId
  1326                           
  1327                           ;main.c: 246: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1328  0127  085C               	movf	main@userId,w
  1329  0128  00CA               	movwf	??_main
  1330  0129  3004               	movlw	4
  1331  012A                     u2585:	
  1332  012A  36CA               	lsrf	??_main,f
  1333  012B  0B89               	decfsz	9,f
  1334  012C  292A               	goto	u2585
  1335  012D  084A               	movf	??_main,w
  1336  012E  3830               	iorlw	48
  1337  012F  00CB               	movwf	??_main+1
  1338  0130  084B               	movf	??_main+1,w
  1339  0131  0021               	movlb	1	; select bank1
  1340  0132  00AA               	movwf	(_informationValueBuffer^(0+128)+4)
  1341                           
  1342                           ;main.c: 247: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1343  0133  0020               	movlb	0	; select bank0
  1344  0134  085C               	movf	main@userId,w
  1345  0135  390F               	andlw	15
  1346  0136  3830               	iorlw	48
  1347  0137  00CA               	movwf	??_main
  1348  0138  084A               	movf	??_main,w
  1349  0139  0021               	movlb	1	; select bank1
  1350  013A  00AB               	movwf	(_informationValueBuffer^(0+128)+5)
  1351                           
  1352                           ;main.c: 248: }
  1353                           ;main.c: 249: break ;
  1354  013B  299E               	goto	l248
  1355  013C                     l3300:	
  1356                           ;main.c: 251: case 0x4:
  1357                           
  1358                           
  1359                           ;main.c: 253: _parallel_lcd_Initialize( ) ;
  1360  013C  318E  261E  3180   	fcall	__parallel_lcd_Initialize
  1361                           
  1362                           ;main.c: 256: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  1363  013F  3000               	movlw	low (_MESSAGE| (0+32768))
  1364  0140  0084               	movwf	4
  1365  0141  3088               	movlw	high (_MESSAGE| (0+32768))
  1366  0142  0085               	movwf	5
  1367  0143  3F00               	moviw [0]fsr0
  1368  0144  0020               	movlb	0	; select bank0
  1369  0145  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1370  0146  3F01               	moviw [1]fsr0
  1371  0147  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1372  0148  3080               	movlw	128
  1373  0149  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  1374                           
  1375                           ;main.c: 257: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ INFOR
      +                          MATION_ITEM_VERSION ] ) ;
  1376  014C  0020               	movlb	0	; select bank0
  1377  014D  0820               	movf	_MESSAGE_INFORMATION,w
  1378  014E  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1379  014F  0821               	movf	_MESSAGE_INFORMATION+1,w
  1380  0150  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1381  0151  30C0               	movlw	192
  1382  0152  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  1383                           
  1384                           ;main.c: 258: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ INFORMATI
      +                          ON_ITEM_VERSION ] ) ;
  1385  0155  30A6               	movlw	low _informationValueBuffer
  1386  0156  0020               	movlb	0	; select bank0
  1387  0157  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  1388  0158  3000               	movlw	high _informationValueBuffer
  1389  0159  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  1390  015A  30CA               	movlw	202
  1391  015B  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  1392  015E                     l3308:	
  1393                           ;main.c: 260: case 0x6:
  1394                           
  1395                           
  1396                           ;main.c: 262: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1397  015E  3041               	movlw	low ((_BITMAP| (0+32768)+8))
  1398  015F  0020               	movlb	0	; select bank0
  1399  0160  00C3               	movwf	__parallel_lcd_SetCgram@bitmap
  1400  0161  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1401  0162  00C4               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1402  0163  3035               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1403  0164  0084               	movwf	4
  1404  0165  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1405  0166  0085               	movwf	5
  1406  0167  0800               	movf	0,w	;code access
  1407  0168  318E  2682  3180   	fcall	__parallel_lcd_SetCgram
  1408                           
  1409                           ;main.c: 263: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1410  016B  3049               	movlw	low ((_BITMAP| (0+32768)+16))
  1411  016C  0020               	movlb	0	; select bank0
  1412  016D  00C3               	movwf	__parallel_lcd_SetCgram@bitmap
  1413  016E  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1414  016F  00C4               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1415  0170  3036               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1416  0171  0084               	movwf	4
  1417  0172  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1418  0173  0085               	movwf	5
  1419  0174  0800               	movf	0,w	;code access
  1420  0175  318E  2682  3180   	fcall	__parallel_lcd_SetCgram
  1421                           
  1422                           ;main.c: 264: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1423  0178  3039               	movlw	low (_BITMAP| (0+32768))
  1424  0179  0020               	movlb	0	; select bank0
  1425  017A  00C3               	movwf	__parallel_lcd_SetCgram@bitmap
  1426  017B  3088               	movlw	high (_BITMAP| (0+32768))
  1427  017C  00C4               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1428  017D  3034               	movlw	low (_CHAR_CODE| (0+32768))
  1429  017E  0084               	movwf	4
  1430  017F  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1431  0180  0085               	movwf	5
  1432  0181  0800               	movf	0,w	;code access
  1433  0182  318E  2682  3180   	fcall	__parallel_lcd_SetCgram
  1434                           
  1435                           ;main.c: 267: }
  1436                           
  1437                           ;main.c: 265: break ;
  1438  0185  299E               	goto	l248
  1439  0186                     l3316:	
  1440  0186  0020               	movlb	0	; select bank0
  1441  0187  085A               	movf	main@phase,w
  1442                           
  1443                           ; Switch size 1, requested type "space"
  1444                           ; Number of cases is 7, Range of values is 0 to 12
  1445                           ; switch strategies available:
  1446                           ; Name         Instructions Cycles
  1447                           ; simple_byte           22    12 (average)
  1448                           ; direct_byte           32     6 (fixed)
  1449                           ; jumptable            260     6 (fixed)
  1450                           ;	Chosen strategy is simple_byte
  1451  0188  3A00               	xorlw	0	; case 0
  1452  0189  1903               	skipnz
  1453  018A  28FB               	goto	l241
  1454  018B  3A01               	xorlw	1	; case 1
  1455  018C  1903               	skipnz
  1456  018D  28FD               	goto	l244
  1457  018E  3A03               	xorlw	3	; case 2
  1458  018F  1903               	skipnz
  1459  0190  28FB               	goto	l241
  1460  0191  3A01               	xorlw	1	; case 3
  1461  0192  1903               	skipnz
  1462  0193  28FF               	goto	l3290
  1463  0194  3A07               	xorlw	7	; case 4
  1464  0195  1903               	skipnz
  1465  0196  293C               	goto	l3300
  1466  0197  3A02               	xorlw	2	; case 6
  1467  0198  1903               	skipnz
  1468  0199  295E               	goto	l3308
  1469  019A  3A0A               	xorlw	10	; case 12
  1470  019B  1903               	skipnz
  1471  019C  28FD               	goto	l244
  1472  019D  299E               	goto	l248
  1473  019E                     l248:	
  1474                           ;main.c: 269: while( !PIR1bits.TMR1IF ) ;
  1475                           
  1476  019E  0020               	movlb	0	; select bank0
  1477  019F  1C11               	btfss	17,0	;volatile
  1478  01A0  299E               	goto	l248
  1479                           
  1480                           ;main.c: 270: PIR1bits.TMR1IF = 0 ;
  1481  01A1  1011               	bcf	17,0	;volatile
  1482  01A2  3001               	movlw	1
  1483  01A3  00CA               	movwf	??_main
  1484  01A4  084A               	movf	??_main,w
  1485  01A5  07DA               	addwf	main@phase,f
  1486  01A6  300E               	movlw	14
  1487  01A7  025A               	subwf	main@phase,w
  1488  01A8  1C03               	skipc
  1489  01A9  28F6               	goto	l237
  1490  01AA                     l238:	
  1491                           
  1492                           ;main.c: 272: }
  1493                           ;main.c: 276: INTCONbits.PEIE = 1 ;
  1494  01AA  170B               	bsf	11,6	;volatile
  1495                           
  1496                           ;main.c: 277: T6CONbits.TMR6ON = 1 ;
  1497  01AB  0028               	movlb	8	; select bank8
  1498  01AC  151E               	bsf	30,2	;volatile
  1499                           
  1500                           ;main.c: 278: PIE3bits.TMR6IE = 1 ;
  1501  01AD  0021               	movlb	1	; select bank1
  1502  01AE  1593               	bsf	19,3	;volatile
  1503  01AF                     l251:	
  1504                           ;main.c: 281: for( ; ; ) {
  1505                           
  1506  01AF  0064               	clrwdt	;# 
  1507                           
  1508                           ;main.c: 287: static UniPortAState prevPortAState = { 0x00 } ;
  1509                           ;main.c: 288: UniPortAState keyPressed ;
  1510                           ;main.c: 290: keyPressed.all = ( portAState_.all ^ prevPortAState.all ) & portAState_.al
      +                          l ;
  1511  01B0  0020               	movlb	0	; select bank0
  1512  01B1  086C               	movf	_portAState_,w
  1513  01B2  066E               	xorwf	main@prevPortAState,w
  1514  01B3  056C               	andwf	_portAState_,w
  1515  01B4  00CA               	movwf	??_main
  1516  01B5  084A               	movf	??_main,w
  1517  01B6  00D9               	movwf	main@keyPressed
  1518                           
  1519                           ;main.c: 291: prevPortAState.all = portAState_.all ;
  1520  01B7  086C               	movf	_portAState_,w
  1521  01B8  00CA               	movwf	??_main
  1522  01B9  084A               	movf	??_main,w
  1523  01BA  00EE               	movwf	main@prevPortAState
  1524                           
  1525                           ;main.c: 293: if( keyPressed.keyMenu ) {
  1526  01BB  1AD9               	btfsc	main@keyPressed,5
  1527                           
  1528                           ;main.c: 294: inputEvent_.keyPressMenu = 1 ;
  1529  01BC  1567               	bsf	_inputEvent_,2
  1530                           
  1531                           ;main.c: 295: }
  1532                           ;main.c: 297: if( keyPressed.keyUp ) {
  1533  01BD  1FD9               	btfss	main@keyPressed,7
  1534  01BE  29C4               	goto	l255
  1535                           
  1536                           ;main.c: 298: if( portAState_.keyDown )
  1537  01BF  1F6C               	btfss	_portAState_,6
  1538  01C0  29C3               	goto	l256
  1539                           
  1540                           ;main.c: 299: inputEvent_.keyPressUpDown = 1 ;
  1541  01C1  15E7               	bsf	_inputEvent_,3
  1542  01C2  29C4               	goto	l255
  1543  01C3                     l256:	
  1544                           
  1545                           ;main.c: 300: else
  1546                           ;main.c: 301: inputEvent_.keyPressUp = 1 ;
  1547  01C3  1467               	bsf	_inputEvent_,0
  1548  01C4                     l255:	
  1549                           
  1550                           ;main.c: 302: }
  1551                           ;main.c: 304: if( keyPressed.keyDown ) {
  1552  01C4  1F59               	btfss	main@keyPressed,6
  1553  01C5  29CB               	goto	l258
  1554                           
  1555                           ;main.c: 305: if( portAState_.keyUp )
  1556  01C6  1FEC               	btfss	_portAState_,7
  1557  01C7  29CA               	goto	l259
  1558                           
  1559                           ;main.c: 306: inputEvent_.keyPressUpDown = 1 ;
  1560  01C8  15E7               	bsf	_inputEvent_,3
  1561  01C9  29CB               	goto	l258
  1562  01CA                     l259:	
  1563                           
  1564                           ;main.c: 307: else
  1565                           ;main.c: 308: inputEvent_.keyPressDown = 1 ;
  1566  01CA  14E7               	bsf	_inputEvent_,1
  1567  01CB                     l258:	
  1568                           
  1569                           ;main.c: 309: }
  1570                           ;main.c: 311: if( (inputEvent_.keyPressHeldUp&&!(inputEvent_.keyPressHeldUp=0)) )
  1571  01CB  1E67               	btfss	_inputEvent_,4
  1572  01CC  29CF               	goto	l261
  1573  01CD  1267               	bcf	_inputEvent_,4
  1574                           
  1575                           ;main.c: 312: inputEvent_.keyPressUp = 1 ;
  1576  01CE  1467               	bsf	_inputEvent_,0
  1577  01CF                     l261:	
  1578                           
  1579                           ;main.c: 314: if( (inputEvent_.keyPressHeldDown&&!(inputEvent_.keyPressHeldDown=0)) )
  1580  01CF  1EE7               	btfss	_inputEvent_,5
  1581  01D0  29D3               	goto	l3342
  1582  01D1  12E7               	bcf	_inputEvent_,5
  1583                           
  1584                           ;main.c: 315: inputEvent_.keyPressDown = 1 ;
  1585  01D2  14E7               	bsf	_inputEvent_,1
  1586  01D3                     l3342:	
  1587                           
  1588                           ;main.c: 317: if( inputEvent_.all ) {
  1589  01D3  0867               	movf	_inputEvent_,w
  1590  01D4  1D03               	btfss	3,2
  1591  01D5  29E3               	goto	l3354
  1592  01D6  29EB               	goto	l263
  1593  01D7                     l3346:	
  1594                           ;main.c: 324: default:
  1595                           
  1596                           ;main.c: 320: case STATE_ADJUST_OSCILLATOR_TUNE:
  1597                           ;main.c: 322: break ;
  1598                           
  1599                           ;main.c: 319: case STATE_ADJUST_TONE:
  1600                           
  1601                           ;main.c: 318: switch( machineState_ ) {
  1602                           
  1603                           
  1604                           ;main.c: 325: keyBeepCounter_ = 0x20 ;
  1605  01D7  3020               	movlw	32
  1606  01D8  00CA               	movwf	??_main
  1607  01D9  084A               	movf	??_main,w
  1608  01DA  00E9               	movwf	_keyBeepCounter_
  1609                           
  1610                           ;main.c: 326: PR2 = 124 ;
  1611  01DB  307C               	movlw	124
  1612  01DC  009B               	movwf	27	;volatile
  1613                           
  1614                           ;main.c: 327: {CCPR4L=(PR2>>1);} ;
  1615  01DD  361B               	lsrf	27,w	;volatile
  1616  01DE  0026               	movlb	6	; select bank6
  1617  01DF  0098               	movwf	24	;volatile
  1618                           
  1619                           ;main.c: 328: T2CONbits.TMR2ON = 1 ;
  1620  01E0  0020               	movlb	0	; select bank0
  1621  01E1  151C               	bsf	28,2	;volatile
  1622                           
  1623                           ;main.c: 330: }
  1624                           
  1625                           ;main.c: 329: break ;
  1626  01E2  29EB               	goto	l263
  1627  01E3                     l3354:	
  1628  01E3  086A               	movf	_machineState_,w
  1629                           
  1630                           ; Switch size 1, requested type "space"
  1631                           ; Number of cases is 2, Range of values is 7 to 8
  1632                           ; switch strategies available:
  1633                           ; Name         Instructions Cycles
  1634                           ; simple_byte            7     4 (average)
  1635                           ; direct_byte           13     9 (fixed)
  1636                           ; jumptable            263     9 (fixed)
  1637                           ;	Chosen strategy is simple_byte
  1638  01E4  3A07               	xorlw	7	; case 7
  1639  01E5  1903               	skipnz
  1640  01E6  29EB               	goto	l263
  1641  01E7  3A0F               	xorlw	15	; case 8
  1642  01E8  1903               	skipnz
  1643  01E9  29EB               	goto	l263
  1644  01EA  29D7               	goto	l3346
  1645  01EB                     l263:	
  1646                           
  1647                           ;main.c: 332: }
  1648                           ;main.c: 335: if( (outputEvent_.accessEeprom&&!(outputEvent_.accessEeprom=0)) ) {
  1649  01EB  1FEB               	btfss	_outputEvent_,7
  1650  01EC  2A84               	goto	l3388
  1651  01ED  13EB               	bcf	_outputEvent_,7
  1652                           
  1653                           ;main.c: 337: INTCONbits.GIE=0 ;
  1654  01EE  138B               	bcf	11,7	;volatile
  1655                           
  1656                           ;main.c: 339: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  1657  01EF  01DB               	clrf	main@returnCode
  1658                           
  1659                           ;main.c: 341: switch( machineState_ ) {
  1660  01F0  2A03               	goto	l3366
  1661  01F1                     l271:	
  1662                           ;main.c: 343: case STATE_BOOT:
  1663                           
  1664                           
  1665                           ;main.c: 344: machineState_ = STATE_METRONOME ;
  1666  01F1  01EA               	clrf	_machineState_
  1667  01F2  0AEA               	incf	_machineState_,f
  1668                           
  1669                           ;main.c: 345: outputEvent_.changeState = 1 ;
  1670  01F3  146B               	bsf	_outputEvent_,0
  1671  01F4                     l3360:	
  1672                           ;main.c: 346: case STATE_LOAD:
  1673                           
  1674                           
  1675                           ;main.c: 347: returnCode = _configuration_Load( &configration_ ) ;
  1676  01F4  3028               	movlw	(low (_configration_| 0))& (0+255)
  1677  01F5  318F  2720  3180   	fcall	__configuration_Load
  1678  01F8  29FE               	goto	L1
  1679  01F9                     l274:	
  1680                           ;main.c: 350: case STATE_INITIALIZE:
  1681                           
  1682                           ;main.c: 348: break ;
  1683                           
  1684                           
  1685                           ;main.c: 351: outputEvent_.changeState = 1 ;
  1686  01F9  146B               	bsf	_outputEvent_,0
  1687  01FA                     l3362:	
  1688                           ;main.c: 352: case STATE_SAVE:
  1689                           
  1690                           
  1691                           ;main.c: 353: returnCode = _configuration_Save( &configration_ ) ;
  1692  01FA  3028               	movlw	(low (_configration_| 0))& (0+255)
  1693  01FB  318F  2772  3180   	fcall	__configuration_Save
  1694  01FE                     L1:	
  1695  01FE  0020               	movlb	0	; select bank0
  1696  01FF  00CA               	movwf	??_main
  1697  0200  084A               	movf	??_main,w
  1698  0201  00DB               	movwf	main@returnCode
  1699                           
  1700                           ;main.c: 356: }
  1701                           
  1702                           ;main.c: 354: break ;
  1703  0202  2A11               	goto	l273
  1704  0203                     l3366:	
  1705  0203  086A               	movf	_machineState_,w
  1706                           
  1707                           ; Switch size 1, requested type "space"
  1708                           ; Number of cases is 4, Range of values is 0 to 15
  1709                           ; switch strategies available:
  1710                           ; Name         Instructions Cycles
  1711                           ; simple_byte           13     7 (average)
  1712                           ; direct_byte           38     6 (fixed)
  1713                           ; jumptable            260     6 (fixed)
  1714                           ;	Chosen strategy is simple_byte
  1715  0204  3A00               	xorlw	0	; case 0
  1716  0205  1903               	skipnz
  1717  0206  29F1               	goto	l271
  1718  0207  3A0B               	xorlw	11	; case 11
  1719  0208  1903               	skipnz
  1720  0209  29FA               	goto	l3362
  1721  020A  3A06               	xorlw	6	; case 13
  1722  020B  1903               	skipnz
  1723  020C  29F4               	goto	l3360
  1724  020D  3A02               	xorlw	2	; case 15
  1725  020E  1903               	skipnz
  1726  020F  29F9               	goto	l274
  1727  0210  2A11               	goto	l273
  1728  0211                     l273:	
  1729                           
  1730                           ;main.c: 357: outputEvent_.resetMetronome = 1 ;
  1731  0211  15EB               	bsf	_outputEvent_,3
  1732                           
  1733                           ;main.c: 359: uint08_t romOffset = _configuration_GetRomOffset( ) ;
  1734  0212  318D  25C9  3180   	fcall	__configuration_GetRomOffset
  1735  0215  0020               	movlb	0	; select bank0
  1736  0216  00CA               	movwf	??_main
  1737  0217  084A               	movf	??_main,w
  1738  0218  00D7               	movwf	main@romOffset
  1739                           
  1740                           ;main.c: 360: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][3] = HEX_TABLE[ romO
      +                          ffset >> 4 ] ;
  1741  0219  0857               	movf	main@romOffset,w
  1742  021A  00CA               	movwf	??_main
  1743  021B  3004               	movlw	4
  1744  021C                     u2705:	
  1745  021C  36CA               	lsrf	??_main,f
  1746  021D  0B89               	decfsz	9,f
  1747  021E  2A1C               	goto	u2705
  1748  021F  084A               	movf	??_main,w
  1749  0220  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1750  0221  0084               	movwf	4
  1751  0222  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1752  0223  1803               	skipnc
  1753  0224  3E01               	addlw	1
  1754  0225  0085               	movwf	5
  1755  0226  0800               	movf	0,w	;code access
  1756  0227  00CB               	movwf	??_main+1
  1757  0228  084B               	movf	??_main+1,w
  1758  0229  0021               	movlb	1	; select bank1
  1759  022A  00B0               	movwf	(_informationValueBuffer^(0+128)+10)
  1760                           
  1761                           ;main.c: 361: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ romO
      +                          ffset & 0x0F ] ;
  1762  022B  0020               	movlb	0	; select bank0
  1763  022C  0857               	movf	main@romOffset,w
  1764  022D  390F               	andlw	15
  1765  022E  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1766  022F  0084               	movwf	4
  1767  0230  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1768  0231  1803               	skipnc
  1769  0232  3E01               	addlw	1
  1770  0233  0085               	movwf	5
  1771  0234  0800               	movf	0,w	;code access
  1772  0235  00CA               	movwf	??_main
  1773  0236  084A               	movf	??_main,w
  1774  0237  0021               	movlb	1	; select bank1
  1775  0238  00B1               	movwf	(_informationValueBuffer^(0+128)+11)
  1776                           
  1777                           ;main.c: 362: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][3] = HEX_TABLE[ con
      +                          figration_.writeCount >> 4 ] ;
  1778  0239  0020               	movlb	0	; select bank0
  1779  023A  0828               	movf	_configration_,w
  1780  023B  00CA               	movwf	??_main
  1781  023C  3004               	movlw	4
  1782  023D                     u2715:	
  1783  023D  36CA               	lsrf	??_main,f
  1784  023E  0B89               	decfsz	9,f
  1785  023F  2A3D               	goto	u2715
  1786  0240  084A               	movf	??_main,w
  1787  0241  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1788  0242  0084               	movwf	4
  1789  0243  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1790  0244  1803               	skipnc
  1791  0245  3E01               	addlw	1
  1792  0246  0085               	movwf	5
  1793  0247  0800               	movf	0,w	;code access
  1794  0248  00CB               	movwf	??_main+1
  1795  0249  084B               	movf	??_main+1,w
  1796  024A  0021               	movlb	1	; select bank1
  1797  024B  00B7               	movwf	(_informationValueBuffer^(0+128)+17)
  1798                           
  1799                           ;main.c: 363: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          figration_.writeCount & 0x0F ] ;
  1800  024C  0020               	movlb	0	; select bank0
  1801  024D  0828               	movf	_configration_,w
  1802  024E  390F               	andlw	15
  1803  024F  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1804  0250  0084               	movwf	4
  1805  0251  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1806  0252  1803               	skipnc
  1807  0253  3E01               	addlw	1
  1808  0254  0085               	movwf	5
  1809  0255  0800               	movf	0,w	;code access
  1810  0256  00CA               	movwf	??_main
  1811  0257  084A               	movf	??_main,w
  1812  0258  0021               	movlb	1	; select bank1
  1813  0259  00B8               	movwf	(_informationValueBuffer^(0+128)+18)
  1814                           
  1815                           ;main.c: 364: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][3] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  1816  025A  0020               	movlb	0	; select bank0
  1817  025B  085B               	movf	main@returnCode,w
  1818  025C  00CA               	movwf	??_main
  1819  025D  3004               	movlw	4
  1820  025E                     u2725:	
  1821  025E  36CA               	lsrf	??_main,f
  1822  025F  0B89               	decfsz	9,f
  1823  0260  2A5E               	goto	u2725
  1824  0261  084A               	movf	??_main,w
  1825  0262  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1826  0263  0084               	movwf	4
  1827  0264  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1828  0265  1803               	skipnc
  1829  0266  3E01               	addlw	1
  1830  0267  0085               	movwf	5
  1831  0268  0800               	movf	0,w	;code access
  1832  0269  00CB               	movwf	??_main+1
  1833  026A  084B               	movf	??_main+1,w
  1834  026B  0021               	movlb	1	; select bank1
  1835  026C  00BE               	movwf	(_informationValueBuffer^(0+128)+24)
  1836                           
  1837                           ;main.c: 365: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  1838  026D  0020               	movlb	0	; select bank0
  1839  026E  085B               	movf	main@returnCode,w
  1840  026F  390F               	andlw	15
  1841  0270  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1842  0271  0084               	movwf	4
  1843  0272  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1844  0273  1803               	skipnc
  1845  0274  3E01               	addlw	1
  1846  0275  0085               	movwf	5
  1847  0276  0800               	movf	0,w	;code access
  1848  0277  00CA               	movwf	??_main
  1849  0278  084A               	movf	??_main,w
  1850  0279  0021               	movlb	1	; select bank1
  1851  027A  00BF               	movwf	(_informationValueBuffer^(0+128)+25)
  1852                           
  1853                           ;main.c: 367: if( returnCode )
  1854  027B  0020               	movlb	0	; select bank0
  1855  027C  085B               	movf	main@returnCode,w
  1856  027D  1903               	btfsc	3,2
  1857  027E  2A83               	goto	l3386
  1858                           
  1859                           ;main.c: 368: machineState_ = STATE_ERROR ;
  1860  027F  3011               	movlw	17
  1861  0280  00CA               	movwf	??_main
  1862  0281  084A               	movf	??_main,w
  1863  0282  00EA               	movwf	_machineState_
  1864  0283                     l3386:	
  1865                           
  1866                           ;main.c: 370: INTCONbits.GIE=1 ;
  1867  0283  178B               	bsf	11,7	;volatile
  1868  0284                     l3388:	
  1869                           
  1870                           ;main.c: 372: }
  1871                           ;main.c: 375: if( (inputEvent_.keyPressUpDown&&!(inputEvent_.keyPressUpDown=0)) ) {
  1872  0284  1DE7               	btfss	_inputEvent_,3
  1873  0285  2A92               	goto	l277
  1874  0286  11E7               	bcf	_inputEvent_,3
  1875                           
  1876                           ;main.c: 376: if( machineState_ == STATE_METRONOME ) {
  1877  0287  036A               	decf	_machineState_,w
  1878  0288  1D03               	btfss	3,2
  1879  0289  2A92               	goto	l277
  1880                           
  1881                           ;main.c: 377: {if(isMute_){isMute_=0;}else{isMute_=1;}} ;
  1882  028A  0868               	movf	_isMute_,w
  1883  028B  1903               	btfsc	3,2
  1884  028C  2A8F               	goto	l279
  1885  028D  01E8               	clrf	_isMute_
  1886  028E  2A91               	goto	l280
  1887  028F                     l279:	
  1888  028F  01E8               	clrf	_isMute_
  1889  0290  0AE8               	incf	_isMute_,f
  1890  0291                     l280:	
  1891                           
  1892                           ;main.c: 378: outputEvent_.changeMessage = 1 ;
  1893  0291  14EB               	bsf	_outputEvent_,1
  1894  0292                     l277:	
  1895                           
  1896                           ;main.c: 379: }
  1897                           ;main.c: 380: }
  1898                           ;main.c: 383: if( (inputEvent_.keyPressMenu&&!(inputEvent_.keyPressMenu=0)) ) {
  1899  0292  1D67               	btfss	_inputEvent_,2
  1900  0293  2AF2               	goto	l281
  1901  0294  1167               	bcf	_inputEvent_,2
  1902                           
  1903                           ;main.c: 384: outputEvent_.changeState = 1 ;
  1904  0295  146B               	bsf	_outputEvent_,0
  1905                           
  1906                           ;main.c: 386: switch( machineState_ ) {
  1907  0296  2AE5               	goto	l3464
  1908  0297                     l285:	
  1909                           ;main.c: 390: case MENU_ITEM_MAIN_RETURN:
  1910                           
  1911                           ;main.c: 389: switch( menuStateMain_.select ) {
  1912                           
  1913                           ;main.c: 388: case STATE_MENU_MAIN:
  1914                           
  1915                           
  1916                           ;main.c: 391: machineState_ = STATE_METRONOME ;
  1917  0297  01EA               	clrf	_machineState_
  1918  0298  0AEA               	incf	_machineState_,f
  1919                           
  1920                           ;main.c: 392: break ;
  1921  0299  2AF2               	goto	l281
  1922  029A                     l3400:	
  1923                           ;main.c: 394: case MENU_ITEM_MAIN_BEAT_COUNT:
  1924                           
  1925                           
  1926                           ;main.c: 395: machineState_ = STATE_ADJUST_BEAT_COUNT ;
  1927  029A  3004               	movlw	4
  1928  029B  2ADD               	goto	L19
  1929  029C                     l3402:	
  1930                           ;main.c: 398: case MENU_ITEM_MAIN_TONE_MENU:
  1931                           
  1932                           ;main.c: 396: break ;
  1933                           
  1934                           
  1935                           ;main.c: 399: machineState_ = STATE_MENU_TONE ;
  1936  029C  3003               	movlw	3
  1937  029D  00CA               	movwf	??_main
  1938  029E  084A               	movf	??_main,w
  1939  029F  00EA               	movwf	_machineState_
  1940                           
  1941                           ;main.c: 400: menuStateTone_.select = 0 ;
  1942  02A0  01BF               	clrf	_menuStateTone_
  1943                           
  1944                           ;main.c: 401: menuStateTone_.cursorPosition = 0 ;
  1945  02A1  01C0               	clrf	_menuStateTone_+1
  1946                           
  1947                           ;main.c: 402: break ;
  1948  02A2  2AF2               	goto	l281
  1949  02A3                     l3408:	
  1950                           ;main.c: 404: case MENU_ITEM_MAIN_ADJUST_DURATION:
  1951                           
  1952                           
  1953                           ;main.c: 405: machineState_ = STATE_ADJUST_DURATION ;
  1954  02A3  3005               	movlw	5
  1955  02A4  2ADD               	goto	L19
  1956  02A5                     l3410:	
  1957                           ;main.c: 408: case MENU_ITEM_MAIN_PULSE_WIDTH:
  1958                           
  1959                           ;main.c: 406: break ;
  1960                           
  1961                           
  1962                           ;main.c: 409: machineState_ = STATE_ADJUST_PULSE_WIDTH ;
  1963  02A5  3006               	movlw	6
  1964  02A6  2ADD               	goto	L19
  1965  02A7                     l3412:	
  1966                           ;main.c: 412: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  1967                           
  1968                           ;main.c: 410: break ;
  1969                           
  1970                           
  1971                           ;main.c: 413: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  1972  02A7  3008               	movlw	8
  1973  02A8  2ADD               	goto	L19
  1974  02A9                     l3414:	
  1975                           ;main.c: 416: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  1976                           
  1977                           ;main.c: 414: break ;
  1978                           
  1979                           
  1980                           ;main.c: 417: machineState_ = STATE_CONFIRM_LOAD ;
  1981  02A9  300C               	movlw	12
  1982  02AA  2ADD               	goto	L19
  1983  02AB                     l3416:	
  1984                           ;main.c: 420: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  1985                           
  1986                           ;main.c: 418: break ;
  1987                           
  1988                           
  1989                           ;main.c: 421: machineState_ = STATE_CONFIRM_SAVE ;
  1990  02AB  300A               	movlw	10
  1991  02AC  2ADD               	goto	L19
  1992  02AD                     l3418:	
  1993                           ;main.c: 424: case MENU_ITEM_MAIN_INFORMATION:
  1994                           
  1995                           ;main.c: 422: break ;
  1996                           
  1997                           
  1998                           ;main.c: 425: machineState_ = STATE_INFORMATION ;
  1999  02AD  3009               	movlw	9
  2000  02AE  2ADD               	goto	L19
  2001  02AF                     l3420:	
  2002                           ;main.c: 428: case MENU_ITEM_MAIN_RESET:
  2003                           
  2004                           ;main.c: 426: break ;
  2005                           
  2006                           
  2007                           ;main.c: 429: machineState_ = STATE_CONFIRM_RESET ;
  2008  02AF  300E               	movlw	14
  2009  02B0  2ADD               	goto	L19
  2010  02B1                     l3424:	
  2011                           ;main.c: 432: }
  2012                           
  2013                           ;main.c: 430: break ;
  2014                           
  2015  02B1  083B               	movf	_menuStateMain_,w
  2016                           
  2017                           ; Switch size 1, requested type "space"
  2018                           ; Number of cases is 10, Range of values is 0 to 9
  2019                           ; switch strategies available:
  2020                           ; Name         Instructions Cycles
  2021                           ; direct_byte           26     6 (fixed)
  2022                           ; simple_byte           31    16 (average)
  2023                           ; jumptable            260     6 (fixed)
  2024                           ;	Chosen strategy is direct_byte
  2025  02B2  0084               	movwf	4
  2026  02B3  300A               	movlw	10
  2027  02B4  0204               	subwf	4,w
  2028  02B5  1803               	skipnc
  2029  02B6  2AF2               	goto	l281
  2030  02B7  3189               	movlp	high S3906
  2031  02B8  3504               	lslf	4,w
  2032  02B9  3ED8               	addlw	low S3906
  2033  02BA  0082               	movwf	2
  2034                           
  2035                           ;main.c: 433: break ;
  2036  02BB  2AF2               	goto	l281
  2037  02BC                     l3426:	
  2038                           ;main.c: 435: case STATE_MENU_TONE:
  2039                           
  2040                           
  2041                           ;main.c: 436: if( menuStateTone_.select == MENU_ITEM_TONE_RETURN )
  2042  02BC  083F               	movf	_menuStateTone_,w
  2043  02BD  1903               	btfsc	3,2
  2044  02BE  2AD9               	goto	L32
  2045                           
  2046                           ;main.c: 438: else
  2047                           ;main.c: 439: machineState_ = STATE_ADJUST_TONE ;
  2048                           
  2049                           ;main.c: 437: machineState_ = STATE_MENU_MAIN ;
  2050  02BF  3007               	movlw	7
  2051  02C0  2ADD               	goto	L19
  2052  02C1                     l3432:	
  2053                           ;main.c: 442: case STATE_CONFIRM_LOAD:
  2054                           
  2055                           ;main.c: 440: break ;
  2056                           
  2057                           
  2058                           ;main.c: 443: if( menuStateConfirm_.select )
  2059  02C1  0833               	movf	_menuStateConfirm_,w
  2060  02C2  1903               	btfsc	3,2
  2061  02C3  2AD9               	goto	L32
  2062                           
  2063                           ;main.c: 444: machineState_ = STATE_LOAD ;
  2064  02C4  300D               	movlw	13
  2065  02C5  2ADD               	goto	L19
  2066  02C6                     l3438:	
  2067                           ;main.c: 449: case STATE_CONFIRM_SAVE:
  2068                           
  2069                           ;main.c: 447: break ;
  2070                           
  2071                           ;main.c: 445: else
  2072                           ;main.c: 446: machineState_ = STATE_MENU_MAIN ;
  2073                           
  2074                           
  2075                           ;main.c: 450: if( menuStateConfirm_.select )
  2076  02C6  0833               	movf	_menuStateConfirm_,w
  2077  02C7  1903               	btfsc	3,2
  2078  02C8  2AD9               	goto	L32
  2079                           
  2080                           ;main.c: 451: machineState_ = STATE_SAVE ;
  2081  02C9  300B               	movlw	11
  2082  02CA  2ADD               	goto	L19
  2083  02CB                     l3444:	
  2084                           ;main.c: 456: case STATE_CONFIRM_RESET:
  2085                           
  2086                           ;main.c: 454: break ;
  2087                           
  2088                           ;main.c: 452: else
  2089                           ;main.c: 453: machineState_ = STATE_MENU_MAIN ;
  2090                           
  2091                           
  2092                           ;main.c: 457: if( menuStateConfirm_.select )
  2093  02CB  0833               	movf	_menuStateConfirm_,w
  2094  02CC  1903               	btfsc	3,2
  2095  02CD  2AD9               	goto	L32
  2096                           
  2097                           ;main.c: 458: machineState_ = STATE_RESET ;
  2098  02CE  3010               	movlw	16
  2099  02CF  2ADD               	goto	L19
  2100  02D0                     l3450:	
  2101                           ;main.c: 463: case STATE_METRONOME:
  2102                           
  2103                           ;main.c: 461: break ;
  2104                           
  2105                           ;main.c: 459: else
  2106                           ;main.c: 460: machineState_ = STATE_MENU_MAIN ;
  2107                           
  2108                           
  2109                           ;main.c: 464: machineState_ = STATE_MENU_MAIN ;
  2110  02D0  3002               	movlw	2
  2111  02D1  00CA               	movwf	??_main
  2112  02D2  084A               	movf	??_main,w
  2113  02D3  00EA               	movwf	_machineState_
  2114                           
  2115                           ;main.c: 465: menuStateMain_.select = 0 ;
  2116  02D4  01BB               	clrf	_menuStateMain_
  2117                           
  2118                           ;main.c: 466: menuStateMain_.cursorPosition = 0 ;
  2119  02D5  01BC               	clrf	_menuStateMain_+1
  2120                           
  2121                           ;main.c: 467: break ;
  2122  02D6  2AF2               	goto	l281
  2123  02D7                     l3456:	
  2124                           ;main.c: 469: case STATE_ADJUST_BEAT_COUNT:
  2125                           
  2126  02D7  2AD9               	goto	L32
  2127  02D8                     l314:	
  2128                           ;main.c: 476: case STATE_ADJUST_OSCILLATOR_TUNE:
  2129                           
  2130                           ;main.c: 474: break ;
  2131                           
  2132                           ;main.c: 470: case STATE_ADJUST_DURATION:
  2133                           ;main.c: 471: case STATE_ADJUST_PULSE_WIDTH:
  2134                           ;main.c: 472: case STATE_INFORMATION:
  2135                           ;main.c: 473: machineState_ = STATE_MENU_MAIN ;
  2136                           
  2137                           
  2138                           ;main.c: 477: outputEvent_.soundOff = 1 ;
  2139  02D8  176B               	bsf	_outputEvent_,6
  2140  02D9                     L32:	
  2141                           
  2142                           ;main.c: 478: machineState_ = STATE_MENU_MAIN ;
  2143  02D9  3002               	movlw	2
  2144  02DA  2ADD               	goto	L19
  2145  02DB                     l315:	
  2146                           ;main.c: 481: case STATE_ADJUST_TONE:
  2147                           
  2148                           ;main.c: 479: break ;
  2149                           
  2150                           
  2151                           ;main.c: 482: outputEvent_.soundOff = 1 ;
  2152  02DB  176B               	bsf	_outputEvent_,6
  2153                           
  2154                           ;main.c: 483: machineState_ = STATE_MENU_TONE ;
  2155  02DC  3003               	movlw	3
  2156  02DD                     L19:	
  2157  02DD  00CA               	movwf	??_main
  2158  02DE  084A               	movf	??_main,w
  2159  02DF  00EA               	movwf	_machineState_
  2160                           
  2161                           ;main.c: 484: break ;
  2162  02E0  2AF2               	goto	l281
  2163  02E1                     l317:	
  2164                           ;main.c: 486: case STATE_INITIALIZE:
  2165                           
  2166                           
  2167                           ;main.c: 487: case STATE_ERROR:
  2168                           ;main.c: 488: machineState_ = STATE_METRONOME ;
  2169  02E1  01EA               	clrf	_machineState_
  2170  02E2  0AEA               	incf	_machineState_,f
  2171                           
  2172                           ;main.c: 489: outputEvent_.resetMetronome = 1 ;
  2173  02E3  15EB               	bsf	_outputEvent_,3
  2174                           
  2175                           ;main.c: 492: }
  2176                           
  2177                           ;main.c: 490: break ;
  2178  02E4  2AF2               	goto	l281
  2179  02E5                     l3464:	
  2180  02E5  086A               	movf	_machineState_,w
  2181                           
  2182                           ; Switch size 1, requested type "space"
  2183                           ; Number of cases is 14, Range of values is 1 to 17
  2184                           ; switch strategies available:
  2185                           ; Name         Instructions Cycles
  2186                           ; direct_byte           43     9 (fixed)
  2187                           ; simple_byte           43    22 (average)
  2188                           ; jumptable            263     9 (fixed)
  2189                           ;	Chosen strategy is direct_byte
  2190  02E6  3EFF               	addlw	-1
  2191  02E7  1C03               	skipc
  2192  02E8  2AF2               	goto	l281
  2193  02E9  0084               	movwf	4
  2194  02EA  3011               	movlw	17
  2195  02EB  0204               	subwf	4,w
  2196  02EC  1803               	skipnc
  2197  02ED  2AF2               	goto	l281
  2198  02EE  3189               	movlp	high S3908
  2199  02EF  3504               	lslf	4,w
  2200  02F0  3E58               	addlw	low S3908
  2201  02F1  0082               	movwf	2
  2202  02F2                     l281:	
  2203                           
  2204                           ;main.c: 494: }
  2205                           ;main.c: 497: if( (outputEvent_.changeState&&!(outputEvent_.changeState=0)) ) {
  2206  02F2  1C6B               	btfss	_outputEvent_,0
  2207  02F3  2BDE               	goto	l3576
  2208  02F4  106B               	bcf	_outputEvent_,0
  2209                           
  2210                           ;main.c: 499: outputEvent_.changeMessage = 1 ;
  2211  02F5  14EB               	bsf	_outputEvent_,1
  2212                           
  2213                           ;main.c: 501: switch( machineState_ ) {
  2214  02F6  2B4D               	goto	l3510
  2215  02F7                     l3468:	
  2216                           ;main.c: 505: case STATE_MENU_MAIN:
  2217                           
  2218                           ;main.c: 503: break ;
  2219                           
  2220                           ;main.c: 502: case STATE_METRONOME:
  2221                           
  2222                           
  2223                           ;main.c: 506: currentMenuStatePtr_ = &menuStateMain_ ;
  2224  02F7  303B               	movlw	(low (_menuStateMain_| 0))& (0+255)
  2225  02F8  2B38               	goto	L22
  2226  02F9                     l3470:	
  2227                           ;main.c: 509: case STATE_MENU_TONE:
  2228                           
  2229                           ;main.c: 507: break ;
  2230                           
  2231                           
  2232                           ;main.c: 510: currentMenuStatePtr_ = &menuStateTone_ ;
  2233  02F9  303F               	movlw	(low (_menuStateTone_| 0))& (0+255)
  2234  02FA  2B38               	goto	L22
  2235  02FB                     l3472:	
  2236                           ;main.c: 513: case STATE_CONFIRM_LOAD:
  2237                           
  2238                           ;main.c: 511: break ;
  2239                           
  2240                           
  2241                           ;main.c: 514: case STATE_CONFIRM_SAVE:
  2242                           ;main.c: 515: case STATE_CONFIRM_RESET:
  2243                           ;main.c: 516: menuStateConfirm_.select = 0 ;
  2244  02FB  01B3               	clrf	_menuStateConfirm_
  2245                           
  2246                           ;main.c: 517: menuStateConfirm_.cursorPosition = 0 ;
  2247  02FC  01B4               	clrf	_menuStateConfirm_+1
  2248                           
  2249                           ;main.c: 518: currentMenuStatePtr_ = &menuStateConfirm_ ;
  2250  02FD  3033               	movlw	(low (_menuStateConfirm_| 0))& (0+255)
  2251  02FE  2B38               	goto	L22
  2252  02FF                     l327:	
  2253                           ;main.c: 521: case STATE_ADJUST_BEAT_COUNT:
  2254                           
  2255                           ;main.c: 519: break ;
  2256                           
  2257                           
  2258                           ;main.c: 522: outputEvent_.changeValue = 1 ;
  2259  02FF  156B               	bsf	_outputEvent_,2
  2260                           
  2261                           ;main.c: 523: currentValuePtr = &configration_.beatCount ;
  2262  0300  302B               	movlw	(low ((_configration_| 0+3)))& (0+255)
  2263  0301  00CA               	movwf	??_main
  2264  0302  084A               	movf	??_main,w
  2265  0303  00E5               	movwf	_currentValuePtr
  2266                           
  2267                           ;main.c: 524: valueLimit_.upper = 64 ;
  2268  0304  3040               	movlw	64
  2269  0305  2B13               	goto	L28
  2270  0306                     l328:	
  2271                           ;main.c: 528: case STATE_ADJUST_DURATION:
  2272                           
  2273                           ;main.c: 526: break ;
  2274                           
  2275                           ;main.c: 525: valueLimit_.lower = 0 ;
  2276                           
  2277                           
  2278                           ;main.c: 529: outputEvent_.changeValue = 1 ;
  2279  0306  156B               	bsf	_outputEvent_,2
  2280                           
  2281                           ;main.c: 530: currentValuePtr = &configration_.duration ;
  2282  0307  302C               	movlw	(low ((_configration_| 0+4)))& (0+255)
  2283  0308  00CA               	movwf	??_main
  2284  0309  084A               	movf	??_main,w
  2285  030A  00E5               	movwf	_currentValuePtr
  2286                           
  2287                           ;main.c: 531: valueLimit_.upper = 0xFF ;
  2288  030B  30FF               	movlw	255
  2289  030C  2B13               	goto	L28
  2290  030D                     l329:	
  2291                           ;main.c: 535: case STATE_ADJUST_PULSE_WIDTH:
  2292                           
  2293                           ;main.c: 533: break ;
  2294                           
  2295                           ;main.c: 532: valueLimit_.lower = 0x00 ;
  2296                           
  2297                           
  2298                           ;main.c: 536: outputEvent_.changeValue = 1 ;
  2299  030D  156B               	bsf	_outputEvent_,2
  2300                           
  2301                           ;main.c: 537: currentValuePtr = &configration_.pulseWidth ;
  2302  030E  302D               	movlw	(low ((_configration_| 0+5)))& (0+255)
  2303  030F  00CA               	movwf	??_main
  2304  0310  084A               	movf	??_main,w
  2305  0311  00E5               	movwf	_currentValuePtr
  2306                           
  2307                           ;main.c: 538: valueLimit_.upper = 0x07 ;
  2308  0312  3007               	movlw	7
  2309  0313                     L28:	
  2310  0313  00CA               	movwf	??_main
  2311  0314  084A               	movf	??_main,w
  2312  0315  00E1               	movwf	_valueLimit_
  2313                           
  2314                           ;main.c: 539: valueLimit_.lower = 0x00 ;
  2315  0316  01E2               	clrf	_valueLimit_+1
  2316                           
  2317                           ;main.c: 540: break ;
  2318  0317  2BDE               	goto	l3576
  2319  0318                     l330:	
  2320                           ;main.c: 542: case STATE_ADJUST_OSCILLATOR_TUNE:
  2321                           
  2322                           
  2323                           ;main.c: 543: outputEvent_.changeValue = 1 ;
  2324  0318  156B               	bsf	_outputEvent_,2
  2325                           
  2326                           ;main.c: 544: currentValuePtr = ( uint08_t* ) & configration_.oscillatorTune ;
  2327  0319  3031               	movlw	(low ((_configration_| 0+9)))& (0+255)
  2328  031A  00CA               	movwf	??_main
  2329  031B  084A               	movf	??_main,w
  2330  031C  00E5               	movwf	_currentValuePtr
  2331                           
  2332                           ;main.c: 545: valueLimit_.upper = (uint08_t)30 ;
  2333  031D  301E               	movlw	30
  2334  031E  00CA               	movwf	??_main
  2335  031F  084A               	movf	??_main,w
  2336  0320  00E1               	movwf	_valueLimit_
  2337                           
  2338                           ;main.c: 546: valueLimit_.lower = (uint08_t)( -30 ) ;
  2339  0321  30E2               	movlw	226
  2340  0322  00CA               	movwf	??_main
  2341  0323  084A               	movf	??_main,w
  2342  0324  00E2               	movwf	_valueLimit_+1
  2343                           
  2344                           ;main.c: 547: outputEvent_.soundOn = 1 ;
  2345  0325  16EB               	bsf	_outputEvent_,5
  2346                           
  2347                           ;main.c: 548: break ;
  2348  0326  2BDE               	goto	l3576
  2349  0327                     l331:	
  2350                           ;main.c: 550: case STATE_ADJUST_TONE:
  2351                           
  2352                           
  2353                           ;main.c: 551: outputEvent_.changeValue = 1 ;
  2354  0327  156B               	bsf	_outputEvent_,2
  2355                           
  2356                           ;main.c: 552: currentValuePtr = &configration_.tone[ menuStateTone_.select - MENU_ITEM_T
      +                          ONE_ADJUST_TONE0 ] ;
  2357  0328  083F               	movf	_menuStateTone_,w
  2358  0329  3EFF               	addlw	255
  2359  032A  3E2E               	addlw	(low ((_configration_| 0+6)))& (0+255)
  2360  032B  00CA               	movwf	??_main
  2361  032C  084A               	movf	??_main,w
  2362  032D  00E5               	movwf	_currentValuePtr
  2363                           
  2364                           ;main.c: 553: valueLimit_.upper = 0xFF ;
  2365  032E  30FF               	movlw	255
  2366  032F  00CA               	movwf	??_main
  2367  0330  084A               	movf	??_main,w
  2368  0331  00E1               	movwf	_valueLimit_
  2369                           
  2370                           ;main.c: 554: valueLimit_.lower = 0x00 ;
  2371  0332  01E2               	clrf	_valueLimit_+1
  2372                           
  2373                           ;main.c: 555: T2CONbits.TMR2ON = 1 ;
  2374  0333  151C               	bsf	28,2	;volatile
  2375                           
  2376                           ;main.c: 556: break ;
  2377  0334  2BDE               	goto	l3576
  2378  0335                     l3500:	
  2379                           ;main.c: 558: case STATE_INFORMATION:
  2380                           
  2381                           
  2382                           ;main.c: 559: menuStateInformation_.select = 0 ;
  2383  0335  01B7               	clrf	_menuStateInformation_
  2384                           
  2385                           ;main.c: 560: menuStateInformation_.cursorPosition = 0 ;
  2386  0336  01B8               	clrf	_menuStateInformation_+1
  2387                           
  2388                           ;main.c: 561: currentMenuStatePtr_ = &menuStateInformation_ ;
  2389  0337  3037               	movlw	(low (_menuStateInformation_| 0))& (0+255)
  2390  0338                     L22:	
  2391  0338  00CA               	movwf	??_main
  2392  0339  084A               	movf	??_main,w
  2393  033A  00E4               	movwf	_currentMenuStatePtr_
  2394                           
  2395                           ;main.c: 562: break ;
  2396  033B  2BDE               	goto	l3576
  2397  033C                     l333:	
  2398                           ;main.c: 564: case STATE_LOAD:
  2399                           
  2400                           
  2401                           ;main.c: 565: outputEvent_.resetMetronome = 1 ;
  2402  033C  15EB               	bsf	_outputEvent_,3
  2403  033D                     l334:	
  2404                           ;main.c: 570: case STATE_SAVE:
  2405                           
  2406                           ;main.c: 568: break ;
  2407                           
  2408                           ;main.c: 567: stateReturnCounter_ = 0xFF ;
  2409                           
  2410                           ;main.c: 566: outputEvent_.accessEeprom = 1 ;
  2411                           
  2412                           
  2413                           ;main.c: 571: outputEvent_.accessEeprom = 1 ;
  2414  033D  17EB               	bsf	_outputEvent_,7
  2415                           
  2416                           ;main.c: 572: stateReturnCounter_ = 0xFF ;
  2417  033E  30FF               	movlw	255
  2418  033F  00CA               	movwf	??_main
  2419  0340  084A               	movf	??_main,w
  2420  0341  00ED               	movwf	_stateReturnCounter_
  2421                           
  2422                           ;main.c: 573: break ;
  2423  0342  2BDE               	goto	l3576
  2424  0343                     l3508:	
  2425                           ;main.c: 575: case STATE_RESET:
  2426                           
  2427                           
  2428                           ;main.c: 576: _parallel_lcd_ClearRow( 0x80 ) ;
  2429  0343  3080               	movlw	128
  2430  0344  318E  2648  3180   	fcall	__parallel_lcd_ClearRow
  2431                           
  2432                           ;main.c: 577: _parallel_lcd_ClearRow( 0xC0 ) ;
  2433  0347  30C0               	movlw	192
  2434  0348  318E  2648  3180   	fcall	__parallel_lcd_ClearRow
  2435  034B  0001               	reset	;# 
  2436                           
  2437                           ;main.c: 580: }
  2438  034C  2BDE               	goto	l3576
  2439  034D                     l3510:	
  2440  034D  0020               	movlb	0	; select bank0
  2441  034E  086A               	movf	_machineState_,w
  2442                           
  2443                           ; Switch size 1, requested type "space"
  2444                           ; Number of cases is 15, Range of values is 1 to 16
  2445                           ; switch strategies available:
  2446                           ; Name         Instructions Cycles
  2447                           ; direct_byte           41     9 (fixed)
  2448                           ; simple_byte           46    24 (average)
  2449                           ; jumptable            263     9 (fixed)
  2450                           ;	Chosen strategy is direct_byte
  2451  034F  3EFF               	addlw	-1
  2452  0350  1C03               	skipc
  2453  0351  2BDE               	goto	l3576
  2454  0352  0084               	movwf	4
  2455  0353  3010               	movlw	16
  2456  0354  0204               	subwf	4,w
  2457  0355  1803               	skipnc
  2458  0356  2BDE               	goto	l3576
  2459  0357  3189               	movlp	high S3910
  2460  0358  3504               	lslf	4,w
  2461  0359  3E9C               	addlw	low S3910
  2462  035A  0082               	movwf	2
  2463                           
  2464                           ;main.c: 582: }
  2465                           ;main.c: 585: switch( machineState_ ) {
  2466  035B  2BDE               	goto	l3576
  2467  035C                     l342:	
  2468                           ;main.c: 587: case STATE_MENU_MAIN:
  2469                           
  2470                           
  2471                           ;main.c: 588: case STATE_MENU_TONE:
  2472                           ;main.c: 589: case STATE_CONFIRM_LOAD:
  2473                           ;main.c: 590: case STATE_CONFIRM_SAVE:
  2474                           ;main.c: 591: case STATE_CONFIRM_RESET:
  2475                           ;main.c: 592: case STATE_INFORMATION:
  2476                           ;main.c: 593: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2477  035C  1CE7               	btfss	_inputEvent_,1
  2478  035D  2B7F               	goto	l3522
  2479  035E  10E7               	bcf	_inputEvent_,1
  2480                           
  2481                           ;main.c: 594: if( currentMenuStatePtr_->select != currentMenuStatePtr_->limit ) {
  2482  035F  0864               	movf	_currentMenuStatePtr_,w
  2483  0360  3E02               	addlw	2
  2484  0361  0086               	movwf	6
  2485  0362  0187               	clrf	7
  2486  0363  0864               	movf	_currentMenuStatePtr_,w
  2487  0364  0084               	movwf	4
  2488  0365  0185               	clrf	5
  2489  0366  0800               	movf	0,w
  2490  0367  0601               	xorwf	1,w
  2491  0368  1903               	skipnz
  2492  0369  2B7F               	goto	l3522
  2493                           
  2494                           ;main.c: 595: currentMenuStatePtr_->select++ ;
  2495  036A  3001               	movlw	1
  2496  036B  00CA               	movwf	??_main
  2497  036C  0864               	movf	_currentMenuStatePtr_,w
  2498  036D  0086               	movwf	6
  2499  036E  0187               	clrf	7
  2500  036F  084A               	movf	??_main,w
  2501  0370  0781               	addwf	1,f
  2502                           
  2503                           ;main.c: 596: if( !currentMenuStatePtr_->cursorPosition ) currentMenuStatePtr_->cursorPo
      +                          sition++ ;
  2504  0371  0A64               	incf	_currentMenuStatePtr_,w
  2505  0372  0086               	movwf	6
  2506  0373  0187               	clrf	7
  2507  0374  0801               	movf	1,w
  2508  0375  1D03               	btfss	3,2
  2509  0376  2B7E               	goto	l3520
  2510  0377  3001               	movlw	1
  2511  0378  00CA               	movwf	??_main
  2512  0379  0A64               	incf	_currentMenuStatePtr_,w
  2513  037A  0086               	movwf	6
  2514  037B  0187               	clrf	7
  2515  037C  084A               	movf	??_main,w
  2516  037D  0781               	addwf	1,f
  2517  037E                     l3520:	
  2518                           
  2519                           ;main.c: 597: outputEvent_.changeMessage = 1 ;
  2520  037E  14EB               	bsf	_outputEvent_,1
  2521  037F                     l3522:	
  2522                           
  2523                           ;main.c: 598: }
  2524                           ;main.c: 599: }
  2525                           ;main.c: 600: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2526  037F  1C67               	btfss	_inputEvent_,0
  2527  0380  2BEC               	goto	l349
  2528  0381  1067               	bcf	_inputEvent_,0
  2529                           
  2530                           ;main.c: 601: if( currentMenuStatePtr_->select ) {
  2531  0382  0864               	movf	_currentMenuStatePtr_,w
  2532  0383  0086               	movwf	6
  2533  0384  0187               	clrf	7
  2534  0385  0801               	movf	1,w
  2535  0386  1903               	btfsc	3,2
  2536  0387  2BEC               	goto	l349
  2537                           
  2538                           ;main.c: 602: currentMenuStatePtr_->select-- ;
  2539  0388  0864               	movf	_currentMenuStatePtr_,w
  2540  0389  0086               	movwf	6
  2541  038A  0187               	clrf	7
  2542  038B  3001               	movlw	1
  2543  038C  0281               	subwf	1,f
  2544                           
  2545                           ;main.c: 603: if( currentMenuStatePtr_->cursorPosition ) currentMenuStatePtr_->cursorPos
      +                          ition-- ;
  2546  038D  0A64               	incf	_currentMenuStatePtr_,w
  2547  038E  0086               	movwf	6
  2548  038F  0187               	clrf	7
  2549  0390  0801               	movf	1,w
  2550  0391  1903               	btfsc	3,2
  2551  0392  2B98               	goto	l3532
  2552  0393  0A64               	incf	_currentMenuStatePtr_,w
  2553  0394  0086               	movwf	6
  2554  0395  0187               	clrf	7
  2555  0396  3001               	movlw	1
  2556  0397  0281               	subwf	1,f
  2557  0398                     l3532:	
  2558                           
  2559                           ;main.c: 604: outputEvent_.changeMessage = 1 ;
  2560  0398  14EB               	bsf	_outputEvent_,1
  2561                           
  2562                           ;main.c: 605: }
  2563                           ;main.c: 606: }
  2564                           ;main.c: 607: break ;
  2565  0399  2BEC               	goto	l349
  2566  039A                     l350:	
  2567                           ;main.c: 609: case STATE_METRONOME:
  2568                           
  2569                           
  2570                           ;main.c: 610: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2571  039A  1C67               	btfss	_inputEvent_,0
  2572  039B  2BAA               	goto	l3544
  2573  039C  1067               	bcf	_inputEvent_,0
  2574                           
  2575                           ;main.c: 611: if( configration_.tempo < 999 ) {
  2576  039D  3003               	movlw	3
  2577  039E  022A               	subwf	_configration_+2,w
  2578  039F  30E7               	movlw	231
  2579  03A0  1903               	skipnz
  2580  03A1  0229               	subwf	_configration_+1,w
  2581  03A2  1803               	skipnc
  2582  03A3  2BA9               	goto	l3542
  2583                           
  2584                           ;main.c: 612: configration_.tempo++ ;
  2585  03A4  3001               	movlw	1
  2586  03A5  07A9               	addwf	_configration_+1,f
  2587  03A6  3000               	movlw	0
  2588  03A7  3DAA               	addwfc	_configration_+2,f
  2589                           
  2590                           ;main.c: 613: outputEvent_.changeValue = 1 ;
  2591  03A8  156B               	bsf	_outputEvent_,2
  2592  03A9                     l3542:	
  2593                           
  2594                           ;main.c: 614: }
  2595                           ;main.c: 615: outputEvent_.resetMetronome = 1 ;
  2596  03A9  15EB               	bsf	_outputEvent_,3
  2597  03AA                     l3544:	
  2598                           
  2599                           ;main.c: 616: }
  2600                           ;main.c: 617: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2601  03AA  1CE7               	btfss	_inputEvent_,1
  2602  03AB  2BEC               	goto	l349
  2603  03AC  10E7               	bcf	_inputEvent_,1
  2604                           
  2605                           ;main.c: 618: if( configration_.tempo > 1 ) {
  2606  03AD  3000               	movlw	0
  2607  03AE  022A               	subwf	_configration_+2,w
  2608  03AF  3002               	movlw	2
  2609  03B0  1903               	skipnz
  2610  03B1  0229               	subwf	_configration_+1,w
  2611  03B2  1C03               	skipc
  2612  03B3  2BB9               	goto	l3554
  2613                           
  2614                           ;main.c: 619: configration_.tempo-- ;
  2615  03B4  3001               	movlw	1
  2616  03B5  02A9               	subwf	_configration_+1,f
  2617  03B6  3000               	movlw	0
  2618  03B7  3BAA               	subwfb	_configration_+2,f
  2619                           
  2620                           ;main.c: 620: outputEvent_.changeValue = 1 ;
  2621  03B8  156B               	bsf	_outputEvent_,2
  2622  03B9                     l3554:	
  2623                           
  2624                           ;main.c: 621: }
  2625                           ;main.c: 622: outputEvent_.resetMetronome = 1 ;
  2626  03B9  15EB               	bsf	_outputEvent_,3
  2627                           
  2628                           ;main.c: 623: }
  2629                           ;main.c: 624: break ;
  2630  03BA  2BEC               	goto	l349
  2631  03BB                     l359:	
  2632                           ;main.c: 626: case STATE_ADJUST_BEAT_COUNT:
  2633                           
  2634                           
  2635                           ;main.c: 627: case STATE_ADJUST_PULSE_WIDTH:
  2636                           ;main.c: 628: case STATE_ADJUST_DURATION:
  2637                           ;main.c: 629: case STATE_ADJUST_TONE:
  2638                           ;main.c: 630: case STATE_ADJUST_OSCILLATOR_TUNE:
  2639                           ;main.c: 631: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2640  03BB  1C67               	btfss	_inputEvent_,0
  2641  03BC  2BCD               	goto	l3564
  2642  03BD  1067               	bcf	_inputEvent_,0
  2643                           
  2644                           ;main.c: 632: if( *currentValuePtr != valueLimit_.upper ) {
  2645  03BE  0865               	movf	_currentValuePtr,w
  2646  03BF  0086               	movwf	6
  2647  03C0  0187               	clrf	7
  2648  03C1  0801               	movf	1,w
  2649  03C2  0661               	xorwf	_valueLimit_,w
  2650  03C3  1903               	skipnz
  2651  03C4  2BCD               	goto	l3564
  2652                           
  2653                           ;main.c: 633: ( *currentValuePtr )++ ;
  2654  03C5  3001               	movlw	1
  2655  03C6  00CA               	movwf	??_main
  2656  03C7  0865               	movf	_currentValuePtr,w
  2657  03C8  0086               	movwf	6
  2658  03C9  0187               	clrf	7
  2659  03CA  084A               	movf	??_main,w
  2660  03CB  0781               	addwf	1,f
  2661                           
  2662                           ;main.c: 634: outputEvent_.changeValue = 1 ;
  2663  03CC  156B               	bsf	_outputEvent_,2
  2664  03CD                     l3564:	
  2665                           
  2666                           ;main.c: 635: }
  2667                           ;main.c: 636: }
  2668                           ;main.c: 637: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2669  03CD  1CE7               	btfss	_inputEvent_,1
  2670  03CE  2BEC               	goto	l349
  2671  03CF  10E7               	bcf	_inputEvent_,1
  2672                           
  2673                           ;main.c: 638: if( *currentValuePtr != valueLimit_.lower ) {
  2674  03D0  0865               	movf	_currentValuePtr,w
  2675  03D1  0086               	movwf	6
  2676  03D2  0187               	clrf	7
  2677  03D3  0862               	movf	_valueLimit_+1,w
  2678  03D4  0601               	xorwf	1,w
  2679  03D5  1903               	skipnz
  2680  03D6  2BEC               	goto	l349
  2681                           
  2682                           ;main.c: 639: ( *currentValuePtr )-- ;
  2683  03D7  0865               	movf	_currentValuePtr,w
  2684  03D8  0086               	movwf	6
  2685  03D9  0187               	clrf	7
  2686  03DA  3001               	movlw	1
  2687  03DB  0281               	subwf	1,f
  2688                           
  2689                           ;main.c: 640: outputEvent_.changeValue = 1 ;
  2690  03DC  156B               	bsf	_outputEvent_,2
  2691                           
  2692                           ;main.c: 645: }
  2693                           
  2694                           ;main.c: 641: }
  2695                           ;main.c: 642: }
  2696                           ;main.c: 643: break ;
  2697  03DD  2BEC               	goto	l349
  2698  03DE                     l3576:	
  2699  03DE  0020               	movlb	0	; select bank0
  2700  03DF  086A               	movf	_machineState_,w
  2701                           
  2702                           ; Switch size 1, requested type "space"
  2703                           ; Number of cases is 12, Range of values is 1 to 14
  2704                           ; switch strategies available:
  2705                           ; Name         Instructions Cycles
  2706                           ; direct_byte           37     9 (fixed)
  2707                           ; simple_byte           37    19 (average)
  2708                           ; jumptable            263     9 (fixed)
  2709                           ;	Chosen strategy is direct_byte
  2710  03E0  3EFF               	addlw	-1
  2711  03E1  1C03               	skipc
  2712  03E2  2BEC               	goto	l349
  2713  03E3  0084               	movwf	4
  2714  03E4  300E               	movlw	14
  2715  03E5  0204               	subwf	4,w
  2716  03E6  1803               	skipnc
  2717  03E7  2BEC               	goto	l349
  2718  03E8  3189               	movlp	high S3912
  2719  03E9  3504               	lslf	4,w
  2720  03EA  3EBC               	addlw	low S3912
  2721  03EB  0082               	movwf	2
  2722  03EC                     l349:	
  2723                           
  2724                           ;main.c: 648: if( (outputEvent_.resetMetronome&&!(outputEvent_.resetMetronome=0)) ) {
  2725  03EC  1DEB               	btfss	_outputEvent_,3
  2726  03ED  2C2D               	goto	l3626
  2727  03EE  11EB               	bcf	_outputEvent_,3
  2728                           
  2729                           ;main.c: 649: INTCONbits.GIE=0 ;
  2730  03EF  138B               	bcf	11,7	;volatile
  2731                           
  2732                           ;main.c: 650: tempoCounter_ = 0 ;
  2733  03F0  3000               	movlw	0
  2734  03F1  00DE               	movwf	_tempoCounter_
  2735  03F2  3000               	movlw	0
  2736  03F3  00DF               	movwf	_tempoCounter_+1
  2737  03F4  3000               	movlw	0
  2738  03F5  00E0               	movwf	_tempoCounter_+2
  2739                           
  2740                           ;main.c: 651: beatCounter_ = 0 ;
  2741  03F6  01E3               	clrf	_beatCounter_
  2742                           
  2743                           ;main.c: 652: duration_ = configration_.duration ;
  2744  03F7  082C               	movf	_configration_+4,w
  2745  03F8  00CA               	movwf	??_main
  2746  03F9  084A               	movf	??_main,w
  2747  03FA  00E6               	movwf	_duration_
  2748                           
  2749                           ;main.c: 653: outputEvent_.soundClickOn = 1 ;
  2750  03FB  166B               	bsf	_outputEvent_,4
  2751                           
  2752                           ;main.c: 654: INTCONbits.GIE=1 ;
  2753  03FC  178B               	bsf	11,7	;volatile
  2754                           
  2755                           ;main.c: 655: }
  2756                           ;main.c: 658: switch( machineState_ ) {
  2757  03FD  2C2D               	goto	l3626
  2758  03FE                     l372:	
  2759                           ;main.c: 668: case STATE_ADJUST_TONE:
  2760                           
  2761                           ;main.c: 661: case STATE_INITIALIZE:
  2762                           ;main.c: 662: case STATE_LOAD:
  2763                           ;main.c: 663: case STATE_SAVE:
  2764                           ;main.c: 664: case STATE_ERROR:
  2765                           ;main.c: 666: break ;
  2766                           
  2767                           ;main.c: 660: case STATE_BOOT:
  2768                           
  2769                           
  2770                           ;main.c: 669: if( (outputEvent_.soundOn&&!(outputEvent_.soundOn=0)) ) {
  2771  03FE  1EEB               	btfss	_outputEvent_,5
  2772  03FF  2C4B               	goto	l3632
  2773  0400  12EB               	bcf	_outputEvent_,5
  2774                           
  2775                           ;main.c: 670: PR2 = *currentValuePtr ;
  2776  0401  0865               	movf	_currentValuePtr,w
  2777  0402  0086               	movwf	6
  2778  0403  0187               	clrf	7
  2779  0404  0801               	movf	1,w
  2780  0405  2C0A               	goto	L31
  2781  0406                     l374:	
  2782                           ;main.c: 675: case STATE_ADJUST_OSCILLATOR_TUNE:
  2783                           
  2784                           ;main.c: 673: }
  2785                           ;main.c: 674: break ;
  2786                           
  2787                           ;main.c: 672: T2CONbits.TMR2ON = 1 ;
  2788                           
  2789                           ;main.c: 671: {CCPR4L=(PR2>>1);} ;
  2790                           
  2791                           
  2792                           ;main.c: 676: if( (outputEvent_.soundOn&&!(outputEvent_.soundOn=0)) ) {
  2793  0406  1EEB               	btfss	_outputEvent_,5
  2794  0407  2C4B               	goto	l3632
  2795  0408  12EB               	bcf	_outputEvent_,5
  2796                           
  2797                           ;main.c: 677: PR2 = 141 ;
  2798  0409  308D               	movlw	141
  2799  040A                     L31:	
  2800  040A  009B               	movwf	27	;volatile
  2801                           
  2802                           ;main.c: 678: {CCPR4L=(PR2>>1);} ;
  2803  040B  361B               	lsrf	27,w	;volatile
  2804  040C  2C28               	goto	L29
  2805  040D                     l376:	
  2806                           ;main.c: 683: default:
  2807                           
  2808                           ;main.c: 680: }
  2809                           ;main.c: 681: break ;
  2810                           
  2811                           ;main.c: 679: T2CONbits.TMR2ON = 1 ;
  2812                           
  2813                           
  2814                           ;main.c: 684: if( (outputEvent_.soundClickOn&&!(outputEvent_.soundClickOn=0)) && !isMute
      +                          _ ) {
  2815  040D  1E6B               	btfss	_outputEvent_,4
  2816  040E  2C4B               	goto	l3632
  2817  040F  126B               	bcf	_outputEvent_,4
  2818  0410  0868               	movf	_isMute_,w
  2819  0411  1D03               	btfss	3,2
  2820  0412  2C4B               	goto	l3632
  2821                           
  2822                           ;main.c: 685: if( beatCounter_ == 0 )
  2823  0413  0863               	movf	_beatCounter_,w
  2824  0414  1D03               	btfss	3,2
  2825  0415  2C18               	goto	l3614
  2826                           
  2827                           ;main.c: 686: PR2 = configration_.tone[ 1 ] ;
  2828  0416  082F               	movf	_configration_+7,w
  2829  0417  2C1F               	goto	L24
  2830  0418                     l3614:	
  2831                           
  2832                           ;main.c: 687: else if( beatCounter_ == configration_.beatCount )
  2833  0418  082B               	movf	_configration_+3,w
  2834  0419  0663               	xorwf	_beatCounter_,w
  2835  041A  1D03               	skipz
  2836  041B  2C1E               	goto	l3618
  2837                           
  2838                           ;main.c: 688: PR2 = configration_.tone[ 2 ] ;
  2839  041C  0830               	movf	_configration_+8,w
  2840  041D  2C1F               	goto	L24
  2841  041E                     l3618:	
  2842                           
  2843                           ;main.c: 689: else
  2844                           ;main.c: 690: PR2 = configration_.tone[ 0 ] ;
  2845  041E  082E               	movf	_configration_+6,w
  2846  041F                     L24:	
  2847  041F  009B               	movwf	27	;volatile
  2848                           
  2849                           ;main.c: 692: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  2850  0420  081B               	movf	27,w	;volatile
  2851  0421  00CA               	movwf	??_main
  2852  0422  0A2D               	incf	_configration_+5,w
  2853  0423  2C25               	goto	u3044
  2854  0424                     u3045:	
  2855  0424  36CA               	lsrf	??_main,f
  2856  0425                     u3044:	
  2857  0425  0B89               	decfsz	9,f
  2858  0426  2C24               	goto	u3045
  2859  0427  084A               	movf	??_main,w
  2860  0428                     L29:	
  2861  0428  0026               	movlb	6	; select bank6
  2862  0429  0098               	movwf	24	;volatile
  2863                           
  2864                           ;main.c: 693: T2CONbits.TMR2ON = 1 ;
  2865  042A  0020               	movlb	0	; select bank0
  2866  042B  151C               	bsf	28,2	;volatile
  2867                           
  2868                           ;main.c: 697: }
  2869                           
  2870                           ;main.c: 694: }
  2871                           ;main.c: 695: break ;
  2872  042C  2C4B               	goto	l3632
  2873  042D                     l3626:	
  2874  042D  086A               	movf	_machineState_,w
  2875                           
  2876                           ; Switch size 1, requested type "space"
  2877                           ; Number of cases is 7, Range of values is 0 to 17
  2878                           ; switch strategies available:
  2879                           ; Name         Instructions Cycles
  2880                           ; simple_byte           22    12 (average)
  2881                           ; direct_byte           42     6 (fixed)
  2882                           ; jumptable            260     6 (fixed)
  2883                           ;	Chosen strategy is simple_byte
  2884  042E  3A00               	xorlw	0	; case 0
  2885  042F  1903               	skipnz
  2886  0430  2C4B               	goto	l3632
  2887  0431  3A07               	xorlw	7	; case 7
  2888  0432  1903               	skipnz
  2889  0433  2BFE               	goto	l372
  2890  0434  3A0F               	xorlw	15	; case 8
  2891  0435  1903               	skipnz
  2892  0436  2C06               	goto	l374
  2893  0437  3A03               	xorlw	3	; case 11
  2894  0438  1903               	skipnz
  2895  0439  2C4B               	goto	l3632
  2896  043A  3A06               	xorlw	6	; case 13
  2897  043B  1903               	skipnz
  2898  043C  2C4B               	goto	l3632
  2899  043D  3A02               	xorlw	2	; case 15
  2900  043E  1903               	skipnz
  2901  043F  2C4B               	goto	l3632
  2902  0440  3A1E               	xorlw	30	; case 17
  2903  0441  1903               	skipnz
  2904  0442  2C4B               	goto	l3632
  2905  0443  2C0D               	goto	l376
  2906                           
  2907                           ;main.c: 700: switch( machineState_ ) {
  2908  0444  2C4B               	goto	l3632
  2909  0445                     l387:	
  2910                           ;main.c: 702: case STATE_BOOT:
  2911                           
  2912  0445  2C49               	goto	L25
  2913  0446                     l391:	
  2914                           ;main.c: 715: default:
  2915                           
  2916                           ;main.c: 711: case STATE_ADJUST_OSCILLATOR_TUNE:
  2917                           ;main.c: 713: break ;
  2918                           
  2919                           ;main.c: 710: case STATE_ADJUST_TONE:
  2920                           
  2921                           ;main.c: 708: break ;
  2922                           
  2923                           ;main.c: 703: case STATE_INITIALIZE:
  2924                           ;main.c: 704: case STATE_LOAD:
  2925                           ;main.c: 705: case STATE_SAVE:
  2926                           ;main.c: 706: case STATE_ERROR:
  2927                           ;main.c: 707: T2CONbits.TMR2ON = 0 ;
  2928                           
  2929                           
  2930                           ;main.c: 716: if( (outputEvent_.soundOff&&!(outputEvent_.soundOff=0)) )
  2931  0446  1F6B               	btfss	_outputEvent_,6
  2932  0447  2C62               	goto	l388
  2933  0448  136B               	bcf	_outputEvent_,6
  2934  0449                     L25:	
  2935                           
  2936                           ;main.c: 717: T2CONbits.TMR2ON = 0 ;
  2937  0449  111C               	bcf	28,2	;volatile
  2938                           
  2939                           ;main.c: 720: }
  2940                           
  2941                           ;main.c: 719: break ;
  2942  044A  2C62               	goto	l388
  2943  044B                     l3632:	
  2944  044B  086A               	movf	_machineState_,w
  2945                           
  2946                           ; Switch size 1, requested type "space"
  2947                           ; Number of cases is 7, Range of values is 0 to 17
  2948                           ; switch strategies available:
  2949                           ; Name         Instructions Cycles
  2950                           ; simple_byte           22    12 (average)
  2951                           ; direct_byte           42     6 (fixed)
  2952                           ; jumptable            260     6 (fixed)
  2953                           ;	Chosen strategy is simple_byte
  2954  044C  3A00               	xorlw	0	; case 0
  2955  044D  1903               	skipnz
  2956  044E  2C45               	goto	l387
  2957  044F  3A07               	xorlw	7	; case 7
  2958  0450  1903               	skipnz
  2959  0451  2C62               	goto	l388
  2960  0452  3A0F               	xorlw	15	; case 8
  2961  0453  1903               	skipnz
  2962  0454  2C62               	goto	l388
  2963  0455  3A03               	xorlw	3	; case 11
  2964  0456  1903               	skipnz
  2965  0457  2C45               	goto	l387
  2966  0458  3A06               	xorlw	6	; case 13
  2967  0459  1903               	skipnz
  2968  045A  2C45               	goto	l387
  2969  045B  3A02               	xorlw	2	; case 15
  2970  045C  1903               	skipnz
  2971  045D  2C45               	goto	l387
  2972  045E  3A1E               	xorlw	30	; case 17
  2973  045F  1903               	skipnz
  2974  0460  2C45               	goto	l387
  2975  0461  2C46               	goto	l391
  2976  0462                     l388:	
  2977                           
  2978                           ;main.c: 723: if( (outputEvent_.changeMessage&&!(outputEvent_.changeMessage=0)) ) {
  2979  0462  1CEB               	btfss	_outputEvent_,1
  2980  0463  2EB1               	goto	l393
  2981  0464  10EB               	bcf	_outputEvent_,1
  2982                           
  2983                           ;main.c: 725: switch( machineState_ ) {
  2984  0465  2EA3               	goto	l3716
  2985  0466                     l3636:	
  2986                           ;main.c: 727: case STATE_MENU_MAIN:
  2987                           
  2988                           
  2989                           ;main.c: 728: case STATE_MENU_TONE:
  2990                           ;main.c: 729: _parallel_lcd_WriteStringClearing( 0x80 | 0x1 , currentMenuStatePtr_->menu
      +                          Message[ currentMenuStatePtr_->select - currentMenuStatePtr_->cursorPosition ] ) ;
  2991  0466  0864               	movf	_currentMenuStatePtr_,w
  2992  0467  3E03               	addlw	3
  2993  0468  0086               	movwf	6
  2994  0469  0187               	clrf	7
  2995  046A  0864               	movf	_currentMenuStatePtr_,w
  2996  046B  0084               	movwf	4
  2997  046C  0185               	clrf	5
  2998  046D  0800               	movf	0,w
  2999  046E  00CA               	movwf	??_main
  3000  046F  0A64               	incf	_currentMenuStatePtr_,w
  3001  0470  0084               	movwf	4
  3002  0471  0185               	clrf	5
  3003  0472  0300               	decf	0,w
  3004  0473  3AFF               	xorlw	255
  3005  0474  074A               	addwf	??_main,w
  3006  0475  0709               	addwf	9,w
  3007  0476  0701               	addwf	1,w
  3008  0477  00CB               	movwf	??_main+1
  3009  0478  084B               	movf	??_main+1,w
  3010  0479  0086               	movwf	6
  3011  047A  0187               	clrf	7
  3012  047B  3F40               	moviw [0]fsr1
  3013  047C  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3014  047D  3F41               	moviw [1]fsr1
  3015  047E  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3016  047F  3081               	movlw	129
  3017  0480  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3018                           
  3019                           ;main.c: 730: _parallel_lcd_WriteStringClearing( 0xC0 | 0x1 , currentMenuStatePtr_->menu
      +                          Message[ currentMenuStatePtr_->select - currentMenuStatePtr_->cursorPosition + 1 ] ) ;
  3020  0483  0020               	movlb	0	; select bank0
  3021  0484  0864               	movf	_currentMenuStatePtr_,w
  3022  0485  3E03               	addlw	3
  3023  0486  0086               	movwf	6
  3024  0487  0187               	clrf	7
  3025  0488  0864               	movf	_currentMenuStatePtr_,w
  3026  0489  0084               	movwf	4
  3027  048A  0185               	clrf	5
  3028  048B  0800               	movf	0,w
  3029  048C  00CA               	movwf	??_main
  3030  048D  0A64               	incf	_currentMenuStatePtr_,w
  3031  048E  0084               	movwf	4
  3032  048F  0185               	clrf	5
  3033  0490  0300               	decf	0,w
  3034  0491  3AFF               	xorlw	255
  3035  0492  074A               	addwf	??_main,w
  3036  0493  0709               	addwf	9,w
  3037  0494  3E02               	addlw	2
  3038  0495  0701               	addwf	1,w
  3039  0496  00CB               	movwf	??_main+1
  3040  0497  084B               	movf	??_main+1,w
  3041  0498  0086               	movwf	6
  3042  0499  0187               	clrf	7
  3043  049A  3F40               	moviw [0]fsr1
  3044  049B  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3045  049C  3F41               	moviw [1]fsr1
  3046  049D  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3047  049E  30C1               	movlw	193
  3048  049F  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3049                           
  3050                           ;main.c: 732: if( currentMenuStatePtr_->select != currentMenuStatePtr_->cursorPosition )
  3051  04A2  0020               	movlb	0	; select bank0
  3052  04A3  0A64               	incf	_currentMenuStatePtr_,w
  3053  04A4  0086               	movwf	6
  3054  04A5  0187               	clrf	7
  3055  04A6  0864               	movf	_currentMenuStatePtr_,w
  3056  04A7  0084               	movwf	4
  3057  04A8  0185               	clrf	5
  3058  04A9  0800               	movf	0,w
  3059  04AA  0601               	xorwf	1,w
  3060  04AB  1903               	skipnz
  3061  04AC  2CB9               	goto	l3642
  3062                           
  3063                           ;main.c: 733: _parallel_lcd_WriteCharacter( 0x80 | 0xF , CHAR_CODE.CURSOR_UP ) ;
  3064  04AD  3035               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3065  04AE  0084               	movwf	4
  3066  04AF  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3067  04B0  0085               	movwf	5
  3068  04B1  0800               	movf	0,w	;code access
  3069  04B2  00CA               	movwf	??_main
  3070  04B3  084A               	movf	??_main,w
  3071  04B4  00C3               	movwf	__parallel_lcd_WriteCharacter@character
  3072  04B5  308F               	movlw	143
  3073  04B6  318D  25DA  3180   	fcall	__parallel_lcd_WriteCharacter
  3074  04B9                     l3642:	
  3075                           
  3076                           ;main.c: 734: if( currentMenuStatePtr_->select != ( currentMenuStatePtr_->limit + curren
      +                          tMenuStatePtr_->cursorPosition - 1 ) )
  3077  04B9  0020               	movlb	0	; select bank0
  3078  04BA  0A64               	incf	_currentMenuStatePtr_,w
  3079  04BB  0086               	movwf	6
  3080  04BC  0187               	clrf	7
  3081  04BD  0864               	movf	_currentMenuStatePtr_,w
  3082  04BE  3E02               	addlw	2
  3083  04BF  0084               	movwf	4
  3084  04C0  0185               	clrf	5
  3085  04C1  0800               	movf	0,w
  3086  04C2  0701               	addwf	1,w
  3087  04C3  00CA               	movwf	??_main
  3088  04C4  01CB               	clrf	??_main+1
  3089  04C5  0DCB               	rlf	??_main+1,f
  3090  04C6  084A               	movf	??_main,w
  3091  04C7  3EFF               	addlw	255
  3092  04C8  00CC               	movwf	??_main+2
  3093  04C9  30FF               	movlw	255
  3094  04CA  3D4B               	addwfc	??_main+1,w
  3095  04CB  00CD               	movwf	??_main+3
  3096  04CC  0864               	movf	_currentMenuStatePtr_,w
  3097  04CD  0086               	movwf	6
  3098  04CE  0187               	clrf	7
  3099  04CF  0801               	movf	1,w
  3100  04D0  064C               	xorwf	??_main+2,w
  3101  04D1  044D               	iorwf	??_main+3,w
  3102  04D2  1903               	skipnz
  3103  04D3  2CE0               	goto	l3646
  3104                           
  3105                           ;main.c: 735: _parallel_lcd_WriteCharacter( 0xC0 | 0xF , CHAR_CODE.CURSOR_DOWN ) ;
  3106  04D4  3036               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3107  04D5  0084               	movwf	4
  3108  04D6  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3109  04D7  0085               	movwf	5
  3110  04D8  0800               	movf	0,w	;code access
  3111  04D9  00CA               	movwf	??_main
  3112  04DA  084A               	movf	??_main,w
  3113  04DB  00C3               	movwf	__parallel_lcd_WriteCharacter@character
  3114  04DC  30CF               	movlw	207
  3115  04DD  318D  25DA  3180   	fcall	__parallel_lcd_WriteCharacter
  3116  04E0                     l3646:	
  3117                           
  3118                           ;main.c: 737: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuStatePtr_
      +                          ->cursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3119  04E0  3034               	movlw	low (_CHAR_CODE| (0+32768))
  3120  04E1  0084               	movwf	4
  3121  04E2  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3122  04E3  0085               	movwf	5
  3123  04E4  0800               	movf	0,w	;code access
  3124  04E5  0020               	movlb	0	; select bank0
  3125  04E6  00CA               	movwf	??_main
  3126  04E7  084A               	movf	??_main,w
  3127  04E8  00C3               	movwf	__parallel_lcd_WriteCharacter@character
  3128  04E9  0A64               	incf	_currentMenuStatePtr_,w
  3129  04EA  0086               	movwf	6
  3130  04EB  0187               	clrf	7
  3131  04EC  0801               	movf	1,w
  3132  04ED  3E37               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3133  04EE  0084               	movwf	4
  3134  04EF  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3135  04F0  1803               	skipnc
  3136  04F1  3E01               	addlw	1
  3137  04F2  0085               	movwf	5
  3138  04F3  0800               	movf	0,w	;code access
  3139  04F4  318D  25DA  3180   	fcall	__parallel_lcd_WriteCharacter
  3140                           
  3141                           ;main.c: 739: break ;
  3142  04F7  2EB1               	goto	l393
  3143  04F8                     l3648:	
  3144                           ;main.c: 741: case STATE_CONFIRM_LOAD:
  3145                           
  3146                           
  3147                           ;main.c: 742: case STATE_CONFIRM_SAVE:
  3148                           ;main.c: 743: case STATE_CONFIRM_RESET:
  3149                           ;main.c: 745: _parallel_lcd_WriteStringClearing( 0x80 | 0xD , MESSAGE.CONFIRM.NO ) ;
  3150  04F8  3018               	movlw	low ((_MESSAGE+24)| (0+32768))
  3151  04F9  0084               	movwf	4
  3152  04FA  3088               	movlw	high ((_MESSAGE+24)| (0+32768))
  3153  04FB  0085               	movwf	5
  3154  04FC  3F00               	moviw [0]fsr0
  3155  04FD  0020               	movlb	0	; select bank0
  3156  04FE  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3157  04FF  3F01               	moviw [1]fsr0
  3158  0500  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3159  0501  308D               	movlw	141
  3160  0502  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3161                           
  3162                           ;main.c: 746: _parallel_lcd_WriteStringClearing( 0xC0 | 0xD , MESSAGE.CONFIRM.YES ) ;
  3163  0505  301A               	movlw	low ((_MESSAGE+26)| (0+32768))
  3164  0506  0084               	movwf	4
  3165  0507  3088               	movlw	high ((_MESSAGE+26)| (0+32768))
  3166  0508  0085               	movwf	5
  3167  0509  3F00               	moviw [0]fsr0
  3168  050A  0020               	movlb	0	; select bank0
  3169  050B  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3170  050C  3F01               	moviw [1]fsr0
  3171  050D  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3172  050E  30CD               	movlw	205
  3173  050F  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3174                           
  3175                           ;main.c: 748: switch( machineState_ ) {
  3176  0512  2D3D               	goto	l3658
  3177  0513                     l3650:	
  3178                           ;main.c: 749: case STATE_CONFIRM_LOAD:
  3179                           
  3180                           
  3181                           ;main.c: 750: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.LOAD ) ;
  3182  0513  3012               	movlw	low ((_MESSAGE+18)| (0+32768))
  3183  0514  0084               	movwf	4
  3184  0515  3088               	movlw	high ((_MESSAGE+18)| (0+32768))
  3185  0516  0085               	movwf	5
  3186  0517  3F00               	moviw [0]fsr0
  3187  0518  0020               	movlb	0	; select bank0
  3188  0519  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3189  051A  3F01               	moviw [1]fsr0
  3190  051B  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3191  051C  3080               	movlw	128
  3192  051D  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3193                           
  3194                           ;main.c: 751: break ;
  3195  0520  2D49               	goto	l3660
  3196  0521                     l3652:	
  3197                           ;main.c: 752: case STATE_CONFIRM_SAVE:
  3198                           
  3199                           
  3200                           ;main.c: 753: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.SAVE ) ;
  3201  0521  3014               	movlw	low ((_MESSAGE+20)| (0+32768))
  3202  0522  0084               	movwf	4
  3203  0523  3088               	movlw	high ((_MESSAGE+20)| (0+32768))
  3204  0524  0085               	movwf	5
  3205  0525  3F00               	moviw [0]fsr0
  3206  0526  0020               	movlb	0	; select bank0
  3207  0527  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3208  0528  3F01               	moviw [1]fsr0
  3209  0529  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3210  052A  3080               	movlw	128
  3211  052B  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3212                           
  3213                           ;main.c: 754: break ;
  3214  052E  2D49               	goto	l3660
  3215  052F                     l3654:	
  3216                           ;main.c: 755: case STATE_CONFIRM_RESET:
  3217                           
  3218                           
  3219                           ;main.c: 756: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.RESET ) ;
  3220  052F  3016               	movlw	low ((_MESSAGE+22)| (0+32768))
  3221  0530  0084               	movwf	4
  3222  0531  3088               	movlw	high ((_MESSAGE+22)| (0+32768))
  3223  0532  0085               	movwf	5
  3224  0533  3F00               	moviw [0]fsr0
  3225  0534  0020               	movlb	0	; select bank0
  3226  0535  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3227  0536  3F01               	moviw [1]fsr0
  3228  0537  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3229  0538  3080               	movlw	128
  3230  0539  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3231                           
  3232                           ;main.c: 759: }
  3233                           
  3234                           ;main.c: 757: break ;
  3235  053C  2D49               	goto	l3660
  3236  053D                     l3658:	
  3237  053D  0020               	movlb	0	; select bank0
  3238  053E  086A               	movf	_machineState_,w
  3239                           
  3240                           ; Switch size 1, requested type "space"
  3241                           ; Number of cases is 3, Range of values is 10 to 14
  3242                           ; switch strategies available:
  3243                           ; Name         Instructions Cycles
  3244                           ; simple_byte           10     6 (average)
  3245                           ; direct_byte           19     9 (fixed)
  3246                           ; jumptable            263     9 (fixed)
  3247                           ;	Chosen strategy is simple_byte
  3248  053F  3A0A               	xorlw	10	; case 10
  3249  0540  1903               	skipnz
  3250  0541  2D21               	goto	l3652
  3251  0542  3A06               	xorlw	6	; case 12
  3252  0543  1903               	skipnz
  3253  0544  2D13               	goto	l3650
  3254  0545  3A02               	xorlw	2	; case 14
  3255  0546  1903               	skipnz
  3256  0547  2D2F               	goto	l3654
  3257  0548  2D49               	goto	l3660
  3258  0549                     l3660:	
  3259                           
  3260                           ;main.c: 761: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentMenuStatePtr
      +                          _->cursorPosition ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3261  0549  3034               	movlw	low (_CHAR_CODE| (0+32768))
  3262  054A  0084               	movwf	4
  3263  054B  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3264  054C  0085               	movwf	5
  3265  054D  0800               	movf	0,w	;code access
  3266  054E  0020               	movlb	0	; select bank0
  3267  054F  00CA               	movwf	??_main
  3268  0550  084A               	movf	??_main,w
  3269  0551  00C3               	movwf	__parallel_lcd_WriteCharacter@character
  3270  0552  0A64               	incf	_currentMenuStatePtr_,w
  3271  0553  0086               	movwf	6
  3272  0554  0187               	clrf	7
  3273  0555  0801               	movf	1,w
  3274  0556  3E37               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3275  0557  0084               	movwf	4
  3276  0558  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3277  0559  1803               	skipnc
  3278  055A  3E01               	addlw	1
  3279  055B  0085               	movwf	5
  3280  055C  0800               	movf	0,w	;code access
  3281  055D  380C               	iorlw	12
  3282  055E  318D  25DA  3180   	fcall	__parallel_lcd_WriteCharacter
  3283                           
  3284                           ;main.c: 763: break ;
  3285  0561  2EB1               	goto	l393
  3286  0562                     l3662:	
  3287                           ;main.c: 765: case STATE_METRONOME:
  3288                           
  3289                           
  3290                           ;main.c: 766: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  3291  0562  3000               	movlw	low (_MESSAGE| (0+32768))
  3292  0563  0084               	movwf	4
  3293  0564  3088               	movlw	high (_MESSAGE| (0+32768))
  3294  0565  0085               	movwf	5
  3295  0566  3F00               	moviw [0]fsr0
  3296  0567  0020               	movlb	0	; select bank0
  3297  0568  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3298  0569  3F01               	moviw [1]fsr0
  3299  056A  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3300  056B  3080               	movlw	128
  3301  056C  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3302                           
  3303                           ;main.c: 767: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.METRONOME.TEMPO ) 
      +                          ;
  3304  056F  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  3305  0570  0084               	movwf	4
  3306  0571  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  3307  0572  0085               	movwf	5
  3308  0573  3F00               	moviw [0]fsr0
  3309  0574  0020               	movlb	0	; select bank0
  3310  0575  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3311  0576  3F01               	moviw [1]fsr0
  3312  0577  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3313  0578  30C0               	movlw	192
  3314  0579  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3315                           
  3316                           ;main.c: 768: if( isMute_ ) _parallel_lcd_WriteString( 0x80 | 0xA , MESSAGE.METRONOME.MU
      +                          TE ) ;
  3317  057C  0020               	movlb	0	; select bank0
  3318  057D  0868               	movf	_isMute_,w
  3319  057E  1903               	btfsc	3,2
  3320  057F  2E18               	goto	l3690
  3321  0580  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  3322  0581  0084               	movwf	4
  3323  0582  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3324  0583  0085               	movwf	5
  3325  0584  3F00               	moviw [0]fsr0
  3326  0585  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3327  0586  3F01               	moviw [1]fsr0
  3328  0587  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3329  0588  308A               	movlw	138
  3330  0589  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3331  058C  2E18               	goto	l3690
  3332  058D                     l3670:	
  3333                           ;main.c: 772: case STATE_ADJUST_BEAT_COUNT:
  3334                           
  3335                           ;main.c: 770: break ;
  3336                           
  3337                           ;main.c: 769: outputEvent_.changeValue = 1 ;
  3338                           
  3339                           
  3340                           ;main.c: 773: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3341  058D  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3342  058E  0084               	movwf	4
  3343  058F  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3344  0590  0085               	movwf	5
  3345  0591  3F00               	moviw [0]fsr0
  3346  0592  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3347  0593  3F01               	moviw [1]fsr0
  3348  0594  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3349  0595  3080               	movlw	128
  3350  0596  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3351                           
  3352                           ;main.c: 774: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.BEAT
      +                          _COUNT ) ;
  3353  0599  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  3354  059A  0084               	movwf	4
  3355  059B  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  3356  059C  0085               	movwf	5
  3357  059D  3F00               	moviw [0]fsr0
  3358  059E  0020               	movlb	0	; select bank0
  3359  059F  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3360  05A0  3F01               	moviw [1]fsr0
  3361  05A1  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3362  05A2  30C0               	movlw	192
  3363  05A3  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3364  05A6  2E18               	goto	l3690
  3365  05A7                     l3674:	
  3366                           ;main.c: 778: case STATE_ADJUST_DURATION:
  3367                           
  3368                           ;main.c: 776: break ;
  3369                           
  3370                           ;main.c: 775: outputEvent_.changeValue = 1 ;
  3371                           
  3372                           
  3373                           ;main.c: 779: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3374  05A7  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3375  05A8  0084               	movwf	4
  3376  05A9  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3377  05AA  0085               	movwf	5
  3378  05AB  3F00               	moviw [0]fsr0
  3379  05AC  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3380  05AD  3F01               	moviw [1]fsr0
  3381  05AE  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3382  05AF  3080               	movlw	128
  3383  05B0  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3384                           
  3385                           ;main.c: 780: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.DURA
      +                          TION ) ;
  3386  05B3  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  3387  05B4  0084               	movwf	4
  3388  05B5  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  3389  05B6  0085               	movwf	5
  3390  05B7  3F00               	moviw [0]fsr0
  3391  05B8  0020               	movlb	0	; select bank0
  3392  05B9  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3393  05BA  3F01               	moviw [1]fsr0
  3394  05BB  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3395  05BC  30C0               	movlw	192
  3396  05BD  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3397  05C0  2E18               	goto	l3690
  3398  05C1                     l3678:	
  3399                           ;main.c: 784: case STATE_ADJUST_PULSE_WIDTH:
  3400                           
  3401                           ;main.c: 782: break ;
  3402                           
  3403                           ;main.c: 781: outputEvent_.changeValue = 1 ;
  3404                           
  3405                           
  3406                           ;main.c: 785: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3407  05C1  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3408  05C2  0084               	movwf	4
  3409  05C3  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3410  05C4  0085               	movwf	5
  3411  05C5  3F00               	moviw [0]fsr0
  3412  05C6  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3413  05C7  3F01               	moviw [1]fsr0
  3414  05C8  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3415  05C9  3080               	movlw	128
  3416  05CA  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3417                           
  3418                           ;main.c: 786: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.PULS
      +                          E_WIDTH ) ;
  3419  05CD  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  3420  05CE  0084               	movwf	4
  3421  05CF  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  3422  05D0  0085               	movwf	5
  3423  05D1  3F00               	moviw [0]fsr0
  3424  05D2  0020               	movlb	0	; select bank0
  3425  05D3  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3426  05D4  3F01               	moviw [1]fsr0
  3427  05D5  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3428  05D6  30C0               	movlw	192
  3429  05D7  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3430  05DA  2E18               	goto	l3690
  3431  05DB                     l3682:	
  3432                           ;main.c: 790: case STATE_ADJUST_OSCILLATOR_TUNE:
  3433                           
  3434                           ;main.c: 788: break ;
  3435                           
  3436                           ;main.c: 787: outputEvent_.changeValue = 1 ;
  3437                           
  3438                           
  3439                           ;main.c: 791: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3440  05DB  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3441  05DC  0084               	movwf	4
  3442  05DD  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3443  05DE  0085               	movwf	5
  3444  05DF  3F00               	moviw [0]fsr0
  3445  05E0  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3446  05E1  3F01               	moviw [1]fsr0
  3447  05E2  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3448  05E3  3080               	movlw	128
  3449  05E4  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3450                           
  3451                           ;main.c: 792: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.OSCI
      +                          LLATOR_TUNE ) ;
  3452  05E7  3010               	movlw	low ((_MESSAGE+16)| (0+32768))
  3453  05E8  0084               	movwf	4
  3454  05E9  3088               	movlw	high ((_MESSAGE+16)| (0+32768))
  3455  05EA  0085               	movwf	5
  3456  05EB  3F00               	moviw [0]fsr0
  3457  05EC  0020               	movlb	0	; select bank0
  3458  05ED  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3459  05EE  3F01               	moviw [1]fsr0
  3460  05EF  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3461  05F0  30C0               	movlw	192
  3462  05F1  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3463  05F4  2E18               	goto	l3690
  3464  05F5                     l3686:	
  3465                           ;main.c: 796: case STATE_ADJUST_TONE:
  3466                           
  3467                           ;main.c: 794: break ;
  3468                           
  3469                           ;main.c: 793: outputEvent_.changeValue = 1 ;
  3470                           
  3471                           
  3472                           ;main.c: 797: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3473  05F5  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3474  05F6  0084               	movwf	4
  3475  05F7  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3476  05F8  0085               	movwf	5
  3477  05F9  3F00               	moviw [0]fsr0
  3478  05FA  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3479  05FB  3F01               	moviw [1]fsr0
  3480  05FC  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3481  05FD  3080               	movlw	128
  3482  05FE  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3483                           
  3484                           ;main.c: 798: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.TONE
      +                           ) ;
  3485  0601  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  3486  0602  0084               	movwf	4
  3487  0603  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  3488  0604  0085               	movwf	5
  3489  0605  3F00               	moviw [0]fsr0
  3490  0606  0020               	movlb	0	; select bank0
  3491  0607  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3492  0608  3F01               	moviw [1]fsr0
  3493  0609  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3494  060A  30C0               	movlw	192
  3495  060B  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3496                           
  3497                           ;main.c: 799: _parallel_lcd_WriteCharacter( 0xC0 | 0x5 , menuStateTone_.select - MENU_IT
      +                          EM_TONE_ADJUST_TONE0 + '0' ) ;
  3498  060E  0020               	movlb	0	; select bank0
  3499  060F  083F               	movf	_menuStateTone_,w
  3500  0610  3E2F               	addlw	47
  3501  0611  00CA               	movwf	??_main
  3502  0612  084A               	movf	??_main,w
  3503  0613  00C3               	movwf	__parallel_lcd_WriteCharacter@character
  3504  0614  30C5               	movlw	197
  3505  0615  318D  25DA  3180   	fcall	__parallel_lcd_WriteCharacter
  3506  0618                     l3690:	
  3507                           
  3508                           ;main.c: 800: outputEvent_.changeValue = 1 ;
  3509  0618  0020               	movlb	0	; select bank0
  3510  0619  156B               	bsf	_outputEvent_,2
  3511                           
  3512                           ;main.c: 801: break ;
  3513  061A  2EB1               	goto	l393
  3514  061B                     l3692:	
  3515                           ;main.c: 803: case STATE_INFORMATION:
  3516                           
  3517                           
  3518                           ;main.c: 804: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE_INFORMATION[ menuS
      +                          tateInformation_.select ] ) ;
  3519  061B  3537               	lslf	_menuStateInformation_,w
  3520  061C  3E20               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3521  061D  0086               	movwf	6
  3522  061E  0187               	clrf	7
  3523  061F  3F40               	moviw [0]fsr1
  3524  0620  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3525  0621  3F41               	moviw [1]fsr1
  3526  0622  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3527  0623  3080               	movlw	128
  3528  0624  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3529                           
  3530                           ;main.c: 805: _parallel_lcd_WriteString( 0x80 | 0xA , &informationValueBuffer[ menuState
      +                          Information_.select ] ) ;
  3531  0627  3007               	movlw	7
  3532  0628  0020               	movlb	0	; select bank0
  3533  0629  00CA               	movwf	??_main
  3534  062A  084A               	movf	??_main,w
  3535  062B  00F4               	movwf	___bmul@multiplicand
  3536  062C  0837               	movf	_menuStateInformation_,w
  3537  062D  318D  25E8  3180   	fcall	___bmul
  3538  0630  3EA6               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3539  0631  0020               	movlb	0	; select bank0
  3540  0632  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3541  0633  3000               	movlw	0
  3542  0634  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3543  0635  308A               	movlw	138
  3544  0636  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3545                           
  3546                           ;main.c: 806: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ menuS
      +                          tateInformation_.select + 1 ] ) ;
  3547  0639  0020               	movlb	0	; select bank0
  3548  063A  3537               	lslf	_menuStateInformation_,w
  3549  063B  3E02               	addlw	2
  3550  063C  3E20               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3551  063D  0086               	movwf	6
  3552  063E  0187               	clrf	7
  3553  063F  3F40               	moviw [0]fsr1
  3554  0640  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3555  0641  3F41               	moviw [1]fsr1
  3556  0642  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3557  0643  30C0               	movlw	192
  3558  0644  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3559                           
  3560                           ;main.c: 807: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ menuState
      +                          Information_.select + 1 ] ) ;
  3561  0647  3007               	movlw	7
  3562  0648  0020               	movlb	0	; select bank0
  3563  0649  00CA               	movwf	??_main
  3564  064A  084A               	movf	??_main,w
  3565  064B  00F4               	movwf	___bmul@multiplicand
  3566  064C  0837               	movf	_menuStateInformation_,w
  3567  064D  3E01               	addlw	1
  3568  064E  318D  25E8  3180   	fcall	___bmul
  3569  0651  3EA6               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3570  0652  0020               	movlb	0	; select bank0
  3571  0653  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3572  0654  3000               	movlw	0
  3573  0655  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3574  0656  30CA               	movlw	202
  3575  0657  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3576                           
  3577                           ;main.c: 808: break ;
  3578  065A  2EB1               	goto	l393
  3579  065B                     l3698:	
  3580                           ;main.c: 810: case STATE_LOAD:
  3581                           
  3582                           
  3583                           ;main.c: 811: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.LOAD ) ;
  3584  065B  301C               	movlw	low ((_MESSAGE+28)| (0+32768))
  3585  065C  0084               	movwf	4
  3586  065D  3088               	movlw	high ((_MESSAGE+28)| (0+32768))
  3587  065E  0085               	movwf	5
  3588  065F  3F00               	moviw [0]fsr0
  3589  0660  0020               	movlb	0	; select bank0
  3590  0661  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3591  0662  3F01               	moviw [1]fsr0
  3592  0663  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3593  0664  3080               	movlw	128
  3594  0665  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3595                           
  3596                           ;main.c: 812: _parallel_lcd_ClearRow( 0xC0 ) ;
  3597  0668  30C0               	movlw	192
  3598  0669  318E  2648  3180   	fcall	__parallel_lcd_ClearRow
  3599                           
  3600                           ;main.c: 813: break ;
  3601  066C  2EB1               	goto	l393
  3602  066D                     l3702:	
  3603                           ;main.c: 815: case STATE_SAVE:
  3604                           
  3605                           
  3606                           ;main.c: 816: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.SAVE ) ;
  3607  066D  301E               	movlw	low ((_MESSAGE+30)| (0+32768))
  3608  066E  0084               	movwf	4
  3609  066F  3088               	movlw	high ((_MESSAGE+30)| (0+32768))
  3610  0670  0085               	movwf	5
  3611  0671  3F00               	moviw [0]fsr0
  3612  0672  0020               	movlb	0	; select bank0
  3613  0673  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3614  0674  3F01               	moviw [1]fsr0
  3615  0675  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3616  0676  3080               	movlw	128
  3617  0677  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3618                           
  3619                           ;main.c: 817: _parallel_lcd_ClearRow( 0xC0 ) ;
  3620  067A  30C0               	movlw	192
  3621  067B  318E  2648  3180   	fcall	__parallel_lcd_ClearRow
  3622                           
  3623                           ;main.c: 818: break ;
  3624  067E  2EB1               	goto	l393
  3625  067F                     l3706:	
  3626                           ;main.c: 820: case STATE_INITIALIZE:
  3627                           
  3628                           
  3629                           ;main.c: 821: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.LOAD_DEFAUL
      +                          T ) ;
  3630  067F  3020               	movlw	low ((_MESSAGE+32)| (0+32768))
  3631  0680  0084               	movwf	4
  3632  0681  3088               	movlw	high ((_MESSAGE+32)| (0+32768))
  3633  0682  0085               	movwf	5
  3634  0683  3F00               	moviw [0]fsr0
  3635  0684  0020               	movlb	0	; select bank0
  3636  0685  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3637  0686  3F01               	moviw [1]fsr0
  3638  0687  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3639  0688  3080               	movlw	128
  3640  0689  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3641                           
  3642                           ;main.c: 822: _parallel_lcd_ClearRow( 0xC0 ) ;
  3643  068C  30C0               	movlw	192
  3644  068D  318E  2648  3180   	fcall	__parallel_lcd_ClearRow
  3645                           
  3646                           ;main.c: 823: break ;
  3647  0690  2EB1               	goto	l393
  3648  0691                     l3710:	
  3649                           ;main.c: 825: case STATE_ERROR:
  3650                           
  3651                           
  3652                           ;main.c: 826: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.ERROR.MESSAGE ) ;
  3653  0691  3022               	movlw	low ((_MESSAGE+34)| (0+32768))
  3654  0692  0084               	movwf	4
  3655  0693  3088               	movlw	high ((_MESSAGE+34)| (0+32768))
  3656  0694  0085               	movwf	5
  3657  0695  3F00               	moviw [0]fsr0
  3658  0696  0020               	movlb	0	; select bank0
  3659  0697  00C3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3660  0698  3F01               	moviw [1]fsr0
  3661  0699  00C4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3662  069A  3080               	movlw	128
  3663  069B  318E  26AC  3180   	fcall	__parallel_lcd_WriteStringClearing
  3664                           
  3665                           ;main.c: 827: _parallel_lcd_ClearRow( 0xC0 ) ;
  3666  069E  30C0               	movlw	192
  3667  069F  318E  2648  3180   	fcall	__parallel_lcd_ClearRow
  3668                           
  3669                           ;main.c: 829: }
  3670                           
  3671                           ;main.c: 828: break ;
  3672  06A2  2EB1               	goto	l393
  3673  06A3                     l3716:	
  3674  06A3  0020               	movlb	0	; select bank0
  3675  06A4  086A               	movf	_machineState_,w
  3676                           
  3677                           ; Switch size 1, requested type "space"
  3678                           ; Number of cases is 16, Range of values is 1 to 17
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; direct_byte           43     9 (fixed)
  3682                           ; simple_byte           49    25 (average)
  3683                           ; jumptable            263     9 (fixed)
  3684                           ;	Chosen strategy is direct_byte
  3685  06A5  3EFF               	addlw	-1
  3686  06A6  1C03               	skipc
  3687  06A7  2EB1               	goto	l393
  3688  06A8  0084               	movwf	4
  3689  06A9  3011               	movlw	17
  3690  06AA  0204               	subwf	4,w
  3691  06AB  1803               	skipnc
  3692  06AC  2EB1               	goto	l393
  3693  06AD  3189               	movlp	high S3914
  3694  06AE  3504               	lslf	4,w
  3695  06AF  3E7A               	addlw	low S3914
  3696  06B0  0082               	movwf	2
  3697  06B1                     l393:	
  3698                           
  3699                           ;main.c: 831: }
  3700                           ;main.c: 834: if( (outputEvent_.changeValue&&!(outputEvent_.changeValue=0)) ) {
  3701  06B1  0020               	movlb	0	; select bank0
  3702  06B2  1D6B               	btfss	_outputEvent_,2
  3703  06B3  29AF               	goto	l251
  3704  06B4  116B               	bcf	_outputEvent_,2
  3705                           
  3706                           ;main.c: 836: uint16_t tmpValue ;
  3707                           ;main.c: 837: char valueString[6] = "= 000" ;
  3708  06B5  30A0               	movlw	low main@F3053
  3709  06B6  0086               	movwf	6
  3710  06B7  3000               	movlw	high main@F3053
  3711  06B8  0087               	movwf	7
  3712  06B9  304E               	movlw	low main@valueString
  3713  06BA  0084               	movwf	4
  3714  06BB  3000               	movlw	high main@valueString
  3715  06BC  0085               	movwf	5
  3716  06BD  3006               	movlw	6
  3717  06BE  00CA               	movwf	??_main
  3718  06BF                     u3110:	
  3719  06BF  0016               	moviw fsr1++
  3720  06C0  001A               	movwi fsr0++
  3721  06C1  0BCA               	decfsz	??_main,f
  3722  06C2  2EBF               	goto	u3110
  3723                           
  3724                           ;main.c: 839: switch( machineState_ ) {
  3725  06C3  2EEF               	goto	l3734
  3726  06C4                     l3722:	
  3727                           ;main.c: 841: case STATE_METRONOME:
  3728                           
  3729                           
  3730                           ;main.c: 842: tmpValue = configration_.tempo ;
  3731  06C4  082A               	movf	_configration_+2,w
  3732  06C5  00D6               	movwf	main@tmpValue+1
  3733  06C6  0829               	movf	_configration_+1,w
  3734  06C7  00D5               	movwf	main@tmpValue
  3735                           
  3736                           ;main.c: 843: break ;
  3737  06C8  2EF7               	goto	l3736
  3738  06C9                     l426:	
  3739                           ;main.c: 845: case STATE_ADJUST_OSCILLATOR_TUNE:
  3740                           
  3741                           
  3742                           ;main.c: 846: if( (uint08_t)configration_.oscillatorTune & 0x80 ) {
  3743  06C9  1FB1               	btfss	_configration_+9,7
  3744  06CA  2EDE               	goto	l3728
  3745                           
  3746                           ;main.c: 847: tmpValue = -configration_.oscillatorTune ;
  3747  06CB  0831               	movf	_configration_+9,w
  3748  06CC  00CA               	movwf	??_main
  3749  06CD  01CB               	clrf	??_main+1
  3750  06CE  1BCA               	btfsc	??_main,7
  3751  06CF  03CB               	decf	??_main+1,f
  3752  06D0  09CA               	comf	??_main,f
  3753  06D1  09CB               	comf	??_main+1,f
  3754  06D2  0ACA               	incf	??_main,f
  3755  06D3  1903               	skipnz
  3756  06D4  0ACB               	incf	??_main+1,f
  3757  06D5  084A               	movf	??_main,w
  3758  06D6  00D5               	movwf	main@tmpValue
  3759  06D7  084B               	movf	??_main+1,w
  3760  06D8  00D6               	movwf	main@tmpValue+1
  3761                           
  3762                           ;main.c: 848: valueString[1] = '-' ;
  3763  06D9  302D               	movlw	45
  3764  06DA  00CA               	movwf	??_main
  3765  06DB  084A               	movf	??_main,w
  3766  06DC  00CF               	movwf	main@valueString+1
  3767                           
  3768                           ;main.c: 849: }
  3769  06DD  2EF7               	goto	l3736
  3770  06DE                     l3728:	
  3771                           
  3772                           ;main.c: 850: else {
  3773                           ;main.c: 851: tmpValue = (uint16_t)configration_.oscillatorTune ;
  3774  06DE  0831               	movf	_configration_+9,w
  3775  06DF  00D5               	movwf	main@tmpValue
  3776  06E0  01D6               	clrf	main@tmpValue+1
  3777  06E1  1BD5               	btfsc	main@tmpValue,7
  3778  06E2  03D6               	decf	main@tmpValue+1,f
  3779                           
  3780                           ;main.c: 852: }
  3781                           ;main.c: 853: break ;
  3782  06E3  2EF7               	goto	l3736
  3783  06E4                     l3730:	
  3784                           ;main.c: 855: default:
  3785                           
  3786                           
  3787                           ;main.c: 856: tmpValue = *currentValuePtr ;
  3788  06E4  0865               	movf	_currentValuePtr,w
  3789  06E5  0086               	movwf	6
  3790  06E6  0187               	clrf	7
  3791  06E7  0801               	movf	1,w
  3792  06E8  00CA               	movwf	??_main
  3793  06E9  01CB               	clrf	??_main+1
  3794  06EA  084A               	movf	??_main,w
  3795  06EB  00D5               	movwf	main@tmpValue
  3796  06EC  084B               	movf	??_main+1,w
  3797  06ED  00D6               	movwf	main@tmpValue+1
  3798                           
  3799                           ;main.c: 858: }
  3800                           
  3801                           ;main.c: 857: break ;
  3802  06EE  2EF7               	goto	l3736
  3803  06EF                     l3734:	
  3804  06EF  086A               	movf	_machineState_,w
  3805                           
  3806                           ; Switch size 1, requested type "space"
  3807                           ; Number of cases is 2, Range of values is 1 to 8
  3808                           ; switch strategies available:
  3809                           ; Name         Instructions Cycles
  3810                           ; simple_byte            7     4 (average)
  3811                           ; direct_byte           25     9 (fixed)
  3812                           ; jumptable            263     9 (fixed)
  3813                           ;	Chosen strategy is simple_byte
  3814  06F0  3A01               	xorlw	1	; case 1
  3815  06F1  1903               	skipnz
  3816  06F2  2EC4               	goto	l3722
  3817  06F3  3A09               	xorlw	9	; case 8
  3818  06F4  1903               	skipnz
  3819  06F5  2EC9               	goto	l426
  3820  06F6  2EE4               	goto	l3730
  3821  06F7                     l3736:	
  3822                           
  3823                           ;main.c: 860: uint08_t isNonZero = BOOL_FALSE ;
  3824  06F7  01D4               	clrf	main@isNonZero
  3825                           
  3826                           ;main.c: 861: for( uint08_t i = 2 ; i != 5 ; i++ ) {
  3827  06F8  3002               	movlw	2
  3828  06F9  00CA               	movwf	??_main
  3829  06FA  084A               	movf	??_main,w
  3830  06FB  00DD               	movwf	main@i
  3831  06FC  2F50               	goto	L30
  3832  06FD                     l3744:	
  3833                           ;main.c: 864: case 2: compareUnit = 100 ;
  3834                           
  3835                           ;main.c: 862: uint08_t compareUnit ;
  3836                           ;main.c: 863: switch( i ) {
  3837                           
  3838  06FD  3064               	movlw	100
  3839  06FE  2F00               	goto	L26
  3840  06FF                     l3746:	
  3841                           ;main.c: 866: case 3: compareUnit = 10 ;
  3842                           
  3843                           ;main.c: 865: break ;
  3844                           
  3845  06FF  300A               	movlw	10
  3846  0700                     L26:	
  3847  0700  00CA               	movwf	??_main
  3848  0701  084A               	movf	??_main,w
  3849  0702  00D8               	movwf	main@compareUnit
  3850                           
  3851                           ;main.c: 867: break ;
  3852  0703  2F12               	goto	l3758
  3853  0704                     l436:	
  3854                           ;main.c: 868: case 4: compareUnit = 1 ;
  3855                           
  3856  0704  01D8               	clrf	main@compareUnit
  3857  0705  0AD8               	incf	main@compareUnit,f
  3858                           
  3859                           ;main.c: 870: }
  3860                           
  3861                           ;main.c: 869: break ;
  3862  0706  2F12               	goto	l3758
  3863  0707                     l3750:	
  3864  0707  085D               	movf	main@i,w
  3865                           
  3866                           ; Switch size 1, requested type "space"
  3867                           ; Number of cases is 3, Range of values is 2 to 4
  3868                           ; switch strategies available:
  3869                           ; Name         Instructions Cycles
  3870                           ; simple_byte           10     6 (average)
  3871                           ; direct_byte           15     9 (fixed)
  3872                           ; jumptable            263     9 (fixed)
  3873                           ;	Chosen strategy is simple_byte
  3874  0708  3A02               	xorlw	2	; case 2
  3875  0709  1903               	skipnz
  3876  070A  2EFD               	goto	l3744
  3877  070B  3A01               	xorlw	1	; case 3
  3878  070C  1903               	skipnz
  3879  070D  2EFF               	goto	l3746
  3880  070E  3A07               	xorlw	7	; case 4
  3881  070F  1903               	skipnz
  3882  0710  2F04               	goto	l436
  3883  0711  2F12               	goto	l3758
  3884  0712                     l3758:	
  3885                           ;main.c: 871: while( tmpValue >= compareUnit ) {
  3886                           
  3887  0712  0858               	movf	main@compareUnit,w
  3888  0713  00CA               	movwf	??_main
  3889  0714  01CB               	clrf	??_main+1
  3890  0715  084B               	movf	??_main+1,w
  3891  0716  0256               	subwf	main@tmpValue+1,w
  3892  0717  1D03               	skipz
  3893  0718  2F1B               	goto	u3145
  3894  0719  084A               	movf	??_main,w
  3895  071A  0255               	subwf	main@tmpValue,w
  3896  071B                     u3145:	
  3897  071B  1C03               	btfss	3,0
  3898  071C  2F2F               	goto	l3760
  3899                           
  3900                           ;main.c: 872: tmpValue -= compareUnit ;
  3901  071D  0858               	movf	main@compareUnit,w
  3902  071E  00CA               	movwf	??_main
  3903  071F  01CB               	clrf	??_main+1
  3904  0720  084A               	movf	??_main,w
  3905  0721  02D5               	subwf	main@tmpValue,f
  3906  0722  084B               	movf	??_main+1,w
  3907  0723  3BD6               	subwfb	main@tmpValue+1,f
  3908                           
  3909                           ;main.c: 873: valueString[i]++ ;
  3910  0724  3001               	movlw	1
  3911  0725  00CA               	movwf	??_main
  3912  0726  085D               	movf	main@i,w
  3913  0727  3E4E               	addlw	(low (main@valueString| 0))& (0+255)
  3914  0728  0086               	movwf	6
  3915  0729  0187               	clrf	7
  3916  072A  084A               	movf	??_main,w
  3917  072B  0781               	addwf	1,f
  3918                           
  3919                           ;main.c: 874: isNonZero = BOOL_TRUE ;
  3920  072C  01D4               	clrf	main@isNonZero
  3921  072D  0AD4               	incf	main@isNonZero,f
  3922  072E  2F12               	goto	l3758
  3923  072F                     l3760:	
  3924                           
  3925                           ;main.c: 875: }
  3926                           ;main.c: 877: if( i == 4 ) break ;
  3927  072F  3004               	movlw	4
  3928  0730  065D               	xorwf	main@i,w
  3929  0731  1903               	btfsc	3,2
  3930  0732  2F54               	goto	l3774
  3931                           
  3932                           ;main.c: 879: if( isNonZero ) continue ;
  3933  0733  0854               	movf	main@isNonZero,w
  3934  0734  1D03               	btfss	3,2
  3935  0735  2F4C               	goto	l3770
  3936                           
  3937                           ;main.c: 881: valueString[i] = valueString[ i - 1 ] ;
  3938  0736  085D               	movf	main@i,w
  3939  0737  3EFF               	addlw	255
  3940  0738  3E4E               	addlw	(low (main@valueString| 0))& (0+255)
  3941  0739  0086               	movwf	6
  3942  073A  0187               	clrf	7
  3943  073B  0801               	movf	1,w
  3944  073C  00CA               	movwf	??_main
  3945  073D  085D               	movf	main@i,w
  3946  073E  3E4E               	addlw	(low (main@valueString| 0))& (0+255)
  3947  073F  0086               	movwf	6
  3948  0740  0187               	clrf	7
  3949  0741  084A               	movf	??_main,w
  3950  0742  0081               	movwf	1
  3951                           
  3952                           ;main.c: 882: valueString[ i - 1 ] = ' ' ;
  3953  0743  3020               	movlw	32
  3954  0744  00CA               	movwf	??_main
  3955  0745  085D               	movf	main@i,w
  3956  0746  3EFF               	addlw	255
  3957  0747  3E4E               	addlw	(low (main@valueString| 0))& (0+255)
  3958  0748  0086               	movwf	6
  3959  0749  0187               	clrf	7
  3960  074A  084A               	movf	??_main,w
  3961  074B  0081               	movwf	1
  3962  074C                     l3770:	
  3963  074C  3001               	movlw	1
  3964  074D  00CA               	movwf	??_main
  3965  074E  084A               	movf	??_main,w
  3966  074F  07DD               	addwf	main@i,f
  3967  0750                     L30:	
  3968  0750  3005               	movlw	5
  3969  0751  065D               	xorwf	main@i,w
  3970  0752  1D03               	btfss	3,2
  3971  0753  2F07               	goto	l3750
  3972  0754                     l3774:	
  3973                           
  3974                           ;main.c: 884: }
  3975                           ;main.c: 886: _parallel_lcd_WriteString( 0xC0 | 0xB , &valueString ) ;
  3976  0754  304E               	movlw	low main@valueString
  3977  0755  00C5               	movwf	__parallel_lcd_WriteString@stringPtr
  3978  0756  3000               	movlw	high main@valueString
  3979  0757  00C6               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3980  0758  30CB               	movlw	203
  3981  0759  318E  2662  3180   	fcall	__parallel_lcd_WriteString
  3982                           
  3983                           ;main.c: 888: switch( machineState_ ) {
  3984  075C  2F6B               	goto	l3784
  3985  075D                     l3776:	
  3986                           ;main.c: 889: case STATE_ADJUST_OSCILLATOR_TUNE:
  3987                           
  3988                           
  3989                           ;main.c: 890: OSCTUNE = configration_.oscillatorTune ;
  3990  075D  0020               	movlb	0	; select bank0
  3991  075E  0831               	movf	_configration_+9,w
  3992  075F  0021               	movlb	1	; select bank1
  3993  0760  2F69               	goto	L27
  3994  0761                     l3778:	
  3995                           ;main.c: 892: case STATE_ADJUST_TONE:
  3996                           
  3997                           ;main.c: 891: break ;
  3998                           
  3999                           
  4000                           ;main.c: 893: PR2 = *currentValuePtr ;
  4001  0761  0020               	movlb	0	; select bank0
  4002  0762  0865               	movf	_currentValuePtr,w
  4003  0763  0086               	movwf	6
  4004  0764  0187               	clrf	7
  4005  0765  0801               	movf	1,w
  4006  0766  009B               	movwf	27	;volatile
  4007                           
  4008                           ;main.c: 894: {CCPR4L=(PR2>>1);} ;
  4009  0767  361B               	lsrf	27,w	;volatile
  4010  0768  0026               	movlb	6	; select bank6
  4011  0769                     L27:	
  4012  0769  0098               	movwf	24	;volatile
  4013                           
  4014                           ;main.c: 896: }
  4015                           
  4016                           ;main.c: 895: break ;
  4017  076A  29AF               	goto	l251
  4018  076B                     l3784:	
  4019  076B  0020               	movlb	0	; select bank0
  4020  076C  086A               	movf	_machineState_,w
  4021                           
  4022                           ; Switch size 1, requested type "space"
  4023                           ; Number of cases is 2, Range of values is 7 to 8
  4024                           ; switch strategies available:
  4025                           ; Name         Instructions Cycles
  4026                           ; simple_byte            7     4 (average)
  4027                           ; direct_byte           13     9 (fixed)
  4028                           ; jumptable            263     9 (fixed)
  4029                           ;	Chosen strategy is simple_byte
  4030  076D  3A07               	xorlw	7	; case 7
  4031  076E  1903               	skipnz
  4032  076F  2F61               	goto	l3778
  4033  0770  3A0F               	xorlw	15	; case 8
  4034  0771  1903               	skipnz
  4035  0772  2F5D               	goto	l3776
  4036  0773  29AF               	goto	l251
  4037                           
  4038                           ;main.c: 897: }
  4039                           ;main.c: 899: }
  4040  0774  29AF               	goto	l251
  4041  0775                     __end_of_main:	
  4042                           
  4043                           	psect	swtext1
  4044  09D8                     __pswtext1:	
  4045  09D8                     S3906:	
  4046  09D8  3182  2A97         	ljmp	l285
  4047  09DA  3182  2A9A         	ljmp	l3400
  4048  09DC  3182  2A9C         	ljmp	l3402
  4049  09DE  3182  2AA3         	ljmp	l3408
  4050  09E0  3182  2AA5         	ljmp	l3410
  4051  09E2  3182  2AA7         	ljmp	l3412
  4052  09E4  3182  2AA9         	ljmp	l3414
  4053  09E6  3182  2AAB         	ljmp	l3416
  4054  09E8  3182  2AAD         	ljmp	l3418
  4055  09EA  3182  2AAF         	ljmp	l3420
  4056                           
  4057                           	psect	swtext2
  4058  0958                     __pswtext2:	
  4059  0958                     S3908:	
  4060  0958  3182  2AD0         	ljmp	l3450
  4061  095A  3182  2AB1         	ljmp	l3424
  4062  095C  3182  2ABC         	ljmp	l3426
  4063  095E  3182  2AD7         	ljmp	l3456
  4064  0960  3182  2AD7         	ljmp	l3456
  4065  0962  3182  2AD7         	ljmp	l3456
  4066  0964  3182  2ADB         	ljmp	l315
  4067  0966  3182  2AD8         	ljmp	l314
  4068  0968  3182  2AD7         	ljmp	l3456
  4069  096A  3182  2AC6         	ljmp	l3438
  4070  096C  3182  2AF2         	ljmp	l281
  4071  096E  3182  2AC1         	ljmp	l3432
  4072  0970  3182  2AF2         	ljmp	l281
  4073  0972  3182  2ACB         	ljmp	l3444
  4074  0974  3182  2AE1         	ljmp	l317
  4075  0976  3182  2AF2         	ljmp	l281
  4076  0978  3182  2AE1         	ljmp	l317
  4077                           
  4078                           	psect	swtext3
  4079  099C                     __pswtext3:	
  4080  099C                     S3910:	
  4081  099C  3183  2BDE         	ljmp	l3576
  4082  099E  3182  2AF7         	ljmp	l3468
  4083  09A0  3182  2AF9         	ljmp	l3470
  4084  09A2  3182  2AFF         	ljmp	l327
  4085  09A4  3183  2B06         	ljmp	l328
  4086  09A6  3183  2B0D         	ljmp	l329
  4087  09A8  3183  2B27         	ljmp	l331
  4088  09AA  3183  2B18         	ljmp	l330
  4089  09AC  3183  2B35         	ljmp	l3500
  4090  09AE  3182  2AFB         	ljmp	l3472
  4091  09B0  3183  2B3D         	ljmp	l334
  4092  09B2  3182  2AFB         	ljmp	l3472
  4093  09B4  3183  2B3C         	ljmp	l333
  4094  09B6  3182  2AFB         	ljmp	l3472
  4095  09B8  3183  2BDE         	ljmp	l3576
  4096  09BA  3183  2B43         	ljmp	l3508
  4097                           
  4098                           	psect	swtext4
  4099  09BC                     __pswtext4:	
  4100  09BC                     S3912:	
  4101  09BC  3183  2B9A         	ljmp	l350
  4102  09BE  3183  2B5C         	ljmp	l342
  4103  09C0  3183  2B5C         	ljmp	l342
  4104  09C2  3183  2BBB         	ljmp	l359
  4105  09C4  3183  2BBB         	ljmp	l359
  4106  09C6  3183  2BBB         	ljmp	l359
  4107  09C8  3183  2BBB         	ljmp	l359
  4108  09CA  3183  2BBB         	ljmp	l359
  4109  09CC  3183  2B5C         	ljmp	l342
  4110  09CE  3183  2B5C         	ljmp	l342
  4111  09D0  3183  2BEC         	ljmp	l349
  4112  09D2  3183  2B5C         	ljmp	l342
  4113  09D4  3183  2BEC         	ljmp	l349
  4114  09D6  3183  2B5C         	ljmp	l342
  4115                           
  4116                           	psect	swtext5
  4117  097A                     __pswtext5:	
  4118  097A                     S3914:	
  4119  097A  3185  2D62         	ljmp	l3662
  4120  097C  3184  2C66         	ljmp	l3636
  4121  097E  3184  2C66         	ljmp	l3636
  4122  0980  3185  2D8D         	ljmp	l3670
  4123  0982  3185  2DA7         	ljmp	l3674
  4124  0984  3185  2DC1         	ljmp	l3678
  4125  0986  3185  2DF5         	ljmp	l3686
  4126  0988  3185  2DDB         	ljmp	l3682
  4127  098A  3186  2E1B         	ljmp	l3692
  4128  098C  3184  2CF8         	ljmp	l3648
  4129  098E  3186  2E6D         	ljmp	l3702
  4130  0990  3184  2CF8         	ljmp	l3648
  4131  0992  3186  2E5B         	ljmp	l3698
  4132  0994  3184  2CF8         	ljmp	l3648
  4133  0996  3186  2E7F         	ljmp	l3706
  4134  0998  3186  2EB1         	ljmp	l393
  4135  099A  3186  2E91         	ljmp	l3710
  4136                           
  4137                           	psect	text1
  4138  0775                     __ptext1:	
  4139 ;; *************** function _initialize *****************
  4140 ;; Defined at:
  4141 ;;		line 5 in file "src/pic16f1827_init.h"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;		None               void
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4155 ;;      Params:         0       0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0       0
  4158 ;;      Totals:         0       0       0       0       0       0
  4159 ;;Total ram usage:        0 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    1
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		_main
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _initialize
  4171  0775                     _initialize:	
  4172                           
  4173                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4174                           
  4175                           ;incstack = 0
  4176                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4177  0775  0021               	movlb	1	; select bank1
  4178  0776  0819               	movf	25,w	;volatile
  4179  0777  3987               	andlw	-121
  4180  0778  3870               	iorlw	112
  4181  0779  0099               	movwf	25	;volatile
  4182                           
  4183                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4184  077A  30FC               	movlw	-4
  4185  077B  0599               	andwf	25,f	;volatile
  4186                           
  4187                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4188  077C  1799               	bsf	25,7	;volatile
  4189                           
  4190                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4191  077D  30C0               	movlw	-64
  4192  077E  0598               	andwf	24,f	;volatile
  4193                           
  4194                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4195  077F  0817               	movf	23,w	;volatile
  4196  0780  39C1               	andlw	-63
  4197  0781  381E               	iorlw	30
  4198  0782  0097               	movwf	23	;volatile
  4199                           
  4200                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4201  0783  138B               	bcf	11,7	;volatile
  4202                           
  4203                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4204  0784  130B               	bcf	11,6	;volatile
  4205                           
  4206                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4207  0785  1595               	bsf	21,3	;volatile
  4208                           
  4209                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4210  0786  1295               	bcf	21,5	;volatile
  4211                           
  4212                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4213  0787  1615               	bsf	21,4	;volatile
  4214                           
  4215                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4216  0788  0020               	movlb	0	; select bank0
  4217  0789  0195               	clrf	21	;volatile
  4218                           
  4219                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4220  078A  128B               	bcf	11,5	;volatile
  4221                           
  4222                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4223  078B  110B               	bcf	11,2	;volatile
  4224                           
  4225                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4226  078C  1018               	bcf	24,0	;volatile
  4227                           
  4228                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4229  078D  303F               	movlw	-193
  4230  078E  0598               	andwf	24,f	;volatile
  4231                           
  4232                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4233  078F  3030               	movlw	48
  4234  0790  0498               	iorwf	24,f	;volatile
  4235                           
  4236                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4237  0791  1118               	bcf	24,2	;volatile
  4238                           
  4239                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4240  0792  0196               	clrf	22	;volatile
  4241  0793  0197               	clrf	23	;volatile
  4242                           
  4243                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4244  0794  1011               	bcf	17,0	;volatile
  4245                           
  4246                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4247  0795  0021               	movlb	1	; select bank1
  4248  0796  1011               	bcf	17,0	;volatile
  4249                           
  4250                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4251  0797  0020               	movlb	0	; select bank0
  4252  0798  111C               	bcf	28,2	;volatile
  4253                           
  4254                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4255  0799  3087               	movlw	-121
  4256  079A  059C               	andwf	28,f	;volatile
  4257                           
  4258                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4259  079B  3003               	movlw	3
  4260  079C  049C               	iorwf	28,f	;volatile
  4261                           
  4262                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4263  079D  307C               	movlw	124
  4264  079E  009B               	movwf	27	;volatile
  4265                           
  4266                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4267  079F  019A               	clrf	26	;volatile
  4268                           
  4269                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4270  07A0  1091               	bcf	17,1	;volatile
  4271                           
  4272                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4273  07A1  0021               	movlb	1	; select bank1
  4274  07A2  1091               	bcf	17,1	;volatile
  4275                           
  4276                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4277  07A3  0028               	movlb	8	; select bank8
  4278  07A4  1117               	bcf	23,2	;volatile
  4279                           
  4280                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4281  07A5  3087               	movlw	-121
  4282  07A6  0597               	andwf	23,f	;volatile
  4283                           
  4284                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4285  07A7  0817               	movf	23,w	;volatile
  4286  07A8  39FC               	andlw	-4
  4287  07A9  3801               	iorlw	1
  4288  07AA  0097               	movwf	23	;volatile
  4289                           
  4290                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4291  07AB  304F               	movlw	79
  4292  07AC  0096               	movwf	22	;volatile
  4293                           
  4294                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4295  07AD  0195               	clrf	21	;volatile
  4296                           
  4297                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4298  07AE  0020               	movlb	0	; select bank0
  4299  07AF  1093               	bcf	19,1	;volatile
  4300                           
  4301                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4302  07B0  0021               	movlb	1	; select bank1
  4303  07B1  1093               	bcf	19,1	;volatile
  4304                           
  4305                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4306  07B2  0028               	movlb	8	; select bank8
  4307  07B3  111E               	bcf	30,2	;volatile
  4308                           
  4309                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4310  07B4  3087               	movlw	-121
  4311  07B5  059E               	andwf	30,f	;volatile
  4312                           
  4313                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4314  07B6  30FC               	movlw	-4
  4315  07B7  059E               	andwf	30,f	;volatile
  4316                           
  4317                           ;pic16f1827_init.h: 59: PR6 = 124 ;
  4318  07B8  307C               	movlw	124
  4319  07B9  009D               	movwf	29	;volatile
  4320                           
  4321                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4322  07BA  019C               	clrf	28	;volatile
  4323                           
  4324                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4325  07BB  0020               	movlb	0	; select bank0
  4326  07BC  1193               	bcf	19,3	;volatile
  4327                           
  4328                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4329  07BD  0021               	movlb	1	; select bank1
  4330  07BE  1193               	bcf	19,3	;volatile
  4331                           
  4332                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4333  07BF  0025               	movlb	5	; select bank5
  4334  07C0  019E               	clrf	30	;volatile
  4335                           
  4336                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4337  07C1  30F0               	movlw	-16
  4338  07C2  0593               	andwf	19,f	;volatile
  4339                           
  4340                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4341  07C3  30F0               	movlw	-16
  4342  07C4  059A               	andwf	26,f	;volatile
  4343                           
  4344                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4345  07C5  30F0               	movlw	-16
  4346  07C6  0026               	movlb	6	; select bank6
  4347  07C7  0593               	andwf	19,f	;volatile
  4348                           
  4349                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4350  07C8  081A               	movf	26,w	;volatile
  4351  07C9  39F0               	andlw	-16
  4352  07CA  380C               	iorlw	12
  4353  07CB  009A               	movwf	26	;volatile
  4354                           
  4355                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4356  07CC  30CF               	movlw	-49
  4357  07CD  059A               	andwf	26,f	;volatile
  4358                           
  4359                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4360  07CE  303F               	movlw	-193
  4361  07CF  0025               	movlb	5	; select bank5
  4362  07D0  059E               	andwf	30,f	;volatile
  4363                           
  4364                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4365  07D1  0026               	movlb	6	; select bank6
  4366  07D2  0198               	clrf	24	;volatile
  4367                           
  4368                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4369  07D3  0199               	clrf	25	;volatile
  4370                           
  4371                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4372  07D4  0023               	movlb	3	; select bank3
  4373  07D5  018C               	clrf	12	;volatile
  4374                           
  4375                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4376  07D6  018D               	clrf	13	;volatile
  4377                           
  4378                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4379  07D7  30E0               	movlw	224
  4380  07D8  0021               	movlb	1	; select bank1
  4381  07D9  008C               	movwf	12	;volatile
  4382                           
  4383                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4384  07DA  018D               	clrf	13	;volatile
  4385  07DB  0008               	return
  4386  07DC                     __end_of_initialize:	
  4387                           
  4388                           	psect	text2
  4389  0EAC                     __ptext2:	
  4390 ;; *************** function __parallel_lcd_WriteStringClearing *****************
  4391 ;; Defined at:
  4392 ;;		line 72 in file "src/../../_Common/parallel_LCD.h"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  position        1    wreg     unsigned char 
  4395 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4396 ;;		 -> STR_36(9), STR_35(12), STR_34(6), STR_33(7), 
  4397 ;;		 -> STR_32(4), STR_31(4), STR_27(10), STR_26(12), 
  4398 ;;		 -> STR_25(9), STR_24(5), STR_23(11), STR_22(7), 
  4399 ;;		 -> STR_21(6), STR_19(10), STR_18(11), STR_17(11), 
  4400 ;;		 -> STR_16(11), STR_15(8), STR_14(6), STR_13(6), 
  4401 ;;		 -> STR_12(6), STR_11(9), STR_10(6), STR_9(5), 
  4402 ;;		 -> STR_8(5), STR_7(5), STR_6(10), STR_5(13), 
  4403 ;;		 -> STR_4(14), STR_3(10), STR_2(11), STR_1(9), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  position        1    3[BANK0 ] unsigned char 
  4406 ;;  i               1    4[BANK0 ] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;		None               void
  4409 ;; Registers used:
  4410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4416 ;;      Params:         0       2       0       0       0       0
  4417 ;;      Locals:         0       2       0       0       0       0
  4418 ;;      Temps:          0       1       0       0       0       0
  4419 ;;      Totals:         0       5       0       0       0       0
  4420 ;;Total ram usage:        5 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    2
  4423 ;; This function calls:
  4424 ;;		__private_parallel_lcd_WriteByte
  4425 ;; This function is called by:
  4426 ;;		_main
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           
  4431                           ;psect for function __parallel_lcd_WriteStringClearing
  4432  0EAC                     __parallel_lcd_WriteStringClearing:	
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in __parallel_lcd_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  4436                           ;__parallel_lcd_WriteStringClearing@position stored from wreg
  4437  0EAC  0020               	movlb	0	; select bank0
  4438  0EAD  00C6               	movwf	__parallel_lcd_WriteStringClearing@position
  4439                           
  4440                           ;parallel_LCD.h: 73: _private_parallel_lcd_WriteByte( position & 0xF0 , 0 ) ;
  4441  0EAE  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4442  0EAF  0846               	movf	__parallel_lcd_WriteStringClearing@position,w
  4443  0EB0  39F0               	andlw	240
  4444  0EB1  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4445                           
  4446                           ;parallel_LCD.h: 74: for ( uint08_t i = 0 ; i != 16 ; i++ ) {
  4447  0EB4  0020               	movlb	0	; select bank0
  4448  0EB5  01C7               	clrf	__parallel_lcd_WriteStringClearing@i
  4449  0EB6                     L33:	
  4450  0EB6  3010               	movlw	16
  4451  0EB7  0647               	xorwf	__parallel_lcd_WriteStringClearing@i,w
  4452  0EB8  1903               	btfsc	3,2
  4453  0EB9  0008               	return
  4454                           
  4455                           ;parallel_LCD.h: 75: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4456  0EBA  0846               	movf	__parallel_lcd_WriteStringClearing@position,w
  4457  0EBB  390F               	andlw	15
  4458  0EBC  0247               	subwf	__parallel_lcd_WriteStringClearing@i,w
  4459  0EBD  1C03               	skipc
  4460  0EBE  2ED6               	goto	l3106
  4461  0EBF  0843               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4462  0EC0  0084               	movwf	4
  4463  0EC1  0844               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4464  0EC2  0085               	movwf	5
  4465  0EC3  0012               	moviw fsr0++
  4466  0EC4  1903               	btfsc	3,2
  4467  0EC5  2ED6               	goto	l3106
  4468                           
  4469                           ;parallel_LCD.h: 76: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4470  0EC6  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4471  0EC7  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4472  0EC8  0843               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4473  0EC9  0084               	movwf	4
  4474  0ECA  0844               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4475  0ECB  0085               	movwf	5
  4476  0ECC  0800               	movf	0,w	;code access
  4477  0ECD  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4478  0ED0  3001               	movlw	1
  4479  0ED1  0020               	movlb	0	; select bank0
  4480  0ED2  07C3               	addwf	__parallel_lcd_WriteStringClearing@stringPtr,f
  4481  0ED3  3000               	movlw	0
  4482  0ED4  3DC4               	addwfc	__parallel_lcd_WriteStringClearing@stringPtr+1,f
  4483  0ED5  2EDC               	goto	l3108
  4484  0ED6                     l3106:	
  4485                           
  4486                           ;parallel_LCD.h: 77: else
  4487                           ;parallel_LCD.h: 78: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4488  0ED6  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4489  0ED7  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4490  0ED8  3020               	movlw	32
  4491  0ED9  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4492  0EDC                     l3108:	
  4493  0EDC  3001               	movlw	1
  4494  0EDD  0020               	movlb	0	; select bank0
  4495  0EDE  00C5               	movwf	??__parallel_lcd_WriteStringClearing
  4496  0EDF  0845               	movf	??__parallel_lcd_WriteStringClearing,w
  4497  0EE0  07C7               	addwf	__parallel_lcd_WriteStringClearing@i,f
  4498  0EE1  2EB6               	goto	L33
  4499  0EE2                     __end_of__parallel_lcd_WriteStringClearing:	
  4500                           
  4501                           	psect	text3
  4502  0E62                     __ptext3:	
  4503 ;; *************** function __parallel_lcd_WriteString *****************
  4504 ;; Defined at:
  4505 ;;		line 63 in file "src/../../_Common/parallel_LCD.h"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  position        1    wreg     unsigned char 
  4508 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  4509 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_30(8), STR_29(7), 
  4510 ;;		 -> STR_28(7), STR_20(7), 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  position        1    5[BANK0 ] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;		None               void
  4515 ;; Registers used:
  4516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4522 ;;      Params:         0       2       0       0       0       0
  4523 ;;      Locals:         0       1       0       0       0       0
  4524 ;;      Temps:          0       1       0       0       0       0
  4525 ;;      Totals:         0       4       0       0       0       0
  4526 ;;Total ram usage:        4 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    2
  4529 ;; This function calls:
  4530 ;;		__private_parallel_lcd_WriteByte
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function __parallel_lcd_WriteString
  4538  0E62                     __parallel_lcd_WriteString:	
  4539                           
  4540                           ;incstack = 0
  4541                           ; Regs used in __parallel_lcd_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4542                           ;__parallel_lcd_WriteString@position stored from wreg
  4543  0E62  0020               	movlb	0	; select bank0
  4544  0E63  00C8               	movwf	__parallel_lcd_WriteString@position
  4545                           
  4546                           ;parallel_LCD.h: 64: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4547  0E64  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4548  0E65  0848               	movf	__parallel_lcd_WriteString@position,w
  4549  0E66  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4550  0E69                     l3088:	
  4551                           ;parallel_LCD.h: 65: while ( *stringPtr ) {
  4552                           
  4553  0E69  0020               	movlb	0	; select bank0
  4554  0E6A  0845               	movf	__parallel_lcd_WriteString@stringPtr,w
  4555  0E6B  0084               	movwf	4
  4556  0E6C  0846               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4557  0E6D  0085               	movwf	5
  4558  0E6E  0012               	moviw fsr0++
  4559  0E6F  1903               	btfsc	3,2
  4560  0E70  0008               	return
  4561                           
  4562                           ;parallel_LCD.h: 66: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4563  0E71  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4564  0E72  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4565  0E73  0020               	movlb	0	; select bank0
  4566  0E74  0845               	movf	__parallel_lcd_WriteString@stringPtr,w
  4567  0E75  0084               	movwf	4
  4568  0E76  0846               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4569  0E77  0085               	movwf	5
  4570  0E78  0800               	movf	0,w	;code access
  4571  0E79  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4572  0E7C  3001               	movlw	1
  4573  0E7D  0020               	movlb	0	; select bank0
  4574  0E7E  07C5               	addwf	__parallel_lcd_WriteString@stringPtr,f
  4575  0E7F  3000               	movlw	0
  4576  0E80  3DC6               	addwfc	__parallel_lcd_WriteString@stringPtr+1,f
  4577  0E81  2E69               	goto	l3088
  4578  0E82                     __end_of__parallel_lcd_WriteString:	
  4579                           
  4580                           	psect	text4
  4581  0DDA                     __ptext4:	
  4582 ;; *************** function __parallel_lcd_WriteCharacter *****************
  4583 ;; Defined at:
  4584 ;;		line 56 in file "src/../../_Common/parallel_LCD.h"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  position        1    wreg     unsigned char 
  4587 ;;  character       1    0[BANK0 ] unsigned char 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;  position        1    1[BANK0 ] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0, pclath, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4599 ;;      Params:         0       1       0       0       0       0
  4600 ;;      Locals:         0       1       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0
  4602 ;;      Totals:         0       2       0       0       0       0
  4603 ;;Total ram usage:        2 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    2
  4606 ;; This function calls:
  4607 ;;		__private_parallel_lcd_WriteByte
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function __parallel_lcd_WriteCharacter
  4615  0DDA                     __parallel_lcd_WriteCharacter:	
  4616                           
  4617                           ;incstack = 0
  4618                           ; Regs used in __parallel_lcd_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4619                           ;__parallel_lcd_WriteCharacter@position stored from wreg
  4620  0DDA  0020               	movlb	0	; select bank0
  4621  0DDB  00C4               	movwf	__parallel_lcd_WriteCharacter@position
  4622                           
  4623                           ;parallel_LCD.h: 57: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4624  0DDC  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4625  0DDD  0844               	movf	__parallel_lcd_WriteCharacter@position,w
  4626  0DDE  318E  2632  318D   	fcall	__private_parallel_lcd_WriteByte
  4627                           
  4628                           ;parallel_LCD.h: 58: _private_parallel_lcd_WriteByte( character , 1 ) ;
  4629  0DE1  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4630  0DE2  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4631  0DE3  0020               	movlb	0	; select bank0
  4632  0DE4  0843               	movf	__parallel_lcd_WriteCharacter@character,w
  4633  0DE5  318E  2632         	fcall	__private_parallel_lcd_WriteByte
  4634  0DE7  0008               	return
  4635  0DE8                     __end_of__parallel_lcd_WriteCharacter:	
  4636                           
  4637                           	psect	text5
  4638  0E82                     __ptext5:	
  4639 ;; *************** function __parallel_lcd_SetCgram *****************
  4640 ;; Defined at:
  4641 ;;		line 109 in file "src/../../_Common/parallel_LCD.h"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  charCode        1    wreg     unsigned char 
  4644 ;;  bitmap          2    0[BANK0 ] PTR const unsigned char 
  4645 ;;		 -> BITMAP(24), 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  charCode        1    3[BANK0 ] unsigned char 
  4648 ;;  i               1    4[BANK0 ] unsigned char 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;		None               void
  4651 ;; Registers used:
  4652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4658 ;;      Params:         0       2       0       0       0       0
  4659 ;;      Locals:         0       2       0       0       0       0
  4660 ;;      Temps:          0       1       0       0       0       0
  4661 ;;      Totals:         0       5       0       0       0       0
  4662 ;;Total ram usage:        5 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    2
  4665 ;; This function calls:
  4666 ;;		__private_parallel_lcd_WriteByte
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function __parallel_lcd_SetCgram
  4674  0E82                     __parallel_lcd_SetCgram:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in __parallel_lcd_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4678                           ;__parallel_lcd_SetCgram@charCode stored from wreg
  4679  0E82  0020               	movlb	0	; select bank0
  4680  0E83  00C6               	movwf	__parallel_lcd_SetCgram@charCode
  4681                           
  4682                           ;parallel_LCD.h: 110: _private_parallel_lcd_WriteByte( ( ( charCode << 3 ) & 0b00111111 
      +                          ) | 0b01000000 , 0 ) ;
  4683  0E84  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4684  0E85  0846               	movf	__parallel_lcd_SetCgram@charCode,w
  4685  0E86  00C5               	movwf	??__parallel_lcd_SetCgram
  4686  0E87  3002               	movlw	2
  4687  0E88                     u2365:	
  4688  0E88  35C5               	lslf	??__parallel_lcd_SetCgram,f
  4689  0E89  3EFF               	addlw	-1
  4690  0E8A  1D03               	skipz
  4691  0E8B  2E88               	goto	u2365
  4692  0E8C  3545               	lslf	??__parallel_lcd_SetCgram,w
  4693  0E8D  393F               	andlw	63
  4694  0E8E  3840               	iorlw	64
  4695  0E8F  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4696                           
  4697                           ;parallel_LCD.h: 111: for ( uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  4698  0E92  0020               	movlb	0	; select bank0
  4699  0E93  01C7               	clrf	__parallel_lcd_SetCgram@i
  4700  0E94                     L34:	
  4701  0E94  3008               	movlw	8
  4702  0E95  0647               	xorwf	__parallel_lcd_SetCgram@i,w
  4703  0E96  1903               	btfsc	3,2
  4704  0E97  0008               	return
  4705                           
  4706                           ;parallel_LCD.h: 112: _private_parallel_lcd_WriteByte( *bitmap , 1 ) ;
  4707  0E98  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4708  0E99  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4709  0E9A  0843               	movf	__parallel_lcd_SetCgram@bitmap,w
  4710  0E9B  0084               	movwf	4
  4711  0E9C  0844               	movf	__parallel_lcd_SetCgram@bitmap+1,w
  4712  0E9D  0085               	movwf	5
  4713  0E9E  0800               	movf	0,w	;code access
  4714  0E9F  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4715  0EA2  3001               	movlw	1
  4716  0EA3  0020               	movlb	0	; select bank0
  4717  0EA4  00C5               	movwf	??__parallel_lcd_SetCgram
  4718  0EA5  0845               	movf	??__parallel_lcd_SetCgram,w
  4719  0EA6  07C7               	addwf	__parallel_lcd_SetCgram@i,f
  4720  0EA7  3001               	movlw	1
  4721  0EA8  07C3               	addwf	__parallel_lcd_SetCgram@bitmap,f
  4722  0EA9  3000               	movlw	0
  4723  0EAA  3DC4               	addwfc	__parallel_lcd_SetCgram@bitmap+1,f
  4724  0EAB  2E94               	goto	L34
  4725  0EAC                     __end_of__parallel_lcd_SetCgram:	
  4726                           
  4727                           	psect	text6
  4728  0E1E                     __ptext6:	
  4729 ;; *************** function __parallel_lcd_Initialize *****************
  4730 ;; Defined at:
  4731 ;;		line 47 in file "src/../../_Common/parallel_LCD.h"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4745 ;;      Params:         0       0       0       0       0       0
  4746 ;;      Locals:         0       0       0       0       0       0
  4747 ;;      Temps:          0       0       0       0       0       0
  4748 ;;      Totals:         0       0       0       0       0       0
  4749 ;;Total ram usage:        0 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    2
  4752 ;; This function calls:
  4753 ;;		__private_parallel_lcd_WriteByte
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function __parallel_lcd_Initialize
  4761  0E1E                     __parallel_lcd_Initialize:	
  4762                           
  4763                           ;parallel_LCD.h: 48: _private_parallel_lcd_WriteByte( 0x20 | 0x10 | 0x08 | 0x00 , 0 ) ;
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in __parallel_lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4767  0E1E  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4768  0E1F  3038               	movlw	56
  4769  0E20  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4770                           
  4771                           ;parallel_LCD.h: 49: _private_parallel_lcd_WriteByte( 0x08 | 0x04 , 0 ) ;
  4772  0E23  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4773  0E24  300C               	movlw	12
  4774  0E25  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4775                           
  4776                           ;parallel_LCD.h: 50: _private_parallel_lcd_WriteByte( 0x10 | 0x00 | 0x00 , 0 ) ;
  4777  0E28  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4778  0E29  3010               	movlw	16
  4779  0E2A  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4780                           
  4781                           ;parallel_LCD.h: 51: _private_parallel_lcd_WriteByte( 0x04 | 0x02 | 0x00 , 0 ) ;
  4782  0E2D  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4783  0E2E  3006               	movlw	6
  4784  0E2F  318E  2632         	fcall	__private_parallel_lcd_WriteByte
  4785  0E31  0008               	return
  4786  0E32                     __end_of__parallel_lcd_Initialize:	
  4787                           
  4788                           	psect	text7
  4789  0E48                     __ptext7:	
  4790 ;; *************** function __parallel_lcd_ClearRow *****************
  4791 ;; Defined at:
  4792 ;;		line 93 in file "src/../../_Common/parallel_LCD.h"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  rowSelect       1    wreg     unsigned char 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  rowSelect       1    1[BANK0 ] unsigned char 
  4797 ;;  i               1    2[BANK0 ] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4807 ;;      Params:         0       0       0       0       0       0
  4808 ;;      Locals:         0       2       0       0       0       0
  4809 ;;      Temps:          0       1       0       0       0       0
  4810 ;;      Totals:         0       3       0       0       0       0
  4811 ;;Total ram usage:        3 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    2
  4814 ;; This function calls:
  4815 ;;		__private_parallel_lcd_WriteByte
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function __parallel_lcd_ClearRow
  4823  0E48                     __parallel_lcd_ClearRow:	
  4824                           
  4825                           ;incstack = 0
  4826                           ; Regs used in __parallel_lcd_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  4827                           ;__parallel_lcd_ClearRow@rowSelect stored from wreg
  4828  0E48  0020               	movlb	0	; select bank0
  4829  0E49  00C4               	movwf	__parallel_lcd_ClearRow@rowSelect
  4830                           
  4831                           ;parallel_LCD.h: 94: _private_parallel_lcd_WriteByte( rowSelect & 0xF0 , 0 ) ;
  4832  0E4A  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4833  0E4B  0844               	movf	__parallel_lcd_ClearRow@rowSelect,w
  4834  0E4C  39F0               	andlw	240
  4835  0E4D  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4836                           
  4837                           ;parallel_LCD.h: 95: for ( uint08_t i = 0 ; i != 16 ; i++ )
  4838  0E50  0020               	movlb	0	; select bank0
  4839  0E51  01C5               	clrf	__parallel_lcd_ClearRow@i
  4840  0E52                     L35:	
  4841  0E52  3010               	movlw	16
  4842  0E53  0645               	xorwf	__parallel_lcd_ClearRow@i,w
  4843  0E54  1903               	btfsc	3,2
  4844  0E55  0008               	return
  4845                           
  4846                           ;parallel_LCD.h: 96: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4847  0E56  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4848  0E57  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4849  0E58  3020               	movlw	32
  4850  0E59  318E  2632  318E   	fcall	__private_parallel_lcd_WriteByte
  4851  0E5C  3001               	movlw	1
  4852  0E5D  0020               	movlb	0	; select bank0
  4853  0E5E  00C3               	movwf	??__parallel_lcd_ClearRow
  4854  0E5F  0843               	movf	??__parallel_lcd_ClearRow,w
  4855  0E60  07C5               	addwf	__parallel_lcd_ClearRow@i,f
  4856  0E61  2E52               	goto	L35
  4857  0E62                     __end_of__parallel_lcd_ClearRow:	
  4858                           
  4859                           	psect	text8
  4860  0E32                     __ptext8:	
  4861 ;; *************** function __private_parallel_lcd_WriteByte *****************
  4862 ;; Defined at:
  4863 ;;		line 130 in file "src/../../_Common/parallel_LCD.h"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  data            1    wreg     unsigned char 
  4866 ;;  r               1    4[COMMON] unsigned char 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  data            1    5[COMMON] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;		None               void
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4878 ;;      Params:         1       0       0       0       0       0
  4879 ;;      Locals:         1       0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0
  4881 ;;      Totals:         2       0       0       0       0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		__parallel_lcd_Initialize
  4889 ;;		__parallel_lcd_WriteCharacter
  4890 ;;		__parallel_lcd_WriteString
  4891 ;;		__parallel_lcd_WriteStringClearing
  4892 ;;		__parallel_lcd_ClearRow
  4893 ;;		__parallel_lcd_SetCgram
  4894 ;;		__parallel_lcd_WriteHexNumber
  4895 ;;		__parallel_lcd_ClearPartial
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function __private_parallel_lcd_WriteByte
  4901  0E32                     __private_parallel_lcd_WriteByte:	
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in __private_parallel_lcd_WriteByte: [wreg+status,2+status,0]
  4905                           ;__private_parallel_lcd_WriteByte@data stored from wreg
  4906  0E32  00F5               	movwf	__private_parallel_lcd_WriteByte@data
  4907  0E33                     l144:	
  4908                           ;parallel_LCD.h: 131: {while(!PIR3bits.TMR4IF);} ;
  4909                           
  4910  0E33  0020               	movlb	0	; select bank0
  4911  0E34  1C93               	btfss	19,1	;volatile
  4912  0E35  2E33               	goto	l144
  4913                           
  4914                           ;parallel_LCD.h: 132: {LATB=data;} ;
  4915  0E36  0875               	movf	__private_parallel_lcd_WriteByte@data,w
  4916  0E37  0022               	movlb	2	; select bank2
  4917  0E38  008D               	movwf	13	;volatile
  4918                           
  4919                           ;parallel_LCD.h: 133: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  4920  0E39  0874               	movf	__private_parallel_lcd_WriteByte@r,w
  4921  0E3A  1903               	btfsc	3,2
  4922  0E3B  2E3E               	goto	l147
  4923  0E3C  148C               	bsf	12,1	;volatile
  4924  0E3D  2E3F               	goto	l148
  4925  0E3E                     l147:	
  4926  0E3E  108C               	bcf	12,1	;volatile
  4927  0E3F                     l148:	
  4928                           
  4929                           ;parallel_LCD.h: 134: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  4930  0E3F  140C               	bsf	12,0	;volatile
  4931  0E40  0000               	nop
  4932  0E41  0022               	movlb	2	; select bank2
  4933  0E42  100C               	bcf	12,0	;volatile
  4934                           
  4935                           ;parallel_LCD.h: 135: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  4936  0E43  0028               	movlb	8	; select bank8
  4937  0E44  0195               	clrf	21	;volatile
  4938  0E45  0020               	movlb	0	; select bank0
  4939  0E46  1093               	bcf	19,1	;volatile
  4940  0E47  0008               	return
  4941  0E48                     __end_of__private_parallel_lcd_WriteByte:	
  4942                           
  4943                           	psect	text9
  4944  0F72                     __ptext9:	
  4945 ;; *************** function __configuration_Save *****************
  4946 ;; Defined at:
  4947 ;;		line 61 in file "src/configuration.h"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  config          1    wreg     PTR struct .
  4950 ;;		 -> configration_(11), 
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;  config          1    6[BANK0 ] PTR struct .
  4953 ;;		 -> configration_(11), 
  4954 ;;  i               1    5[BANK0 ] unsigned char 
  4955 ;;  romOffset       1    4[BANK0 ] unsigned char 
  4956 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  4957 ;;		 -> configration_(11), 
  4958 ;;  returnCode      1    2[BANK0 ] enum E2824
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      enum E2824
  4961 ;; Registers used:
  4962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4968 ;;      Params:         0       0       0       0       0       0
  4969 ;;      Locals:         0       5       0       0       0       0
  4970 ;;      Temps:          0       2       0       0       0       0
  4971 ;;      Totals:         0       7       0       0       0       0
  4972 ;;Total ram usage:        7 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    2
  4975 ;; This function calls:
  4976 ;;		__configuration_ReadByte
  4977 ;;		__configuration_WriteByte
  4978 ;; This function is called by:
  4979 ;;		_main
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           
  4984                           ;psect for function __configuration_Save
  4985  0F72                     __configuration_Save:	
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in __configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4989                           ;__configuration_Save@config stored from wreg
  4990  0F72  0020               	movlb	0	; select bank0
  4991  0F73  00C9               	movwf	__configuration_Save@config
  4992                           
  4993                           ;configuration.h: 63: uint08_t* ptrConfig = (uint08_t*) config ;
  4994  0F74  0849               	movf	__configuration_Save@config,w
  4995  0F75  00C3               	movwf	??__configuration_Save
  4996  0F76  0843               	movf	??__configuration_Save,w
  4997  0F77  00C6               	movwf	__configuration_Save@ptrConfig
  4998                           
  4999                           ;configuration.h: 64: uint08_t romOffset ;
  5000                           ;configuration.h: 65: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5001  0F78  01C5               	clrf	__configuration_Save@returnCode
  5002                           
  5003                           ;configuration.h: 68: INTCONbits.GIE=0; ;
  5004  0F79  138B               	bcf	11,7	;volatile
  5005                           
  5006                           ;configuration.h: 71: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM )
      +                           ;
  5007  0F7A  01F4               	clrf	__configuration_ReadByte@memorySelect
  5008  0F7B  3000               	movlw	0
  5009  0F7C  318D  25FA  318F   	fcall	__configuration_ReadByte
  5010  0F7F  0020               	movlb	0	; select bank0
  5011  0F80  00C3               	movwf	??__configuration_Save
  5012  0F81  0843               	movf	??__configuration_Save,w
  5013  0F82  00C7               	movwf	__configuration_Save@romOffset
  5014                           
  5015                           ;configuration.h: 74: config->writeCount = _configuration_ReadByte( romOffset , MEMORY_S
      +                          ELECT_EEPROM ) ;
  5016  0F83  01F4               	clrf	__configuration_ReadByte@memorySelect
  5017  0F84  0847               	movf	__configuration_Save@romOffset,w
  5018  0F85  318D  25FA  318F   	fcall	__configuration_ReadByte
  5019  0F88  0020               	movlb	0	; select bank0
  5020  0F89  00C3               	movwf	??__configuration_Save
  5021  0F8A  0849               	movf	__configuration_Save@config,w
  5022  0F8B  0086               	movwf	6
  5023  0F8C  0187               	clrf	7
  5024  0F8D  0843               	movf	??__configuration_Save,w
  5025  0F8E  0081               	movwf	1
  5026                           
  5027                           ;configuration.h: 77: if ( ++config->writeCount == 1 ) {
  5028  0F8F  3001               	movlw	1
  5029  0F90  00C3               	movwf	??__configuration_Save
  5030  0F91  0849               	movf	__configuration_Save@config,w
  5031  0F92  0086               	movwf	6
  5032  0F93  0187               	clrf	7
  5033  0F94  0843               	movf	??__configuration_Save,w
  5034  0F95  0781               	addwf	1,f
  5035  0F96  0301               	decf	1,w
  5036  0F97  1D03               	btfss	3,2
  5037  0F98  2FA2               	goto	l3158
  5038                           
  5039                           ;configuration.h: 78: romOffset += sizeof(ConfigurationData) ;
  5040  0F99  300B               	movlw	11
  5041  0F9A  00C3               	movwf	??__configuration_Save
  5042  0F9B  0843               	movf	??__configuration_Save,w
  5043  0F9C  07C7               	addwf	__configuration_Save@romOffset,f
  5044                           
  5045                           ;configuration.h: 79: config->writeCount = 1 ;
  5046  0F9D  0849               	movf	__configuration_Save@config,w
  5047  0F9E  0086               	movwf	6
  5048  0F9F  0187               	clrf	7
  5049  0FA0  0181               	clrf	1
  5050  0FA1  0A81               	incf	1,f
  5051  0FA2                     l3158:	
  5052                           
  5053                           ;configuration.h: 80: }
  5054                           ;configuration.h: 82: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5055  0FA2  30F5               	movlw	245
  5056  0FA3  0247               	subwf	__configuration_Save@romOffset,w
  5057  0FA4  1C03               	skipc
  5058  0FA5  2FA8               	goto	l153
  5059                           
  5060                           ;configuration.h: 83: romOffset = 1 ;
  5061  0FA6  01C7               	clrf	__configuration_Save@romOffset
  5062  0FA7  0AC7               	incf	__configuration_Save@romOffset,f
  5063  0FA8                     l153:	
  5064                           
  5065                           ;configuration.h: 86: EECON1bits.WREN=1; ;
  5066  0FA8  0023               	movlb	3	; select bank3
  5067  0FA9  1515               	bsf	21,2	;volsfr
  5068                           
  5069                           ;configuration.h: 88: config->checkSum = 0x00 ;
  5070  0FAA  0020               	movlb	0	; select bank0
  5071  0FAB  0849               	movf	__configuration_Save@config,w
  5072  0FAC  3E0A               	addlw	10
  5073  0FAD  0086               	movwf	6
  5074  0FAE  0187               	clrf	7
  5075  0FAF  0181               	clrf	1
  5076                           
  5077                           ;configuration.h: 91: for ( uint08_t i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5078  0FB0  01C8               	clrf	__configuration_Save@i
  5079  0FB1  2FB7               	goto	L36
  5080  0FB2                     l3178:	
  5081                           ;configuration.h: 96: break ;
  5082                           
  5083  0FB2  3001               	movlw	1
  5084  0FB3  0020               	movlb	0	; select bank0
  5085  0FB4  00C3               	movwf	??__configuration_Save
  5086  0FB5  0843               	movf	??__configuration_Save,w
  5087  0FB6  07C8               	addwf	__configuration_Save@i,f
  5088  0FB7                     L36:	
  5089  0FB7  300B               	movlw	11
  5090  0FB8  0648               	xorwf	__configuration_Save@i,w
  5091  0FB9  1903               	btfsc	3,2
  5092  0FBA  2FE1               	goto	l3180
  5093                           
  5094                           ;configuration.h: 92: _configuration_WriteByte( romOffset + i , ptrConfig[i] ) ;
  5095  0FBB  0848               	movf	__configuration_Save@i,w
  5096  0FBC  0746               	addwf	__configuration_Save@ptrConfig,w
  5097  0FBD  00C3               	movwf	??__configuration_Save
  5098  0FBE  0843               	movf	??__configuration_Save,w
  5099  0FBF  0086               	movwf	6
  5100  0FC0  0187               	clrf	7
  5101  0FC1  0801               	movf	1,w
  5102  0FC2  00C4               	movwf	??__configuration_Save+1
  5103  0FC3  0844               	movf	??__configuration_Save+1,w
  5104  0FC4  00F4               	movwf	__configuration_WriteByte@data
  5105  0FC5  0847               	movf	__configuration_Save@romOffset,w
  5106  0FC6  0748               	addwf	__configuration_Save@i,w
  5107  0FC7  318E  260C  318F   	fcall	__configuration_WriteByte
  5108                           
  5109                           ;configuration.h: 93: config->checkSum ^= ptrConfig[i] ;
  5110  0FCA  0020               	movlb	0	; select bank0
  5111  0FCB  0848               	movf	__configuration_Save@i,w
  5112  0FCC  0746               	addwf	__configuration_Save@ptrConfig,w
  5113  0FCD  00C3               	movwf	??__configuration_Save
  5114  0FCE  0843               	movf	??__configuration_Save,w
  5115  0FCF  0086               	movwf	6
  5116  0FD0  0187               	clrf	7
  5117  0FD1  0801               	movf	1,w
  5118  0FD2  00C4               	movwf	??__configuration_Save+1
  5119  0FD3  0849               	movf	__configuration_Save@config,w
  5120  0FD4  3E0A               	addlw	10
  5121  0FD5  0086               	movwf	6
  5122  0FD6  0187               	clrf	7
  5123  0FD7  0844               	movf	??__configuration_Save+1,w
  5124  0FD8  0681               	xorwf	1,f
  5125                           
  5126                           ;configuration.h: 94: if ( EECON1bits.WRERR ) {
  5127  0FD9  0023               	movlb	3	; select bank3
  5128  0FDA  1D95               	btfss	21,3	;volsfr
  5129  0FDB  2FB2               	goto	l3178
  5130                           
  5131                           ;configuration.h: 95: returnCode = RETURN_CODE_WRITE_ERROR ;
  5132  0FDC  3010               	movlw	16
  5133  0FDD  0020               	movlb	0	; select bank0
  5134  0FDE  00C3               	movwf	??__configuration_Save
  5135  0FDF  0843               	movf	??__configuration_Save,w
  5136  0FE0  00C5               	movwf	__configuration_Save@returnCode
  5137  0FE1                     l3180:	
  5138                           
  5139                           ;configuration.h: 97: }
  5140                           ;configuration.h: 98: }
  5141                           ;configuration.h: 101: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5142  0FE1  0849               	movf	__configuration_Save@config,w
  5143  0FE2  0086               	movwf	6
  5144  0FE3  0187               	clrf	7
  5145  0FE4  0301               	decf	1,w
  5146  0FE5  1D03               	btfss	3,2
  5147  0FE6  2FFB               	goto	l3190
  5148  0FE7  0023               	movlb	3	; select bank3
  5149  0FE8  1995               	btfsc	21,3	;volsfr
  5150  0FE9  2FFB               	goto	l3190
  5151                           
  5152                           ;configuration.h: 102: _configuration_WriteByte( 0x00 , romOffset ) ;
  5153  0FEA  0020               	movlb	0	; select bank0
  5154  0FEB  0847               	movf	__configuration_Save@romOffset,w
  5155  0FEC  00C3               	movwf	??__configuration_Save
  5156  0FED  0843               	movf	??__configuration_Save,w
  5157  0FEE  00F4               	movwf	__configuration_WriteByte@data
  5158  0FEF  3000               	movlw	0
  5159  0FF0  318E  260C  318F   	fcall	__configuration_WriteByte
  5160                           
  5161                           ;configuration.h: 103: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5162  0FF3  0023               	movlb	3	; select bank3
  5163  0FF4  1D95               	btfss	21,3	;volsfr
  5164  0FF5  2FFB               	goto	l3190
  5165  0FF6  3010               	movlw	16
  5166  0FF7  0020               	movlb	0	; select bank0
  5167  0FF8  00C3               	movwf	??__configuration_Save
  5168  0FF9  0843               	movf	??__configuration_Save,w
  5169  0FFA  00C5               	movwf	__configuration_Save@returnCode
  5170  0FFB                     l3190:	
  5171                           
  5172                           ;configuration.h: 104: }
  5173                           ;configuration.h: 107: EECON1bits.WREN=0; ;
  5174  0FFB  0023               	movlb	3	; select bank3
  5175  0FFC  1115               	bcf	21,2	;volsfr
  5176                           
  5177                           ;configuration.h: 110: INTCONbits.GIE=1; ;
  5178  0FFD  178B               	bsf	11,7	;volatile
  5179                           
  5180                           ;configuration.h: 112: return RETURN_CODE_NOERROR ;
  5181  0FFE  3000               	movlw	0
  5182  0FFF  0008               	return
  5183  1000                     __end_of__configuration_Save:	
  5184                           
  5185                           	psect	text10
  5186  0E0C                     __ptext10:	
  5187 ;; *************** function __configuration_WriteByte *****************
  5188 ;; Defined at:
  5189 ;;		line 157 in file "src/configuration.h"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  address         1    wreg     unsigned char 
  5192 ;;  data            1    4[COMMON] unsigned char 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  address         1    5[COMMON] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;		None               void
  5197 ;; Registers used:
  5198 ;;		wreg, status,2
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5204 ;;      Params:         1       0       0       0       0       0
  5205 ;;      Locals:         1       0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0
  5207 ;;      Totals:         2       0       0       0       0       0
  5208 ;;Total ram usage:        2 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    1
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		__configuration_Save
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           
  5219                           ;psect for function __configuration_WriteByte
  5220  0E0C                     __configuration_WriteByte:	
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in __configuration_WriteByte: [wreg+status,2]
  5224                           ;__configuration_WriteByte@address stored from wreg
  5225  0E0C  00F5               	movwf	__configuration_WriteByte@address
  5226                           
  5227                           ;configuration.h: 158: EEADRH=0x00;EEADRL=(address); ;
  5228  0E0D  0023               	movlb	3	; select bank3
  5229  0E0E  0192               	clrf	18	;volatile
  5230  0E0F  0875               	movf	__configuration_WriteByte@address,w
  5231  0E10  0091               	movwf	17	;volatile
  5232                           
  5233                           ;configuration.h: 159: EEDATH=0x00;EEDATL=(data); ;
  5234  0E11  0194               	clrf	20	;volatile
  5235  0E12  0874               	movf	__configuration_WriteByte@data,w
  5236  0E13  0093               	movwf	19	;volatile
  5237                           
  5238                           ;configuration.h: 160: EECON2=0x55;EECON2=0xAA; ;
  5239  0E14  3055               	movlw	85
  5240  0E15  0096               	movwf	22	;volsfr
  5241  0E16  30AA               	movlw	170
  5242  0E17  0096               	movwf	22	;volsfr
  5243                           
  5244                           ;configuration.h: 161: EECON1bits.WR=1; ;
  5245  0E18  1495               	bsf	21,1	;volsfr
  5246  0E19                     l172:	
  5247                           ;configuration.h: 162: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5248                           
  5249  0E19  0020               	movlb	0	; select bank0
  5250  0E1A  1E12               	btfss	18,4	;volatile
  5251  0E1B  2E19               	goto	l172
  5252  0E1C  1212               	bcf	18,4	;volatile
  5253  0E1D  0008               	return
  5254  0E1E                     __end_of__configuration_WriteByte:	
  5255                           
  5256                           	psect	text11
  5257  0F20                     __ptext11:	
  5258 ;; *************** function __configuration_Load *****************
  5259 ;; Defined at:
  5260 ;;		line 118 in file "src/configuration.h"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  config          1    wreg     PTR struct .
  5263 ;;		 -> configration_(11), 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  config          1    4[BANK0 ] PTR struct .
  5266 ;;		 -> configration_(11), 
  5267 ;;  i               1    5[BANK0 ] unsigned char 
  5268 ;;  romOffset       1    3[BANK0 ] unsigned char 
  5269 ;;  ptrConfig       1    2[BANK0 ] PTR unsigned char 
  5270 ;;		 -> configration_(11), 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      enum E2824
  5273 ;; Registers used:
  5274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5280 ;;      Params:         0       0       0       0       0       0
  5281 ;;      Locals:         0       4       0       0       0       0
  5282 ;;      Temps:          0       2       0       0       0       0
  5283 ;;      Totals:         0       6       0       0       0       0
  5284 ;;Total ram usage:        6 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    2
  5287 ;; This function calls:
  5288 ;;		__configuration_ReadByte
  5289 ;; This function is called by:
  5290 ;;		_main
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           
  5295                           ;psect for function __configuration_Load
  5296  0F20                     __configuration_Load:	
  5297                           
  5298                           ;incstack = 0
  5299                           ; Regs used in __configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5300                           ;__configuration_Load@config stored from wreg
  5301  0F20  0020               	movlb	0	; select bank0
  5302  0F21  00C7               	movwf	__configuration_Load@config
  5303                           
  5304                           ;configuration.h: 120: uint08_t* ptrConfig = (uint08_t*) config ;
  5305  0F22  0847               	movf	__configuration_Load@config,w
  5306  0F23  00C3               	movwf	??__configuration_Load
  5307  0F24  0843               	movf	??__configuration_Load,w
  5308  0F25  00C5               	movwf	__configuration_Load@ptrConfig
  5309                           
  5310                           ;configuration.h: 121: uint08_t romOffset ;
  5311                           ;configuration.h: 124: INTCONbits.GIE=0; ;
  5312  0F26  138B               	bcf	11,7	;volatile
  5313                           
  5314                           ;configuration.h: 127: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM 
      +                          ) ;
  5315  0F27  01F4               	clrf	__configuration_ReadByte@memorySelect
  5316  0F28  3000               	movlw	0
  5317  0F29  318D  25FA  318F   	fcall	__configuration_ReadByte
  5318  0F2C  0020               	movlb	0	; select bank0
  5319  0F2D  00C3               	movwf	??__configuration_Load
  5320  0F2E  0843               	movf	??__configuration_Load,w
  5321  0F2F  00C6               	movwf	__configuration_Load@romOffset
  5322                           
  5323                           ;configuration.h: 130: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) ) return 
      +                          RETURN_CODE_INVALID_OFFSET ;
  5324  0F30  30F5               	movlw	245
  5325  0F31  0246               	subwf	__configuration_Load@romOffset,w
  5326  0F32  1C03               	skipc
  5327  0F33  2F36               	goto	l3208
  5328  0F34  3030               	movlw	48
  5329  0F35  0008               	return
  5330  0F36                     l3208:	
  5331                           
  5332                           ;configuration.h: 132: config->checkSum = 0x00 ;
  5333  0F36  0847               	movf	__configuration_Load@config,w
  5334  0F37  3E0A               	addlw	10
  5335  0F38  0086               	movwf	6
  5336  0F39  0187               	clrf	7
  5337  0F3A  0181               	clrf	1
  5338                           
  5339                           ;configuration.h: 135: for ( uint08_t i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5340  0F3B  01C8               	clrf	__configuration_Load@i
  5341  0F3C  300B               	movlw	11
  5342  0F3D  0648               	xorwf	__configuration_Load@i,w
  5343  0F3E  1903               	btfsc	3,2
  5344  0F3F  2F66               	goto	l165
  5345  0F40                     l3216:	
  5346                           
  5347                           ;configuration.h: 136: ptrConfig[i] = _configuration_ReadByte( romOffset + i , MEMORY_SE
      +                          LECT_EEPROM ) ;
  5348  0F40  01F4               	clrf	__configuration_ReadByte@memorySelect
  5349  0F41  0846               	movf	__configuration_Load@romOffset,w
  5350  0F42  0748               	addwf	__configuration_Load@i,w
  5351  0F43  318D  25FA  318F   	fcall	__configuration_ReadByte
  5352  0F46  0020               	movlb	0	; select bank0
  5353  0F47  00C3               	movwf	??__configuration_Load
  5354  0F48  0848               	movf	__configuration_Load@i,w
  5355  0F49  0745               	addwf	__configuration_Load@ptrConfig,w
  5356  0F4A  00C4               	movwf	??__configuration_Load+1
  5357  0F4B  0844               	movf	??__configuration_Load+1,w
  5358  0F4C  0086               	movwf	6
  5359  0F4D  0187               	clrf	7
  5360  0F4E  0843               	movf	??__configuration_Load,w
  5361  0F4F  0081               	movwf	1
  5362                           
  5363                           ;configuration.h: 137: config->checkSum ^= ptrConfig[i] ;
  5364  0F50  0848               	movf	__configuration_Load@i,w
  5365  0F51  0745               	addwf	__configuration_Load@ptrConfig,w
  5366  0F52  00C3               	movwf	??__configuration_Load
  5367  0F53  0843               	movf	??__configuration_Load,w
  5368  0F54  0086               	movwf	6
  5369  0F55  0187               	clrf	7
  5370  0F56  0801               	movf	1,w
  5371  0F57  00C4               	movwf	??__configuration_Load+1
  5372  0F58  0847               	movf	__configuration_Load@config,w
  5373  0F59  3E0A               	addlw	10
  5374  0F5A  0086               	movwf	6
  5375  0F5B  0187               	clrf	7
  5376  0F5C  0844               	movf	??__configuration_Load+1,w
  5377  0F5D  0681               	xorwf	1,f
  5378  0F5E  3001               	movlw	1
  5379  0F5F  00C3               	movwf	??__configuration_Load
  5380  0F60  0843               	movf	??__configuration_Load,w
  5381  0F61  07C8               	addwf	__configuration_Load@i,f
  5382  0F62  300B               	movlw	11
  5383  0F63  0648               	xorwf	__configuration_Load@i,w
  5384  0F64  1D03               	btfss	3,2
  5385  0F65  2F40               	goto	l3216
  5386  0F66                     l165:	
  5387                           
  5388                           ;configuration.h: 138: }
  5389                           ;configuration.h: 141: INTCONbits.GIE=1; ;
  5390  0F66  178B               	bsf	11,7	;volatile
  5391                           
  5392                           ;configuration.h: 144: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5393  0F67  0847               	movf	__configuration_Load@config,w
  5394  0F68  3E0A               	addlw	10
  5395  0F69  0086               	movwf	6
  5396  0F6A  0187               	clrf	7
  5397  0F6B  0801               	movf	1,w
  5398  0F6C  1903               	btfsc	3,2
  5399  0F6D  2F70               	goto	l3230
  5400  0F6E  3020               	movlw	32
  5401  0F6F  0008               	return
  5402  0F70                     l3230:	
  5403                           
  5404                           ;configuration.h: 146: return RETURN_CODE_NOERROR ;
  5405  0F70  3000               	movlw	0
  5406  0F71  0008               	return
  5407  0F72                     __end_of__configuration_Load:	
  5408                           
  5409                           	psect	text12
  5410  0DC9                     __ptext12:	
  5411 ;; *************** function __configuration_GetRomOffset *****************
  5412 ;; Defined at:
  5413 ;;		line 151 in file "src/configuration.h"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      unsigned char 
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0, pclath, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5427 ;;      Params:         0       0       0       0       0       0
  5428 ;;      Locals:         0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0
  5430 ;;      Totals:         0       0       0       0       0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    2
  5434 ;; This function calls:
  5435 ;;		__configuration_ReadByte
  5436 ;; This function is called by:
  5437 ;;		_main
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function __configuration_GetRomOffset
  5443  0DC9                     __configuration_GetRomOffset:	
  5444                           
  5445                           ;configuration.h: 152: return _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM ) ;
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in __configuration_GetRomOffset: [wreg+status,2+status,0+pclath+cstack]
  5449  0DC9  01F4               	clrf	__configuration_ReadByte@memorySelect
  5450  0DCA  3000               	movlw	0
  5451  0DCB  318D  25FA         	fcall	__configuration_ReadByte
  5452  0DCD  0008               	return
  5453  0DCE                     __end_of__configuration_GetRomOffset:	
  5454                           
  5455                           	psect	text13
  5456  0DFA                     __ptext13:	
  5457 ;; *************** function __configuration_ReadByte *****************
  5458 ;; Defined at:
  5459 ;;		line 167 in file "src/configuration.h"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  address         1    wreg     unsigned char 
  5462 ;;  memorySelect    1    4[COMMON] enum E2830
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  address         1    5[COMMON] unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      unsigned char 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5474 ;;      Params:         1       0       0       0       0       0
  5475 ;;      Locals:         1       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0
  5477 ;;      Totals:         2       0       0       0       0       0
  5478 ;;Total ram usage:        2 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    1
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		__configuration_Save
  5485 ;;		__configuration_Load
  5486 ;;		__configuration_GetRomOffset
  5487 ;;		_main
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           
  5492                           ;psect for function __configuration_ReadByte
  5493  0DFA                     __configuration_ReadByte:	
  5494                           
  5495                           ;incstack = 0
  5496                           ; Regs used in __configuration_ReadByte: [wreg+status,2+status,0]
  5497                           ;__configuration_ReadByte@address stored from wreg
  5498  0DFA  00F5               	movwf	__configuration_ReadByte@address
  5499                           
  5500                           ;configuration.h: 168: EEADRH=0x00;EEADRL=(address); ;
  5501  0DFB  0023               	movlb	3	; select bank3
  5502  0DFC  0192               	clrf	18	;volatile
  5503  0DFD  0875               	movf	__configuration_ReadByte@address,w
  5504  0DFE  0091               	movwf	17	;volatile
  5505                           
  5506                           ;configuration.h: 169: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5507  0DFF  1395               	bcf	21,7	;volsfr
  5508  0E00  0874               	movf	__configuration_ReadByte@memorySelect,w
  5509  0E01  1903               	btfsc	3,2
  5510  0E02  2E05               	goto	l178
  5511  0E03  1715               	bsf	21,6	;volsfr
  5512  0E04  2E06               	goto	l179
  5513  0E05                     l178:	
  5514  0E05  1315               	bcf	21,6	;volsfr
  5515  0E06                     l179:	
  5516                           
  5517                           ;configuration.h: 170: EECON1bits.RD=1; ;
  5518  0E06  1415               	bsf	21,0	;volsfr
  5519                           
  5520                           ;configuration.h: 171: __nop() ;
  5521  0E07  0000               	nop
  5522                           
  5523                           ;configuration.h: 172: __nop() ;
  5524  0E08  0000               	nop
  5525                           
  5526                           ;configuration.h: 173: return EEDATL ;
  5527  0E09  0023               	movlb	3	; select bank3
  5528  0E0A  0813               	movf	19,w	;volatile
  5529  0E0B  0008               	return
  5530  0E0C                     __end_of__configuration_ReadByte:	
  5531                           
  5532                           	psect	text14
  5533  0DE8                     __ptext14:	
  5534 ;; *************** function ___bmul *****************
  5535 ;; Defined at:
  5536 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  multiplier      1    wreg     unsigned char 
  5539 ;;  multiplicand    1    4[COMMON] unsigned char 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  multiplier      1    1[BANK0 ] unsigned char 
  5542 ;;  product         1    0[BANK0 ] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      unsigned char 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5552 ;;      Params:         1       0       0       0       0       0
  5553 ;;      Locals:         0       2       0       0       0       0
  5554 ;;      Temps:          1       0       0       0       0       0
  5555 ;;      Totals:         2       2       0       0       0       0
  5556 ;;Total ram usage:        4 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    1
  5559 ;; This function calls:
  5560 ;;		Nothing
  5561 ;; This function is called by:
  5562 ;;		_main
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function ___bmul
  5568  0DE8                     ___bmul:	
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5572                           ;___bmul@multiplier stored from wreg
  5573  0DE8  0020               	movlb	0	; select bank0
  5574  0DE9  00C4               	movwf	___bmul@multiplier
  5575  0DEA  01C3               	clrf	___bmul@product
  5576  0DEB                     l3236:	
  5577  0DEB  1C44               	btfss	___bmul@multiplier,0
  5578  0DEC  2DF1               	goto	l3240
  5579  0DED  0874               	movf	___bmul@multiplicand,w
  5580  0DEE  00F5               	movwf	??___bmul
  5581  0DEF  0875               	movf	??___bmul,w
  5582  0DF0  07C3               	addwf	___bmul@product,f
  5583  0DF1                     l3240:	
  5584  0DF1  1003               	clrc
  5585  0DF2  0DF4               	rlf	___bmul@multiplicand,f
  5586  0DF3  1003               	clrc
  5587  0DF4  0CC4               	rrf	___bmul@multiplier,f
  5588  0DF5  0844               	movf	___bmul@multiplier,w
  5589  0DF6  1D03               	btfss	3,2
  5590  0DF7  2DEB               	goto	l3236
  5591  0DF8  0843               	movf	___bmul@product,w
  5592  0DF9  0008               	return
  5593  0DFA                     __end_of___bmul:	
  5594                           
  5595                           	psect	intentry
  5596  0004                     __pintentry:	
  5597 ;; *************** function _isr *****************
  5598 ;; Defined at:
  5599 ;;		line 909 in file "src/main.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;		None
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;		None               void
  5606 ;; Registers used:
  5607 ;;		wreg, status,2, status,0
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5613 ;;      Params:         0       0       0       0       0       0
  5614 ;;      Locals:         0       0       0       0       0       0
  5615 ;;      Temps:          4       0       0       0       0       0
  5616 ;;      Totals:         4       0       0       0       0       0
  5617 ;;Total ram usage:        4 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		Interrupt level 1
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626  0004                     _isr:	
  5627                           
  5628                           ;incstack = 0
  5629                           ; Regs used in _isr: [wreg+status,2+status,0]
  5630  0004  3180               	pagesel	$
  5631  0005  0020               	movlb	0	; select bank0
  5632  0006  087F               	movf	127,w
  5633  0007  00F3               	movwf	??_isr+3
  5634                           
  5635                           ;main.c: 910: if( !PIR3bits.TMR6IF ) return ;
  5636  0008  1D93               	btfss	19,3	;volatile
  5637  0009  28AA               	goto	i1l452
  5638                           
  5639                           ;main.c: 911: PIR3bits.TMR6IF = 0 ;
  5640  000A  1193               	bcf	19,3	;volatile
  5641                           
  5642                           ;main.c: 913: static uint16_t eventPrescaler = 0 ;
  5643                           ;main.c: 916: tempoCounter_ += configration_.tempo ;
  5644  000B  0829               	movf	_configration_+1,w
  5645  000C  00F0               	movwf	??_isr
  5646  000D  082A               	movf	_configration_+2,w
  5647  000E  00F1               	movwf	??_isr+1
  5648  000F  01F2               	clrf	??_isr+2
  5649  0010  0870               	movf	??_isr,w
  5650  0011  07DE               	addwf	_tempoCounter_,f
  5651  0012  0871               	movf	??_isr+1,w
  5652  0013  3DDF               	addwfc	_tempoCounter_+1,f
  5653  0014  0872               	movf	??_isr+2,w
  5654  0015  3DE0               	addwfc	_tempoCounter_+2,f
  5655                           
  5656                           ;main.c: 917: if( tempoCounter_ >= ( 32000000UL * 3 / 25 ) ) {
  5657  0016  303A               	movlw	58
  5658  0017  0260               	subwf	_tempoCounter_+2,w
  5659  0018  1D03               	skipz
  5660  0019  2820               	goto	u208_25
  5661  001A  3098               	movlw	152
  5662  001B  025F               	subwf	_tempoCounter_+1,w
  5663  001C  1D03               	skipz
  5664  001D  2820               	goto	u208_25
  5665  001E  3000               	movlw	0
  5666  001F  025E               	subwf	_tempoCounter_,w
  5667  0020                     u208_25:	
  5668  0020  1C03               	skipc
  5669  0021  284A               	goto	i1l2908
  5670                           
  5671                           ;main.c: 918: tempoCounter_ -= ( 32000000UL * 3 / 25 ) ;
  5672  0022  3000               	movlw	0
  5673  0023  00F0               	movwf	??_isr
  5674  0024  3098               	movlw	152
  5675  0025  00F1               	movwf	??_isr+1
  5676  0026  303A               	movlw	58
  5677  0027  00F2               	movwf	??_isr+2
  5678  0028  0870               	movf	??_isr,w
  5679  0029  02DE               	subwf	_tempoCounter_,f
  5680  002A  0871               	movf	??_isr+1,w
  5681  002B  3BDF               	subwfb	_tempoCounter_+1,f
  5682  002C  0872               	movf	??_isr+2,w
  5683  002D  3BE0               	subwfb	_tempoCounter_+2,f
  5684                           
  5685                           ;main.c: 919: duration_ = configration_.duration ;
  5686  002E  082C               	movf	_configration_+4,w
  5687  002F  00F0               	movwf	??_isr
  5688  0030  0870               	movf	??_isr,w
  5689  0031  00E6               	movwf	_duration_
  5690                           
  5691                           ;main.c: 920: if( ++beatCounter_ >= ( configration_.beatCount << 1 ) )
  5692  0032  082B               	movf	_configration_+3,w
  5693  0033  00F0               	movwf	??_isr
  5694  0034  01F1               	clrf	??_isr+1
  5695  0035  35F0               	lslf	??_isr,f
  5696  0036  0DF1               	rlf	??_isr+1,f
  5697  0037  3001               	movlw	1
  5698  0038  00F2               	movwf	??_isr+2
  5699  0039  0872               	movf	??_isr+2,w
  5700  003A  07E3               	addwf	_beatCounter_,f
  5701  003B  0871               	movf	??_isr+1,w
  5702  003C  3A80               	xorlw	128
  5703  003D  3C80               	sublw	128
  5704  003E  1D03               	skipz
  5705  003F  2842               	goto	u209_25
  5706  0040  0870               	movf	??_isr,w
  5707  0041  0263               	subwf	_beatCounter_,w
  5708  0042                     u209_25:	
  5709  0042  1C03               	skipc
  5710  0043  2846               	goto	i1l2904
  5711                           
  5712                           ;main.c: 921: beatCounter_ = 0 ;
  5713  0044  0020               	movlb	0	; select bank0
  5714  0045  01E3               	clrf	_beatCounter_
  5715  0046                     i1l2904:	
  5716                           
  5717                           ;main.c: 923: if( !keyBeepCounter_ )
  5718  0046  0020               	movlb	0	; select bank0
  5719  0047  0869               	movf	_keyBeepCounter_,w
  5720  0048  1903               	btfsc	3,2
  5721                           
  5722                           ;main.c: 924: outputEvent_.soundClickOn = 1 ;
  5723  0049  166B               	bsf	_outputEvent_,4
  5724  004A                     i1l2908:	
  5725                           
  5726                           ;main.c: 925: }
  5727                           ;main.c: 928: if( !( eventPrescaler & 0x3F ) ) {
  5728  004A  303F               	movlw	63
  5729  004B  0578               	andwf	isr@eventPrescaler,w
  5730  004C  00F0               	movwf	??_isr
  5731  004D  3000               	movlw	0
  5732  004E  0579               	andwf	isr@eventPrescaler+1,w
  5733  004F  00F1               	movwf	??_isr+1
  5734  0050  0870               	movf	??_isr,w
  5735  0051  0471               	iorwf	??_isr+1,w
  5736  0052  1D03               	btfss	3,2
  5737  0053  2867               	goto	i1l2924
  5738                           
  5739                           ;main.c: 929: if( duration_ && !--duration_ && !keyBeepCounter_ )
  5740  0054  0866               	movf	_duration_,w
  5741  0055  1903               	btfsc	3,2
  5742  0056  285F               	goto	i1l2918
  5743  0057  3001               	movlw	1
  5744  0058  02E6               	subwf	_duration_,f
  5745  0059  1D03               	btfss	3,2
  5746  005A  285F               	goto	i1l2918
  5747  005B  0869               	movf	_keyBeepCounter_,w
  5748  005C  1D03               	btfss	3,2
  5749  005D  285F               	goto	i1l2918
  5750                           
  5751                           ;main.c: 930: outputEvent_.soundOff = 1 ;
  5752  005E  176B               	bsf	_outputEvent_,6
  5753  005F                     i1l2918:	
  5754                           
  5755                           ;main.c: 931: if( keyBeepCounter_ && ! --keyBeepCounter_ )
  5756  005F  0869               	movf	_keyBeepCounter_,w
  5757  0060  1903               	btfsc	3,2
  5758  0061  2867               	goto	i1l2924
  5759  0062  3001               	movlw	1
  5760  0063  02E9               	subwf	_keyBeepCounter_,f
  5761  0064  1D03               	btfss	3,2
  5762  0065  2867               	goto	i1l2924
  5763                           
  5764                           ;main.c: 932: outputEvent_.soundOff = 1 ;
  5765  0066  176B               	bsf	_outputEvent_,6
  5766  0067                     i1l2924:	
  5767                           
  5768                           ;main.c: 933: }
  5769                           ;main.c: 936: if( ++eventPrescaler != 640 ) return ;
  5770  0067  3001               	movlw	1
  5771  0068  07F8               	addwf	isr@eventPrescaler,f
  5772  0069  3000               	movlw	0
  5773  006A  3DF9               	addwfc	isr@eventPrescaler+1,f
  5774  006B  3080               	movlw	128
  5775  006C  0678               	xorwf	isr@eventPrescaler,w
  5776  006D  3002               	movlw	2
  5777  006E  1903               	skipnz
  5778  006F  0679               	xorwf	isr@eventPrescaler+1,w
  5779  0070  1D03               	btfss	3,2
  5780  0071  28AA               	goto	i1l452
  5781                           
  5782                           ;main.c: 937: eventPrescaler = 0 ;
  5783  0072  01F8               	clrf	isr@eventPrescaler
  5784  0073  01F9               	clrf	isr@eventPrescaler+1
  5785                           
  5786                           ;main.c: 940: if( stateReturnCounter_ ) {
  5787  0074  086D               	movf	_stateReturnCounter_,w
  5788  0075  1903               	btfsc	3,2
  5789  0076  287F               	goto	i1l2936
  5790                           
  5791                           ;main.c: 941: if( --stateReturnCounter_ ) return ;
  5792  0077  3001               	movlw	1
  5793  0078  02ED               	subwf	_stateReturnCounter_,f
  5794  0079  1D03               	btfss	3,2
  5795  007A  28AA               	goto	i1l452
  5796                           
  5797                           ;main.c: 943: outputEvent_.changeState = 1 ;
  5798  007B  146B               	bsf	_outputEvent_,0
  5799                           
  5800                           ;main.c: 944: outputEvent_.resetMetronome = 1 ;
  5801  007C  15EB               	bsf	_outputEvent_,3
  5802                           
  5803                           ;main.c: 945: machineState_ = STATE_METRONOME ;
  5804  007D  01EA               	clrf	_machineState_
  5805  007E  0AEA               	incf	_machineState_,f
  5806  007F                     i1l2936:	
  5807                           
  5808                           ;main.c: 946: }
  5809                           ;main.c: 949: portAState_.all = (~PORTA&0xE0) ;
  5810  007F  090C               	comf	12,w	;volatile
  5811  0080  39E0               	andlw	224
  5812  0081  00F0               	movwf	??_isr
  5813  0082  0870               	movf	??_isr,w
  5814  0083  00EC               	movwf	_portAState_
  5815                           
  5816                           ;main.c: 951: if( portAState_.keyUp && !portAState_.keyDown ) {
  5817  0084  1BEC               	btfsc	_portAState_,7
  5818  0085  1B6C               	btfsc	_portAState_,6
  5819  0086  2895               	goto	i1l2948
  5820                           
  5821                           ;main.c: 952: if( ++keyCount_.Up == 0x40 ) {
  5822  0087  3001               	movlw	1
  5823  0088  00F0               	movwf	??_isr
  5824  0089  0870               	movf	??_isr,w
  5825  008A  07F6               	addwf	_keyCount_,f
  5826  008B  3040               	movlw	64
  5827  008C  0676               	xorwf	_keyCount_,w
  5828  008D  1D03               	btfss	3,2
  5829  008E  2896               	goto	i1l2950
  5830                           
  5831                           ;main.c: 953: keyCount_.Up = 0x3C ;
  5832  008F  303C               	movlw	60
  5833  0090  00F0               	movwf	??_isr
  5834  0091  0870               	movf	??_isr,w
  5835  0092  00F6               	movwf	_keyCount_
  5836                           
  5837                           ;main.c: 954: inputEvent_.keyPressHeldUp = 1 ;
  5838  0093  1667               	bsf	_inputEvent_,4
  5839                           
  5840                           ;main.c: 955: }
  5841                           ;main.c: 956: }
  5842  0094  2896               	goto	i1l2950
  5843  0095                     i1l2948:	
  5844                           
  5845                           ;main.c: 957: else
  5846                           ;main.c: 958: keyCount_.Up = 0 ;
  5847  0095  01F6               	clrf	_keyCount_
  5848  0096                     i1l2950:	
  5849                           
  5850                           ;main.c: 960: if( portAState_.keyDown && !portAState_.keyUp ) {
  5851  0096  1B6C               	btfsc	_portAState_,6
  5852  0097  1BEC               	btfsc	_portAState_,7
  5853  0098  28A7               	goto	i1l2960
  5854                           
  5855                           ;main.c: 961: if( ++keyCount_.Down == 0x40 ) {
  5856  0099  3001               	movlw	1
  5857  009A  00F0               	movwf	??_isr
  5858  009B  0870               	movf	??_isr,w
  5859  009C  07F7               	addwf	_keyCount_+1,f
  5860  009D  3040               	movlw	64
  5861  009E  0677               	xorwf	_keyCount_+1,w
  5862  009F  1D03               	btfss	3,2
  5863  00A0  28A8               	goto	i1l2962
  5864                           
  5865                           ;main.c: 962: keyCount_.Down = 0x3C ;
  5866  00A1  303C               	movlw	60
  5867  00A2  00F0               	movwf	??_isr
  5868  00A3  0870               	movf	??_isr,w
  5869  00A4  00F7               	movwf	_keyCount_+1
  5870                           
  5871                           ;main.c: 963: inputEvent_.keyPressHeldDown = 1 ;
  5872  00A5  16E7               	bsf	_inputEvent_,5
  5873                           
  5874                           ;main.c: 964: }
  5875                           ;main.c: 965: }
  5876  00A6  28A8               	goto	i1l2962
  5877  00A7                     i1l2960:	
  5878                           
  5879                           ;main.c: 966: else
  5880                           ;main.c: 967: keyCount_.Down = 0 ;
  5881  00A7  01F7               	clrf	_keyCount_+1
  5882  00A8                     i1l2962:	
  5883                           
  5884                           ;main.c: 969: if( PIR3bits.TMR6IF ) asm("reset") ;
  5885  00A8  1993               	btfsc	19,3	;volatile
  5886  00A9  0001               	reset	;# 
  5887  00AA                     i1l452:	
  5888  00AA  0873               	movf	??_isr+3,w
  5889  00AB  0020               	movlb	0	; select bank0
  5890  00AC  00FF               	movwf	127
  5891  00AD  0009               	retfie
  5892  00AE                     __end_of_isr:	
  5893  007E                     btemp	set	126	;btemp
  5894  007E                     wtemp	set	126
  5895  007E                     wtemp0	set	126
  5896  0080                     wtemp1	set	128
  5897  0082                     wtemp2	set	130
  5898  0084                     wtemp3	set	132
  5899  0086                     wtemp4	set	134
  5900  0088                     wtemp5	set	136
  5901  007F                     wtemp6	set	127
  5902  007E                     ttemp	set	126
  5903  007E                     ttemp0	set	126
  5904  0081                     ttemp1	set	129
  5905  0084                     ttemp2	set	132
  5906  0087                     ttemp3	set	135
  5907  007F                     ttemp4	set	127
  5908  007E                     ltemp	set	126
  5909  007E                     ltemp0	set	126
  5910  0082                     ltemp1	set	130
  5911  0086                     ltemp2	set	134
  5912  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    81
    Data        97
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     27      79
    BANK1            80      0      62
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    currentValuePtr	PTR unsigned char  size(1) Largest target is 11
		 -> configration_.oscillatorTune(BANK0[1]), configration_.tone(BANK0[3]), configration_.pulseWidth(BANK0[1]), configration_.duration(BANK0[1]), 
		 -> configration_.beatCount(BANK0[1]), configration_(BANK0[11]), NULL(NULL[0]), 

    currentMenuStatePtr_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    currentMenuStatePtr_	PTR struct . size(1) Largest target is 5
		 -> menuStateInformation_(BANK0[4]), menuStateConfirm_(BANK0[4]), NULL(NULL[0]), menuStateTone_(BANK0[4]), 
		 -> menuStateMain_(BANK0[4]), 

    menuStateInformation_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateConfirm_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateTone_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S677$menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateMain_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S631$MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_36(CODE[9]), 

    MESSAGE.ERROR.MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_36(CODE[9]), 

    S627$LOAD_DEFAULT	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_35(CODE[12]), 

    MESSAGE.MEMORY.LOAD_DEFAULT	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_35(CODE[12]), 

    S627$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_34(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_34(CODE[6]), 

    S627$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_33(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_33(CODE[7]), 

    S621$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), 

    S621$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    S621$RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_30(CODE[8]), 

    MESSAGE.CONFIRM.RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_30(CODE[8]), 

    S621$SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[7]), 

    MESSAGE.CONFIRM.SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[7]), 

    S621$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_28(CODE[7]), 

    MESSAGE.CONFIRM.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_28(CODE[7]), 

    S614$OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_27(CODE[10]), 

    MESSAGE.CONFIGURATION.OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_27(CODE[10]), 

    S614$PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[12]), 

    MESSAGE.CONFIGURATION.PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[12]), 

    S614$DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), 

    MESSAGE.CONFIGURATION.DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), 

    S614$TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), 

    MESSAGE.CONFIGURATION.TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), 

    S614$BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_23(CODE[11]), 

    MESSAGE.CONFIGURATION.BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_23(CODE[11]), 

    S614$TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[7]), 

    MESSAGE.CONFIGURATION.TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[7]), 

    S610$TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[6]), 

    MESSAGE.METRONOME.TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[6]), 

    S610$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), 

    S610$TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_19(CODE[10]), 

    MESSAGE.METRONOME.TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_19(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[11]), STR_15(CODE[8]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), 
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), 
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    _configuration_Load@config	PTR struct . size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _configuration_Save@config	PTR struct . size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _parallel_lcd_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    _parallel_lcd_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_36(CODE[9]), STR_35(CODE[12]), STR_34(CODE[6]), STR_33(CODE[7]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_27(CODE[10]), STR_26(CODE[12]), 
		 -> STR_25(CODE[9]), STR_24(CODE[5]), STR_23(CODE[11]), STR_22(CODE[7]), 
		 -> STR_21(CODE[6]), STR_19(CODE[10]), STR_18(CODE[11]), STR_17(CODE[11]), 
		 -> STR_16(CODE[11]), STR_15(CODE[8]), STR_14(CODE[6]), STR_13(CODE[6]), 
		 -> STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), STR_5(CODE[13]), 
		 -> STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), STR_1(CODE[9]), 

    _parallel_lcd_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 28
		 -> main@valueString(BANK0[6]), informationValueBuffer(BANK1[28]), STR_30(CODE[8]), STR_29(CODE[7]), 
		 -> STR_28(CODE[7]), STR_20(CODE[7]), 


Critical Paths under _main in COMMON

    _main->___bmul
    _main->__configuration_ReadByte
    __parallel_lcd_WriteStringClearing->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteString->___bmul
    __parallel_lcd_WriteString->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteCharacter->__private_parallel_lcd_WriteByte
    __parallel_lcd_SetCgram->__private_parallel_lcd_WriteByte
    __parallel_lcd_Initialize->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearRow->__private_parallel_lcd_WriteByte
    __configuration_Save->__configuration_ReadByte
    __configuration_Save->__configuration_WriteByte
    __configuration_Load->__configuration_ReadByte
    __configuration_GetRomOffset->__configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->__configuration_Save
    __parallel_lcd_WriteString->___bmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   20326
                                              7 BANK0     20    20      0
                             ___bmul
        __configuration_GetRomOffset
                __configuration_Load
            __configuration_ReadByte
                __configuration_Save
             __parallel_lcd_ClearRow
           __parallel_lcd_Initialize
             __parallel_lcd_SetCgram
       __parallel_lcd_WriteCharacter
          __parallel_lcd_WriteString
  __parallel_lcd_WriteStringClearing
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteStringClearing                    5     3      2    4248
                                              0 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteString                            4     2      2    2678
                                              2 BANK0      4     2      2
                             ___bmul (ARG)
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteCharacter                         2     1      1    2374
                                              0 BANK0      2     1      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_SetCgram                               5     3      2    2265
                                              0 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_Initialize                             0     0      0    1862
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearRow                               3     3      0    1961
                                              0 BANK0      3     3      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) __private_parallel_lcd_WriteByte                      2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Save                                  7     7      0    1412
                                              0 BANK0      7     7      0
            __configuration_ReadByte
           __configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) __configuration_WriteByte                             2     1      1     196
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Load                                  6     6      0    1046
                                              0 BANK0      6     6      0
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (1) __configuration_GetRomOffset                          0     0      0     576
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) __configuration_ReadByte                              2     1      1     576
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     206
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   __configuration_GetRomOffset
     __configuration_ReadByte
   __configuration_Load
     __configuration_ReadByte
   __configuration_ReadByte
   __configuration_Save
     __configuration_ReadByte
     __configuration_WriteByte
   __parallel_lcd_ClearRow
     __private_parallel_lcd_WriteByte
   __parallel_lcd_Initialize
     __private_parallel_lcd_WriteByte
   __parallel_lcd_SetCgram
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteCharacter
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteString
     ___bmul (ARG)
     __private_parallel_lcd_WriteByte (ARG)
   __parallel_lcd_WriteStringClearing
     __private_parallel_lcd_WriteByte
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      97       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1B      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      3E       8       77.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      97      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Aug 11 13:00:50 2015

                                          pc 0002                               ___bmul@product 0043  
                 ??__parallel_lcd_Initialize 0076                                  __CFG_CP$OFF 0000  
                 ?__parallel_lcd_WriteString 0045                                          l144 0E33  
                                        l153 0FA8                                          l241 00FB  
                                        l330 0318                                          l314 02D8  
                                        l147 0E3E                                          l331 0327  
                                        l315 02DB                                          l251 01AF  
                                        l172 0E19                                          l148 0E3F  
                                        l244 00FD                                          l165 0F66  
                                        l333 033C                                          l317 02E1  
                                        l261 01CF                                          l237 00F6  
                                        l350 039A                                          l342 035C  
                                        l334 033D                                          l238 01AA  
                                        l327 02FF                                          l271 01F1  
                                        l263 01EB                                          l255 01C4  
                                        l328 0306                                          l280 0291  
                                        l256 01C3                                          l248 019E  
                                        l329 030D                                          l281 02F2  
                                        l273 0211                                          l178 0E05  
                                        l426 06C9                                          l274 01F9  
                                        l258 01CB                                          l179 0E06  
                                        l259 01CA                                          l436 0704  
                                        l372 03FE                                          l349 03EC  
                                        l285 0297                                          l277 0292  
                                        l374 0406                                          l391 0446  
                                        l359 03BB                                          l279 028F  
                                        l376 040D                                          l393 06B1  
                                        l387 0445                                          l388 0462  
                                        _PR2 001B                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                                          _PR6 041D  
                                        _isr 0004                                 __CFG_IDLOC0$ 0001  
                               __CFG_IDLOC1$ 0001                                 __CFG_IDLOC2$ 0000  
                               __CFG_IDLOC3$ 0000                                 __CFG_BORV$HI 0000  
                                        wreg 0009                                         S3910 099C  
                                       S3912 09BC                                         S3914 097A  
                                       S3906 09D8                                         S3908 0958  
                               __CFG_LVP$OFF 0000                              __end_of_MESSAGE 0824  
                                       l3106 0ED6                                         l3108 0EDC  
                                       l3300 013C                                         l3230 0F70  
                                       l3240 0DF1                                         l3216 0F40  
                                       l3208 0F36                                         l3400 029A  
                                       l3410 02A5                                         l3402 029C  
                                       l3236 0DEB                                         l3180 0FE1  
                                       l3500 0335                                         l3420 02AF  
                                       l3412 02A7                                         l3308 015E  
                                       l3316 0186                                         l3190 0FFB  
                                       l3158 0FA2                                         l3510 034D  
                                       l3414 02A9                                         l3342 01D3  
                                       l3270 00E6                                         l3088 0E69  
                                       l3520 037E                                         l3432 02C1  
                                       l3416 02AB                                         l3408 02A3  
                                       l3424 02B1                                         l3360 01F4  
                                       l3272 00E7                                         l3178 0FB2  
                                       l3522 037F                                         l3450 02D0  
                                       l3426 02BC                                         l3418 02AD  
                                       l3362 01FA                                         l3346 01D7  
                                       l3354 01E3                                         l3290 00FF  
                                       l3532 0398                                         l3508 0343  
                                       l3444 02CB                                         l3710 0691  
                                       l3702 066D                                         l3614 0418  
                                       l3542 03A9                                         l3470 02F9  
                                       l3438 02C6                                         l3366 0203  
                                       l3632 044B                                         l3544 03AA  
                                       l3472 02FB                                         l3456 02D7  
                                       l3464 02E5                                         l3730 06E4  
                                       l3722 06C4                                         l3706 067F  
                                       l3650 0513                                         l3642 04B9  
                                       l3618 041E                                         l3626 042D  
                                       l3554 03B9                                         l3386 0283  
                                       l3652 0521                                         l3660 0549  
                                       l3636 0466                                         l3716 06A3  
                                       l3564 03CD                                         l3468 02F7  
                                       l3388 0284                                         l3750 0707  
                                       l3734 06EF                                         l3670 058D  
                                       l3662 0562                                         l3654 052F  
                                       l3646 04E0                                         l3760 072F  
                                       l3744 06FD                                         l3728 06DE  
                                       l3736 06F7                                         l3648 04F8  
                                       l3576 03DE                                         l3770 074C  
                                       l3746 06FF                                         l3690 0618  
                                       l3682 05DB                                         l3674 05A7  
                                       l3658 053D                                         l3692 061B  
                                       l3758 0712                                         l3774 0754  
                                       l3686 05F5                                         l3678 05C1  
                                       l3776 075D                                         l3784 076B  
                                       l3778 0761                                         l3698 065B  
                                       ?_isr 0070                                         STR_1 08E1  
                               __CFG_WDTE$ON 0000                                         STR_2 08A5  
                                       STR_3 08BA                                         STR_4 0851  
                                       STR_5 085F                                         STR_6 08CE  
                                       STR_7 0941                                         STR_8 0946  
                                       STR_9 094B                                         u3110 06BF  
                                       _LATB 010D                                         u3044 0425  
                                       u3045 0424                                         u3145 071B  
                                       u2365 0E88                                         u2705 021C  
                                       u2715 023D                                         u2725 025E  
                                       u2575 010C                                         u2585 012A  
                                       _TMR0 0015                                         _TMR1 0016  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                 __CFG_WRT$OFF 0000  
                        _MESSAGE_INFORMATION 0020                                         _main 00D6  
                                       fsr0h 0005                                         fsr1h 0007  
                                       fsr0l 0004                                         indf0 0000  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                                       ltemp 007E                                         start 00AE  
                                       ttemp 007E                                         wtemp 007E  
                              __CFG_IESO$OFF 0000                            ___bmul@multiplier 0044  
                      _menuStateInformation_ 0037                                        ??_isr 0070  
                                      ?_main 0070                                        STR_10 093B  
                                      STR_11 08E1                                        STR_20 08FA  
                                      STR_12 091D                                        STR_21 0935  
                                      STR_13 0923                                        STR_30 08EA  
                                      STR_22 0916                                        STR_14 0929  
                                      STR_31 0950                                        STR_23 08A5  
                                      STR_15 08F2                                        STR_32 0954  
                                      STR_24 08BF                                        STR_16 088F  
                                      STR_33 090F                                        STR_25 0856  
                                      STR_17 089A                                        STR_34 092F  
                                      STR_26 0878                                        STR_18 0884  
                                      STR_35 086C                                        STR_27 08C4  
                                      STR_19 08B0                                        STR_36 08D8  
                                      STR_28 0901                                        STR_29 0908  
                                      i1l452 00AA                           main@prevPortAState 006E  
                               _outputEvent_ 006B                                        _PORTA 000C  
                                      _TRISA 008C                                        _TRISB 008D  
                              __CFG_PWRTE$ON 0000                               __CFG_FCMEN$OFF 0000  
            __end_of_PARALLEL_LCD_ROW_SELECT 0839                     ?__configuration_ReadByte 0074  
                                      main@i 005D                                 main@tmpValue 0055  
                                      ltemp0 007E                                        ltemp1 0082  
                                      ltemp2 0086                                        ltemp3 0080  
                          __end_of_CHAR_CODE 0837                                        ttemp0 007E  
                                      ttemp1 0081                                        ttemp2 0084  
                                      ttemp3 0087                                        ttemp4 007F  
                                      status 0003                                        wtemp0 007E  
                                      wtemp1 0080                                        wtemp2 0082  
                                      wtemp3 0084                                        wtemp4 0086  
                                      wtemp5 0088                                        wtemp6 007F  
                             __CFG_MCLRE$OFF 0000                              __initialization 00B0  
                               __end_of_main 0775                                 _beatCounter_ 0063  
                                     ??_main 004A                            __end_of_HEX_TABLE 0834  
                             __CFG_PLLEN$OFF 0000                __parallel_lcd_SetCgram@bitmap 0043  
            __configuration_ReadByte@address 0075                                main@isNonZero 0054  
                                     _EEADRH 0192                                       _EEADRL 0191  
                                     _EEDATH 0194                                       _CCPR4H 0319  
                                     _EEDATL 0193                                       _CCPR4L 0318  
                                     _EECON2 0196                                       _BITMAP 0839  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     i1l2904 0046                                       i1l2924 0067  
                                     i1l2908 004A                                       i1l2950 0096  
                                     i1l2918 005F                                       i1l2960 00A7  
                                     i1l2936 007F                                       i1l2962 00A8  
                                     i1l2948 0095                                       u208_25 0020  
                                     u209_25 0042                     ??__parallel_lcd_ClearRow 0043  
                                     ___bmul 0DE8             __end_of__parallel_lcd_Initialize 0E32  
                             __CFG_STVREN$ON 0000                     ??__parallel_lcd_SetCgram 0045  
                              main@romOffset 0057                              _currentValuePtr 0065  
       __private_parallel_lcd_WriteByte@data 0075                            _menuStateConfirm_ 0033  
                    __end_of__initialization 00D3                     __configuration_WriteByte 0E0C  
                        ___bmul@multiplicand 0074                  __end_of__configuration_Load 0F72  
                __end_of__configuration_Save 1000                               __pcstackCOMMON 0070  
                               __pidataBANK0 07DC                                 __pidataBANK1 0EE2  
       __end_of__parallel_lcd_WriteCharacter 0DE8        __size_of__parallel_lcd_WriteCharacter 000E  
               __parallel_lcd_WriteCharacter 0DDA                  ??__parallel_lcd_WriteString 0047  
                             _OPTION_REGbits 0095                                   __pbssBANK0 005E  
            __size_of__parallel_lcd_ClearRow 001A                                   __pmaintext 00D6  
                                    ?___bmul 0074                                   __pintentry 0004  
              __configuration_WriteByte@data 0074                ?__parallel_lcd_WriteCharacter 0043  
            __size_of__parallel_lcd_SetCgram 002A                                      _CCPTMRS 029E  
               ?__configuration_GetRomOffset 0070                                      _MESSAGE 0800  
                             main@keyPressed 0059                                      _OSCTUNE 0098  
          __size_of__parallel_lcd_Initialize 0014                    ?__parallel_lcd_Initialize 0070  
                  __parallel_lcd_WriteString 0E62                                    _CHAR_CODE 0834  
                      __configuration_Load@i 0048             __size_of__configuration_ReadByte 0012  
                      __configuration_Save@i 0048                              __size_of___bmul 0012  
             __configuration_Save@returnCode 0045                                   _initialize 0775  
                                    __ptext1 0775                                      __ptext2 0EAC  
                                    __ptext3 0E62                                      __ptext4 0DDA  
                     __parallel_lcd_ClearRow 0E48                                      __ptext5 0E82  
                                    __ptext6 0E1E                                      __ptext7 0E48  
                                    __ptext8 0E32                                      __ptext9 0F72  
                                    _isMute_ 0068                       _informationValueBuffer 00A6  
                                  _T1CONbits 0018                                    _T2CONbits 001C  
                               __size_of_isr 00AA                                    _T4CONbits 0417  
                                  _T6CONbits 041E                                    _HEX_TABLE 0824  
                                    clrloop0 0DD5                         end_of_initialization 00D3  
                     __parallel_lcd_SetCgram 0E82                               main@returnCode 005B  
        __parallel_lcd_WriteStringClearing@i 0047                                      init_ram 0DCE  
                                    initloop 0DCF                      _PARALLEL_LCD_ROW_SELECT 0837  
                               __pstringtext 0800                   __configuration_Load@config 0047  
                           __CFG_FOSC$INTOSC 0000          __parallel_lcd_WriteString@stringPtr 0045  
                 ??__configuration_WriteByte 0075                               __end_of_BITMAP 0851  
                                _CCP1CONbits 0293                                  _CCP2CONbits 029A  
       __size_of__configuration_GetRomOffset 0005                                  _CCP3CONbits 0313  
                                _CCP4CONbits 031A                                   main@userId 005C  
                             __end_of___bmul 0DFA                                  ?_initialize 0070  
                        start_initialization 00B0                                  __end_of_isr 00AE  
       __configuration_ReadByte@memorySelect 0074                   __configuration_Save@config 0049  
                    __configuration_ReadByte 0DFA           __size_of__parallel_lcd_WriteString 0020  
                                   ??___bmul 0075                                  _CCPTMRSbits 029E  
                                __pdataBANK0 0020                                  __pdataBANK1 00A0  
               __size_of__configuration_Load 0052                 __size_of__configuration_Save 008E  
           __parallel_lcd_ClearRow@rowSelect 0044        __parallel_lcd_WriteCharacter@position 0044  
                                __pbssCOMMON 0076                                    ___latbits 0001  
                              __pcstackBANK0 0043                          __size_of_initialize 0067  
                             _menuStateMain_ 003B                               _menuStateTone_ 003F  
          __end_of__parallel_lcd_WriteString 0E82                      ?__parallel_lcd_ClearRow 0070  
                   __parallel_lcd_ClearRow@i 0045                              main@compareUnit 0058  
                                  __pswtext1 09D8                                    __pswtext2 0958  
                                  __pswtext3 099C                                    __pswtext4 09BC  
                                  __pswtext5 097A                                    _keyCount_ 0076  
              __configuration_Save@romOffset 0047             __end_of__configuration_WriteByte 0E1E  
                    ?__parallel_lcd_SetCgram 0043                __configuration_Save@ptrConfig 0046  
    __end_of__private_parallel_lcd_WriteByte 0E48     __size_of__private_parallel_lcd_WriteByte 0016  
          ??__private_parallel_lcd_WriteByte 0075             ?__private_parallel_lcd_WriteByte 0074  
            __private_parallel_lcd_WriteByte 0E32                                    _duration_ 0066  
                  ??__configuration_ReadByte 0075                                     _LATAbits 010C  
                                  clear_ram0 0DD4                                     _PIE1bits 0091  
                                   _PIE3bits 0093                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                     _PIR3bits 0013  
             __end_of__parallel_lcd_ClearRow 0E62                                    main@F3053 00A0  
         __parallel_lcd_WriteString@position 0048       __parallel_lcd_WriteCharacter@character 0043  
             __end_of__parallel_lcd_SetCgram 0EAC                                    main@phase 005A  
                   __parallel_lcd_Initialize 0E1E                         _currentMenuStatePtr_ 0064  
                              _tempoCounter_ 005E                     __parallel_lcd_SetCgram@i 0047  
__parallel_lcd_WriteStringClearing@stringPtr 0043                                   _EECON1bits 0195  
          __private_parallel_lcd_WriteByte@r 0074              __end_of__configuration_ReadByte 0E0C  
                               ??_initialize 0074          __end_of__configuration_GetRomOffset 0DCE  
                __configuration_GetRomOffset 0DC9              __parallel_lcd_SetCgram@charCode 0046  
                     _MESSAGE_MENU_ITEM_MAIN 00C2                       _MESSAGE_MENU_ITEM_TONE 00D6  
                                   __ptext10 0E0C                                     __ptext11 0F20  
                                   __ptext12 0DC9                                     __ptext13 0DFA  
                                   __ptext14 0DE8                ??__configuration_GetRomOffset 0076  
                        __configuration_Load 0F20                          __configuration_Save 0F72  
                              __size_of_main 069F                           __end_of_initialize 07DC  
  __end_of__parallel_lcd_WriteStringClearing 0EE2   __size_of__parallel_lcd_WriteStringClearing 0036  
        ??__parallel_lcd_WriteStringClearing 0045           ?__parallel_lcd_WriteStringClearing 0043  
          __parallel_lcd_WriteStringClearing 0EAC                                  _inputEvent_ 0067  
          __size_of__configuration_WriteByte 0012                    ?__configuration_WriteByte 0074  
 __parallel_lcd_WriteStringClearing@position 0046                         ?__configuration_Load 0070  
                       ?__configuration_Save 0070                              main@valueString 004E  
                                _OSCTUNEbits 0098                                   _INTCONbits 000B  
             ??__parallel_lcd_WriteCharacter 0076                            isr@eventPrescaler 0078  
                                   intlevel1 0000                            __CFG_CLKOUTEN$OFF 0000  
           __configuration_WriteByte@address 0075                                   _OSCCONbits 0099  
                                _valueLimit_ 0061                                _configration_ 0028  
                      ??__configuration_Load 0043                        ??__configuration_Save 0043  
                                _portAState_ 006C                              _keyBeepCounter_ 0069  
              __configuration_Load@romOffset 0046                                   _WDTCONbits 0097  
                              _machineState_ 006A                __configuration_Load@ptrConfig 0045  
                        _stateReturnCounter_ 006D  
