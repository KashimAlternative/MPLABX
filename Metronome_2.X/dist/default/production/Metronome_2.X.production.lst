

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Aug 15 16:00:54 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	swtext1,local,class=CONST,delta=2
    20                           	psect	swtext2,local,class=CONST,delta=2
    21                           	psect	swtext3,local,class=CONST,delta=2
    22                           	psect	swtext4,local,class=CONST,delta=2
    23                           	psect	swtext5,local,class=CONST,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0013                     	;# 
    57  0014                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0094                     	;# 
    75  0095                     	;# 
    76  0096                     	;# 
    77  0097                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009B                     	;# 
    82  009B                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  010C                     	;# 
    87  010D                     	;# 
    88  0111                     	;# 
    89  0112                     	;# 
    90  0113                     	;# 
    91  0114                     	;# 
    92  0115                     	;# 
    93  0116                     	;# 
    94  0117                     	;# 
    95  0118                     	;# 
    96  0119                     	;# 
    97  011A                     	;# 
    98  011B                     	;# 
    99  011D                     	;# 
   100  011E                     	;# 
   101  018C                     	;# 
   102  018D                     	;# 
   103  0191                     	;# 
   104  0191                     	;# 
   105  0192                     	;# 
   106  0193                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0194                     	;# 
   110  0195                     	;# 
   111  0196                     	;# 
   112  0199                     	;# 
   113  019A                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019C                     	;# 
   119  019C                     	;# 
   120  019D                     	;# 
   121  019E                     	;# 
   122  019F                     	;# 
   123  020C                     	;# 
   124  020D                     	;# 
   125  0211                     	;# 
   126  0211                     	;# 
   127  0212                     	;# 
   128  0212                     	;# 
   129  0213                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0214                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  0219                     	;# 
   141  021A                     	;# 
   142  021B                     	;# 
   143  021C                     	;# 
   144  021D                     	;# 
   145  021E                     	;# 
   146  021F                     	;# 
   147  0291                     	;# 
   148  0291                     	;# 
   149  0292                     	;# 
   150  0293                     	;# 
   151  0294                     	;# 
   152  0295                     	;# 
   153  0295                     	;# 
   154  0296                     	;# 
   155  0298                     	;# 
   156  0298                     	;# 
   157  0299                     	;# 
   158  029A                     	;# 
   159  029B                     	;# 
   160  029C                     	;# 
   161  029C                     	;# 
   162  029D                     	;# 
   163  029E                     	;# 
   164  029E                     	;# 
   165  0311                     	;# 
   166  0311                     	;# 
   167  0312                     	;# 
   168  0313                     	;# 
   169  0318                     	;# 
   170  0318                     	;# 
   171  0319                     	;# 
   172  031A                     	;# 
   173  0394                     	;# 
   174  0395                     	;# 
   175  0396                     	;# 
   176  039A                     	;# 
   177  039C                     	;# 
   178  039D                     	;# 
   179  039E                     	;# 
   180  039F                     	;# 
   181  0415                     	;# 
   182  0416                     	;# 
   183  0417                     	;# 
   184  041C                     	;# 
   185  041D                     	;# 
   186  041E                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198                           
   199                           	psect	idataBANK0
   200  0DF0                     __pidataBANK0:	
   201                           
   202                           ;initializer for _MESSAGE_INFORMATION
   203  0DF0  3420               	retlw	low (STR_18| (0+32768))
   204  0DF1  3489               	retlw	high (STR_18| (0+32768))
   205  0DF2  34A9               	retlw	low (STR_19| (0+32768))
   206  0DF3  3488               	retlw	high (STR_19| (0+32768))
   207  0DF4  34B4               	retlw	low (STR_20| (0+32768))
   208  0DF5  3488               	retlw	high (STR_20| (0+32768))
   209  0DF6  349E               	retlw	low (STR_21| (0+32768))
   210  0DF7  3488               	retlw	high (STR_21| (0+32768))
   211                           
   212                           ;initializer for _configration_
   213  0DF8  3400               	retlw	0
   214  0DF9  3400               	retlw	0
   215  0DFA  3478               	retlw	120
   216  0DFB  3400               	retlw	0
   217  0DFC  3404               	retlw	4
   218  0DFD  341E               	retlw	30
   219  0DFE  341E               	retlw	30
   220  0DFF  34F9               	retlw	249
   221  0E00  343E               	retlw	62
   222  0E01  3452               	retlw	82
   223  0E02  3401               	retlw	1
   224  0E03  3400               	retlw	0
   225  0E04  3400               	retlw	0
   226                           
   227                           ;initializer for _menuInfoInformation_
   228  0E05  3400               	retlw	0
   229  0E06  3400               	retlw	0
   230  0E07  3402               	retlw	2
   231  0E08  3400               	retlw	0
   232  0E09  3400               	retlw	0
   233  0E0A  3400               	retlw	0
   234                           
   235                           ;initializer for _menuInfoTone_
   236  0E0B  3400               	retlw	0
   237  0E0C  3400               	retlw	0
   238  0E0D  3403               	retlw	3
   239  0E0E  3450               	retlw	low (_MESSAGE_MENU_ITEM_TONE| (0+256))
   240  0E0F  3400               	retlw	0
   241  0E10  3400               	retlw	0
   242                           
   243                           	psect	idataBANK1
   244  0EB6                     __pidataBANK1:	
   245                           
   246                           ;initializer for main@F3100
   247  0EB6  343D               	retlw	61
   248  0EB7  3420               	retlw	32
   249  0EB8  3430               	retlw	48
   250  0EB9  3430               	retlw	48
   251  0EBA  3430               	retlw	48
   252  0EBB  3400               	retlw	0
   253                           
   254                           ;initializer for _valueInfoBeatCount_
   255  0EBC  3400               	retlw	0
   256  0EBD  3440               	retlw	64
   257  0EBE  3400               	retlw	0
   258  0EBF  3452               	retlw	low (STR_37| (0+32768))
   259  0EC0  3488               	retlw	high (STR_37| (0+32768))
   260  0EC1  34BF               	retlw	low (STR_2| (0+32768))
   261  0EC2  3488               	retlw	high (STR_2| (0+32768))
   262                           
   263                           ;initializer for _valueInfoDurationClick_
   264  0EC3  3400               	retlw	0
   265  0EC4  34FF               	retlw	255
   266  0EC5  3400               	retlw	0
   267  0EC6  3449               	retlw	low ((STR_4+5)| (0+32768))
   268  0EC7  3488               	retlw	high ((STR_4+5)| (0+32768))
   269  0EC8  3463               	retlw	low (STR_42| (0+32768))
   270  0EC9  3489               	retlw	high (STR_42| (0+32768))
   271                           
   272                           ;initializer for _valueInfoDurationKey_
   273  0ECA  3400               	retlw	0
   274  0ECB  34FF               	retlw	255
   275  0ECC  3400               	retlw	0
   276  0ECD  3449               	retlw	low ((STR_4+5)| (0+32768))
   277  0ECE  3488               	retlw	high ((STR_4+5)| (0+32768))
   278  0ECF  340F               	retlw	low (STR_44| (0+32768))
   279  0ED0  3489               	retlw	high (STR_44| (0+32768))
   280                           
   281                           ;initializer for _valueInfoPulseWidth_
   282  0ED1  3400               	retlw	0
   283  0ED2  3407               	retlw	7
   284  0ED3  3401               	retlw	1
   285  0ED4  3452               	retlw	low (STR_37| (0+32768))
   286  0ED5  3488               	retlw	high (STR_37| (0+32768))
   287  0ED6  3492               	retlw	low (STR_46| (0+32768))
   288  0ED7  3488               	retlw	high (STR_46| (0+32768))
   289                           
   290                           ;initializer for _valueInfoTempo_
   291  0ED8  3400               	retlw	0
   292  0ED9  3400               	retlw	0
   293  0EDA  3400               	retlw	0
   294  0EDB  34D4               	retlw	low (STR_22| (0+32768))
   295  0EDC  3488               	retlw	high (STR_22| (0+32768))
   296  0EDD  3469               	retlw	low (STR_36| (0+32768))
   297  0EDE  3489               	retlw	high (STR_36| (0+32768))
   298                           
   299                           ;initializer for _valueInfoTone_
   300  0EDF  3400               	retlw	0
   301  0EE0  34FF               	retlw	255
   302  0EE1  3400               	retlw	0
   303  0EE2  34E3               	retlw	low ((STR_3+5)| (0+32768))
   304  0EE3  3488               	retlw	high ((STR_3+5)| (0+32768))
   305  0EE4  34E3               	retlw	low ((STR_3+5)| (0+32768))
   306  0EE5  3488               	retlw	high ((STR_3+5)| (0+32768))
   307                           
   308                           ;initializer for _menuInfoConfirmLoad_
   309  0EE6  3400               	retlw	0
   310  0EE7  3400               	retlw	0
   311  0EE8  3401               	retlw	1
   312  0EE9  3400               	retlw	0
   313  0EEA  342F               	retlw	low (STR_32| (0+32768))
   314  0EEB  3489               	retlw	high (STR_32| (0+32768))
   315                           
   316                           ;initializer for _menuInfoConfirmReset_
   317  0EEC  3400               	retlw	0
   318  0EED  3400               	retlw	0
   319  0EEE  3401               	retlw	1
   320  0EEF  3400               	retlw	0
   321  0EF0  3418               	retlw	low (STR_34| (0+32768))
   322  0EF1  3489               	retlw	high (STR_34| (0+32768))
   323                           
   324                           ;initializer for _menuInfoConfirmSave_
   325  0EF2  3400               	retlw	0
   326  0EF3  3400               	retlw	0
   327  0EF4  3401               	retlw	1
   328  0EF5  3400               	retlw	0
   329  0EF6  3436               	retlw	low (STR_33| (0+32768))
   330  0EF7  3489               	retlw	high (STR_33| (0+32768))
   331                           
   332                           ;initializer for _menuInfoDuration_
   333  0EF8  3400               	retlw	0
   334  0EF9  3400               	retlw	0
   335  0EFA  3402               	retlw	2
   336  0EFB  345F               	retlw	low (_MESSAGE_MENU_ITEM_DURATION| (0+256))
   337  0EFC  3400               	retlw	0
   338  0EFD  3400               	retlw	0
   339                           
   340                           ;initializer for _menuInfoMain_
   341  0EFE  3400               	retlw	0
   342  0EFF  3400               	retlw	0
   343  0F00  3409               	retlw	9
   344  0F01  343C               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| (0+256))
   345  0F02  3400               	retlw	0
   346  0F03  3400               	retlw	0
   347                           
   348                           	psect	idataBANK2
   349  0E71                     __pidataBANK2:	
   350                           
   351                           ;initializer for _informationValueBuffer
   352  0E71  3420               	retlw	32
   353  0E72  342D               	retlw	45
   354  0E73  342D               	retlw	45
   355  0E74  342E               	retlw	46
   356  0E75  342D               	retlw	45
   357  0E76  342D               	retlw	45
   358  0E77  3400               	retlw	0
   359  0E78  3420               	retlw	32
   360  0E79  3420               	retlw	32
   361  0E7A  3430               	retlw	48
   362  0E7B  3478               	retlw	120
   363  0E7C  342D               	retlw	45
   364  0E7D  342D               	retlw	45
   365  0E7E  3400               	retlw	0
   366  0E7F  3420               	retlw	32
   367  0E80  3420               	retlw	32
   368  0E81  3430               	retlw	48
   369  0E82  3478               	retlw	120
   370  0E83  342D               	retlw	45
   371  0E84  342D               	retlw	45
   372  0E85  3400               	retlw	0
   373  0E86  3420               	retlw	32
   374  0E87  3420               	retlw	32
   375  0E88  3430               	retlw	48
   376  0E89  3478               	retlw	120
   377  0E8A  3430               	retlw	48
   378  0E8B  3430               	retlw	48
   379  0E8C  3400               	retlw	0
   380                           
   381                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   382  0E8D  3406               	retlw	low (STR_1| (0+32768))
   383  0E8E  3489               	retlw	high (STR_1| (0+32768))
   384  0E8F  34BF               	retlw	low (STR_2| (0+32768))
   385  0E90  3488               	retlw	high (STR_2| (0+32768))
   386  0E91  34DE               	retlw	low (STR_3| (0+32768))
   387  0E92  3488               	retlw	high (STR_3| (0+32768))
   388  0E93  3444               	retlw	low (STR_4| (0+32768))
   389  0E94  3488               	retlw	high (STR_4| (0+32768))
   390  0E95  346D               	retlw	low (STR_5| (0+32768))
   391  0E96  3488               	retlw	high (STR_5| (0+32768))
   392  0E97  34F2               	retlw	low (STR_6| (0+32768))
   393  0E98  3488               	retlw	high (STR_6| (0+32768))
   394  0E99  3475               	retlw	low (STR_7| (0+32768))
   395  0E9A  3489               	retlw	high (STR_7| (0+32768))
   396  0E9B  347A               	retlw	low (STR_8| (0+32768))
   397  0E9C  3489               	retlw	high (STR_8| (0+32768))
   398  0E9D  347F               	retlw	low (STR_9| (0+32768))
   399  0E9E  3489               	retlw	high (STR_9| (0+32768))
   400  0E9F  346F               	retlw	low (STR_10| (0+32768))
   401  0EA0  3489               	retlw	high (STR_10| (0+32768))
   402                           
   403                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   404  0EA1  3406               	retlw	low (STR_1| (0+32768))
   405  0EA2  3489               	retlw	high (STR_1| (0+32768))
   406  0EA3  344B               	retlw	low (STR_12| (0+32768))
   407  0EA4  3489               	retlw	high (STR_12| (0+32768))
   408  0EA5  3451               	retlw	low (STR_13| (0+32768))
   409  0EA6  3489               	retlw	high (STR_13| (0+32768))
   410  0EA7  3457               	retlw	low (STR_14| (0+32768))
   411  0EA8  3489               	retlw	high (STR_14| (0+32768))
   412                           
   413                           ;initializer for _valueInfoOscillatorTune_
   414  0EA9  3400               	retlw	0
   415  0EAA  341E               	retlw	30
   416  0EAB  34E2               	retlw	226
   417  0EAC  3452               	retlw	low (STR_37| (0+32768))
   418  0EAD  3488               	retlw	high (STR_37| (0+32768))
   419  0EAE  34E8               	retlw	low (STR_48| (0+32768))
   420  0EAF  3488               	retlw	high (STR_48| (0+32768))
   421                           
   422                           ;initializer for _MESSAGE_MENU_ITEM_DURATION
   423  0EB0  3406               	retlw	low (STR_1| (0+32768))
   424  0EB1  3489               	retlw	high (STR_1| (0+32768))
   425  0EB2  3486               	retlw	low (STR_16| (0+32768))
   426  0EB3  3488               	retlw	high (STR_16| (0+32768))
   427  0EB4  34CA               	retlw	low (STR_17| (0+32768))
   428  0EB5  3488               	retlw	high (STR_17| (0+32768))
   429                           
   430                           	psect	stringtext
   431  0800                     __pstringtext:	
   432  0800                     _MESSAGE:	
   433  0800  34D4               	retlw	low (STR_22| (0+32768))
   434  0801  3488               	retlw	high (STR_22| (0+32768))
   435  0802  3428               	retlw	low (STR_23| (0+32768))
   436  0803  3489               	retlw	high (STR_23| (0+32768))
   437  0804  3484               	retlw	low (STR_24| (0+32768))
   438  0805  3489               	retlw	high (STR_24| (0+32768))
   439  0806  3488               	retlw	low (STR_25| (0+32768))
   440  0807  3489               	retlw	high (STR_25| (0+32768))
   441  0808  3444               	retlw	low (STR_26| (0+32768))
   442  0809  3489               	retlw	high (STR_26| (0+32768))
   443  080A  345D               	retlw	low (STR_27| (0+32768))
   444  080B  3489               	retlw	high (STR_27| (0+32768))
   445  080C  347A               	retlw	low (STR_28| (0+32768))
   446  080D  3488               	retlw	high (STR_28| (0+32768))
   447  080E  3460               	retlw	low (STR_29| (0+32768))
   448  080F  3488               	retlw	high (STR_29| (0+32768))
   449  0810  343D               	retlw	low (STR_30| (0+32768))
   450  0811  3489               	retlw	high (STR_30| (0+32768))
   451  0812  34FC               	retlw	low (STR_31| (0+32768))
   452  0813  3488               	retlw	high (STR_31| (0+32768))
   453  0814                     __end_of_MESSAGE:	
   454  0814                     _HEX_TABLE:	
   455  0814  3430               	retlw	48
   456  0815  3431               	retlw	49
   457  0816  3432               	retlw	50
   458  0817  3433               	retlw	51
   459  0818  3434               	retlw	52
   460  0819  3435               	retlw	53
   461  081A  3436               	retlw	54
   462  081B  3437               	retlw	55
   463  081C  3438               	retlw	56
   464  081D  3439               	retlw	57
   465  081E  3441               	retlw	65
   466  081F  3442               	retlw	66
   467  0820  3443               	retlw	67
   468  0821  3444               	retlw	68
   469  0822  3445               	retlw	69
   470  0823  3446               	retlw	70
   471  0824                     __end_of_HEX_TABLE:	
   472  0824                     _CHAR_CODE:	
   473  0824  3400               	retlw	0
   474  0825  3401               	retlw	1
   475  0826  3402               	retlw	2
   476  0827                     __end_of_CHAR_CODE:	
   477  0827                     main@COMPARE_UNITS:	
   478  0827  3464               	retlw	100
   479  0828  340A               	retlw	10
   480  0829  3401               	retlw	1
   481  082A                     __end_ofmain@COMPARE_UNITS:	
   482  082A                     _PARALLEL_LCD_ROW_SELECT:	
   483  082A  3480               	retlw	128
   484  082B  34C0               	retlw	192
   485  082C                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   486  082C                     _BITMAP:	
   487  082C  3410               	retlw	16
   488  082D  3418               	retlw	24
   489  082E  341C               	retlw	28
   490  082F  341E               	retlw	30
   491  0830  341C               	retlw	28
   492  0831  3418               	retlw	24
   493  0832  3410               	retlw	16
   494  0833  3400               	retlw	0
   495  0834  3400               	retlw	0
   496  0835  3404               	retlw	4
   497  0836  340E               	retlw	14
   498  0837  341F               	retlw	31
   499  0838  3400               	retlw	0
   500  0839  3400               	retlw	0
   501  083A  3400               	retlw	0
   502  083B  3400               	retlw	0
   503  083C  3400               	retlw	0
   504  083D  3400               	retlw	0
   505  083E  3400               	retlw	0
   506  083F  3400               	retlw	0
   507  0840  341F               	retlw	31
   508  0841  340E               	retlw	14
   509  0842  3404               	retlw	4
   510  0843  3400               	retlw	0
   511  0844                     __end_of_BITMAP:	
   512  0016                     _TMR1	set	22
   513  000B                     _INTCONbits	set	11
   514  0011                     _PIR1bits	set	17
   515  0012                     _PIR2bits	set	18
   516  0013                     _PIR3bits	set	19
   517  000C                     _PORTA	set	12
   518  001B                     _PR2	set	27
   519  0018                     _T1CONbits	set	24
   520  001C                     _T2CONbits	set	28
   521  0015                     _TMR0	set	21
   522  001A                     _TMR2	set	26
   523  0095                     _OPTION_REGbits	set	149
   524  0099                     _OSCCONbits	set	153
   525  0098                     _OSCTUNE	set	152
   526  0098                     _OSCTUNEbits	set	152
   527  0091                     _PIE1bits	set	145
   528  0093                     _PIE3bits	set	147
   529  008C                     _TRISA	set	140
   530  008D                     _TRISB	set	141
   531  0097                     _WDTCONbits	set	151
   532  010C                     _LATAbits	set	268
   533  010D                     _LATB	set	269
   534  018C                     _ANSELA	set	396
   535  018D                     _ANSELB	set	397
   536  0192                     _EEADRH	set	402
   537  0191                     _EEADRL	set	401
   538  0195                     _EECON1bits	set	405
   539  0196                     _EECON2	set	406
   540  0194                     _EEDATH	set	404
   541  0193                     _EEDATL	set	403
   542  0293                     _CCP1CONbits	set	659
   543  029A                     _CCP2CONbits	set	666
   544  029E                     _CCPTMRS	set	670
   545  029E                     _CCPTMRSbits	set	670
   546  0313                     _CCP3CONbits	set	787
   547  031A                     _CCP4CONbits	set	794
   548  0319                     _CCPR4H	set	793
   549  0318                     _CCPR4L	set	792
   550  0416                     _PR4	set	1046
   551  041D                     _PR6	set	1053
   552  0417                     _T4CONbits	set	1047
   553  041E                     _T6CONbits	set	1054
   554  0415                     _TMR4	set	1045
   555  041C                     _TMR6	set	1052
   556  0844                     STR_4:	
   557  0844  3441               	retlw	65	;'A'
   558  0845  3464               	retlw	100	;'d'
   559  0846  346A               	retlw	106	;'j'
   560  0847  342E               	retlw	46	;'.'
   561  0848  3420               	retlw	32	;' '
   562  0849  3444               	retlw	68	;'D'
   563  084A  3475               	retlw	117	;'u'
   564  084B  3472               	retlw	114	;'r'
   565  084C  3461               	retlw	97	;'a'
   566  084D  3474               	retlw	116	;'t'
   567  084E  3469               	retlw	105	;'i'
   568  084F  346F               	retlw	111	;'o'
   569  0850  346E               	retlw	110	;'n'
   570  0851  3400               	retlw	0
   571  0852                     STR_37:	
   572  0852  3443               	retlw	67	;'C'
   573  0853  346F               	retlw	111	;'o'
   574  0854  346E               	retlw	110	;'n'
   575  0855  3466               	retlw	102	;'f'
   576  0856  3469               	retlw	105	;'i'
   577  0857  3467               	retlw	103	;'g'
   578  0858  3475               	retlw	117	;'u'
   579  0859  3472               	retlw	114	;'r'
   580  085A  3461               	retlw	97	;'a'
   581  085B  3474               	retlw	116	;'t'
   582  085C  3469               	retlw	105	;'i'
   583  085D  346F               	retlw	111	;'o'
   584  085E  346E               	retlw	110	;'n'
   585  085F  3400               	retlw	0
   586  0860                     STR_29:	
   587  0860  3445               	retlw	69	;'E'
   588  0861  3472               	retlw	114	;'r'
   589  0862  3472               	retlw	114	;'r'
   590  0863  346F               	retlw	111	;'o'
   591  0864  3472               	retlw	114	;'r'
   592  0865  3420               	retlw	32	;' '
   593  0866  346F               	retlw	111	;'o'
   594  0867  346E               	retlw	110	;'n'
   595  0868  3420               	retlw	32	;' '
   596  0869  342E               	retlw	46	;'.'
   597  086A  342E               	retlw	46	;'.'
   598  086B  342E               	retlw	46	;'.'
   599  086C  3400               	retlw	0
   600  086D                     STR_5:	
   601  086D  3441               	retlw	65	;'A'
   602  086E  3464               	retlw	100	;'d'
   603  086F  346A               	retlw	106	;'j'
   604  0870  342E               	retlw	46	;'.'
   605  0871  3420               	retlw	32	;' '
   606  0872  3450               	retlw	80	;'P'
   607  0873  342D               	retlw	45	;'-'
   608  0874  3457               	retlw	87	;'W'
   609  0875  3469               	retlw	105	;'i'
   610  0876  3464               	retlw	100	;'d'
   611  0877  3474               	retlw	116	;'t'
   612  0878  3468               	retlw	104	;'h'
   613  0879  3400               	retlw	0
   614  087A                     STR_28:	
   615  087A  3449               	retlw	73	;'I'
   616  087B  346E               	retlw	110	;'n'
   617  087C  3469               	retlw	105	;'i'
   618  087D  3474               	retlw	116	;'t'
   619  087E  3469               	retlw	105	;'i'
   620  087F  3461               	retlw	97	;'a'
   621  0880  346C               	retlw	108	;'l'
   622  0881  3469               	retlw	105	;'i'
   623  0882  347A               	retlw	122	;'z'
   624  0883  3465               	retlw	101	;'e'
   625  0884  3464               	retlw	100	;'d'
   626  0885  3400               	retlw	0
   627  0886                     STR_16:	
   628  0886  3443               	retlw	67	;'C'
   629  0887  346C               	retlw	108	;'l'
   630  0888  3469               	retlw	105	;'i'
   631  0889  3463               	retlw	99	;'c'
   632  088A  346B               	retlw	107	;'k'
   633  088B  3420               	retlw	32	;' '
   634  088C  3453               	retlw	83	;'S'
   635  088D  346F               	retlw	111	;'o'
   636  088E  3475               	retlw	117	;'u'
   637  088F  346E               	retlw	110	;'n'
   638  0890  3464               	retlw	100	;'d'
   639  0891  3400               	retlw	0
   640  0892                     STR_46:	
   641  0892  3450               	retlw	80	;'P'
   642  0893  3475               	retlw	117	;'u'
   643  0894  346C               	retlw	108	;'l'
   644  0895  3473               	retlw	115	;'s'
   645  0896  3465               	retlw	101	;'e'
   646  0897  3420               	retlw	32	;' '
   647  0898  3457               	retlw	87	;'W'
   648  0899  3469               	retlw	105	;'i'
   649  089A  3464               	retlw	100	;'d'
   650  089B  3474               	retlw	116	;'t'
   651  089C  3468               	retlw	104	;'h'
   652  089D  3400               	retlw	0
   653  089E                     STR_21:	
   654  089E  3445               	retlw	69	;'E'
   655  089F  3472               	retlw	114	;'r'
   656  08A0  3472               	retlw	114	;'r'
   657  08A1  346F               	retlw	111	;'o'
   658  08A2  3472               	retlw	114	;'r'
   659  08A3  3420               	retlw	32	;' '
   660  08A4  3443               	retlw	67	;'C'
   661  08A5  346F               	retlw	111	;'o'
   662  08A6  3464               	retlw	100	;'d'
   663  08A7  3465               	retlw	101	;'e'
   664  08A8  3400               	retlw	0
   665  08A9                     STR_19:	
   666  08A9  3452               	retlw	82	;'R'
   667  08AA  344F               	retlw	79	;'O'
   668  08AB  344D               	retlw	77	;'M'
   669  08AC  3420               	retlw	32	;' '
   670  08AD  344F               	retlw	79	;'O'
   671  08AE  3466               	retlw	102	;'f'
   672  08AF  3466               	retlw	102	;'f'
   673  08B0  3473               	retlw	115	;'s'
   674  08B1  3465               	retlw	101	;'e'
   675  08B2  3474               	retlw	116	;'t'
   676  08B3  3400               	retlw	0
   677  08B4                     STR_20:	
   678  08B4  3453               	retlw	83	;'S'
   679  08B5  3461               	retlw	97	;'a'
   680  08B6  3476               	retlw	118	;'v'
   681  08B7  3465               	retlw	101	;'e'
   682  08B8  3420               	retlw	32	;' '
   683  08B9  3443               	retlw	67	;'C'
   684  08BA  346F               	retlw	111	;'o'
   685  08BB  3475               	retlw	117	;'u'
   686  08BC  346E               	retlw	110	;'n'
   687  08BD  3474               	retlw	116	;'t'
   688  08BE  3400               	retlw	0
   689  08BF                     STR_2:	
   690  08BF  3442               	retlw	66	;'B'
   691  08C0  3465               	retlw	101	;'e'
   692  08C1  3461               	retlw	97	;'a'
   693  08C2  3474               	retlw	116	;'t'
   694  08C3  3420               	retlw	32	;' '
   695  08C4  3443               	retlw	67	;'C'
   696  08C5  346F               	retlw	111	;'o'
   697  08C6  3475               	retlw	117	;'u'
   698  08C7  346E               	retlw	110	;'n'
   699  08C8  3474               	retlw	116	;'t'
   700  08C9  3400               	retlw	0
   701  08CA                     STR_17:	
   702  08CA  344B               	retlw	75	;'K'
   703  08CB  3465               	retlw	101	;'e'
   704  08CC  3479               	retlw	121	;'y'
   705  08CD  3420               	retlw	32	;' '
   706  08CE  3453               	retlw	83	;'S'
   707  08CF  346F               	retlw	111	;'o'
   708  08D0  3475               	retlw	117	;'u'
   709  08D1  346E               	retlw	110	;'n'
   710  08D2  3464               	retlw	100	;'d'
   711  08D3  3400               	retlw	0
   712  08D4                     STR_22:	
   713  08D4  344D               	retlw	77	;'M'
   714  08D5  3465               	retlw	101	;'e'
   715  08D6  3474               	retlw	116	;'t'
   716  08D7  3472               	retlw	114	;'r'
   717  08D8  346F               	retlw	111	;'o'
   718  08D9  346E               	retlw	110	;'n'
   719  08DA  346F               	retlw	111	;'o'
   720  08DB  346D               	retlw	109	;'m'
   721  08DC  3465               	retlw	101	;'e'
   722  08DD  3400               	retlw	0
   723  08DE                     STR_3:	
   724  08DE  3441               	retlw	65	;'A'
   725  08DF  3464               	retlw	100	;'d'
   726  08E0  346A               	retlw	106	;'j'
   727  08E1  342E               	retlw	46	;'.'
   728  08E2  3420               	retlw	32	;' '
   729  08E3  3454               	retlw	84	;'T'
   730  08E4  346F               	retlw	111	;'o'
   731  08E5  346E               	retlw	110	;'n'
   732  08E6  3465               	retlw	101	;'e'
   733  08E7  3400               	retlw	0
   734  08E8                     STR_48:	
   735  08E8  344F               	retlw	79	;'O'
   736  08E9  3473               	retlw	115	;'s'
   737  08EA  3463               	retlw	99	;'c'
   738  08EB  342E               	retlw	46	;'.'
   739  08EC  3420               	retlw	32	;' '
   740  08ED  3454               	retlw	84	;'T'
   741  08EE  3475               	retlw	117	;'u'
   742  08EF  346E               	retlw	110	;'n'
   743  08F0  3465               	retlw	101	;'e'
   744  08F1  3400               	retlw	0
   745  08F2                     STR_6:	
   746  08F2  3441               	retlw	65	;'A'
   747  08F3  3464               	retlw	100	;'d'
   748  08F4  346A               	retlw	106	;'j'
   749  08F5  342E               	retlw	46	;'.'
   750  08F6  3420               	retlw	32	;' '
   751  08F7  3454               	retlw	84	;'T'
   752  08F8  3475               	retlw	117	;'u'
   753  08F9  346E               	retlw	110	;'n'
   754  08FA  3465               	retlw	101	;'e'
   755  08FB  3400               	retlw	0
   756  08FC                     STR_31:	
   757  08FC  3449               	retlw	73	;'I'
   758  08FD  346E               	retlw	110	;'n'
   759  08FE  3474               	retlw	116	;'t'
   760  08FF  3465               	retlw	101	;'e'
   761  0900  3472               	retlw	114	;'r'
   762  0901  3472               	retlw	114	;'r'
   763  0902  3475               	retlw	117	;'u'
   764  0903  3470               	retlw	112	;'p'
   765  0904  3474               	retlw	116	;'t'
   766  0905  3400               	retlw	0
   767  0906                     STR_1:	
   768  0906  343C               	retlw	60	;'<'
   769  0907  3420               	retlw	32	;' '
   770  0908  3452               	retlw	82	;'R'
   771  0909  3465               	retlw	101	;'e'
   772  090A  3474               	retlw	116	;'t'
   773  090B  3475               	retlw	117	;'u'
   774  090C  3472               	retlw	114	;'r'
   775  090D  346E               	retlw	110	;'n'
   776  090E  3400               	retlw	0
   777  090F                     STR_44:	
   778  090F  344B               	retlw	75	;'K'
   779  0910  3465               	retlw	101	;'e'
   780  0911  3479               	retlw	121	;'y'
   781  0912  3420               	retlw	32	;' '
   782  0913  3442               	retlw	66	;'B'
   783  0914  3465               	retlw	101	;'e'
   784  0915  3465               	retlw	101	;'e'
   785  0916  3470               	retlw	112	;'p'
   786  0917  3400               	retlw	0
   787  0918                     STR_34:	
   788  0918  3452               	retlw	82	;'R'
   789  0919  3465               	retlw	101	;'e'
   790  091A  3473               	retlw	115	;'s'
   791  091B  3465               	retlw	101	;'e'
   792  091C  3474               	retlw	116	;'t'
   793  091D  3420               	retlw	32	;' '
   794  091E  343F               	retlw	63	;'?'
   795  091F  3400               	retlw	0
   796  0920                     STR_18:	
   797  0920  3456               	retlw	86	;'V'
   798  0921  3465               	retlw	101	;'e'
   799  0922  3472               	retlw	114	;'r'
   800  0923  3473               	retlw	115	;'s'
   801  0924  3469               	retlw	105	;'i'
   802  0925  346F               	retlw	111	;'o'
   803  0926  346E               	retlw	110	;'n'
   804  0927  3400               	retlw	0
   805  0928                     STR_23:	
   806  0928  3423               	retlw	35	;'#'
   807  0929  344D               	retlw	77	;'M'
   808  092A  3475               	retlw	117	;'u'
   809  092B  3474               	retlw	116	;'t'
   810  092C  3465               	retlw	101	;'e'
   811  092D  3423               	retlw	35	;'#'
   812  092E  3400               	retlw	0
   813  092F                     STR_32:	
   814  092F  344C               	retlw	76	;'L'
   815  0930  346F               	retlw	111	;'o'
   816  0931  3461               	retlw	97	;'a'
   817  0932  3464               	retlw	100	;'d'
   818  0933  3420               	retlw	32	;' '
   819  0934  343F               	retlw	63	;'?'
   820  0935  3400               	retlw	0
   821  0936                     STR_33:	
   822  0936  3453               	retlw	83	;'S'
   823  0937  3461               	retlw	97	;'a'
   824  0938  3476               	retlw	118	;'v'
   825  0939  3465               	retlw	101	;'e'
   826  093A  3420               	retlw	32	;' '
   827  093B  343F               	retlw	63	;'?'
   828  093C  3400               	retlw	0
   829  093D                     STR_30:	
   830  093D  3445               	retlw	69	;'E'
   831  093E  3445               	retlw	69	;'E'
   832  093F  3450               	retlw	80	;'P'
   833  0940  3452               	retlw	82	;'R'
   834  0941  344F               	retlw	79	;'O'
   835  0942  344D               	retlw	77	;'M'
   836  0943  3400               	retlw	0
   837  0944                     STR_26:	
   838  0944  344C               	retlw	76	;'L'
   839  0945  346F               	retlw	111	;'o'
   840  0946  3461               	retlw	97	;'a'
   841  0947  3464               	retlw	100	;'d'
   842  0948  3465               	retlw	101	;'e'
   843  0949  3464               	retlw	100	;'d'
   844  094A  3400               	retlw	0
   845  094B                     STR_12:	
   846  094B  3454               	retlw	84	;'T'
   847  094C  346F               	retlw	111	;'o'
   848  094D  346E               	retlw	110	;'n'
   849  094E  3465               	retlw	101	;'e'
   850  094F  3430               	retlw	48	;'0'
   851  0950  3400               	retlw	0
   852  0951                     STR_13:	
   853  0951  3454               	retlw	84	;'T'
   854  0952  346F               	retlw	111	;'o'
   855  0953  346E               	retlw	110	;'n'
   856  0954  3465               	retlw	101	;'e'
   857  0955  3431               	retlw	49	;'1'
   858  0956  3400               	retlw	0
   859  0957                     STR_14:	
   860  0957  3454               	retlw	84	;'T'
   861  0958  346F               	retlw	111	;'o'
   862  0959  346E               	retlw	110	;'n'
   863  095A  3465               	retlw	101	;'e'
   864  095B  3432               	retlw	50	;'2'
   865  095C  3400               	retlw	0
   866  095D                     STR_27:	
   867  095D  3453               	retlw	83	;'S'
   868  095E  3461               	retlw	97	;'a'
   869  095F  3476               	retlw	118	;'v'
   870  0960  3465               	retlw	101	;'e'
   871  0961  3464               	retlw	100	;'d'
   872  0962  3400               	retlw	0
   873  0963                     STR_42:	
   874  0963  3443               	retlw	67	;'C'
   875  0964  346C               	retlw	108	;'l'
   876  0965  3469               	retlw	105	;'i'
   877  0966  3463               	retlw	99	;'c'
   878  0967  346B               	retlw	107	;'k'
   879  0968  3400               	retlw	0
   880  0969                     STR_36:	
   881  0969  3454               	retlw	84	;'T'
   882  096A  3465               	retlw	101	;'e'
   883  096B  346D               	retlw	109	;'m'
   884  096C  3470               	retlw	112	;'p'
   885  096D  346F               	retlw	111	;'o'
   886  096E  3400               	retlw	0
   887  096F                     STR_10:	
   888  096F  3452               	retlw	82	;'R'
   889  0970  3465               	retlw	101	;'e'
   890  0971  3473               	retlw	115	;'s'
   891  0972  3465               	retlw	101	;'e'
   892  0973  3474               	retlw	116	;'t'
   893  0974  3400               	retlw	0
   894  0975                     STR_7:	
   895  0975  344C               	retlw	76	;'L'
   896  0976  346F               	retlw	111	;'o'
   897  0977  3461               	retlw	97	;'a'
   898  0978  3464               	retlw	100	;'d'
   899  0979  3400               	retlw	0
   900  097A                     STR_8:	
   901  097A  3453               	retlw	83	;'S'
   902  097B  3461               	retlw	97	;'a'
   903  097C  3476               	retlw	118	;'v'
   904  097D  3465               	retlw	101	;'e'
   905  097E  3400               	retlw	0
   906  097F                     STR_9:	
   907  097F  3449               	retlw	73	;'I'
   908  0980  346E               	retlw	110	;'n'
   909  0981  3466               	retlw	102	;'f'
   910  0982  346F               	retlw	111	;'o'
   911  0983  3400               	retlw	0
   912  0984                     STR_24:	
   913  0984  344E               	retlw	78	;'N'
   914  0985  346F               	retlw	111	;'o'
   915  0986  3420               	retlw	32	;' '
   916  0987  3400               	retlw	0
   917  0988                     STR_25:	
   918  0988  3459               	retlw	89	;'Y'
   919  0989  3465               	retlw	101	;'e'
   920  098A  3473               	retlw	115	;'s'
   921  098B  3400               	retlw	0
   922  08D4                     
   923                           ; #config settings
   924  0000                     
   925                           	psect	cinit
   926  0078                     start_initialization:	
   927  0078                     __initialization:	
   928                           
   929                           ; Clear objects allocated to COMMON
   930  0078  01F6               	clrf	__pbssCOMMON& (0+127)
   931  0079  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   932  007A  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   933  007B  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   934                           
   935                           ; Clear objects allocated to BANK0
   936  007C  305B               	movlw	low __pbssBANK0
   937  007D  0084               	movwf	4
   938  007E  3000               	movlw	high __pbssBANK0
   939  007F  0085               	movwf	5
   940  0080  3013               	movlw	19
   941  0081  3187  27FA  3180   	fcall	clear_ram0
   942                           
   943                           ; Initialize objects allocated to BANK0
   944  0084  30F0               	movlw	low __pidataBANK0
   945  0085  0084               	movwf	4
   946  0086  308D               	movlw	(high __pidataBANK0)| (0+128)
   947  0087  0085               	movwf	5
   948  0088  3020               	movlw	low __pdataBANK0
   949  0089  0086               	movwf	6
   950  008A  3000               	movlw	high __pdataBANK0
   951  008B  0087               	movwf	7
   952  008C  3021               	movlw	33
   953  008D  318D  252D  3180   	fcall	init_ram
   954                           
   955                           ; Initialize objects allocated to BANK1
   956  0090  30B6               	movlw	low __pidataBANK1
   957  0091  0084               	movwf	4
   958  0092  308E               	movlw	(high __pidataBANK1)| (0+128)
   959  0093  0085               	movwf	5
   960  0094  30A0               	movlw	low __pdataBANK1
   961  0095  0086               	movwf	6
   962  0096  3000               	movlw	high __pdataBANK1
   963  0097  0087               	movwf	7
   964  0098  304E               	movlw	78
   965  0099  318D  252D  3180   	fcall	init_ram
   966                           
   967                           ; Initialize objects allocated to BANK2
   968  009C  3071               	movlw	low __pidataBANK2
   969  009D  0084               	movwf	4
   970  009E  308E               	movlw	(high __pidataBANK2)| (0+128)
   971  009F  0085               	movwf	5
   972  00A0  3020               	movlw	low __pdataBANK2
   973  00A1  0086               	movwf	6
   974  00A2  3001               	movlw	high __pdataBANK2
   975  00A3  0087               	movwf	7
   976  00A4  3045               	movlw	69
   977  00A5  318D  252D         	fcall	init_ram
   978  00A7                     end_of_initialization:	
   979                           ;End of C runtime variable initialization code
   980                           
   981  00A7                     __end_of__initialization:	
   982  00A7  0020               	movlb	0
   983  00A8  3180  28AA         	ljmp	_main	;jump to C main() function
   984                           
   985                           	psect	bssCOMMON
   986  0076                     __pbssCOMMON:	
   987  0076                     isr@keyHoldCount:	
   988  0076                     	ds	2
   989  0078                     isr@prescaler:	
   990  0078                     	ds	2
   991                           
   992                           	psect	bssBANK0
   993  005B                     __pbssBANK0:	
   994  005B                     _tempoCounter_:	
   995  005B                     	ds	3
   996  005E                     _currentSingleMessage_:	
   997  005E                     	ds	2
   998  0060                     _currentValueInfoPtr_:	
   999  0060                     	ds	2
  1000  0062                     _events_:	
  1001  0062                     	ds	2
  1002  0064                     _soundDurationCount_:	
  1003  0064                     	ds	2
  1004  0066                     _beatCounter_:	
  1005  0066                     	ds	1
  1006  0067                     _currentMenuInfoPtr_:	
  1007  0067                     	ds	1
  1008  0068                     _isMute_:	
  1009  0068                     	ds	1
  1010  0069                     _machineError_:	
  1011  0069                     	ds	1
  1012  006A                     _machineState_:	
  1013  006A                     	ds	1
  1014  006B                     _sampledPortAState_:	
  1015  006B                     	ds	1
  1016  006C                     _stateReturnCounter_:	
  1017  006C                     	ds	1
  1018  006D                     main@prevPortAState:	
  1019  006D                     	ds	1
  1020                           
  1021                           	psect	dataBANK0
  1022  0020                     __pdataBANK0:	
  1023  0020                     _MESSAGE_INFORMATION:	
  1024  0020                     	ds	8
  1025  0028                     _configration_:	
  1026  0028                     	ds	13
  1027  0035                     _menuInfoInformation_:	
  1028  0035                     	ds	6
  1029  003B                     _menuInfoTone_:	
  1030  003B                     	ds	6
  1031                           
  1032                           	psect	dataBANK1
  1033  00A0                     __pdataBANK1:	
  1034  00A0                     main@F3100:	
  1035  00A0                     	ds	6
  1036  00A6                     _valueInfoBeatCount_:	
  1037  00A6                     	ds	7
  1038  00AD                     _valueInfoDurationClick_:	
  1039  00AD                     	ds	7
  1040  00B4                     _valueInfoDurationKey_:	
  1041  00B4                     	ds	7
  1042  00BB                     _valueInfoPulseWidth_:	
  1043  00BB                     	ds	7
  1044  00C2                     _valueInfoTempo_:	
  1045  00C2                     	ds	7
  1046  00C9                     _valueInfoTone_:	
  1047  00C9                     	ds	7
  1048  00D0                     _menuInfoConfirmLoad_:	
  1049  00D0                     	ds	6
  1050  00D6                     _menuInfoConfirmReset_:	
  1051  00D6                     	ds	6
  1052  00DC                     _menuInfoConfirmSave_:	
  1053  00DC                     	ds	6
  1054  00E2                     _menuInfoDuration_:	
  1055  00E2                     	ds	6
  1056  00E8                     _menuInfoMain_:	
  1057  00E8                     	ds	6
  1058                           
  1059                           	psect	dataBANK2
  1060  0120                     __pdataBANK2:	
  1061  0120                     _informationValueBuffer:	
  1062  0120                     	ds	28
  1063  013C                     _MESSAGE_MENU_ITEM_MAIN:	
  1064  013C                     	ds	20
  1065  0150                     _MESSAGE_MENU_ITEM_TONE:	
  1066  0150                     	ds	8
  1067  0158                     _valueInfoOscillatorTune_:	
  1068  0158                     	ds	7
  1069  015F                     _MESSAGE_MENU_ITEM_DURATION:	
  1070  015F                     	ds	6
  1071                           
  1072                           	psect	clrtext
  1073  07FA                     clear_ram0:	
  1074                           ;	Called with FSR0 containing the base address, and
  1075                           ;	WREG with the size to clear
  1076                           
  1077  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  1078  07FB                     clrloop0:	
  1079  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  1080  07FC  3101               	addfsr 0,1
  1081  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1082  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  1083  07FF  3400               	retlw	0	;all done for this memory range, return
  1084                           
  1085                           	psect	inittext
  1086  0D2D                     init_ram:	
  1087  0D2D  00FE               	movwf	126
  1088  0D2E                     initloop:	
  1089  0D2E  0012               	moviw fsr0++
  1090  0D2F  001E               	movwi fsr1++
  1091  0D30  0BFE               	decfsz	126,f
  1092  0D31  2D2E               	goto	initloop
  1093  0D32  3400               	retlw	0
  1094                           
  1095                           	psect	cstackCOMMON
  1096  0070                     __pcstackCOMMON:	
  1097  0070                     ?_initialize:	
  1098  0070                     ?_ParallelLCD_ClearRow:	
  1099                           ; 0 bytes @ 0x0
  1100                           
  1101  0070                     ?_ParallelLCD_ClearDisplay:	
  1102                           ; 0 bytes @ 0x0
  1103                           
  1104  0070                     ?_main:	
  1105                           ; 0 bytes @ 0x0
  1106                           
  1107  0070                     ?_isr:	
  1108                           ; 0 bytes @ 0x0
  1109                           
  1110  0070                     ??_isr:	
  1111                           ; 0 bytes @ 0x0
  1112                           
  1113  0070                     ?_Configuration_Save:	
  1114                           ; 0 bytes @ 0x0
  1115                           
  1116  0070                     ?_Configuration_Load:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119                           
  1120                           ; 1 bytes @ 0x0
  1121  0070                     	ds	4
  1122  0074                     ?_ParallelLCD_WriteByte:	
  1123  0074                     ?_Configuration_WriteByte:	
  1124                           ; 0 bytes @ 0x4
  1125                           
  1126  0074                     ??_initialize:	
  1127                           ; 0 bytes @ 0x4
  1128                           
  1129  0074                     ?_Configuration_ReadByte:	
  1130                           ; 0 bytes @ 0x4
  1131                           
  1132  0074                     ?___bmul:	
  1133                           ; 1 bytes @ 0x4
  1134                           
  1135  0074                     ParallelLCD_WriteByte@r:	
  1136                           ; 1 bytes @ 0x4
  1137                           
  1138  0074                     Configuration_WriteByte@data:	
  1139                           ; 1 bytes @ 0x4
  1140                           
  1141  0074                     Configuration_ReadByte@memorySelect:	
  1142                           ; 1 bytes @ 0x4
  1143                           
  1144  0074                     ___bmul@multiplicand:	
  1145                           ; 1 bytes @ 0x4
  1146                           
  1147                           
  1148                           ; 1 bytes @ 0x4
  1149  0074                     	ds	1
  1150  0075                     ??_ParallelLCD_WriteByte:	
  1151  0075                     ??_Configuration_ReadByte:	
  1152                           ; 0 bytes @ 0x5
  1153                           
  1154  0075                     ??_Configuration_WriteByte:	
  1155                           ; 0 bytes @ 0x5
  1156                           
  1157  0075                     ??___bmul:	
  1158                           ; 0 bytes @ 0x5
  1159                           
  1160  0075                     ParallelLCD_WriteByte@data:	
  1161                           ; 0 bytes @ 0x5
  1162                           
  1163  0075                     Configuration_WriteByte@address:	
  1164                           ; 1 bytes @ 0x5
  1165                           
  1166  0075                     Configuration_ReadByte@address:	
  1167                           ; 1 bytes @ 0x5
  1168                           
  1169                           
  1170                           ; 1 bytes @ 0x5
  1171  0075                     	ds	1
  1172  0076                     ??_ParallelLCD_Initialize:	
  1173  0076                     ??_ParallelLCD_WriteCharacter:	
  1174                           ; 0 bytes @ 0x6
  1175                           
  1176  0076                     ??_ParallelLCD_ClearDisplay:	
  1177                           ; 0 bytes @ 0x6
  1178                           
  1179                           
  1180                           	psect	cstackBANK0
  1181  0041                     __pcstackBANK0:	
  1182                           ; 0 bytes @ 0x6
  1183                           
  1184  0041                     ?_ParallelLCD_Initialize:	
  1185  0041                     ?_ParallelLCD_WriteCharacter:	
  1186                           ; 0 bytes @ 0x0
  1187                           
  1188  0041                     ?_ParallelLCD_WriteStringClearing:	
  1189                           ; 0 bytes @ 0x0
  1190                           
  1191  0041                     ??_ParallelLCD_ClearRow:	
  1192                           ; 0 bytes @ 0x0
  1193                           
  1194  0041                     ?_ParallelLCD_SetCgram:	
  1195                           ; 0 bytes @ 0x0
  1196                           
  1197  0041                     ??_Configuration_Save:	
  1198                           ; 0 bytes @ 0x0
  1199                           
  1200  0041                     ??_Configuration_Load:	
  1201                           ; 0 bytes @ 0x0
  1202                           
  1203  0041                     ParallelLCD_Initialize@configDisplay:	
  1204                           ; 0 bytes @ 0x0
  1205                           
  1206  0041                     ParallelLCD_WriteCharacter@character:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209  0041                     ___bmul@product:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0041                     ParallelLCD_WriteStringClearing@stringPtr:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0041                     ParallelLCD_SetCgram@bitmap:	
  1216                           ; 2 bytes @ 0x0
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0x0
  1220  0041                     	ds	1
  1221  0042                     ParallelLCD_Initialize@configCursor:	
  1222  0042                     ParallelLCD_WriteCharacter@position:	
  1223                           ; 1 bytes @ 0x1
  1224                           
  1225  0042                     ParallelLCD_ClearRow@rowSelect:	
  1226                           ; 1 bytes @ 0x1
  1227                           
  1228  0042                     ___bmul@multiplier:	
  1229                           ; 1 bytes @ 0x1
  1230                           
  1231                           
  1232                           ; 1 bytes @ 0x1
  1233  0042                     	ds	1
  1234  0043                     ?_ParallelLCD_WriteString:	
  1235  0043                     ??_ParallelLCD_WriteStringClearing:	
  1236                           ; 0 bytes @ 0x2
  1237                           
  1238  0043                     ??_ParallelLCD_SetCgram:	
  1239                           ; 0 bytes @ 0x2
  1240                           
  1241  0043                     ParallelLCD_Initialize@configEntryMode:	
  1242                           ; 0 bytes @ 0x2
  1243                           
  1244  0043                     ParallelLCD_ClearRow@i:	
  1245                           ; 1 bytes @ 0x2
  1246                           
  1247  0043                     Configuration_Save@returnCode:	
  1248                           ; 1 bytes @ 0x2
  1249                           
  1250  0043                     Configuration_Load@ptrConfig:	
  1251                           ; 1 bytes @ 0x2
  1252                           
  1253  0043                     ParallelLCD_WriteString@stringPtr:	
  1254                           ; 1 bytes @ 0x2
  1255                           
  1256                           
  1257                           ; 2 bytes @ 0x2
  1258  0043                     	ds	1
  1259  0044                     ParallelLCD_Initialize@configFunction:	
  1260  0044                     ParallelLCD_WriteStringClearing@position:	
  1261                           ; 1 bytes @ 0x3
  1262                           
  1263  0044                     ParallelLCD_SetCgram@charCode:	
  1264                           ; 1 bytes @ 0x3
  1265                           
  1266  0044                     Configuration_Save@ptrConfig:	
  1267                           ; 1 bytes @ 0x3
  1268                           
  1269  0044                     Configuration_Load@i:	
  1270                           ; 1 bytes @ 0x3
  1271                           
  1272                           
  1273                           ; 1 bytes @ 0x3
  1274  0044                     	ds	1
  1275  0045                     ??_ParallelLCD_WriteString:	
  1276  0045                     ParallelLCD_WriteStringClearing@i:	
  1277                           ; 0 bytes @ 0x4
  1278                           
  1279  0045                     ParallelLCD_SetCgram@i:	
  1280                           ; 1 bytes @ 0x4
  1281                           
  1282  0045                     Configuration_Save@i:	
  1283                           ; 1 bytes @ 0x4
  1284                           
  1285  0045                     Configuration_Load@config:	
  1286                           ; 1 bytes @ 0x4
  1287                           
  1288                           
  1289                           ; 1 bytes @ 0x4
  1290  0045                     	ds	1
  1291  0046                     ParallelLCD_WriteString@position:	
  1292  0046                     Configuration_Save@config:	
  1293                           ; 1 bytes @ 0x5
  1294                           
  1295                           
  1296                           ; 1 bytes @ 0x5
  1297  0046                     	ds	1
  1298  0047                     ??_main:	
  1299                           
  1300                           ; 0 bytes @ 0x6
  1301  0047                     	ds	4
  1302  004B                     main@valueString:	
  1303                           
  1304                           ; 6 bytes @ 0xA
  1305  004B                     	ds	6
  1306  0051                     main@isNonZero:	
  1307                           
  1308                           ; 1 bytes @ 0x10
  1309  0051                     	ds	1
  1310  0052                     main@tmpValue:	
  1311                           
  1312                           ; 2 bytes @ 0x11
  1313  0052                     	ds	2
  1314  0054                     main@chr:	
  1315                           
  1316                           ; 1 bytes @ 0x13
  1317  0054                     	ds	1
  1318  0055                     main@keyPressed:	
  1319                           
  1320                           ; 1 bytes @ 0x14
  1321  0055                     	ds	1
  1322  0056                     main@phase:	
  1323                           
  1324                           ; 1 bytes @ 0x15
  1325  0056                     	ds	1
  1326  0057                     main@returnCode:	
  1327                           
  1328                           ; 1 bytes @ 0x16
  1329  0057                     	ds	1
  1330  0058                     main@userId:	
  1331                           
  1332                           ; 1 bytes @ 0x17
  1333  0058                     	ds	1
  1334  0059                     main@portAState:	
  1335                           
  1336                           ; 1 bytes @ 0x18
  1337  0059                     	ds	1
  1338  005A                     main@i:	
  1339                           
  1340                           ; 1 bytes @ 0x19
  1341  005A                     	ds	1
  1342                           
  1343                           	psect	maintext
  1344  00AA                     __pmaintext:	
  1345 ;;
  1346 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1347 ;;
  1348 ;; *************** function _main *****************
  1349 ;; Defined at:
  1350 ;;		line 256 in file "src/main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  chr             1   19[BANK0 ] unsigned char 
  1355 ;;  i               1   25[BANK0 ] unsigned char 
  1356 ;;  userId          1   23[BANK0 ] unsigned char 
  1357 ;;  valueString     6   10[BANK0 ] unsigned char [6]
  1358 ;;  tmpValue        2   17[BANK0 ] unsigned int 
  1359 ;;  isNonZero       1   16[BANK0 ] enum E2778
  1360 ;;  returnCode      1   22[BANK0 ] enum E2863
  1361 ;;  portAState      1   24[BANK0 ] struct .
  1362 ;;  keyPressed      1   20[BANK0 ] struct .
  1363 ;;  phase           1   21[BANK0 ] unsigned char 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;		None               void
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : B1F/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1373 ;;      Params:         0       0       0       0       0       0
  1374 ;;      Locals:         0      16       0       0       0       0
  1375 ;;      Temps:          0       4       0       0       0       0
  1376 ;;      Totals:         0      20       0       0       0       0
  1377 ;;Total ram usage:       20 bytes
  1378 ;; Hardware stack levels required when called:    4
  1379 ;; This function calls:
  1380 ;;		_Configuration_Load
  1381 ;;		_Configuration_ReadByte
  1382 ;;		_Configuration_Save
  1383 ;;		_ParallelLCD_ClearDisplay
  1384 ;;		_ParallelLCD_ClearRow
  1385 ;;		_ParallelLCD_Initialize
  1386 ;;		_ParallelLCD_SetCgram
  1387 ;;		_ParallelLCD_WriteCharacter
  1388 ;;		_ParallelLCD_WriteString
  1389 ;;		_ParallelLCD_WriteStringClearing
  1390 ;;		___bmul
  1391 ;;		_initialize
  1392 ;; This function is called by:
  1393 ;;		Startup code after reset
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           
  1398                           ;psect for function _main
  1399  00AA                     _main:	
  1400                           
  1401                           ;main.c: 259: initialize( ) ;
  1402                           
  1403                           ;incstack = 0
  1404                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1405  00AA  3187  2793  3180   	fcall	_initialize
  1406                           
  1407                           ;main.c: 262: if( (~PORTA&0xE0) == 0xC0 )
  1408  00AD  0020               	movlb	0	; select bank0
  1409  00AE  090C               	comf	12,w	;volatile
  1410  00AF  00C7               	movwf	??_main
  1411  00B0  30E0               	movlw	224
  1412  00B1  0547               	andwf	??_main,w
  1413  00B2  3AC0               	xorlw	192
  1414  00B3  1D03               	skipz
  1415  00B4  28BA               	goto	l3309
  1416                           
  1417                           ;main.c: 263: machineState_ = STATE_INITIALIZE ;
  1418  00B5  3011               	movlw	17
  1419  00B6  00C7               	movwf	??_main
  1420  00B7  0847               	movf	??_main,w
  1421  00B8  00EA               	movwf	_machineState_
  1422  00B9  28BB               	goto	l3311
  1423  00BA                     l3309:	
  1424                           
  1425                           ;main.c: 264: else
  1426                           ;main.c: 265: machineState_ = STATE_BOOT ;
  1427  00BA  01EA               	clrf	_machineState_
  1428  00BB                     l3311:	
  1429                           
  1430                           ;main.c: 266: events_.output.changeState=1 ;
  1431  00BB  1463               	bsf	_events_+1,0
  1432                           
  1433                           ;main.c: 269: PR2 = 124 ;
  1434  00BC  307C               	movlw	124
  1435  00BD  009B               	movwf	27	;volatile
  1436                           
  1437                           ;main.c: 270: {CCPR4L=(PR2>>1);} ;
  1438  00BE  361B               	lsrf	27,w	;volatile
  1439  00BF  0026               	movlb	6	; select bank6
  1440  00C0  0098               	movwf	24	;volatile
  1441                           
  1442                           ;main.c: 273: T4CONbits.TMR4ON = 1 ;
  1443  00C1  0028               	movlb	8	; select bank8
  1444  00C2  1517               	bsf	23,2	;volatile
  1445                           
  1446                           ;main.c: 276: T1CONbits.TMR1ON = 1 ;
  1447  00C3  0020               	movlb	0	; select bank0
  1448  00C4  1418               	bsf	24,0	;volatile
  1449                           
  1450                           ;main.c: 279: for( Uint08_t phase = 0 ; phase < 0xE ; phase++ ) {
  1451  00C5  01D6               	clrf	main@phase
  1452  00C6  300E               	movlw	14
  1453  00C7  0256               	subwf	main@phase,w
  1454  00C8  1803               	btfsc	3,0
  1455  00C9  29AB               	goto	l256
  1456  00CA                     l255:	
  1457  00CA  0064               	clrwdt	;# 
  1458                           
  1459                           ;main.c: 283: TMR1 = 0x0000 ;
  1460  00CB  0020               	movlb	0	; select bank0
  1461  00CC  0196               	clrf	22	;volatile
  1462  00CD  0197               	clrf	23	;volatile
  1463                           
  1464                           ;main.c: 285: switch( phase ) {
  1465  00CE  2984               	goto	l3361
  1466  00CF                     l259:	
  1467                           ;main.c: 286: case 0x0:
  1468                           
  1469                           
  1470                           ;main.c: 287: case 0x2:
  1471                           ;main.c: 289: T2CONbits.TMR2ON = 1 ;
  1472  00CF  151C               	bsf	28,2	;volatile
  1473                           
  1474                           ;main.c: 290: break ;
  1475  00D0  299F               	goto	l267
  1476  00D1                     l262:	
  1477                           ;main.c: 292: case 0x1:
  1478                           
  1479                           
  1480                           ;main.c: 293: case 0xC:
  1481                           ;main.c: 295: T2CONbits.TMR2ON = 0 ;
  1482  00D1  111C               	bcf	28,2	;volatile
  1483                           
  1484                           ;main.c: 296: break ;
  1485  00D2  299F               	goto	l267
  1486  00D3                     l3329:	
  1487                           ;main.c: 298: case 0x3:
  1488                           
  1489                           
  1490                           ;main.c: 300: {
  1491                           ;main.c: 301: Uint08_t userId ;
  1492                           ;main.c: 302: userId = Configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1493  00D3  01F4               	clrf	Configuration_ReadByte@memorySelect
  1494  00D4  0AF4               	incf	Configuration_ReadByte@memorySelect,f
  1495  00D5  3000               	movlw	0
  1496  00D6  318D  2549  3180   	fcall	_Configuration_ReadByte
  1497  00D9  0020               	movlb	0	; select bank0
  1498  00DA  00C7               	movwf	??_main
  1499  00DB  0847               	movf	??_main,w
  1500  00DC  00D8               	movwf	main@userId
  1501                           
  1502                           ;main.c: 303: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1503  00DD  0858               	movf	main@userId,w
  1504  00DE  00C7               	movwf	??_main
  1505  00DF  3004               	movlw	4
  1506  00E0                     u2695:	
  1507  00E0  36C7               	lsrf	??_main,f
  1508  00E1  0B89               	decfsz	9,f
  1509  00E2  28E0               	goto	u2695
  1510  00E3  0847               	movf	??_main,w
  1511  00E4  3830               	iorlw	48
  1512  00E5  00C8               	movwf	??_main+1
  1513  00E6  0848               	movf	??_main+1,w
  1514  00E7  0022               	movlb	2	; select bank2
  1515  00E8  00A1               	movwf	(_informationValueBuffer^(0+256)+1)
  1516                           
  1517                           ;main.c: 304: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1518  00E9  0020               	movlb	0	; select bank0
  1519  00EA  0858               	movf	main@userId,w
  1520  00EB  390F               	andlw	15
  1521  00EC  3830               	iorlw	48
  1522  00ED  00C7               	movwf	??_main
  1523  00EE  0847               	movf	??_main,w
  1524  00EF  0022               	movlb	2	; select bank2
  1525  00F0  00A2               	movwf	(_informationValueBuffer^(0+256)+2)
  1526                           
  1527                           ;main.c: 305: userId = Configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1528  00F1  01F4               	clrf	Configuration_ReadByte@memorySelect
  1529  00F2  0AF4               	incf	Configuration_ReadByte@memorySelect,f
  1530  00F3  3001               	movlw	1
  1531  00F4  318D  2549  3180   	fcall	_Configuration_ReadByte
  1532  00F7  0020               	movlb	0	; select bank0
  1533  00F8  00C7               	movwf	??_main
  1534  00F9  0847               	movf	??_main,w
  1535  00FA  00D8               	movwf	main@userId
  1536                           
  1537                           ;main.c: 306: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1538  00FB  0858               	movf	main@userId,w
  1539  00FC  00C7               	movwf	??_main
  1540  00FD  3004               	movlw	4
  1541  00FE                     u2705:	
  1542  00FE  36C7               	lsrf	??_main,f
  1543  00FF  0B89               	decfsz	9,f
  1544  0100  28FE               	goto	u2705
  1545  0101  0847               	movf	??_main,w
  1546  0102  3830               	iorlw	48
  1547  0103  00C8               	movwf	??_main+1
  1548  0104  0848               	movf	??_main+1,w
  1549  0105  0022               	movlb	2	; select bank2
  1550  0106  00A4               	movwf	(_informationValueBuffer^(0+256)+4)
  1551                           
  1552                           ;main.c: 307: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1553  0107  0020               	movlb	0	; select bank0
  1554  0108  0858               	movf	main@userId,w
  1555  0109  390F               	andlw	15
  1556  010A  3830               	iorlw	48
  1557  010B  00C7               	movwf	??_main
  1558  010C  0847               	movf	??_main,w
  1559  010D  0022               	movlb	2	; select bank2
  1560  010E  00A5               	movwf	(_informationValueBuffer^(0+256)+5)
  1561                           
  1562                           ;main.c: 308: }
  1563                           ;main.c: 309: break ;
  1564  010F  299F               	goto	l267
  1565  0110                     l3339:	
  1566                           ;main.c: 311: case 0x4:
  1567                           
  1568                           
  1569                           ;main.c: 313: ParallelLCD_Initialize(
  1570                           ;main.c: 314: PARALLEL_LCD_CONFIG_8BIT_MODE | PARALLEL_LCD_CONFIG_2LINE_MODE ,
  1571                           ;main.c: 315: PARALLEL_LCD_CONFIG_DISPLAY_ON ,
  1572                           ;main.c: 316: PARALLEL_LCD_CONFIG_CURSOR_NONE ,
  1573                           ;main.c: 317: PARALLEL_LCD_CONFIG_INCREMENTAL
  1574                           ;main.c: 318: ) ;
  1575  0110  3004               	movlw	4
  1576  0111  0020               	movlb	0	; select bank0
  1577  0112  00C7               	movwf	??_main
  1578  0113  0847               	movf	??_main,w
  1579  0114  00C1               	movwf	ParallelLCD_Initialize@configDisplay
  1580  0115  01C2               	clrf	ParallelLCD_Initialize@configCursor
  1581  0116  3002               	movlw	2
  1582  0117  00C8               	movwf	??_main+1
  1583  0118  0848               	movf	??_main+1,w
  1584  0119  00C3               	movwf	ParallelLCD_Initialize@configEntryMode
  1585  011A  3018               	movlw	24
  1586  011B  318D  25CF  3180   	fcall	_ParallelLCD_Initialize
  1587                           
  1588                           ;main.c: 321: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          .METRONOME.MAIN_TILE ) ;
  1589  011E  3000               	movlw	low (_MESSAGE| (0+32768))
  1590  011F  0084               	movwf	4
  1591  0120  3088               	movlw	high (_MESSAGE| (0+32768))
  1592  0121  0085               	movwf	5
  1593  0122  3F00               	moviw [0]fsr0
  1594  0123  0020               	movlb	0	; select bank0
  1595  0124  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1596  0125  3F01               	moviw [1]fsr0
  1597  0126  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1598  0127  3080               	movlw	128
  1599  0128  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  1600                           
  1601                           ;main.c: 322: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , MESSAGE
      +                          _INFORMATION[ INFORMATION_ITEM_VERSION ] ) ;
  1602  012B  0020               	movlb	0	; select bank0
  1603  012C  0820               	movf	_MESSAGE_INFORMATION,w
  1604  012D  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1605  012E  0821               	movf	_MESSAGE_INFORMATION+1,w
  1606  012F  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1607  0130  30C0               	movlw	192
  1608  0131  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  1609                           
  1610                           ;main.c: 323: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xA , &informationVal
      +                          ueBuffer[ INFORMATION_ITEM_VERSION ] ) ;
  1611  0134  3020               	movlw	low _informationValueBuffer
  1612  0135  0020               	movlb	0	; select bank0
  1613  0136  00C3               	movwf	ParallelLCD_WriteString@stringPtr
  1614  0137  3001               	movlw	high _informationValueBuffer
  1615  0138  00C4               	movwf	ParallelLCD_WriteString@stringPtr+1
  1616  0139  30CA               	movlw	202
  1617  013A  318D  25AF  3180   	fcall	_ParallelLCD_WriteString
  1618  013D                     l3347:	
  1619                           ;main.c: 325: case 0x5:
  1620                           
  1621                           
  1622                           ;main.c: 326: valueInfoBeatCount_.valuePtr = &configration_.beatCount ;
  1623  013D  302C               	movlw	(low ((_configration_| 0+4)))& (0+255)
  1624  013E  0020               	movlb	0	; select bank0
  1625  013F  00C7               	movwf	??_main
  1626  0140  0847               	movf	??_main,w
  1627  0141  0021               	movlb	1	; select bank1
  1628  0142  00A6               	movwf	_valueInfoBeatCount_^(0+128)
  1629                           
  1630                           ;main.c: 327: valueInfoDurationClick_.valuePtr = &configration_.duration.click ;
  1631  0143  302D               	movlw	(low ((_configration_| 0+5)))& (0+255)
  1632  0144  0020               	movlb	0	; select bank0
  1633  0145  00C7               	movwf	??_main
  1634  0146  0847               	movf	??_main,w
  1635  0147  0021               	movlb	1	; select bank1
  1636  0148  00AD               	movwf	_valueInfoDurationClick_^(0+128)
  1637                           
  1638                           ;main.c: 328: valueInfoDurationKey_.valuePtr = &configration_.duration.key ;
  1639  0149  302E               	movlw	(low ((_configration_| 0+6)))& (0+255)
  1640  014A  0020               	movlb	0	; select bank0
  1641  014B  00C7               	movwf	??_main
  1642  014C  0847               	movf	??_main,w
  1643  014D  0021               	movlb	1	; select bank1
  1644  014E  00B4               	movwf	_valueInfoDurationKey_^(0+128)
  1645                           
  1646                           ;main.c: 329: valueInfoPulseWidth_.valuePtr = &configration_.pulseWidth ;
  1647  014F  3032               	movlw	(low ((_configration_| 0+10)))& (0+255)
  1648  0150  0020               	movlb	0	; select bank0
  1649  0151  00C7               	movwf	??_main
  1650  0152  0847               	movf	??_main,w
  1651  0153  0021               	movlb	1	; select bank1
  1652  0154  00BB               	movwf	_valueInfoPulseWidth_^(0+128)
  1653                           
  1654                           ;main.c: 330: valueInfoOscillatorTune_.valuePtr = ( Uint08_t* ) & configration_.oscillat
      +                          orTune ;
  1655  0155  3033               	movlw	(low ((_configration_| 0+11)))& (0+255)
  1656  0156  0020               	movlb	0	; select bank0
  1657  0157  00C7               	movwf	??_main
  1658  0158  0847               	movf	??_main,w
  1659  0159  0022               	movlb	2	; select bank2
  1660  015A  00D8               	movwf	_valueInfoOscillatorTune_^(0+256)
  1661                           
  1662                           ;main.c: 331: break ;
  1663  015B  299F               	goto	l267
  1664  015C                     l3357:	
  1665                           ;main.c: 333: case 0x6:
  1666                           
  1667                           
  1668                           ;main.c: 335: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1669  015C  3034               	movlw	low ((_BITMAP| (0+32768)+8))
  1670  015D  0020               	movlb	0	; select bank0
  1671  015E  00C1               	movwf	ParallelLCD_SetCgram@bitmap
  1672  015F  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1673  0160  00C2               	movwf	ParallelLCD_SetCgram@bitmap+1
  1674  0161  3025               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1675  0162  0084               	movwf	4
  1676  0163  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1677  0164  0085               	movwf	5
  1678  0165  0800               	movf	0,w	;code access
  1679  0166  318E  2611  3180   	fcall	_ParallelLCD_SetCgram
  1680                           
  1681                           ;main.c: 336: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1682  0169  303C               	movlw	low ((_BITMAP| (0+32768)+16))
  1683  016A  0020               	movlb	0	; select bank0
  1684  016B  00C1               	movwf	ParallelLCD_SetCgram@bitmap
  1685  016C  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1686  016D  00C2               	movwf	ParallelLCD_SetCgram@bitmap+1
  1687  016E  3026               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1688  016F  0084               	movwf	4
  1689  0170  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1690  0171  0085               	movwf	5
  1691  0172  0800               	movf	0,w	;code access
  1692  0173  318E  2611  3180   	fcall	_ParallelLCD_SetCgram
  1693                           
  1694                           ;main.c: 337: ParallelLCD_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1695  0176  302C               	movlw	low (_BITMAP| (0+32768))
  1696  0177  0020               	movlb	0	; select bank0
  1697  0178  00C1               	movwf	ParallelLCD_SetCgram@bitmap
  1698  0179  3088               	movlw	high (_BITMAP| (0+32768))
  1699  017A  00C2               	movwf	ParallelLCD_SetCgram@bitmap+1
  1700  017B  3024               	movlw	low (_CHAR_CODE| (0+32768))
  1701  017C  0084               	movwf	4
  1702  017D  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1703  017E  0085               	movwf	5
  1704  017F  0800               	movf	0,w	;code access
  1705  0180  318E  2611  3180   	fcall	_ParallelLCD_SetCgram
  1706                           
  1707                           ;main.c: 340: }
  1708                           
  1709                           ;main.c: 338: break ;
  1710  0183  299F               	goto	l267
  1711  0184                     l3361:	
  1712  0184  0020               	movlb	0	; select bank0
  1713  0185  0856               	movf	main@phase,w
  1714                           
  1715                           ; Switch size 1, requested type "space"
  1716                           ; Number of cases is 8, Range of values is 0 to 12
  1717                           ; switch strategies available:
  1718                           ; Name         Instructions Cycles
  1719                           ; simple_byte           25    13 (average)
  1720                           ; direct_byte           32     6 (fixed)
  1721                           ; jumptable            260     6 (fixed)
  1722                           ;	Chosen strategy is simple_byte
  1723  0186  3A00               	xorlw	0	; case 0
  1724  0187  1903               	skipnz
  1725  0188  28CF               	goto	l259
  1726  0189  3A01               	xorlw	1	; case 1
  1727  018A  1903               	skipnz
  1728  018B  28D1               	goto	l262
  1729  018C  3A03               	xorlw	3	; case 2
  1730  018D  1903               	skipnz
  1731  018E  28CF               	goto	l259
  1732  018F  3A01               	xorlw	1	; case 3
  1733  0190  1903               	skipnz
  1734  0191  28D3               	goto	l3329
  1735  0192  3A07               	xorlw	7	; case 4
  1736  0193  1903               	skipnz
  1737  0194  2910               	goto	l3339
  1738  0195  3A01               	xorlw	1	; case 5
  1739  0196  1903               	skipnz
  1740  0197  293D               	goto	l3347
  1741  0198  3A03               	xorlw	3	; case 6
  1742  0199  1903               	skipnz
  1743  019A  295C               	goto	l3357
  1744  019B  3A0A               	xorlw	10	; case 12
  1745  019C  1903               	skipnz
  1746  019D  28D1               	goto	l262
  1747  019E  299F               	goto	l267
  1748  019F                     l267:	
  1749                           ;main.c: 342: while( !PIR1bits.TMR1IF ) ;
  1750                           
  1751  019F  0020               	movlb	0	; select bank0
  1752  01A0  1C11               	btfss	17,0	;volatile
  1753  01A1  299F               	goto	l267
  1754                           
  1755                           ;main.c: 343: PIR1bits.TMR1IF = 0 ;
  1756  01A2  1011               	bcf	17,0	;volatile
  1757  01A3  3001               	movlw	1
  1758  01A4  00C7               	movwf	??_main
  1759  01A5  0847               	movf	??_main,w
  1760  01A6  07D6               	addwf	main@phase,f
  1761  01A7  300E               	movlw	14
  1762  01A8  0256               	subwf	main@phase,w
  1763  01A9  1C03               	skipc
  1764  01AA  28CA               	goto	l255
  1765  01AB                     l256:	
  1766                           
  1767                           ;main.c: 345: }
  1768                           ;main.c: 349: INTCONbits.PEIE = 1 ;
  1769  01AB  170B               	bsf	11,6	;volatile
  1770                           
  1771                           ;main.c: 350: PIR3bits.TMR6IF = 0 ;
  1772  01AC  1193               	bcf	19,3	;volatile
  1773                           
  1774                           ;main.c: 351: PIE3bits.TMR6IE = 1 ;
  1775  01AD  0021               	movlb	1	; select bank1
  1776  01AE  1593               	bsf	19,3	;volatile
  1777                           
  1778                           ;main.c: 352: T6CONbits.TMR6ON = 1 ;
  1779  01AF  0028               	movlb	8	; select bank8
  1780  01B0  151E               	bsf	30,2	;volatile
  1781  01B1                     l270:	
  1782                           ;main.c: 355: for( ; ; ) {
  1783                           
  1784  01B1  0064               	clrwdt	;# 
  1785                           
  1786                           ;main.c: 361: static UniPortAState prevPortAState = { 0x00 } ;
  1787                           ;main.c: 362: UniPortAState portAState ;
  1788                           ;main.c: 363: UniPortAState keyPressed ;
  1789                           ;main.c: 365: portAState.byte = sampledPortAState_.byte ;
  1790  01B2  0020               	movlb	0	; select bank0
  1791  01B3  086B               	movf	_sampledPortAState_,w
  1792  01B4  00C7               	movwf	??_main
  1793  01B5  0847               	movf	??_main,w
  1794  01B6  00D9               	movwf	main@portAState
  1795                           
  1796                           ;main.c: 367: keyPressed.byte = ( portAState.byte ^ prevPortAState.byte ) & portAState.b
      +                          yte ;
  1797  01B7  0859               	movf	main@portAState,w
  1798  01B8  066D               	xorwf	main@prevPortAState,w
  1799  01B9  0559               	andwf	main@portAState,w
  1800  01BA  00C7               	movwf	??_main
  1801  01BB  0847               	movf	??_main,w
  1802  01BC  00D5               	movwf	main@keyPressed
  1803                           
  1804                           ;main.c: 368: prevPortAState.byte = portAState.byte ;
  1805  01BD  0859               	movf	main@portAState,w
  1806  01BE  00C7               	movwf	??_main
  1807  01BF  0847               	movf	??_main,w
  1808  01C0  00ED               	movwf	main@prevPortAState
  1809                           
  1810                           ;main.c: 370: if( keyPressed.keyMenu ) {
  1811  01C1  1AD5               	btfsc	main@keyPressed,5
  1812                           
  1813                           ;main.c: 371: events_.input.keyPressMenu=1 ;
  1814  01C2  1562               	bsf	_events_,2
  1815                           
  1816                           ;main.c: 372: }
  1817                           ;main.c: 374: if( keyPressed.keyUp ) {
  1818  01C3  1FD5               	btfss	main@keyPressed,7
  1819  01C4  29CA               	goto	l274
  1820                           
  1821                           ;main.c: 375: if( portAState.keyDown )
  1822  01C5  1F59               	btfss	main@portAState,6
  1823  01C6  29C9               	goto	l275
  1824                           
  1825                           ;main.c: 376: events_.input.keyPressUpDown=1 ;
  1826  01C7  15E2               	bsf	_events_,3
  1827  01C8  29CA               	goto	l274
  1828  01C9                     l275:	
  1829                           
  1830                           ;main.c: 377: else
  1831                           ;main.c: 378: events_.input.keyPressUp=1 ;
  1832  01C9  1462               	bsf	_events_,0
  1833  01CA                     l274:	
  1834                           
  1835                           ;main.c: 379: }
  1836                           ;main.c: 381: if( keyPressed.keyDown ) {
  1837  01CA  1F55               	btfss	main@keyPressed,6
  1838  01CB  29D1               	goto	l277
  1839                           
  1840                           ;main.c: 382: if( portAState.keyUp )
  1841  01CC  1FD9               	btfss	main@portAState,7
  1842  01CD  29D0               	goto	l278
  1843                           
  1844                           ;main.c: 383: events_.input.keyPressUpDown=1 ;
  1845  01CE  15E2               	bsf	_events_,3
  1846  01CF  29D1               	goto	l277
  1847  01D0                     l278:	
  1848                           
  1849                           ;main.c: 384: else
  1850                           ;main.c: 385: events_.input.keyPressDown=1 ;
  1851  01D0  14E2               	bsf	_events_,1
  1852  01D1                     l277:	
  1853                           
  1854                           ;main.c: 386: }
  1855                           ;main.c: 388: if( (events_.input.keyPressHeldUp&&!(events_.input.keyPressHeldUp=0)) )
  1856  01D1  1E62               	btfss	_events_,4
  1857  01D2  29D5               	goto	l280
  1858  01D3  1262               	bcf	_events_,4
  1859                           
  1860                           ;main.c: 389: events_.input.keyPressUp=1 ;
  1861  01D4  1462               	bsf	_events_,0
  1862  01D5                     l280:	
  1863                           
  1864                           ;main.c: 391: if( (events_.input.keyPressHeldDown&&!(events_.input.keyPressHeldDown=0)) 
      +                          )
  1865  01D5  1EE2               	btfss	_events_,5
  1866  01D6  29D9               	goto	l3389
  1867  01D7  12E2               	bcf	_events_,5
  1868                           
  1869                           ;main.c: 392: events_.input.keyPressDown=1 ;
  1870  01D8  14E2               	bsf	_events_,1
  1871  01D9                     l3389:	
  1872                           
  1873                           ;main.c: 394: if( events_.input.byte ) {
  1874  01D9  0862               	movf	_events_,w
  1875  01DA  1D03               	btfss	3,2
  1876                           
  1877                           ;main.c: 395: events_.output.soundOnKey=1 ;
  1878  01DB  1663               	bsf	_events_+1,4
  1879                           
  1880                           ;main.c: 396: }
  1881                           ;main.c: 399: if( (events_.input.keyPressUpDown&&!(events_.input.keyPressUpDown=0)) ) {
  1882  01DC  1DE2               	btfss	_events_,3
  1883  01DD  29EA               	goto	l283
  1884  01DE  11E2               	bcf	_events_,3
  1885                           
  1886                           ;main.c: 400: if( machineState_ == STATE_METRONOME ) {
  1887  01DF  036A               	decf	_machineState_,w
  1888  01E0  1D03               	btfss	3,2
  1889  01E1  29EA               	goto	l283
  1890                           
  1891                           ;main.c: 401: {if(isMute_){isMute_=0;}else{isMute_=1;}} ;
  1892  01E2  0868               	movf	_isMute_,w
  1893  01E3  1903               	btfsc	3,2
  1894  01E4  29E7               	goto	l285
  1895  01E5  01E8               	clrf	_isMute_
  1896  01E6  29E9               	goto	l286
  1897  01E7                     l285:	
  1898  01E7  01E8               	clrf	_isMute_
  1899  01E8  0AE8               	incf	_isMute_,f
  1900  01E9                     l286:	
  1901                           
  1902                           ;main.c: 402: events_.output.changeMessage=1 ;
  1903  01E9  14E3               	bsf	_events_+1,1
  1904  01EA                     l283:	
  1905                           
  1906                           ;main.c: 403: }
  1907                           ;main.c: 404: }
  1908                           ;main.c: 407: if( (events_.input.keyPressMenu&&!(events_.input.keyPressMenu=0)) ) {
  1909  01EA  1D62               	btfss	_events_,2
  1910  01EB  2A8B               	goto	l3507
  1911  01EC  1162               	bcf	_events_,2
  1912                           
  1913                           ;main.c: 408: events_.output.changeState=1 ;
  1914  01ED  1463               	bsf	_events_+1,0
  1915                           
  1916                           ;main.c: 410: switch( machineState_ ) {
  1917  01EE  2A7E               	goto	l3505
  1918  01EF                     l3403:	
  1919                           ;main.c: 412: case STATE_METRONOME:
  1920                           
  1921                           
  1922                           ;main.c: 413: machineState_ = STATE_MENU_MAIN ;
  1923  01EF  3002               	movlw	2
  1924  01F0  00C7               	movwf	??_main
  1925  01F1  0847               	movf	??_main,w
  1926  01F2  00EA               	movwf	_machineState_
  1927                           
  1928                           ;main.c: 414: menuInfoMain_.select = 0 ;
  1929  01F3  0021               	movlb	1	; select bank1
  1930  01F4  01E8               	clrf	_menuInfoMain_^(0+128)
  1931                           
  1932                           ;main.c: 415: menuInfoMain_.cursorPosition = 0 ;
  1933  01F5  01E9               	clrf	(_menuInfoMain_^(0+128)+1)
  1934                           
  1935                           ;main.c: 416: break ;
  1936  01F6  2A8B               	goto	l3507
  1937  01F7                     l3409:	
  1938                           ;main.c: 420: case MENU_ITEM_MAIN_BEAT_COUNT:
  1939                           
  1940                           ;main.c: 419: switch( menuInfoMain_.select ) {
  1941                           
  1942                           ;main.c: 418: case STATE_MENU_MAIN:
  1943                           
  1944                           
  1945                           ;main.c: 421: machineState_ = STATE_ADJUST_BEAT_COUNT ;
  1946  01F7  3005               	movlw	5
  1947  01F8  2A68               	goto	L41
  1948  01F9                     l3411:	
  1949                           ;main.c: 424: case MENU_ITEM_MAIN_TONE_MENU:
  1950                           
  1951                           ;main.c: 422: break ;
  1952                           
  1953                           
  1954                           ;main.c: 425: machineState_ = STATE_MENU_TONE ;
  1955  01F9  3003               	movlw	3
  1956  01FA  0020               	movlb	0	; select bank0
  1957  01FB  00C7               	movwf	??_main
  1958  01FC  0847               	movf	??_main,w
  1959  01FD  00EA               	movwf	_machineState_
  1960                           
  1961                           ;main.c: 426: menuInfoTone_.select = 0 ;
  1962  01FE  01BB               	clrf	_menuInfoTone_
  1963                           
  1964                           ;main.c: 427: menuInfoTone_.cursorPosition = 0 ;
  1965  01FF  01BC               	clrf	_menuInfoTone_+1
  1966                           
  1967                           ;main.c: 428: break ;
  1968  0200  2A8B               	goto	l3507
  1969  0201                     l3417:	
  1970                           ;main.c: 430: case MENU_ITEM_MAIN_ADJUST_DURATION:
  1971                           
  1972                           
  1973                           ;main.c: 431: machineState_ = STATE_MENU_DURATION ;
  1974  0201  3004               	movlw	4
  1975  0202  0020               	movlb	0	; select bank0
  1976  0203  00C7               	movwf	??_main
  1977  0204  0847               	movf	??_main,w
  1978  0205  00EA               	movwf	_machineState_
  1979                           
  1980                           ;main.c: 432: menuInfoDuration_.select = 0 ;
  1981  0206  0021               	movlb	1	; select bank1
  1982  0207  01E2               	clrf	_menuInfoDuration_^(0+128)
  1983                           
  1984                           ;main.c: 433: menuInfoDuration_.cursorPosition = 0 ;
  1985  0208  01E3               	clrf	(_menuInfoDuration_^(0+128)+1)
  1986                           
  1987                           ;main.c: 434: break ;
  1988  0209  2A8B               	goto	l3507
  1989  020A                     l3423:	
  1990                           ;main.c: 436: case MENU_ITEM_MAIN_PULSE_WIDTH:
  1991                           
  1992                           
  1993                           ;main.c: 437: machineState_ = STATE_ADJUST_PULSE_WIDTH ;
  1994  020A  3008               	movlw	8
  1995  020B  2A68               	goto	L41
  1996  020C                     l3425:	
  1997                           ;main.c: 440: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  1998                           
  1999                           ;main.c: 438: break ;
  2000                           
  2001                           
  2002                           ;main.c: 441: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  2003  020C  300A               	movlw	10
  2004  020D  2A68               	goto	L41
  2005  020E                     l3427:	
  2006                           ;main.c: 444: case MENU_ITEM_MAIN_INFORMATION:
  2007                           
  2008                           ;main.c: 442: break ;
  2009                           
  2010                           
  2011                           ;main.c: 445: machineState_ = STATE_INFORMATION ;
  2012  020E  300B               	movlw	11
  2013  020F  2A68               	goto	L41
  2014  0210                     l3429:	
  2015                           ;main.c: 448: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  2016                           
  2017                           ;main.c: 446: break ;
  2018                           
  2019                           
  2020                           ;main.c: 449: machineState_ = STATE_CONFIRM_LOAD ;
  2021  0210  300E               	movlw	14
  2022  0211  0020               	movlb	0	; select bank0
  2023  0212  00C7               	movwf	??_main
  2024  0213  0847               	movf	??_main,w
  2025  0214  00EA               	movwf	_machineState_
  2026                           
  2027                           ;main.c: 450: menuInfoConfirmLoad_.select = 0 ;
  2028  0215  0021               	movlb	1	; select bank1
  2029  0216  01D0               	clrf	_menuInfoConfirmLoad_^(0+128)
  2030                           
  2031                           ;main.c: 451: menuInfoConfirmLoad_.cursorPosition = 0 ;
  2032  0217  01D1               	clrf	(_menuInfoConfirmLoad_^(0+128)+1)
  2033                           
  2034                           ;main.c: 452: break ;
  2035  0218  2A8B               	goto	l3507
  2036  0219                     l3435:	
  2037                           ;main.c: 454: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  2038                           
  2039                           
  2040                           ;main.c: 455: machineState_ = STATE_CONFIRM_SAVE ;
  2041  0219  300C               	movlw	12
  2042  021A  0020               	movlb	0	; select bank0
  2043  021B  00C7               	movwf	??_main
  2044  021C  0847               	movf	??_main,w
  2045  021D  00EA               	movwf	_machineState_
  2046                           
  2047                           ;main.c: 456: menuInfoConfirmSave_.select = 0 ;
  2048  021E  0021               	movlb	1	; select bank1
  2049  021F  01DC               	clrf	_menuInfoConfirmSave_^(0+128)
  2050                           
  2051                           ;main.c: 457: menuInfoConfirmSave_.cursorPosition = 0 ;
  2052  0220  01DD               	clrf	(_menuInfoConfirmSave_^(0+128)+1)
  2053                           
  2054                           ;main.c: 458: break ;
  2055  0221  2A8B               	goto	l3507
  2056  0222                     l3441:	
  2057                           ;main.c: 460: case MENU_ITEM_MAIN_RESET:
  2058                           
  2059                           
  2060                           ;main.c: 461: machineState_ = STATE_CONFIRM_RESET ;
  2061  0222  3010               	movlw	16
  2062  0223  0020               	movlb	0	; select bank0
  2063  0224  00C7               	movwf	??_main
  2064  0225  0847               	movf	??_main,w
  2065  0226  00EA               	movwf	_machineState_
  2066                           
  2067                           ;main.c: 462: menuInfoConfirmReset_.select = 0 ;
  2068  0227  0021               	movlb	1	; select bank1
  2069  0228  01D6               	clrf	_menuInfoConfirmReset_^(0+128)
  2070                           
  2071                           ;main.c: 463: menuInfoConfirmReset_.cursorPosition = 0 ;
  2072  0229  01D7               	clrf	(_menuInfoConfirmReset_^(0+128)+1)
  2073                           
  2074                           ;main.c: 464: break ;
  2075  022A  2A8B               	goto	l3507
  2076  022B                     l304:	
  2077                           ;main.c: 467: default:
  2078                           
  2079                           ;main.c: 466: case MENU_ITEM_MAIN_RETURN:
  2080                           
  2081                           
  2082                           ;main.c: 468: machineState_ = STATE_METRONOME ;
  2083  022B  0020               	movlb	0	; select bank0
  2084  022C  01EA               	clrf	_machineState_
  2085  022D  0AEA               	incf	_machineState_,f
  2086                           
  2087                           ;main.c: 471: }
  2088                           
  2089                           ;main.c: 469: break ;
  2090  022E  2A8B               	goto	l3507
  2091  022F                     l3449:	
  2092  022F  0021               	movlb	1	; select bank1
  2093  0230  0868               	movf	_menuInfoMain_^(0+128),w
  2094                           
  2095                           ; Switch size 1, requested type "space"
  2096                           ; Number of cases is 10, Range of values is 0 to 9
  2097                           ; switch strategies available:
  2098                           ; Name         Instructions Cycles
  2099                           ; direct_byte           26     6 (fixed)
  2100                           ; simple_byte           31    16 (average)
  2101                           ; jumptable            260     6 (fixed)
  2102                           ;	Chosen strategy is direct_byte
  2103  0231  0084               	movwf	4
  2104  0232  300A               	movlw	10
  2105  0233  0204               	subwf	4,w
  2106  0234  1803               	skipnc
  2107  0235  2A2B               	goto	l304
  2108  0236  318A               	movlp	high S3979
  2109  0237  3504               	lslf	4,w
  2110  0238  3E20               	addlw	low S3979
  2111  0239  0082               	movwf	2
  2112                           
  2113                           ;main.c: 472: break ;
  2114  023A  2A8B               	goto	l3507
  2115  023B                     l3451:	
  2116                           ;main.c: 474: case STATE_MENU_TONE:
  2117                           
  2118                           
  2119                           ;main.c: 475: if( menuInfoTone_.select == MENU_ITEM_TONE_RETURN )
  2120  023B  0020               	movlb	0	; select bank0
  2121  023C  083B               	movf	_menuInfoTone_,w
  2122  023D  1903               	btfsc	3,2
  2123  023E  2A6A               	goto	l3485
  2124                           
  2125                           ;main.c: 477: else
  2126                           ;main.c: 478: machineState_ = STATE_ADJUST_TONE ;
  2127                           
  2128                           ;main.c: 476: machineState_ = STATE_MENU_MAIN ;
  2129  023F  3009               	movlw	9
  2130  0240  2A6D               	goto	L16
  2131  0241                     l3457:	
  2132                           ;main.c: 483: case MENU_ITEM_DURATION_ADJUST_CLICK:
  2133                           
  2134                           ;main.c: 482: switch( currentMenuInfoPtr_->select ) {
  2135                           
  2136                           ;main.c: 481: case STATE_MENU_DURATION:
  2137                           
  2138                           ;main.c: 479: break ;
  2139                           
  2140                           
  2141                           ;main.c: 484: machineState_ = STATE_ADJUST_DURATION_CLICK ;
  2142  0241  3006               	movlw	6
  2143  0242  2A6D               	goto	L16
  2144  0243                     l3459:	
  2145                           ;main.c: 487: case MENU_ITEM_DURATION_ADJUST_KEY:
  2146                           
  2147                           ;main.c: 485: break ;
  2148                           
  2149                           
  2150                           ;main.c: 488: machineState_ = STATE_ADJUST_DURATION_KEY ;
  2151  0243  3007               	movlw	7
  2152  0244  2A6D               	goto	L16
  2153  0245                     l3461:	
  2154                           ;main.c: 492: default:
  2155                           
  2156                           ;main.c: 491: case MENU_ITEM_DURATION_RETURN:
  2157                           
  2158                           ;main.c: 489: break ;
  2159                           
  2160  0245  2A6A               	goto	l3485
  2161  0246                     l3465:	
  2162                           ;main.c: 496: }
  2163                           
  2164                           ;main.c: 494: break ;
  2165                           
  2166                           ;main.c: 493: machineState_ = STATE_MENU_MAIN ;
  2167                           
  2168  0246  0867               	movf	_currentMenuInfoPtr_,w
  2169  0247  0086               	movwf	6
  2170  0248  0187               	clrf	7
  2171  0249  0801               	movf	1,w
  2172                           
  2173                           ; Switch size 1, requested type "space"
  2174                           ; Number of cases is 3, Range of values is 0 to 2
  2175                           ; switch strategies available:
  2176                           ; Name         Instructions Cycles
  2177                           ; simple_byte           10     6 (average)
  2178                           ; direct_byte           12     6 (fixed)
  2179                           ; jumptable            260     6 (fixed)
  2180                           ;	Chosen strategy is simple_byte
  2181  024A  3A00               	xorlw	0	; case 0
  2182  024B  1903               	skipnz
  2183  024C  2A45               	goto	l3461
  2184  024D  3A01               	xorlw	1	; case 1
  2185  024E  1903               	skipnz
  2186  024F  2A41               	goto	l3457
  2187  0250  3A03               	xorlw	3	; case 2
  2188  0251  1903               	skipnz
  2189  0252  2A43               	goto	l3459
  2190  0253  2A45               	goto	l3461
  2191                           
  2192                           ;main.c: 497: break ;
  2193  0254  2A8B               	goto	l3507
  2194  0255                     l3467:	
  2195                           ;main.c: 499: case STATE_CONFIRM_LOAD:
  2196                           
  2197                           
  2198                           ;main.c: 500: if( menuInfoConfirmLoad_.select )
  2199  0255  0021               	movlb	1	; select bank1
  2200  0256  0850               	movf	_menuInfoConfirmLoad_^(0+128),w
  2201  0257  1903               	btfsc	3,2
  2202  0258  2A67               	goto	l3483
  2203                           
  2204                           ;main.c: 501: machineState_ = STATE_LOAD ;
  2205  0259  300F               	movlw	15
  2206  025A  2A68               	goto	L41
  2207  025B                     l3473:	
  2208                           ;main.c: 506: case STATE_CONFIRM_SAVE:
  2209                           
  2210                           ;main.c: 504: break ;
  2211                           
  2212                           ;main.c: 502: else
  2213                           ;main.c: 503: machineState_ = STATE_MENU_MAIN ;
  2214                           
  2215                           
  2216                           ;main.c: 507: if( menuInfoConfirmSave_.select )
  2217  025B  0021               	movlb	1	; select bank1
  2218  025C  085C               	movf	_menuInfoConfirmSave_^(0+128),w
  2219  025D  1903               	btfsc	3,2
  2220  025E  2A67               	goto	l3483
  2221                           
  2222                           ;main.c: 508: machineState_ = STATE_SAVE ;
  2223  025F  300D               	movlw	13
  2224  0260  2A68               	goto	L41
  2225  0261                     l3479:	
  2226                           ;main.c: 513: case STATE_CONFIRM_RESET:
  2227                           
  2228                           ;main.c: 511: break ;
  2229                           
  2230                           ;main.c: 509: else
  2231                           ;main.c: 510: machineState_ = STATE_MENU_MAIN ;
  2232                           
  2233                           
  2234                           ;main.c: 514: if( menuInfoConfirmReset_.select )
  2235  0261  0021               	movlb	1	; select bank1
  2236  0262  0856               	movf	_menuInfoConfirmReset_^(0+128),w
  2237  0263  1903               	btfsc	3,2
  2238  0264  2A67               	goto	l3483
  2239                           
  2240                           ;main.c: 515: machineState_ = STATE_RESET ;
  2241  0265  3012               	movlw	18
  2242  0266  2A68               	goto	L41
  2243  0267                     l3483:	
  2244                           
  2245                           ;main.c: 516: else
  2246                           ;main.c: 517: machineState_ = STATE_MENU_MAIN ;
  2247  0267  3002               	movlw	2
  2248  0268                     L41:	
  2249  0268  0020               	movlb	0	; select bank0
  2250  0269  2A6D               	goto	L16
  2251  026A                     l3485:	
  2252                           ;main.c: 520: case STATE_ADJUST_BEAT_COUNT:
  2253                           
  2254                           ;main.c: 518: break ;
  2255                           
  2256                           
  2257                           ;main.c: 521: case STATE_ADJUST_PULSE_WIDTH:
  2258                           ;main.c: 522: case STATE_INFORMATION:
  2259                           ;main.c: 523: machineState_ = STATE_MENU_MAIN ;
  2260  026A  3002               	movlw	2
  2261  026B  2A6D               	goto	L16
  2262  026C                     l3487:	
  2263                           ;main.c: 526: case STATE_ADJUST_DURATION_CLICK:
  2264                           
  2265                           ;main.c: 524: break ;
  2266                           
  2267                           
  2268                           ;main.c: 527: case STATE_ADJUST_DURATION_KEY:
  2269                           ;main.c: 528: machineState_ = STATE_MENU_DURATION ;
  2270  026C  3004               	movlw	4
  2271  026D                     L16:	
  2272  026D  00C7               	movwf	??_main
  2273  026E  0847               	movf	??_main,w
  2274  026F  00EA               	movwf	_machineState_
  2275                           
  2276                           ;main.c: 529: break ;
  2277  0270  2A8B               	goto	l3507
  2278  0271                     l3489:	
  2279                           ;main.c: 531: case STATE_ADJUST_OSCILLATOR_TUNE:
  2280                           
  2281                           
  2282                           ;main.c: 532: machineState_ = STATE_MENU_MAIN ;
  2283  0271  3002               	movlw	2
  2284  0272  2A74               	goto	L35
  2285  0273                     l3493:	
  2286                           ;main.c: 536: case STATE_ADJUST_TONE:
  2287                           
  2288                           ;main.c: 534: break ;
  2289                           
  2290                           ;main.c: 533: events_.output.soundOff=1 ;
  2291                           
  2292                           
  2293                           ;main.c: 537: machineState_ = STATE_MENU_TONE ;
  2294  0273  3003               	movlw	3
  2295  0274                     L35:	
  2296  0274  00C7               	movwf	??_main
  2297  0275  0847               	movf	??_main,w
  2298  0276  00EA               	movwf	_machineState_
  2299                           
  2300                           ;main.c: 538: events_.output.soundOff=1 ;
  2301  0277  16E3               	bsf	_events_+1,5
  2302                           
  2303                           ;main.c: 539: break ;
  2304  0278  2A8B               	goto	l3507
  2305  0279                     l3497:	
  2306                           ;main.c: 541: case STATE_ERROR:
  2307                           
  2308                           
  2309                           ;main.c: 542: machineError_ = ERROR_NONE ;
  2310  0279  01E9               	clrf	_machineError_
  2311  027A                     l3499:	
  2312                           ;main.c: 543: case STATE_INITIALIZE:
  2313                           
  2314                           
  2315                           ;main.c: 544: machineState_ = STATE_METRONOME ;
  2316  027A  01EA               	clrf	_machineState_
  2317  027B  0AEA               	incf	_machineState_,f
  2318                           
  2319                           ;main.c: 545: events_.output.resetMetronome=1 ;
  2320  027C  1763               	bsf	_events_+1,6
  2321                           
  2322                           ;main.c: 548: }
  2323                           
  2324                           ;main.c: 546: break ;
  2325  027D  2A8B               	goto	l3507
  2326  027E                     l3505:	
  2327  027E  086A               	movf	_machineState_,w
  2328                           
  2329                           ; Switch size 1, requested type "space"
  2330                           ; Number of cases is 16, Range of values is 1 to 19
  2331                           ; switch strategies available:
  2332                           ; Name         Instructions Cycles
  2333                           ; direct_byte           47     9 (fixed)
  2334                           ; simple_byte           49    25 (average)
  2335                           ; jumptable            263     9 (fixed)
  2336                           ;	Chosen strategy is direct_byte
  2337  027F  3EFF               	addlw	-1
  2338  0280  1C03               	skipc
  2339  0281  2A8B               	goto	l3507
  2340  0282  0084               	movwf	4
  2341  0283  3013               	movlw	19
  2342  0284  0204               	subwf	4,w
  2343  0285  1803               	skipnc
  2344  0286  2A8B               	goto	l3507
  2345  0287  3189               	movlp	high S3981
  2346  0288  3504               	lslf	4,w
  2347  0289  3EB4               	addlw	low S3981
  2348  028A  0082               	movwf	2
  2349  028B                     l3507:	
  2350                           
  2351                           ;main.c: 550: }
  2352                           ;main.c: 553: if( machineError_ && machineState_ != STATE_ERROR ) {
  2353  028B  0020               	movlb	0	; select bank0
  2354  028C  0869               	movf	_machineError_,w
  2355  028D  1903               	btfsc	3,2
  2356  028E  2A99               	goto	l3517
  2357  028F  3013               	movlw	19
  2358  0290  066A               	xorwf	_machineState_,w
  2359  0291  1903               	btfsc	3,2
  2360  0292  2A99               	goto	l3517
  2361                           
  2362                           ;main.c: 554: machineState_ = STATE_ERROR ;
  2363  0293  3013               	movlw	19
  2364  0294  00C7               	movwf	??_main
  2365  0295  0847               	movf	??_main,w
  2366  0296  00EA               	movwf	_machineState_
  2367                           
  2368                           ;main.c: 555: events_.output.byte = 0x00 ;
  2369  0297  01E3               	clrf	_events_+1
  2370                           
  2371                           ;main.c: 556: events_.output.changeState=1 ;
  2372  0298  1463               	bsf	_events_+1,0
  2373  0299                     l3517:	
  2374                           
  2375                           ;main.c: 557: }
  2376                           ;main.c: 560: if( (events_.output.changeState&&!(events_.output.changeState=0)) ) {
  2377  0299  1C63               	btfss	_events_+1,0
  2378  029A  2B1D               	goto	l334
  2379  029B  1063               	bcf	_events_+1,0
  2380                           
  2381                           ;main.c: 562: events_.output.changeMessage=1 ;
  2382  029C  14E3               	bsf	_events_+1,1
  2383                           
  2384                           ;main.c: 564: switch( machineState_ ) {
  2385  029D  2B13               	goto	l3575
  2386  029E                     l3521:	
  2387                           ;main.c: 565: case STATE_METRONOME:
  2388                           
  2389                           
  2390                           ;main.c: 566: currentValueInfoPtr_ = &valueInfoTempo_ ;
  2391  029E  30C2               	movlw	low _valueInfoTempo_
  2392  029F  00E0               	movwf	_currentValueInfoPtr_
  2393  02A0  3000               	movlw	high _valueInfoTempo_
  2394  02A1  2ABD               	goto	L26
  2395  02A2                     l3523:	
  2396                           ;main.c: 569: case STATE_MENU_MAIN:
  2397                           
  2398                           ;main.c: 567: break ;
  2399                           
  2400                           
  2401                           ;main.c: 570: currentMenuInfoPtr_ = &menuInfoMain_ ;
  2402  02A2  30E8               	movlw	(low (_menuInfoMain_| 0))& (0+255)
  2403  02A3  2AEC               	goto	L23
  2404  02A4                     l3525:	
  2405                           ;main.c: 573: case STATE_MENU_TONE:
  2406                           
  2407                           ;main.c: 571: break ;
  2408                           
  2409                           
  2410                           ;main.c: 574: currentMenuInfoPtr_ = &menuInfoTone_ ;
  2411  02A4  303B               	movlw	(low (_menuInfoTone_| 0))& (0+255)
  2412  02A5  2AEC               	goto	L23
  2413  02A6                     l3527:	
  2414                           ;main.c: 577: case STATE_MENU_DURATION:
  2415                           
  2416                           ;main.c: 575: break ;
  2417                           
  2418                           
  2419                           ;main.c: 578: currentMenuInfoPtr_ = &menuInfoDuration_ ;
  2420  02A6  30E2               	movlw	(low (_menuInfoDuration_| 0))& (0+255)
  2421  02A7  2AEC               	goto	L23
  2422  02A8                     l3529:	
  2423                           ;main.c: 581: case STATE_CONFIRM_LOAD:
  2424                           
  2425                           ;main.c: 579: break ;
  2426                           
  2427                           
  2428                           ;main.c: 582: currentMenuInfoPtr_ = &menuInfoConfirmLoad_ ;
  2429  02A8  30D0               	movlw	(low (_menuInfoConfirmLoad_| 0))& (0+255)
  2430  02A9  2AEC               	goto	L23
  2431  02AA                     l3531:	
  2432                           ;main.c: 585: case STATE_CONFIRM_SAVE:
  2433                           
  2434                           ;main.c: 583: break ;
  2435                           
  2436                           
  2437                           ;main.c: 586: currentMenuInfoPtr_ = &menuInfoConfirmSave_ ;
  2438  02AA  30DC               	movlw	(low (_menuInfoConfirmSave_| 0))& (0+255)
  2439  02AB  2AEC               	goto	L23
  2440  02AC                     l3533:	
  2441                           ;main.c: 589: case STATE_CONFIRM_RESET:
  2442                           
  2443                           ;main.c: 587: break ;
  2444                           
  2445                           
  2446                           ;main.c: 590: currentMenuInfoPtr_ = &menuInfoConfirmReset_ ;
  2447  02AC  30D6               	movlw	(low (_menuInfoConfirmReset_| 0))& (0+255)
  2448  02AD  2AEC               	goto	L23
  2449  02AE                     l3535:	
  2450                           ;main.c: 593: case STATE_ADJUST_BEAT_COUNT:
  2451                           
  2452                           ;main.c: 591: break ;
  2453                           
  2454                           
  2455                           ;main.c: 594: currentValueInfoPtr_ = &valueInfoBeatCount_ ;
  2456  02AE  30A6               	movlw	low _valueInfoBeatCount_
  2457  02AF  00E0               	movwf	_currentValueInfoPtr_
  2458  02B0  3000               	movlw	high _valueInfoBeatCount_
  2459  02B1  2ABD               	goto	L26
  2460  02B2                     l3537:	
  2461                           ;main.c: 597: case STATE_ADJUST_DURATION_CLICK:
  2462                           
  2463                           ;main.c: 595: break ;
  2464                           
  2465                           
  2466                           ;main.c: 598: currentValueInfoPtr_ = &valueInfoDurationClick_ ;
  2467  02B2  30AD               	movlw	low _valueInfoDurationClick_
  2468  02B3  00E0               	movwf	_currentValueInfoPtr_
  2469  02B4  3000               	movlw	high _valueInfoDurationClick_
  2470  02B5  2ABD               	goto	L26
  2471  02B6                     l3539:	
  2472                           ;main.c: 601: case STATE_ADJUST_DURATION_KEY:
  2473                           
  2474                           ;main.c: 599: break ;
  2475                           
  2476                           
  2477                           ;main.c: 602: currentValueInfoPtr_ = &valueInfoDurationKey_ ;
  2478  02B6  30B4               	movlw	low _valueInfoDurationKey_
  2479  02B7  00E0               	movwf	_currentValueInfoPtr_
  2480  02B8  3000               	movlw	high _valueInfoDurationKey_
  2481  02B9  2ABD               	goto	L26
  2482  02BA                     l3541:	
  2483                           ;main.c: 605: case STATE_ADJUST_PULSE_WIDTH:
  2484                           
  2485                           ;main.c: 603: break ;
  2486                           
  2487                           
  2488                           ;main.c: 606: currentValueInfoPtr_ = &valueInfoPulseWidth_ ;
  2489  02BA  30BB               	movlw	low _valueInfoPulseWidth_
  2490  02BB  00E0               	movwf	_currentValueInfoPtr_
  2491  02BC  3000               	movlw	high _valueInfoPulseWidth_
  2492  02BD                     L26:	
  2493  02BD  00E1               	movwf	_currentValueInfoPtr_+1
  2494                           
  2495                           ;main.c: 607: break ;
  2496  02BE  2B1D               	goto	l334
  2497  02BF                     l3543:	
  2498                           ;main.c: 609: case STATE_ADJUST_OSCILLATOR_TUNE:
  2499                           
  2500                           
  2501                           ;main.c: 610: currentValueInfoPtr_ = &valueInfoOscillatorTune_ ;
  2502  02BF  3058               	movlw	low _valueInfoOscillatorTune_
  2503  02C0  00E0               	movwf	_currentValueInfoPtr_
  2504  02C1  3001               	movlw	high _valueInfoOscillatorTune_
  2505  02C2  00E1               	movwf	_currentValueInfoPtr_+1
  2506                           
  2507                           ;main.c: 611: PR2 = 141 ;
  2508  02C3  308D               	movlw	141
  2509  02C4  009B               	movwf	27	;volatile
  2510                           
  2511                           ;main.c: 612: {CCPR4L=(PR2>>1);} ;
  2512  02C5  361B               	lsrf	27,w	;volatile
  2513  02C6  2AE4               	goto	L36
  2514  02C7                     l3551:	
  2515                           ;main.c: 616: case STATE_ADJUST_TONE:
  2516                           
  2517                           ;main.c: 614: break ;
  2518                           
  2519                           ;main.c: 613: T2CONbits.TMR2ON = 1 ;
  2520                           
  2521                           
  2522                           ;main.c: 617: valueInfoTone_.valuePtr = &configration_.tone[ menuInfoTone_.select - MENU
      +                          _ITEM_TONE_ADJUST_TONE0 ] ;
  2523  02C7  083B               	movf	_menuInfoTone_,w
  2524  02C8  3EFF               	addlw	255
  2525  02C9  3E2F               	addlw	(low ((_configration_| 0+7)))& (0+255)
  2526  02CA  00C7               	movwf	??_main
  2527  02CB  0847               	movf	??_main,w
  2528  02CC  0021               	movlb	1	; select bank1
  2529  02CD  00C9               	movwf	_valueInfoTone_^(0+128)
  2530                           
  2531                           ;main.c: 618: currentValueInfoPtr_ = &valueInfoTone_ ;
  2532  02CE  30C9               	movlw	low _valueInfoTone_
  2533  02CF  0020               	movlb	0	; select bank0
  2534  02D0  00E0               	movwf	_currentValueInfoPtr_
  2535  02D1  3000               	movlw	high _valueInfoTone_
  2536  02D2  00E1               	movwf	_currentValueInfoPtr_+1
  2537                           
  2538                           ;main.c: 619: PR2 = *currentValueInfoPtr_->valuePtr ;
  2539  02D3  0860               	movf	_currentValueInfoPtr_,w
  2540  02D4  0086               	movwf	6
  2541  02D5  0861               	movf	_currentValueInfoPtr_+1,w
  2542  02D6  0087               	movwf	7
  2543  02D7  0801               	movf	1,w
  2544  02D8  0086               	movwf	6
  2545  02D9  0187               	clrf	7
  2546  02DA  0801               	movf	1,w
  2547  02DB  009B               	movwf	27	;volatile
  2548                           
  2549                           ;main.c: 620: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  2550  02DC  081B               	movf	27,w	;volatile
  2551  02DD  00C7               	movwf	??_main
  2552  02DE  0A32               	incf	_configration_+10,w
  2553  02DF  2AE1               	goto	u2924
  2554  02E0                     u2925:	
  2555  02E0  36C7               	lsrf	??_main,f
  2556  02E1                     u2924:	
  2557  02E1  0B89               	decfsz	9,f
  2558  02E2  2AE0               	goto	u2925
  2559  02E3  0847               	movf	??_main,w
  2560  02E4                     L36:	
  2561  02E4  0026               	movlb	6	; select bank6
  2562  02E5  0098               	movwf	24	;volatile
  2563                           
  2564                           ;main.c: 621: T2CONbits.TMR2ON = 1 ;
  2565  02E6  0020               	movlb	0	; select bank0
  2566  02E7  151C               	bsf	28,2	;volatile
  2567                           
  2568                           ;main.c: 622: break ;
  2569  02E8  2B1D               	goto	l334
  2570  02E9                     l3559:	
  2571                           ;main.c: 624: case STATE_INFORMATION:
  2572                           
  2573                           
  2574                           ;main.c: 625: menuInfoInformation_.select = 0 ;
  2575  02E9  01B5               	clrf	_menuInfoInformation_
  2576                           
  2577                           ;main.c: 626: menuInfoInformation_.cursorPosition = 0 ;
  2578  02EA  01B6               	clrf	_menuInfoInformation_+1
  2579                           
  2580                           ;main.c: 627: currentMenuInfoPtr_ = &menuInfoInformation_ ;
  2581  02EB  3035               	movlw	(low (_menuInfoInformation_| 0))& (0+255)
  2582  02EC                     L23:	
  2583  02EC  00C7               	movwf	??_main
  2584  02ED  0847               	movf	??_main,w
  2585  02EE  00E7               	movwf	_currentMenuInfoPtr_
  2586                           
  2587                           ;main.c: 628: break ;
  2588  02EF  2B1D               	goto	l334
  2589  02F0                     l354:	
  2590                           ;main.c: 630: case STATE_BOOT:
  2591                           
  2592                           
  2593                           ;main.c: 631: case STATE_INITIALIZE:
  2594                           ;main.c: 632: case STATE_LOAD:
  2595                           ;main.c: 633: case STATE_SAVE:
  2596                           ;main.c: 634: events_.output.accessEeprom=1 ;
  2597  02F0  17E3               	bsf	_events_+1,7
  2598                           
  2599                           ;main.c: 635: break ;
  2600  02F1  2B1D               	goto	l334
  2601  02F2                     l3563:	
  2602                           ;main.c: 637: case STATE_RESET:
  2603                           
  2604                           
  2605                           ;main.c: 638: ParallelLCD_ClearDisplay( ) ;
  2606  02F2  318D  2533  3180   	fcall	_ParallelLCD_ClearDisplay
  2607  02F5  0001               	reset	;# 
  2608                           
  2609                           ;main.c: 642: switch( machineError_ ) {
  2610                           
  2611                           ;main.c: 641: case STATE_ERROR:
  2612  02F6  2B09               	goto	l3571
  2613  02F7                     l3565:	
  2614                           ;main.c: 643: case ERROR_EEPROM:
  2615                           
  2616                           
  2617                           ;main.c: 644: currentSingleMessage_ = MESSAGE.ERROR.EEPROM ;
  2618  02F7  3010               	movlw	low ((_MESSAGE+16)| (0+32768))
  2619  02F8  0084               	movwf	4
  2620  02F9  3088               	movlw	high ((_MESSAGE+16)| (0+32768))
  2621  02FA  0085               	movwf	5
  2622  02FB  3F00               	moviw [0]fsr0
  2623  02FC  0020               	movlb	0	; select bank0
  2624  02FD  00DE               	movwf	_currentSingleMessage_
  2625  02FE  3F01               	moviw [1]fsr0
  2626  02FF  2B07               	goto	L27
  2627  0300                     l3567:	
  2628                           ;main.c: 646: case ERROR_INTERRUPT:
  2629                           
  2630                           ;main.c: 645: break ;
  2631                           
  2632                           
  2633                           ;main.c: 647: currentSingleMessage_ = MESSAGE.ERROR.INTERRUPT ;
  2634  0300  3012               	movlw	low ((_MESSAGE+18)| (0+32768))
  2635  0301  0084               	movwf	4
  2636  0302  3088               	movlw	high ((_MESSAGE+18)| (0+32768))
  2637  0303  0085               	movwf	5
  2638  0304  3F00               	moviw [0]fsr0
  2639  0305  00DE               	movwf	_currentSingleMessage_
  2640  0306  3F01               	moviw [1]fsr0
  2641  0307                     L27:	
  2642  0307  00DF               	movwf	_currentSingleMessage_+1
  2643                           
  2644                           ;main.c: 649: }
  2645                           
  2646                           ;main.c: 648: break ;
  2647  0308  2B1D               	goto	l334
  2648  0309                     l3571:	
  2649  0309  0020               	movlb	0	; select bank0
  2650  030A  0869               	movf	_machineError_,w
  2651                           
  2652                           ; Switch size 1, requested type "space"
  2653                           ; Number of cases is 2, Range of values is 1 to 2
  2654                           ; switch strategies available:
  2655                           ; Name         Instructions Cycles
  2656                           ; simple_byte            7     4 (average)
  2657                           ; direct_byte           13     9 (fixed)
  2658                           ; jumptable            263     9 (fixed)
  2659                           ;	Chosen strategy is simple_byte
  2660  030B  3A01               	xorlw	1	; case 1
  2661  030C  1903               	skipnz
  2662  030D  2AF7               	goto	l3565
  2663  030E  3A03               	xorlw	3	; case 2
  2664  030F  1903               	skipnz
  2665  0310  2B00               	goto	l3567
  2666  0311  2B1D               	goto	l334
  2667                           
  2668                           ;main.c: 652: }
  2669                           
  2670                           ;main.c: 650: break ;
  2671  0312  2B1D               	goto	l334
  2672  0313                     l3575:	
  2673  0313  086A               	movf	_machineState_,w
  2674                           
  2675                           ; Switch size 1, requested type "space"
  2676                           ; Number of cases is 20, Range of values is 0 to 19
  2677                           ; switch strategies available:
  2678                           ; Name         Instructions Cycles
  2679                           ; direct_byte           46     6 (fixed)
  2680                           ; simple_byte           61    31 (average)
  2681                           ; jumptable            260     6 (fixed)
  2682                           ;	Chosen strategy is direct_byte
  2683  0314  0084               	movwf	4
  2684  0315  3014               	movlw	20
  2685  0316  0204               	subwf	4,w
  2686  0317  1803               	skipnc
  2687  0318  2B1D               	goto	l334
  2688  0319  3189               	movlp	high S3983
  2689  031A  3504               	lslf	4,w
  2690  031B  3E8C               	addlw	low S3983
  2691  031C  0082               	movwf	2
  2692  031D                     l334:	
  2693                           
  2694                           ;main.c: 654: }
  2695                           ;main.c: 657: if( (events_.output.accessEeprom&&!(events_.output.accessEeprom=0)) ) {
  2696  031D  1FE3               	btfss	_events_+1,7
  2697  031E  2C79               	goto	l3685
  2698  031F  13E3               	bcf	_events_+1,7
  2699                           
  2700                           ;main.c: 659: INTCONbits.GIE=0 ;
  2701  0320  138B               	bcf	11,7	;volatile
  2702                           
  2703                           ;main.c: 661: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  2704  0321  01D7               	clrf	main@returnCode
  2705                           
  2706                           ;main.c: 663: events_.output.resetMetronome=1 ;
  2707  0322  1763               	bsf	_events_+1,6
  2708                           
  2709                           ;main.c: 664: events_.output.changeMessage=1 ;
  2710  0323  14E3               	bsf	_events_+1,1
  2711                           
  2712                           ;main.c: 665: stateReturnCounter_ = 100 ;
  2713  0324  3064               	movlw	100
  2714  0325  00C7               	movwf	??_main
  2715  0326  0847               	movf	??_main,w
  2716  0327  00EC               	movwf	_stateReturnCounter_
  2717                           
  2718                           ;main.c: 667: switch( machineState_ ) {
  2719  0328  2B65               	goto	l3605
  2720  0329                     l3587:	
  2721                           ;main.c: 669: case STATE_BOOT:
  2722                           
  2723                           
  2724                           ;main.c: 670: returnCode = Configuration_Load( &configration_ ) ;
  2725  0329  3028               	movlw	(low (_configration_| 0))& (0+255)
  2726  032A  318F  2704  3180   	fcall	_Configuration_Load
  2727  032D  0020               	movlb	0	; select bank0
  2728  032E  00C7               	movwf	??_main
  2729  032F  0847               	movf	??_main,w
  2730  0330  00D7               	movwf	main@returnCode
  2731                           
  2732                           ;main.c: 671: stateReturnCounter_ = 1 ;
  2733  0331  01EC               	clrf	_stateReturnCounter_
  2734  0332  0AEC               	incf	_stateReturnCounter_,f
  2735                           
  2736                           ;main.c: 672: break ;
  2737  0333  2B73               	goto	l3607
  2738  0334                     l3591:	
  2739                           ;main.c: 674: case STATE_LOAD:
  2740                           
  2741                           
  2742                           ;main.c: 675: returnCode = Configuration_Load( &configration_ ) ;
  2743  0334  3028               	movlw	(low (_configration_| 0))& (0+255)
  2744  0335  318F  2704  3180   	fcall	_Configuration_Load
  2745  0338  0020               	movlb	0	; select bank0
  2746  0339  00C7               	movwf	??_main
  2747  033A  0847               	movf	??_main,w
  2748  033B  00D7               	movwf	main@returnCode
  2749                           
  2750                           ;main.c: 676: currentSingleMessage_ = MESSAGE.MEMORY.LOAD ;
  2751  033C  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  2752  033D  0084               	movwf	4
  2753  033E  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  2754  033F  0085               	movwf	5
  2755  0340  3F00               	moviw [0]fsr0
  2756  0341  00DE               	movwf	_currentSingleMessage_
  2757  0342  3F01               	moviw [1]fsr0
  2758  0343  2B63               	goto	L29
  2759  0344                     l3595:	
  2760                           ;main.c: 679: case STATE_INITIALIZE:
  2761                           
  2762                           ;main.c: 677: break ;
  2763                           
  2764                           
  2765                           ;main.c: 680: returnCode = Configuration_Save( &configration_ ) ;
  2766  0344  3028               	movlw	(low (_configration_| 0))& (0+255)
  2767  0345  318F  275F  3180   	fcall	_Configuration_Save
  2768  0348  0020               	movlb	0	; select bank0
  2769  0349  00C7               	movwf	??_main
  2770  034A  0847               	movf	??_main,w
  2771  034B  00D7               	movwf	main@returnCode
  2772                           
  2773                           ;main.c: 681: currentSingleMessage_ = MESSAGE.MEMORY.INITIALIZE ;
  2774  034C  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  2775  034D  0084               	movwf	4
  2776  034E  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  2777  034F  0085               	movwf	5
  2778  0350  3F00               	moviw [0]fsr0
  2779  0351  00DE               	movwf	_currentSingleMessage_
  2780  0352  3F01               	moviw [1]fsr0
  2781  0353  2B63               	goto	L29
  2782  0354                     l3599:	
  2783                           ;main.c: 684: case STATE_SAVE:
  2784                           
  2785                           ;main.c: 682: break ;
  2786                           
  2787                           
  2788                           ;main.c: 685: returnCode = Configuration_Save( &configration_ ) ;
  2789  0354  3028               	movlw	(low (_configration_| 0))& (0+255)
  2790  0355  318F  275F  3180   	fcall	_Configuration_Save
  2791  0358  0020               	movlb	0	; select bank0
  2792  0359  00C7               	movwf	??_main
  2793  035A  0847               	movf	??_main,w
  2794  035B  00D7               	movwf	main@returnCode
  2795                           
  2796                           ;main.c: 686: currentSingleMessage_ = MESSAGE.MEMORY.SAVE ;
  2797  035C  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  2798  035D  0084               	movwf	4
  2799  035E  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  2800  035F  0085               	movwf	5
  2801  0360  3F00               	moviw [0]fsr0
  2802  0361  00DE               	movwf	_currentSingleMessage_
  2803  0362  3F01               	moviw [1]fsr0
  2804  0363                     L29:	
  2805  0363  00DF               	movwf	_currentSingleMessage_+1
  2806                           
  2807                           ;main.c: 689: }
  2808                           
  2809                           ;main.c: 687: break ;
  2810  0364  2B73               	goto	l3607
  2811  0365                     l3605:	
  2812  0365  086A               	movf	_machineState_,w
  2813                           
  2814                           ; Switch size 1, requested type "space"
  2815                           ; Number of cases is 4, Range of values is 0 to 17
  2816                           ; switch strategies available:
  2817                           ; Name         Instructions Cycles
  2818                           ; simple_byte           13     7 (average)
  2819                           ; direct_byte           42     6 (fixed)
  2820                           ; jumptable            260     6 (fixed)
  2821                           ;	Chosen strategy is simple_byte
  2822  0366  3A00               	xorlw	0	; case 0
  2823  0367  1903               	skipnz
  2824  0368  2B29               	goto	l3587
  2825  0369  3A0D               	xorlw	13	; case 13
  2826  036A  1903               	skipnz
  2827  036B  2B54               	goto	l3599
  2828  036C  3A02               	xorlw	2	; case 15
  2829  036D  1903               	skipnz
  2830  036E  2B34               	goto	l3591
  2831  036F  3A1E               	xorlw	30	; case 17
  2832  0370  1903               	skipnz
  2833  0371  2B44               	goto	l3595
  2834  0372  2B73               	goto	l3607
  2835  0373                     l3607:	
  2836                           
  2837                           ;main.c: 691: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ conf
      +                          igration_.romOffset >> 4 ] ;
  2838  0373  0829               	movf	_configration_+1,w
  2839  0374  00C7               	movwf	??_main
  2840  0375  3004               	movlw	4
  2841  0376                     u2945:	
  2842  0376  36C7               	lsrf	??_main,f
  2843  0377  0B89               	decfsz	9,f
  2844  0378  2B76               	goto	u2945
  2845  0379  0847               	movf	??_main,w
  2846  037A  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  2847  037B  0084               	movwf	4
  2848  037C  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2849  037D  1803               	skipnc
  2850  037E  3E01               	addlw	1
  2851  037F  0085               	movwf	5
  2852  0380  0800               	movf	0,w	;code access
  2853  0381  00C8               	movwf	??_main+1
  2854  0382  0848               	movf	??_main+1,w
  2855  0383  0022               	movlb	2	; select bank2
  2856  0384  00AB               	movwf	(_informationValueBuffer^(0+256)+11)
  2857                           
  2858                           ;main.c: 692: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][5] = HEX_TABLE[ conf
      +                          igration_.romOffset & 0x0F ] ;
  2859  0385  0020               	movlb	0	; select bank0
  2860  0386  0829               	movf	_configration_+1,w
  2861  0387  390F               	andlw	15
  2862  0388  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  2863  0389  0084               	movwf	4
  2864  038A  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2865  038B  1803               	skipnc
  2866  038C  3E01               	addlw	1
  2867  038D  0085               	movwf	5
  2868  038E  0800               	movf	0,w	;code access
  2869  038F  00C7               	movwf	??_main
  2870  0390  0847               	movf	??_main,w
  2871  0391  0022               	movlb	2	; select bank2
  2872  0392  00AC               	movwf	(_informationValueBuffer^(0+256)+12)
  2873                           
  2874                           ;main.c: 693: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          figration_.writeCount >> 4 ] ;
  2875  0393  0020               	movlb	0	; select bank0
  2876  0394  0828               	movf	_configration_,w
  2877  0395  00C7               	movwf	??_main
  2878  0396  3004               	movlw	4
  2879  0397                     u2955:	
  2880  0397  36C7               	lsrf	??_main,f
  2881  0398  0B89               	decfsz	9,f
  2882  0399  2B97               	goto	u2955
  2883  039A  0847               	movf	??_main,w
  2884  039B  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  2885  039C  0084               	movwf	4
  2886  039D  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2887  039E  1803               	skipnc
  2888  039F  3E01               	addlw	1
  2889  03A0  0085               	movwf	5
  2890  03A1  0800               	movf	0,w	;code access
  2891  03A2  00C8               	movwf	??_main+1
  2892  03A3  0848               	movf	??_main+1,w
  2893  03A4  0022               	movlb	2	; select bank2
  2894  03A5  00B2               	movwf	(_informationValueBuffer^(0+256)+18)
  2895                           
  2896                           ;main.c: 694: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][5] = HEX_TABLE[ con
      +                          figration_.writeCount & 0x0F ] ;
  2897  03A6  0020               	movlb	0	; select bank0
  2898  03A7  0828               	movf	_configration_,w
  2899  03A8  390F               	andlw	15
  2900  03A9  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  2901  03AA  0084               	movwf	4
  2902  03AB  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2903  03AC  1803               	skipnc
  2904  03AD  3E01               	addlw	1
  2905  03AE  0085               	movwf	5
  2906  03AF  0800               	movf	0,w	;code access
  2907  03B0  00C7               	movwf	??_main
  2908  03B1  0847               	movf	??_main,w
  2909  03B2  0022               	movlb	2	; select bank2
  2910  03B3  00B3               	movwf	(_informationValueBuffer^(0+256)+19)
  2911                           
  2912                           ;main.c: 695: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  2913  03B4  0020               	movlb	0	; select bank0
  2914  03B5  0857               	movf	main@returnCode,w
  2915  03B6  00C7               	movwf	??_main
  2916  03B7  3004               	movlw	4
  2917  03B8                     u2965:	
  2918  03B8  36C7               	lsrf	??_main,f
  2919  03B9  0B89               	decfsz	9,f
  2920  03BA  2BB8               	goto	u2965
  2921  03BB  0847               	movf	??_main,w
  2922  03BC  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  2923  03BD  0084               	movwf	4
  2924  03BE  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2925  03BF  1803               	skipnc
  2926  03C0  3E01               	addlw	1
  2927  03C1  0085               	movwf	5
  2928  03C2  0800               	movf	0,w	;code access
  2929  03C3  00C8               	movwf	??_main+1
  2930  03C4  0848               	movf	??_main+1,w
  2931  03C5  0022               	movlb	2	; select bank2
  2932  03C6  00B9               	movwf	(_informationValueBuffer^(0+256)+25)
  2933                           
  2934                           ;main.c: 696: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][5] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  2935  03C7  0020               	movlb	0	; select bank0
  2936  03C8  0857               	movf	main@returnCode,w
  2937  03C9  390F               	andlw	15
  2938  03CA  3E14               	addlw	low (_HEX_TABLE| (0+32768))
  2939  03CB  0084               	movwf	4
  2940  03CC  3088               	movlw	high (_HEX_TABLE| (0+32768))
  2941  03CD  1803               	skipnc
  2942  03CE  3E01               	addlw	1
  2943  03CF  0085               	movwf	5
  2944  03D0  0800               	movf	0,w	;code access
  2945  03D1  00C7               	movwf	??_main
  2946  03D2  0847               	movf	??_main,w
  2947  03D3  0022               	movlb	2	; select bank2
  2948  03D4  00BA               	movwf	(_informationValueBuffer^(0+256)+26)
  2949                           
  2950                           ;main.c: 698: if( returnCode )
  2951  03D5  0020               	movlb	0	; select bank0
  2952  03D6  0857               	movf	main@returnCode,w
  2953  03D7  1903               	btfsc	3,2
  2954  03D8  2BDB               	goto	l368
  2955                           
  2956                           ;main.c: 699: machineError_ = ERROR_EEPROM ;
  2957  03D9  01E9               	clrf	_machineError_
  2958  03DA  0AE9               	incf	_machineError_,f
  2959  03DB                     l368:	
  2960                           
  2961                           ;main.c: 701: INTCONbits.GIE=1 ;
  2962  03DB  178B               	bsf	11,7	;volatile
  2963                           
  2964                           ;main.c: 703: }
  2965                           ;main.c: 706: switch( machineState_ ) {
  2966  03DC  2C79               	goto	l3685
  2967  03DD                     l376:	
  2968                           ;main.c: 708: case STATE_MENU_MAIN:
  2969                           
  2970                           
  2971                           ;main.c: 709: case STATE_MENU_TONE:
  2972                           ;main.c: 710: case STATE_MENU_DURATION:
  2973                           ;main.c: 711: case STATE_CONFIRM_LOAD:
  2974                           ;main.c: 712: case STATE_CONFIRM_SAVE:
  2975                           ;main.c: 713: case STATE_CONFIRM_RESET:
  2976                           ;main.c: 714: case STATE_INFORMATION:
  2977                           ;main.c: 715: if( (events_.input.keyPressDown&&!(events_.input.keyPressDown=0)) ) {
  2978  03DD  1CE2               	btfss	_events_,1
  2979  03DE  2C00               	goto	l3631
  2980  03DF  10E2               	bcf	_events_,1
  2981                           
  2982                           ;main.c: 716: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->limit ) {
  2983  03E0  0867               	movf	_currentMenuInfoPtr_,w
  2984  03E1  3E02               	addlw	2
  2985  03E2  0086               	movwf	6
  2986  03E3  0187               	clrf	7
  2987  03E4  0867               	movf	_currentMenuInfoPtr_,w
  2988  03E5  0084               	movwf	4
  2989  03E6  0185               	clrf	5
  2990  03E7  0800               	movf	0,w
  2991  03E8  0601               	xorwf	1,w
  2992  03E9  1903               	skipnz
  2993  03EA  2C00               	goto	l3631
  2994                           
  2995                           ;main.c: 717: currentMenuInfoPtr_->select++ ;
  2996  03EB  3001               	movlw	1
  2997  03EC  00C7               	movwf	??_main
  2998  03ED  0867               	movf	_currentMenuInfoPtr_,w
  2999  03EE  0086               	movwf	6
  3000  03EF  0187               	clrf	7
  3001  03F0  0847               	movf	??_main,w
  3002  03F1  0781               	addwf	1,f
  3003                           
  3004                           ;main.c: 718: if( !currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosi
      +                          tion++ ;
  3005  03F2  0A67               	incf	_currentMenuInfoPtr_,w
  3006  03F3  0086               	movwf	6
  3007  03F4  0187               	clrf	7
  3008  03F5  0801               	movf	1,w
  3009  03F6  1D03               	btfss	3,2
  3010  03F7  2BFF               	goto	l3629
  3011  03F8  3001               	movlw	1
  3012  03F9  00C7               	movwf	??_main
  3013  03FA  0A67               	incf	_currentMenuInfoPtr_,w
  3014  03FB  0086               	movwf	6
  3015  03FC  0187               	clrf	7
  3016  03FD  0847               	movf	??_main,w
  3017  03FE  0781               	addwf	1,f
  3018  03FF                     l3629:	
  3019                           
  3020                           ;main.c: 719: events_.output.changeMessage=1 ;
  3021  03FF  14E3               	bsf	_events_+1,1
  3022  0400                     l3631:	
  3023                           
  3024                           ;main.c: 720: }
  3025                           ;main.c: 721: }
  3026                           ;main.c: 722: if( (events_.input.keyPressUp&&!(events_.input.keyPressUp=0)) ) {
  3027  0400  1C62               	btfss	_events_,0
  3028  0401  2C86               	goto	l383
  3029  0402  1062               	bcf	_events_,0
  3030                           
  3031                           ;main.c: 723: if( currentMenuInfoPtr_->select ) {
  3032  0403  0867               	movf	_currentMenuInfoPtr_,w
  3033  0404  0086               	movwf	6
  3034  0405  0187               	clrf	7
  3035  0406  0801               	movf	1,w
  3036  0407  1903               	btfsc	3,2
  3037  0408  2C86               	goto	l383
  3038                           
  3039                           ;main.c: 724: currentMenuInfoPtr_->select-- ;
  3040  0409  0867               	movf	_currentMenuInfoPtr_,w
  3041  040A  0086               	movwf	6
  3042  040B  0187               	clrf	7
  3043  040C  3001               	movlw	1
  3044  040D  0281               	subwf	1,f
  3045                           
  3046                           ;main.c: 725: if( currentMenuInfoPtr_->cursorPosition ) currentMenuInfoPtr_->cursorPosit
      +                          ion-- ;
  3047  040E  0A67               	incf	_currentMenuInfoPtr_,w
  3048  040F  0086               	movwf	6
  3049  0410  0187               	clrf	7
  3050  0411  0801               	movf	1,w
  3051  0412  1903               	btfsc	3,2
  3052  0413  2C19               	goto	l3641
  3053  0414  0A67               	incf	_currentMenuInfoPtr_,w
  3054  0415  0086               	movwf	6
  3055  0416  0187               	clrf	7
  3056  0417  3001               	movlw	1
  3057  0418  0281               	subwf	1,f
  3058  0419                     l3641:	
  3059                           
  3060                           ;main.c: 726: events_.output.changeMessage=1 ;
  3061  0419  14E3               	bsf	_events_+1,1
  3062                           
  3063                           ;main.c: 727: }
  3064                           ;main.c: 728: }
  3065                           ;main.c: 729: break ;
  3066  041A  2C86               	goto	l383
  3067  041B                     l384:	
  3068                           ;main.c: 731: case STATE_METRONOME:
  3069                           
  3070                           
  3071                           ;main.c: 732: if( (events_.input.keyPressUp&&!(events_.input.keyPressUp=0)) ) {
  3072  041B  1C62               	btfss	_events_,0
  3073  041C  2C2B               	goto	l3653
  3074  041D  1062               	bcf	_events_,0
  3075                           
  3076                           ;main.c: 733: if( configration_.tempo < 999 ) {
  3077  041E  3003               	movlw	3
  3078  041F  022B               	subwf	_configration_+3,w
  3079  0420  30E7               	movlw	231
  3080  0421  1903               	skipnz
  3081  0422  022A               	subwf	_configration_+2,w
  3082  0423  1803               	skipnc
  3083  0424  2C2A               	goto	l3651
  3084                           
  3085                           ;main.c: 734: configration_.tempo++ ;
  3086  0425  3001               	movlw	1
  3087  0426  07AA               	addwf	_configration_+2,f
  3088  0427  3000               	movlw	0
  3089  0428  3DAB               	addwfc	_configration_+3,f
  3090                           
  3091                           ;main.c: 735: events_.output.changeValue=1 ;
  3092  0429  1563               	bsf	_events_+1,2
  3093  042A                     l3651:	
  3094                           
  3095                           ;main.c: 736: }
  3096                           ;main.c: 737: events_.output.resetMetronome=1 ;
  3097  042A  1763               	bsf	_events_+1,6
  3098  042B                     l3653:	
  3099                           
  3100                           ;main.c: 738: }
  3101                           ;main.c: 739: if( (events_.input.keyPressDown&&!(events_.input.keyPressDown=0)) ) {
  3102  042B  1CE2               	btfss	_events_,1
  3103  042C  2C86               	goto	l383
  3104  042D  10E2               	bcf	_events_,1
  3105                           
  3106                           ;main.c: 740: if( configration_.tempo > 1 ) {
  3107  042E  3000               	movlw	0
  3108  042F  022B               	subwf	_configration_+3,w
  3109  0430  3002               	movlw	2
  3110  0431  1903               	skipnz
  3111  0432  022A               	subwf	_configration_+2,w
  3112  0433  1C03               	skipc
  3113  0434  2C3A               	goto	l3663
  3114                           
  3115                           ;main.c: 741: configration_.tempo-- ;
  3116  0435  3001               	movlw	1
  3117  0436  02AA               	subwf	_configration_+2,f
  3118  0437  3000               	movlw	0
  3119  0438  3BAB               	subwfb	_configration_+3,f
  3120                           
  3121                           ;main.c: 742: events_.output.changeValue=1 ;
  3122  0439  1563               	bsf	_events_+1,2
  3123  043A                     l3663:	
  3124                           
  3125                           ;main.c: 743: }
  3126                           ;main.c: 744: events_.output.resetMetronome=1 ;
  3127  043A  1763               	bsf	_events_+1,6
  3128                           
  3129                           ;main.c: 745: }
  3130                           ;main.c: 746: break ;
  3131  043B  2C86               	goto	l383
  3132  043C                     l394:	
  3133                           ;main.c: 748: case STATE_ADJUST_BEAT_COUNT:
  3134                           
  3135                           
  3136                           ;main.c: 749: case STATE_ADJUST_PULSE_WIDTH:
  3137                           ;main.c: 750: case STATE_ADJUST_DURATION_CLICK:
  3138                           ;main.c: 751: case STATE_ADJUST_DURATION_KEY:
  3139                           ;main.c: 752: case STATE_ADJUST_TONE:
  3140                           ;main.c: 753: case STATE_ADJUST_OSCILLATOR_TUNE:
  3141                           ;main.c: 754: if( (events_.input.keyPressUp&&!(events_.input.keyPressUp=0)) ) {
  3142  043C  1C62               	btfss	_events_,0
  3143  043D  2C5B               	goto	l3673
  3144  043E  1062               	bcf	_events_,0
  3145                           
  3146                           ;main.c: 755: if( *currentValueInfoPtr_->valuePtr != currentValueInfoPtr_->limit.upper )
      +                           {
  3147  043F  0860               	movf	_currentValueInfoPtr_,w
  3148  0440  0086               	movwf	6
  3149  0441  0861               	movf	_currentValueInfoPtr_+1,w
  3150  0442  0087               	movwf	7
  3151  0443  0801               	movf	1,w
  3152  0444  0086               	movwf	6
  3153  0445  0187               	clrf	7
  3154  0446  0860               	movf	_currentValueInfoPtr_,w
  3155  0447  0084               	movwf	4
  3156  0448  0861               	movf	_currentValueInfoPtr_+1,w
  3157  0449  0085               	movwf	5
  3158  044A  3101               	addfsr 0,1
  3159  044B  0800               	movf	0,w
  3160  044C  0601               	xorwf	1,w
  3161  044D  1903               	skipnz
  3162  044E  2C5B               	goto	l3673
  3163                           
  3164                           ;main.c: 756: ( *currentValueInfoPtr_->valuePtr )++ ;
  3165  044F  3001               	movlw	1
  3166  0450  00C7               	movwf	??_main
  3167  0451  0860               	movf	_currentValueInfoPtr_,w
  3168  0452  0086               	movwf	6
  3169  0453  0861               	movf	_currentValueInfoPtr_+1,w
  3170  0454  0087               	movwf	7
  3171  0455  0801               	movf	1,w
  3172  0456  0086               	movwf	6
  3173  0457  0187               	clrf	7
  3174  0458  0847               	movf	??_main,w
  3175  0459  0781               	addwf	1,f
  3176                           
  3177                           ;main.c: 757: events_.output.changeValue=1 ;
  3178  045A  1563               	bsf	_events_+1,2
  3179  045B                     l3673:	
  3180                           
  3181                           ;main.c: 758: }
  3182                           ;main.c: 759: }
  3183                           ;main.c: 760: if( (events_.input.keyPressDown&&!(events_.input.keyPressDown=0)) ) {
  3184  045B  1CE2               	btfss	_events_,1
  3185  045C  2C86               	goto	l383
  3186  045D  10E2               	bcf	_events_,1
  3187                           
  3188                           ;main.c: 761: if( *currentValueInfoPtr_->valuePtr != currentValueInfoPtr_->limit.lower )
      +                           {
  3189  045E  0860               	movf	_currentValueInfoPtr_,w
  3190  045F  0086               	movwf	6
  3191  0460  0861               	movf	_currentValueInfoPtr_+1,w
  3192  0461  0087               	movwf	7
  3193  0462  0801               	movf	1,w
  3194  0463  0086               	movwf	6
  3195  0464  0187               	clrf	7
  3196  0465  0860               	movf	_currentValueInfoPtr_,w
  3197  0466  0084               	movwf	4
  3198  0467  0861               	movf	_currentValueInfoPtr_+1,w
  3199  0468  0085               	movwf	5
  3200  0469  3102               	addfsr 0,2
  3201  046A  0800               	movf	0,w
  3202  046B  0601               	xorwf	1,w
  3203  046C  1903               	skipnz
  3204  046D  2C86               	goto	l383
  3205                           
  3206                           ;main.c: 762: ( *currentValueInfoPtr_->valuePtr )-- ;
  3207  046E  0860               	movf	_currentValueInfoPtr_,w
  3208  046F  0086               	movwf	6
  3209  0470  0861               	movf	_currentValueInfoPtr_+1,w
  3210  0471  0087               	movwf	7
  3211  0472  0801               	movf	1,w
  3212  0473  0086               	movwf	6
  3213  0474  0187               	clrf	7
  3214  0475  3001               	movlw	1
  3215  0476  0281               	subwf	1,f
  3216                           
  3217                           ;main.c: 763: events_.output.changeValue=1 ;
  3218  0477  1563               	bsf	_events_+1,2
  3219                           
  3220                           ;main.c: 768: }
  3221                           
  3222                           ;main.c: 764: }
  3223                           ;main.c: 765: }
  3224                           ;main.c: 766: break ;
  3225  0478  2C86               	goto	l383
  3226  0479                     l3685:	
  3227  0479  086A               	movf	_machineState_,w
  3228                           
  3229                           ; Switch size 1, requested type "space"
  3230                           ; Number of cases is 14, Range of values is 1 to 16
  3231                           ; switch strategies available:
  3232                           ; Name         Instructions Cycles
  3233                           ; direct_byte           41     9 (fixed)
  3234                           ; simple_byte           43    22 (average)
  3235                           ; jumptable            263     9 (fixed)
  3236                           ;	Chosen strategy is direct_byte
  3237  047A  3EFF               	addlw	-1
  3238  047B  1C03               	skipc
  3239  047C  2C86               	goto	l383
  3240  047D  0084               	movwf	4
  3241  047E  3010               	movlw	16
  3242  047F  0204               	subwf	4,w
  3243  0480  1803               	skipnc
  3244  0481  2C86               	goto	l383
  3245  0482  318A               	movlp	high S3985
  3246  0483  3504               	lslf	4,w
  3247  0484  3E00               	addlw	low S3985
  3248  0485  0082               	movwf	2
  3249  0486                     l383:	
  3250                           
  3251                           ;main.c: 771: INTCONbits.GIE=0 ;
  3252  0486  138B               	bcf	11,7	;volatile
  3253                           
  3254                           ;main.c: 772: if( (events_.output.resetMetronome&&!(events_.output.resetMetronome=0)) ) 
      +                          {
  3255  0487  1F63               	btfss	_events_+1,6
  3256  0488  2C92               	goto	l3695
  3257  0489  1363               	bcf	_events_+1,6
  3258                           
  3259                           ;main.c: 773: tempoCounter_ = 0 ;
  3260  048A  3000               	movlw	0
  3261  048B  00DB               	movwf	_tempoCounter_
  3262  048C  3000               	movlw	0
  3263  048D  00DC               	movwf	_tempoCounter_+1
  3264  048E  3000               	movlw	0
  3265  048F  00DD               	movwf	_tempoCounter_+2
  3266                           
  3267                           ;main.c: 774: beatCounter_ = 0 ;
  3268  0490  01E6               	clrf	_beatCounter_
  3269  0491  2CBF               	goto	L30
  3270  0492                     l3695:	
  3271                           ;main.c: 776: }
  3272                           
  3273                           ;main.c: 775: events_.output.soundOnClick=1 ;
  3274                           
  3275                           
  3276                           ;main.c: 777: else {
  3277                           ;main.c: 778: if( tempoCounter_ >= ( 32000000UL * 3 / 20 ) ) {
  3278  0492  3049               	movlw	73
  3279  0493  025D               	subwf	_tempoCounter_+2,w
  3280  0494  1D03               	skipz
  3281  0495  2C9C               	goto	u3135
  3282  0496  303E               	movlw	62
  3283  0497  025C               	subwf	_tempoCounter_+1,w
  3284  0498  1D03               	skipz
  3285  0499  2C9C               	goto	u3135
  3286  049A  3000               	movlw	0
  3287  049B  025B               	subwf	_tempoCounter_,w
  3288  049C                     u3135:	
  3289  049C  1C03               	skipc
  3290  049D  2CC0               	goto	l3705
  3291                           
  3292                           ;main.c: 779: tempoCounter_ -= ( 32000000UL * 3 / 20 ) ;
  3293  049E  3000               	movlw	0
  3294  049F  00C7               	movwf	??_main
  3295  04A0  303E               	movlw	62
  3296  04A1  00C8               	movwf	??_main+1
  3297  04A2  3049               	movlw	73
  3298  04A3  00C9               	movwf	??_main+2
  3299  04A4  0847               	movf	??_main,w
  3300  04A5  02DB               	subwf	_tempoCounter_,f
  3301  04A6  0848               	movf	??_main+1,w
  3302  04A7  3BDC               	subwfb	_tempoCounter_+1,f
  3303  04A8  0849               	movf	??_main+2,w
  3304  04A9  3BDD               	subwfb	_tempoCounter_+2,f
  3305                           
  3306                           ;main.c: 780: if( ++beatCounter_ >= ( configration_.beatCount << 1 ) )
  3307  04AA  082C               	movf	_configration_+4,w
  3308  04AB  00C7               	movwf	??_main
  3309  04AC  01C8               	clrf	??_main+1
  3310  04AD  35C7               	lslf	??_main,f
  3311  04AE  0DC8               	rlf	??_main+1,f
  3312  04AF  3001               	movlw	1
  3313  04B0  00C9               	movwf	??_main+2
  3314  04B1  0849               	movf	??_main+2,w
  3315  04B2  07E6               	addwf	_beatCounter_,f
  3316  04B3  0848               	movf	??_main+1,w
  3317  04B4  3A80               	xorlw	128
  3318  04B5  3C80               	sublw	128
  3319  04B6  1D03               	skipz
  3320  04B7  2CBA               	goto	u3145
  3321  04B8  0847               	movf	??_main,w
  3322  04B9  0266               	subwf	_beatCounter_,w
  3323  04BA                     u3145:	
  3324  04BA  1C03               	skipc
  3325  04BB  2CBE               	goto	l3703
  3326                           
  3327                           ;main.c: 781: beatCounter_ = 0 ;
  3328  04BC  0020               	movlb	0	; select bank0
  3329  04BD  01E6               	clrf	_beatCounter_
  3330  04BE                     l3703:	
  3331                           
  3332                           ;main.c: 783: events_.output.soundOnClick=1 ;
  3333  04BE  0020               	movlb	0	; select bank0
  3334  04BF                     L30:	
  3335  04BF  15E3               	bsf	_events_+1,3
  3336  04C0                     l3705:	
  3337                           
  3338                           ;main.c: 784: }
  3339                           ;main.c: 785: }
  3340                           ;main.c: 786: INTCONbits.GIE=1 ;
  3341  04C0  178B               	bsf	11,7	;volatile
  3342                           
  3343                           ;main.c: 789: switch( machineState_ ) {
  3344  04C1  2CF7               	goto	l3741
  3345  04C2                     l412:	
  3346                           ;main.c: 804: default:
  3347                           
  3348                           ;main.c: 802: break ;
  3349                           
  3350                           ;main.c: 801: case STATE_ADJUST_OSCILLATOR_TUNE:
  3351                           
  3352                           ;main.c: 800: break ;
  3353                           
  3354                           ;main.c: 799: case STATE_ADJUST_TONE:
  3355                           
  3356                           ;main.c: 792: case STATE_INITIALIZE:
  3357                           ;main.c: 793: case STATE_LOAD:
  3358                           ;main.c: 794: case STATE_SAVE:
  3359                           ;main.c: 795: case STATE_ERROR:
  3360                           ;main.c: 797: break ;
  3361                           
  3362                           ;main.c: 791: case STATE_BOOT:
  3363                           
  3364                           
  3365                           ;main.c: 805: if( (events_.output.soundOnKey&&!(events_.output.soundOnKey=0)) ) {
  3366  04C2  1E63               	btfss	_events_+1,4
  3367  04C3  2CD0               	goto	l3715
  3368  04C4  1263               	bcf	_events_+1,4
  3369                           
  3370                           ;main.c: 806: soundDurationCount_.key = configration_.duration.key ;
  3371  04C5  082E               	movf	_configration_+6,w
  3372  04C6  00C7               	movwf	??_main
  3373  04C7  0847               	movf	??_main,w
  3374  04C8  00E5               	movwf	_soundDurationCount_+1
  3375                           
  3376                           ;main.c: 807: PR2 = 124 ;
  3377  04C9  307C               	movlw	124
  3378  04CA  009B               	movwf	27	;volatile
  3379                           
  3380                           ;main.c: 808: {CCPR4L=(PR2>>1);} ;
  3381  04CB  361B               	lsrf	27,w	;volatile
  3382  04CC  0026               	movlb	6	; select bank6
  3383  04CD  0098               	movwf	24	;volatile
  3384                           
  3385                           ;main.c: 809: T2CONbits.TMR2ON = 1 ;
  3386  04CE  0020               	movlb	0	; select bank0
  3387  04CF  151C               	bsf	28,2	;volatile
  3388  04D0                     l3715:	
  3389                           
  3390                           ;main.c: 810: }
  3391                           ;main.c: 811: if( (events_.output.soundOnClick&&!(events_.output.soundOnClick=0)) && !is
      +                          Mute_ && !soundDurationCount_.key ) {
  3392  04D0  1DE3               	btfss	_events_+1,3
  3393  04D1  2D15               	goto	l3747
  3394  04D2  11E3               	bcf	_events_+1,3
  3395  04D3  0868               	movf	_isMute_,w
  3396  04D4  1D03               	btfss	3,2
  3397  04D5  2D15               	goto	l3747
  3398  04D6  0865               	movf	_soundDurationCount_+1,w
  3399  04D7  1D03               	btfss	3,2
  3400  04D8  2D15               	goto	l3747
  3401                           
  3402                           ;main.c: 813: soundDurationCount_.click = configration_.duration.click ;
  3403  04D9  082D               	movf	_configration_+5,w
  3404  04DA  00C7               	movwf	??_main
  3405  04DB  0847               	movf	??_main,w
  3406  04DC  00E4               	movwf	_soundDurationCount_
  3407                           
  3408                           ;main.c: 815: if( beatCounter_ == 0 )
  3409  04DD  0866               	movf	_beatCounter_,w
  3410  04DE  1D03               	btfss	3,2
  3411  04DF  2CE2               	goto	l3729
  3412                           
  3413                           ;main.c: 816: PR2 = configration_.tone[ 1 ] ;
  3414  04E0  0830               	movf	_configration_+8,w
  3415  04E1  2CE9               	goto	L32
  3416  04E2                     l3729:	
  3417                           
  3418                           ;main.c: 817: else if( beatCounter_ == configration_.beatCount )
  3419  04E2  082C               	movf	_configration_+4,w
  3420  04E3  0666               	xorwf	_beatCounter_,w
  3421  04E4  1D03               	skipz
  3422  04E5  2CE8               	goto	l3733
  3423                           
  3424                           ;main.c: 818: PR2 = configration_.tone[ 2 ] ;
  3425  04E6  0831               	movf	_configration_+9,w
  3426  04E7  2CE9               	goto	L32
  3427  04E8                     l3733:	
  3428                           
  3429                           ;main.c: 819: else
  3430                           ;main.c: 820: PR2 = configration_.tone[ 0 ] ;
  3431  04E8  082F               	movf	_configration_+7,w
  3432  04E9                     L32:	
  3433  04E9  009B               	movwf	27	;volatile
  3434                           
  3435                           ;main.c: 822: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  3436  04EA  081B               	movf	27,w	;volatile
  3437  04EB  00C7               	movwf	??_main
  3438  04EC  0A32               	incf	_configration_+10,w
  3439  04ED  2CEF               	goto	u3214
  3440  04EE                     u3215:	
  3441  04EE  36C7               	lsrf	??_main,f
  3442  04EF                     u3214:	
  3443  04EF  0B89               	decfsz	9,f
  3444  04F0  2CEE               	goto	u3215
  3445  04F1  0847               	movf	??_main,w
  3446  04F2  0026               	movlb	6	; select bank6
  3447  04F3  0098               	movwf	24	;volatile
  3448                           
  3449                           ;main.c: 823: T2CONbits.TMR2ON = 1 ;
  3450  04F4  0020               	movlb	0	; select bank0
  3451  04F5  151C               	bsf	28,2	;volatile
  3452                           
  3453                           ;main.c: 827: }
  3454                           
  3455                           ;main.c: 824: }
  3456                           ;main.c: 825: break ;
  3457  04F6  2D15               	goto	l3747
  3458  04F7                     l3741:	
  3459  04F7  086A               	movf	_machineState_,w
  3460                           
  3461                           ; Switch size 1, requested type "space"
  3462                           ; Number of cases is 7, Range of values is 0 to 19
  3463                           ; switch strategies available:
  3464                           ; Name         Instructions Cycles
  3465                           ; simple_byte           22    12 (average)
  3466                           ; direct_byte           46     6 (fixed)
  3467                           ; jumptable            260     6 (fixed)
  3468                           ;	Chosen strategy is simple_byte
  3469  04F8  3A00               	xorlw	0	; case 0
  3470  04F9  1903               	skipnz
  3471  04FA  2D15               	goto	l3747
  3472  04FB  3A09               	xorlw	9	; case 9
  3473  04FC  1903               	skipnz
  3474  04FD  2D15               	goto	l3747
  3475  04FE  3A03               	xorlw	3	; case 10
  3476  04FF  1903               	skipnz
  3477  0500  2D15               	goto	l3747
  3478  0501  3A07               	xorlw	7	; case 13
  3479  0502  1903               	skipnz
  3480  0503  2D15               	goto	l3747
  3481  0504  3A02               	xorlw	2	; case 15
  3482  0505  1903               	skipnz
  3483  0506  2D15               	goto	l3747
  3484  0507  3A1E               	xorlw	30	; case 17
  3485  0508  1903               	skipnz
  3486  0509  2D15               	goto	l3747
  3487  050A  3A02               	xorlw	2	; case 19
  3488  050B  1903               	skipnz
  3489  050C  2D15               	goto	l3747
  3490  050D  2CC2               	goto	l412
  3491                           
  3492                           ;main.c: 830: switch( machineState_ ) {
  3493  050E  2D15               	goto	l3747
  3494  050F                     l424:	
  3495                           ;main.c: 832: case STATE_BOOT:
  3496                           
  3497  050F  2D13               	goto	L33
  3498  0510                     l428:	
  3499                           ;main.c: 845: default:
  3500                           
  3501                           ;main.c: 841: case STATE_ADJUST_OSCILLATOR_TUNE:
  3502                           ;main.c: 843: break ;
  3503                           
  3504                           ;main.c: 840: case STATE_ADJUST_TONE:
  3505                           
  3506                           ;main.c: 838: break ;
  3507                           
  3508                           ;main.c: 833: case STATE_INITIALIZE:
  3509                           ;main.c: 834: case STATE_LOAD:
  3510                           ;main.c: 835: case STATE_SAVE:
  3511                           ;main.c: 836: case STATE_ERROR:
  3512                           ;main.c: 837: T2CONbits.TMR2ON = 0 ;
  3513                           
  3514                           
  3515                           ;main.c: 846: if( (events_.output.soundOff&&!(events_.output.soundOff=0)) )
  3516  0510  1EE3               	btfss	_events_+1,5
  3517  0511  2D2C               	goto	l425
  3518  0512  12E3               	bcf	_events_+1,5
  3519  0513                     L33:	
  3520                           
  3521                           ;main.c: 847: T2CONbits.TMR2ON = 0 ;
  3522  0513  111C               	bcf	28,2	;volatile
  3523                           
  3524                           ;main.c: 850: }
  3525                           
  3526                           ;main.c: 849: break ;
  3527  0514  2D2C               	goto	l425
  3528  0515                     l3747:	
  3529  0515  086A               	movf	_machineState_,w
  3530                           
  3531                           ; Switch size 1, requested type "space"
  3532                           ; Number of cases is 7, Range of values is 0 to 19
  3533                           ; switch strategies available:
  3534                           ; Name         Instructions Cycles
  3535                           ; simple_byte           22    12 (average)
  3536                           ; direct_byte           46     6 (fixed)
  3537                           ; jumptable            260     6 (fixed)
  3538                           ;	Chosen strategy is simple_byte
  3539  0516  3A00               	xorlw	0	; case 0
  3540  0517  1903               	skipnz
  3541  0518  2D0F               	goto	l424
  3542  0519  3A09               	xorlw	9	; case 9
  3543  051A  1903               	skipnz
  3544  051B  2D2C               	goto	l425
  3545  051C  3A03               	xorlw	3	; case 10
  3546  051D  1903               	skipnz
  3547  051E  2D2C               	goto	l425
  3548  051F  3A07               	xorlw	7	; case 13
  3549  0520  1903               	skipnz
  3550  0521  2D0F               	goto	l424
  3551  0522  3A02               	xorlw	2	; case 15
  3552  0523  1903               	skipnz
  3553  0524  2D0F               	goto	l424
  3554  0525  3A1E               	xorlw	30	; case 17
  3555  0526  1903               	skipnz
  3556  0527  2D0F               	goto	l424
  3557  0528  3A02               	xorlw	2	; case 19
  3558  0529  1903               	skipnz
  3559  052A  2D0F               	goto	l424
  3560  052B  2D10               	goto	l428
  3561  052C                     l425:	
  3562                           
  3563                           ;main.c: 853: if( (events_.output.changeMessage&&!(events_.output.changeMessage=0)) ) {
  3564  052C  1CE3               	btfss	_events_+1,1
  3565  052D  2EB8               	goto	l430
  3566  052E  10E3               	bcf	_events_+1,1
  3567                           
  3568                           ;main.c: 855: switch( machineState_ ) {
  3569  052F  2EAA               	goto	l3797
  3570  0530                     l3751:	
  3571                           ;main.c: 857: case STATE_MENU_MAIN:
  3572                           
  3573                           
  3574                           ;main.c: 858: case STATE_MENU_TONE:
  3575                           ;main.c: 859: case STATE_MENU_DURATION:
  3576                           ;main.c: 860: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x1 , current
      +                          MenuInfoPtr_->menuMessage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosi
      +                          tion ] ) ;
  3577  0530  0867               	movf	_currentMenuInfoPtr_,w
  3578  0531  3E03               	addlw	3
  3579  0532  0086               	movwf	6
  3580  0533  0187               	clrf	7
  3581  0534  0867               	movf	_currentMenuInfoPtr_,w
  3582  0535  0084               	movwf	4
  3583  0536  0185               	clrf	5
  3584  0537  0800               	movf	0,w
  3585  0538  00C7               	movwf	??_main
  3586  0539  0A67               	incf	_currentMenuInfoPtr_,w
  3587  053A  0084               	movwf	4
  3588  053B  0185               	clrf	5
  3589  053C  0300               	decf	0,w
  3590  053D  3AFF               	xorlw	255
  3591  053E  0747               	addwf	??_main,w
  3592  053F  0709               	addwf	9,w
  3593  0540  0701               	addwf	1,w
  3594  0541  00C8               	movwf	??_main+1
  3595  0542  0848               	movf	??_main+1,w
  3596  0543  0086               	movwf	6
  3597  0544  3001               	movlw	1	; select bank2/3
  3598  0545  0087               	movwf	7
  3599  0546  3F40               	moviw [0]fsr1
  3600  0547  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3601  0548  3F41               	moviw [1]fsr1
  3602  0549  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3603  054A  3081               	movlw	129
  3604  054B  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3605                           
  3606                           ;main.c: 861: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x1 , current
      +                          MenuInfoPtr_->menuMessage[ currentMenuInfoPtr_->select - currentMenuInfoPtr_->cursorPosi
      +                          tion + 1 ] ) ;
  3607  054E  0020               	movlb	0	; select bank0
  3608  054F  0867               	movf	_currentMenuInfoPtr_,w
  3609  0550  3E03               	addlw	3
  3610  0551  0086               	movwf	6
  3611  0552  0187               	clrf	7
  3612  0553  0867               	movf	_currentMenuInfoPtr_,w
  3613  0554  0084               	movwf	4
  3614  0555  0185               	clrf	5
  3615  0556  0800               	movf	0,w
  3616  0557  00C7               	movwf	??_main
  3617  0558  0A67               	incf	_currentMenuInfoPtr_,w
  3618  0559  0084               	movwf	4
  3619  055A  0185               	clrf	5
  3620  055B  0300               	decf	0,w
  3621  055C  3AFF               	xorlw	255
  3622  055D  0747               	addwf	??_main,w
  3623  055E  0709               	addwf	9,w
  3624  055F  3E02               	addlw	2
  3625  0560  0701               	addwf	1,w
  3626  0561  00C8               	movwf	??_main+1
  3627  0562  0848               	movf	??_main+1,w
  3628  0563  0086               	movwf	6
  3629  0564  3001               	movlw	1	; select bank2/3
  3630  0565  0087               	movwf	7
  3631  0566  3F40               	moviw [0]fsr1
  3632  0567  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3633  0568  3F41               	moviw [1]fsr1
  3634  0569  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3635  056A  30C1               	movlw	193
  3636  056B  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3637                           
  3638                           ;main.c: 863: if( currentMenuInfoPtr_->select != currentMenuInfoPtr_->cursorPosition )
  3639  056E  0020               	movlb	0	; select bank0
  3640  056F  0A67               	incf	_currentMenuInfoPtr_,w
  3641  0570  0086               	movwf	6
  3642  0571  0187               	clrf	7
  3643  0572  0867               	movf	_currentMenuInfoPtr_,w
  3644  0573  0084               	movwf	4
  3645  0574  0185               	clrf	5
  3646  0575  0800               	movf	0,w
  3647  0576  0601               	xorwf	1,w
  3648  0577  1903               	skipnz
  3649  0578  2D85               	goto	l3757
  3650                           
  3651                           ;main.c: 864: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_0 | 0xF , CHAR_CODE.CU
      +                          RSOR_UP ) ;
  3652  0579  3025               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3653  057A  0084               	movwf	4
  3654  057B  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3655  057C  0085               	movwf	5
  3656  057D  0800               	movf	0,w	;code access
  3657  057E  00C7               	movwf	??_main
  3658  057F  0847               	movf	??_main,w
  3659  0580  00C1               	movwf	ParallelLCD_WriteCharacter@character
  3660  0581  308F               	movlw	143
  3661  0582  318D  253B  3180   	fcall	_ParallelLCD_WriteCharacter
  3662  0585                     l3757:	
  3663                           
  3664                           ;main.c: 865: if( currentMenuInfoPtr_->select != ( currentMenuInfoPtr_->limit + currentM
      +                          enuInfoPtr_->cursorPosition - 1 ) )
  3665  0585  0020               	movlb	0	; select bank0
  3666  0586  0A67               	incf	_currentMenuInfoPtr_,w
  3667  0587  0086               	movwf	6
  3668  0588  0187               	clrf	7
  3669  0589  0867               	movf	_currentMenuInfoPtr_,w
  3670  058A  3E02               	addlw	2
  3671  058B  0084               	movwf	4
  3672  058C  0185               	clrf	5
  3673  058D  0800               	movf	0,w
  3674  058E  0701               	addwf	1,w
  3675  058F  00C7               	movwf	??_main
  3676  0590  01C8               	clrf	??_main+1
  3677  0591  0DC8               	rlf	??_main+1,f
  3678  0592  0847               	movf	??_main,w
  3679  0593  3EFF               	addlw	255
  3680  0594  00C9               	movwf	??_main+2
  3681  0595  30FF               	movlw	255
  3682  0596  3D48               	addwfc	??_main+1,w
  3683  0597  00CA               	movwf	??_main+3
  3684  0598  0867               	movf	_currentMenuInfoPtr_,w
  3685  0599  0086               	movwf	6
  3686  059A  0187               	clrf	7
  3687  059B  0801               	movf	1,w
  3688  059C  0649               	xorwf	??_main+2,w
  3689  059D  044A               	iorwf	??_main+3,w
  3690  059E  1903               	skipnz
  3691  059F  2DAC               	goto	l3761
  3692                           
  3693                           ;main.c: 866: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_1 | 0xF , CHAR_CODE.CU
      +                          RSOR_DOWN ) ;
  3694  05A0  3026               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3695  05A1  0084               	movwf	4
  3696  05A2  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3697  05A3  0085               	movwf	5
  3698  05A4  0800               	movf	0,w	;code access
  3699  05A5  00C7               	movwf	??_main
  3700  05A6  0847               	movf	??_main,w
  3701  05A7  00C1               	movwf	ParallelLCD_WriteCharacter@character
  3702  05A8  30CF               	movlw	207
  3703  05A9  318D  253B  3180   	fcall	_ParallelLCD_WriteCharacter
  3704  05AC                     l3761:	
  3705                           
  3706                           ;main.c: 868: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuInfoPtr_->c
      +                          ursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3707  05AC  3024               	movlw	low (_CHAR_CODE| (0+32768))
  3708  05AD  0084               	movwf	4
  3709  05AE  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3710  05AF  0085               	movwf	5
  3711  05B0  0800               	movf	0,w	;code access
  3712  05B1  0020               	movlb	0	; select bank0
  3713  05B2  00C7               	movwf	??_main
  3714  05B3  0847               	movf	??_main,w
  3715  05B4  00C1               	movwf	ParallelLCD_WriteCharacter@character
  3716  05B5  0A67               	incf	_currentMenuInfoPtr_,w
  3717  05B6  0086               	movwf	6
  3718  05B7  0187               	clrf	7
  3719  05B8  0801               	movf	1,w
  3720  05B9  3E2A               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3721  05BA  0084               	movwf	4
  3722  05BB  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3723  05BC  1803               	skipnc
  3724  05BD  3E01               	addlw	1
  3725  05BE  0085               	movwf	5
  3726  05BF  0800               	movf	0,w	;code access
  3727  05C0  318D  253B  3180   	fcall	_ParallelLCD_WriteCharacter
  3728                           
  3729                           ;main.c: 870: break ;
  3730  05C3  2EB8               	goto	l430
  3731  05C4                     l3763:	
  3732                           ;main.c: 872: case STATE_METRONOME:
  3733                           
  3734                           
  3735                           ;main.c: 873: case STATE_ADJUST_BEAT_COUNT:
  3736                           ;main.c: 874: case STATE_ADJUST_TONE:
  3737                           ;main.c: 875: case STATE_ADJUST_DURATION_CLICK:
  3738                           ;main.c: 876: case STATE_ADJUST_DURATION_KEY:
  3739                           ;main.c: 877: case STATE_ADJUST_PULSE_WIDTH:
  3740                           ;main.c: 878: case STATE_ADJUST_OSCILLATOR_TUNE:
  3741                           ;main.c: 879: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , current
      +                          ValueInfoPtr_->message.title ) ;
  3742  05C4  0020               	movlb	0	; select bank0
  3743  05C5  0860               	movf	_currentValueInfoPtr_,w
  3744  05C6  0086               	movwf	6
  3745  05C7  0861               	movf	_currentValueInfoPtr_+1,w
  3746  05C8  0087               	movwf	7
  3747  05C9  3143               	addfsr 1,3
  3748  05CA  3F40               	moviw [0]fsr1
  3749  05CB  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3750  05CC  3F41               	moviw [1]fsr1
  3751  05CD  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3752  05CE  3080               	movlw	128
  3753  05CF  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3754                           
  3755                           ;main.c: 880: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , current
      +                          ValueInfoPtr_->message.value ) ;
  3756  05D2  0020               	movlb	0	; select bank0
  3757  05D3  0860               	movf	_currentValueInfoPtr_,w
  3758  05D4  0086               	movwf	6
  3759  05D5  0861               	movf	_currentValueInfoPtr_+1,w
  3760  05D6  0087               	movwf	7
  3761  05D7  3145               	addfsr 1,5
  3762  05D8  3F40               	moviw [0]fsr1
  3763  05D9  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3764  05DA  3F41               	moviw [1]fsr1
  3765  05DB  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3766  05DC  30C0               	movlw	192
  3767  05DD  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3768                           
  3769                           ;main.c: 881: if( machineState_ == STATE_METRONOME ) {
  3770  05E0  0020               	movlb	0	; select bank0
  3771  05E1  036A               	decf	_machineState_,w
  3772  05E2  1D03               	btfss	3,2
  3773  05E3  2DF4               	goto	l3771
  3774                           
  3775                           ;main.c: 882: if( isMute_ )
  3776  05E4  0868               	movf	_isMute_,w
  3777  05E5  1903               	btfsc	3,2
  3778  05E6  2E02               	goto	l3775
  3779                           
  3780                           ;main.c: 883: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0xA , MESSAGE.METRONO
      +                          ME.MUTE ) ;
  3781  05E7  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  3782  05E8  0084               	movwf	4
  3783  05E9  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3784  05EA  0085               	movwf	5
  3785  05EB  3F00               	moviw [0]fsr0
  3786  05EC  00C3               	movwf	ParallelLCD_WriteString@stringPtr
  3787  05ED  3F01               	moviw [1]fsr0
  3788  05EE  00C4               	movwf	ParallelLCD_WriteString@stringPtr+1
  3789  05EF  308A               	movlw	138
  3790  05F0  318D  25AF  3180   	fcall	_ParallelLCD_WriteString
  3791                           
  3792                           ;main.c: 884: }
  3793  05F3  2E02               	goto	l3775
  3794  05F4                     l3771:	
  3795                           
  3796                           ;main.c: 885: else if( machineState_ == STATE_ADJUST_TONE )
  3797  05F4  3009               	movlw	9
  3798  05F5  0020               	movlb	0	; select bank0
  3799  05F6  066A               	xorwf	_machineState_,w
  3800  05F7  1D03               	btfss	3,2
  3801  05F8  2E02               	goto	l3775
  3802                           
  3803                           ;main.c: 886: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT_1 | 0x5 , menuInfoTone
      +                          _.select - MENU_ITEM_TONE_ADJUST_TONE0 + '0' ) ;
  3804  05F9  083B               	movf	_menuInfoTone_,w
  3805  05FA  3E2F               	addlw	47
  3806  05FB  00C7               	movwf	??_main
  3807  05FC  0847               	movf	??_main,w
  3808  05FD  00C1               	movwf	ParallelLCD_WriteCharacter@character
  3809  05FE  30C5               	movlw	197
  3810  05FF  318D  253B  3180   	fcall	_ParallelLCD_WriteCharacter
  3811  0602                     l3775:	
  3812                           
  3813                           ;main.c: 888: events_.output.changeValue=1 ;
  3814  0602  0020               	movlb	0	; select bank0
  3815  0603  1563               	bsf	_events_+1,2
  3816                           
  3817                           ;main.c: 889: break ;
  3818  0604  2EB8               	goto	l430
  3819  0605                     l3777:	
  3820                           ;main.c: 891: case STATE_INFORMATION:
  3821                           
  3822                           
  3823                           ;main.c: 892: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          _INFORMATION[ menuInfoInformation_.select ] ) ;
  3824  0605  3535               	lslf	_menuInfoInformation_,w
  3825  0606  3E20               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3826  0607  0086               	movwf	6
  3827  0608  0187               	clrf	7
  3828  0609  3F40               	moviw [0]fsr1
  3829  060A  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3830  060B  3F41               	moviw [1]fsr1
  3831  060C  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3832  060D  3080               	movlw	128
  3833  060E  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3834                           
  3835                           ;main.c: 893: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0xA , &informationVal
      +                          ueBuffer[ menuInfoInformation_.select ] ) ;
  3836  0611  3007               	movlw	7
  3837  0612  0020               	movlb	0	; select bank0
  3838  0613  00C7               	movwf	??_main
  3839  0614  0847               	movf	??_main,w
  3840  0615  00F4               	movwf	___bmul@multiplicand
  3841  0616  0835               	movf	_menuInfoInformation_,w
  3842  0617  318D  256D  3180   	fcall	___bmul
  3843  061A  3E20               	addlw	(low (_informationValueBuffer| (0+256)))& (0+255)
  3844  061B  0020               	movlb	0	; select bank0
  3845  061C  00C3               	movwf	ParallelLCD_WriteString@stringPtr
  3846  061D  3001               	movlw	1
  3847  061E  00C4               	movwf	ParallelLCD_WriteString@stringPtr+1
  3848  061F  308A               	movlw	138
  3849  0620  318D  25AF  3180   	fcall	_ParallelLCD_WriteString
  3850                           
  3851                           ;main.c: 894: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , MESSAGE
      +                          _INFORMATION[ menuInfoInformation_.select + 1 ] ) ;
  3852  0623  0020               	movlb	0	; select bank0
  3853  0624  3535               	lslf	_menuInfoInformation_,w
  3854  0625  3E02               	addlw	2
  3855  0626  3E20               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3856  0627  0086               	movwf	6
  3857  0628  0187               	clrf	7
  3858  0629  3F40               	moviw [0]fsr1
  3859  062A  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3860  062B  3F41               	moviw [1]fsr1
  3861  062C  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3862  062D  30C0               	movlw	192
  3863  062E  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3864                           
  3865                           ;main.c: 895: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xA , &informationVal
      +                          ueBuffer[ menuInfoInformation_.select + 1 ] ) ;
  3866  0631  3007               	movlw	7
  3867  0632  0020               	movlb	0	; select bank0
  3868  0633  00C7               	movwf	??_main
  3869  0634  0847               	movf	??_main,w
  3870  0635  00F4               	movwf	___bmul@multiplicand
  3871  0636  0835               	movf	_menuInfoInformation_,w
  3872  0637  3E01               	addlw	1
  3873  0638  318D  256D  3180   	fcall	___bmul
  3874  063B  3E20               	addlw	(low (_informationValueBuffer| (0+256)))& (0+255)
  3875  063C  0020               	movlb	0	; select bank0
  3876  063D  00C3               	movwf	ParallelLCD_WriteString@stringPtr
  3877  063E  3001               	movlw	1
  3878  063F  00C4               	movwf	ParallelLCD_WriteString@stringPtr+1
  3879  0640  30CA               	movlw	202
  3880  0641  318D  25AF  3180   	fcall	_ParallelLCD_WriteString
  3881                           
  3882                           ;main.c: 896: break ;
  3883  0644  2EB8               	goto	l430
  3884  0645                     l3783:	
  3885                           ;main.c: 899: case STATE_CONFIRM_LOAD:
  3886                           
  3887                           
  3888                           ;main.c: 900: case STATE_CONFIRM_SAVE:
  3889                           ;main.c: 901: case STATE_CONFIRM_RESET:
  3890                           ;main.c: 902: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0xD , MESSAGE
      +                          .CONFIRM.NO ) ;
  3891  0645  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  3892  0646  0084               	movwf	4
  3893  0647  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  3894  0648  0085               	movwf	5
  3895  0649  3F00               	moviw [0]fsr0
  3896  064A  0020               	movlb	0	; select bank0
  3897  064B  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3898  064C  3F01               	moviw [1]fsr0
  3899  064D  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3900  064E  308D               	movlw	141
  3901  064F  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3902                           
  3903                           ;main.c: 903: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xD , MESSAGE
      +                          .CONFIRM.YES ) ;
  3904  0652  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3905  0653  0084               	movwf	4
  3906  0654  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3907  0655  0085               	movwf	5
  3908  0656  3F00               	moviw [0]fsr0
  3909  0657  0020               	movlb	0	; select bank0
  3910  0658  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3911  0659  3F01               	moviw [1]fsr0
  3912  065A  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3913  065B  30CD               	movlw	205
  3914  065C  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3915                           
  3916                           ;main.c: 904: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , currentMenuInfo
      +                          Ptr_->singleMessage ) ;
  3917  065F  0020               	movlb	0	; select bank0
  3918  0660  0867               	movf	_currentMenuInfoPtr_,w
  3919  0661  3E04               	addlw	4
  3920  0662  0086               	movwf	6
  3921  0663  0187               	clrf	7
  3922  0664  3F40               	moviw [0]fsr1
  3923  0665  00C3               	movwf	ParallelLCD_WriteString@stringPtr
  3924  0666  3F41               	moviw [1]fsr1
  3925  0667  00C4               	movwf	ParallelLCD_WriteString@stringPtr+1
  3926  0668  3080               	movlw	128
  3927  0669  318D  25AF  3180   	fcall	_ParallelLCD_WriteString
  3928                           
  3929                           ;main.c: 905: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentMenuInfoPtr_->
      +                          cursorPosition ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3930  066C  3024               	movlw	low (_CHAR_CODE| (0+32768))
  3931  066D  0084               	movwf	4
  3932  066E  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3933  066F  0085               	movwf	5
  3934  0670  0800               	movf	0,w	;code access
  3935  0671  0020               	movlb	0	; select bank0
  3936  0672  00C7               	movwf	??_main
  3937  0673  0847               	movf	??_main,w
  3938  0674  00C1               	movwf	ParallelLCD_WriteCharacter@character
  3939  0675  0A67               	incf	_currentMenuInfoPtr_,w
  3940  0676  0086               	movwf	6
  3941  0677  0187               	clrf	7
  3942  0678  0801               	movf	1,w
  3943  0679  3E2A               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3944  067A  0084               	movwf	4
  3945  067B  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3946  067C  1803               	skipnc
  3947  067D  3E01               	addlw	1
  3948  067E  0085               	movwf	5
  3949  067F  0800               	movf	0,w	;code access
  3950  0680  380C               	iorlw	12
  3951  0681  318D  253B  3180   	fcall	_ParallelLCD_WriteCharacter
  3952                           
  3953                           ;main.c: 906: break ;
  3954  0684  2EB8               	goto	l430
  3955  0685                     l3789:	
  3956                           ;main.c: 908: case STATE_LOAD:
  3957                           
  3958                           
  3959                           ;main.c: 909: case STATE_SAVE:
  3960                           ;main.c: 910: case STATE_INITIALIZE:
  3961                           ;main.c: 911: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , current
      +                          SingleMessage_ ) ;
  3962  0685  0020               	movlb	0	; select bank0
  3963  0686  085E               	movf	_currentSingleMessage_,w
  3964  0687  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3965  0688  085F               	movf	_currentSingleMessage_+1,w
  3966  0689  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3967  068A  3080               	movlw	128
  3968  068B  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3969                           
  3970                           ;main.c: 912: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  3971  068E  30C0               	movlw	192
  3972  068F  318D  2595  3180   	fcall	_ParallelLCD_ClearRow
  3973                           
  3974                           ;main.c: 913: break ;
  3975  0692  2EB8               	goto	l430
  3976  0693                     l3793:	
  3977                           ;main.c: 915: case STATE_ERROR:
  3978                           
  3979                           
  3980                           ;main.c: 916: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , MESSAGE
      +                          .ERROR.TITLE ) ;
  3981  0693  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  3982  0694  0084               	movwf	4
  3983  0695  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  3984  0696  0085               	movwf	5
  3985  0697  3F00               	moviw [0]fsr0
  3986  0698  0020               	movlb	0	; select bank0
  3987  0699  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3988  069A  3F01               	moviw [1]fsr0
  3989  069B  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3990  069C  3080               	movlw	128
  3991  069D  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  3992                           
  3993                           ;main.c: 917: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , current
      +                          SingleMessage_ ) ;
  3994  06A0  0020               	movlb	0	; select bank0
  3995  06A1  085E               	movf	_currentSingleMessage_,w
  3996  06A2  00C1               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  3997  06A3  085F               	movf	_currentSingleMessage_+1,w
  3998  06A4  00C2               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  3999  06A5  30C0               	movlw	192
  4000  06A6  318E  263B  3180   	fcall	_ParallelLCD_WriteStringClearing
  4001                           
  4002                           ;main.c: 920: }
  4003                           
  4004                           ;main.c: 918: break ;
  4005  06A9  2EB8               	goto	l430
  4006  06AA                     l3797:	
  4007  06AA  0020               	movlb	0	; select bank0
  4008  06AB  086A               	movf	_machineState_,w
  4009                           
  4010                           ; Switch size 1, requested type "space"
  4011                           ; Number of cases is 18, Range of values is 1 to 19
  4012                           ; switch strategies available:
  4013                           ; Name         Instructions Cycles
  4014                           ; direct_byte           47     9 (fixed)
  4015                           ; simple_byte           55    28 (average)
  4016                           ; jumptable            263     9 (fixed)
  4017                           ;	Chosen strategy is direct_byte
  4018  06AC  3EFF               	addlw	-1
  4019  06AD  1C03               	skipc
  4020  06AE  2EB8               	goto	l430
  4021  06AF  0084               	movwf	4
  4022  06B0  3013               	movlw	19
  4023  06B1  0204               	subwf	4,w
  4024  06B2  1803               	skipnc
  4025  06B3  2EB8               	goto	l430
  4026  06B4  3189               	movlp	high S3987
  4027  06B5  3504               	lslf	4,w
  4028  06B6  3EDA               	addlw	low S3987
  4029  06B7  0082               	movwf	2
  4030  06B8                     l430:	
  4031                           
  4032                           ;main.c: 922: }
  4033                           ;main.c: 925: if( (events_.output.changeValue&&!(events_.output.changeValue=0)) ) {
  4034  06B8  0020               	movlb	0	; select bank0
  4035  06B9  1D63               	btfss	_events_+1,2
  4036  06BA  29B1               	goto	l270
  4037  06BB  1163               	bcf	_events_+1,2
  4038                           
  4039                           ;main.c: 927: Uint16_t tmpValue ;
  4040                           ;main.c: 928: Char_t valueString[6] = "= 000" ;
  4041  06BC  30A0               	movlw	low main@F3100
  4042  06BD  0086               	movwf	6
  4043  06BE  3000               	movlw	high main@F3100
  4044  06BF  0087               	movwf	7
  4045  06C0  304B               	movlw	low main@valueString
  4046  06C1  0084               	movwf	4
  4047  06C2  3000               	movlw	high main@valueString
  4048  06C3  0085               	movwf	5
  4049  06C4  3006               	movlw	6
  4050  06C5  00C7               	movwf	??_main
  4051  06C6                     u3300:	
  4052  06C6  0016               	moviw fsr1++
  4053  06C7  001A               	movwi fsr0++
  4054  06C8  0BC7               	decfsz	??_main,f
  4055  06C9  2EC6               	goto	u3300
  4056                           
  4057                           ;main.c: 930: switch( machineState_ ) {
  4058  06CA  2EFA               	goto	l3815
  4059  06CB                     l3803:	
  4060                           ;main.c: 932: case STATE_METRONOME:
  4061                           
  4062                           
  4063                           ;main.c: 933: tmpValue = configration_.tempo ;
  4064  06CB  082B               	movf	_configration_+3,w
  4065  06CC  00D3               	movwf	main@tmpValue+1
  4066  06CD  082A               	movf	_configration_+2,w
  4067  06CE  00D2               	movwf	main@tmpValue
  4068                           
  4069                           ;main.c: 934: break ;
  4070  06CF  2F02               	goto	l3817
  4071  06D0                     l463:	
  4072                           ;main.c: 936: case STATE_ADJUST_OSCILLATOR_TUNE:
  4073                           
  4074                           
  4075                           ;main.c: 937: if( (Uint08_t)configration_.oscillatorTune & 0x80 ) {
  4076  06D0  1FB3               	btfss	_configration_+11,7
  4077  06D1  2EE5               	goto	l3809
  4078                           
  4079                           ;main.c: 938: tmpValue = -configration_.oscillatorTune ;
  4080  06D2  0833               	movf	_configration_+11,w
  4081  06D3  00C7               	movwf	??_main
  4082  06D4  01C8               	clrf	??_main+1
  4083  06D5  1BC7               	btfsc	??_main,7
  4084  06D6  03C8               	decf	??_main+1,f
  4085  06D7  09C7               	comf	??_main,f
  4086  06D8  09C8               	comf	??_main+1,f
  4087  06D9  0AC7               	incf	??_main,f
  4088  06DA  1903               	skipnz
  4089  06DB  0AC8               	incf	??_main+1,f
  4090  06DC  0847               	movf	??_main,w
  4091  06DD  00D2               	movwf	main@tmpValue
  4092  06DE  0848               	movf	??_main+1,w
  4093  06DF  00D3               	movwf	main@tmpValue+1
  4094                           
  4095                           ;main.c: 939: valueString[1] = '-' ;
  4096  06E0  302D               	movlw	45
  4097  06E1  00C7               	movwf	??_main
  4098  06E2  0847               	movf	??_main,w
  4099  06E3  00CC               	movwf	main@valueString+1
  4100                           
  4101                           ;main.c: 940: }
  4102  06E4  2F02               	goto	l3817
  4103  06E5                     l3809:	
  4104                           
  4105                           ;main.c: 941: else {
  4106                           ;main.c: 942: tmpValue = (Uint16_t)configration_.oscillatorTune ;
  4107  06E5  0833               	movf	_configration_+11,w
  4108  06E6  00D2               	movwf	main@tmpValue
  4109  06E7  01D3               	clrf	main@tmpValue+1
  4110  06E8  1BD2               	btfsc	main@tmpValue,7
  4111  06E9  03D3               	decf	main@tmpValue+1,f
  4112                           
  4113                           ;main.c: 943: }
  4114                           ;main.c: 944: break ;
  4115  06EA  2F02               	goto	l3817
  4116  06EB                     l3811:	
  4117                           ;main.c: 946: default:
  4118                           
  4119                           
  4120                           ;main.c: 947: tmpValue = *currentValueInfoPtr_->valuePtr ;
  4121  06EB  0860               	movf	_currentValueInfoPtr_,w
  4122  06EC  0086               	movwf	6
  4123  06ED  0861               	movf	_currentValueInfoPtr_+1,w
  4124  06EE  0087               	movwf	7
  4125  06EF  0801               	movf	1,w
  4126  06F0  0086               	movwf	6
  4127  06F1  0187               	clrf	7
  4128  06F2  0801               	movf	1,w
  4129  06F3  00C7               	movwf	??_main
  4130  06F4  01C8               	clrf	??_main+1
  4131  06F5  0847               	movf	??_main,w
  4132  06F6  00D2               	movwf	main@tmpValue
  4133  06F7  0848               	movf	??_main+1,w
  4134  06F8  00D3               	movwf	main@tmpValue+1
  4135                           
  4136                           ;main.c: 949: }
  4137                           
  4138                           ;main.c: 948: break ;
  4139  06F9  2F02               	goto	l3817
  4140  06FA                     l3815:	
  4141  06FA  086A               	movf	_machineState_,w
  4142                           
  4143                           ; Switch size 1, requested type "space"
  4144                           ; Number of cases is 2, Range of values is 1 to 10
  4145                           ; switch strategies available:
  4146                           ; Name         Instructions Cycles
  4147                           ; simple_byte            7     4 (average)
  4148                           ; direct_byte           29     9 (fixed)
  4149                           ; jumptable            263     9 (fixed)
  4150                           ;	Chosen strategy is simple_byte
  4151  06FB  3A01               	xorlw	1	; case 1
  4152  06FC  1903               	skipnz
  4153  06FD  2ECB               	goto	l3803
  4154  06FE  3A0B               	xorlw	11	; case 10
  4155  06FF  1903               	skipnz
  4156  0700  2ED0               	goto	l463
  4157  0701  2EEB               	goto	l3811
  4158  0702                     l3817:	
  4159                           
  4160                           ;main.c: 951: Bool_t isNonZero = BOOL_FALSE ;
  4161  0702  01D1               	clrf	main@isNonZero
  4162                           
  4163                           ;main.c: 952: const Uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 , } ;
  4164                           ;main.c: 953: for( Uint08_t i = 0 ; i < 3 ; i++ ) {
  4165  0703  01DA               	clrf	main@i
  4166  0704  3003               	movlw	3
  4167  0705  025A               	subwf	main@i,w
  4168  0706  1803               	btfsc	3,0
  4169  0707  2F67               	goto	l3847
  4170  0708                     l3823:	
  4171                           
  4172                           ;main.c: 954: Char_t chr = '0' ;
  4173  0708  3030               	movlw	48
  4174  0709  00C7               	movwf	??_main
  4175  070A  0847               	movf	??_main,w
  4176  070B  00D4               	movwf	main@chr
  4177  070C                     l3829:	
  4178                           ;main.c: 955: while( tmpValue >= COMPARE_UNITS[i] ) {
  4179                           
  4180  070C  085A               	movf	main@i,w
  4181  070D  3E27               	addlw	low (main@COMPARE_UNITS| (0+32768))
  4182  070E  0084               	movwf	4
  4183  070F  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  4184  0710  1803               	skipnc
  4185  0711  3E01               	addlw	1
  4186  0712  0085               	movwf	5
  4187  0713  0800               	movf	0,w	;code access
  4188  0714  00C7               	movwf	??_main
  4189  0715  01C8               	clrf	??_main+1
  4190  0716  0848               	movf	??_main+1,w
  4191  0717  0253               	subwf	main@tmpValue+1,w
  4192  0718  1D03               	skipz
  4193  0719  2F1C               	goto	u3335
  4194  071A  0847               	movf	??_main,w
  4195  071B  0252               	subwf	main@tmpValue,w
  4196  071C                     u3335:	
  4197  071C  1C03               	btfss	3,0
  4198  071D  2F31               	goto	l3831
  4199                           
  4200                           ;main.c: 956: tmpValue -= COMPARE_UNITS[i] ;
  4201  071E  085A               	movf	main@i,w
  4202  071F  3E27               	addlw	low (main@COMPARE_UNITS| (0+32768))
  4203  0720  0084               	movwf	4
  4204  0721  3088               	movlw	high (main@COMPARE_UNITS| (0+32768))
  4205  0722  1803               	skipnc
  4206  0723  3E01               	addlw	1
  4207  0724  0085               	movwf	5
  4208  0725  0800               	movf	0,w	;code access
  4209  0726  00C7               	movwf	??_main
  4210  0727  01C8               	clrf	??_main+1
  4211  0728  0847               	movf	??_main,w
  4212  0729  02D2               	subwf	main@tmpValue,f
  4213  072A  0848               	movf	??_main+1,w
  4214  072B  3BD3               	subwfb	main@tmpValue+1,f
  4215                           
  4216                           ;main.c: 957: chr++ ;
  4217  072C  3001               	movlw	1
  4218  072D  00C7               	movwf	??_main
  4219  072E  0847               	movf	??_main,w
  4220  072F  07D4               	addwf	main@chr,f
  4221  0730  2F0C               	goto	l3829
  4222  0731                     l3831:	
  4223                           
  4224                           ;main.c: 958: }
  4225                           ;main.c: 960: if( isNonZero || chr > '0' || i == 2 ) {
  4226  0731  0851               	movf	main@isNonZero,w
  4227  0732  1D03               	btfss	3,2
  4228  0733  2F3C               	goto	l3837
  4229  0734  3031               	movlw	49
  4230  0735  0254               	subwf	main@chr,w
  4231  0736  1803               	skipnc
  4232  0737  2F3C               	goto	l3837
  4233  0738  3002               	movlw	2
  4234  0739  065A               	xorwf	main@i,w
  4235  073A  1D03               	btfss	3,2
  4236  073B  2F48               	goto	l3841
  4237  073C                     l3837:	
  4238                           
  4239                           ;main.c: 961: valueString[ i + 2 ] = chr ;
  4240  073C  0854               	movf	main@chr,w
  4241  073D  00C7               	movwf	??_main
  4242  073E  085A               	movf	main@i,w
  4243  073F  3E02               	addlw	2
  4244  0740  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  4245  0741  0086               	movwf	6
  4246  0742  0187               	clrf	7
  4247  0743  0847               	movf	??_main,w
  4248  0744  0081               	movwf	1
  4249                           
  4250                           ;main.c: 962: isNonZero = BOOL_TRUE ;
  4251  0745  01D1               	clrf	main@isNonZero
  4252  0746  0AD1               	incf	main@isNonZero,f
  4253                           
  4254                           ;main.c: 963: }
  4255  0747  2F5F               	goto	l3843
  4256  0748                     l3841:	
  4257                           
  4258                           ;main.c: 964: else {
  4259                           ;main.c: 965: valueString[ i + 2 ] = valueString[ i + 1 ] ;
  4260  0748  085A               	movf	main@i,w
  4261  0749  3E01               	addlw	1
  4262  074A  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  4263  074B  0086               	movwf	6
  4264  074C  0187               	clrf	7
  4265  074D  0801               	movf	1,w
  4266  074E  00C7               	movwf	??_main
  4267  074F  085A               	movf	main@i,w
  4268  0750  3E02               	addlw	2
  4269  0751  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  4270  0752  0086               	movwf	6
  4271  0753  0187               	clrf	7
  4272  0754  0847               	movf	??_main,w
  4273  0755  0081               	movwf	1
  4274                           
  4275                           ;main.c: 966: valueString[ i + 1 ] = ' ' ;
  4276  0756  3020               	movlw	32
  4277  0757  00C7               	movwf	??_main
  4278  0758  085A               	movf	main@i,w
  4279  0759  3E01               	addlw	1
  4280  075A  3E4B               	addlw	(low (main@valueString| 0))& (0+255)
  4281  075B  0086               	movwf	6
  4282  075C  0187               	clrf	7
  4283  075D  0847               	movf	??_main,w
  4284  075E  0081               	movwf	1
  4285  075F                     l3843:	
  4286  075F  3001               	movlw	1
  4287  0760  00C7               	movwf	??_main
  4288  0761  0847               	movf	??_main,w
  4289  0762  07DA               	addwf	main@i,f
  4290  0763  3003               	movlw	3
  4291  0764  025A               	subwf	main@i,w
  4292  0765  1C03               	skipc
  4293  0766  2F08               	goto	l3823
  4294  0767                     l3847:	
  4295                           
  4296                           ;main.c: 967: }
  4297                           ;main.c: 968: }
  4298                           ;main.c: 970: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xB , &valueString ) 
      +                          ;
  4299  0767  304B               	movlw	low main@valueString
  4300  0768  00C3               	movwf	ParallelLCD_WriteString@stringPtr
  4301  0769  3000               	movlw	high main@valueString
  4302  076A  00C4               	movwf	ParallelLCD_WriteString@stringPtr+1
  4303  076B  30CB               	movlw	203
  4304  076C  318D  25AF  3180   	fcall	_ParallelLCD_WriteString
  4305                           
  4306                           ;main.c: 972: switch( machineState_ ) {
  4307  076F  2F89               	goto	l3857
  4308  0770                     l3849:	
  4309                           ;main.c: 973: case STATE_ADJUST_OSCILLATOR_TUNE:
  4310                           
  4311                           
  4312                           ;main.c: 974: OSCTUNE = configration_.oscillatorTune ;
  4313  0770  0020               	movlb	0	; select bank0
  4314  0771  0833               	movf	_configration_+11,w
  4315  0772  0021               	movlb	1	; select bank1
  4316  0773  2F87               	goto	L34
  4317  0774                     l3851:	
  4318                           ;main.c: 976: case STATE_ADJUST_TONE:
  4319                           
  4320                           ;main.c: 975: break ;
  4321                           
  4322                           
  4323                           ;main.c: 977: PR2 = *currentValueInfoPtr_->valuePtr ;
  4324  0774  0020               	movlb	0	; select bank0
  4325  0775  0860               	movf	_currentValueInfoPtr_,w
  4326  0776  0086               	movwf	6
  4327  0777  0861               	movf	_currentValueInfoPtr_+1,w
  4328  0778  0087               	movwf	7
  4329  0779  0801               	movf	1,w
  4330  077A  0086               	movwf	6
  4331  077B  0187               	clrf	7
  4332  077C  0801               	movf	1,w
  4333  077D  009B               	movwf	27	;volatile
  4334                           
  4335                           ;main.c: 978: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  4336  077E  081B               	movf	27,w	;volatile
  4337  077F  00C7               	movwf	??_main
  4338  0780  0A32               	incf	_configration_+10,w
  4339  0781  2F83               	goto	u3384
  4340  0782                     u3385:	
  4341  0782  36C7               	lsrf	??_main,f
  4342  0783                     u3384:	
  4343  0783  0B89               	decfsz	9,f
  4344  0784  2F82               	goto	u3385
  4345  0785  0847               	movf	??_main,w
  4346  0786  0026               	movlb	6	; select bank6
  4347  0787                     L34:	
  4348  0787  0098               	movwf	24	;volatile
  4349                           
  4350                           ;main.c: 980: }
  4351                           
  4352                           ;main.c: 979: break ;
  4353  0788  29B1               	goto	l270
  4354  0789                     l3857:	
  4355  0789  0020               	movlb	0	; select bank0
  4356  078A  086A               	movf	_machineState_,w
  4357                           
  4358                           ; Switch size 1, requested type "space"
  4359                           ; Number of cases is 2, Range of values is 9 to 10
  4360                           ; switch strategies available:
  4361                           ; Name         Instructions Cycles
  4362                           ; simple_byte            7     4 (average)
  4363                           ; direct_byte           13     9 (fixed)
  4364                           ; jumptable            263     9 (fixed)
  4365                           ;	Chosen strategy is simple_byte
  4366  078B  3A09               	xorlw	9	; case 9
  4367  078C  1903               	skipnz
  4368  078D  2F74               	goto	l3851
  4369  078E  3A03               	xorlw	3	; case 10
  4370  078F  1903               	skipnz
  4371  0790  2F70               	goto	l3849
  4372  0791  29B1               	goto	l270
  4373                           
  4374                           ;main.c: 981: }
  4375                           ;main.c: 983: }
  4376  0792  29B1               	goto	l270
  4377  0793                     __end_of_main:	
  4378                           
  4379                           	psect	swtext1
  4380  0A20                     __pswtext1:	
  4381  0A20                     S3979:	
  4382  0A20  3182  2A2B         	ljmp	l304
  4383  0A22  3181  29F7         	ljmp	l3409
  4384  0A24  3181  29F9         	ljmp	l3411
  4385  0A26  3182  2A01         	ljmp	l3417
  4386  0A28  3182  2A0A         	ljmp	l3423
  4387  0A2A  3182  2A0C         	ljmp	l3425
  4388  0A2C  3182  2A10         	ljmp	l3429
  4389  0A2E  3182  2A19         	ljmp	l3435
  4390  0A30  3182  2A0E         	ljmp	l3427
  4391  0A32  3182  2A22         	ljmp	l3441
  4392                           
  4393                           	psect	swtext2
  4394  09B4                     __pswtext2:	
  4395  09B4                     S3981:	
  4396  09B4  3181  29EF         	ljmp	l3403
  4397  09B6  3182  2A2F         	ljmp	l3449
  4398  09B8  3182  2A3B         	ljmp	l3451
  4399  09BA  3182  2A46         	ljmp	l3465
  4400  09BC  3182  2A6A         	ljmp	l3485
  4401  09BE  3182  2A6C         	ljmp	l3487
  4402  09C0  3182  2A6C         	ljmp	l3487
  4403  09C2  3182  2A6A         	ljmp	l3485
  4404  09C4  3182  2A73         	ljmp	l3493
  4405  09C6  3182  2A71         	ljmp	l3489
  4406  09C8  3182  2A6A         	ljmp	l3485
  4407  09CA  3182  2A5B         	ljmp	l3473
  4408  09CC  3182  2A8B         	ljmp	l3507
  4409  09CE  3182  2A55         	ljmp	l3467
  4410  09D0  3182  2A8B         	ljmp	l3507
  4411  09D2  3182  2A61         	ljmp	l3479
  4412  09D4  3182  2A7A         	ljmp	l3499
  4413  09D6  3182  2A8B         	ljmp	l3507
  4414  09D8  3182  2A79         	ljmp	l3497
  4415                           
  4416                           	psect	swtext3
  4417  098C                     __pswtext3:	
  4418  098C                     S3983:	
  4419  098C  3182  2AF0         	ljmp	l354
  4420  098E  3182  2A9E         	ljmp	l3521
  4421  0990  3182  2AA2         	ljmp	l3523
  4422  0992  3182  2AA4         	ljmp	l3525
  4423  0994  3182  2AA6         	ljmp	l3527
  4424  0996  3182  2AAE         	ljmp	l3535
  4425  0998  3182  2AB2         	ljmp	l3537
  4426  099A  3182  2AB6         	ljmp	l3539
  4427  099C  3182  2ABA         	ljmp	l3541
  4428  099E  3182  2AC7         	ljmp	l3551
  4429  09A0  3182  2ABF         	ljmp	l3543
  4430  09A2  3182  2AE9         	ljmp	l3559
  4431  09A4  3182  2AAA         	ljmp	l3531
  4432  09A6  3182  2AF0         	ljmp	l354
  4433  09A8  3182  2AA8         	ljmp	l3529
  4434  09AA  3182  2AF0         	ljmp	l354
  4435  09AC  3182  2AAC         	ljmp	l3533
  4436  09AE  3182  2AF0         	ljmp	l354
  4437  09B0  3182  2AF2         	ljmp	l3563
  4438  09B2  3183  2B09         	ljmp	l3571
  4439                           
  4440                           	psect	swtext4
  4441  0A00                     __pswtext4:	
  4442  0A00                     S3985:	
  4443  0A00  3184  2C1B         	ljmp	l384
  4444  0A02  3183  2BDD         	ljmp	l376
  4445  0A04  3183  2BDD         	ljmp	l376
  4446  0A06  3183  2BDD         	ljmp	l376
  4447  0A08  3184  2C3C         	ljmp	l394
  4448  0A0A  3184  2C3C         	ljmp	l394
  4449  0A0C  3184  2C3C         	ljmp	l394
  4450  0A0E  3184  2C3C         	ljmp	l394
  4451  0A10  3184  2C3C         	ljmp	l394
  4452  0A12  3184  2C3C         	ljmp	l394
  4453  0A14  3183  2BDD         	ljmp	l376
  4454  0A16  3183  2BDD         	ljmp	l376
  4455  0A18  3184  2C86         	ljmp	l383
  4456  0A1A  3183  2BDD         	ljmp	l376
  4457  0A1C  3184  2C86         	ljmp	l383
  4458  0A1E  3183  2BDD         	ljmp	l376
  4459                           
  4460                           	psect	swtext5
  4461  09DA                     __pswtext5:	
  4462  09DA                     S3987:	
  4463  09DA  3185  2DC4         	ljmp	l3763
  4464  09DC  3185  2D30         	ljmp	l3751
  4465  09DE  3185  2D30         	ljmp	l3751
  4466  09E0  3185  2D30         	ljmp	l3751
  4467  09E2  3185  2DC4         	ljmp	l3763
  4468  09E4  3185  2DC4         	ljmp	l3763
  4469  09E6  3185  2DC4         	ljmp	l3763
  4470  09E8  3185  2DC4         	ljmp	l3763
  4471  09EA  3185  2DC4         	ljmp	l3763
  4472  09EC  3185  2DC4         	ljmp	l3763
  4473  09EE  3186  2E05         	ljmp	l3777
  4474  09F0  3186  2E45         	ljmp	l3783
  4475  09F2  3186  2E85         	ljmp	l3789
  4476  09F4  3186  2E45         	ljmp	l3783
  4477  09F6  3186  2E85         	ljmp	l3789
  4478  09F8  3186  2E45         	ljmp	l3783
  4479  09FA  3186  2E85         	ljmp	l3789
  4480  09FC  3186  2EB8         	ljmp	l430
  4481  09FE  3186  2E93         	ljmp	l3793
  4482                           
  4483                           	psect	text1
  4484  0793                     __ptext1:	
  4485 ;; *************** function _initialize *****************
  4486 ;; Defined at:
  4487 ;;		line 5 in file "src/pic16f1827_init.h"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;		None               void
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4501 ;;      Params:         0       0       0       0       0       0
  4502 ;;      Locals:         0       0       0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0
  4504 ;;      Totals:         0       0       0       0       0       0
  4505 ;;Total ram usage:        0 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    1
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _initialize
  4517  0793                     _initialize:	
  4518                           
  4519                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4523  0793  0021               	movlb	1	; select bank1
  4524  0794  0819               	movf	25,w	;volatile
  4525  0795  3987               	andlw	-121
  4526  0796  3870               	iorlw	112
  4527  0797  0099               	movwf	25	;volatile
  4528                           
  4529                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4530  0798  30FC               	movlw	-4
  4531  0799  0599               	andwf	25,f	;volatile
  4532                           
  4533                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4534  079A  1799               	bsf	25,7	;volatile
  4535                           
  4536                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4537  079B  30C0               	movlw	-64
  4538  079C  0598               	andwf	24,f	;volatile
  4539                           
  4540                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4541  079D  0817               	movf	23,w	;volatile
  4542  079E  39C1               	andlw	-63
  4543  079F  381E               	iorlw	30
  4544  07A0  0097               	movwf	23	;volatile
  4545                           
  4546                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4547  07A1  138B               	bcf	11,7	;volatile
  4548                           
  4549                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4550  07A2  130B               	bcf	11,6	;volatile
  4551                           
  4552                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4553  07A3  1595               	bsf	21,3	;volatile
  4554                           
  4555                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4556  07A4  1295               	bcf	21,5	;volatile
  4557                           
  4558                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4559  07A5  1615               	bsf	21,4	;volatile
  4560                           
  4561                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4562  07A6  0020               	movlb	0	; select bank0
  4563  07A7  0195               	clrf	21	;volatile
  4564                           
  4565                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4566  07A8  128B               	bcf	11,5	;volatile
  4567                           
  4568                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4569  07A9  110B               	bcf	11,2	;volatile
  4570                           
  4571                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4572  07AA  1018               	bcf	24,0	;volatile
  4573                           
  4574                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4575  07AB  303F               	movlw	-193
  4576  07AC  0598               	andwf	24,f	;volatile
  4577                           
  4578                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4579  07AD  3030               	movlw	48
  4580  07AE  0498               	iorwf	24,f	;volatile
  4581                           
  4582                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4583  07AF  1118               	bcf	24,2	;volatile
  4584                           
  4585                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4586  07B0  0196               	clrf	22	;volatile
  4587  07B1  0197               	clrf	23	;volatile
  4588                           
  4589                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4590  07B2  1011               	bcf	17,0	;volatile
  4591                           
  4592                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4593  07B3  0021               	movlb	1	; select bank1
  4594  07B4  1011               	bcf	17,0	;volatile
  4595                           
  4596                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4597  07B5  0020               	movlb	0	; select bank0
  4598  07B6  111C               	bcf	28,2	;volatile
  4599                           
  4600                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4601  07B7  3087               	movlw	-121
  4602  07B8  059C               	andwf	28,f	;volatile
  4603                           
  4604                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4605  07B9  3003               	movlw	3
  4606  07BA  049C               	iorwf	28,f	;volatile
  4607                           
  4608                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4609  07BB  307C               	movlw	124
  4610  07BC  009B               	movwf	27	;volatile
  4611                           
  4612                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4613  07BD  019A               	clrf	26	;volatile
  4614                           
  4615                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4616  07BE  1091               	bcf	17,1	;volatile
  4617                           
  4618                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4619  07BF  0021               	movlb	1	; select bank1
  4620  07C0  1091               	bcf	17,1	;volatile
  4621                           
  4622                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4623  07C1  0028               	movlb	8	; select bank8
  4624  07C2  1117               	bcf	23,2	;volatile
  4625                           
  4626                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4627  07C3  3087               	movlw	-121
  4628  07C4  0597               	andwf	23,f	;volatile
  4629                           
  4630                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4631  07C5  0817               	movf	23,w	;volatile
  4632  07C6  39FC               	andlw	-4
  4633  07C7  3801               	iorlw	1
  4634  07C8  0097               	movwf	23	;volatile
  4635                           
  4636                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4637  07C9  304F               	movlw	79
  4638  07CA  0096               	movwf	22	;volatile
  4639                           
  4640                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4641  07CB  0195               	clrf	21	;volatile
  4642                           
  4643                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4644  07CC  0020               	movlb	0	; select bank0
  4645  07CD  1093               	bcf	19,1	;volatile
  4646                           
  4647                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4648  07CE  0021               	movlb	1	; select bank1
  4649  07CF  1093               	bcf	19,1	;volatile
  4650                           
  4651                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4652  07D0  0028               	movlb	8	; select bank8
  4653  07D1  111E               	bcf	30,2	;volatile
  4654                           
  4655                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4656  07D2  3087               	movlw	-121
  4657  07D3  059E               	andwf	30,f	;volatile
  4658                           
  4659                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4660  07D4  30FC               	movlw	-4
  4661  07D5  059E               	andwf	30,f	;volatile
  4662                           
  4663                           ;pic16f1827_init.h: 59: PR6 = 99 ;
  4664  07D6  3063               	movlw	99
  4665  07D7  009D               	movwf	29	;volatile
  4666                           
  4667                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4668  07D8  019C               	clrf	28	;volatile
  4669                           
  4670                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4671  07D9  0020               	movlb	0	; select bank0
  4672  07DA  1193               	bcf	19,3	;volatile
  4673                           
  4674                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4675  07DB  0021               	movlb	1	; select bank1
  4676  07DC  1193               	bcf	19,3	;volatile
  4677                           
  4678                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4679  07DD  0025               	movlb	5	; select bank5
  4680  07DE  019E               	clrf	30	;volatile
  4681                           
  4682                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4683  07DF  30F0               	movlw	-16
  4684  07E0  0593               	andwf	19,f	;volatile
  4685                           
  4686                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4687  07E1  30F0               	movlw	-16
  4688  07E2  059A               	andwf	26,f	;volatile
  4689                           
  4690                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4691  07E3  30F0               	movlw	-16
  4692  07E4  0026               	movlb	6	; select bank6
  4693  07E5  0593               	andwf	19,f	;volatile
  4694                           
  4695                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4696  07E6  081A               	movf	26,w	;volatile
  4697  07E7  39F0               	andlw	-16
  4698  07E8  380C               	iorlw	12
  4699  07E9  009A               	movwf	26	;volatile
  4700                           
  4701                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4702  07EA  30CF               	movlw	-49
  4703  07EB  059A               	andwf	26,f	;volatile
  4704                           
  4705                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4706  07EC  303F               	movlw	-193
  4707  07ED  0025               	movlb	5	; select bank5
  4708  07EE  059E               	andwf	30,f	;volatile
  4709                           
  4710                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4711  07EF  0026               	movlb	6	; select bank6
  4712  07F0  0198               	clrf	24	;volatile
  4713                           
  4714                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4715  07F1  0199               	clrf	25	;volatile
  4716                           
  4717                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4718  07F2  0023               	movlb	3	; select bank3
  4719  07F3  018C               	clrf	12	;volatile
  4720                           
  4721                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4722  07F4  018D               	clrf	13	;volatile
  4723                           
  4724                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4725  07F5  30E0               	movlw	224
  4726  07F6  0021               	movlb	1	; select bank1
  4727  07F7  008C               	movwf	12	;volatile
  4728                           
  4729                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4730  07F8  018D               	clrf	13	;volatile
  4731  07F9  0008               	return
  4732  07FA                     __end_of_initialize:	
  4733                           
  4734                           	psect	text2
  4735  0D6D                     __ptext2:	
  4736 ;; *************** function ___bmul *****************
  4737 ;; Defined at:
  4738 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  multiplier      1    wreg     unsigned char 
  4741 ;;  multiplicand    1    4[COMMON] unsigned char 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  multiplier      1    1[BANK0 ] unsigned char 
  4744 ;;  product         1    0[BANK0 ] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      unsigned char 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4754 ;;      Params:         1       0       0       0       0       0
  4755 ;;      Locals:         0       2       0       0       0       0
  4756 ;;      Temps:          1       0       0       0       0       0
  4757 ;;      Totals:         2       2       0       0       0       0
  4758 ;;Total ram usage:        4 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    1
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function ___bmul
  4770  0D6D                     ___bmul:	
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4774                           ;___bmul@multiplier stored from wreg
  4775  0D6D  0020               	movlb	0	; select bank0
  4776  0D6E  00C2               	movwf	___bmul@multiplier
  4777  0D6F  01C1               	clrf	___bmul@product
  4778  0D70                     l3275:	
  4779  0D70  1C42               	btfss	___bmul@multiplier,0
  4780  0D71  2D76               	goto	l3279
  4781  0D72  0874               	movf	___bmul@multiplicand,w
  4782  0D73  00F5               	movwf	??___bmul
  4783  0D74  0875               	movf	??___bmul,w
  4784  0D75  07C1               	addwf	___bmul@product,f
  4785  0D76                     l3279:	
  4786  0D76  1003               	clrc
  4787  0D77  0DF4               	rlf	___bmul@multiplicand,f
  4788  0D78  1003               	clrc
  4789  0D79  0CC2               	rrf	___bmul@multiplier,f
  4790  0D7A  0842               	movf	___bmul@multiplier,w
  4791  0D7B  1D03               	btfss	3,2
  4792  0D7C  2D70               	goto	l3275
  4793  0D7D  0841               	movf	___bmul@product,w
  4794  0D7E  0008               	return
  4795  0D7F                     __end_of___bmul:	
  4796                           
  4797                           	psect	text3
  4798  0E3B                     __ptext3:	
  4799 ;; *************** function _ParallelLCD_WriteStringClearing *****************
  4800 ;; Defined at:
  4801 ;;		line 106 in file "src/../../_Common/ParallelLCD.h"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  position        1    wreg     enum E2805
  4804 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4805 ;;		 -> STR_48(10), STR_47(14), STR_46(12), STR_45(14), 
  4806 ;;		 -> STR_44(9), STR_43(9), STR_42(6), STR_41(9), 
  4807 ;;		 -> STR_40(5), STR_39(5), STR_38(11), STR_37(14), 
  4808 ;;		 -> STR_36(6), STR_35(10), ROM(4096), STR_31(10), 
  4809 ;;		 -> STR_30(7), STR_29(13), STR_28(12), STR_27(6), 
  4810 ;;		 -> STR_26(7), STR_25(4), STR_24(4), STR_22(10), 
  4811 ;;		 -> STR_21(11), STR_20(11), STR_19(11), STR_18(8), 
  4812 ;;		 -> STR_17(10), STR_16(12), STR_15(9), STR_14(6), 
  4813 ;;		 -> STR_13(6), STR_12(6), STR_11(9), STR_10(6), 
  4814 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(10), 
  4815 ;;		 -> STR_5(13), STR_4(14), STR_3(10), STR_2(11), 
  4816 ;;		 -> STR_1(9), 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  position        1    3[BANK0 ] enum E2805
  4819 ;;  i               1    4[BANK0 ] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4829 ;;      Params:         0       2       0       0       0       0
  4830 ;;      Locals:         0       2       0       0       0       0
  4831 ;;      Temps:          0       1       0       0       0       0
  4832 ;;      Totals:         0       5       0       0       0       0
  4833 ;;Total ram usage:        5 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		_ParallelLCD_WriteByte
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           
  4844                           ;psect for function _ParallelLCD_WriteStringClearing
  4845  0E3B                     _ParallelLCD_WriteStringClearing:	
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _ParallelLCD_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  4849                           ;ParallelLCD_WriteStringClearing@position stored from wreg
  4850  0E3B  0020               	movlb	0	; select bank0
  4851  0E3C  00C4               	movwf	ParallelLCD_WriteStringClearing@position
  4852                           
  4853                           ;ParallelLCD.h: 107: ParallelLCD_WriteByte( position & 0xF0 , BOOL_FALSE ) ;
  4854  0E3D  01F4               	clrf	ParallelLCD_WriteByte@r
  4855  0E3E  0844               	movf	ParallelLCD_WriteStringClearing@position,w
  4856  0E3F  39F0               	andlw	240
  4857  0E40  318D  257F  318E   	fcall	_ParallelLCD_WriteByte
  4858                           
  4859                           ;ParallelLCD.h: 108: for ( Uint08_t i = 0 ; i != 16 ; i++ ) {
  4860  0E43  0020               	movlb	0	; select bank0
  4861  0E44  01C5               	clrf	ParallelLCD_WriteStringClearing@i
  4862  0E45                     L42:	
  4863  0E45  3010               	movlw	16
  4864  0E46  0645               	xorwf	ParallelLCD_WriteStringClearing@i,w
  4865  0E47  1903               	btfsc	3,2
  4866  0E48  0008               	return
  4867                           
  4868                           ;ParallelLCD.h: 109: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4869  0E49  0844               	movf	ParallelLCD_WriteStringClearing@position,w
  4870  0E4A  390F               	andlw	15
  4871  0E4B  0245               	subwf	ParallelLCD_WriteStringClearing@i,w
  4872  0E4C  1C03               	skipc
  4873  0E4D  2E65               	goto	l3153
  4874  0E4E  0841               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4875  0E4F  0084               	movwf	4
  4876  0E50  0842               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4877  0E51  0085               	movwf	5
  4878  0E52  0012               	moviw fsr0++
  4879  0E53  1903               	btfsc	3,2
  4880  0E54  2E65               	goto	l3153
  4881                           
  4882                           ;ParallelLCD.h: 110: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4883  0E55  01F4               	clrf	ParallelLCD_WriteByte@r
  4884  0E56  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4885  0E57  0841               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4886  0E58  0084               	movwf	4
  4887  0E59  0842               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4888  0E5A  0085               	movwf	5
  4889  0E5B  0800               	movf	0,w	;code access
  4890  0E5C  318D  257F  318E   	fcall	_ParallelLCD_WriteByte
  4891  0E5F  3001               	movlw	1
  4892  0E60  0020               	movlb	0	; select bank0
  4893  0E61  07C1               	addwf	ParallelLCD_WriteStringClearing@stringPtr,f
  4894  0E62  3000               	movlw	0
  4895  0E63  3DC2               	addwfc	ParallelLCD_WriteStringClearing@stringPtr+1,f
  4896  0E64  2E6B               	goto	l3155
  4897  0E65                     l3153:	
  4898                           
  4899                           ;ParallelLCD.h: 111: else
  4900                           ;ParallelLCD.h: 112: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4901  0E65  01F4               	clrf	ParallelLCD_WriteByte@r
  4902  0E66  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4903  0E67  3020               	movlw	32
  4904  0E68  318D  257F  318E   	fcall	_ParallelLCD_WriteByte
  4905  0E6B                     l3155:	
  4906  0E6B  3001               	movlw	1
  4907  0E6C  0020               	movlb	0	; select bank0
  4908  0E6D  00C3               	movwf	??_ParallelLCD_WriteStringClearing
  4909  0E6E  0843               	movf	??_ParallelLCD_WriteStringClearing,w
  4910  0E6F  07C5               	addwf	ParallelLCD_WriteStringClearing@i,f
  4911  0E70  2E45               	goto	L42
  4912  0E71                     __end_of_ParallelLCD_WriteStringClearing:	
  4913                           
  4914                           	psect	text4
  4915  0DAF                     __ptext4:	
  4916 ;; *************** function _ParallelLCD_WriteString *****************
  4917 ;; Defined at:
  4918 ;;		line 97 in file "src/../../_Common/ParallelLCD.h"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  position        1    wreg     enum E2805
  4921 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  4922 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_34(8), STR_33(7), 
  4923 ;;		 -> STR_32(7), ROM(4096), STR_23(7), 
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  position        1    5[BANK0 ] enum E2805
  4926 ;; Return value:  Size  Location     Type
  4927 ;;		None               void
  4928 ;; Registers used:
  4929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4935 ;;      Params:         0       2       0       0       0       0
  4936 ;;      Locals:         0       1       0       0       0       0
  4937 ;;      Temps:          0       1       0       0       0       0
  4938 ;;      Totals:         0       4       0       0       0       0
  4939 ;;Total ram usage:        4 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    2
  4942 ;; This function calls:
  4943 ;;		_ParallelLCD_WriteByte
  4944 ;; This function is called by:
  4945 ;;		_main
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _ParallelLCD_WriteString
  4951  0DAF                     _ParallelLCD_WriteString:	
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _ParallelLCD_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4955                           ;ParallelLCD_WriteString@position stored from wreg
  4956  0DAF  0020               	movlb	0	; select bank0
  4957  0DB0  00C6               	movwf	ParallelLCD_WriteString@position
  4958                           
  4959                           ;ParallelLCD.h: 98: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4960  0DB1  01F4               	clrf	ParallelLCD_WriteByte@r
  4961  0DB2  0846               	movf	ParallelLCD_WriteString@position,w
  4962  0DB3  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  4963  0DB6                     l3135:	
  4964                           ;ParallelLCD.h: 99: while ( *stringPtr ) {
  4965                           
  4966  0DB6  0020               	movlb	0	; select bank0
  4967  0DB7  0843               	movf	ParallelLCD_WriteString@stringPtr,w
  4968  0DB8  0084               	movwf	4
  4969  0DB9  0844               	movf	ParallelLCD_WriteString@stringPtr+1,w
  4970  0DBA  0085               	movwf	5
  4971  0DBB  0012               	moviw fsr0++
  4972  0DBC  1903               	btfsc	3,2
  4973  0DBD  0008               	return
  4974                           
  4975                           ;ParallelLCD.h: 100: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4976  0DBE  01F4               	clrf	ParallelLCD_WriteByte@r
  4977  0DBF  0AF4               	incf	ParallelLCD_WriteByte@r,f
  4978  0DC0  0020               	movlb	0	; select bank0
  4979  0DC1  0843               	movf	ParallelLCD_WriteString@stringPtr,w
  4980  0DC2  0084               	movwf	4
  4981  0DC3  0844               	movf	ParallelLCD_WriteString@stringPtr+1,w
  4982  0DC4  0085               	movwf	5
  4983  0DC5  0800               	movf	0,w	;code access
  4984  0DC6  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  4985  0DC9  3001               	movlw	1
  4986  0DCA  0020               	movlb	0	; select bank0
  4987  0DCB  07C3               	addwf	ParallelLCD_WriteString@stringPtr,f
  4988  0DCC  3000               	movlw	0
  4989  0DCD  3DC4               	addwfc	ParallelLCD_WriteString@stringPtr+1,f
  4990  0DCE  2DB6               	goto	l3135
  4991  0DCF                     __end_of_ParallelLCD_WriteString:	
  4992                           
  4993                           	psect	text5
  4994  0D3B                     __ptext5:	
  4995 ;; *************** function _ParallelLCD_WriteCharacter *****************
  4996 ;; Defined at:
  4997 ;;		line 90 in file "src/../../_Common/ParallelLCD.h"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  position        1    wreg     enum E2805
  5000 ;;  character       1    0[BANK0 ] unsigned char 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  position        1    1[BANK0 ] enum E2805
  5003 ;; Return value:  Size  Location     Type
  5004 ;;		None               void
  5005 ;; Registers used:
  5006 ;;		wreg, status,2, status,0, pclath, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5012 ;;      Params:         0       1       0       0       0       0
  5013 ;;      Locals:         0       1       0       0       0       0
  5014 ;;      Temps:          0       0       0       0       0       0
  5015 ;;      Totals:         0       2       0       0       0       0
  5016 ;;Total ram usage:        2 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    2
  5019 ;; This function calls:
  5020 ;;		_ParallelLCD_WriteByte
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _ParallelLCD_WriteCharacter
  5028  0D3B                     _ParallelLCD_WriteCharacter:	
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _ParallelLCD_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  5032                           ;ParallelLCD_WriteCharacter@position stored from wreg
  5033  0D3B  0020               	movlb	0	; select bank0
  5034  0D3C  00C2               	movwf	ParallelLCD_WriteCharacter@position
  5035                           
  5036                           ;ParallelLCD.h: 91: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  5037  0D3D  01F4               	clrf	ParallelLCD_WriteByte@r
  5038  0D3E  0842               	movf	ParallelLCD_WriteCharacter@position,w
  5039  0D3F  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  5040                           
  5041                           ;ParallelLCD.h: 92: ParallelLCD_WriteByte( character , BOOL_TRUE ) ;
  5042  0D42  01F4               	clrf	ParallelLCD_WriteByte@r
  5043  0D43  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5044  0D44  0020               	movlb	0	; select bank0
  5045  0D45  0841               	movf	ParallelLCD_WriteCharacter@character,w
  5046  0D46  318D  257F         	fcall	_ParallelLCD_WriteByte
  5047  0D48  0008               	return
  5048  0D49                     __end_of_ParallelLCD_WriteCharacter:	
  5049                           
  5050                           	psect	text6
  5051  0E11                     __ptext6:	
  5052 ;; *************** function _ParallelLCD_SetCgram *****************
  5053 ;; Defined at:
  5054 ;;		line 143 in file "src/../../_Common/ParallelLCD.h"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  charCode        1    wreg     unsigned char 
  5057 ;;  bitmap          2    0[BANK0 ] PTR const unsigned char 
  5058 ;;		 -> BITMAP(24), 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  charCode        1    3[BANK0 ] unsigned char 
  5061 ;;  i               1    4[BANK0 ] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;		None               void
  5064 ;; Registers used:
  5065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5071 ;;      Params:         0       2       0       0       0       0
  5072 ;;      Locals:         0       2       0       0       0       0
  5073 ;;      Temps:          0       1       0       0       0       0
  5074 ;;      Totals:         0       5       0       0       0       0
  5075 ;;Total ram usage:        5 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    2
  5078 ;; This function calls:
  5079 ;;		_ParallelLCD_WriteByte
  5080 ;; This function is called by:
  5081 ;;		_main
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _ParallelLCD_SetCgram
  5087  0E11                     _ParallelLCD_SetCgram:	
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _ParallelLCD_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5091                           ;ParallelLCD_SetCgram@charCode stored from wreg
  5092  0E11  0020               	movlb	0	; select bank0
  5093  0E12  00C4               	movwf	ParallelLCD_SetCgram@charCode
  5094                           
  5095                           ;ParallelLCD.h: 144: ParallelLCD_WriteByte( ( ( charCode << 3 ) & 0b00111111 ) | 0b01000
      +                          000 , BOOL_FALSE ) ;
  5096  0E13  01F4               	clrf	ParallelLCD_WriteByte@r
  5097  0E14  0844               	movf	ParallelLCD_SetCgram@charCode,w
  5098  0E15  00C3               	movwf	??_ParallelLCD_SetCgram
  5099  0E16  3002               	movlw	2
  5100  0E17                     u2485:	
  5101  0E17  35C3               	lslf	??_ParallelLCD_SetCgram,f
  5102  0E18  3EFF               	addlw	-1
  5103  0E19  1D03               	skipz
  5104  0E1A  2E17               	goto	u2485
  5105  0E1B  3543               	lslf	??_ParallelLCD_SetCgram,w
  5106  0E1C  393F               	andlw	63
  5107  0E1D  3840               	iorlw	64
  5108  0E1E  318D  257F  318E   	fcall	_ParallelLCD_WriteByte
  5109                           
  5110                           ;ParallelLCD.h: 145: for ( Uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  5111  0E21  0020               	movlb	0	; select bank0
  5112  0E22  01C5               	clrf	ParallelLCD_SetCgram@i
  5113  0E23                     L43:	
  5114  0E23  3008               	movlw	8
  5115  0E24  0645               	xorwf	ParallelLCD_SetCgram@i,w
  5116  0E25  1903               	btfsc	3,2
  5117  0E26  0008               	return
  5118                           
  5119                           ;ParallelLCD.h: 146: ParallelLCD_WriteByte( *bitmap , BOOL_TRUE ) ;
  5120  0E27  01F4               	clrf	ParallelLCD_WriteByte@r
  5121  0E28  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5122  0E29  0841               	movf	ParallelLCD_SetCgram@bitmap,w
  5123  0E2A  0084               	movwf	4
  5124  0E2B  0842               	movf	ParallelLCD_SetCgram@bitmap+1,w
  5125  0E2C  0085               	movwf	5
  5126  0E2D  0800               	movf	0,w	;code access
  5127  0E2E  318D  257F  318E   	fcall	_ParallelLCD_WriteByte
  5128  0E31  3001               	movlw	1
  5129  0E32  0020               	movlb	0	; select bank0
  5130  0E33  00C3               	movwf	??_ParallelLCD_SetCgram
  5131  0E34  0843               	movf	??_ParallelLCD_SetCgram,w
  5132  0E35  07C5               	addwf	ParallelLCD_SetCgram@i,f
  5133  0E36  3001               	movlw	1
  5134  0E37  07C1               	addwf	ParallelLCD_SetCgram@bitmap,f
  5135  0E38  3000               	movlw	0
  5136  0E39  3DC2               	addwfc	ParallelLCD_SetCgram@bitmap+1,f
  5137  0E3A  2E23               	goto	L43
  5138  0E3B                     __end_of_ParallelLCD_SetCgram:	
  5139                           
  5140                           	psect	text7
  5141  0DCF                     __ptext7:	
  5142 ;; *************** function _ParallelLCD_Initialize *****************
  5143 ;; Defined at:
  5144 ;;		line 76 in file "src/../../_Common/ParallelLCD.h"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  configFuncti    1    wreg     enum E2783
  5147 ;;  configDispla    1    0[BANK0 ] enum E2789
  5148 ;;  configCursor    1    1[BANK0 ] enum E2795
  5149 ;;  configEntryM    1    2[BANK0 ] enum E2800
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  configFuncti    1    3[BANK0 ] enum E2783
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0, pclath, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5161 ;;      Params:         0       3       0       0       0       0
  5162 ;;      Locals:         0       1       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0
  5164 ;;      Totals:         0       4       0       0       0       0
  5165 ;;Total ram usage:        4 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    2
  5168 ;; This function calls:
  5169 ;;		_ParallelLCD_WriteByte
  5170 ;; This function is called by:
  5171 ;;		_main
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function _ParallelLCD_Initialize
  5177  0DCF                     _ParallelLCD_Initialize:	
  5178                           
  5179                           ;incstack = 0
  5180                           ; Regs used in _ParallelLCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5181                           ;ParallelLCD_Initialize@configFunction stored from wreg
  5182  0DCF  0020               	movlb	0	; select bank0
  5183  0DD0  00C4               	movwf	ParallelLCD_Initialize@configFunction
  5184                           
  5185                           ;ParallelLCD.h: 82: ParallelLCD_WriteByte( ( configFunction & 0x1C ) | 0x20 , BOOL_FALSE
      +                           ) ;
  5186  0DD1  01F4               	clrf	ParallelLCD_WriteByte@r
  5187  0DD2  0844               	movf	ParallelLCD_Initialize@configFunction,w
  5188  0DD3  391C               	andlw	28
  5189  0DD4  3820               	iorlw	32
  5190  0DD5  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  5191                           
  5192                           ;ParallelLCD.h: 83: ParallelLCD_WriteByte( ( configDisplay & 0x0C ) | 0x08 , BOOL_FALSE 
      +                          ) ;
  5193  0DD8  01F4               	clrf	ParallelLCD_WriteByte@r
  5194  0DD9  0020               	movlb	0	; select bank0
  5195  0DDA  0841               	movf	ParallelLCD_Initialize@configDisplay,w
  5196  0DDB  390C               	andlw	12
  5197  0DDC  3808               	iorlw	8
  5198  0DDD  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  5199                           
  5200                           ;ParallelLCD.h: 84: ParallelLCD_WriteByte( ( configCursor & 0x07 ) | 0x10 , BOOL_FALSE )
      +                           ;
  5201  0DE0  01F4               	clrf	ParallelLCD_WriteByte@r
  5202  0DE1  0020               	movlb	0	; select bank0
  5203  0DE2  0842               	movf	ParallelLCD_Initialize@configCursor,w
  5204  0DE3  3907               	andlw	7
  5205  0DE4  3810               	iorlw	16
  5206  0DE5  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  5207                           
  5208                           ;ParallelLCD.h: 85: ParallelLCD_WriteByte( ( configEntryMode & 0x03 ) | 0x04 , BOOL_FALS
      +                          E ) ;
  5209  0DE8  01F4               	clrf	ParallelLCD_WriteByte@r
  5210  0DE9  0020               	movlb	0	; select bank0
  5211  0DEA  0843               	movf	ParallelLCD_Initialize@configEntryMode,w
  5212  0DEB  3903               	andlw	3
  5213  0DEC  3804               	iorlw	4
  5214  0DED  318D  257F         	fcall	_ParallelLCD_WriteByte
  5215  0DEF  0008               	return
  5216  0DF0                     __end_of_ParallelLCD_Initialize:	
  5217                           
  5218                           	psect	text8
  5219  0D33                     __ptext8:	
  5220 ;; *************** function _ParallelLCD_ClearDisplay *****************
  5221 ;; Defined at:
  5222 ;;		line 151 in file "src/../../_Common/ParallelLCD.h"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;		None
  5227 ;; Return value:  Size  Location     Type
  5228 ;;		None               void
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0, pclath, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5236 ;;      Params:         0       0       0       0       0       0
  5237 ;;      Locals:         0       0       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0       0
  5239 ;;      Totals:         0       0       0       0       0       0
  5240 ;;Total ram usage:        0 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    3
  5243 ;; This function calls:
  5244 ;;		_ParallelLCD_ClearRow
  5245 ;; This function is called by:
  5246 ;;		_main
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _ParallelLCD_ClearDisplay
  5252  0D33                     _ParallelLCD_ClearDisplay:	
  5253                           
  5254                           ;ParallelLCD.h: 152: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_0 ) ;
  5255                           
  5256                           ;incstack = 0
  5257                           ; Regs used in _ParallelLCD_ClearDisplay: [wreg+status,2+status,0+pclath+cstack]
  5258  0D33  3080               	movlw	128
  5259  0D34  318D  2595  318D   	fcall	_ParallelLCD_ClearRow
  5260                           
  5261                           ;ParallelLCD.h: 153: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  5262  0D37  30C0               	movlw	192
  5263  0D38  318D  2595         	fcall	_ParallelLCD_ClearRow
  5264  0D3A  0008               	return
  5265  0D3B                     __end_of_ParallelLCD_ClearDisplay:	
  5266                           
  5267                           	psect	text9
  5268  0D95                     __ptext9:	
  5269 ;; *************** function _ParallelLCD_ClearRow *****************
  5270 ;; Defined at:
  5271 ;;		line 127 in file "src/../../_Common/ParallelLCD.h"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  rowSelect       1    wreg     enum E2805
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  rowSelect       1    1[BANK0 ] enum E2805
  5276 ;;  i               1    2[BANK0 ] unsigned char 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;		None               void
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0, pclath, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5286 ;;      Params:         0       0       0       0       0       0
  5287 ;;      Locals:         0       2       0       0       0       0
  5288 ;;      Temps:          0       1       0       0       0       0
  5289 ;;      Totals:         0       3       0       0       0       0
  5290 ;;Total ram usage:        3 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    2
  5293 ;; This function calls:
  5294 ;;		_ParallelLCD_WriteByte
  5295 ;; This function is called by:
  5296 ;;		_ParallelLCD_ClearDisplay
  5297 ;;		_main
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           
  5302                           ;psect for function _ParallelLCD_ClearRow
  5303  0D95                     _ParallelLCD_ClearRow:	
  5304                           
  5305                           ;incstack = 0
  5306                           ; Regs used in _ParallelLCD_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  5307                           ;ParallelLCD_ClearRow@rowSelect stored from wreg
  5308  0D95  0020               	movlb	0	; select bank0
  5309  0D96  00C2               	movwf	ParallelLCD_ClearRow@rowSelect
  5310                           
  5311                           ;ParallelLCD.h: 128: ParallelLCD_WriteByte( rowSelect & 0xF0 , BOOL_FALSE ) ;
  5312  0D97  01F4               	clrf	ParallelLCD_WriteByte@r
  5313  0D98  0842               	movf	ParallelLCD_ClearRow@rowSelect,w
  5314  0D99  39F0               	andlw	240
  5315  0D9A  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  5316                           
  5317                           ;ParallelLCD.h: 129: for ( Uint08_t i = 0 ; i != 16 ; i++ )
  5318  0D9D  0020               	movlb	0	; select bank0
  5319  0D9E  01C3               	clrf	ParallelLCD_ClearRow@i
  5320  0D9F                     L44:	
  5321  0D9F  3010               	movlw	16
  5322  0DA0  0643               	xorwf	ParallelLCD_ClearRow@i,w
  5323  0DA1  1903               	btfsc	3,2
  5324  0DA2  0008               	return
  5325                           
  5326                           ;ParallelLCD.h: 130: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  5327  0DA3  01F4               	clrf	ParallelLCD_WriteByte@r
  5328  0DA4  0AF4               	incf	ParallelLCD_WriteByte@r,f
  5329  0DA5  3020               	movlw	32
  5330  0DA6  318D  257F  318D   	fcall	_ParallelLCD_WriteByte
  5331  0DA9  3001               	movlw	1
  5332  0DAA  0020               	movlb	0	; select bank0
  5333  0DAB  00C1               	movwf	??_ParallelLCD_ClearRow
  5334  0DAC  0841               	movf	??_ParallelLCD_ClearRow,w
  5335  0DAD  07C3               	addwf	ParallelLCD_ClearRow@i,f
  5336  0DAE  2D9F               	goto	L44
  5337  0DAF                     __end_of_ParallelLCD_ClearRow:	
  5338                           
  5339                           	psect	text10
  5340  0D7F                     __ptext10:	
  5341 ;; *************** function _ParallelLCD_WriteByte *****************
  5342 ;; Defined at:
  5343 ;;		line 164 in file "src/../../_Common/ParallelLCD.h"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  data            1    wreg     unsigned char 
  5346 ;;  r               1    4[COMMON] enum E2778
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  data            1    5[COMMON] unsigned char 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;		None               void
  5351 ;; Registers used:
  5352 ;;		wreg, status,2, status,0
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5358 ;;      Params:         1       0       0       0       0       0
  5359 ;;      Locals:         1       0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0
  5361 ;;      Totals:         2       0       0       0       0       0
  5362 ;;Total ram usage:        2 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    1
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_ParallelLCD_Initialize
  5369 ;;		_ParallelLCD_WriteCharacter
  5370 ;;		_ParallelLCD_WriteString
  5371 ;;		_ParallelLCD_WriteStringClearing
  5372 ;;		_ParallelLCD_ClearRow
  5373 ;;		_ParallelLCD_SetCgram
  5374 ;;		_ParallelLCD_WriteHexNumber
  5375 ;;		_ParallelLCD_ClearPartial
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _ParallelLCD_WriteByte
  5381  0D7F                     _ParallelLCD_WriteByte:	
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _ParallelLCD_WriteByte: [wreg+status,2+status,0]
  5385                           ;ParallelLCD_WriteByte@data stored from wreg
  5386  0D7F  00F5               	movwf	ParallelLCD_WriteByte@data
  5387  0D80                     l147:	
  5388                           ;ParallelLCD.h: 165: {while(!PIR3bits.TMR4IF);} ;
  5389                           
  5390  0D80  0020               	movlb	0	; select bank0
  5391  0D81  1C93               	btfss	19,1	;volatile
  5392  0D82  2D80               	goto	l147
  5393                           
  5394                           ;ParallelLCD.h: 166: {LATB=data;} ;
  5395  0D83  0875               	movf	ParallelLCD_WriteByte@data,w
  5396  0D84  0022               	movlb	2	; select bank2
  5397  0D85  008D               	movwf	13	;volatile
  5398                           
  5399                           ;ParallelLCD.h: 167: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  5400  0D86  0874               	movf	ParallelLCD_WriteByte@r,w
  5401  0D87  1903               	btfsc	3,2
  5402  0D88  2D8B               	goto	l150
  5403  0D89  148C               	bsf	12,1	;volatile
  5404  0D8A  2D8C               	goto	l151
  5405  0D8B                     l150:	
  5406  0D8B  108C               	bcf	12,1	;volatile
  5407  0D8C                     l151:	
  5408                           
  5409                           ;ParallelLCD.h: 168: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  5410  0D8C  140C               	bsf	12,0	;volatile
  5411  0D8D  0000               	nop
  5412  0D8E  0022               	movlb	2	; select bank2
  5413  0D8F  100C               	bcf	12,0	;volatile
  5414                           
  5415                           ;ParallelLCD.h: 169: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  5416  0D90  0028               	movlb	8	; select bank8
  5417  0D91  0195               	clrf	21	;volatile
  5418  0D92  0020               	movlb	0	; select bank0
  5419  0D93  1093               	bcf	19,1	;volatile
  5420  0D94  0008               	return
  5421  0D95                     __end_of_ParallelLCD_WriteByte:	
  5422                           
  5423                           	psect	text11
  5424  0F5F                     __ptext11:	
  5425 ;; *************** function _Configuration_Save *****************
  5426 ;; Defined at:
  5427 ;;		line 70 in file "src/configuration.h"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  config          1    wreg     PTR struct .
  5430 ;;		 -> configration_(13), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  config          1    5[BANK0 ] PTR struct .
  5433 ;;		 -> configration_(13), 
  5434 ;;  i               1    4[BANK0 ] unsigned char 
  5435 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  5436 ;;		 -> configration_(13), 
  5437 ;;  returnCode      1    2[BANK0 ] enum E2863
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      enum E2863
  5440 ;; Registers used:
  5441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5447 ;;      Params:         0       0       0       0       0       0
  5448 ;;      Locals:         0       4       0       0       0       0
  5449 ;;      Temps:          0       2       0       0       0       0
  5450 ;;      Totals:         0       6       0       0       0       0
  5451 ;;Total ram usage:        6 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    2
  5454 ;; This function calls:
  5455 ;;		_Configuration_ReadByte
  5456 ;;		_Configuration_WriteByte
  5457 ;; This function is called by:
  5458 ;;		_main
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function _Configuration_Save
  5464  0F5F                     _Configuration_Save:	
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _Configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5468                           ;Configuration_Save@config stored from wreg
  5469  0F5F  0020               	movlb	0	; select bank0
  5470  0F60  00C6               	movwf	Configuration_Save@config
  5471                           
  5472                           ;configuration.h: 72: EepromData_t* ptrConfig = (EepromData_t*) config ;
  5473  0F61  0846               	movf	Configuration_Save@config,w
  5474  0F62  00C1               	movwf	??_Configuration_Save
  5475  0F63  0841               	movf	??_Configuration_Save,w
  5476  0F64  00C4               	movwf	Configuration_Save@ptrConfig
  5477                           
  5478                           ;configuration.h: 73: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5479  0F65  01C3               	clrf	Configuration_Save@returnCode
  5480                           
  5481                           ;configuration.h: 76: INTCONbits.GIE=0; ;
  5482  0F66  138B               	bcf	11,7	;volatile
  5483                           
  5484                           ;configuration.h: 79: config->romOffset = Configuration_ReadByte( 0x00 , MEMORY_SELECT_E
      +                          EPROM ) ;
  5485  0F67  01F4               	clrf	Configuration_ReadByte@memorySelect
  5486  0F68  3000               	movlw	0
  5487  0F69  318D  2549  318F   	fcall	_Configuration_ReadByte
  5488  0F6C  0020               	movlb	0	; select bank0
  5489  0F6D  00C1               	movwf	??_Configuration_Save
  5490  0F6E  0A46               	incf	Configuration_Save@config,w
  5491  0F6F  0086               	movwf	6
  5492  0F70  0187               	clrf	7
  5493  0F71  0841               	movf	??_Configuration_Save,w
  5494  0F72  0081               	movwf	1
  5495                           
  5496                           ;configuration.h: 82: config->writeCount = Configuration_ReadByte( config->romOffset , M
      +                          EMORY_SELECT_EEPROM ) ;
  5497  0F73  01F4               	clrf	Configuration_ReadByte@memorySelect
  5498  0F74  0A46               	incf	Configuration_Save@config,w
  5499  0F75  0086               	movwf	6
  5500  0F76  0187               	clrf	7
  5501  0F77  0801               	movf	1,w
  5502  0F78  318D  2549  318F   	fcall	_Configuration_ReadByte
  5503  0F7B  0020               	movlb	0	; select bank0
  5504  0F7C  00C1               	movwf	??_Configuration_Save
  5505  0F7D  0846               	movf	Configuration_Save@config,w
  5506  0F7E  0086               	movwf	6
  5507  0F7F  0187               	clrf	7
  5508  0F80  0841               	movf	??_Configuration_Save,w
  5509  0F81  0081               	movwf	1
  5510                           
  5511                           ;configuration.h: 85: if ( ++config->writeCount == 1 ) {
  5512  0F82  3001               	movlw	1
  5513  0F83  00C1               	movwf	??_Configuration_Save
  5514  0F84  0846               	movf	Configuration_Save@config,w
  5515  0F85  0086               	movwf	6
  5516  0F86  0187               	clrf	7
  5517  0F87  0841               	movf	??_Configuration_Save,w
  5518  0F88  0781               	addwf	1,f
  5519  0F89  0301               	decf	1,w
  5520  0F8A  1D03               	btfss	3,2
  5521  0F8B  2F98               	goto	l3193
  5522                           
  5523                           ;configuration.h: 86: config->romOffset += sizeof(ConfigurationData) ;
  5524  0F8C  300D               	movlw	13
  5525  0F8D  00C1               	movwf	??_Configuration_Save
  5526  0F8E  0A46               	incf	Configuration_Save@config,w
  5527  0F8F  0086               	movwf	6
  5528  0F90  0187               	clrf	7
  5529  0F91  0841               	movf	??_Configuration_Save,w
  5530  0F92  0781               	addwf	1,f
  5531                           
  5532                           ;configuration.h: 87: config->writeCount = 1 ;
  5533  0F93  0846               	movf	Configuration_Save@config,w
  5534  0F94  0086               	movwf	6
  5535  0F95  0187               	clrf	7
  5536  0F96  0181               	clrf	1
  5537  0F97  0A81               	incf	1,f
  5538  0F98                     l3193:	
  5539                           
  5540                           ;configuration.h: 88: }
  5541                           ;configuration.h: 90: if ( config->romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5542  0F98  0A46               	incf	Configuration_Save@config,w
  5543  0F99  0086               	movwf	6
  5544  0F9A  0187               	clrf	7
  5545  0F9B  30F3               	movlw	243
  5546  0F9C  0201               	subwf	1,w
  5547  0F9D  1C03               	skipc
  5548  0F9E  2FA4               	goto	l3197
  5549                           
  5550                           ;configuration.h: 91: config->romOffset = 1 ;
  5551  0F9F  0A46               	incf	Configuration_Save@config,w
  5552  0FA0  0086               	movwf	6
  5553  0FA1  0187               	clrf	7
  5554  0FA2  0181               	clrf	1
  5555  0FA3  0A81               	incf	1,f
  5556  0FA4                     l3197:	
  5557                           
  5558                           ;configuration.h: 94: EECON1bits.WREN=1; ;
  5559  0FA4  0023               	movlb	3	; select bank3
  5560  0FA5  1515               	bsf	21,2	;volsfr
  5561                           
  5562                           ;configuration.h: 96: config->checkSum = 0x00 ;
  5563  0FA6  0020               	movlb	0	; select bank0
  5564  0FA7  0846               	movf	Configuration_Save@config,w
  5565  0FA8  3E0C               	addlw	12
  5566  0FA9  0086               	movwf	6
  5567  0FAA  0187               	clrf	7
  5568  0FAB  0181               	clrf	1
  5569                           
  5570                           ;configuration.h: 99: for ( Uint08_t i = 0 ; i < sizeof(ConfigurationData) ; i++ ) {
  5571  0FAC  01C5               	clrf	Configuration_Save@i
  5572  0FAD  2FB3               	goto	L45
  5573  0FAE                     l3215:	
  5574                           ;configuration.h: 104: break ;
  5575                           
  5576  0FAE  3001               	movlw	1
  5577  0FAF  0020               	movlb	0	; select bank0
  5578  0FB0  00C1               	movwf	??_Configuration_Save
  5579  0FB1  0841               	movf	??_Configuration_Save,w
  5580  0FB2  07C5               	addwf	Configuration_Save@i,f
  5581  0FB3                     L45:	
  5582  0FB3  300D               	movlw	13
  5583  0FB4  0245               	subwf	Configuration_Save@i,w
  5584  0FB5  1803               	btfsc	3,0
  5585  0FB6  2FE0               	goto	l3219
  5586                           
  5587                           ;configuration.h: 100: Configuration_WriteByte( config->romOffset + i , ptrConfig[i] ) ;
  5588  0FB7  0845               	movf	Configuration_Save@i,w
  5589  0FB8  0744               	addwf	Configuration_Save@ptrConfig,w
  5590  0FB9  00C1               	movwf	??_Configuration_Save
  5591  0FBA  0841               	movf	??_Configuration_Save,w
  5592  0FBB  0086               	movwf	6
  5593  0FBC  0187               	clrf	7
  5594  0FBD  0801               	movf	1,w
  5595  0FBE  00C2               	movwf	??_Configuration_Save+1
  5596  0FBF  0842               	movf	??_Configuration_Save+1,w
  5597  0FC0  00F4               	movwf	Configuration_WriteByte@data
  5598  0FC1  0A46               	incf	Configuration_Save@config,w
  5599  0FC2  0086               	movwf	6
  5600  0FC3  0187               	clrf	7
  5601  0FC4  0801               	movf	1,w
  5602  0FC5  0745               	addwf	Configuration_Save@i,w
  5603  0FC6  318D  255B  318F   	fcall	_Configuration_WriteByte
  5604                           
  5605                           ;configuration.h: 101: config->checkSum ^= ptrConfig[i] ;
  5606  0FC9  0020               	movlb	0	; select bank0
  5607  0FCA  0845               	movf	Configuration_Save@i,w
  5608  0FCB  0744               	addwf	Configuration_Save@ptrConfig,w
  5609  0FCC  00C1               	movwf	??_Configuration_Save
  5610  0FCD  0841               	movf	??_Configuration_Save,w
  5611  0FCE  0086               	movwf	6
  5612  0FCF  0187               	clrf	7
  5613  0FD0  0801               	movf	1,w
  5614  0FD1  00C2               	movwf	??_Configuration_Save+1
  5615  0FD2  0846               	movf	Configuration_Save@config,w
  5616  0FD3  3E0C               	addlw	12
  5617  0FD4  0086               	movwf	6
  5618  0FD5  0187               	clrf	7
  5619  0FD6  0842               	movf	??_Configuration_Save+1,w
  5620  0FD7  0681               	xorwf	1,f
  5621                           
  5622                           ;configuration.h: 102: if ( EECON1bits.WRERR ) {
  5623  0FD8  0023               	movlb	3	; select bank3
  5624  0FD9  1D95               	btfss	21,3	;volsfr
  5625  0FDA  2FAE               	goto	l3215
  5626                           
  5627                           ;configuration.h: 103: returnCode = RETURN_CODE_WRITE_ERROR ;
  5628  0FDB  3010               	movlw	16
  5629  0FDC  0020               	movlb	0	; select bank0
  5630  0FDD  00C1               	movwf	??_Configuration_Save
  5631  0FDE  0841               	movf	??_Configuration_Save,w
  5632  0FDF  00C3               	movwf	Configuration_Save@returnCode
  5633  0FE0                     l3219:	
  5634                           
  5635                           ;configuration.h: 105: }
  5636                           ;configuration.h: 106: }
  5637                           ;configuration.h: 109: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5638  0FE0  0846               	movf	Configuration_Save@config,w
  5639  0FE1  0086               	movwf	6
  5640  0FE2  0187               	clrf	7
  5641  0FE3  0301               	decf	1,w
  5642  0FE4  1D03               	btfss	3,2
  5643  0FE5  2FFB               	goto	l3229
  5644  0FE6  0023               	movlb	3	; select bank3
  5645  0FE7  1995               	btfsc	21,3	;volsfr
  5646  0FE8  2FFB               	goto	l3229
  5647                           
  5648                           ;configuration.h: 110: Configuration_WriteByte( 0x00 , config->romOffset ) ;
  5649  0FE9  0020               	movlb	0	; select bank0
  5650  0FEA  0846               	movf	Configuration_Save@config,w
  5651  0FEB  0086               	movwf	6
  5652  0FEC  0187               	clrf	7
  5653  0FED  3F41               	moviw [1]fsr1
  5654  0FEE  00F4               	movwf	Configuration_WriteByte@data
  5655  0FEF  3000               	movlw	0
  5656  0FF0  318D  255B  318F   	fcall	_Configuration_WriteByte
  5657                           
  5658                           ;configuration.h: 111: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5659  0FF3  0023               	movlb	3	; select bank3
  5660  0FF4  1D95               	btfss	21,3	;volsfr
  5661  0FF5  2FFB               	goto	l3229
  5662  0FF6  3010               	movlw	16
  5663  0FF7  0020               	movlb	0	; select bank0
  5664  0FF8  00C1               	movwf	??_Configuration_Save
  5665  0FF9  0841               	movf	??_Configuration_Save,w
  5666  0FFA  00C3               	movwf	Configuration_Save@returnCode
  5667  0FFB                     l3229:	
  5668                           
  5669                           ;configuration.h: 112: }
  5670                           ;configuration.h: 115: EECON1bits.WREN=0; ;
  5671  0FFB  0023               	movlb	3	; select bank3
  5672  0FFC  1115               	bcf	21,2	;volsfr
  5673                           
  5674                           ;configuration.h: 118: INTCONbits.GIE=1; ;
  5675  0FFD  178B               	bsf	11,7	;volatile
  5676                           
  5677                           ;configuration.h: 120: return RETURN_CODE_NOERROR ;
  5678  0FFE  3000               	movlw	0
  5679  0FFF  0008               	return
  5680  1000                     __end_of_Configuration_Save:	
  5681                           
  5682                           	psect	text12
  5683  0D5B                     __ptext12:	
  5684 ;; *************** function _Configuration_WriteByte *****************
  5685 ;; Defined at:
  5686 ;;		line 158 in file "src/configuration.h"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  address         1    wreg     unsigned char 
  5689 ;;  data            1    4[COMMON] unsigned char 
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;  address         1    5[COMMON] unsigned char 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;		None               void
  5694 ;; Registers used:
  5695 ;;		wreg, status,2
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5701 ;;      Params:         1       0       0       0       0       0
  5702 ;;      Locals:         1       0       0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0
  5704 ;;      Totals:         2       0       0       0       0       0
  5705 ;;Total ram usage:        2 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    1
  5708 ;; This function calls:
  5709 ;;		Nothing
  5710 ;; This function is called by:
  5711 ;;		_Configuration_Save
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _Configuration_WriteByte
  5717  0D5B                     _Configuration_WriteByte:	
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _Configuration_WriteByte: [wreg+status,2]
  5721                           ;Configuration_WriteByte@address stored from wreg
  5722  0D5B  00F5               	movwf	Configuration_WriteByte@address
  5723                           
  5724                           ;configuration.h: 159: EEADRH=0x00;EEADRL=(address); ;
  5725  0D5C  0023               	movlb	3	; select bank3
  5726  0D5D  0192               	clrf	18	;volatile
  5727  0D5E  0875               	movf	Configuration_WriteByte@address,w
  5728  0D5F  0091               	movwf	17	;volatile
  5729                           
  5730                           ;configuration.h: 160: EEDATH=0x00;EEDATL=(data); ;
  5731  0D60  0194               	clrf	20	;volatile
  5732  0D61  0874               	movf	Configuration_WriteByte@data,w
  5733  0D62  0093               	movwf	19	;volatile
  5734                           
  5735                           ;configuration.h: 161: EECON2=0x55;EECON2=0xAA; ;
  5736  0D63  3055               	movlw	85
  5737  0D64  0096               	movwf	22	;volsfr
  5738  0D65  30AA               	movlw	170
  5739  0D66  0096               	movwf	22	;volsfr
  5740                           
  5741                           ;configuration.h: 162: EECON1bits.WR=1; ;
  5742  0D67  1495               	bsf	21,1	;volsfr
  5743  0D68                     l172:	
  5744                           ;configuration.h: 163: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5745                           
  5746  0D68  0020               	movlb	0	; select bank0
  5747  0D69  1E12               	btfss	18,4	;volatile
  5748  0D6A  2D68               	goto	l172
  5749  0D6B  1212               	bcf	18,4	;volatile
  5750  0D6C  0008               	return
  5751  0D6D                     __end_of_Configuration_WriteByte:	
  5752                           
  5753                           	psect	text13
  5754  0F04                     __ptext13:	
  5755 ;; *************** function _Configuration_Load *****************
  5756 ;; Defined at:
  5757 ;;		line 126 in file "src/configuration.h"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  config          1    wreg     PTR struct .
  5760 ;;		 -> configration_(13), 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  config          1    4[BANK0 ] PTR struct .
  5763 ;;		 -> configration_(13), 
  5764 ;;  i               1    3[BANK0 ] unsigned char 
  5765 ;;  ptrConfig       1    2[BANK0 ] PTR unsigned char 
  5766 ;;		 -> configration_(13), 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      enum E2863
  5769 ;; Registers used:
  5770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5776 ;;      Params:         0       0       0       0       0       0
  5777 ;;      Locals:         0       3       0       0       0       0
  5778 ;;      Temps:          0       2       0       0       0       0
  5779 ;;      Totals:         0       5       0       0       0       0
  5780 ;;Total ram usage:        5 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    2
  5783 ;; This function calls:
  5784 ;;		_Configuration_ReadByte
  5785 ;; This function is called by:
  5786 ;;		_main
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           
  5791                           ;psect for function _Configuration_Load
  5792  0F04                     _Configuration_Load:	
  5793                           
  5794                           ;incstack = 0
  5795                           ; Regs used in _Configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5796                           ;Configuration_Load@config stored from wreg
  5797  0F04  0020               	movlb	0	; select bank0
  5798  0F05  00C5               	movwf	Configuration_Load@config
  5799                           
  5800                           ;configuration.h: 128: EepromData_t* ptrConfig = (EepromData_t*) config ;
  5801  0F06  0845               	movf	Configuration_Load@config,w
  5802  0F07  00C1               	movwf	??_Configuration_Load
  5803  0F08  0841               	movf	??_Configuration_Load,w
  5804  0F09  00C3               	movwf	Configuration_Load@ptrConfig
  5805                           
  5806                           ;configuration.h: 131: INTCONbits.GIE=0; ;
  5807  0F0A  138B               	bcf	11,7	;volatile
  5808                           
  5809                           ;configuration.h: 134: config->romOffset = Configuration_ReadByte( 0x00 , MEMORY_SELECT_
      +                          EEPROM ) ;
  5810  0F0B  01F4               	clrf	Configuration_ReadByte@memorySelect
  5811  0F0C  3000               	movlw	0
  5812  0F0D  318D  2549  318F   	fcall	_Configuration_ReadByte
  5813  0F10  0020               	movlb	0	; select bank0
  5814  0F11  00C1               	movwf	??_Configuration_Load
  5815  0F12  0A45               	incf	Configuration_Load@config,w
  5816  0F13  0086               	movwf	6
  5817  0F14  0187               	clrf	7
  5818  0F15  0841               	movf	??_Configuration_Load,w
  5819  0F16  0081               	movwf	1
  5820                           
  5821                           ;configuration.h: 137: if ( config->romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
      +                           return RETURN_CODE_INVALID_OFFSET ;
  5822  0F17  0A45               	incf	Configuration_Load@config,w
  5823  0F18  0086               	movwf	6
  5824  0F19  0187               	clrf	7
  5825  0F1A  30F3               	movlw	243
  5826  0F1B  0201               	subwf	1,w
  5827  0F1C  1C03               	skipc
  5828  0F1D  2F20               	goto	l3247
  5829  0F1E  3030               	movlw	48
  5830  0F1F  0008               	return
  5831  0F20                     l3247:	
  5832                           
  5833                           ;configuration.h: 139: config->checkSum = 0x00 ;
  5834  0F20  0845               	movf	Configuration_Load@config,w
  5835  0F21  3E0C               	addlw	12
  5836  0F22  0086               	movwf	6
  5837  0F23  0187               	clrf	7
  5838  0F24  0181               	clrf	1
  5839                           
  5840                           ;configuration.h: 142: for ( Uint08_t i = 0 ; i < sizeof(ConfigurationData) ; i++ ) {
  5841  0F25  01C4               	clrf	Configuration_Load@i
  5842  0F26  300D               	movlw	13
  5843  0F27  0244               	subwf	Configuration_Load@i,w
  5844  0F28  1803               	btfsc	3,0
  5845  0F29  2F53               	goto	l168
  5846  0F2A                     l3255:	
  5847                           
  5848                           ;configuration.h: 143: ptrConfig[i] = Configuration_ReadByte( config->romOffset + i , ME
      +                          MORY_SELECT_EEPROM ) ;
  5849  0F2A  01F4               	clrf	Configuration_ReadByte@memorySelect
  5850  0F2B  0A45               	incf	Configuration_Load@config,w
  5851  0F2C  0086               	movwf	6
  5852  0F2D  0187               	clrf	7
  5853  0F2E  0801               	movf	1,w
  5854  0F2F  0744               	addwf	Configuration_Load@i,w
  5855  0F30  318D  2549  318F   	fcall	_Configuration_ReadByte
  5856  0F33  0020               	movlb	0	; select bank0
  5857  0F34  00C1               	movwf	??_Configuration_Load
  5858  0F35  0844               	movf	Configuration_Load@i,w
  5859  0F36  0743               	addwf	Configuration_Load@ptrConfig,w
  5860  0F37  00C2               	movwf	??_Configuration_Load+1
  5861  0F38  0842               	movf	??_Configuration_Load+1,w
  5862  0F39  0086               	movwf	6
  5863  0F3A  0187               	clrf	7
  5864  0F3B  0841               	movf	??_Configuration_Load,w
  5865  0F3C  0081               	movwf	1
  5866                           
  5867                           ;configuration.h: 144: config->checkSum ^= ptrConfig[i] ;
  5868  0F3D  0844               	movf	Configuration_Load@i,w
  5869  0F3E  0743               	addwf	Configuration_Load@ptrConfig,w
  5870  0F3F  00C1               	movwf	??_Configuration_Load
  5871  0F40  0841               	movf	??_Configuration_Load,w
  5872  0F41  0086               	movwf	6
  5873  0F42  0187               	clrf	7
  5874  0F43  0801               	movf	1,w
  5875  0F44  00C2               	movwf	??_Configuration_Load+1
  5876  0F45  0845               	movf	Configuration_Load@config,w
  5877  0F46  3E0C               	addlw	12
  5878  0F47  0086               	movwf	6
  5879  0F48  0187               	clrf	7
  5880  0F49  0842               	movf	??_Configuration_Load+1,w
  5881  0F4A  0681               	xorwf	1,f
  5882  0F4B  3001               	movlw	1
  5883  0F4C  00C1               	movwf	??_Configuration_Load
  5884  0F4D  0841               	movf	??_Configuration_Load,w
  5885  0F4E  07C4               	addwf	Configuration_Load@i,f
  5886  0F4F  300D               	movlw	13
  5887  0F50  0244               	subwf	Configuration_Load@i,w
  5888  0F51  1C03               	skipc
  5889  0F52  2F2A               	goto	l3255
  5890  0F53                     l168:	
  5891                           
  5892                           ;configuration.h: 145: }
  5893                           ;configuration.h: 148: INTCONbits.GIE=1; ;
  5894  0F53  178B               	bsf	11,7	;volatile
  5895                           
  5896                           ;configuration.h: 151: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5897  0F54  0845               	movf	Configuration_Load@config,w
  5898  0F55  3E0C               	addlw	12
  5899  0F56  0086               	movwf	6
  5900  0F57  0187               	clrf	7
  5901  0F58  0801               	movf	1,w
  5902  0F59  1903               	btfsc	3,2
  5903  0F5A  2F5D               	goto	l3269
  5904  0F5B  3020               	movlw	32
  5905  0F5C  0008               	return
  5906  0F5D                     l3269:	
  5907                           
  5908                           ;configuration.h: 153: return RETURN_CODE_NOERROR ;
  5909  0F5D  3000               	movlw	0
  5910  0F5E  0008               	return
  5911  0F5F                     __end_of_Configuration_Load:	
  5912                           
  5913                           	psect	text14
  5914  0D49                     __ptext14:	
  5915 ;; *************** function _Configuration_ReadByte *****************
  5916 ;; Defined at:
  5917 ;;		line 168 in file "src/configuration.h"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  address         1    wreg     unsigned char 
  5920 ;;  memorySelect    1    4[COMMON] enum E2869
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  address         1    5[COMMON] unsigned char 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      unsigned char 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5932 ;;      Params:         1       0       0       0       0       0
  5933 ;;      Locals:         1       0       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0       0
  5935 ;;      Totals:         2       0       0       0       0       0
  5936 ;;Total ram usage:        2 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    1
  5939 ;; This function calls:
  5940 ;;		Nothing
  5941 ;; This function is called by:
  5942 ;;		_Configuration_Save
  5943 ;;		_Configuration_Load
  5944 ;;		_main
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           
  5949                           ;psect for function _Configuration_ReadByte
  5950  0D49                     _Configuration_ReadByte:	
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _Configuration_ReadByte: [wreg+status,2+status,0]
  5954                           ;Configuration_ReadByte@address stored from wreg
  5955  0D49  00F5               	movwf	Configuration_ReadByte@address
  5956                           
  5957                           ;configuration.h: 169: EEADRH=0x00;EEADRL=(address); ;
  5958  0D4A  0023               	movlb	3	; select bank3
  5959  0D4B  0192               	clrf	18	;volatile
  5960  0D4C  0875               	movf	Configuration_ReadByte@address,w
  5961  0D4D  0091               	movwf	17	;volatile
  5962                           
  5963                           ;configuration.h: 170: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5964  0D4E  1395               	bcf	21,7	;volsfr
  5965  0D4F  0874               	movf	Configuration_ReadByte@memorySelect,w
  5966  0D50  1903               	btfsc	3,2
  5967  0D51  2D54               	goto	l178
  5968  0D52  1715               	bsf	21,6	;volsfr
  5969  0D53  2D55               	goto	l179
  5970  0D54                     l178:	
  5971  0D54  1315               	bcf	21,6	;volsfr
  5972  0D55                     l179:	
  5973                           
  5974                           ;configuration.h: 171: EECON1bits.RD=1; ;
  5975  0D55  1415               	bsf	21,0	;volsfr
  5976                           
  5977                           ;configuration.h: 172: __nop() ;
  5978  0D56  0000               	nop
  5979                           
  5980                           ;configuration.h: 173: __nop() ;
  5981  0D57  0000               	nop
  5982                           
  5983                           ;configuration.h: 174: return EEDATL ;
  5984  0D58  0023               	movlb	3	; select bank3
  5985  0D59  0813               	movf	19,w	;volatile
  5986  0D5A  0008               	return
  5987  0D5B                     __end_of_Configuration_ReadByte:	
  5988                           
  5989                           	psect	intentry
  5990  0004                     __pintentry:	
  5991 ;; *************** function _isr *****************
  5992 ;; Defined at:
  5993 ;;		line 990 in file "src/main.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6007 ;;      Params:         0       0       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0
  6009 ;;      Temps:          4       0       0       0       0       0
  6010 ;;      Totals:         4       0       0       0       0       0
  6011 ;;Total ram usage:        4 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		Interrupt level 1
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020  0004                     _isr:	
  6021                           
  6022                           ;incstack = 0
  6023                           ; Regs used in _isr: [wreg+status,2+status,0]
  6024  0004  3180               	pagesel	$
  6025  0005  0020               	movlb	0	; select bank0
  6026  0006  087F               	movf	127,w
  6027  0007  00F3               	movwf	??_isr+3
  6028                           
  6029                           ;main.c: 991: static struct {
  6030                           ;main.c: 992: Uint08_t count1ms ;
  6031                           ;main.c: 993: Uint08_t count10ms ;
  6032                           ;main.c: 994: } prescaler = { 0 , 0 } ;
  6033                           ;main.c: 996: if( !PIR3bits.TMR6IF ) return ;
  6034  0008  1D93               	btfss	19,3	;volatile
  6035  0009  2873               	goto	i1l489
  6036                           
  6037                           ;main.c: 997: PIR3bits.TMR6IF = 0 ;
  6038  000A  1193               	bcf	19,3	;volatile
  6039                           
  6040                           ;main.c: 1000: tempoCounter_ += configration_.tempo ;
  6041  000B  082A               	movf	_configration_+2,w
  6042  000C  00F0               	movwf	??_isr
  6043  000D  082B               	movf	_configration_+3,w
  6044  000E  00F1               	movwf	??_isr+1
  6045  000F  01F2               	clrf	??_isr+2
  6046  0010  0870               	movf	??_isr,w
  6047  0011  07DB               	addwf	_tempoCounter_,f
  6048  0012  0871               	movf	??_isr+1,w
  6049  0013  3DDC               	addwfc	_tempoCounter_+1,f
  6050  0014  0872               	movf	??_isr+2,w
  6051  0015  3DDD               	addwfc	_tempoCounter_+2,f
  6052                           
  6053                           ;main.c: 1003: if( --prescaler.count1ms ) return ;
  6054  0016  3001               	movlw	1
  6055  0017  02F8               	subwf	isr@prescaler,f
  6056  0018  1D03               	btfss	3,2
  6057  0019  2873               	goto	i1l489
  6058                           
  6059                           ;main.c: 1004: prescaler.count1ms = 80 ;
  6060  001A  3050               	movlw	80
  6061  001B  00F0               	movwf	??_isr
  6062  001C  0870               	movf	??_isr,w
  6063  001D  00F8               	movwf	isr@prescaler
  6064                           
  6065                           ;main.c: 1007: if( soundDurationCount_.click && !--soundDurationCount_.click && !soundDu
      +                          rationCount_.key )
  6066  001E  0864               	movf	_soundDurationCount_,w
  6067  001F  1903               	btfsc	3,2
  6068  0020  2829               	goto	i1l2951
  6069  0021  3001               	movlw	1
  6070  0022  02E4               	subwf	_soundDurationCount_,f
  6071  0023  1D03               	btfss	3,2
  6072  0024  2829               	goto	i1l2951
  6073  0025  0865               	movf	_soundDurationCount_+1,w
  6074  0026  1D03               	btfss	3,2
  6075  0027  2829               	goto	i1l2951
  6076                           
  6077                           ;main.c: 1008: events_.output.soundOff=1 ;
  6078  0028  16E3               	bsf	_events_+1,5
  6079  0029                     i1l2951:	
  6080                           
  6081                           ;main.c: 1009: if( soundDurationCount_.key && ! --soundDurationCount_.key )
  6082  0029  0865               	movf	_soundDurationCount_+1,w
  6083  002A  1903               	btfsc	3,2
  6084  002B  2831               	goto	i1l2957
  6085  002C  3001               	movlw	1
  6086  002D  02E5               	subwf	_soundDurationCount_+1,f
  6087  002E  1D03               	btfss	3,2
  6088  002F  2831               	goto	i1l2957
  6089                           
  6090                           ;main.c: 1010: events_.output.soundOff=1 ;
  6091  0030  16E3               	bsf	_events_+1,5
  6092  0031                     i1l2957:	
  6093                           
  6094                           ;main.c: 1013: if( --prescaler.count10ms ) return ;
  6095  0031  3001               	movlw	1
  6096  0032  02F9               	subwf	isr@prescaler+1,f
  6097  0033  1D03               	btfss	3,2
  6098  0034  2873               	goto	i1l489
  6099                           
  6100                           ;main.c: 1014: prescaler.count10ms = 10 ;
  6101  0035  300A               	movlw	10
  6102  0036  00F0               	movwf	??_isr
  6103  0037  0870               	movf	??_isr,w
  6104  0038  00F9               	movwf	isr@prescaler+1
  6105                           
  6106                           ;main.c: 1017: if( stateReturnCounter_ && ! --stateReturnCounter_ ) {
  6107  0039  086C               	movf	_stateReturnCounter_,w
  6108  003A  1903               	btfsc	3,2
  6109  003B  2844               	goto	i1l2969
  6110  003C  3001               	movlw	1
  6111  003D  02EC               	subwf	_stateReturnCounter_,f
  6112  003E  1D03               	btfss	3,2
  6113  003F  2844               	goto	i1l2969
  6114                           
  6115                           ;main.c: 1018: events_.output.changeState=1 ;
  6116  0040  1463               	bsf	_events_+1,0
  6117                           
  6118                           ;main.c: 1019: events_.output.resetMetronome=1 ;
  6119  0041  1763               	bsf	_events_+1,6
  6120                           
  6121                           ;main.c: 1020: machineState_ = STATE_METRONOME ;
  6122  0042  01EA               	clrf	_machineState_
  6123  0043  0AEA               	incf	_machineState_,f
  6124  0044                     i1l2969:	
  6125                           
  6126                           ;main.c: 1021: }
  6127                           ;main.c: 1024: static struct {
  6128                           ;main.c: 1025: Uint08_t Up ;
  6129                           ;main.c: 1026: Uint08_t Down ;
  6130                           ;main.c: 1027: } keyHoldCount = { 0 , 0 } ;
  6131                           ;main.c: 1029: sampledPortAState_.byte = (~PORTA&0xE0) ;
  6132  0044  090C               	comf	12,w	;volatile
  6133  0045  39E0               	andlw	224
  6134  0046  00F0               	movwf	??_isr
  6135  0047  0870               	movf	??_isr,w
  6136  0048  00EB               	movwf	_sampledPortAState_
  6137                           
  6138                           ;main.c: 1031: if( sampledPortAState_.keyUp && !sampledPortAState_.keyDown ) {
  6139  0049  1BEB               	btfsc	_sampledPortAState_,7
  6140  004A  1B6B               	btfsc	_sampledPortAState_,6
  6141  004B  285A               	goto	i1l2981
  6142                           
  6143                           ;main.c: 1032: if( ++keyHoldCount.Up == 0x40 ) {
  6144  004C  3001               	movlw	1
  6145  004D  00F0               	movwf	??_isr
  6146  004E  0870               	movf	??_isr,w
  6147  004F  07F6               	addwf	isr@keyHoldCount,f
  6148  0050  3040               	movlw	64
  6149  0051  0676               	xorwf	isr@keyHoldCount,w
  6150  0052  1D03               	btfss	3,2
  6151  0053  285B               	goto	i1l2983
  6152                           
  6153                           ;main.c: 1033: keyHoldCount.Up = 0x3C ;
  6154  0054  303C               	movlw	60
  6155  0055  00F0               	movwf	??_isr
  6156  0056  0870               	movf	??_isr,w
  6157  0057  00F6               	movwf	isr@keyHoldCount
  6158                           
  6159                           ;main.c: 1034: events_.input.keyPressHeldUp=1 ;
  6160  0058  1662               	bsf	_events_,4
  6161                           
  6162                           ;main.c: 1035: }
  6163                           ;main.c: 1036: }
  6164  0059  285B               	goto	i1l2983
  6165  005A                     i1l2981:	
  6166                           
  6167                           ;main.c: 1037: else
  6168                           ;main.c: 1038: keyHoldCount.Up = 0 ;
  6169  005A  01F6               	clrf	isr@keyHoldCount
  6170  005B                     i1l2983:	
  6171                           
  6172                           ;main.c: 1040: if( sampledPortAState_.keyDown && !sampledPortAState_.keyUp ) {
  6173  005B  1B6B               	btfsc	_sampledPortAState_,6
  6174  005C  1BEB               	btfsc	_sampledPortAState_,7
  6175  005D  286C               	goto	i1l2993
  6176                           
  6177                           ;main.c: 1041: if( ++keyHoldCount.Down == 0x40 ) {
  6178  005E  3001               	movlw	1
  6179  005F  00F0               	movwf	??_isr
  6180  0060  0870               	movf	??_isr,w
  6181  0061  07F7               	addwf	isr@keyHoldCount+1,f
  6182  0062  3040               	movlw	64
  6183  0063  0677               	xorwf	isr@keyHoldCount+1,w
  6184  0064  1D03               	btfss	3,2
  6185  0065  286D               	goto	i1l2995
  6186                           
  6187                           ;main.c: 1042: keyHoldCount.Down = 0x3C ;
  6188  0066  303C               	movlw	60
  6189  0067  00F0               	movwf	??_isr
  6190  0068  0870               	movf	??_isr,w
  6191  0069  00F7               	movwf	isr@keyHoldCount+1
  6192                           
  6193                           ;main.c: 1043: events_.input.keyPressHeldDown=1 ;
  6194  006A  16E2               	bsf	_events_,5
  6195                           
  6196                           ;main.c: 1044: }
  6197                           ;main.c: 1045: }
  6198  006B  286D               	goto	i1l2995
  6199  006C                     i1l2993:	
  6200                           
  6201                           ;main.c: 1046: else
  6202                           ;main.c: 1047: keyHoldCount.Down = 0 ;
  6203  006C  01F7               	clrf	isr@keyHoldCount+1
  6204  006D                     i1l2995:	
  6205                           
  6206                           ;main.c: 1049: if( PIR3bits.TMR6IF ) machineError_ = ERROR_INTERRUPT ;
  6207  006D  1D93               	btfss	19,3	;volatile
  6208  006E  2873               	goto	i1l489
  6209  006F  3002               	movlw	2
  6210  0070  00F0               	movwf	??_isr
  6211  0071  0870               	movf	??_isr,w
  6212  0072  00E9               	movwf	_machineError_
  6213  0073                     i1l489:	
  6214  0073  0873               	movf	??_isr+3,w
  6215  0074  00FF               	movwf	127
  6216  0075  0009               	retfie
  6217  0076                     __end_of_isr:	
  6218  007E                     btemp	set	126	;btemp
  6219  007E                     wtemp	set	126
  6220  007E                     wtemp0	set	126
  6221  0080                     wtemp1	set	128
  6222  0082                     wtemp2	set	130
  6223  0084                     wtemp3	set	132
  6224  0086                     wtemp4	set	134
  6225  0088                     wtemp5	set	136
  6226  007F                     wtemp6	set	127
  6227  007E                     ttemp	set	126
  6228  007E                     ttemp0	set	126
  6229  0081                     ttemp1	set	129
  6230  0084                     ttemp2	set	132
  6231  0087                     ttemp3	set	135
  6232  007F                     ttemp4	set	127
  6233  007E                     ltemp	set	126
  6234  007E                     ltemp0	set	126
  6235  0082                     ltemp1	set	130
  6236  0086                     ltemp2	set	134
  6237  0080                     ltemp3	set	128


Data Sizes:
    Strings     328
    Constant    68
    Data        180
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     26      78
    BANK1            80      0      78
    BANK2            80      0      69
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    currentSingleMessage_	PTR const unsigned char  size(2) Largest target is 4096
		 -> ROM(CODE[4096]), STR_31(CODE[10]), STR_30(CODE[7]), STR_28(CODE[12]), 
		 -> STR_27(CODE[6]), STR_26(CODE[7]), 

    currentValueInfoPtr_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    currentValueInfoPtr_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    currentValueInfoPtr_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    currentValueInfoPtr_	PTR struct . size(2) Largest target is 8
		 -> valueInfoOscillatorTune_(BANK2[7]), valueInfoPulseWidth_(BANK1[7]), valueInfoDurationKey_(BANK1[7]), valueInfoDurationClick_(BANK1[7]), 
		 -> valueInfoTone_(BANK1[7]), valueInfoBeatCount_(BANK1[7]), valueInfoTempo_(BANK1[7]), NULL(NULL[0]), 

    currentMenuInfoPtr_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    currentMenuInfoPtr_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    currentMenuInfoPtr_	PTR struct . size(1) Largest target is 7
		 -> menuInfoInformation_(BANK0[6]), menuInfoConfirmReset_(BANK1[6]), menuInfoConfirmSave_(BANK1[6]), menuInfoConfirmLoad_(BANK1[6]), 
		 -> NULL(NULL[0]), menuInfoDuration_(BANK1[6]), menuInfoTone_(BANK0[6]), menuInfoMain_(BANK1[6]), 

    valueInfoOscillatorTune_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoOscillatorTune_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoOscillatorTune_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.oscillatorTune(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoPulseWidth_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoPulseWidth_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoPulseWidth_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.pulseWidth(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoDurationKey_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoDurationKey_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoDurationKey_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration.key(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoDurationClick_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoDurationClick_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoDurationClick_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration.click(BANK0[1]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoTone_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoTone_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoTone_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.tone(BANK0[3]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoBeatCount_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoBeatCount_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoBeatCount_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_.beatCount(BANK0[1]), configration_(BANK0[13]), 

    S707$value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    valueInfoTempo_.message.value	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_48(CODE[10]), STR_46(CODE[12]), STR_44(CODE[9]), STR_42(CODE[6]), 
		 -> STR_40(CODE[5]), STR_38(CODE[11]), STR_36(CODE[6]), 

    S707$title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    valueInfoTempo_.message.title	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_47(CODE[14]), STR_45(CODE[14]), STR_43(CODE[9]), STR_41(CODE[9]), 
		 -> STR_39(CODE[5]), STR_37(CODE[14]), STR_35(CODE[10]), 

    S710$valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    valueInfoTempo_.valuePtr	PTR unsigned char  size(1) Largest target is 13
		 -> NULL(NULL[0]), configration_.duration(BANK0[2]), configration_(BANK0[13]), 

    menuInfoInformation_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoInformation_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoConfirmReset_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoConfirmReset_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoConfirmSave_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoConfirmSave_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoConfirmLoad_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoConfirmLoad_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoDuration_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoDuration_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoTone_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoTone_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    S698$singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    menuInfoMain_.singleMessage	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_34(CODE[8]), STR_33(CODE[7]), STR_32(CODE[7]), ROM(CODE[4096]), 

    S698$menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    menuInfoMain_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_DURATION(BANK2[6]), MESSAGE_MENU_ITEM_TONE(BANK2[8]), MESSAGE_MENU_ITEM_MAIN(BANK2[20]), 

    S648$INTERRUPT	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_31(CODE[10]), 

    MESSAGE.ERROR.INTERRUPT	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_31(CODE[10]), 

    S648$EEPROM	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_30(CODE[7]), 

    MESSAGE.ERROR.EEPROM	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_30(CODE[7]), 

    S648$TITLE	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_29(CODE[13]), 

    MESSAGE.ERROR.TITLE	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_29(CODE[13]), 

    S644$INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_28(CODE[12]), 

    MESSAGE.MEMORY.INITIALIZE	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_28(CODE[12]), 

    S644$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), 

    S644$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_26(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_26(CODE[7]), 

    S641$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_25(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_25(CODE[4]), 

    S641$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_24(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_24(CODE[4]), 

    S638$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), 

    S638$MAIN_TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE.METRONOME.MAIN_TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 

    MESSAGE_MENU_ITEM_DURATION	PTR const unsigned char [3] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    Configuration_Load@config	PTR struct . size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Save@config	PTR struct . size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    Configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 13
		 -> configration_(BANK0[13]), 

    ParallelLCD_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    ParallelLCD_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 4096
		 -> STR_48(CODE[10]), STR_47(CODE[14]), STR_46(CODE[12]), STR_45(CODE[14]), 
		 -> STR_44(CODE[9]), STR_43(CODE[9]), STR_42(CODE[6]), STR_41(CODE[9]), 
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[11]), STR_37(CODE[14]), 
		 -> STR_36(CODE[6]), STR_35(CODE[10]), ROM(CODE[4096]), STR_31(CODE[10]), 
		 -> STR_30(CODE[7]), STR_29(CODE[13]), STR_28(CODE[12]), STR_27(CODE[6]), 
		 -> STR_26(CODE[7]), STR_25(CODE[4]), STR_24(CODE[4]), STR_22(CODE[10]), 
		 -> STR_21(CODE[11]), STR_20(CODE[11]), STR_19(CODE[11]), STR_18(CODE[8]), 
		 -> STR_17(CODE[10]), STR_16(CODE[12]), STR_15(CODE[9]), STR_14(CODE[6]), 
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), 
		 -> STR_1(CODE[9]), 

    ParallelLCD_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 4096
		 -> main@valueString(BANK0[6]), informationValueBuffer(BANK2[28]), STR_34(CODE[8]), STR_33(CODE[7]), 
		 -> STR_32(CODE[7]), ROM(CODE[4096]), STR_23(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_Configuration_ReadByte
    _main->___bmul
    _ParallelLCD_WriteStringClearing->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->___bmul
    _ParallelLCD_WriteCharacter->_ParallelLCD_WriteByte
    _ParallelLCD_SetCgram->_ParallelLCD_WriteByte
    _ParallelLCD_Initialize->_ParallelLCD_WriteByte
    _ParallelLCD_ClearRow->_ParallelLCD_WriteByte
    _Configuration_Save->_Configuration_ReadByte
    _Configuration_Save->_Configuration_WriteByte
    _Configuration_Load->_Configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Configuration_Save
    _main->_ParallelLCD_WriteString
    _ParallelLCD_WriteString->___bmul
    _ParallelLCD_ClearDisplay->_ParallelLCD_ClearRow

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   21056
                                              6 BANK0     20    20      0
                 _Configuration_Load
             _Configuration_ReadByte
                 _Configuration_Save
           _ParallelLCD_ClearDisplay
               _ParallelLCD_ClearRow
             _ParallelLCD_Initialize
               _ParallelLCD_SetCgram
         _ParallelLCD_WriteCharacter
            _ParallelLCD_WriteString
    _ParallelLCD_WriteStringClearing
                             ___bmul
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     206
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteStringClearing                      5     3      2    3258
                                              0 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteString                              4     2      2    2498
                                              2 BANK0      4     2      2
              _ParallelLCD_WriteByte
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteCharacter                           2     1      1    2374
                                              0 BANK0      2     1      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_SetCgram                                 5     3      2    2265
                                              0 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_Initialize                               4     1      3    2256
                                              0 BANK0      4     1      3
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearDisplay                             0     0      0    1961
               _ParallelLCD_ClearRow
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearRow                                 3     3      0    1961
                                              0 BANK0      3     3      0
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (2) _ParallelLCD_WriteByte                                2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Save                                   6     6      0    1475
                                              0 BANK0      6     6      0
             _Configuration_ReadByte
            _Configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_WriteByte                              2     1      1     196
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Load                                   5     5      0    1053
                                              0 BANK0      5     5      0
             _Configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_ReadByte                               2     1      1     500
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration_Load
     _Configuration_ReadByte
   _Configuration_ReadByte
   _Configuration_Save
     _Configuration_ReadByte
     _Configuration_WriteByte
   _ParallelLCD_ClearDisplay
     _ParallelLCD_ClearRow
       _ParallelLCD_WriteByte
   _ParallelLCD_ClearRow
     _ParallelLCD_WriteByte
   _ParallelLCD_Initialize
     _ParallelLCD_WriteByte
   _ParallelLCD_SetCgram
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteCharacter
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteString
     _ParallelLCD_WriteByte
     ___bmul (ARG)
   _ParallelLCD_WriteStringClearing
     _ParallelLCD_WriteByte
   ___bmul
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      EB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      45      10       86.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      EB      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Aug 15 16:00:54 2015

                                       pc 0002                            ___bmul@product 0041  
                             __CFG_CP$OFF 0000             ParallelLCD_ClearRow@rowSelect 0042  
                                     l150 0D8B                                       l151 0D8C  
                                     l304 022B                                       l147 0D80  
                                     l172 0D68                                       l412 04C2  
                                     l430 06B8                                       l334 031D  
                                     l270 01B1                                       l262 00D1  
                                     l255 00CA                                       l168 0F53  
                                     l424 050F                                       l280 01D5  
                                     l256 01AB                                       l425 052C  
                                     l178 0D54                                       l354 02F0  
                                     l274 01CA                                       l179 0D55  
                                     l283 01EA                                       l275 01C9  
                                     l267 019F                                       l259 00CF  
                                     l428 0510                                       l285 01E7  
                                     l277 01D1                                       l286 01E9  
                                     l278 01D0                                       l463 06D0  
                                     l383 0486                                       l384 041B  
                                     l376 03DD                                       l368 03DB  
                                     l394 043C                                       _PR2 001B  
                                     _PR4 0416                              __CFG_CPD$OFF 0000  
                                     _PR6 041D                                       _isr 0004  
                            __CFG_IDLOC0$ 0001                              __CFG_IDLOC1$ 0001  
                            __CFG_IDLOC2$ 0000                              __CFG_IDLOC3$ 0000  
                            __CFG_BORV$HI 0000                                       wreg 0009  
                                    S3981 09B4                                      S3983 098C  
                                    S3985 0A00                                      S3987 09DA  
                                    S3979 0A20                              __CFG_LVP$OFF 0000  
                         __end_of_MESSAGE 0814                                      l3215 0FAE  
                                    l3135 0DB6                                      l3311 00BB  
                                    l3153 0E65                                      l3219 0FE0  
                                    l3155 0E6B                                      l3411 01F9  
                                    l3403 01EF                                      l3229 0FFB  
                                    l3309 00BA                                      l3255 0F2A  
                                    l3247 0F20                                      l3423 020A  
                                    l3193 0F98                                      l3521 029E  
                                    l3441 0222                                      l3425 020C  
                                    l3417 0201                                      l3409 01F7  
                                    l3505 027E                                      l3329 00D3  
                                    l3361 0184                                      l3275 0D70  
                                    l3531 02AA                                      l3523 02A2  
                                    l3451 023B                                      l3435 0219  
                                    l3427 020E                                      l3507 028B  
                                    l3347 013D                                      l3339 0110  
                                    l3269 0F5D                                      l3197 0FA4  
                                    l3605 0365                                      l3541 02BA  
                                    l3533 02AC                                      l3525 02A4  
                                    l3517 0299                                      l3461 0245  
                                    l3429 0210                                      l3357 015C  
                                    l3279 0D76                                      l3703 04BE  
                                    l3631 0400                                      l3607 0373  
                                    l3551 02C7                                      l3543 02BF  
                                    l3535 02AE                                      l3527 02A6  
                                    l3705 04C0                                      l3641 0419  
                                    l3537 02B2                                      l3529 02A8  
                                    l3473 025B                                      l3457 0241  
                                    l3465 0246                                      l3449 022F  
                                    l3811 06EB                                      l3803 06CB  
                                    l3715 04D0                                      l3651 042A  
                                    l3571 0309                                      l3563 02F2  
                                    l3539 02B6                                      l3483 0267  
                                    l3467 0255                                      l3459 0243  
                                    l3733 04E8                                      l3741 04F7  
                                    l3653 042B                                      l3629 03FF  
                                    l3565 02F7                                      l3493 0273  
                                    l3485 026A                                      l3389 01D9  
                                    l3831 0731                                      l3823 0708  
                                    l3815 06FA                                      l3751 0530  
                                    l3663 043A                                      l3591 0334  
                                    l3567 0300                                      l3559 02E9  
                                    l3575 0313                                      l3487 026C  
                                    l3479 0261                                      l3841 0748  
                                    l3809 06E5                                      l3817 0702  
                                    l3761 05AC                                      l3729 04E2  
                                    l3673 045B                                      l3497 0279  
                                    l3489 0271                                      l3851 0774  
                                    l3843 075F                                      l3771 05F4  
                                    l3763 05C4                                      l3747 0515  
                                    l3595 0344                                      l3587 0329  
                                    l3499 027A                                      l3837 073C  
                                    l3829 070C                                      l3757 0585  
                                    l3685 0479                                      l3847 0767  
                                    l3783 0645                                      l3775 0602  
                                    l3695 0492                                      l3599 0354  
                                    l3849 0770                                      l3857 0789  
                                    l3793 0693                                      l3777 0605  
                                    l3789 0685                                      l3797 06AA  
                                    ?_isr 0070                                      STR_1 0906  
                            __CFG_WDTE$ON 0000                                      STR_2 08BF  
                                    STR_3 08DE                                      STR_4 0844  
                                    STR_5 086D                                      STR_6 08F2  
                                    STR_7 0975                                      STR_8 097A  
                                    STR_9 097F                                      _LATB 010D  
                                    u3300 06C6                                      u3214 04EF  
                                    u3215 04EE                                      u3135 049C  
                                    u3145 04BA                  ??_ParallelLCD_Initialize 0076  
                                    u3335 071C                                      u2705 00FE  
                                    u2485 0E17                                      u3384 0783  
                                    u3385 0782                                      u2924 02E1  
                                    u2925 02E0                                      u2695 00E0  
                                    u2945 0376                                      u2955 0397  
                                    u2965 03B8                                      _TMR0 0015  
                                    _TMR1 0016                                      _TMR2 001A  
                                    _TMR4 0415                                      _TMR6 041C  
                            __CFG_WRT$OFF 0000                       _MESSAGE_INFORMATION 0020  
                                    _main 00AA                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                           _valueInfoTempo_ 00C2  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0076  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_IESO$OFF 0000                         ___bmul@multiplier 0042  
     __size_of_ParallelLCD_WriteCharacter 000E                                     ??_isr 0070  
         ParallelLCD_WriteString@position 0046                   ??_ParallelLCD_WriteByte 0075  
                                   ?_main 0070                   _Configuration_WriteByte 0D5B  
                                   STR_10 096F                                     STR_11 0906  
                                   STR_12 094B                                     STR_20 08B4  
                                   STR_13 0951                                     STR_21 089E  
                                   STR_30 093D                                     STR_22 08D4  
                                   STR_14 0957                                     STR_31 08FC  
                                   STR_23 0928                                     STR_15 0906  
                                   STR_24 0984                                     STR_16 0886  
                                   STR_32 092F                                     STR_40 08E3  
                                   STR_25 0988                                     STR_17 08CA  
                                   STR_33 0936                                     STR_41 0849  
                                   STR_26 0944                                     STR_34 0918  
                                   STR_42 0963                                     STR_18 0920  
                                   STR_27 095D                                     STR_35 08D4  
                                   STR_43 0849                                     STR_19 08A9  
                                   STR_28 087A                                     STR_36 0969  
                                   STR_44 090F                                     STR_29 0860  
                                   STR_45 0852                                     STR_37 0852  
                                   STR_46 0892                                     STR_38 08BF  
                                   STR_47 0852                                     STR_39 08E3  
                                   STR_48 08E8                                     i1l489 0073  
             Configuration_Save@ptrConfig 0044                        main@prevPortAState 006D  
                  ParallelLCD_WriteByte@r 0074                                     _PORTA 000C  
                                   _TRISA 008C                                     _TRISB 008D  
                           __CFG_PWRTE$ON 0000                            __CFG_FCMEN$OFF 0000  
         __end_of_PARALLEL_LCD_ROW_SELECT 082C                                     main@i 005A  
                            main@tmpValue 0052                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                         __end_of_CHAR_CODE 0827  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F              __end_of_ParallelLCD_ClearRow 0DAF  
                          __CFG_MCLRE$OFF 0000                           __initialization 0078  
        ParallelLCD_WriteStringClearing@i 0045                              __end_of_main 0793  
                     _soundDurationCount_ 0064                              _beatCounter_ 0066  
                                  ??_main 0047              __end_of_ParallelLCD_SetCgram 0E3B  
                      _Configuration_Load 0F04                        _Configuration_Save 0F5F  
                       __end_of_HEX_TABLE 0824                            __CFG_PLLEN$OFF 0000  
                Configuration_Load@config 0045                             main@isNonZero 0051  
                     ?_Configuration_Load 0070                       ?_Configuration_Save 0070  
                                  _EEADRH 0192                                    _EEADRL 0191  
                                  _EEDATH 0194                                    _CCPR4H 0319  
                                  _EEDATL 0193                                    _CCPR4L 0318  
                                  _EECON2 0196                                    _BITMAP 082C  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  i1l2951 0029                                    i1l2981 005A  
                                  i1l2957 0031                                    i1l2983 005B  
                                  i1l2993 006C                                    i1l2969 0044  
                                  i1l2995 006D           __size_of_ParallelLCD_Initialize 0021  
        ParallelLCD_WriteString@stringPtr 0043        ParallelLCD_WriteCharacter@position 0042  
              ParallelLCD_SetCgram@bitmap 0041                                    ___bmul 0D6D  
                    ??_Configuration_Load 0041                      ??_Configuration_Save 0041  
                          __CFG_STVREN$ON 0000                      _currentValueInfoPtr_ 0060  
               ??_Configuration_WriteByte 0075            Configuration_WriteByte@address 0075  
                   _valueInfoDurationKey_ 00B4                   __end_of__initialization 00A7  
                Configuration_Save@config 0046                       ___bmul@multiplicand 0074  
                          __pcstackCOMMON 0070                              __pidataBANK0 0DF0  
                            __pidataBANK1 0EB6                              __pidataBANK2 0E71  
                           _menuInfoMain_ 00E8                  ??_Configuration_ReadByte 0075  
                           _menuInfoTone_ 003B                    _ParallelLCD_Initialize 0DCF  
     ParallelLCD_WriteCharacter@character 0041                            _OPTION_REGbits 0095  
                    _ParallelLCD_ClearRow 0D95                                __pbssBANK0 005B  
           Configuration_ReadByte@address 0075                 ParallelLCD_WriteByte@data 0075  
                    _ParallelLCD_SetCgram 0E11                  ?_ParallelLCD_WriteString 0043  
                   ParallelLCD_ClearRow@i 0043                                __pmaintext 00AA  
                                 ?___bmul 0074                                __pintentry 0004  
    ParallelLCD_Initialize@configFunction 0044                                   _CCPTMRS 029E  
                      _sampledPortAState_ 006B            __size_of_ParallelLCD_WriteByte 0016  
                     _currentMenuInfoPtr_ 0067             __end_of_ParallelLCD_WriteByte 0D95  
                                 _MESSAGE 0800                     ?_ParallelLCD_ClearRow 0070  
       __size_of_ParallelLCD_ClearDisplay 0008               Configuration_Load@ptrConfig 0043  
               ?_ParallelLCD_ClearDisplay 0070                            main@keyPressed 0055  
                                 _OSCTUNE 0098                         _menuInfoDuration_ 00E2  
                   ?_ParallelLCD_SetCgram 0041                                 _CHAR_CODE 0824  
                       main@COMPARE_UNITS 0827                           __size_of___bmul 0012  
                            isr@prescaler 0078           __size_of_Configuration_ReadByte 0012  
                              _initialize 0793                                   __ptext1 0793  
                                 __ptext2 0D6D                                   __ptext3 0E3B  
                                 __ptext4 0DAF                                   __ptext5 0D3B  
                                 __ptext6 0E11                                   __ptext7 0DCF  
                                 __ptext8 0D33                                   __ptext9 0D95  
                                 _isMute_ 0068                    _informationValueBuffer 0120  
                               _T1CONbits 0018                                 _T2CONbits 001C  
                                 _events_ 0062                _MESSAGE_MENU_ITEM_DURATION 015F  
                            __size_of_isr 0072              ??_ParallelLCD_WriteCharacter 0076  
                               _T4CONbits 0417                                 _T6CONbits 041E  
                   ParallelLCD_SetCgram@i 0045                                 _HEX_TABLE 0814  
                                 main@chr 0054                                   clrloop0 07FB  
                          main@portAState 0059                      end_of_initialization 00A7  
                          main@returnCode 0057           __end_of_ParallelLCD_WriteString 0DCF  
                                 init_ram 0D2D                                   initloop 0D2E  
               __end_ofmain@COMPARE_UNITS 082A                   _PARALLEL_LCD_ROW_SELECT 082A  
                            __pstringtext 0800                    ??_ParallelLCD_ClearRow 0041  
                        __CFG_FOSC$INTOSC 0000                     _currentSingleMessage_ 005E  
                  _Configuration_ReadByte 0D49                            __end_of_BITMAP 0844  
                  ??_ParallelLCD_SetCgram 0043              ParallelLCD_SetCgram@charCode 0044  
                             _CCP1CONbits 0293                               _CCP2CONbits 029A  
                             _CCP3CONbits 0313                               _CCP4CONbits 031A  
                          _valueInfoTone_ 00C9                                main@userId 0058  
 __end_of_ParallelLCD_WriteStringClearing 0E71  __size_of_ParallelLCD_WriteStringClearing 0036  
       ??_ParallelLCD_WriteStringClearing 0043          ?_ParallelLCD_WriteStringClearing 0041  
         _ParallelLCD_WriteStringClearing 0E3B                   ?_ParallelLCD_Initialize 0041  
             __size_of_Configuration_Load 005B               __size_of_Configuration_Save 00A1  
                          __end_of___bmul 0D7F                               ?_initialize 0070  
                     start_initialization 0078                               __end_of_isr 0076  
      Configuration_ReadByte@memorySelect 0074            __end_of_ParallelLCD_Initialize 0DF0  
                ?_Configuration_WriteByte 0074                                  ??___bmul 0075  
        __end_of_ParallelLCD_ClearDisplay 0D3B                               _CCPTMRSbits 029E  
                             __pdataBANK0 0020                               __pdataBANK1 00A0  
                             __pdataBANK2 0120                     _menuInfoConfirmReset_ 00D6  
        __size_of_ParallelLCD_WriteString 0020        __end_of_ParallelLCD_WriteCharacter 0D49  
              _ParallelLCD_WriteCharacter 0D3B                               __pbssCOMMON 0076  
                               ___latbits 0001                             __pcstackBANK0 0041  
                     __size_of_initialize 0067       ParallelLCD_Initialize@configDisplay 0041  
                               __pswtext1 0A20                                 __pswtext2 09B4  
                               __pswtext3 098C                                 __pswtext4 0A00  
                               __pswtext5 09DA                       _valueInfoBeatCount_ 00A6  
   ParallelLCD_Initialize@configEntryMode 0043                     _ParallelLCD_WriteByte 0D7F  
         __end_of_Configuration_WriteByte 0D6D                                  _LATAbits 010C  
                               clear_ram0 07FA                                  _PIE1bits 0091  
                                _PIE3bits 0093                                  _PIR1bits 0011  
                                _PIR2bits 0012                                  _PIR3bits 0013  
             Configuration_WriteByte@data 0074                                 main@F3100 00A0  
                _ParallelLCD_ClearDisplay 0D33                                 main@phase 0056  
                 ?_Configuration_ReadByte 0074              Configuration_Save@returnCode 0043  
                           _tempoCounter_ 005B  ParallelLCD_WriteStringClearing@stringPtr 0041  
                              _EECON1bits 0195                      _menuInfoConfirmLoad_ 00D0  
                    _menuInfoConfirmSave_ 00DC                  _valueInfoOscillatorTune_ 0158  
                    _valueInfoPulseWidth_ 00BB                              ??_initialize 0074  
                 _ParallelLCD_WriteString 0DAF            __end_of_Configuration_ReadByte 0D5B  
                  _MESSAGE_MENU_ITEM_MAIN 013C                    _MESSAGE_MENU_ITEM_TONE 0150  
                  ?_ParallelLCD_WriteByte 0074             __size_of_ParallelLCD_ClearRow 001A  
      ParallelLCD_Initialize@configCursor 0042                                  __ptext10 0D7F  
                                __ptext11 0F5F                                  __ptext12 0D5B  
                                __ptext13 0F04                                  __ptext14 0D49  
                           __size_of_main 06E9             __size_of_ParallelLCD_SetCgram 002A  
                      __end_of_initialize 07FA                __end_of_Configuration_Load 0F5F  
              __end_of_Configuration_Save 1000   ParallelLCD_WriteStringClearing@position 0044  
                         main@valueString 004B          __size_of_Configuration_WriteByte 0012  
             ?_ParallelLCD_WriteCharacter 0041                               _OSCTUNEbits 0098  
                              _INTCONbits 000B                           isr@keyHoldCount 0076  
                     Configuration_Load@i 0044                                  intlevel1 0000  
                     Configuration_Save@i 0045                         __CFG_CLKOUTEN$OFF 0000  
                              _OSCCONbits 0099                 ??_ParallelLCD_WriteString 0045  
                           _configration_ 0028                             _machineError_ 0069  
                              _WDTCONbits 0097                             _machineState_ 006A  
                 _valueInfoDurationClick_ 00AD                      _menuInfoInformation_ 0035  
                     _stateReturnCounter_ 006C                ??_ParallelLCD_ClearDisplay 0076  
