

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Aug  9 15:55:42 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	swtext3,local,class=CONST,delta=2
    20                           	psect	swtext4,local,class=CONST,delta=2
    21                           	psect	swtext5,local,class=CONST,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001E                     	;# 
    66  001F                     	;# 
    67  008C                     	;# 
    68  008D                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0094                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  0111                     	;# 
    87  0112                     	;# 
    88  0113                     	;# 
    89  0114                     	;# 
    90  0115                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  0118                     	;# 
    94  0119                     	;# 
    95  011A                     	;# 
    96  011B                     	;# 
    97  011D                     	;# 
    98  011E                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  0191                     	;# 
   102  0191                     	;# 
   103  0192                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0194                     	;# 
   108  0195                     	;# 
   109  0196                     	;# 
   110  0199                     	;# 
   111  019A                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019C                     	;# 
   117  019C                     	;# 
   118  019D                     	;# 
   119  019E                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020D                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0212                     	;# 
   127  0213                     	;# 
   128  0213                     	;# 
   129  0214                     	;# 
   130  0214                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  0219                     	;# 
   139  021A                     	;# 
   140  021B                     	;# 
   141  021C                     	;# 
   142  021D                     	;# 
   143  021E                     	;# 
   144  021F                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0294                     	;# 
   150  0295                     	;# 
   151  0295                     	;# 
   152  0296                     	;# 
   153  0298                     	;# 
   154  0298                     	;# 
   155  0299                     	;# 
   156  029A                     	;# 
   157  029B                     	;# 
   158  029C                     	;# 
   159  029C                     	;# 
   160  029D                     	;# 
   161  029E                     	;# 
   162  029E                     	;# 
   163  0311                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0318                     	;# 
   168  0318                     	;# 
   169  0319                     	;# 
   170  031A                     	;# 
   171  0394                     	;# 
   172  0395                     	;# 
   173  0396                     	;# 
   174  039A                     	;# 
   175  039C                     	;# 
   176  039D                     	;# 
   177  039E                     	;# 
   178  039F                     	;# 
   179  0415                     	;# 
   180  0416                     	;# 
   181  0417                     	;# 
   182  041C                     	;# 
   183  041D                     	;# 
   184  041E                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196                           
   197                           	psect	idataBANK0
   198  07E9                     __pidataBANK0:	
   199                           
   200                           ;initializer for _configration_
   201  07E9  3400               	retlw	0
   202  07EA  3478               	retlw	120
   203  07EB  3400               	retlw	0
   204  07EC  3404               	retlw	4
   205  07ED  3420               	retlw	32
   206  07EE  3401               	retlw	1
   207  07EF  34F9               	retlw	249
   208  07F0  343E               	retlw	62
   209  07F1  3452               	retlw	82
   210  07F2  3400               	retlw	0
   211  07F3  3400               	retlw	0
   212                           
   213                           ;initializer for _menuStateConfirm_
   214  07F4  3400               	retlw	0
   215  07F5  3400               	retlw	0
   216  07F6  3401               	retlw	1
   217  07F7  3400               	retlw	0
   218                           
   219                           ;initializer for _menuStateInformation_
   220  07F8  3400               	retlw	0
   221  07F9  3400               	retlw	0
   222  07FA  3402               	retlw	2
   223  07FB  3400               	retlw	0
   224                           
   225                           ;initializer for _menuStateTone_
   226  07FC  3400               	retlw	0
   227  07FD  3400               	retlw	0
   228  07FE  3403               	retlw	3
   229  07FF  34DE               	retlw	low (_MESSAGE_MENU_ITEM_TONE| 0)
   230                           
   231                           	psect	idataBANK1
   232  0ED6                     __pidataBANK1:	
   233                           
   234                           ;initializer for _MESSAGE_INFORMATION
   235  0ED6  34F2               	retlw	low (STR_15| (0+32768))
   236  0ED7  3488               	retlw	high (STR_15| (0+32768))
   237  0ED8  348F               	retlw	low (STR_16| (0+32768))
   238  0ED9  3488               	retlw	high (STR_16| (0+32768))
   239  0EDA  349A               	retlw	low (STR_17| (0+32768))
   240  0EDB  3488               	retlw	high (STR_17| (0+32768))
   241  0EDC  3484               	retlw	low (STR_18| (0+32768))
   242  0EDD  3488               	retlw	high (STR_18| (0+32768))
   243                           
   244                           ;initializer for main@F3067
   245  0EDE  343D               	retlw	61
   246  0EDF  3420               	retlw	32
   247  0EE0  3430               	retlw	48
   248  0EE1  3430               	retlw	48
   249  0EE2  3430               	retlw	48
   250  0EE3  3400               	retlw	0
   251                           
   252                           ;initializer for _informationValueBuffer
   253  0EE4  3420               	retlw	32
   254  0EE5  342D               	retlw	45
   255  0EE6  342D               	retlw	45
   256  0EE7  342E               	retlw	46
   257  0EE8  342D               	retlw	45
   258  0EE9  342D               	retlw	45
   259  0EEA  3400               	retlw	0
   260  0EEB  3420               	retlw	32
   261  0EEC  3420               	retlw	32
   262  0EED  3420               	retlw	32
   263  0EEE  342D               	retlw	45
   264  0EEF  342D               	retlw	45
   265  0EF0  3468               	retlw	104
   266  0EF1  3400               	retlw	0
   267  0EF2  3420               	retlw	32
   268  0EF3  3420               	retlw	32
   269  0EF4  3420               	retlw	32
   270  0EF5  342D               	retlw	45
   271  0EF6  342D               	retlw	45
   272  0EF7  3468               	retlw	104
   273  0EF8  3400               	retlw	0
   274  0EF9  3420               	retlw	32
   275  0EFA  3420               	retlw	32
   276  0EFB  3420               	retlw	32
   277  0EFC  3430               	retlw	48
   278  0EFD  3430               	retlw	48
   279  0EFE  3468               	retlw	104
   280  0EFF  3400               	retlw	0
   281                           
   282                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   283  0F00  34E1               	retlw	low (STR_1| (0+32768))
   284  0F01  3488               	retlw	high (STR_1| (0+32768))
   285  0F02  34A5               	retlw	low (STR_2| (0+32768))
   286  0F03  3488               	retlw	high (STR_2| (0+32768))
   287  0F04  34BA               	retlw	low (STR_3| (0+32768))
   288  0F05  3488               	retlw	high (STR_3| (0+32768))
   289  0F06  3451               	retlw	low (STR_4| (0+32768))
   290  0F07  3488               	retlw	high (STR_4| (0+32768))
   291  0F08  345F               	retlw	low (STR_5| (0+32768))
   292  0F09  3488               	retlw	high (STR_5| (0+32768))
   293  0F0A  34CE               	retlw	low (STR_6| (0+32768))
   294  0F0B  3488               	retlw	high (STR_6| (0+32768))
   295  0F0C  3441               	retlw	low (STR_7| (0+32768))
   296  0F0D  3489               	retlw	high (STR_7| (0+32768))
   297  0F0E  3446               	retlw	low (STR_8| (0+32768))
   298  0F0F  3489               	retlw	high (STR_8| (0+32768))
   299  0F10  344B               	retlw	low (STR_9| (0+32768))
   300  0F11  3489               	retlw	high (STR_9| (0+32768))
   301  0F12  343B               	retlw	low (STR_10| (0+32768))
   302  0F13  3489               	retlw	high (STR_10| (0+32768))
   303                           
   304                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   305  0F14  34E1               	retlw	low (STR_1| (0+32768))
   306  0F15  3488               	retlw	high (STR_1| (0+32768))
   307  0F16  341D               	retlw	low (STR_12| (0+32768))
   308  0F17  3489               	retlw	high (STR_12| (0+32768))
   309  0F18  3423               	retlw	low (STR_13| (0+32768))
   310  0F19  3489               	retlw	high (STR_13| (0+32768))
   311  0F1A  3429               	retlw	low (STR_14| (0+32768))
   312  0F1B  3489               	retlw	high (STR_14| (0+32768))
   313                           
   314                           ;initializer for _menuStateMain_
   315  0F1C  3400               	retlw	0
   316  0F1D  3400               	retlw	0
   317  0F1E  3409               	retlw	9
   318  0F1F  34CA               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| 0)
   319                           
   320                           	psect	stringtext
   321  0800                     __pstringtext:	
   322  0800                     _MESSAGE:	
   323  0800  34B0               	retlw	low (STR_19| (0+32768))
   324  0801  3488               	retlw	high (STR_19| (0+32768))
   325  0802  34FA               	retlw	low (STR_20| (0+32768))
   326  0803  3488               	retlw	high (STR_20| (0+32768))
   327  0804  3435               	retlw	low (STR_21| (0+32768))
   328  0805  3489               	retlw	high (STR_21| (0+32768))
   329  0806  3416               	retlw	low (STR_22| (0+32768))
   330  0807  3489               	retlw	high (STR_22| (0+32768))
   331  0808  34A5               	retlw	low (STR_2| (0+32768))
   332  0809  3488               	retlw	high (STR_2| (0+32768))
   333  080A  34BF               	retlw	low ((STR_3+5)| (0+32768))
   334  080B  3488               	retlw	high ((STR_3+5)| (0+32768))
   335  080C  3456               	retlw	low ((STR_4+5)| (0+32768))
   336  080D  3488               	retlw	high ((STR_4+5)| (0+32768))
   337  080E  3478               	retlw	low (STR_26| (0+32768))
   338  080F  3488               	retlw	high (STR_26| (0+32768))
   339  0810  34C4               	retlw	low (STR_27| (0+32768))
   340  0811  3488               	retlw	high (STR_27| (0+32768))
   341  0812  3401               	retlw	low (STR_28| (0+32768))
   342  0813  3489               	retlw	high (STR_28| (0+32768))
   343  0814  3408               	retlw	low (STR_29| (0+32768))
   344  0815  3489               	retlw	high (STR_29| (0+32768))
   345  0816  34EA               	retlw	low (STR_30| (0+32768))
   346  0817  3488               	retlw	high (STR_30| (0+32768))
   347  0818  3450               	retlw	low (STR_31| (0+32768))
   348  0819  3489               	retlw	high (STR_31| (0+32768))
   349  081A  3454               	retlw	low (STR_32| (0+32768))
   350  081B  3489               	retlw	high (STR_32| (0+32768))
   351  081C  340F               	retlw	low (STR_33| (0+32768))
   352  081D  3489               	retlw	high (STR_33| (0+32768))
   353  081E  342F               	retlw	low (STR_34| (0+32768))
   354  081F  3489               	retlw	high (STR_34| (0+32768))
   355  0820  346C               	retlw	low (STR_35| (0+32768))
   356  0821  3488               	retlw	high (STR_35| (0+32768))
   357  0822  34D8               	retlw	low (STR_36| (0+32768))
   358  0823  3488               	retlw	high (STR_36| (0+32768))
   359  0824                     __end_of_MESSAGE:	
   360  0824                     _HEX_TABLE:	
   361  0824  3430               	retlw	48
   362  0825  3431               	retlw	49
   363  0826  3432               	retlw	50
   364  0827  3433               	retlw	51
   365  0828  3434               	retlw	52
   366  0829  3435               	retlw	53
   367  082A  3436               	retlw	54
   368  082B  3437               	retlw	55
   369  082C  3438               	retlw	56
   370  082D  3439               	retlw	57
   371  082E  3441               	retlw	65
   372  082F  3442               	retlw	66
   373  0830  3443               	retlw	67
   374  0831  3444               	retlw	68
   375  0832  3445               	retlw	69
   376  0833  3446               	retlw	70
   377  0834                     __end_of_HEX_TABLE:	
   378  0834                     _CHAR_CODE:	
   379  0834  3400               	retlw	0
   380  0835  3401               	retlw	1
   381  0836  3402               	retlw	2
   382  0837                     __end_of_CHAR_CODE:	
   383  0837                     _PARALLEL_LCD_ROW_SELECT:	
   384  0837  3480               	retlw	128
   385  0838  34C0               	retlw	192
   386  0839                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   387  0839                     _BITMAP:	
   388  0839  3410               	retlw	16
   389  083A  3418               	retlw	24
   390  083B  341C               	retlw	28
   391  083C  341E               	retlw	30
   392  083D  341C               	retlw	28
   393  083E  3418               	retlw	24
   394  083F  3410               	retlw	16
   395  0840  3400               	retlw	0
   396  0841  3400               	retlw	0
   397  0842  3404               	retlw	4
   398  0843  340E               	retlw	14
   399  0844  341F               	retlw	31
   400  0845  3400               	retlw	0
   401  0846  3400               	retlw	0
   402  0847  3400               	retlw	0
   403  0848  3400               	retlw	0
   404  0849  3400               	retlw	0
   405  084A  3400               	retlw	0
   406  084B  3400               	retlw	0
   407  084C  3400               	retlw	0
   408  084D  341F               	retlw	31
   409  084E  340E               	retlw	14
   410  084F  3404               	retlw	4
   411  0850  3400               	retlw	0
   412  0851                     __end_of_BITMAP:	
   413  0016                     _TMR1	set	22
   414  000B                     _INTCONbits	set	11
   415  0011                     _PIR1bits	set	17
   416  0012                     _PIR2bits	set	18
   417  0013                     _PIR3bits	set	19
   418  000C                     _PORTA	set	12
   419  001B                     _PR2	set	27
   420  0018                     _T1CONbits	set	24
   421  001C                     _T2CONbits	set	28
   422  0015                     _TMR0	set	21
   423  001A                     _TMR2	set	26
   424  0095                     _OPTION_REGbits	set	149
   425  0099                     _OSCCONbits	set	153
   426  0098                     _OSCTUNE	set	152
   427  0098                     _OSCTUNEbits	set	152
   428  0091                     _PIE1bits	set	145
   429  0093                     _PIE3bits	set	147
   430  008C                     _TRISA	set	140
   431  008D                     _TRISB	set	141
   432  0097                     _WDTCONbits	set	151
   433  010C                     _LATAbits	set	268
   434  010D                     _LATB	set	269
   435  018C                     _ANSELA	set	396
   436  018D                     _ANSELB	set	397
   437  0192                     _EEADRH	set	402
   438  0191                     _EEADRL	set	401
   439  0195                     _EECON1bits	set	405
   440  0196                     _EECON2	set	406
   441  0194                     _EEDATH	set	404
   442  0193                     _EEDATL	set	403
   443  0293                     _CCP1CONbits	set	659
   444  029A                     _CCP2CONbits	set	666
   445  029E                     _CCPTMRS	set	670
   446  029E                     _CCPTMRSbits	set	670
   447  0313                     _CCP3CONbits	set	787
   448  031A                     _CCP4CONbits	set	794
   449  0319                     _CCPR4H	set	793
   450  0318                     _CCPR4L	set	792
   451  0416                     _PR4	set	1046
   452  041D                     _PR6	set	1053
   453  0417                     _T4CONbits	set	1047
   454  041E                     _T6CONbits	set	1054
   455  0415                     _TMR4	set	1045
   456  041C                     _TMR6	set	1052
   457  0851                     STR_4:	
   458  0851  3441               	retlw	65	;'A'
   459  0852  3464               	retlw	100	;'d'
   460  0853  346A               	retlw	106	;'j'
   461  0854  342E               	retlw	46	;'.'
   462  0855  3420               	retlw	32	;' '
   463  0856  3444               	retlw	68	;'D'
   464  0857  3475               	retlw	117	;'u'
   465  0858  3472               	retlw	114	;'r'
   466  0859  3461               	retlw	97	;'a'
   467  085A  3474               	retlw	116	;'t'
   468  085B  3469               	retlw	105	;'i'
   469  085C  346F               	retlw	111	;'o'
   470  085D  346E               	retlw	110	;'n'
   471  085E  3400               	retlw	0
   472  085F                     STR_5:	
   473  085F  3441               	retlw	65	;'A'
   474  0860  3464               	retlw	100	;'d'
   475  0861  346A               	retlw	106	;'j'
   476  0862  342E               	retlw	46	;'.'
   477  0863  3420               	retlw	32	;' '
   478  0864  3450               	retlw	80	;'P'
   479  0865  342D               	retlw	45	;'-'
   480  0866  3457               	retlw	87	;'W'
   481  0867  3469               	retlw	105	;'i'
   482  0868  3464               	retlw	100	;'d'
   483  0869  3474               	retlw	116	;'t'
   484  086A  3468               	retlw	104	;'h'
   485  086B  3400               	retlw	0
   486  086C                     STR_35:	
   487  086C  3449               	retlw	73	;'I'
   488  086D  346E               	retlw	110	;'n'
   489  086E  3469               	retlw	105	;'i'
   490  086F  3474               	retlw	116	;'t'
   491  0870  3469               	retlw	105	;'i'
   492  0871  3461               	retlw	97	;'a'
   493  0872  346C               	retlw	108	;'l'
   494  0873  3469               	retlw	105	;'i'
   495  0874  347A               	retlw	122	;'z'
   496  0875  3465               	retlw	101	;'e'
   497  0876  3464               	retlw	100	;'d'
   498  0877  3400               	retlw	0
   499  0878                     STR_26:	
   500  0878  3450               	retlw	80	;'P'
   501  0879  3475               	retlw	117	;'u'
   502  087A  346C               	retlw	108	;'l'
   503  087B  3473               	retlw	115	;'s'
   504  087C  3465               	retlw	101	;'e'
   505  087D  3420               	retlw	32	;' '
   506  087E  3457               	retlw	87	;'W'
   507  087F  3469               	retlw	105	;'i'
   508  0880  3464               	retlw	100	;'d'
   509  0881  3474               	retlw	116	;'t'
   510  0882  3468               	retlw	104	;'h'
   511  0883  3400               	retlw	0
   512  0884                     STR_18:	
   513  0884  3445               	retlw	69	;'E'
   514  0885  3472               	retlw	114	;'r'
   515  0886  3472               	retlw	114	;'r'
   516  0887  346F               	retlw	111	;'o'
   517  0888  3472               	retlw	114	;'r'
   518  0889  3420               	retlw	32	;' '
   519  088A  3443               	retlw	67	;'C'
   520  088B  346F               	retlw	111	;'o'
   521  088C  3464               	retlw	100	;'d'
   522  088D  3465               	retlw	101	;'e'
   523  088E  3400               	retlw	0
   524  088F                     STR_16:	
   525  088F  3452               	retlw	82	;'R'
   526  0890  344F               	retlw	79	;'O'
   527  0891  344D               	retlw	77	;'M'
   528  0892  3420               	retlw	32	;' '
   529  0893  344F               	retlw	79	;'O'
   530  0894  3466               	retlw	102	;'f'
   531  0895  3466               	retlw	102	;'f'
   532  0896  3473               	retlw	115	;'s'
   533  0897  3465               	retlw	101	;'e'
   534  0898  3474               	retlw	116	;'t'
   535  0899  3400               	retlw	0
   536  089A                     STR_17:	
   537  089A  3453               	retlw	83	;'S'
   538  089B  3461               	retlw	97	;'a'
   539  089C  3476               	retlw	118	;'v'
   540  089D  3465               	retlw	101	;'e'
   541  089E  3420               	retlw	32	;' '
   542  089F  3443               	retlw	67	;'C'
   543  08A0  346F               	retlw	111	;'o'
   544  08A1  3475               	retlw	117	;'u'
   545  08A2  346E               	retlw	110	;'n'
   546  08A3  3474               	retlw	116	;'t'
   547  08A4  3400               	retlw	0
   548  08A5                     STR_2:	
   549  08A5  3442               	retlw	66	;'B'
   550  08A6  3465               	retlw	101	;'e'
   551  08A7  3461               	retlw	97	;'a'
   552  08A8  3474               	retlw	116	;'t'
   553  08A9  3420               	retlw	32	;' '
   554  08AA  3443               	retlw	67	;'C'
   555  08AB  346F               	retlw	111	;'o'
   556  08AC  3475               	retlw	117	;'u'
   557  08AD  346E               	retlw	110	;'n'
   558  08AE  3474               	retlw	116	;'t'
   559  08AF  3400               	retlw	0
   560  08B0                     STR_19:	
   561  08B0  344D               	retlw	77	;'M'
   562  08B1  3465               	retlw	101	;'e'
   563  08B2  3474               	retlw	116	;'t'
   564  08B3  3472               	retlw	114	;'r'
   565  08B4  346F               	retlw	111	;'o'
   566  08B5  346E               	retlw	110	;'n'
   567  08B6  346F               	retlw	111	;'o'
   568  08B7  346D               	retlw	109	;'m'
   569  08B8  3465               	retlw	101	;'e'
   570  08B9  3400               	retlw	0
   571  08BA                     STR_3:	
   572  08BA  3441               	retlw	65	;'A'
   573  08BB  3464               	retlw	100	;'d'
   574  08BC  346A               	retlw	106	;'j'
   575  08BD  342E               	retlw	46	;'.'
   576  08BE  3420               	retlw	32	;' '
   577  08BF  3454               	retlw	84	;'T'
   578  08C0  346F               	retlw	111	;'o'
   579  08C1  346E               	retlw	110	;'n'
   580  08C2  3465               	retlw	101	;'e'
   581  08C3  3400               	retlw	0
   582  08C4                     STR_27:	
   583  08C4  344F               	retlw	79	;'O'
   584  08C5  3473               	retlw	115	;'s'
   585  08C6  3463               	retlw	99	;'c'
   586  08C7  342E               	retlw	46	;'.'
   587  08C8  3420               	retlw	32	;' '
   588  08C9  3454               	retlw	84	;'T'
   589  08CA  3475               	retlw	117	;'u'
   590  08CB  346E               	retlw	110	;'n'
   591  08CC  3465               	retlw	101	;'e'
   592  08CD  3400               	retlw	0
   593  08CE                     STR_6:	
   594  08CE  3441               	retlw	65	;'A'
   595  08CF  3464               	retlw	100	;'d'
   596  08D0  346A               	retlw	106	;'j'
   597  08D1  342E               	retlw	46	;'.'
   598  08D2  3420               	retlw	32	;' '
   599  08D3  3454               	retlw	84	;'T'
   600  08D4  3475               	retlw	117	;'u'
   601  08D5  346E               	retlw	110	;'n'
   602  08D6  3465               	retlw	101	;'e'
   603  08D7  3400               	retlw	0
   604  08D8                     STR_36:	
   605  08D8  3445               	retlw	69	;'E'
   606  08D9  3452               	retlw	82	;'R'
   607  08DA  3452               	retlw	82	;'R'
   608  08DB  344F               	retlw	79	;'O'
   609  08DC  3452               	retlw	82	;'R'
   610  08DD  3420               	retlw	32	;' '
   611  08DE  3421               	retlw	33	;'!'
   612  08DF  3421               	retlw	33	;'!'
   613  08E0  3400               	retlw	0
   614  08E1                     STR_1:	
   615  08E1  343C               	retlw	60	;'<'
   616  08E2  3420               	retlw	32	;' '
   617  08E3  3452               	retlw	82	;'R'
   618  08E4  3465               	retlw	101	;'e'
   619  08E5  3474               	retlw	116	;'t'
   620  08E6  3475               	retlw	117	;'u'
   621  08E7  3472               	retlw	114	;'r'
   622  08E8  346E               	retlw	110	;'n'
   623  08E9  3400               	retlw	0
   624  08EA                     STR_30:	
   625  08EA  3452               	retlw	82	;'R'
   626  08EB  3465               	retlw	101	;'e'
   627  08EC  3473               	retlw	115	;'s'
   628  08ED  3465               	retlw	101	;'e'
   629  08EE  3474               	retlw	116	;'t'
   630  08EF  3420               	retlw	32	;' '
   631  08F0  343F               	retlw	63	;'?'
   632  08F1  3400               	retlw	0
   633  08F2                     STR_15:	
   634  08F2  3456               	retlw	86	;'V'
   635  08F3  3465               	retlw	101	;'e'
   636  08F4  3472               	retlw	114	;'r'
   637  08F5  3473               	retlw	115	;'s'
   638  08F6  3469               	retlw	105	;'i'
   639  08F7  346F               	retlw	111	;'o'
   640  08F8  346E               	retlw	110	;'n'
   641  08F9  3400               	retlw	0
   642  08FA                     STR_20:	
   643  08FA  3423               	retlw	35	;'#'
   644  08FB  344D               	retlw	77	;'M'
   645  08FC  3475               	retlw	117	;'u'
   646  08FD  3474               	retlw	116	;'t'
   647  08FE  3465               	retlw	101	;'e'
   648  08FF  3423               	retlw	35	;'#'
   649  0900  3400               	retlw	0
   650  0901                     STR_28:	
   651  0901  344C               	retlw	76	;'L'
   652  0902  346F               	retlw	111	;'o'
   653  0903  3461               	retlw	97	;'a'
   654  0904  3464               	retlw	100	;'d'
   655  0905  3420               	retlw	32	;' '
   656  0906  343F               	retlw	63	;'?'
   657  0907  3400               	retlw	0
   658  0908                     STR_29:	
   659  0908  3453               	retlw	83	;'S'
   660  0909  3461               	retlw	97	;'a'
   661  090A  3476               	retlw	118	;'v'
   662  090B  3465               	retlw	101	;'e'
   663  090C  3420               	retlw	32	;' '
   664  090D  343F               	retlw	63	;'?'
   665  090E  3400               	retlw	0
   666  090F                     STR_33:	
   667  090F  344C               	retlw	76	;'L'
   668  0910  346F               	retlw	111	;'o'
   669  0911  3461               	retlw	97	;'a'
   670  0912  3464               	retlw	100	;'d'
   671  0913  3465               	retlw	101	;'e'
   672  0914  3464               	retlw	100	;'d'
   673  0915  3400               	retlw	0
   674  0916                     STR_22:	
   675  0916  3443               	retlw	67	;'C'
   676  0917  346F               	retlw	111	;'o'
   677  0918  346E               	retlw	110	;'n'
   678  0919  3466               	retlw	102	;'f'
   679  091A  3469               	retlw	105	;'i'
   680  091B  3467               	retlw	103	;'g'
   681  091C  3400               	retlw	0
   682  091D                     STR_12:	
   683  091D  3454               	retlw	84	;'T'
   684  091E  346F               	retlw	111	;'o'
   685  091F  346E               	retlw	110	;'n'
   686  0920  3465               	retlw	101	;'e'
   687  0921  3430               	retlw	48	;'0'
   688  0922  3400               	retlw	0
   689  0923                     STR_13:	
   690  0923  3454               	retlw	84	;'T'
   691  0924  346F               	retlw	111	;'o'
   692  0925  346E               	retlw	110	;'n'
   693  0926  3465               	retlw	101	;'e'
   694  0927  3431               	retlw	49	;'1'
   695  0928  3400               	retlw	0
   696  0929                     STR_14:	
   697  0929  3454               	retlw	84	;'T'
   698  092A  346F               	retlw	111	;'o'
   699  092B  346E               	retlw	110	;'n'
   700  092C  3465               	retlw	101	;'e'
   701  092D  3432               	retlw	50	;'2'
   702  092E  3400               	retlw	0
   703  092F                     STR_34:	
   704  092F  3453               	retlw	83	;'S'
   705  0930  3461               	retlw	97	;'a'
   706  0931  3476               	retlw	118	;'v'
   707  0932  3465               	retlw	101	;'e'
   708  0933  3464               	retlw	100	;'d'
   709  0934  3400               	retlw	0
   710  0935                     STR_21:	
   711  0935  3454               	retlw	84	;'T'
   712  0936  3465               	retlw	101	;'e'
   713  0937  346D               	retlw	109	;'m'
   714  0938  3470               	retlw	112	;'p'
   715  0939  346F               	retlw	111	;'o'
   716  093A  3400               	retlw	0
   717  093B                     STR_10:	
   718  093B  3452               	retlw	82	;'R'
   719  093C  3465               	retlw	101	;'e'
   720  093D  3473               	retlw	115	;'s'
   721  093E  3465               	retlw	101	;'e'
   722  093F  3474               	retlw	116	;'t'
   723  0940  3400               	retlw	0
   724  0941                     STR_7:	
   725  0941  344C               	retlw	76	;'L'
   726  0942  346F               	retlw	111	;'o'
   727  0943  3461               	retlw	97	;'a'
   728  0944  3464               	retlw	100	;'d'
   729  0945  3400               	retlw	0
   730  0946                     STR_8:	
   731  0946  3453               	retlw	83	;'S'
   732  0947  3461               	retlw	97	;'a'
   733  0948  3476               	retlw	118	;'v'
   734  0949  3465               	retlw	101	;'e'
   735  094A  3400               	retlw	0
   736  094B                     STR_9:	
   737  094B  3449               	retlw	73	;'I'
   738  094C  346E               	retlw	110	;'n'
   739  094D  3466               	retlw	102	;'f'
   740  094E  346F               	retlw	111	;'o'
   741  094F  3400               	retlw	0
   742  0950                     STR_31:	
   743  0950  344E               	retlw	78	;'N'
   744  0951  346F               	retlw	111	;'o'
   745  0952  3420               	retlw	32	;' '
   746  0953  3400               	retlw	0
   747  0954                     STR_32:	
   748  0954  3459               	retlw	89	;'Y'
   749  0955  3465               	retlw	101	;'e'
   750  0956  3473               	retlw	115	;'s'
   751  0957  3400               	retlw	0
   752  08BF                     
   753                           ; #config settings
   754  0000                     
   755                           	psect	cinit
   756  00B0                     start_initialization:	
   757  00B0                     __initialization:	
   758                           
   759                           ; Clear objects allocated to COMMON
   760  00B0  01F8               	clrf	__pbssCOMMON& (0+127)
   761  00B1  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   762                           
   763                           ; Clear objects allocated to BANK0
   764  00B2  3058               	movlw	low __pbssBANK0
   765  00B3  0084               	movwf	4
   766  00B4  3000               	movlw	high __pbssBANK0
   767  00B5  0085               	movwf	5
   768  00B6  3015               	movlw	21
   769  00B7  318D  25CC  3180   	fcall	clear_ram0
   770                           
   771                           ; Initialize objects allocated to BANK0
   772  00BA  30E9               	movlw	low __pidataBANK0
   773  00BB  0084               	movwf	4
   774  00BC  3087               	movlw	(high __pidataBANK0)| (0+128)
   775  00BD  0085               	movwf	5
   776  00BE  3041               	movlw	low __pdataBANK0
   777  00BF  0086               	movwf	6
   778  00C0  3000               	movlw	high __pdataBANK0
   779  00C1  0087               	movwf	7
   780  00C2  3017               	movlw	23
   781  00C3  318D  25C6  3180   	fcall	init_ram
   782                           
   783                           ; Initialize objects allocated to BANK1
   784  00C6  30D6               	movlw	low __pidataBANK1
   785  00C7  0084               	movwf	4
   786  00C8  308E               	movlw	(high __pidataBANK1)| (0+128)
   787  00C9  0085               	movwf	5
   788  00CA  30A0               	movlw	low __pdataBANK1
   789  00CB  0086               	movwf	6
   790  00CC  3000               	movlw	high __pdataBANK1
   791  00CD  0087               	movwf	7
   792  00CE  304A               	movlw	74
   793  00CF  318D  25C6         	fcall	init_ram
   794  00D1                     end_of_initialization:	
   795                           ;End of C runtime variable initialization code
   796                           
   797  00D1                     __end_of__initialization:	
   798  00D1  0020               	movlb	0
   799  00D2  3180  28D4         	ljmp	_main	;jump to C main() function
   800                           
   801                           	psect	bssCOMMON
   802  0078                     __pbssCOMMON:	
   803  0078                     isr@eventPrescaler:	
   804  0078                     	ds	2
   805                           
   806                           	psect	bssBANK0
   807  0058                     __pbssBANK0:	
   808  0058                     _keyCount_:	
   809  0058                     	ds	4
   810  005C                     _tempoCounter_:	
   811  005C                     	ds	3
   812  005F                     _valueLimit_:	
   813  005F                     	ds	2
   814  0061                     _beatCounter_:	
   815  0061                     	ds	1
   816  0062                     _currentMenuStatePtr_:	
   817  0062                     	ds	1
   818  0063                     _currentValuePtr:	
   819  0063                     	ds	1
   820  0064                     _duration_:	
   821  0064                     	ds	1
   822  0065                     _inputEvent_:	
   823  0065                     	ds	1
   824  0066                     _isMute_:	
   825  0066                     	ds	1
   826  0067                     _keyBeepCounter_:	
   827  0067                     	ds	1
   828  0068                     _machineState_:	
   829  0068                     	ds	1
   830  0069                     _outputEvent_:	
   831  0069                     	ds	1
   832  006A                     _portAState_:	
   833  006A                     	ds	1
   834  006B                     _stateReturnCounter_:	
   835  006B                     	ds	1
   836  006C                     main@prevPortAState:	
   837  006C                     	ds	1
   838                           
   839                           	psect	dataBANK0
   840  0041                     __pdataBANK0:	
   841  0041                     _configration_:	
   842  0041                     	ds	11
   843  004C                     _menuStateConfirm_:	
   844  004C                     	ds	4
   845  0050                     _menuStateInformation_:	
   846  0050                     	ds	4
   847  0054                     _menuStateTone_:	
   848  0054                     	ds	4
   849                           
   850                           	psect	dataBANK1
   851  00A0                     __pdataBANK1:	
   852  00A0                     _MESSAGE_INFORMATION:	
   853  00A0                     	ds	8
   854  00A8                     main@F3067:	
   855  00A8                     	ds	6
   856  00AE                     _informationValueBuffer:	
   857  00AE                     	ds	28
   858  00CA                     _MESSAGE_MENU_ITEM_MAIN:	
   859  00CA                     	ds	20
   860  00DE                     _MESSAGE_MENU_ITEM_TONE:	
   861  00DE                     	ds	8
   862  00E6                     _menuStateMain_:	
   863  00E6                     	ds	4
   864                           
   865                           	psect	clrtext
   866  0DCC                     clear_ram0:	
   867                           ;	Called with FSR0 containing the base address, and
   868                           ;	WREG with the size to clear
   869                           
   870  0DCC  0064               	clrwdt	;clear the watchdog before getting into this loop
   871  0DCD                     clrloop0:	
   872  0DCD  0180               	clrf	0	;clear RAM location pointed to by FSR
   873  0DCE  3101               	addfsr 0,1
   874  0DCF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   875  0DD0  2DCD               	goto	clrloop0	;have we reached the end yet?
   876  0DD1  3400               	retlw	0	;all done for this memory range, return
   877                           
   878                           	psect	inittext
   879  0DC6                     init_ram:	
   880  0DC6  00FE               	movwf	126
   881  0DC7                     initloop:	
   882  0DC7  0012               	moviw fsr0++
   883  0DC8  001E               	movwi fsr1++
   884  0DC9  0BFE               	decfsz	126,f
   885  0DCA  2DC7               	goto	initloop
   886  0DCB  3400               	retlw	0
   887                           
   888                           	psect	cstackCOMMON
   889  0070                     __pcstackCOMMON:	
   890  0070                     ?_initialize:	
   891  0070                     ?__parallel_lcd_Initialize:	
   892                           ; 0 bytes @ 0x0
   893                           
   894  0070                     ?__parallel_lcd_ClearRow:	
   895                           ; 0 bytes @ 0x0
   896                           
   897  0070                     ?_main:	
   898                           ; 0 bytes @ 0x0
   899                           
   900  0070                     ?_isr:	
   901                           ; 0 bytes @ 0x0
   902                           
   903  0070                     ??_isr:	
   904                           ; 0 bytes @ 0x0
   905                           
   906  0070                     ?__configuration_Save:	
   907                           ; 0 bytes @ 0x0
   908                           
   909  0070                     ?__configuration_Load:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?__configuration_GetRomOffset:	
   913                           ; 1 bytes @ 0x0
   914                           
   915                           
   916                           ; 1 bytes @ 0x0
   917  0070                     	ds	4
   918  0074                     ?__private_parallel_lcd_WriteByte:	
   919  0074                     ?__configuration_WriteByte:	
   920                           ; 0 bytes @ 0x4
   921                           
   922  0074                     ??_initialize:	
   923                           ; 0 bytes @ 0x4
   924                           
   925  0074                     ?__configuration_ReadByte:	
   926                           ; 0 bytes @ 0x4
   927                           
   928  0074                     ?___bmul:	
   929                           ; 1 bytes @ 0x4
   930                           
   931  0074                     __private_parallel_lcd_WriteByte@r:	
   932                           ; 1 bytes @ 0x4
   933                           
   934  0074                     __configuration_WriteByte@data:	
   935                           ; 1 bytes @ 0x4
   936                           
   937  0074                     __configuration_ReadByte@memorySelect:	
   938                           ; 1 bytes @ 0x4
   939                           
   940  0074                     ___bmul@multiplicand:	
   941                           ; 1 bytes @ 0x4
   942                           
   943                           
   944                           ; 1 bytes @ 0x4
   945  0074                     	ds	1
   946  0075                     ??__private_parallel_lcd_WriteByte:	
   947  0075                     ??__configuration_ReadByte:	
   948                           ; 0 bytes @ 0x5
   949                           
   950  0075                     ??__configuration_WriteByte:	
   951                           ; 0 bytes @ 0x5
   952                           
   953  0075                     ??___bmul:	
   954                           ; 0 bytes @ 0x5
   955                           
   956  0075                     __private_parallel_lcd_WriteByte@data:	
   957                           ; 0 bytes @ 0x5
   958                           
   959  0075                     __configuration_WriteByte@address:	
   960                           ; 1 bytes @ 0x5
   961                           
   962  0075                     __configuration_ReadByte@address:	
   963                           ; 1 bytes @ 0x5
   964                           
   965                           
   966                           ; 1 bytes @ 0x5
   967  0075                     	ds	1
   968  0076                     ??__parallel_lcd_Initialize:	
   969  0076                     ?__parallel_lcd_WriteCharacter:	
   970                           ; 0 bytes @ 0x6
   971                           
   972  0076                     ?__parallel_lcd_WriteStringClearing:	
   973                           ; 0 bytes @ 0x6
   974                           
   975  0076                     ??__parallel_lcd_ClearRow:	
   976                           ; 0 bytes @ 0x6
   977                           
   978  0076                     ?__parallel_lcd_SetCgram:	
   979                           ; 0 bytes @ 0x6
   980                           
   981  0076                     ??__configuration_Save:	
   982                           ; 0 bytes @ 0x6
   983                           
   984  0076                     ??__configuration_Load:	
   985                           ; 0 bytes @ 0x6
   986                           
   987  0076                     ??__configuration_GetRomOffset:	
   988                           ; 0 bytes @ 0x6
   989                           
   990  0076                     __parallel_lcd_WriteCharacter@character:	
   991                           ; 0 bytes @ 0x6
   992                           
   993  0076                     ___bmul@product:	
   994                           ; 1 bytes @ 0x6
   995                           
   996  0076                     __parallel_lcd_WriteStringClearing@stringPtr:	
   997                           ; 1 bytes @ 0x6
   998                           
   999  0076                     __parallel_lcd_SetCgram@bitmap:	
  1000                           ; 2 bytes @ 0x6
  1001                           
  1002                           
  1003                           ; 2 bytes @ 0x6
  1004  0076                     	ds	1
  1005  0077                     ??__parallel_lcd_WriteCharacter:	
  1006  0077                     __parallel_lcd_WriteCharacter@position:	
  1007                           ; 0 bytes @ 0x7
  1008                           
  1009  0077                     ___bmul@multiplier:	
  1010                           ; 1 bytes @ 0x7
  1011                           
  1012                           
  1013                           ; 1 bytes @ 0x7
  1014  0077                     	ds	1
  1015                           
  1016                           	psect	cstackBANK0
  1017  0020                     __pcstackBANK0:	
  1018  0020                     ?__parallel_lcd_WriteString:	
  1019  0020                     ??__parallel_lcd_WriteStringClearing:	
  1020                           ; 0 bytes @ 0x0
  1021                           
  1022  0020                     ??__parallel_lcd_SetCgram:	
  1023                           ; 0 bytes @ 0x0
  1024                           
  1025  0020                     __parallel_lcd_ClearRow@rowSelect:	
  1026                           ; 0 bytes @ 0x0
  1027                           
  1028  0020                     __configuration_Save@returnCode:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0020                     __configuration_Load@ptrConfig:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0020                     __parallel_lcd_WriteString@stringPtr:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037                           
  1038                           ; 2 bytes @ 0x0
  1039  0020                     	ds	1
  1040  0021                     __parallel_lcd_WriteStringClearing@position:	
  1041  0021                     __parallel_lcd_ClearRow@i:	
  1042                           ; 1 bytes @ 0x1
  1043                           
  1044  0021                     __parallel_lcd_SetCgram@charCode:	
  1045                           ; 1 bytes @ 0x1
  1046                           
  1047  0021                     __configuration_Save@ptrConfig:	
  1048                           ; 1 bytes @ 0x1
  1049                           
  1050  0021                     __configuration_Load@romOffset:	
  1051                           ; 1 bytes @ 0x1
  1052                           
  1053                           
  1054                           ; 1 bytes @ 0x1
  1055  0021                     	ds	1
  1056  0022                     ??__parallel_lcd_WriteString:	
  1057  0022                     __parallel_lcd_WriteStringClearing@i:	
  1058                           ; 0 bytes @ 0x2
  1059                           
  1060  0022                     __parallel_lcd_SetCgram@i:	
  1061                           ; 1 bytes @ 0x2
  1062                           
  1063  0022                     __configuration_Save@romOffset:	
  1064                           ; 1 bytes @ 0x2
  1065                           
  1066  0022                     __configuration_Load@config:	
  1067                           ; 1 bytes @ 0x2
  1068                           
  1069                           
  1070                           ; 1 bytes @ 0x2
  1071  0022                     	ds	1
  1072  0023                     __parallel_lcd_WriteString@position:	
  1073  0023                     __configuration_Save@i:	
  1074                           ; 1 bytes @ 0x3
  1075                           
  1076  0023                     __configuration_Load@i:	
  1077                           ; 1 bytes @ 0x3
  1078                           
  1079                           
  1080                           ; 1 bytes @ 0x3
  1081  0023                     	ds	1
  1082  0024                     __configuration_Save@config:	
  1083                           
  1084                           ; 1 bytes @ 0x4
  1085  0024                     	ds	1
  1086  0025                     ??_main:	
  1087                           
  1088                           ; 0 bytes @ 0x5
  1089  0025                     	ds	4
  1090  0029                     main@valueString:	
  1091                           
  1092                           ; 6 bytes @ 0x9
  1093  0029                     	ds	6
  1094  002F                     _main$1165:	
  1095                           
  1096                           ; 2 bytes @ 0xF
  1097  002F                     	ds	2
  1098  0031                     _main$1166:	
  1099                           
  1100                           ; 2 bytes @ 0x11
  1101  0031                     	ds	2
  1102  0033                     _main$1167:	
  1103                           
  1104                           ; 2 bytes @ 0x13
  1105  0033                     	ds	2
  1106  0035                     _main$1168:	
  1107                           
  1108                           ; 2 bytes @ 0x15
  1109  0035                     	ds	2
  1110  0037                     main@isNonZero:	
  1111                           
  1112                           ; 1 bytes @ 0x17
  1113  0037                     	ds	1
  1114  0038                     main@tmpValue:	
  1115                           
  1116                           ; 2 bytes @ 0x18
  1117  0038                     	ds	2
  1118  003A                     main@romOffset:	
  1119                           
  1120                           ; 1 bytes @ 0x1A
  1121  003A                     	ds	1
  1122  003B                     main@compareUnit:	
  1123                           
  1124                           ; 1 bytes @ 0x1B
  1125  003B                     	ds	1
  1126  003C                     main@keyPressed:	
  1127                           
  1128                           ; 1 bytes @ 0x1C
  1129  003C                     	ds	1
  1130  003D                     main@phase:	
  1131                           
  1132                           ; 1 bytes @ 0x1D
  1133  003D                     	ds	1
  1134  003E                     main@returnCode:	
  1135                           
  1136                           ; 1 bytes @ 0x1E
  1137  003E                     	ds	1
  1138  003F                     main@userId:	
  1139                           
  1140                           ; 1 bytes @ 0x1F
  1141  003F                     	ds	1
  1142  0040                     main@i:	
  1143                           
  1144                           ; 1 bytes @ 0x20
  1145  0040                     	ds	1
  1146                           
  1147                           	psect	maintext
  1148  00D4                     __pmaintext:	
  1149 ;;
  1150 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1151 ;;
  1152 ;; *************** function _main *****************
  1153 ;; Defined at:
  1154 ;;		line 208 in file "src/main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  compareUnit     1   27[BANK0 ] unsigned char 
  1159 ;;  i               1   32[BANK0 ] unsigned char 
  1160 ;;  userId          1   31[BANK0 ] unsigned char 
  1161 ;;  valueString     6    9[BANK0 ] unsigned char [6]
  1162 ;;  tmpValue        2   24[BANK0 ] unsigned int 
  1163 ;;  isNonZero       1   23[BANK0 ] unsigned char 
  1164 ;;  returnCode      1   30[BANK0 ] enum E2826
  1165 ;;  romOffset       1   26[BANK0 ] unsigned char 
  1166 ;;  keyPressed      1   28[BANK0 ] struct .
  1167 ;;  phase           1   29[BANK0 ] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;		None               void
  1170 ;; Registers used:
  1171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : B1F/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1177 ;;      Params:         0       0       0       0       0       0
  1178 ;;      Locals:         0      24       0       0       0       0
  1179 ;;      Temps:          0       4       0       0       0       0
  1180 ;;      Totals:         0      28       0       0       0       0
  1181 ;;Total ram usage:       28 bytes
  1182 ;; Hardware stack levels required when called:    3
  1183 ;; This function calls:
  1184 ;;		___bmul
  1185 ;;		__configuration_GetRomOffset
  1186 ;;		__configuration_Load
  1187 ;;		__configuration_ReadByte
  1188 ;;		__configuration_Save
  1189 ;;		__parallel_lcd_ClearRow
  1190 ;;		__parallel_lcd_Initialize
  1191 ;;		__parallel_lcd_SetCgram
  1192 ;;		__parallel_lcd_WriteCharacter
  1193 ;;		__parallel_lcd_WriteString
  1194 ;;		__parallel_lcd_WriteStringClearing
  1195 ;;		_initialize
  1196 ;; This function is called by:
  1197 ;;		Startup code after reset
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           
  1202                           ;psect for function _main
  1203  00D4                     _main:	
  1204                           
  1205                           ;main.c: 211: initialize( ) ;
  1206                           
  1207                           ;incstack = 0
  1208                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1209  00D4  3187  2782  3180   	fcall	_initialize
  1210                           
  1211                           ;main.c: 214: if( ( (~PORTA&0xE0) & 0xE0 ) == 0xC0 )
  1212  00D7  0020               	movlb	0	; select bank0
  1213  00D8  090C               	comf	12,w	;volatile
  1214  00D9  00A5               	movwf	??_main
  1215  00DA  30E0               	movlw	224
  1216  00DB  0525               	andwf	??_main,w
  1217  00DC  3AC0               	xorlw	192
  1218  00DD  1D03               	skipz
  1219  00DE  28E4               	goto	l3173
  1220                           
  1221                           ;main.c: 215: machineState_ = STATE_INITIALIZE ;
  1222  00DF  300F               	movlw	15
  1223  00E0  00A5               	movwf	??_main
  1224  00E1  0825               	movf	??_main,w
  1225  00E2  00E8               	movwf	_machineState_
  1226  00E3  28E5               	goto	l3175
  1227  00E4                     l3173:	
  1228                           
  1229                           ;main.c: 216: else
  1230                           ;main.c: 217: machineState_ = STATE_BOOT ;
  1231  00E4  01E8               	clrf	_machineState_
  1232  00E5                     l3175:	
  1233                           
  1234                           ;main.c: 219: outputEvent_.accessEeprom = 1 ;
  1235  00E5  17E9               	bsf	_outputEvent_,7
  1236                           
  1237                           ;main.c: 222: PR2 = 124 ;
  1238  00E6  307C               	movlw	124
  1239  00E7  009B               	movwf	27	;volatile
  1240                           
  1241                           ;main.c: 223: {CCPR4L=(PR2>>1);} ;
  1242  00E8  361B               	lsrf	27,w	;volatile
  1243  00E9  0026               	movlb	6	; select bank6
  1244  00EA  0098               	movwf	24	;volatile
  1245                           
  1246                           ;main.c: 226: T4CONbits.TMR4ON = 1 ;
  1247  00EB  0028               	movlb	8	; select bank8
  1248  00EC  1517               	bsf	23,2	;volatile
  1249                           
  1250                           ;main.c: 229: T1CONbits.TMR1ON = 1 ;
  1251  00ED  0020               	movlb	0	; select bank0
  1252  00EE  1418               	bsf	24,0	;volatile
  1253                           
  1254                           ;main.c: 232: for( uint08 phase = 0 ; phase < 0xE ; phase++ ) {
  1255  00EF  01BD               	clrf	main@phase
  1256  00F0  300E               	movlw	14
  1257  00F1  023D               	subwf	main@phase,w
  1258  00F2  1803               	btfsc	3,0
  1259  00F3  29A4               	goto	l238
  1260  00F4                     l237:	
  1261  00F4  0064               	clrwdt	;# 
  1262                           
  1263                           ;main.c: 236: TMR1 = 0x0000 ;
  1264  00F5  0020               	movlb	0	; select bank0
  1265  00F6  0196               	clrf	22	;volatile
  1266  00F7  0197               	clrf	23	;volatile
  1267                           
  1268                           ;main.c: 238: switch( phase ) {
  1269  00F8  2980               	goto	l3219
  1270  00F9                     l241:	
  1271                           ;main.c: 239: case 0x0:
  1272                           
  1273                           
  1274                           ;main.c: 240: case 0x2:
  1275                           ;main.c: 242: T2CONbits.TMR2ON = 1 ;
  1276  00F9  151C               	bsf	28,2	;volatile
  1277                           
  1278                           ;main.c: 243: break ;
  1279  00FA  2998               	goto	l248
  1280  00FB                     l244:	
  1281                           ;main.c: 245: case 0x1:
  1282                           
  1283                           
  1284                           ;main.c: 246: case 0xC:
  1285                           ;main.c: 248: T2CONbits.TMR2ON = 0 ;
  1286  00FB  111C               	bcf	28,2	;volatile
  1287                           
  1288                           ;main.c: 249: break ;
  1289  00FC  2998               	goto	l248
  1290  00FD                     l3193:	
  1291                           ;main.c: 251: case 0x3:
  1292                           
  1293                           
  1294                           ;main.c: 253: {
  1295                           ;main.c: 254: uint08 userId ;
  1296                           ;main.c: 255: userId = _configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1297  00FD  01F4               	clrf	__configuration_ReadByte@memorySelect
  1298  00FE  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1299  00FF  3000               	movlw	0
  1300  0100  318D  25EF  3180   	fcall	__configuration_ReadByte
  1301  0103  0020               	movlb	0	; select bank0
  1302  0104  00A5               	movwf	??_main
  1303  0105  0825               	movf	??_main,w
  1304  0106  00BF               	movwf	main@userId
  1305                           
  1306                           ;main.c: 256: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1307  0107  083F               	movf	main@userId,w
  1308  0108  00A5               	movwf	??_main
  1309  0109  3004               	movlw	4
  1310  010A                     u2435:	
  1311  010A  36A5               	lsrf	??_main,f
  1312  010B  0B89               	decfsz	9,f
  1313  010C  290A               	goto	u2435
  1314  010D  0825               	movf	??_main,w
  1315  010E  3830               	iorlw	48
  1316  010F  00A6               	movwf	??_main+1
  1317  0110  0826               	movf	??_main+1,w
  1318  0111  0021               	movlb	1	; select bank1
  1319  0112  00AF               	movwf	(_informationValueBuffer^(0+128)+1)
  1320                           
  1321                           ;main.c: 257: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1322  0113  0020               	movlb	0	; select bank0
  1323  0114  083F               	movf	main@userId,w
  1324  0115  390F               	andlw	15
  1325  0116  3830               	iorlw	48
  1326  0117  00A5               	movwf	??_main
  1327  0118  0825               	movf	??_main,w
  1328  0119  0021               	movlb	1	; select bank1
  1329  011A  00B0               	movwf	(_informationValueBuffer^(0+128)+2)
  1330                           
  1331                           ;main.c: 258: userId = _configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1332  011B  01F4               	clrf	__configuration_ReadByte@memorySelect
  1333  011C  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1334  011D  3001               	movlw	1
  1335  011E  318D  25EF  3180   	fcall	__configuration_ReadByte
  1336  0121  0020               	movlb	0	; select bank0
  1337  0122  00A5               	movwf	??_main
  1338  0123  0825               	movf	??_main,w
  1339  0124  00BF               	movwf	main@userId
  1340                           
  1341                           ;main.c: 259: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1342  0125  083F               	movf	main@userId,w
  1343  0126  00A5               	movwf	??_main
  1344  0127  3004               	movlw	4
  1345  0128                     u2445:	
  1346  0128  36A5               	lsrf	??_main,f
  1347  0129  0B89               	decfsz	9,f
  1348  012A  2928               	goto	u2445
  1349  012B  0825               	movf	??_main,w
  1350  012C  3830               	iorlw	48
  1351  012D  00A6               	movwf	??_main+1
  1352  012E  0826               	movf	??_main+1,w
  1353  012F  0021               	movlb	1	; select bank1
  1354  0130  00B2               	movwf	(_informationValueBuffer^(0+128)+4)
  1355                           
  1356                           ;main.c: 260: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1357  0131  0020               	movlb	0	; select bank0
  1358  0132  083F               	movf	main@userId,w
  1359  0133  390F               	andlw	15
  1360  0134  3830               	iorlw	48
  1361  0135  00A5               	movwf	??_main
  1362  0136  0825               	movf	??_main,w
  1363  0137  0021               	movlb	1	; select bank1
  1364  0138  00B3               	movwf	(_informationValueBuffer^(0+128)+5)
  1365                           
  1366                           ;main.c: 261: }
  1367                           ;main.c: 262: break ;
  1368  0139  2998               	goto	l248
  1369  013A                     l3203:	
  1370                           ;main.c: 264: case 0x4:
  1371                           
  1372                           
  1373                           ;main.c: 266: _parallel_lcd_Initialize( ) ;
  1374  013A  318E  2613  3180   	fcall	__parallel_lcd_Initialize
  1375                           
  1376                           ;main.c: 269: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  1377  013D  3000               	movlw	low (_MESSAGE| (0+32768))
  1378  013E  0084               	movwf	4
  1379  013F  3088               	movlw	high (_MESSAGE| (0+32768))
  1380  0140  0085               	movwf	5
  1381  0141  3F00               	moviw [0]fsr0
  1382  0142  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1383  0143  3F01               	moviw [1]fsr0
  1384  0144  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1385  0145  3080               	movlw	128
  1386  0146  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  1387                           
  1388                           ;main.c: 270: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ INFOR
      +                          MATION_ITEM_VERSION ] ) ;
  1389  0149  0021               	movlb	1	; select bank1
  1390  014A  0820               	movf	_MESSAGE_INFORMATION^(0+128),w
  1391  014B  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1392  014C  0821               	movf	(_MESSAGE_INFORMATION+1)^(0+128),w
  1393  014D  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1394  014E  30C0               	movlw	192
  1395  014F  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  1396                           
  1397                           ;main.c: 271: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ INFORMATI
      +                          ON_ITEM_VERSION ] ) ;
  1398  0152  30AE               	movlw	low _informationValueBuffer
  1399  0153  0020               	movlb	0	; select bank0
  1400  0154  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  1401  0155  3000               	movlw	high _informationValueBuffer
  1402  0156  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  1403  0157  30CA               	movlw	202
  1404  0158  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  1405  015B                     l3211:	
  1406                           ;main.c: 273: case 0x6:
  1407                           
  1408                           
  1409                           ;main.c: 275: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1410  015B  3041               	movlw	low ((_BITMAP| (0+32768)+8))
  1411  015C  00F6               	movwf	__parallel_lcd_SetCgram@bitmap
  1412  015D  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1413  015E  00F7               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1414  015F  3035               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1415  0160  0084               	movwf	4
  1416  0161  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1417  0162  0085               	movwf	5
  1418  0163  0800               	movf	0,w	;code access
  1419  0164  318E  2677  3180   	fcall	__parallel_lcd_SetCgram
  1420                           
  1421                           ;main.c: 276: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1422  0167  3049               	movlw	low ((_BITMAP| (0+32768)+16))
  1423  0168  00F6               	movwf	__parallel_lcd_SetCgram@bitmap
  1424  0169  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1425  016A  00F7               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1426  016B  3036               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1427  016C  0084               	movwf	4
  1428  016D  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1429  016E  0085               	movwf	5
  1430  016F  0800               	movf	0,w	;code access
  1431  0170  318E  2677  3180   	fcall	__parallel_lcd_SetCgram
  1432                           
  1433                           ;main.c: 277: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1434  0173  3039               	movlw	low (_BITMAP| (0+32768))
  1435  0174  00F6               	movwf	__parallel_lcd_SetCgram@bitmap
  1436  0175  3088               	movlw	high (_BITMAP| (0+32768))
  1437  0176  00F7               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1438  0177  3034               	movlw	low (_CHAR_CODE| (0+32768))
  1439  0178  0084               	movwf	4
  1440  0179  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1441  017A  0085               	movwf	5
  1442  017B  0800               	movf	0,w	;code access
  1443  017C  318E  2677  3180   	fcall	__parallel_lcd_SetCgram
  1444                           
  1445                           ;main.c: 280: }
  1446                           
  1447                           ;main.c: 278: break ;
  1448  017F  2998               	goto	l248
  1449  0180                     l3219:	
  1450  0180  0020               	movlb	0	; select bank0
  1451  0181  083D               	movf	main@phase,w
  1452                           
  1453                           ; Switch size 1, requested type "space"
  1454                           ; Number of cases is 7, Range of values is 0 to 12
  1455                           ; switch strategies available:
  1456                           ; Name         Instructions Cycles
  1457                           ; simple_byte           22    12 (average)
  1458                           ; direct_byte           32     6 (fixed)
  1459                           ; jumptable            260     6 (fixed)
  1460                           ;	Chosen strategy is simple_byte
  1461  0182  3A00               	xorlw	0	; case 0
  1462  0183  1903               	skipnz
  1463  0184  28F9               	goto	l241
  1464  0185  3A01               	xorlw	1	; case 1
  1465  0186  1903               	skipnz
  1466  0187  28FB               	goto	l244
  1467  0188  3A03               	xorlw	3	; case 2
  1468  0189  1903               	skipnz
  1469  018A  28F9               	goto	l241
  1470  018B  3A01               	xorlw	1	; case 3
  1471  018C  1903               	skipnz
  1472  018D  28FD               	goto	l3193
  1473  018E  3A07               	xorlw	7	; case 4
  1474  018F  1903               	skipnz
  1475  0190  293A               	goto	l3203
  1476  0191  3A02               	xorlw	2	; case 6
  1477  0192  1903               	skipnz
  1478  0193  295B               	goto	l3211
  1479  0194  3A0A               	xorlw	10	; case 12
  1480  0195  1903               	skipnz
  1481  0196  28FB               	goto	l244
  1482  0197  2998               	goto	l248
  1483  0198                     l248:	
  1484                           ;main.c: 282: while( !PIR1bits.TMR1IF ) ;
  1485                           
  1486  0198  0020               	movlb	0	; select bank0
  1487  0199  1C11               	btfss	17,0	;volatile
  1488  019A  2998               	goto	l248
  1489                           
  1490                           ;main.c: 283: PIR1bits.TMR1IF = 0 ;
  1491  019B  1011               	bcf	17,0	;volatile
  1492  019C  3001               	movlw	1
  1493  019D  00A5               	movwf	??_main
  1494  019E  0825               	movf	??_main,w
  1495  019F  07BD               	addwf	main@phase,f
  1496  01A0  300E               	movlw	14
  1497  01A1  023D               	subwf	main@phase,w
  1498  01A2  1C03               	skipc
  1499  01A3  28F4               	goto	l237
  1500  01A4                     l238:	
  1501                           
  1502                           ;main.c: 285: }
  1503                           ;main.c: 289: INTCONbits.PEIE = 1 ;
  1504  01A4  170B               	bsf	11,6	;volatile
  1505                           
  1506                           ;main.c: 290: T6CONbits.TMR6ON = 1 ;
  1507  01A5  0028               	movlb	8	; select bank8
  1508  01A6  151E               	bsf	30,2	;volatile
  1509                           
  1510                           ;main.c: 291: PIE3bits.TMR6IE = 1 ;
  1511  01A7  0021               	movlb	1	; select bank1
  1512  01A8  1593               	bsf	19,3	;volatile
  1513  01A9                     l251:	
  1514                           ;main.c: 294: for( ; ; ) {
  1515                           
  1516  01A9  0064               	clrwdt	;# 
  1517                           
  1518                           ;main.c: 300: static UniPortAState prevPortAState = { 0x00 } ;
  1519                           ;main.c: 301: UniPortAState keyPressed ;
  1520                           ;main.c: 303: keyPressed.all = ( portAState_.all ^ prevPortAState.all ) & portAState_.al
      +                          l ;
  1521  01AA  0020               	movlb	0	; select bank0
  1522  01AB  086A               	movf	_portAState_,w
  1523  01AC  066C               	xorwf	main@prevPortAState,w
  1524  01AD  056A               	andwf	_portAState_,w
  1525  01AE  00A5               	movwf	??_main
  1526  01AF  0825               	movf	??_main,w
  1527  01B0  00BC               	movwf	main@keyPressed
  1528                           
  1529                           ;main.c: 304: prevPortAState.all = portAState_.all ;
  1530  01B1  086A               	movf	_portAState_,w
  1531  01B2  00A5               	movwf	??_main
  1532  01B3  0825               	movf	??_main,w
  1533  01B4  00EC               	movwf	main@prevPortAState
  1534                           
  1535                           ;main.c: 306: if( keyPressed.keyMenu ) {
  1536  01B5  1ABC               	btfsc	main@keyPressed,5
  1537                           
  1538                           ;main.c: 307: inputEvent_.keyPressMenu = 1 ;
  1539  01B6  1565               	bsf	_inputEvent_,2
  1540                           
  1541                           ;main.c: 308: }
  1542                           ;main.c: 310: if( keyPressed.keyUp ) {
  1543  01B7  1FBC               	btfss	main@keyPressed,7
  1544  01B8  29BE               	goto	l255
  1545                           
  1546                           ;main.c: 311: if( portAState_.keyDown )
  1547  01B9  1F6A               	btfss	_portAState_,6
  1548  01BA  29BD               	goto	l256
  1549                           
  1550                           ;main.c: 312: inputEvent_.keyPressUpDown = 1 ;
  1551  01BB  15E5               	bsf	_inputEvent_,3
  1552  01BC  29BE               	goto	l255
  1553  01BD                     l256:	
  1554                           
  1555                           ;main.c: 313: else
  1556                           ;main.c: 314: inputEvent_.keyPressUp = 1 ;
  1557  01BD  1465               	bsf	_inputEvent_,0
  1558  01BE                     l255:	
  1559                           
  1560                           ;main.c: 315: }
  1561                           ;main.c: 317: if( keyPressed.keyDown ) {
  1562  01BE  1F3C               	btfss	main@keyPressed,6
  1563  01BF  29C5               	goto	l258
  1564                           
  1565                           ;main.c: 318: if( portAState_.keyUp )
  1566  01C0  1FEA               	btfss	_portAState_,7
  1567  01C1  29C4               	goto	l259
  1568                           
  1569                           ;main.c: 319: inputEvent_.keyPressUpDown = 1 ;
  1570  01C2  15E5               	bsf	_inputEvent_,3
  1571  01C3  29C5               	goto	l258
  1572  01C4                     l259:	
  1573                           
  1574                           ;main.c: 320: else
  1575                           ;main.c: 321: inputEvent_.keyPressDown = 1 ;
  1576  01C4  14E5               	bsf	_inputEvent_,1
  1577  01C5                     l258:	
  1578                           
  1579                           ;main.c: 322: }
  1580                           ;main.c: 324: if( (inputEvent_.keyPressHeldUp&&!(inputEvent_.keyPressHeldUp=0)) )
  1581  01C5  1E65               	btfss	_inputEvent_,4
  1582  01C6  29C9               	goto	l261
  1583  01C7  1265               	bcf	_inputEvent_,4
  1584                           
  1585                           ;main.c: 325: inputEvent_.keyPressUp = 1 ;
  1586  01C8  1465               	bsf	_inputEvent_,0
  1587  01C9                     l261:	
  1588                           
  1589                           ;main.c: 327: if( (inputEvent_.keyPressHeldDown&&!(inputEvent_.keyPressHeldDown=0)) )
  1590  01C9  1EE5               	btfss	_inputEvent_,5
  1591  01CA  29CD               	goto	l3245
  1592  01CB  12E5               	bcf	_inputEvent_,5
  1593                           
  1594                           ;main.c: 328: inputEvent_.keyPressDown = 1 ;
  1595  01CC  14E5               	bsf	_inputEvent_,1
  1596  01CD                     l3245:	
  1597                           
  1598                           ;main.c: 330: if( inputEvent_.all ) {
  1599  01CD  0865               	movf	_inputEvent_,w
  1600  01CE  1D03               	btfss	3,2
  1601  01CF  29DD               	goto	l3257
  1602  01D0  29E5               	goto	l263
  1603  01D1                     l3249:	
  1604                           ;main.c: 337: default:
  1605                           
  1606                           ;main.c: 333: case STATE_ADJUST_OSCILLATOR_TUNE:
  1607                           ;main.c: 335: break ;
  1608                           
  1609                           ;main.c: 332: case STATE_ADJUST_TONE:
  1610                           
  1611                           ;main.c: 331: switch( machineState_ ) {
  1612                           
  1613                           
  1614                           ;main.c: 338: keyBeepCounter_ = 0x20 ;
  1615  01D1  3020               	movlw	32
  1616  01D2  00A5               	movwf	??_main
  1617  01D3  0825               	movf	??_main,w
  1618  01D4  00E7               	movwf	_keyBeepCounter_
  1619                           
  1620                           ;main.c: 339: PR2 = 124 ;
  1621  01D5  307C               	movlw	124
  1622  01D6  009B               	movwf	27	;volatile
  1623                           
  1624                           ;main.c: 340: {CCPR4L=(PR2>>1);} ;
  1625  01D7  361B               	lsrf	27,w	;volatile
  1626  01D8  0026               	movlb	6	; select bank6
  1627  01D9  0098               	movwf	24	;volatile
  1628                           
  1629                           ;main.c: 341: T2CONbits.TMR2ON = 1 ;
  1630  01DA  0020               	movlb	0	; select bank0
  1631  01DB  151C               	bsf	28,2	;volatile
  1632                           
  1633                           ;main.c: 343: }
  1634                           
  1635                           ;main.c: 342: break ;
  1636  01DC  29E5               	goto	l263
  1637  01DD                     l3257:	
  1638  01DD  0868               	movf	_machineState_,w
  1639                           
  1640                           ; Switch size 1, requested type "space"
  1641                           ; Number of cases is 2, Range of values is 7 to 8
  1642                           ; switch strategies available:
  1643                           ; Name         Instructions Cycles
  1644                           ; simple_byte            7     4 (average)
  1645                           ; direct_byte           13     9 (fixed)
  1646                           ; jumptable            263     9 (fixed)
  1647                           ;	Chosen strategy is simple_byte
  1648  01DE  3A07               	xorlw	7	; case 7
  1649  01DF  1903               	skipnz
  1650  01E0  29E5               	goto	l263
  1651  01E1  3A0F               	xorlw	15	; case 8
  1652  01E2  1903               	skipnz
  1653  01E3  29E5               	goto	l263
  1654  01E4  29D1               	goto	l3249
  1655  01E5                     l263:	
  1656                           
  1657                           ;main.c: 345: }
  1658                           ;main.c: 348: if( (outputEvent_.accessEeprom&&!(outputEvent_.accessEeprom=0)) ) {
  1659  01E5  1FE9               	btfss	_outputEvent_,7
  1660  01E6  2A7E               	goto	l3291
  1661  01E7  13E9               	bcf	_outputEvent_,7
  1662                           
  1663                           ;main.c: 350: INTCONbits.GIE=0 ;
  1664  01E8  138B               	bcf	11,7	;volatile
  1665                           
  1666                           ;main.c: 352: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  1667  01E9  01BE               	clrf	main@returnCode
  1668                           
  1669                           ;main.c: 354: switch( machineState_ ) {
  1670  01EA  29FD               	goto	l3269
  1671  01EB                     l271:	
  1672                           ;main.c: 356: case STATE_BOOT:
  1673                           
  1674                           
  1675                           ;main.c: 357: machineState_ = STATE_METRONOME ;
  1676  01EB  01E8               	clrf	_machineState_
  1677  01EC  0AE8               	incf	_machineState_,f
  1678                           
  1679                           ;main.c: 358: outputEvent_.changeState = 1 ;
  1680  01ED  1469               	bsf	_outputEvent_,0
  1681  01EE                     l3263:	
  1682                           ;main.c: 359: case STATE_LOAD:
  1683                           
  1684                           
  1685                           ;main.c: 360: returnCode = _configuration_Load( &configration_ ) ;
  1686  01EE  3041               	movlw	(low (_configration_| 0))& (0+255)
  1687  01EF  318F  2720  3180   	fcall	__configuration_Load
  1688  01F2  29F8               	goto	L1
  1689  01F3                     l274:	
  1690                           ;main.c: 363: case STATE_INITIALIZE:
  1691                           
  1692                           ;main.c: 361: break ;
  1693                           
  1694                           
  1695                           ;main.c: 364: outputEvent_.changeState = 1 ;
  1696  01F3  1469               	bsf	_outputEvent_,0
  1697  01F4                     l3265:	
  1698                           ;main.c: 365: case STATE_SAVE:
  1699                           
  1700                           
  1701                           ;main.c: 366: returnCode = _configuration_Save( &configration_ ) ;
  1702  01F4  3041               	movlw	(low (_configration_| 0))& (0+255)
  1703  01F5  318F  2772  3180   	fcall	__configuration_Save
  1704  01F8                     L1:	
  1705  01F8  0020               	movlb	0	; select bank0
  1706  01F9  00A5               	movwf	??_main
  1707  01FA  0825               	movf	??_main,w
  1708  01FB  00BE               	movwf	main@returnCode
  1709                           
  1710                           ;main.c: 369: }
  1711                           
  1712                           ;main.c: 367: break ;
  1713  01FC  2A0B               	goto	l273
  1714  01FD                     l3269:	
  1715  01FD  0868               	movf	_machineState_,w
  1716                           
  1717                           ; Switch size 1, requested type "space"
  1718                           ; Number of cases is 4, Range of values is 0 to 15
  1719                           ; switch strategies available:
  1720                           ; Name         Instructions Cycles
  1721                           ; simple_byte           13     7 (average)
  1722                           ; direct_byte           38     6 (fixed)
  1723                           ; jumptable            260     6 (fixed)
  1724                           ;	Chosen strategy is simple_byte
  1725  01FE  3A00               	xorlw	0	; case 0
  1726  01FF  1903               	skipnz
  1727  0200  29EB               	goto	l271
  1728  0201  3A0B               	xorlw	11	; case 11
  1729  0202  1903               	skipnz
  1730  0203  29F4               	goto	l3265
  1731  0204  3A06               	xorlw	6	; case 13
  1732  0205  1903               	skipnz
  1733  0206  29EE               	goto	l3263
  1734  0207  3A02               	xorlw	2	; case 15
  1735  0208  1903               	skipnz
  1736  0209  29F3               	goto	l274
  1737  020A  2A0B               	goto	l273
  1738  020B                     l273:	
  1739                           
  1740                           ;main.c: 370: outputEvent_.resetMetronome = 1 ;
  1741  020B  15E9               	bsf	_outputEvent_,3
  1742                           
  1743                           ;main.c: 372: uint08 romOffset = _configuration_GetRomOffset( ) ;
  1744  020C  318D  25C1  3180   	fcall	__configuration_GetRomOffset
  1745  020F  0020               	movlb	0	; select bank0
  1746  0210  00A5               	movwf	??_main
  1747  0211  0825               	movf	??_main,w
  1748  0212  00BA               	movwf	main@romOffset
  1749                           
  1750                           ;main.c: 373: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][3] = HEX_TABLE[ romO
      +                          ffset >> 4 ] ;
  1751  0213  083A               	movf	main@romOffset,w
  1752  0214  00A5               	movwf	??_main
  1753  0215  3004               	movlw	4
  1754  0216                     u2565:	
  1755  0216  36A5               	lsrf	??_main,f
  1756  0217  0B89               	decfsz	9,f
  1757  0218  2A16               	goto	u2565
  1758  0219  0825               	movf	??_main,w
  1759  021A  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1760  021B  0084               	movwf	4
  1761  021C  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1762  021D  1803               	skipnc
  1763  021E  3E01               	addlw	1
  1764  021F  0085               	movwf	5
  1765  0220  0800               	movf	0,w	;code access
  1766  0221  00A6               	movwf	??_main+1
  1767  0222  0826               	movf	??_main+1,w
  1768  0223  0021               	movlb	1	; select bank1
  1769  0224  00B8               	movwf	(_informationValueBuffer^(0+128)+10)
  1770                           
  1771                           ;main.c: 374: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ romO
      +                          ffset & 0x0F ] ;
  1772  0225  0020               	movlb	0	; select bank0
  1773  0226  083A               	movf	main@romOffset,w
  1774  0227  390F               	andlw	15
  1775  0228  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1776  0229  0084               	movwf	4
  1777  022A  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1778  022B  1803               	skipnc
  1779  022C  3E01               	addlw	1
  1780  022D  0085               	movwf	5
  1781  022E  0800               	movf	0,w	;code access
  1782  022F  00A5               	movwf	??_main
  1783  0230  0825               	movf	??_main,w
  1784  0231  0021               	movlb	1	; select bank1
  1785  0232  00B9               	movwf	(_informationValueBuffer^(0+128)+11)
  1786                           
  1787                           ;main.c: 375: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][3] = HEX_TABLE[ con
      +                          figration_.writeCount >> 4 ] ;
  1788  0233  0020               	movlb	0	; select bank0
  1789  0234  0841               	movf	_configration_,w
  1790  0235  00A5               	movwf	??_main
  1791  0236  3004               	movlw	4
  1792  0237                     u2575:	
  1793  0237  36A5               	lsrf	??_main,f
  1794  0238  0B89               	decfsz	9,f
  1795  0239  2A37               	goto	u2575
  1796  023A  0825               	movf	??_main,w
  1797  023B  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1798  023C  0084               	movwf	4
  1799  023D  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1800  023E  1803               	skipnc
  1801  023F  3E01               	addlw	1
  1802  0240  0085               	movwf	5
  1803  0241  0800               	movf	0,w	;code access
  1804  0242  00A6               	movwf	??_main+1
  1805  0243  0826               	movf	??_main+1,w
  1806  0244  0021               	movlb	1	; select bank1
  1807  0245  00BF               	movwf	(_informationValueBuffer^(0+128)+17)
  1808                           
  1809                           ;main.c: 376: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          figration_.writeCount & 0x0F ] ;
  1810  0246  0020               	movlb	0	; select bank0
  1811  0247  0841               	movf	_configration_,w
  1812  0248  390F               	andlw	15
  1813  0249  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1814  024A  0084               	movwf	4
  1815  024B  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1816  024C  1803               	skipnc
  1817  024D  3E01               	addlw	1
  1818  024E  0085               	movwf	5
  1819  024F  0800               	movf	0,w	;code access
  1820  0250  00A5               	movwf	??_main
  1821  0251  0825               	movf	??_main,w
  1822  0252  0021               	movlb	1	; select bank1
  1823  0253  00C0               	movwf	(_informationValueBuffer^(0+128)+18)
  1824                           
  1825                           ;main.c: 377: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][3] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  1826  0254  0020               	movlb	0	; select bank0
  1827  0255  083E               	movf	main@returnCode,w
  1828  0256  00A5               	movwf	??_main
  1829  0257  3004               	movlw	4
  1830  0258                     u2585:	
  1831  0258  36A5               	lsrf	??_main,f
  1832  0259  0B89               	decfsz	9,f
  1833  025A  2A58               	goto	u2585
  1834  025B  0825               	movf	??_main,w
  1835  025C  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1836  025D  0084               	movwf	4
  1837  025E  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1838  025F  1803               	skipnc
  1839  0260  3E01               	addlw	1
  1840  0261  0085               	movwf	5
  1841  0262  0800               	movf	0,w	;code access
  1842  0263  00A6               	movwf	??_main+1
  1843  0264  0826               	movf	??_main+1,w
  1844  0265  0021               	movlb	1	; select bank1
  1845  0266  00C6               	movwf	(_informationValueBuffer^(0+128)+24)
  1846                           
  1847                           ;main.c: 378: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  1848  0267  0020               	movlb	0	; select bank0
  1849  0268  083E               	movf	main@returnCode,w
  1850  0269  390F               	andlw	15
  1851  026A  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1852  026B  0084               	movwf	4
  1853  026C  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1854  026D  1803               	skipnc
  1855  026E  3E01               	addlw	1
  1856  026F  0085               	movwf	5
  1857  0270  0800               	movf	0,w	;code access
  1858  0271  00A5               	movwf	??_main
  1859  0272  0825               	movf	??_main,w
  1860  0273  0021               	movlb	1	; select bank1
  1861  0274  00C7               	movwf	(_informationValueBuffer^(0+128)+25)
  1862                           
  1863                           ;main.c: 380: if( returnCode )
  1864  0275  0020               	movlb	0	; select bank0
  1865  0276  083E               	movf	main@returnCode,w
  1866  0277  1903               	btfsc	3,2
  1867  0278  2A7D               	goto	l3289
  1868                           
  1869                           ;main.c: 381: machineState_ = STATE_ERROR ;
  1870  0279  3011               	movlw	17
  1871  027A  00A5               	movwf	??_main
  1872  027B  0825               	movf	??_main,w
  1873  027C  00E8               	movwf	_machineState_
  1874  027D                     l3289:	
  1875                           
  1876                           ;main.c: 383: INTCONbits.GIE=1 ;
  1877  027D  178B               	bsf	11,7	;volatile
  1878  027E                     l3291:	
  1879                           
  1880                           ;main.c: 385: }
  1881                           ;main.c: 388: if( (inputEvent_.keyPressUpDown&&!(inputEvent_.keyPressUpDown=0)) ) {
  1882  027E  1DE5               	btfss	_inputEvent_,3
  1883  027F  2A8C               	goto	l277
  1884  0280  11E5               	bcf	_inputEvent_,3
  1885                           
  1886                           ;main.c: 389: if( machineState_ == STATE_METRONOME ) {
  1887  0281  0368               	decf	_machineState_,w
  1888  0282  1D03               	btfss	3,2
  1889  0283  2A8C               	goto	l277
  1890                           
  1891                           ;main.c: 390: {if(isMute_){isMute_=0;}else{isMute_=1;}} ;
  1892  0284  0866               	movf	_isMute_,w
  1893  0285  1903               	btfsc	3,2
  1894  0286  2A89               	goto	l279
  1895  0287  01E6               	clrf	_isMute_
  1896  0288  2A8B               	goto	l280
  1897  0289                     l279:	
  1898  0289  01E6               	clrf	_isMute_
  1899  028A  0AE6               	incf	_isMute_,f
  1900  028B                     l280:	
  1901                           
  1902                           ;main.c: 391: outputEvent_.changeMessage = 1 ;
  1903  028B  14E9               	bsf	_outputEvent_,1
  1904  028C                     l277:	
  1905                           
  1906                           ;main.c: 392: }
  1907                           ;main.c: 393: }
  1908                           ;main.c: 396: if( (inputEvent_.keyPressMenu&&!(inputEvent_.keyPressMenu=0)) ) {
  1909  028C  1D65               	btfss	_inputEvent_,2
  1910  028D  2B0B               	goto	l281
  1911  028E  1165               	bcf	_inputEvent_,2
  1912                           
  1913                           ;main.c: 397: outputEvent_.changeState = 1 ;
  1914  028F  1469               	bsf	_outputEvent_,0
  1915                           
  1916                           ;main.c: 399: switch( machineState_ ) {
  1917  0290  2AFE               	goto	l3367
  1918  0291                     l285:	
  1919                           ;main.c: 403: case MENU_ITEM_MAIN_RETURN:
  1920                           
  1921                           ;main.c: 402: switch( menuStateMain_.select ) {
  1922                           
  1923                           ;main.c: 401: case STATE_MENU_MAIN:
  1924                           
  1925                           
  1926                           ;main.c: 404: machineState_ = STATE_METRONOME ;
  1927  0291  0020               	movlb	0	; select bank0
  1928  0292  01E8               	clrf	_machineState_
  1929  0293  0AE8               	incf	_machineState_,f
  1930                           
  1931                           ;main.c: 405: break ;
  1932  0294  2B0B               	goto	l281
  1933  0295                     l3303:	
  1934                           ;main.c: 407: case MENU_ITEM_MAIN_BEAT_COUNT:
  1935                           
  1936                           
  1937                           ;main.c: 408: machineState_ = STATE_ADJUST_BEAT_COUNT ;
  1938  0295  3004               	movlw	4
  1939  0296  2AEF               	goto	L32
  1940  0297                     l3305:	
  1941                           ;main.c: 411: case MENU_ITEM_MAIN_TONE_MENU:
  1942                           
  1943                           ;main.c: 409: break ;
  1944                           
  1945                           
  1946                           ;main.c: 412: machineState_ = STATE_MENU_TONE ;
  1947  0297  3003               	movlw	3
  1948  0298  0020               	movlb	0	; select bank0
  1949  0299  00A5               	movwf	??_main
  1950  029A  0825               	movf	??_main,w
  1951  029B  00E8               	movwf	_machineState_
  1952                           
  1953                           ;main.c: 413: menuStateTone_.select = 0 ;
  1954  029C  01D4               	clrf	_menuStateTone_
  1955                           
  1956                           ;main.c: 414: menuStateTone_.cursorPosition = 0 ;
  1957  029D  01D5               	clrf	_menuStateTone_+1
  1958                           
  1959                           ;main.c: 415: break ;
  1960  029E  2B0B               	goto	l281
  1961  029F                     l3311:	
  1962                           ;main.c: 417: case MENU_ITEM_MAIN_ADJUST_DURATION:
  1963                           
  1964                           
  1965                           ;main.c: 418: machineState_ = STATE_ADJUST_DURATION ;
  1966  029F  3005               	movlw	5
  1967  02A0  2AEF               	goto	L32
  1968  02A1                     l3313:	
  1969                           ;main.c: 421: case MENU_ITEM_MAIN_PULSE_WIDTH:
  1970                           
  1971                           ;main.c: 419: break ;
  1972                           
  1973                           
  1974                           ;main.c: 422: machineState_ = STATE_ADJUST_PULSE_WIDTH ;
  1975  02A1  3006               	movlw	6
  1976  02A2  2AEF               	goto	L32
  1977  02A3                     l3315:	
  1978                           ;main.c: 425: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  1979                           
  1980                           ;main.c: 423: break ;
  1981                           
  1982                           
  1983                           ;main.c: 426: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  1984  02A3  3008               	movlw	8
  1985  02A4  2AEF               	goto	L32
  1986  02A5                     l3317:	
  1987                           ;main.c: 429: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  1988                           
  1989                           ;main.c: 427: break ;
  1990                           
  1991                           
  1992                           ;main.c: 430: machineState_ = STATE_CONFIRM_LOAD ;
  1993  02A5  300C               	movlw	12
  1994  02A6  2AEF               	goto	L32
  1995  02A7                     l3319:	
  1996                           ;main.c: 433: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  1997                           
  1998                           ;main.c: 431: break ;
  1999                           
  2000                           
  2001                           ;main.c: 434: machineState_ = STATE_CONFIRM_SAVE ;
  2002  02A7  300A               	movlw	10
  2003  02A8  2AEF               	goto	L32
  2004  02A9                     l3321:	
  2005                           ;main.c: 437: case MENU_ITEM_MAIN_INFORMATION:
  2006                           
  2007                           ;main.c: 435: break ;
  2008                           
  2009                           
  2010                           ;main.c: 438: machineState_ = STATE_INFORMATION ;
  2011  02A9  3009               	movlw	9
  2012  02AA  2AEF               	goto	L32
  2013  02AB                     l3323:	
  2014                           ;main.c: 441: case MENU_ITEM_MAIN_RESET:
  2015                           
  2016                           ;main.c: 439: break ;
  2017                           
  2018                           
  2019                           ;main.c: 442: machineState_ = STATE_CONFIRM_RESET ;
  2020  02AB  300E               	movlw	14
  2021  02AC  2AEF               	goto	L32
  2022  02AD                     l3327:	
  2023                           ;main.c: 445: }
  2024                           
  2025                           ;main.c: 443: break ;
  2026                           
  2027  02AD  0021               	movlb	1	; select bank1
  2028  02AE  0866               	movf	_menuStateMain_^(0+128),w
  2029                           
  2030                           ; Switch size 1, requested type "space"
  2031                           ; Number of cases is 10, Range of values is 0 to 9
  2032                           ; switch strategies available:
  2033                           ; Name         Instructions Cycles
  2034                           ; direct_byte           26     6 (fixed)
  2035                           ; simple_byte           31    16 (average)
  2036                           ; jumptable            260     6 (fixed)
  2037                           ;	Chosen strategy is direct_byte
  2038  02AF  0084               	movwf	4
  2039  02B0  300A               	movlw	10
  2040  02B1  0204               	subwf	4,w
  2041  02B2  1803               	skipnc
  2042  02B3  2B0B               	goto	l281
  2043  02B4  3189               	movlp	high S3809
  2044  02B5  3504               	lslf	4,w
  2045  02B6  3ED8               	addlw	low S3809
  2046  02B7  0082               	movwf	2
  2047                           
  2048                           ;main.c: 446: break ;
  2049  02B8  2B0B               	goto	l281
  2050  02B9                     l3329:	
  2051                           ;main.c: 448: case STATE_MENU_TONE:
  2052                           
  2053                           
  2054                           ;main.c: 449: machineState_ = ( menuStateTone_.select == MENU_ITEM_TONE_RETURN ) ? STATE
      +                          _MENU_MAIN : STATE_ADJUST_TONE ;
  2055  02B9  0020               	movlb	0	; select bank0
  2056  02BA  0854               	movf	_menuStateTone_,w
  2057  02BB  1903               	btfsc	3,2
  2058  02BC  2ABF               	goto	l3333
  2059  02BD  3007               	movlw	7
  2060  02BE  2AC0               	goto	L10
  2061  02BF                     l3333:	
  2062  02BF  3002               	movlw	2
  2063  02C0                     L10:	
  2064  02C0  00AF               	movwf	_main$1165
  2065  02C1  3000               	movlw	0
  2066  02C2  00B0               	movwf	_main$1165+1
  2067  02C3  082F               	movf	_main$1165,w
  2068  02C4  2AF6               	goto	L19
  2069  02C5                     l3335:	
  2070                           ;main.c: 452: case STATE_CONFIRM_LOAD:
  2071                           
  2072                           ;main.c: 450: break ;
  2073                           
  2074                           
  2075                           ;main.c: 453: machineState_ = menuStateConfirm_.select ? STATE_LOAD : STATE_MENU_MAIN ;
  2076  02C5  084C               	movf	_menuStateConfirm_,w
  2077  02C6  1D03               	btfss	3,2
  2078  02C7  2ACA               	goto	l3339
  2079  02C8  3002               	movlw	2
  2080  02C9  2ACB               	goto	L12
  2081  02CA                     l3339:	
  2082  02CA  300D               	movlw	13
  2083  02CB                     L12:	
  2084  02CB  00B1               	movwf	_main$1166
  2085  02CC  3000               	movlw	0
  2086  02CD  00B2               	movwf	_main$1166+1
  2087  02CE  0831               	movf	_main$1166,w
  2088  02CF  2AF6               	goto	L19
  2089  02D0                     l3341:	
  2090                           ;main.c: 456: case STATE_CONFIRM_SAVE:
  2091                           
  2092                           ;main.c: 454: break ;
  2093                           
  2094                           
  2095                           ;main.c: 457: machineState_ = menuStateConfirm_.select ? STATE_SAVE : STATE_MENU_MAIN ;
  2096  02D0  084C               	movf	_menuStateConfirm_,w
  2097  02D1  1D03               	btfss	3,2
  2098  02D2  2AD5               	goto	l3345
  2099  02D3  3002               	movlw	2
  2100  02D4  2AD6               	goto	L14
  2101  02D5                     l3345:	
  2102  02D5  300B               	movlw	11
  2103  02D6                     L14:	
  2104  02D6  00B3               	movwf	_main$1167
  2105  02D7  3000               	movlw	0
  2106  02D8  00B4               	movwf	_main$1167+1
  2107  02D9  0833               	movf	_main$1167,w
  2108  02DA  2AF6               	goto	L19
  2109  02DB                     l3347:	
  2110                           ;main.c: 460: case STATE_CONFIRM_RESET:
  2111                           
  2112                           ;main.c: 458: break ;
  2113                           
  2114                           
  2115                           ;main.c: 461: machineState_ = menuStateConfirm_.select ? STATE_RESET : STATE_MENU_MAIN ;
  2116  02DB  084C               	movf	_menuStateConfirm_,w
  2117  02DC  1D03               	btfss	3,2
  2118  02DD  2AE0               	goto	l3351
  2119  02DE  3002               	movlw	2
  2120  02DF  2AE1               	goto	L16
  2121  02E0                     l3351:	
  2122  02E0  3010               	movlw	16
  2123  02E1                     L16:	
  2124  02E1  00B5               	movwf	_main$1168
  2125  02E2  3000               	movlw	0
  2126  02E3  00B6               	movwf	_main$1168+1
  2127  02E4  0835               	movf	_main$1168,w
  2128  02E5  2AF6               	goto	L19
  2129  02E6                     l3353:	
  2130                           ;main.c: 464: case STATE_METRONOME:
  2131                           
  2132                           ;main.c: 462: break ;
  2133                           
  2134                           
  2135                           ;main.c: 465: machineState_ = STATE_MENU_MAIN ;
  2136  02E6  3002               	movlw	2
  2137  02E7  00A5               	movwf	??_main
  2138  02E8  0825               	movf	??_main,w
  2139  02E9  00E8               	movwf	_machineState_
  2140                           
  2141                           ;main.c: 466: menuStateMain_.select = 0 ;
  2142  02EA  0021               	movlb	1	; select bank1
  2143  02EB  01E6               	clrf	_menuStateMain_^(0+128)
  2144                           
  2145                           ;main.c: 467: menuStateMain_.cursorPosition = 0 ;
  2146  02EC  01E7               	clrf	(_menuStateMain_^(0+128)+1)
  2147                           
  2148                           ;main.c: 468: break ;
  2149  02ED  2B0B               	goto	l281
  2150  02EE                     l3359:	
  2151                           ;main.c: 470: case STATE_ADJUST_BEAT_COUNT:
  2152                           
  2153                           
  2154                           ;main.c: 471: case STATE_ADJUST_DURATION:
  2155                           ;main.c: 472: case STATE_ADJUST_PULSE_WIDTH:
  2156                           ;main.c: 473: case STATE_INFORMATION:
  2157                           ;main.c: 474: machineState_ = STATE_MENU_MAIN ;
  2158  02EE  3002               	movlw	2
  2159  02EF                     L32:	
  2160  02EF  0020               	movlb	0	; select bank0
  2161  02F0  2AF6               	goto	L19
  2162  02F1                     l322:	
  2163                           ;main.c: 477: case STATE_ADJUST_OSCILLATOR_TUNE:
  2164                           
  2165                           ;main.c: 475: break ;
  2166                           
  2167                           
  2168                           ;main.c: 478: outputEvent_.soundOff = 1 ;
  2169  02F1  1769               	bsf	_outputEvent_,6
  2170                           
  2171                           ;main.c: 479: machineState_ = STATE_MENU_MAIN ;
  2172  02F2  3002               	movlw	2
  2173  02F3  2AF6               	goto	L19
  2174  02F4                     l323:	
  2175                           ;main.c: 482: case STATE_ADJUST_TONE:
  2176                           
  2177                           ;main.c: 480: break ;
  2178                           
  2179                           
  2180                           ;main.c: 483: outputEvent_.soundOff = 1 ;
  2181  02F4  1769               	bsf	_outputEvent_,6
  2182                           
  2183                           ;main.c: 484: machineState_ = STATE_MENU_TONE ;
  2184  02F5  3003               	movlw	3
  2185  02F6                     L19:	
  2186  02F6  00A5               	movwf	??_main
  2187  02F7  0825               	movf	??_main,w
  2188  02F8  00E8               	movwf	_machineState_
  2189                           
  2190                           ;main.c: 485: break ;
  2191  02F9  2B0B               	goto	l281
  2192  02FA                     l325:	
  2193                           ;main.c: 487: case STATE_INITIALIZE:
  2194                           
  2195                           
  2196                           ;main.c: 488: case STATE_ERROR:
  2197                           ;main.c: 489: machineState_ = STATE_METRONOME ;
  2198  02FA  01E8               	clrf	_machineState_
  2199  02FB  0AE8               	incf	_machineState_,f
  2200                           
  2201                           ;main.c: 490: outputEvent_.resetMetronome = 1 ;
  2202  02FC  15E9               	bsf	_outputEvent_,3
  2203                           
  2204                           ;main.c: 493: }
  2205                           
  2206                           ;main.c: 491: break ;
  2207  02FD  2B0B               	goto	l281
  2208  02FE                     l3367:	
  2209  02FE  0868               	movf	_machineState_,w
  2210                           
  2211                           ; Switch size 1, requested type "space"
  2212                           ; Number of cases is 14, Range of values is 1 to 17
  2213                           ; switch strategies available:
  2214                           ; Name         Instructions Cycles
  2215                           ; direct_byte           43     9 (fixed)
  2216                           ; simple_byte           43    22 (average)
  2217                           ; jumptable            263     9 (fixed)
  2218                           ;	Chosen strategy is direct_byte
  2219  02FF  3EFF               	addlw	-1
  2220  0300  1C03               	skipc
  2221  0301  2B0B               	goto	l281
  2222  0302  0084               	movwf	4
  2223  0303  3011               	movlw	17
  2224  0304  0204               	subwf	4,w
  2225  0305  1803               	skipnc
  2226  0306  2B0B               	goto	l281
  2227  0307  3189               	movlp	high S3811
  2228  0308  3504               	lslf	4,w
  2229  0309  3E58               	addlw	low S3811
  2230  030A  0082               	movwf	2
  2231  030B                     l281:	
  2232                           
  2233                           ;main.c: 495: }
  2234                           ;main.c: 498: if( (outputEvent_.changeState&&!(outputEvent_.changeState=0)) ) {
  2235  030B  0020               	movlb	0	; select bank0
  2236  030C  1C69               	btfss	_outputEvent_,0
  2237  030D  2BF8               	goto	l3479
  2238  030E  1069               	bcf	_outputEvent_,0
  2239                           
  2240                           ;main.c: 500: outputEvent_.changeMessage = 1 ;
  2241  030F  14E9               	bsf	_outputEvent_,1
  2242                           
  2243                           ;main.c: 502: switch( machineState_ ) {
  2244  0310  2B67               	goto	l3413
  2245  0311                     l3371:	
  2246                           ;main.c: 506: case STATE_MENU_MAIN:
  2247                           
  2248                           ;main.c: 504: break ;
  2249                           
  2250                           ;main.c: 503: case STATE_METRONOME:
  2251                           
  2252                           
  2253                           ;main.c: 507: currentMenuStatePtr_ = &menuStateMain_ ;
  2254  0311  30E6               	movlw	(low (_menuStateMain_| 0))& (0+255)
  2255  0312  2B52               	goto	L22
  2256  0313                     l3373:	
  2257                           ;main.c: 510: case STATE_MENU_TONE:
  2258                           
  2259                           ;main.c: 508: break ;
  2260                           
  2261                           
  2262                           ;main.c: 511: currentMenuStatePtr_ = &menuStateTone_ ;
  2263  0313  3054               	movlw	(low (_menuStateTone_| 0))& (0+255)
  2264  0314  2B52               	goto	L22
  2265  0315                     l3375:	
  2266                           ;main.c: 514: case STATE_CONFIRM_LOAD:
  2267                           
  2268                           ;main.c: 512: break ;
  2269                           
  2270                           
  2271                           ;main.c: 515: case STATE_CONFIRM_SAVE:
  2272                           ;main.c: 516: case STATE_CONFIRM_RESET:
  2273                           ;main.c: 517: menuStateConfirm_.select = 0 ;
  2274  0315  01CC               	clrf	_menuStateConfirm_
  2275                           
  2276                           ;main.c: 518: menuStateConfirm_.cursorPosition = 0 ;
  2277  0316  01CD               	clrf	_menuStateConfirm_+1
  2278                           
  2279                           ;main.c: 519: currentMenuStatePtr_ = &menuStateConfirm_ ;
  2280  0317  304C               	movlw	(low (_menuStateConfirm_| 0))& (0+255)
  2281  0318  2B52               	goto	L22
  2282  0319                     l335:	
  2283                           ;main.c: 522: case STATE_ADJUST_BEAT_COUNT:
  2284                           
  2285                           ;main.c: 520: break ;
  2286                           
  2287                           
  2288                           ;main.c: 523: outputEvent_.changeValue = 1 ;
  2289  0319  1569               	bsf	_outputEvent_,2
  2290                           
  2291                           ;main.c: 524: currentValuePtr = &configration_.beatCount ;
  2292  031A  3044               	movlw	(low ((_configration_| 0+3)))& (0+255)
  2293  031B  00A5               	movwf	??_main
  2294  031C  0825               	movf	??_main,w
  2295  031D  00E3               	movwf	_currentValuePtr
  2296                           
  2297                           ;main.c: 525: valueLimit_.upper = 64 ;
  2298  031E  3040               	movlw	64
  2299  031F  2B2D               	goto	L28
  2300  0320                     l336:	
  2301                           ;main.c: 529: case STATE_ADJUST_DURATION:
  2302                           
  2303                           ;main.c: 527: break ;
  2304                           
  2305                           ;main.c: 526: valueLimit_.lower = 0 ;
  2306                           
  2307                           
  2308                           ;main.c: 530: outputEvent_.changeValue = 1 ;
  2309  0320  1569               	bsf	_outputEvent_,2
  2310                           
  2311                           ;main.c: 531: currentValuePtr = &configration_.duration ;
  2312  0321  3045               	movlw	(low ((_configration_| 0+4)))& (0+255)
  2313  0322  00A5               	movwf	??_main
  2314  0323  0825               	movf	??_main,w
  2315  0324  00E3               	movwf	_currentValuePtr
  2316                           
  2317                           ;main.c: 532: valueLimit_.upper = 0xFF ;
  2318  0325  30FF               	movlw	255
  2319  0326  2B2D               	goto	L28
  2320  0327                     l337:	
  2321                           ;main.c: 536: case STATE_ADJUST_PULSE_WIDTH:
  2322                           
  2323                           ;main.c: 534: break ;
  2324                           
  2325                           ;main.c: 533: valueLimit_.lower = 0x00 ;
  2326                           
  2327                           
  2328                           ;main.c: 537: outputEvent_.changeValue = 1 ;
  2329  0327  1569               	bsf	_outputEvent_,2
  2330                           
  2331                           ;main.c: 538: currentValuePtr = &configration_.pulseWidth ;
  2332  0328  3046               	movlw	(low ((_configration_| 0+5)))& (0+255)
  2333  0329  00A5               	movwf	??_main
  2334  032A  0825               	movf	??_main,w
  2335  032B  00E3               	movwf	_currentValuePtr
  2336                           
  2337                           ;main.c: 539: valueLimit_.upper = 0x07 ;
  2338  032C  3007               	movlw	7
  2339  032D                     L28:	
  2340  032D  00A5               	movwf	??_main
  2341  032E  0825               	movf	??_main,w
  2342  032F  00DF               	movwf	_valueLimit_
  2343                           
  2344                           ;main.c: 540: valueLimit_.lower = 0x00 ;
  2345  0330  01E0               	clrf	_valueLimit_+1
  2346                           
  2347                           ;main.c: 541: break ;
  2348  0331  2BF8               	goto	l3479
  2349  0332                     l338:	
  2350                           ;main.c: 543: case STATE_ADJUST_OSCILLATOR_TUNE:
  2351                           
  2352                           
  2353                           ;main.c: 544: outputEvent_.changeValue = 1 ;
  2354  0332  1569               	bsf	_outputEvent_,2
  2355                           
  2356                           ;main.c: 545: currentValuePtr = ( uint08* ) & configration_.oscillatorTune ;
  2357  0333  304A               	movlw	(low ((_configration_| 0+9)))& (0+255)
  2358  0334  00A5               	movwf	??_main
  2359  0335  0825               	movf	??_main,w
  2360  0336  00E3               	movwf	_currentValuePtr
  2361                           
  2362                           ;main.c: 546: valueLimit_.upper = (uint08)30 ;
  2363  0337  301E               	movlw	30
  2364  0338  00A5               	movwf	??_main
  2365  0339  0825               	movf	??_main,w
  2366  033A  00DF               	movwf	_valueLimit_
  2367                           
  2368                           ;main.c: 547: valueLimit_.lower = ( uint08 ) - 30 ;
  2369  033B  30E2               	movlw	226
  2370  033C  00A5               	movwf	??_main
  2371  033D  0825               	movf	??_main,w
  2372  033E  00E0               	movwf	_valueLimit_+1
  2373                           
  2374                           ;main.c: 548: outputEvent_.soundOn = 1 ;
  2375  033F  16E9               	bsf	_outputEvent_,5
  2376                           
  2377                           ;main.c: 549: break ;
  2378  0340  2BF8               	goto	l3479
  2379  0341                     l339:	
  2380                           ;main.c: 551: case STATE_ADJUST_TONE:
  2381                           
  2382                           
  2383                           ;main.c: 552: outputEvent_.changeValue = 1 ;
  2384  0341  1569               	bsf	_outputEvent_,2
  2385                           
  2386                           ;main.c: 553: currentValuePtr = &configration_.tone[ menuStateTone_.select - MENU_ITEM_T
      +                          ONE_ADJUST_TONE0 ] ;
  2387  0342  0854               	movf	_menuStateTone_,w
  2388  0343  3EFF               	addlw	255
  2389  0344  3E47               	addlw	(low ((_configration_| 0+6)))& (0+255)
  2390  0345  00A5               	movwf	??_main
  2391  0346  0825               	movf	??_main,w
  2392  0347  00E3               	movwf	_currentValuePtr
  2393                           
  2394                           ;main.c: 554: valueLimit_.upper = 0xFF ;
  2395  0348  30FF               	movlw	255
  2396  0349  00A5               	movwf	??_main
  2397  034A  0825               	movf	??_main,w
  2398  034B  00DF               	movwf	_valueLimit_
  2399                           
  2400                           ;main.c: 555: valueLimit_.lower = 0x00 ;
  2401  034C  01E0               	clrf	_valueLimit_+1
  2402                           
  2403                           ;main.c: 556: T2CONbits.TMR2ON = 1 ;
  2404  034D  151C               	bsf	28,2	;volatile
  2405                           
  2406                           ;main.c: 557: break ;
  2407  034E  2BF8               	goto	l3479
  2408  034F                     l3403:	
  2409                           ;main.c: 559: case STATE_INFORMATION:
  2410                           
  2411                           
  2412                           ;main.c: 560: menuStateInformation_.select = 0 ;
  2413  034F  01D0               	clrf	_menuStateInformation_
  2414                           
  2415                           ;main.c: 561: menuStateInformation_.cursorPosition = 0 ;
  2416  0350  01D1               	clrf	_menuStateInformation_+1
  2417                           
  2418                           ;main.c: 562: currentMenuStatePtr_ = &menuStateInformation_ ;
  2419  0351  3050               	movlw	(low (_menuStateInformation_| 0))& (0+255)
  2420  0352                     L22:	
  2421  0352  00A5               	movwf	??_main
  2422  0353  0825               	movf	??_main,w
  2423  0354  00E2               	movwf	_currentMenuStatePtr_
  2424                           
  2425                           ;main.c: 563: break ;
  2426  0355  2BF8               	goto	l3479
  2427  0356                     l341:	
  2428                           ;main.c: 565: case STATE_LOAD:
  2429                           
  2430                           
  2431                           ;main.c: 566: outputEvent_.resetMetronome = 1 ;
  2432  0356  15E9               	bsf	_outputEvent_,3
  2433  0357                     l342:	
  2434                           ;main.c: 571: case STATE_SAVE:
  2435                           
  2436                           ;main.c: 569: break ;
  2437                           
  2438                           ;main.c: 568: stateReturnCounter_ = 0xFF ;
  2439                           
  2440                           ;main.c: 567: outputEvent_.accessEeprom = 1 ;
  2441                           
  2442                           
  2443                           ;main.c: 572: outputEvent_.accessEeprom = 1 ;
  2444  0357  17E9               	bsf	_outputEvent_,7
  2445                           
  2446                           ;main.c: 573: stateReturnCounter_ = 0xFF ;
  2447  0358  30FF               	movlw	255
  2448  0359  00A5               	movwf	??_main
  2449  035A  0825               	movf	??_main,w
  2450  035B  00EB               	movwf	_stateReturnCounter_
  2451                           
  2452                           ;main.c: 574: break ;
  2453  035C  2BF8               	goto	l3479
  2454  035D                     l3411:	
  2455                           ;main.c: 576: case STATE_RESET:
  2456                           
  2457                           
  2458                           ;main.c: 577: _parallel_lcd_ClearRow( 0x80 ) ;
  2459  035D  3080               	movlw	128
  2460  035E  318E  263D  3180   	fcall	__parallel_lcd_ClearRow
  2461                           
  2462                           ;main.c: 578: _parallel_lcd_ClearRow( 0xC0 ) ;
  2463  0361  30C0               	movlw	192
  2464  0362  318E  263D  3180   	fcall	__parallel_lcd_ClearRow
  2465  0365  0001               	reset	;# 
  2466                           
  2467                           ;main.c: 581: }
  2468  0366  2BF8               	goto	l3479
  2469  0367                     l3413:	
  2470  0367  0020               	movlb	0	; select bank0
  2471  0368  0868               	movf	_machineState_,w
  2472                           
  2473                           ; Switch size 1, requested type "space"
  2474                           ; Number of cases is 15, Range of values is 1 to 16
  2475                           ; switch strategies available:
  2476                           ; Name         Instructions Cycles
  2477                           ; direct_byte           41     9 (fixed)
  2478                           ; simple_byte           46    24 (average)
  2479                           ; jumptable            263     9 (fixed)
  2480                           ;	Chosen strategy is direct_byte
  2481  0369  3EFF               	addlw	-1
  2482  036A  1C03               	skipc
  2483  036B  2BF8               	goto	l3479
  2484  036C  0084               	movwf	4
  2485  036D  3010               	movlw	16
  2486  036E  0204               	subwf	4,w
  2487  036F  1803               	skipnc
  2488  0370  2BF8               	goto	l3479
  2489  0371  3189               	movlp	high S3813
  2490  0372  3504               	lslf	4,w
  2491  0373  3E9C               	addlw	low S3813
  2492  0374  0082               	movwf	2
  2493                           
  2494                           ;main.c: 583: }
  2495                           ;main.c: 586: switch( machineState_ ) {
  2496  0375  2BF8               	goto	l3479
  2497  0376                     l350:	
  2498                           ;main.c: 588: case STATE_MENU_MAIN:
  2499                           
  2500                           
  2501                           ;main.c: 589: case STATE_MENU_TONE:
  2502                           ;main.c: 590: case STATE_CONFIRM_LOAD:
  2503                           ;main.c: 591: case STATE_CONFIRM_SAVE:
  2504                           ;main.c: 592: case STATE_CONFIRM_RESET:
  2505                           ;main.c: 593: case STATE_INFORMATION:
  2506                           ;main.c: 594: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2507  0376  1CE5               	btfss	_inputEvent_,1
  2508  0377  2B99               	goto	l3425
  2509  0378  10E5               	bcf	_inputEvent_,1
  2510                           
  2511                           ;main.c: 595: if( currentMenuStatePtr_->select != currentMenuStatePtr_->limit ) {
  2512  0379  0862               	movf	_currentMenuStatePtr_,w
  2513  037A  3E02               	addlw	2
  2514  037B  0086               	movwf	6
  2515  037C  0187               	clrf	7
  2516  037D  0862               	movf	_currentMenuStatePtr_,w
  2517  037E  0084               	movwf	4
  2518  037F  0185               	clrf	5
  2519  0380  0800               	movf	0,w
  2520  0381  0601               	xorwf	1,w
  2521  0382  1903               	skipnz
  2522  0383  2B99               	goto	l3425
  2523                           
  2524                           ;main.c: 596: currentMenuStatePtr_->select++ ;
  2525  0384  3001               	movlw	1
  2526  0385  00A5               	movwf	??_main
  2527  0386  0862               	movf	_currentMenuStatePtr_,w
  2528  0387  0086               	movwf	6
  2529  0388  0187               	clrf	7
  2530  0389  0825               	movf	??_main,w
  2531  038A  0781               	addwf	1,f
  2532                           
  2533                           ;main.c: 597: if( !currentMenuStatePtr_->cursorPosition ) currentMenuStatePtr_->cursorPo
      +                          sition++ ;
  2534  038B  0A62               	incf	_currentMenuStatePtr_,w
  2535  038C  0086               	movwf	6
  2536  038D  0187               	clrf	7
  2537  038E  0801               	movf	1,w
  2538  038F  1D03               	btfss	3,2
  2539  0390  2B98               	goto	l3423
  2540  0391  3001               	movlw	1
  2541  0392  00A5               	movwf	??_main
  2542  0393  0A62               	incf	_currentMenuStatePtr_,w
  2543  0394  0086               	movwf	6
  2544  0395  0187               	clrf	7
  2545  0396  0825               	movf	??_main,w
  2546  0397  0781               	addwf	1,f
  2547  0398                     l3423:	
  2548                           
  2549                           ;main.c: 598: outputEvent_.changeMessage = 1 ;
  2550  0398  14E9               	bsf	_outputEvent_,1
  2551  0399                     l3425:	
  2552                           
  2553                           ;main.c: 599: }
  2554                           ;main.c: 600: }
  2555                           ;main.c: 601: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2556  0399  1C65               	btfss	_inputEvent_,0
  2557  039A  2C06               	goto	l357
  2558  039B  1065               	bcf	_inputEvent_,0
  2559                           
  2560                           ;main.c: 602: if( currentMenuStatePtr_->select ) {
  2561  039C  0862               	movf	_currentMenuStatePtr_,w
  2562  039D  0086               	movwf	6
  2563  039E  0187               	clrf	7
  2564  039F  0801               	movf	1,w
  2565  03A0  1903               	btfsc	3,2
  2566  03A1  2C06               	goto	l357
  2567                           
  2568                           ;main.c: 603: currentMenuStatePtr_->select-- ;
  2569  03A2  0862               	movf	_currentMenuStatePtr_,w
  2570  03A3  0086               	movwf	6
  2571  03A4  0187               	clrf	7
  2572  03A5  3001               	movlw	1
  2573  03A6  0281               	subwf	1,f
  2574                           
  2575                           ;main.c: 604: if( currentMenuStatePtr_->cursorPosition ) currentMenuStatePtr_->cursorPos
      +                          ition-- ;
  2576  03A7  0A62               	incf	_currentMenuStatePtr_,w
  2577  03A8  0086               	movwf	6
  2578  03A9  0187               	clrf	7
  2579  03AA  0801               	movf	1,w
  2580  03AB  1903               	btfsc	3,2
  2581  03AC  2BB2               	goto	l3435
  2582  03AD  0A62               	incf	_currentMenuStatePtr_,w
  2583  03AE  0086               	movwf	6
  2584  03AF  0187               	clrf	7
  2585  03B0  3001               	movlw	1
  2586  03B1  0281               	subwf	1,f
  2587  03B2                     l3435:	
  2588                           
  2589                           ;main.c: 605: outputEvent_.changeMessage = 1 ;
  2590  03B2  14E9               	bsf	_outputEvent_,1
  2591                           
  2592                           ;main.c: 606: }
  2593                           ;main.c: 607: }
  2594                           ;main.c: 608: break ;
  2595  03B3  2C06               	goto	l357
  2596  03B4                     l358:	
  2597                           ;main.c: 610: case STATE_METRONOME:
  2598                           
  2599                           
  2600                           ;main.c: 611: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2601  03B4  1C65               	btfss	_inputEvent_,0
  2602  03B5  2BC4               	goto	l3447
  2603  03B6  1065               	bcf	_inputEvent_,0
  2604                           
  2605                           ;main.c: 612: if( configration_.tempo < 999 ) {
  2606  03B7  3003               	movlw	3
  2607  03B8  0243               	subwf	_configration_+2,w
  2608  03B9  30E7               	movlw	231
  2609  03BA  1903               	skipnz
  2610  03BB  0242               	subwf	_configration_+1,w
  2611  03BC  1803               	skipnc
  2612  03BD  2BC3               	goto	l3445
  2613                           
  2614                           ;main.c: 613: configration_.tempo++ ;
  2615  03BE  3001               	movlw	1
  2616  03BF  07C2               	addwf	_configration_+1,f
  2617  03C0  3000               	movlw	0
  2618  03C1  3DC3               	addwfc	_configration_+2,f
  2619                           
  2620                           ;main.c: 614: outputEvent_.changeValue = 1 ;
  2621  03C2  1569               	bsf	_outputEvent_,2
  2622  03C3                     l3445:	
  2623                           
  2624                           ;main.c: 615: }
  2625                           ;main.c: 616: outputEvent_.resetMetronome = 1 ;
  2626  03C3  15E9               	bsf	_outputEvent_,3
  2627  03C4                     l3447:	
  2628                           
  2629                           ;main.c: 617: }
  2630                           ;main.c: 618: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2631  03C4  1CE5               	btfss	_inputEvent_,1
  2632  03C5  2C06               	goto	l357
  2633  03C6  10E5               	bcf	_inputEvent_,1
  2634                           
  2635                           ;main.c: 619: if( configration_.tempo > 1 ) {
  2636  03C7  3000               	movlw	0
  2637  03C8  0243               	subwf	_configration_+2,w
  2638  03C9  3002               	movlw	2
  2639  03CA  1903               	skipnz
  2640  03CB  0242               	subwf	_configration_+1,w
  2641  03CC  1C03               	skipc
  2642  03CD  2BD3               	goto	l3457
  2643                           
  2644                           ;main.c: 620: configration_.tempo-- ;
  2645  03CE  3001               	movlw	1
  2646  03CF  02C2               	subwf	_configration_+1,f
  2647  03D0  3000               	movlw	0
  2648  03D1  3BC3               	subwfb	_configration_+2,f
  2649                           
  2650                           ;main.c: 621: outputEvent_.changeValue = 1 ;
  2651  03D2  1569               	bsf	_outputEvent_,2
  2652  03D3                     l3457:	
  2653                           
  2654                           ;main.c: 622: }
  2655                           ;main.c: 623: outputEvent_.resetMetronome = 1 ;
  2656  03D3  15E9               	bsf	_outputEvent_,3
  2657                           
  2658                           ;main.c: 624: }
  2659                           ;main.c: 625: break ;
  2660  03D4  2C06               	goto	l357
  2661  03D5                     l367:	
  2662                           ;main.c: 627: case STATE_ADJUST_BEAT_COUNT:
  2663                           
  2664                           
  2665                           ;main.c: 628: case STATE_ADJUST_PULSE_WIDTH:
  2666                           ;main.c: 629: case STATE_ADJUST_DURATION:
  2667                           ;main.c: 630: case STATE_ADJUST_TONE:
  2668                           ;main.c: 631: case STATE_ADJUST_OSCILLATOR_TUNE:
  2669                           ;main.c: 632: if( (inputEvent_.keyPressUp&&!(inputEvent_.keyPressUp=0)) ) {
  2670  03D5  1C65               	btfss	_inputEvent_,0
  2671  03D6  2BE7               	goto	l3467
  2672  03D7  1065               	bcf	_inputEvent_,0
  2673                           
  2674                           ;main.c: 633: if( *currentValuePtr != valueLimit_.upper ) {
  2675  03D8  0863               	movf	_currentValuePtr,w
  2676  03D9  0086               	movwf	6
  2677  03DA  0187               	clrf	7
  2678  03DB  0801               	movf	1,w
  2679  03DC  065F               	xorwf	_valueLimit_,w
  2680  03DD  1903               	skipnz
  2681  03DE  2BE7               	goto	l3467
  2682                           
  2683                           ;main.c: 634: ( *currentValuePtr )++ ;
  2684  03DF  3001               	movlw	1
  2685  03E0  00A5               	movwf	??_main
  2686  03E1  0863               	movf	_currentValuePtr,w
  2687  03E2  0086               	movwf	6
  2688  03E3  0187               	clrf	7
  2689  03E4  0825               	movf	??_main,w
  2690  03E5  0781               	addwf	1,f
  2691                           
  2692                           ;main.c: 635: outputEvent_.changeValue = 1 ;
  2693  03E6  1569               	bsf	_outputEvent_,2
  2694  03E7                     l3467:	
  2695                           
  2696                           ;main.c: 636: }
  2697                           ;main.c: 637: }
  2698                           ;main.c: 638: if( (inputEvent_.keyPressDown&&!(inputEvent_.keyPressDown=0)) ) {
  2699  03E7  1CE5               	btfss	_inputEvent_,1
  2700  03E8  2C06               	goto	l357
  2701  03E9  10E5               	bcf	_inputEvent_,1
  2702                           
  2703                           ;main.c: 639: if( *currentValuePtr != valueLimit_.lower ) {
  2704  03EA  0863               	movf	_currentValuePtr,w
  2705  03EB  0086               	movwf	6
  2706  03EC  0187               	clrf	7
  2707  03ED  0860               	movf	_valueLimit_+1,w
  2708  03EE  0601               	xorwf	1,w
  2709  03EF  1903               	skipnz
  2710  03F0  2C06               	goto	l357
  2711                           
  2712                           ;main.c: 640: ( *currentValuePtr )-- ;
  2713  03F1  0863               	movf	_currentValuePtr,w
  2714  03F2  0086               	movwf	6
  2715  03F3  0187               	clrf	7
  2716  03F4  3001               	movlw	1
  2717  03F5  0281               	subwf	1,f
  2718                           
  2719                           ;main.c: 641: outputEvent_.changeValue = 1 ;
  2720  03F6  1569               	bsf	_outputEvent_,2
  2721                           
  2722                           ;main.c: 646: }
  2723                           
  2724                           ;main.c: 642: }
  2725                           ;main.c: 643: }
  2726                           ;main.c: 644: break ;
  2727  03F7  2C06               	goto	l357
  2728  03F8                     l3479:	
  2729  03F8  0020               	movlb	0	; select bank0
  2730  03F9  0868               	movf	_machineState_,w
  2731                           
  2732                           ; Switch size 1, requested type "space"
  2733                           ; Number of cases is 12, Range of values is 1 to 14
  2734                           ; switch strategies available:
  2735                           ; Name         Instructions Cycles
  2736                           ; direct_byte           37     9 (fixed)
  2737                           ; simple_byte           37    19 (average)
  2738                           ; jumptable            263     9 (fixed)
  2739                           ;	Chosen strategy is direct_byte
  2740  03FA  3EFF               	addlw	-1
  2741  03FB  1C03               	skipc
  2742  03FC  2C06               	goto	l357
  2743  03FD  0084               	movwf	4
  2744  03FE  300E               	movlw	14
  2745  03FF  0204               	subwf	4,w
  2746  0400  1803               	skipnc
  2747  0401  2C06               	goto	l357
  2748  0402  3189               	movlp	high S3815
  2749  0403  3504               	lslf	4,w
  2750  0404  3EBC               	addlw	low S3815
  2751  0405  0082               	movwf	2
  2752  0406                     l357:	
  2753                           
  2754                           ;main.c: 649: if( (outputEvent_.resetMetronome&&!(outputEvent_.resetMetronome=0)) ) {
  2755  0406  1DE9               	btfss	_outputEvent_,3
  2756  0407  2C47               	goto	l3529
  2757  0408  11E9               	bcf	_outputEvent_,3
  2758                           
  2759                           ;main.c: 650: INTCONbits.GIE=0 ;
  2760  0409  138B               	bcf	11,7	;volatile
  2761                           
  2762                           ;main.c: 651: tempoCounter_ = 0 ;
  2763  040A  3000               	movlw	0
  2764  040B  00DC               	movwf	_tempoCounter_
  2765  040C  3000               	movlw	0
  2766  040D  00DD               	movwf	_tempoCounter_+1
  2767  040E  3000               	movlw	0
  2768  040F  00DE               	movwf	_tempoCounter_+2
  2769                           
  2770                           ;main.c: 652: beatCounter_ = 0 ;
  2771  0410  01E1               	clrf	_beatCounter_
  2772                           
  2773                           ;main.c: 653: duration_ = configration_.duration ;
  2774  0411  0845               	movf	_configration_+4,w
  2775  0412  00A5               	movwf	??_main
  2776  0413  0825               	movf	??_main,w
  2777  0414  00E4               	movwf	_duration_
  2778                           
  2779                           ;main.c: 654: outputEvent_.soundClickOn = 1 ;
  2780  0415  1669               	bsf	_outputEvent_,4
  2781                           
  2782                           ;main.c: 655: INTCONbits.GIE=1 ;
  2783  0416  178B               	bsf	11,7	;volatile
  2784                           
  2785                           ;main.c: 656: }
  2786                           ;main.c: 659: switch( machineState_ ) {
  2787  0417  2C47               	goto	l3529
  2788  0418                     l380:	
  2789                           ;main.c: 669: case STATE_ADJUST_TONE:
  2790                           
  2791                           ;main.c: 662: case STATE_INITIALIZE:
  2792                           ;main.c: 663: case STATE_LOAD:
  2793                           ;main.c: 664: case STATE_SAVE:
  2794                           ;main.c: 665: case STATE_ERROR:
  2795                           ;main.c: 667: break ;
  2796                           
  2797                           ;main.c: 661: case STATE_BOOT:
  2798                           
  2799                           
  2800                           ;main.c: 670: if( (outputEvent_.soundOn&&!(outputEvent_.soundOn=0)) ) {
  2801  0418  1EE9               	btfss	_outputEvent_,5
  2802  0419  2C65               	goto	l3535
  2803  041A  12E9               	bcf	_outputEvent_,5
  2804                           
  2805                           ;main.c: 671: PR2 = *currentValuePtr ;
  2806  041B  0863               	movf	_currentValuePtr,w
  2807  041C  0086               	movwf	6
  2808  041D  0187               	clrf	7
  2809  041E  0801               	movf	1,w
  2810  041F  2C24               	goto	L31
  2811  0420                     l382:	
  2812                           ;main.c: 676: case STATE_ADJUST_OSCILLATOR_TUNE:
  2813                           
  2814                           ;main.c: 674: }
  2815                           ;main.c: 675: break ;
  2816                           
  2817                           ;main.c: 673: T2CONbits.TMR2ON = 1 ;
  2818                           
  2819                           ;main.c: 672: {CCPR4L=(PR2>>1);} ;
  2820                           
  2821                           
  2822                           ;main.c: 677: if( (outputEvent_.soundOn&&!(outputEvent_.soundOn=0)) ) {
  2823  0420  1EE9               	btfss	_outputEvent_,5
  2824  0421  2C65               	goto	l3535
  2825  0422  12E9               	bcf	_outputEvent_,5
  2826                           
  2827                           ;main.c: 678: PR2 = 141 ;
  2828  0423  308D               	movlw	141
  2829  0424                     L31:	
  2830  0424  009B               	movwf	27	;volatile
  2831                           
  2832                           ;main.c: 679: {CCPR4L=(PR2>>1);} ;
  2833  0425  361B               	lsrf	27,w	;volatile
  2834  0426  2C42               	goto	L29
  2835  0427                     l384:	
  2836                           ;main.c: 684: default:
  2837                           
  2838                           ;main.c: 681: }
  2839                           ;main.c: 682: break ;
  2840                           
  2841                           ;main.c: 680: T2CONbits.TMR2ON = 1 ;
  2842                           
  2843                           
  2844                           ;main.c: 685: if( (outputEvent_.soundClickOn&&!(outputEvent_.soundClickOn=0)) ) {
  2845  0427  1E69               	btfss	_outputEvent_,4
  2846  0428  2C65               	goto	l3535
  2847  0429  1269               	bcf	_outputEvent_,4
  2848                           
  2849                           ;main.c: 686: if( !isMute_ ) {
  2850  042A  0866               	movf	_isMute_,w
  2851  042B  1D03               	btfss	3,2
  2852  042C  2C65               	goto	l3535
  2853                           
  2854                           ;main.c: 687: if( beatCounter_ == 0 )
  2855  042D  0861               	movf	_beatCounter_,w
  2856  042E  1D03               	btfss	3,2
  2857  042F  2C32               	goto	l3517
  2858                           
  2859                           ;main.c: 688: PR2 = configration_.tone[ 1 ] ;
  2860  0430  0848               	movf	_configration_+7,w
  2861  0431  2C39               	goto	L24
  2862  0432                     l3517:	
  2863                           
  2864                           ;main.c: 689: else if( beatCounter_ == configration_.beatCount )
  2865  0432  0844               	movf	_configration_+3,w
  2866  0433  0661               	xorwf	_beatCounter_,w
  2867  0434  1D03               	skipz
  2868  0435  2C38               	goto	l3521
  2869                           
  2870                           ;main.c: 690: PR2 = configration_.tone[ 2 ] ;
  2871  0436  0849               	movf	_configration_+8,w
  2872  0437  2C39               	goto	L24
  2873  0438                     l3521:	
  2874                           
  2875                           ;main.c: 691: else
  2876                           ;main.c: 692: PR2 = configration_.tone[ 0 ] ;
  2877  0438  0847               	movf	_configration_+6,w
  2878  0439                     L24:	
  2879  0439  009B               	movwf	27	;volatile
  2880                           
  2881                           ;main.c: 694: {CCPR4L=(PR2>>configration_.pulseWidth);} ;
  2882  043A  081B               	movf	27,w	;volatile
  2883  043B  00A5               	movwf	??_main
  2884  043C  0A46               	incf	_configration_+5,w
  2885  043D  2C3F               	goto	u2904
  2886  043E                     u2905:	
  2887  043E  36A5               	lsrf	??_main,f
  2888  043F                     u2904:	
  2889  043F  0B89               	decfsz	9,f
  2890  0440  2C3E               	goto	u2905
  2891  0441  0825               	movf	??_main,w
  2892  0442                     L29:	
  2893  0442  0026               	movlb	6	; select bank6
  2894  0443  0098               	movwf	24	;volatile
  2895                           
  2896                           ;main.c: 695: T2CONbits.TMR2ON = 1 ;
  2897  0444  0020               	movlb	0	; select bank0
  2898  0445  151C               	bsf	28,2	;volatile
  2899                           
  2900                           ;main.c: 700: }
  2901                           
  2902                           ;main.c: 696: }
  2903                           ;main.c: 697: }
  2904                           ;main.c: 699: break ;
  2905  0446  2C65               	goto	l3535
  2906  0447                     l3529:	
  2907  0447  0868               	movf	_machineState_,w
  2908                           
  2909                           ; Switch size 1, requested type "space"
  2910                           ; Number of cases is 7, Range of values is 0 to 17
  2911                           ; switch strategies available:
  2912                           ; Name         Instructions Cycles
  2913                           ; simple_byte           22    12 (average)
  2914                           ; direct_byte           42     6 (fixed)
  2915                           ; jumptable            260     6 (fixed)
  2916                           ;	Chosen strategy is simple_byte
  2917  0448  3A00               	xorlw	0	; case 0
  2918  0449  1903               	skipnz
  2919  044A  2C65               	goto	l3535
  2920  044B  3A07               	xorlw	7	; case 7
  2921  044C  1903               	skipnz
  2922  044D  2C18               	goto	l380
  2923  044E  3A0F               	xorlw	15	; case 8
  2924  044F  1903               	skipnz
  2925  0450  2C20               	goto	l382
  2926  0451  3A03               	xorlw	3	; case 11
  2927  0452  1903               	skipnz
  2928  0453  2C65               	goto	l3535
  2929  0454  3A06               	xorlw	6	; case 13
  2930  0455  1903               	skipnz
  2931  0456  2C65               	goto	l3535
  2932  0457  3A02               	xorlw	2	; case 15
  2933  0458  1903               	skipnz
  2934  0459  2C65               	goto	l3535
  2935  045A  3A1E               	xorlw	30	; case 17
  2936  045B  1903               	skipnz
  2937  045C  2C65               	goto	l3535
  2938  045D  2C27               	goto	l384
  2939                           
  2940                           ;main.c: 703: switch( machineState_ ) {
  2941  045E  2C65               	goto	l3535
  2942  045F                     l396:	
  2943                           ;main.c: 705: case STATE_BOOT:
  2944                           
  2945  045F  2C63               	goto	L25
  2946  0460                     l400:	
  2947                           ;main.c: 718: default:
  2948                           
  2949                           ;main.c: 714: case STATE_ADJUST_OSCILLATOR_TUNE:
  2950                           ;main.c: 716: break ;
  2951                           
  2952                           ;main.c: 713: case STATE_ADJUST_TONE:
  2953                           
  2954                           ;main.c: 711: break ;
  2955                           
  2956                           ;main.c: 706: case STATE_INITIALIZE:
  2957                           ;main.c: 707: case STATE_LOAD:
  2958                           ;main.c: 708: case STATE_SAVE:
  2959                           ;main.c: 709: case STATE_ERROR:
  2960                           ;main.c: 710: T2CONbits.TMR2ON = 0 ;
  2961                           
  2962                           
  2963                           ;main.c: 719: if( (outputEvent_.soundOff&&!(outputEvent_.soundOff=0)) )
  2964  0460  1F69               	btfss	_outputEvent_,6
  2965  0461  2C7C               	goto	l397
  2966  0462  1369               	bcf	_outputEvent_,6
  2967  0463                     L25:	
  2968                           
  2969                           ;main.c: 720: T2CONbits.TMR2ON = 0 ;
  2970  0463  111C               	bcf	28,2	;volatile
  2971                           
  2972                           ;main.c: 723: }
  2973                           
  2974                           ;main.c: 722: break ;
  2975  0464  2C7C               	goto	l397
  2976  0465                     l3535:	
  2977  0465  0868               	movf	_machineState_,w
  2978                           
  2979                           ; Switch size 1, requested type "space"
  2980                           ; Number of cases is 7, Range of values is 0 to 17
  2981                           ; switch strategies available:
  2982                           ; Name         Instructions Cycles
  2983                           ; simple_byte           22    12 (average)
  2984                           ; direct_byte           42     6 (fixed)
  2985                           ; jumptable            260     6 (fixed)
  2986                           ;	Chosen strategy is simple_byte
  2987  0466  3A00               	xorlw	0	; case 0
  2988  0467  1903               	skipnz
  2989  0468  2C5F               	goto	l396
  2990  0469  3A07               	xorlw	7	; case 7
  2991  046A  1903               	skipnz
  2992  046B  2C7C               	goto	l397
  2993  046C  3A0F               	xorlw	15	; case 8
  2994  046D  1903               	skipnz
  2995  046E  2C7C               	goto	l397
  2996  046F  3A03               	xorlw	3	; case 11
  2997  0470  1903               	skipnz
  2998  0471  2C5F               	goto	l396
  2999  0472  3A06               	xorlw	6	; case 13
  3000  0473  1903               	skipnz
  3001  0474  2C5F               	goto	l396
  3002  0475  3A02               	xorlw	2	; case 15
  3003  0476  1903               	skipnz
  3004  0477  2C5F               	goto	l396
  3005  0478  3A1E               	xorlw	30	; case 17
  3006  0479  1903               	skipnz
  3007  047A  2C5F               	goto	l396
  3008  047B  2C60               	goto	l400
  3009  047C                     l397:	
  3010                           
  3011                           ;main.c: 726: if( (outputEvent_.changeMessage&&!(outputEvent_.changeMessage=0)) ) {
  3012  047C  1CE9               	btfss	_outputEvent_,1
  3013  047D  2EBE               	goto	l402
  3014  047E  10E9               	bcf	_outputEvent_,1
  3015                           
  3016                           ;main.c: 728: switch( machineState_ ) {
  3017  047F  2EB0               	goto	l3619
  3018  0480                     l3539:	
  3019                           ;main.c: 730: case STATE_MENU_MAIN:
  3020                           
  3021                           
  3022                           ;main.c: 731: case STATE_MENU_TONE:
  3023                           ;main.c: 732: _parallel_lcd_WriteStringClearing( 0x80 | 0x1 , currentMenuStatePtr_->menu
      +                          Message[ currentMenuStatePtr_->select - currentMenuStatePtr_->cursorPosition ] ) ;
  3024  0480  0862               	movf	_currentMenuStatePtr_,w
  3025  0481  3E03               	addlw	3
  3026  0482  0086               	movwf	6
  3027  0483  0187               	clrf	7
  3028  0484  0862               	movf	_currentMenuStatePtr_,w
  3029  0485  0084               	movwf	4
  3030  0486  0185               	clrf	5
  3031  0487  0800               	movf	0,w
  3032  0488  00A5               	movwf	??_main
  3033  0489  0A62               	incf	_currentMenuStatePtr_,w
  3034  048A  0084               	movwf	4
  3035  048B  0185               	clrf	5
  3036  048C  0300               	decf	0,w
  3037  048D  3AFF               	xorlw	255
  3038  048E  0725               	addwf	??_main,w
  3039  048F  0709               	addwf	9,w
  3040  0490  0701               	addwf	1,w
  3041  0491  00A6               	movwf	??_main+1
  3042  0492  0826               	movf	??_main+1,w
  3043  0493  0086               	movwf	6
  3044  0494  0187               	clrf	7
  3045  0495  3F40               	moviw [0]fsr1
  3046  0496  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3047  0497  3F41               	moviw [1]fsr1
  3048  0498  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3049  0499  3081               	movlw	129
  3050  049A  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3051                           
  3052                           ;main.c: 733: _parallel_lcd_WriteStringClearing( 0xC0 | 0x1 , currentMenuStatePtr_->menu
      +                          Message[ currentMenuStatePtr_->select - currentMenuStatePtr_->cursorPosition + 1 ] ) ;
  3053  049D  0020               	movlb	0	; select bank0
  3054  049E  0862               	movf	_currentMenuStatePtr_,w
  3055  049F  3E03               	addlw	3
  3056  04A0  0086               	movwf	6
  3057  04A1  0187               	clrf	7
  3058  04A2  0862               	movf	_currentMenuStatePtr_,w
  3059  04A3  0084               	movwf	4
  3060  04A4  0185               	clrf	5
  3061  04A5  0800               	movf	0,w
  3062  04A6  00A5               	movwf	??_main
  3063  04A7  0A62               	incf	_currentMenuStatePtr_,w
  3064  04A8  0084               	movwf	4
  3065  04A9  0185               	clrf	5
  3066  04AA  0300               	decf	0,w
  3067  04AB  3AFF               	xorlw	255
  3068  04AC  0725               	addwf	??_main,w
  3069  04AD  0709               	addwf	9,w
  3070  04AE  3E02               	addlw	2
  3071  04AF  0701               	addwf	1,w
  3072  04B0  00A6               	movwf	??_main+1
  3073  04B1  0826               	movf	??_main+1,w
  3074  04B2  0086               	movwf	6
  3075  04B3  0187               	clrf	7
  3076  04B4  3F40               	moviw [0]fsr1
  3077  04B5  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3078  04B6  3F41               	moviw [1]fsr1
  3079  04B7  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3080  04B8  30C1               	movlw	193
  3081  04B9  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3082                           
  3083                           ;main.c: 735: if( currentMenuStatePtr_->select != currentMenuStatePtr_->cursorPosition )
  3084  04BC  0020               	movlb	0	; select bank0
  3085  04BD  0A62               	incf	_currentMenuStatePtr_,w
  3086  04BE  0086               	movwf	6
  3087  04BF  0187               	clrf	7
  3088  04C0  0862               	movf	_currentMenuStatePtr_,w
  3089  04C1  0084               	movwf	4
  3090  04C2  0185               	clrf	5
  3091  04C3  0800               	movf	0,w
  3092  04C4  0601               	xorwf	1,w
  3093  04C5  1903               	skipnz
  3094  04C6  2CD3               	goto	l3545
  3095                           
  3096                           ;main.c: 736: _parallel_lcd_WriteCharacter( 0x80 | 0xF , CHAR_CODE.CURSOR_UP ) ;
  3097  04C7  3035               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3098  04C8  0084               	movwf	4
  3099  04C9  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3100  04CA  0085               	movwf	5
  3101  04CB  0800               	movf	0,w	;code access
  3102  04CC  00A5               	movwf	??_main
  3103  04CD  0825               	movf	??_main,w
  3104  04CE  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3105  04CF  308F               	movlw	143
  3106  04D0  318D  25D2  3180   	fcall	__parallel_lcd_WriteCharacter
  3107  04D3                     l3545:	
  3108                           
  3109                           ;main.c: 737: if( currentMenuStatePtr_->select != ( currentMenuStatePtr_->limit + curren
      +                          tMenuStatePtr_->cursorPosition - 1 ) )
  3110  04D3  0020               	movlb	0	; select bank0
  3111  04D4  0A62               	incf	_currentMenuStatePtr_,w
  3112  04D5  0086               	movwf	6
  3113  04D6  0187               	clrf	7
  3114  04D7  0862               	movf	_currentMenuStatePtr_,w
  3115  04D8  3E02               	addlw	2
  3116  04D9  0084               	movwf	4
  3117  04DA  0185               	clrf	5
  3118  04DB  0800               	movf	0,w
  3119  04DC  0701               	addwf	1,w
  3120  04DD  00A5               	movwf	??_main
  3121  04DE  01A6               	clrf	??_main+1
  3122  04DF  0DA6               	rlf	??_main+1,f
  3123  04E0  0825               	movf	??_main,w
  3124  04E1  3EFF               	addlw	255
  3125  04E2  00A7               	movwf	??_main+2
  3126  04E3  30FF               	movlw	255
  3127  04E4  3D26               	addwfc	??_main+1,w
  3128  04E5  00A8               	movwf	??_main+3
  3129  04E6  0862               	movf	_currentMenuStatePtr_,w
  3130  04E7  0086               	movwf	6
  3131  04E8  0187               	clrf	7
  3132  04E9  0801               	movf	1,w
  3133  04EA  0627               	xorwf	??_main+2,w
  3134  04EB  0428               	iorwf	??_main+3,w
  3135  04EC  1903               	skipnz
  3136  04ED  2CFA               	goto	l3549
  3137                           
  3138                           ;main.c: 738: _parallel_lcd_WriteCharacter( 0xC0 | 0xF , CHAR_CODE.CURSOR_DOWN ) ;
  3139  04EE  3036               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3140  04EF  0084               	movwf	4
  3141  04F0  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3142  04F1  0085               	movwf	5
  3143  04F2  0800               	movf	0,w	;code access
  3144  04F3  00A5               	movwf	??_main
  3145  04F4  0825               	movf	??_main,w
  3146  04F5  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3147  04F6  30CF               	movlw	207
  3148  04F7  318D  25D2  3180   	fcall	__parallel_lcd_WriteCharacter
  3149  04FA                     l3549:	
  3150                           
  3151                           ;main.c: 740: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuStatePtr_
      +                          ->cursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3152  04FA  3034               	movlw	low (_CHAR_CODE| (0+32768))
  3153  04FB  0084               	movwf	4
  3154  04FC  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3155  04FD  0085               	movwf	5
  3156  04FE  0800               	movf	0,w	;code access
  3157  04FF  0020               	movlb	0	; select bank0
  3158  0500  00A5               	movwf	??_main
  3159  0501  0825               	movf	??_main,w
  3160  0502  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3161  0503  0A62               	incf	_currentMenuStatePtr_,w
  3162  0504  0086               	movwf	6
  3163  0505  0187               	clrf	7
  3164  0506  0801               	movf	1,w
  3165  0507  3E37               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3166  0508  0084               	movwf	4
  3167  0509  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3168  050A  1803               	skipnc
  3169  050B  3E01               	addlw	1
  3170  050C  0085               	movwf	5
  3171  050D  0800               	movf	0,w	;code access
  3172  050E  318D  25D2  3180   	fcall	__parallel_lcd_WriteCharacter
  3173                           
  3174                           ;main.c: 742: break ;
  3175  0511  2EBE               	goto	l402
  3176  0512                     l3551:	
  3177                           ;main.c: 744: case STATE_CONFIRM_LOAD:
  3178                           
  3179                           
  3180                           ;main.c: 745: case STATE_CONFIRM_SAVE:
  3181                           ;main.c: 746: case STATE_CONFIRM_RESET:
  3182                           ;main.c: 748: _parallel_lcd_WriteStringClearing( 0x80 | 0xD , MESSAGE.CONFIRM.NO ) ;
  3183  0512  3018               	movlw	low ((_MESSAGE+24)| (0+32768))
  3184  0513  0084               	movwf	4
  3185  0514  3088               	movlw	high ((_MESSAGE+24)| (0+32768))
  3186  0515  0085               	movwf	5
  3187  0516  3F00               	moviw [0]fsr0
  3188  0517  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3189  0518  3F01               	moviw [1]fsr0
  3190  0519  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3191  051A  308D               	movlw	141
  3192  051B  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3193                           
  3194                           ;main.c: 749: _parallel_lcd_WriteStringClearing( 0xC0 | 0xD , MESSAGE.CONFIRM.YES ) ;
  3195  051E  301A               	movlw	low ((_MESSAGE+26)| (0+32768))
  3196  051F  0084               	movwf	4
  3197  0520  3088               	movlw	high ((_MESSAGE+26)| (0+32768))
  3198  0521  0085               	movwf	5
  3199  0522  3F00               	moviw [0]fsr0
  3200  0523  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3201  0524  3F01               	moviw [1]fsr0
  3202  0525  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3203  0526  30CD               	movlw	205
  3204  0527  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3205                           
  3206                           ;main.c: 751: switch( machineState_ ) {
  3207  052A  2D55               	goto	l3561
  3208  052B                     l3553:	
  3209                           ;main.c: 752: case STATE_CONFIRM_LOAD:
  3210                           
  3211                           
  3212                           ;main.c: 753: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.LOAD ) ;
  3213  052B  3012               	movlw	low ((_MESSAGE+18)| (0+32768))
  3214  052C  0084               	movwf	4
  3215  052D  3088               	movlw	high ((_MESSAGE+18)| (0+32768))
  3216  052E  0085               	movwf	5
  3217  052F  3F00               	moviw [0]fsr0
  3218  0530  0020               	movlb	0	; select bank0
  3219  0531  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3220  0532  3F01               	moviw [1]fsr0
  3221  0533  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3222  0534  3080               	movlw	128
  3223  0535  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  3224                           
  3225                           ;main.c: 754: break ;
  3226  0538  2D61               	goto	l3563
  3227  0539                     l3555:	
  3228                           ;main.c: 755: case STATE_CONFIRM_SAVE:
  3229                           
  3230                           
  3231                           ;main.c: 756: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.SAVE ) ;
  3232  0539  3014               	movlw	low ((_MESSAGE+20)| (0+32768))
  3233  053A  0084               	movwf	4
  3234  053B  3088               	movlw	high ((_MESSAGE+20)| (0+32768))
  3235  053C  0085               	movwf	5
  3236  053D  3F00               	moviw [0]fsr0
  3237  053E  0020               	movlb	0	; select bank0
  3238  053F  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3239  0540  3F01               	moviw [1]fsr0
  3240  0541  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3241  0542  3080               	movlw	128
  3242  0543  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  3243                           
  3244                           ;main.c: 757: break ;
  3245  0546  2D61               	goto	l3563
  3246  0547                     l3557:	
  3247                           ;main.c: 758: case STATE_CONFIRM_RESET:
  3248                           
  3249                           
  3250                           ;main.c: 759: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.RESET ) ;
  3251  0547  3016               	movlw	low ((_MESSAGE+22)| (0+32768))
  3252  0548  0084               	movwf	4
  3253  0549  3088               	movlw	high ((_MESSAGE+22)| (0+32768))
  3254  054A  0085               	movwf	5
  3255  054B  3F00               	moviw [0]fsr0
  3256  054C  0020               	movlb	0	; select bank0
  3257  054D  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3258  054E  3F01               	moviw [1]fsr0
  3259  054F  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3260  0550  3080               	movlw	128
  3261  0551  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  3262                           
  3263                           ;main.c: 762: }
  3264                           
  3265                           ;main.c: 760: break ;
  3266  0554  2D61               	goto	l3563
  3267  0555                     l3561:	
  3268  0555  0020               	movlb	0	; select bank0
  3269  0556  0868               	movf	_machineState_,w
  3270                           
  3271                           ; Switch size 1, requested type "space"
  3272                           ; Number of cases is 3, Range of values is 10 to 14
  3273                           ; switch strategies available:
  3274                           ; Name         Instructions Cycles
  3275                           ; simple_byte           10     6 (average)
  3276                           ; direct_byte           19     9 (fixed)
  3277                           ; jumptable            263     9 (fixed)
  3278                           ;	Chosen strategy is simple_byte
  3279  0557  3A0A               	xorlw	10	; case 10
  3280  0558  1903               	skipnz
  3281  0559  2D39               	goto	l3555
  3282  055A  3A06               	xorlw	6	; case 12
  3283  055B  1903               	skipnz
  3284  055C  2D2B               	goto	l3553
  3285  055D  3A02               	xorlw	2	; case 14
  3286  055E  1903               	skipnz
  3287  055F  2D47               	goto	l3557
  3288  0560  2D61               	goto	l3563
  3289  0561                     l3563:	
  3290                           
  3291                           ;main.c: 764: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentMenuStatePtr
      +                          _->cursorPosition ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3292  0561  3034               	movlw	low (_CHAR_CODE| (0+32768))
  3293  0562  0084               	movwf	4
  3294  0563  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3295  0564  0085               	movwf	5
  3296  0565  0800               	movf	0,w	;code access
  3297  0566  0020               	movlb	0	; select bank0
  3298  0567  00A5               	movwf	??_main
  3299  0568  0825               	movf	??_main,w
  3300  0569  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3301  056A  0A62               	incf	_currentMenuStatePtr_,w
  3302  056B  0086               	movwf	6
  3303  056C  0187               	clrf	7
  3304  056D  0801               	movf	1,w
  3305  056E  3E37               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3306  056F  0084               	movwf	4
  3307  0570  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3308  0571  1803               	skipnc
  3309  0572  3E01               	addlw	1
  3310  0573  0085               	movwf	5
  3311  0574  0800               	movf	0,w	;code access
  3312  0575  380C               	iorlw	12
  3313  0576  318D  25D2  3180   	fcall	__parallel_lcd_WriteCharacter
  3314                           
  3315                           ;main.c: 766: break ;
  3316  0579  2EBE               	goto	l402
  3317  057A                     l3565:	
  3318                           ;main.c: 768: case STATE_METRONOME:
  3319                           
  3320                           
  3321                           ;main.c: 769: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  3322  057A  3000               	movlw	low (_MESSAGE| (0+32768))
  3323  057B  0084               	movwf	4
  3324  057C  3088               	movlw	high (_MESSAGE| (0+32768))
  3325  057D  0085               	movwf	5
  3326  057E  3F00               	moviw [0]fsr0
  3327  057F  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3328  0580  3F01               	moviw [1]fsr0
  3329  0581  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3330  0582  3080               	movlw	128
  3331  0583  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3332                           
  3333                           ;main.c: 770: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.METRONOME.TEMPO ) 
      +                          ;
  3334  0586  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  3335  0587  0084               	movwf	4
  3336  0588  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  3337  0589  0085               	movwf	5
  3338  058A  3F00               	moviw [0]fsr0
  3339  058B  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3340  058C  3F01               	moviw [1]fsr0
  3341  058D  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3342  058E  30C0               	movlw	192
  3343  058F  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3344                           
  3345                           ;main.c: 771: if( isMute_ ) _parallel_lcd_WriteString( 0x80 | 0xA , MESSAGE.METRONOME.MU
      +                          TE ) ;
  3346  0592  0020               	movlb	0	; select bank0
  3347  0593  0866               	movf	_isMute_,w
  3348  0594  1903               	btfsc	3,2
  3349  0595  2E29               	goto	l3593
  3350  0596  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  3351  0597  0084               	movwf	4
  3352  0598  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3353  0599  0085               	movwf	5
  3354  059A  3F00               	moviw [0]fsr0
  3355  059B  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3356  059C  3F01               	moviw [1]fsr0
  3357  059D  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3358  059E  308A               	movlw	138
  3359  059F  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  3360  05A2  2E29               	goto	l3593
  3361  05A3                     l3573:	
  3362                           ;main.c: 775: case STATE_ADJUST_BEAT_COUNT:
  3363                           
  3364                           ;main.c: 773: break ;
  3365                           
  3366                           ;main.c: 772: outputEvent_.changeValue = 1 ;
  3367                           
  3368                           
  3369                           ;main.c: 776: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3370  05A3  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3371  05A4  0084               	movwf	4
  3372  05A5  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3373  05A6  0085               	movwf	5
  3374  05A7  3F00               	moviw [0]fsr0
  3375  05A8  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3376  05A9  3F01               	moviw [1]fsr0
  3377  05AA  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3378  05AB  3080               	movlw	128
  3379  05AC  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3380                           
  3381                           ;main.c: 777: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.BEAT
      +                          _COUNT ) ;
  3382  05AF  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  3383  05B0  0084               	movwf	4
  3384  05B1  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  3385  05B2  0085               	movwf	5
  3386  05B3  3F00               	moviw [0]fsr0
  3387  05B4  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3388  05B5  3F01               	moviw [1]fsr0
  3389  05B6  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3390  05B7  30C0               	movlw	192
  3391  05B8  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3392  05BB  2E29               	goto	l3593
  3393  05BC                     l3577:	
  3394                           ;main.c: 781: case STATE_ADJUST_DURATION:
  3395                           
  3396                           ;main.c: 779: break ;
  3397                           
  3398                           ;main.c: 778: outputEvent_.changeValue = 1 ;
  3399                           
  3400                           
  3401                           ;main.c: 782: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3402  05BC  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3403  05BD  0084               	movwf	4
  3404  05BE  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3405  05BF  0085               	movwf	5
  3406  05C0  3F00               	moviw [0]fsr0
  3407  05C1  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3408  05C2  3F01               	moviw [1]fsr0
  3409  05C3  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3410  05C4  3080               	movlw	128
  3411  05C5  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3412                           
  3413                           ;main.c: 783: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.DURA
      +                          TION ) ;
  3414  05C8  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  3415  05C9  0084               	movwf	4
  3416  05CA  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  3417  05CB  0085               	movwf	5
  3418  05CC  3F00               	moviw [0]fsr0
  3419  05CD  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3420  05CE  3F01               	moviw [1]fsr0
  3421  05CF  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3422  05D0  30C0               	movlw	192
  3423  05D1  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3424  05D4  2E29               	goto	l3593
  3425  05D5                     l3581:	
  3426                           ;main.c: 787: case STATE_ADJUST_PULSE_WIDTH:
  3427                           
  3428                           ;main.c: 785: break ;
  3429                           
  3430                           ;main.c: 784: outputEvent_.changeValue = 1 ;
  3431                           
  3432                           
  3433                           ;main.c: 788: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3434  05D5  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3435  05D6  0084               	movwf	4
  3436  05D7  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3437  05D8  0085               	movwf	5
  3438  05D9  3F00               	moviw [0]fsr0
  3439  05DA  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3440  05DB  3F01               	moviw [1]fsr0
  3441  05DC  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3442  05DD  3080               	movlw	128
  3443  05DE  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3444                           
  3445                           ;main.c: 789: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.PULS
      +                          E_WIDTH ) ;
  3446  05E1  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  3447  05E2  0084               	movwf	4
  3448  05E3  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  3449  05E4  0085               	movwf	5
  3450  05E5  3F00               	moviw [0]fsr0
  3451  05E6  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3452  05E7  3F01               	moviw [1]fsr0
  3453  05E8  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3454  05E9  30C0               	movlw	192
  3455  05EA  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3456  05ED  2E29               	goto	l3593
  3457  05EE                     l3585:	
  3458                           ;main.c: 793: case STATE_ADJUST_OSCILLATOR_TUNE:
  3459                           
  3460                           ;main.c: 791: break ;
  3461                           
  3462                           ;main.c: 790: outputEvent_.changeValue = 1 ;
  3463                           
  3464                           
  3465                           ;main.c: 794: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3466  05EE  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3467  05EF  0084               	movwf	4
  3468  05F0  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3469  05F1  0085               	movwf	5
  3470  05F2  3F00               	moviw [0]fsr0
  3471  05F3  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3472  05F4  3F01               	moviw [1]fsr0
  3473  05F5  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3474  05F6  3080               	movlw	128
  3475  05F7  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3476                           
  3477                           ;main.c: 795: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.OSCI
      +                          LLATOR_TUNE ) ;
  3478  05FA  3010               	movlw	low ((_MESSAGE+16)| (0+32768))
  3479  05FB  0084               	movwf	4
  3480  05FC  3088               	movlw	high ((_MESSAGE+16)| (0+32768))
  3481  05FD  0085               	movwf	5
  3482  05FE  3F00               	moviw [0]fsr0
  3483  05FF  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3484  0600  3F01               	moviw [1]fsr0
  3485  0601  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3486  0602  30C0               	movlw	192
  3487  0603  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3488  0606  2E29               	goto	l3593
  3489  0607                     l3589:	
  3490                           ;main.c: 799: case STATE_ADJUST_TONE:
  3491                           
  3492                           ;main.c: 797: break ;
  3493                           
  3494                           ;main.c: 796: outputEvent_.changeValue = 1 ;
  3495                           
  3496                           
  3497                           ;main.c: 800: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3498  0607  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3499  0608  0084               	movwf	4
  3500  0609  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3501  060A  0085               	movwf	5
  3502  060B  3F00               	moviw [0]fsr0
  3503  060C  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3504  060D  3F01               	moviw [1]fsr0
  3505  060E  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3506  060F  3080               	movlw	128
  3507  0610  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3508                           
  3509                           ;main.c: 801: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.TONE
      +                           ) ;
  3510  0613  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  3511  0614  0084               	movwf	4
  3512  0615  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  3513  0616  0085               	movwf	5
  3514  0617  3F00               	moviw [0]fsr0
  3515  0618  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3516  0619  3F01               	moviw [1]fsr0
  3517  061A  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3518  061B  30C0               	movlw	192
  3519  061C  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3520                           
  3521                           ;main.c: 802: _parallel_lcd_WriteCharacter( 0xC0 | 0x5 , menuStateTone_.select - MENU_IT
      +                          EM_TONE_ADJUST_TONE0 + '0' ) ;
  3522  061F  0020               	movlb	0	; select bank0
  3523  0620  0854               	movf	_menuStateTone_,w
  3524  0621  3E2F               	addlw	47
  3525  0622  00A5               	movwf	??_main
  3526  0623  0825               	movf	??_main,w
  3527  0624  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3528  0625  30C5               	movlw	197
  3529  0626  318D  25D2  3180   	fcall	__parallel_lcd_WriteCharacter
  3530  0629                     l3593:	
  3531                           
  3532                           ;main.c: 803: outputEvent_.changeValue = 1 ;
  3533  0629  0020               	movlb	0	; select bank0
  3534  062A  1569               	bsf	_outputEvent_,2
  3535                           
  3536                           ;main.c: 804: break ;
  3537  062B  2EBE               	goto	l402
  3538  062C                     l3595:	
  3539                           ;main.c: 806: case STATE_INFORMATION:
  3540                           
  3541                           
  3542                           ;main.c: 807: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE_INFORMATION[ menuS
      +                          tateInformation_.select ] ) ;
  3543  062C  3550               	lslf	_menuStateInformation_,w
  3544  062D  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3545  062E  0086               	movwf	6
  3546  062F  0187               	clrf	7
  3547  0630  3F40               	moviw [0]fsr1
  3548  0631  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3549  0632  3F41               	moviw [1]fsr1
  3550  0633  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3551  0634  3080               	movlw	128
  3552  0635  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3553                           
  3554                           ;main.c: 808: _parallel_lcd_WriteString( 0x80 | 0xA , &informationValueBuffer[ menuState
      +                          Information_.select ] ) ;
  3555  0638  3007               	movlw	7
  3556  0639  0020               	movlb	0	; select bank0
  3557  063A  00A5               	movwf	??_main
  3558  063B  0825               	movf	??_main,w
  3559  063C  00F4               	movwf	___bmul@multiplicand
  3560  063D  0850               	movf	_menuStateInformation_,w
  3561  063E  318D  25DE  3180   	fcall	___bmul
  3562  0641  3EAE               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3563  0642  0020               	movlb	0	; select bank0
  3564  0643  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3565  0644  3000               	movlw	0
  3566  0645  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3567  0646  308A               	movlw	138
  3568  0647  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  3569                           
  3570                           ;main.c: 809: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ menuS
      +                          tateInformation_.select + 1 ] ) ;
  3571  064A  0020               	movlb	0	; select bank0
  3572  064B  3550               	lslf	_menuStateInformation_,w
  3573  064C  3E02               	addlw	2
  3574  064D  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3575  064E  0086               	movwf	6
  3576  064F  0187               	clrf	7
  3577  0650  3F40               	moviw [0]fsr1
  3578  0651  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3579  0652  3F41               	moviw [1]fsr1
  3580  0653  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3581  0654  30C0               	movlw	192
  3582  0655  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3583                           
  3584                           ;main.c: 810: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ menuState
      +                          Information_.select + 1 ] ) ;
  3585  0658  3007               	movlw	7
  3586  0659  0020               	movlb	0	; select bank0
  3587  065A  00A5               	movwf	??_main
  3588  065B  0825               	movf	??_main,w
  3589  065C  00F4               	movwf	___bmul@multiplicand
  3590  065D  0850               	movf	_menuStateInformation_,w
  3591  065E  3E01               	addlw	1
  3592  065F  318D  25DE  3180   	fcall	___bmul
  3593  0662  3EAE               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3594  0663  0020               	movlb	0	; select bank0
  3595  0664  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3596  0665  3000               	movlw	0
  3597  0666  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3598  0667  30CA               	movlw	202
  3599  0668  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  3600                           
  3601                           ;main.c: 811: break ;
  3602  066B  2EBE               	goto	l402
  3603  066C                     l3601:	
  3604                           ;main.c: 813: case STATE_LOAD:
  3605                           
  3606                           
  3607                           ;main.c: 814: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.LOAD ) ;
  3608  066C  301C               	movlw	low ((_MESSAGE+28)| (0+32768))
  3609  066D  0084               	movwf	4
  3610  066E  3088               	movlw	high ((_MESSAGE+28)| (0+32768))
  3611  066F  0085               	movwf	5
  3612  0670  3F00               	moviw [0]fsr0
  3613  0671  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3614  0672  3F01               	moviw [1]fsr0
  3615  0673  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3616  0674  3080               	movlw	128
  3617  0675  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3618                           
  3619                           ;main.c: 815: _parallel_lcd_ClearRow( 0xC0 ) ;
  3620  0678  30C0               	movlw	192
  3621  0679  318E  263D  3180   	fcall	__parallel_lcd_ClearRow
  3622                           
  3623                           ;main.c: 816: break ;
  3624  067C  2EBE               	goto	l402
  3625  067D                     l3605:	
  3626                           ;main.c: 818: case STATE_SAVE:
  3627                           
  3628                           
  3629                           ;main.c: 819: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.SAVE ) ;
  3630  067D  301E               	movlw	low ((_MESSAGE+30)| (0+32768))
  3631  067E  0084               	movwf	4
  3632  067F  3088               	movlw	high ((_MESSAGE+30)| (0+32768))
  3633  0680  0085               	movwf	5
  3634  0681  3F00               	moviw [0]fsr0
  3635  0682  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3636  0683  3F01               	moviw [1]fsr0
  3637  0684  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3638  0685  3080               	movlw	128
  3639  0686  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3640                           
  3641                           ;main.c: 820: _parallel_lcd_ClearRow( 0xC0 ) ;
  3642  0689  30C0               	movlw	192
  3643  068A  318E  263D  3180   	fcall	__parallel_lcd_ClearRow
  3644                           
  3645                           ;main.c: 821: break ;
  3646  068D  2EBE               	goto	l402
  3647  068E                     l3609:	
  3648                           ;main.c: 823: case STATE_INITIALIZE:
  3649                           
  3650                           
  3651                           ;main.c: 824: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.LOAD_DEFAUL
      +                          T ) ;
  3652  068E  3020               	movlw	low ((_MESSAGE+32)| (0+32768))
  3653  068F  0084               	movwf	4
  3654  0690  3088               	movlw	high ((_MESSAGE+32)| (0+32768))
  3655  0691  0085               	movwf	5
  3656  0692  3F00               	moviw [0]fsr0
  3657  0693  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3658  0694  3F01               	moviw [1]fsr0
  3659  0695  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3660  0696  3080               	movlw	128
  3661  0697  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3662                           
  3663                           ;main.c: 825: _parallel_lcd_ClearRow( 0xC0 ) ;
  3664  069A  30C0               	movlw	192
  3665  069B  318E  263D  3180   	fcall	__parallel_lcd_ClearRow
  3666                           
  3667                           ;main.c: 826: break ;
  3668  069E  2EBE               	goto	l402
  3669  069F                     l3613:	
  3670                           ;main.c: 828: case STATE_ERROR:
  3671                           
  3672                           
  3673                           ;main.c: 829: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.ERROR.MESSAGE ) ;
  3674  069F  3022               	movlw	low ((_MESSAGE+34)| (0+32768))
  3675  06A0  0084               	movwf	4
  3676  06A1  3088               	movlw	high ((_MESSAGE+34)| (0+32768))
  3677  06A2  0085               	movwf	5
  3678  06A3  3F00               	moviw [0]fsr0
  3679  06A4  00F6               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3680  06A5  3F01               	moviw [1]fsr0
  3681  06A6  00F7               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3682  06A7  3080               	movlw	128
  3683  06A8  318E  26A1  3180   	fcall	__parallel_lcd_WriteStringClearing
  3684                           
  3685                           ;main.c: 830: _parallel_lcd_ClearRow( 0xC0 ) ;
  3686  06AB  30C0               	movlw	192
  3687  06AC  318E  263D  3180   	fcall	__parallel_lcd_ClearRow
  3688                           
  3689                           ;main.c: 832: }
  3690                           
  3691                           ;main.c: 831: break ;
  3692  06AF  2EBE               	goto	l402
  3693  06B0                     l3619:	
  3694  06B0  0020               	movlb	0	; select bank0
  3695  06B1  0868               	movf	_machineState_,w
  3696                           
  3697                           ; Switch size 1, requested type "space"
  3698                           ; Number of cases is 16, Range of values is 1 to 17
  3699                           ; switch strategies available:
  3700                           ; Name         Instructions Cycles
  3701                           ; direct_byte           43     9 (fixed)
  3702                           ; simple_byte           49    25 (average)
  3703                           ; jumptable            263     9 (fixed)
  3704                           ;	Chosen strategy is direct_byte
  3705  06B2  3EFF               	addlw	-1
  3706  06B3  1C03               	skipc
  3707  06B4  2EBE               	goto	l402
  3708  06B5  0084               	movwf	4
  3709  06B6  3011               	movlw	17
  3710  06B7  0204               	subwf	4,w
  3711  06B8  1803               	skipnc
  3712  06B9  2EBE               	goto	l402
  3713  06BA  3189               	movlp	high S3817
  3714  06BB  3504               	lslf	4,w
  3715  06BC  3E7A               	addlw	low S3817
  3716  06BD  0082               	movwf	2
  3717  06BE                     l402:	
  3718                           
  3719                           ;main.c: 834: }
  3720                           ;main.c: 837: if( (outputEvent_.changeValue&&!(outputEvent_.changeValue=0)) ) {
  3721  06BE  0020               	movlb	0	; select bank0
  3722  06BF  1D69               	btfss	_outputEvent_,2
  3723  06C0  29A9               	goto	l251
  3724  06C1  1169               	bcf	_outputEvent_,2
  3725                           
  3726                           ;main.c: 839: uint16 tmpValue ;
  3727                           ;main.c: 840: char valueString[6] = "= 000" ;
  3728  06C2  30A8               	movlw	low main@F3067
  3729  06C3  0086               	movwf	6
  3730  06C4  3000               	movlw	high main@F3067
  3731  06C5  0087               	movwf	7
  3732  06C6  3029               	movlw	low main@valueString
  3733  06C7  0084               	movwf	4
  3734  06C8  3000               	movlw	high main@valueString
  3735  06C9  0085               	movwf	5
  3736  06CA  3006               	movlw	6
  3737  06CB  00A5               	movwf	??_main
  3738  06CC                     u2970:	
  3739  06CC  0016               	moviw fsr1++
  3740  06CD  001A               	movwi fsr0++
  3741  06CE  0BA5               	decfsz	??_main,f
  3742  06CF  2ECC               	goto	u2970
  3743                           
  3744                           ;main.c: 842: switch( machineState_ ) {
  3745  06D0  2EFC               	goto	l3637
  3746  06D1                     l3625:	
  3747                           ;main.c: 844: case STATE_METRONOME:
  3748                           
  3749                           
  3750                           ;main.c: 845: tmpValue = configration_.tempo ;
  3751  06D1  0843               	movf	_configration_+2,w
  3752  06D2  00B9               	movwf	main@tmpValue+1
  3753  06D3  0842               	movf	_configration_+1,w
  3754  06D4  00B8               	movwf	main@tmpValue
  3755                           
  3756                           ;main.c: 846: break ;
  3757  06D5  2F04               	goto	l3639
  3758  06D6                     l435:	
  3759                           ;main.c: 848: case STATE_ADJUST_OSCILLATOR_TUNE:
  3760                           
  3761                           
  3762                           ;main.c: 849: if( (uint08)configration_.oscillatorTune & 0x80 ) {
  3763  06D6  1FCA               	btfss	_configration_+9,7
  3764  06D7  2EEB               	goto	l3631
  3765                           
  3766                           ;main.c: 850: tmpValue = -configration_.oscillatorTune ;
  3767  06D8  084A               	movf	_configration_+9,w
  3768  06D9  00A5               	movwf	??_main
  3769  06DA  01A6               	clrf	??_main+1
  3770  06DB  1BA5               	btfsc	??_main,7
  3771  06DC  03A6               	decf	??_main+1,f
  3772  06DD  09A5               	comf	??_main,f
  3773  06DE  09A6               	comf	??_main+1,f
  3774  06DF  0AA5               	incf	??_main,f
  3775  06E0  1903               	skipnz
  3776  06E1  0AA6               	incf	??_main+1,f
  3777  06E2  0825               	movf	??_main,w
  3778  06E3  00B8               	movwf	main@tmpValue
  3779  06E4  0826               	movf	??_main+1,w
  3780  06E5  00B9               	movwf	main@tmpValue+1
  3781                           
  3782                           ;main.c: 851: valueString[1] = '-' ;
  3783  06E6  302D               	movlw	45
  3784  06E7  00A5               	movwf	??_main
  3785  06E8  0825               	movf	??_main,w
  3786  06E9  00AA               	movwf	main@valueString+1
  3787                           
  3788                           ;main.c: 852: }
  3789  06EA  2F04               	goto	l3639
  3790  06EB                     l3631:	
  3791                           
  3792                           ;main.c: 853: else {
  3793                           ;main.c: 854: tmpValue = (uint16)configration_.oscillatorTune ;
  3794  06EB  084A               	movf	_configration_+9,w
  3795  06EC  00B8               	movwf	main@tmpValue
  3796  06ED  01B9               	clrf	main@tmpValue+1
  3797  06EE  1BB8               	btfsc	main@tmpValue,7
  3798  06EF  03B9               	decf	main@tmpValue+1,f
  3799                           
  3800                           ;main.c: 855: }
  3801                           ;main.c: 856: break ;
  3802  06F0  2F04               	goto	l3639
  3803  06F1                     l3633:	
  3804                           ;main.c: 858: default:
  3805                           
  3806                           
  3807                           ;main.c: 859: tmpValue = *currentValuePtr ;
  3808  06F1  0863               	movf	_currentValuePtr,w
  3809  06F2  0086               	movwf	6
  3810  06F3  0187               	clrf	7
  3811  06F4  0801               	movf	1,w
  3812  06F5  00A5               	movwf	??_main
  3813  06F6  01A6               	clrf	??_main+1
  3814  06F7  0825               	movf	??_main,w
  3815  06F8  00B8               	movwf	main@tmpValue
  3816  06F9  0826               	movf	??_main+1,w
  3817  06FA  00B9               	movwf	main@tmpValue+1
  3818                           
  3819                           ;main.c: 861: }
  3820                           
  3821                           ;main.c: 860: break ;
  3822  06FB  2F04               	goto	l3639
  3823  06FC                     l3637:	
  3824  06FC  0868               	movf	_machineState_,w
  3825                           
  3826                           ; Switch size 1, requested type "space"
  3827                           ; Number of cases is 2, Range of values is 1 to 8
  3828                           ; switch strategies available:
  3829                           ; Name         Instructions Cycles
  3830                           ; simple_byte            7     4 (average)
  3831                           ; direct_byte           25     9 (fixed)
  3832                           ; jumptable            263     9 (fixed)
  3833                           ;	Chosen strategy is simple_byte
  3834  06FD  3A01               	xorlw	1	; case 1
  3835  06FE  1903               	skipnz
  3836  06FF  2ED1               	goto	l3625
  3837  0700  3A09               	xorlw	9	; case 8
  3838  0701  1903               	skipnz
  3839  0702  2ED6               	goto	l435
  3840  0703  2EF1               	goto	l3633
  3841  0704                     l3639:	
  3842                           
  3843                           ;main.c: 863: uint08 isNonZero = BOOL_FALSE ;
  3844  0704  01B7               	clrf	main@isNonZero
  3845                           
  3846                           ;main.c: 864: for( uint08 i = 2 ; i != 5 ; i++ ) {
  3847  0705  3002               	movlw	2
  3848  0706  00A5               	movwf	??_main
  3849  0707  0825               	movf	??_main,w
  3850  0708  00C0               	movwf	main@i
  3851  0709  2F5D               	goto	L30
  3852  070A                     l3647:	
  3853                           ;main.c: 867: case 2: compareUnit = 100 ;
  3854                           
  3855                           ;main.c: 865: uint08 compareUnit ;
  3856                           ;main.c: 866: switch( i ) {
  3857                           
  3858  070A  3064               	movlw	100
  3859  070B  2F0D               	goto	L26
  3860  070C                     l3649:	
  3861                           ;main.c: 869: case 3: compareUnit = 10 ;
  3862                           
  3863                           ;main.c: 868: break ;
  3864                           
  3865  070C  300A               	movlw	10
  3866  070D                     L26:	
  3867  070D  00A5               	movwf	??_main
  3868  070E  0825               	movf	??_main,w
  3869  070F  00BB               	movwf	main@compareUnit
  3870                           
  3871                           ;main.c: 870: break ;
  3872  0710  2F1F               	goto	l3661
  3873  0711                     l445:	
  3874                           ;main.c: 871: case 4: compareUnit = 1 ;
  3875                           
  3876  0711  01BB               	clrf	main@compareUnit
  3877  0712  0ABB               	incf	main@compareUnit,f
  3878                           
  3879                           ;main.c: 873: }
  3880                           
  3881                           ;main.c: 872: break ;
  3882  0713  2F1F               	goto	l3661
  3883  0714                     l3653:	
  3884  0714  0840               	movf	main@i,w
  3885                           
  3886                           ; Switch size 1, requested type "space"
  3887                           ; Number of cases is 3, Range of values is 2 to 4
  3888                           ; switch strategies available:
  3889                           ; Name         Instructions Cycles
  3890                           ; simple_byte           10     6 (average)
  3891                           ; direct_byte           15     9 (fixed)
  3892                           ; jumptable            263     9 (fixed)
  3893                           ;	Chosen strategy is simple_byte
  3894  0715  3A02               	xorlw	2	; case 2
  3895  0716  1903               	skipnz
  3896  0717  2F0A               	goto	l3647
  3897  0718  3A01               	xorlw	1	; case 3
  3898  0719  1903               	skipnz
  3899  071A  2F0C               	goto	l3649
  3900  071B  3A07               	xorlw	7	; case 4
  3901  071C  1903               	skipnz
  3902  071D  2F11               	goto	l445
  3903  071E  2F1F               	goto	l3661
  3904  071F                     l3661:	
  3905                           ;main.c: 874: while( tmpValue >= compareUnit ) {
  3906                           
  3907  071F  083B               	movf	main@compareUnit,w
  3908  0720  00A5               	movwf	??_main
  3909  0721  01A6               	clrf	??_main+1
  3910  0722  0826               	movf	??_main+1,w
  3911  0723  0239               	subwf	main@tmpValue+1,w
  3912  0724  1D03               	skipz
  3913  0725  2F28               	goto	u3005
  3914  0726  0825               	movf	??_main,w
  3915  0727  0238               	subwf	main@tmpValue,w
  3916  0728                     u3005:	
  3917  0728  1C03               	btfss	3,0
  3918  0729  2F3C               	goto	l3663
  3919                           
  3920                           ;main.c: 875: tmpValue -= compareUnit ;
  3921  072A  083B               	movf	main@compareUnit,w
  3922  072B  00A5               	movwf	??_main
  3923  072C  01A6               	clrf	??_main+1
  3924  072D  0825               	movf	??_main,w
  3925  072E  02B8               	subwf	main@tmpValue,f
  3926  072F  0826               	movf	??_main+1,w
  3927  0730  3BB9               	subwfb	main@tmpValue+1,f
  3928                           
  3929                           ;main.c: 876: valueString[i]++ ;
  3930  0731  3001               	movlw	1
  3931  0732  00A5               	movwf	??_main
  3932  0733  0840               	movf	main@i,w
  3933  0734  3E29               	addlw	(low (main@valueString| 0))& (0+255)
  3934  0735  0086               	movwf	6
  3935  0736  0187               	clrf	7
  3936  0737  0825               	movf	??_main,w
  3937  0738  0781               	addwf	1,f
  3938                           
  3939                           ;main.c: 877: isNonZero = BOOL_TRUE ;
  3940  0739  01B7               	clrf	main@isNonZero
  3941  073A  0AB7               	incf	main@isNonZero,f
  3942  073B  2F1F               	goto	l3661
  3943  073C                     l3663:	
  3944                           
  3945                           ;main.c: 878: }
  3946                           ;main.c: 880: if( i == 4 ) break ;
  3947  073C  3004               	movlw	4
  3948  073D  0640               	xorwf	main@i,w
  3949  073E  1903               	btfsc	3,2
  3950  073F  2F61               	goto	l3677
  3951                           
  3952                           ;main.c: 882: if( isNonZero ) continue ;
  3953  0740  0837               	movf	main@isNonZero,w
  3954  0741  1D03               	btfss	3,2
  3955  0742  2F59               	goto	l3673
  3956                           
  3957                           ;main.c: 884: valueString[i] = valueString[ i - 1 ] ;
  3958  0743  0840               	movf	main@i,w
  3959  0744  3EFF               	addlw	255
  3960  0745  3E29               	addlw	(low (main@valueString| 0))& (0+255)
  3961  0746  0086               	movwf	6
  3962  0747  0187               	clrf	7
  3963  0748  0801               	movf	1,w
  3964  0749  00A5               	movwf	??_main
  3965  074A  0840               	movf	main@i,w
  3966  074B  3E29               	addlw	(low (main@valueString| 0))& (0+255)
  3967  074C  0086               	movwf	6
  3968  074D  0187               	clrf	7
  3969  074E  0825               	movf	??_main,w
  3970  074F  0081               	movwf	1
  3971                           
  3972                           ;main.c: 885: valueString[ i - 1 ] = ' ' ;
  3973  0750  3020               	movlw	32
  3974  0751  00A5               	movwf	??_main
  3975  0752  0840               	movf	main@i,w
  3976  0753  3EFF               	addlw	255
  3977  0754  3E29               	addlw	(low (main@valueString| 0))& (0+255)
  3978  0755  0086               	movwf	6
  3979  0756  0187               	clrf	7
  3980  0757  0825               	movf	??_main,w
  3981  0758  0081               	movwf	1
  3982  0759                     l3673:	
  3983  0759  3001               	movlw	1
  3984  075A  00A5               	movwf	??_main
  3985  075B  0825               	movf	??_main,w
  3986  075C  07C0               	addwf	main@i,f
  3987  075D                     L30:	
  3988  075D  3005               	movlw	5
  3989  075E  0640               	xorwf	main@i,w
  3990  075F  1D03               	btfss	3,2
  3991  0760  2F14               	goto	l3653
  3992  0761                     l3677:	
  3993                           
  3994                           ;main.c: 887: }
  3995                           ;main.c: 889: _parallel_lcd_WriteString( 0xC0 | 0xB , &valueString ) ;
  3996  0761  3029               	movlw	low main@valueString
  3997  0762  00A0               	movwf	__parallel_lcd_WriteString@stringPtr
  3998  0763  3000               	movlw	high main@valueString
  3999  0764  00A1               	movwf	__parallel_lcd_WriteString@stringPtr+1
  4000  0765  30CB               	movlw	203
  4001  0766  318E  2657  3180   	fcall	__parallel_lcd_WriteString
  4002                           
  4003                           ;main.c: 891: switch( machineState_ ) {
  4004  0769  2F78               	goto	l3687
  4005  076A                     l3679:	
  4006                           ;main.c: 892: case STATE_ADJUST_OSCILLATOR_TUNE:
  4007                           
  4008                           
  4009                           ;main.c: 893: OSCTUNE = configration_.oscillatorTune ;
  4010  076A  0020               	movlb	0	; select bank0
  4011  076B  084A               	movf	_configration_+9,w
  4012  076C  0021               	movlb	1	; select bank1
  4013  076D  2F76               	goto	L27
  4014  076E                     l3681:	
  4015                           ;main.c: 895: case STATE_ADJUST_TONE:
  4016                           
  4017                           ;main.c: 894: break ;
  4018                           
  4019                           
  4020                           ;main.c: 896: PR2 = *currentValuePtr ;
  4021  076E  0020               	movlb	0	; select bank0
  4022  076F  0863               	movf	_currentValuePtr,w
  4023  0770  0086               	movwf	6
  4024  0771  0187               	clrf	7
  4025  0772  0801               	movf	1,w
  4026  0773  009B               	movwf	27	;volatile
  4027                           
  4028                           ;main.c: 897: {CCPR4L=(PR2>>1);} ;
  4029  0774  361B               	lsrf	27,w	;volatile
  4030  0775  0026               	movlb	6	; select bank6
  4031  0776                     L27:	
  4032  0776  0098               	movwf	24	;volatile
  4033                           
  4034                           ;main.c: 899: }
  4035                           
  4036                           ;main.c: 898: break ;
  4037  0777  29A9               	goto	l251
  4038  0778                     l3687:	
  4039  0778  0020               	movlb	0	; select bank0
  4040  0779  0868               	movf	_machineState_,w
  4041                           
  4042                           ; Switch size 1, requested type "space"
  4043                           ; Number of cases is 2, Range of values is 7 to 8
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte            7     4 (average)
  4047                           ; direct_byte           13     9 (fixed)
  4048                           ; jumptable            263     9 (fixed)
  4049                           ;	Chosen strategy is simple_byte
  4050  077A  3A07               	xorlw	7	; case 7
  4051  077B  1903               	skipnz
  4052  077C  2F6E               	goto	l3681
  4053  077D  3A0F               	xorlw	15	; case 8
  4054  077E  1903               	skipnz
  4055  077F  2F6A               	goto	l3679
  4056  0780  29A9               	goto	l251
  4057                           
  4058                           ;main.c: 900: }
  4059                           ;main.c: 902: }
  4060  0781  29A9               	goto	l251
  4061  0782                     __end_of_main:	
  4062                           
  4063                           	psect	swtext1
  4064  09D8                     __pswtext1:	
  4065  09D8                     S3809:	
  4066  09D8  3182  2A91         	ljmp	l285
  4067  09DA  3182  2A95         	ljmp	l3303
  4068  09DC  3182  2A97         	ljmp	l3305
  4069  09DE  3182  2A9F         	ljmp	l3311
  4070  09E0  3182  2AA1         	ljmp	l3313
  4071  09E2  3182  2AA3         	ljmp	l3315
  4072  09E4  3182  2AA5         	ljmp	l3317
  4073  09E6  3182  2AA7         	ljmp	l3319
  4074  09E8  3182  2AA9         	ljmp	l3321
  4075  09EA  3182  2AAB         	ljmp	l3323
  4076                           
  4077                           	psect	swtext2
  4078  0958                     __pswtext2:	
  4079  0958                     S3811:	
  4080  0958  3182  2AE6         	ljmp	l3353
  4081  095A  3182  2AAD         	ljmp	l3327
  4082  095C  3182  2AB9         	ljmp	l3329
  4083  095E  3182  2AEE         	ljmp	l3359
  4084  0960  3182  2AEE         	ljmp	l3359
  4085  0962  3182  2AEE         	ljmp	l3359
  4086  0964  3182  2AF4         	ljmp	l323
  4087  0966  3182  2AF1         	ljmp	l322
  4088  0968  3182  2AEE         	ljmp	l3359
  4089  096A  3182  2AD0         	ljmp	l3341
  4090  096C  3183  2B0B         	ljmp	l281
  4091  096E  3182  2AC5         	ljmp	l3335
  4092  0970  3183  2B0B         	ljmp	l281
  4093  0972  3182  2ADB         	ljmp	l3347
  4094  0974  3182  2AFA         	ljmp	l325
  4095  0976  3183  2B0B         	ljmp	l281
  4096  0978  3182  2AFA         	ljmp	l325
  4097                           
  4098                           	psect	swtext3
  4099  099C                     __pswtext3:	
  4100  099C                     S3813:	
  4101  099C  3183  2BF8         	ljmp	l3479
  4102  099E  3183  2B11         	ljmp	l3371
  4103  09A0  3183  2B13         	ljmp	l3373
  4104  09A2  3183  2B19         	ljmp	l335
  4105  09A4  3183  2B20         	ljmp	l336
  4106  09A6  3183  2B27         	ljmp	l337
  4107  09A8  3183  2B41         	ljmp	l339
  4108  09AA  3183  2B32         	ljmp	l338
  4109  09AC  3183  2B4F         	ljmp	l3403
  4110  09AE  3183  2B15         	ljmp	l3375
  4111  09B0  3183  2B57         	ljmp	l342
  4112  09B2  3183  2B15         	ljmp	l3375
  4113  09B4  3183  2B56         	ljmp	l341
  4114  09B6  3183  2B15         	ljmp	l3375
  4115  09B8  3183  2BF8         	ljmp	l3479
  4116  09BA  3183  2B5D         	ljmp	l3411
  4117                           
  4118                           	psect	swtext4
  4119  09BC                     __pswtext4:	
  4120  09BC                     S3815:	
  4121  09BC  3183  2BB4         	ljmp	l358
  4122  09BE  3183  2B76         	ljmp	l350
  4123  09C0  3183  2B76         	ljmp	l350
  4124  09C2  3183  2BD5         	ljmp	l367
  4125  09C4  3183  2BD5         	ljmp	l367
  4126  09C6  3183  2BD5         	ljmp	l367
  4127  09C8  3183  2BD5         	ljmp	l367
  4128  09CA  3183  2BD5         	ljmp	l367
  4129  09CC  3183  2B76         	ljmp	l350
  4130  09CE  3183  2B76         	ljmp	l350
  4131  09D0  3184  2C06         	ljmp	l357
  4132  09D2  3183  2B76         	ljmp	l350
  4133  09D4  3184  2C06         	ljmp	l357
  4134  09D6  3183  2B76         	ljmp	l350
  4135                           
  4136                           	psect	swtext5
  4137  097A                     __pswtext5:	
  4138  097A                     S3817:	
  4139  097A  3185  2D7A         	ljmp	l3565
  4140  097C  3184  2C80         	ljmp	l3539
  4141  097E  3184  2C80         	ljmp	l3539
  4142  0980  3185  2DA3         	ljmp	l3573
  4143  0982  3185  2DBC         	ljmp	l3577
  4144  0984  3185  2DD5         	ljmp	l3581
  4145  0986  3186  2E07         	ljmp	l3589
  4146  0988  3185  2DEE         	ljmp	l3585
  4147  098A  3186  2E2C         	ljmp	l3595
  4148  098C  3185  2D12         	ljmp	l3551
  4149  098E  3186  2E7D         	ljmp	l3605
  4150  0990  3185  2D12         	ljmp	l3551
  4151  0992  3186  2E6C         	ljmp	l3601
  4152  0994  3185  2D12         	ljmp	l3551
  4153  0996  3186  2E8E         	ljmp	l3609
  4154  0998  3186  2EBE         	ljmp	l402
  4155  099A  3186  2E9F         	ljmp	l3613
  4156                           
  4157                           	psect	text1
  4158  0782                     __ptext1:	
  4159 ;; *************** function _initialize *****************
  4160 ;; Defined at:
  4161 ;;		line 5 in file "src/pic16f1827_init.h"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;		None               void
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4175 ;;      Params:         0       0       0       0       0       0
  4176 ;;      Locals:         0       0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0
  4178 ;;      Totals:         0       0       0       0       0       0
  4179 ;;Total ram usage:        0 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    1
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_main
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _initialize
  4191  0782                     _initialize:	
  4192                           
  4193                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4197  0782  0021               	movlb	1	; select bank1
  4198  0783  0819               	movf	25,w	;volatile
  4199  0784  3987               	andlw	-121
  4200  0785  3870               	iorlw	112
  4201  0786  0099               	movwf	25	;volatile
  4202                           
  4203                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4204  0787  30FC               	movlw	-4
  4205  0788  0599               	andwf	25,f	;volatile
  4206                           
  4207                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4208  0789  1799               	bsf	25,7	;volatile
  4209                           
  4210                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4211  078A  30C0               	movlw	-64
  4212  078B  0598               	andwf	24,f	;volatile
  4213                           
  4214                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4215  078C  0817               	movf	23,w	;volatile
  4216  078D  39C1               	andlw	-63
  4217  078E  381E               	iorlw	30
  4218  078F  0097               	movwf	23	;volatile
  4219                           
  4220                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4221  0790  138B               	bcf	11,7	;volatile
  4222                           
  4223                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4224  0791  130B               	bcf	11,6	;volatile
  4225                           
  4226                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4227  0792  1595               	bsf	21,3	;volatile
  4228                           
  4229                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4230  0793  1295               	bcf	21,5	;volatile
  4231                           
  4232                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4233  0794  1615               	bsf	21,4	;volatile
  4234                           
  4235                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4236  0795  0020               	movlb	0	; select bank0
  4237  0796  0195               	clrf	21	;volatile
  4238                           
  4239                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4240  0797  128B               	bcf	11,5	;volatile
  4241                           
  4242                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4243  0798  110B               	bcf	11,2	;volatile
  4244                           
  4245                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4246  0799  1018               	bcf	24,0	;volatile
  4247                           
  4248                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4249  079A  303F               	movlw	-193
  4250  079B  0598               	andwf	24,f	;volatile
  4251                           
  4252                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4253  079C  3030               	movlw	48
  4254  079D  0498               	iorwf	24,f	;volatile
  4255                           
  4256                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4257  079E  1118               	bcf	24,2	;volatile
  4258                           
  4259                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4260  079F  0196               	clrf	22	;volatile
  4261  07A0  0197               	clrf	23	;volatile
  4262                           
  4263                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4264  07A1  1011               	bcf	17,0	;volatile
  4265                           
  4266                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4267  07A2  0021               	movlb	1	; select bank1
  4268  07A3  1011               	bcf	17,0	;volatile
  4269                           
  4270                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4271  07A4  0020               	movlb	0	; select bank0
  4272  07A5  111C               	bcf	28,2	;volatile
  4273                           
  4274                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4275  07A6  3087               	movlw	-121
  4276  07A7  059C               	andwf	28,f	;volatile
  4277                           
  4278                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4279  07A8  3003               	movlw	3
  4280  07A9  049C               	iorwf	28,f	;volatile
  4281                           
  4282                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4283  07AA  307C               	movlw	124
  4284  07AB  009B               	movwf	27	;volatile
  4285                           
  4286                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4287  07AC  019A               	clrf	26	;volatile
  4288                           
  4289                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4290  07AD  1091               	bcf	17,1	;volatile
  4291                           
  4292                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4293  07AE  0021               	movlb	1	; select bank1
  4294  07AF  1091               	bcf	17,1	;volatile
  4295                           
  4296                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4297  07B0  0028               	movlb	8	; select bank8
  4298  07B1  1117               	bcf	23,2	;volatile
  4299                           
  4300                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4301  07B2  3087               	movlw	-121
  4302  07B3  0597               	andwf	23,f	;volatile
  4303                           
  4304                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4305  07B4  0817               	movf	23,w	;volatile
  4306  07B5  39FC               	andlw	-4
  4307  07B6  3801               	iorlw	1
  4308  07B7  0097               	movwf	23	;volatile
  4309                           
  4310                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4311  07B8  304F               	movlw	79
  4312  07B9  0096               	movwf	22	;volatile
  4313                           
  4314                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4315  07BA  0195               	clrf	21	;volatile
  4316                           
  4317                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4318  07BB  0020               	movlb	0	; select bank0
  4319  07BC  1093               	bcf	19,1	;volatile
  4320                           
  4321                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4322  07BD  0021               	movlb	1	; select bank1
  4323  07BE  1093               	bcf	19,1	;volatile
  4324                           
  4325                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4326  07BF  0028               	movlb	8	; select bank8
  4327  07C0  111E               	bcf	30,2	;volatile
  4328                           
  4329                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4330  07C1  3087               	movlw	-121
  4331  07C2  059E               	andwf	30,f	;volatile
  4332                           
  4333                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4334  07C3  30FC               	movlw	-4
  4335  07C4  059E               	andwf	30,f	;volatile
  4336                           
  4337                           ;pic16f1827_init.h: 59: PR6 = 124 ;
  4338  07C5  307C               	movlw	124
  4339  07C6  009D               	movwf	29	;volatile
  4340                           
  4341                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4342  07C7  019C               	clrf	28	;volatile
  4343                           
  4344                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4345  07C8  0020               	movlb	0	; select bank0
  4346  07C9  1193               	bcf	19,3	;volatile
  4347                           
  4348                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4349  07CA  0021               	movlb	1	; select bank1
  4350  07CB  1193               	bcf	19,3	;volatile
  4351                           
  4352                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4353  07CC  0025               	movlb	5	; select bank5
  4354  07CD  019E               	clrf	30	;volatile
  4355                           
  4356                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4357  07CE  30F0               	movlw	-16
  4358  07CF  0593               	andwf	19,f	;volatile
  4359                           
  4360                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4361  07D0  30F0               	movlw	-16
  4362  07D1  059A               	andwf	26,f	;volatile
  4363                           
  4364                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4365  07D2  30F0               	movlw	-16
  4366  07D3  0026               	movlb	6	; select bank6
  4367  07D4  0593               	andwf	19,f	;volatile
  4368                           
  4369                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4370  07D5  081A               	movf	26,w	;volatile
  4371  07D6  39F0               	andlw	-16
  4372  07D7  380C               	iorlw	12
  4373  07D8  009A               	movwf	26	;volatile
  4374                           
  4375                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4376  07D9  30CF               	movlw	-49
  4377  07DA  059A               	andwf	26,f	;volatile
  4378                           
  4379                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4380  07DB  303F               	movlw	-193
  4381  07DC  0025               	movlb	5	; select bank5
  4382  07DD  059E               	andwf	30,f	;volatile
  4383                           
  4384                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4385  07DE  0026               	movlb	6	; select bank6
  4386  07DF  0198               	clrf	24	;volatile
  4387                           
  4388                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4389  07E0  0199               	clrf	25	;volatile
  4390                           
  4391                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4392  07E1  0023               	movlb	3	; select bank3
  4393  07E2  018C               	clrf	12	;volatile
  4394                           
  4395                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4396  07E3  018D               	clrf	13	;volatile
  4397                           
  4398                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4399  07E4  30E0               	movlw	224
  4400  07E5  0021               	movlb	1	; select bank1
  4401  07E6  008C               	movwf	12	;volatile
  4402                           
  4403                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4404  07E7  018D               	clrf	13	;volatile
  4405  07E8  0008               	return
  4406  07E9                     __end_of_initialize:	
  4407                           
  4408                           	psect	text2
  4409  0EA1                     __ptext2:	
  4410 ;; *************** function __parallel_lcd_WriteStringClearing *****************
  4411 ;; Defined at:
  4412 ;;		line 73 in file "src/../../_Common/parallel_LCD.h"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  position        1    wreg     unsigned char 
  4415 ;;  stringPtr       2    6[COMMON] PTR const unsigned char 
  4416 ;;		 -> STR_36(9), STR_35(12), STR_34(6), STR_33(7), 
  4417 ;;		 -> STR_32(4), STR_31(4), STR_27(10), STR_26(12), 
  4418 ;;		 -> STR_25(9), STR_24(5), STR_23(11), STR_22(7), 
  4419 ;;		 -> STR_21(6), STR_19(10), STR_18(11), STR_17(11), 
  4420 ;;		 -> STR_16(11), STR_15(8), STR_14(6), STR_13(6), 
  4421 ;;		 -> STR_12(6), STR_11(9), STR_10(6), STR_9(5), 
  4422 ;;		 -> STR_8(5), STR_7(5), STR_6(10), STR_5(13), 
  4423 ;;		 -> STR_4(14), STR_3(10), STR_2(11), STR_1(9), 
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;  position        1    1[BANK0 ] unsigned char 
  4426 ;;  i               1    2[BANK0 ] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;		None               void
  4429 ;; Registers used:
  4430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4436 ;;      Params:         2       0       0       0       0       0
  4437 ;;      Locals:         0       2       0       0       0       0
  4438 ;;      Temps:          0       1       0       0       0       0
  4439 ;;      Totals:         2       3       0       0       0       0
  4440 ;;Total ram usage:        5 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    2
  4443 ;; This function calls:
  4444 ;;		__private_parallel_lcd_WriteByte
  4445 ;; This function is called by:
  4446 ;;		_main
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function __parallel_lcd_WriteStringClearing
  4452  0EA1                     __parallel_lcd_WriteStringClearing:	
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in __parallel_lcd_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  4456                           ;__parallel_lcd_WriteStringClearing@position stored from wreg
  4457  0EA1  0020               	movlb	0	; select bank0
  4458  0EA2  00A1               	movwf	__parallel_lcd_WriteStringClearing@position
  4459                           
  4460                           ;parallel_LCD.h: 74: _private_parallel_lcd_WriteByte( position & 0xF0 , 0 ) ;
  4461  0EA3  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4462  0EA4  0821               	movf	__parallel_lcd_WriteStringClearing@position,w
  4463  0EA5  39F0               	andlw	240
  4464  0EA6  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4465                           
  4466                           ;parallel_LCD.h: 75: for ( uint08 i = 0 ; i != 16 ; i++ ) {
  4467  0EA9  0020               	movlb	0	; select bank0
  4468  0EAA  01A2               	clrf	__parallel_lcd_WriteStringClearing@i
  4469  0EAB                     L33:	
  4470  0EAB  3010               	movlw	16
  4471  0EAC  0622               	xorwf	__parallel_lcd_WriteStringClearing@i,w
  4472  0EAD  1903               	btfsc	3,2
  4473  0EAE  0008               	return
  4474                           
  4475                           ;parallel_LCD.h: 76: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4476  0EAF  0821               	movf	__parallel_lcd_WriteStringClearing@position,w
  4477  0EB0  390F               	andlw	15
  4478  0EB1  0222               	subwf	__parallel_lcd_WriteStringClearing@i,w
  4479  0EB2  1C03               	skipc
  4480  0EB3  2ECA               	goto	l3115
  4481  0EB4  0876               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4482  0EB5  0084               	movwf	4
  4483  0EB6  0877               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4484  0EB7  0085               	movwf	5
  4485  0EB8  0012               	moviw fsr0++
  4486  0EB9  1903               	btfsc	3,2
  4487  0EBA  2ECA               	goto	l3115
  4488                           
  4489                           ;parallel_LCD.h: 77: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4490  0EBB  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4491  0EBC  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4492  0EBD  0876               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4493  0EBE  0084               	movwf	4
  4494  0EBF  0877               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4495  0EC0  0085               	movwf	5
  4496  0EC1  0800               	movf	0,w	;code access
  4497  0EC2  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4498  0EC5  3001               	movlw	1
  4499  0EC6  07F6               	addwf	__parallel_lcd_WriteStringClearing@stringPtr,f
  4500  0EC7  3000               	movlw	0
  4501  0EC8  3DF7               	addwfc	__parallel_lcd_WriteStringClearing@stringPtr+1,f
  4502  0EC9  2ED0               	goto	l3117
  4503  0ECA                     l3115:	
  4504                           
  4505                           ;parallel_LCD.h: 78: else
  4506                           ;parallel_LCD.h: 79: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4507  0ECA  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4508  0ECB  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4509  0ECC  3020               	movlw	32
  4510  0ECD  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4511  0ED0                     l3117:	
  4512  0ED0  3001               	movlw	1
  4513  0ED1  0020               	movlb	0	; select bank0
  4514  0ED2  00A0               	movwf	??__parallel_lcd_WriteStringClearing
  4515  0ED3  0820               	movf	??__parallel_lcd_WriteStringClearing,w
  4516  0ED4  07A2               	addwf	__parallel_lcd_WriteStringClearing@i,f
  4517  0ED5  2EAB               	goto	L33
  4518  0ED6                     __end_of__parallel_lcd_WriteStringClearing:	
  4519                           
  4520                           	psect	text3
  4521  0E57                     __ptext3:	
  4522 ;; *************** function __parallel_lcd_WriteString *****************
  4523 ;; Defined at:
  4524 ;;		line 64 in file "src/../../_Common/parallel_LCD.h"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  position        1    wreg     unsigned char 
  4527 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4528 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_30(8), STR_29(7), 
  4529 ;;		 -> STR_28(7), STR_20(7), 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  position        1    3[BANK0 ] unsigned char 
  4532 ;; Return value:  Size  Location     Type
  4533 ;;		None               void
  4534 ;; Registers used:
  4535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4541 ;;      Params:         0       2       0       0       0       0
  4542 ;;      Locals:         0       1       0       0       0       0
  4543 ;;      Temps:          0       1       0       0       0       0
  4544 ;;      Totals:         0       4       0       0       0       0
  4545 ;;Total ram usage:        4 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    2
  4548 ;; This function calls:
  4549 ;;		__private_parallel_lcd_WriteByte
  4550 ;; This function is called by:
  4551 ;;		_main
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           
  4556                           ;psect for function __parallel_lcd_WriteString
  4557  0E57                     __parallel_lcd_WriteString:	
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in __parallel_lcd_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4561                           ;__parallel_lcd_WriteString@position stored from wreg
  4562  0E57  0020               	movlb	0	; select bank0
  4563  0E58  00A3               	movwf	__parallel_lcd_WriteString@position
  4564                           
  4565                           ;parallel_LCD.h: 65: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4566  0E59  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4567  0E5A  0823               	movf	__parallel_lcd_WriteString@position,w
  4568  0E5B  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4569  0E5E                     l3097:	
  4570                           ;parallel_LCD.h: 66: while ( *stringPtr ) {
  4571                           
  4572  0E5E  0020               	movlb	0	; select bank0
  4573  0E5F  0820               	movf	__parallel_lcd_WriteString@stringPtr,w
  4574  0E60  0084               	movwf	4
  4575  0E61  0821               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4576  0E62  0085               	movwf	5
  4577  0E63  0012               	moviw fsr0++
  4578  0E64  1903               	btfsc	3,2
  4579  0E65  0008               	return
  4580                           
  4581                           ;parallel_LCD.h: 67: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4582  0E66  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4583  0E67  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4584  0E68  0020               	movlb	0	; select bank0
  4585  0E69  0820               	movf	__parallel_lcd_WriteString@stringPtr,w
  4586  0E6A  0084               	movwf	4
  4587  0E6B  0821               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4588  0E6C  0085               	movwf	5
  4589  0E6D  0800               	movf	0,w	;code access
  4590  0E6E  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4591  0E71  3001               	movlw	1
  4592  0E72  0020               	movlb	0	; select bank0
  4593  0E73  07A0               	addwf	__parallel_lcd_WriteString@stringPtr,f
  4594  0E74  3000               	movlw	0
  4595  0E75  3DA1               	addwfc	__parallel_lcd_WriteString@stringPtr+1,f
  4596  0E76  2E5E               	goto	l3097
  4597  0E77                     __end_of__parallel_lcd_WriteString:	
  4598                           
  4599                           	psect	text4
  4600  0DD2                     __ptext4:	
  4601 ;; *************** function __parallel_lcd_WriteCharacter *****************
  4602 ;; Defined at:
  4603 ;;		line 57 in file "src/../../_Common/parallel_LCD.h"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  position        1    wreg     unsigned char 
  4606 ;;  character       1    6[COMMON] unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  position        1    7[COMMON] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0, pclath, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4618 ;;      Params:         1       0       0       0       0       0
  4619 ;;      Locals:         1       0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0
  4621 ;;      Totals:         2       0       0       0       0       0
  4622 ;;Total ram usage:        2 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    2
  4625 ;; This function calls:
  4626 ;;		__private_parallel_lcd_WriteByte
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           
  4633                           ;psect for function __parallel_lcd_WriteCharacter
  4634  0DD2                     __parallel_lcd_WriteCharacter:	
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in __parallel_lcd_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4638                           ;__parallel_lcd_WriteCharacter@position stored from wreg
  4639  0DD2  00F7               	movwf	__parallel_lcd_WriteCharacter@position
  4640                           
  4641                           ;parallel_LCD.h: 58: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4642  0DD3  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4643  0DD4  0877               	movf	__parallel_lcd_WriteCharacter@position,w
  4644  0DD5  318E  2627  318D   	fcall	__private_parallel_lcd_WriteByte
  4645                           
  4646                           ;parallel_LCD.h: 59: _private_parallel_lcd_WriteByte( character , 1 ) ;
  4647  0DD8  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4648  0DD9  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4649  0DDA  0876               	movf	__parallel_lcd_WriteCharacter@character,w
  4650  0DDB  318E  2627         	fcall	__private_parallel_lcd_WriteByte
  4651  0DDD  0008               	return
  4652  0DDE                     __end_of__parallel_lcd_WriteCharacter:	
  4653                           
  4654                           	psect	text5
  4655  0E77                     __ptext5:	
  4656 ;; *************** function __parallel_lcd_SetCgram *****************
  4657 ;; Defined at:
  4658 ;;		line 110 in file "src/../../_Common/parallel_LCD.h"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  charCode        1    wreg     unsigned char 
  4661 ;;  bitmap          2    6[COMMON] PTR const unsigned char 
  4662 ;;		 -> BITMAP(24), 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  charCode        1    1[BANK0 ] unsigned char 
  4665 ;;  i               1    2[BANK0 ] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4675 ;;      Params:         2       0       0       0       0       0
  4676 ;;      Locals:         0       2       0       0       0       0
  4677 ;;      Temps:          0       1       0       0       0       0
  4678 ;;      Totals:         2       3       0       0       0       0
  4679 ;;Total ram usage:        5 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    2
  4682 ;; This function calls:
  4683 ;;		__private_parallel_lcd_WriteByte
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function __parallel_lcd_SetCgram
  4691  0E77                     __parallel_lcd_SetCgram:	
  4692                           
  4693                           ;incstack = 0
  4694                           ; Regs used in __parallel_lcd_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4695                           ;__parallel_lcd_SetCgram@charCode stored from wreg
  4696  0E77  0020               	movlb	0	; select bank0
  4697  0E78  00A1               	movwf	__parallel_lcd_SetCgram@charCode
  4698                           
  4699                           ;parallel_LCD.h: 111: _private_parallel_lcd_WriteByte( ( ( charCode << 3 ) & 0b00111111 
      +                          ) | 0b01000000 , 0 ) ;
  4700  0E79  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4701  0E7A  0821               	movf	__parallel_lcd_SetCgram@charCode,w
  4702  0E7B  00A0               	movwf	??__parallel_lcd_SetCgram
  4703  0E7C  3002               	movlw	2
  4704  0E7D                     u2365:	
  4705  0E7D  35A0               	lslf	??__parallel_lcd_SetCgram,f
  4706  0E7E  3EFF               	addlw	-1
  4707  0E7F  1D03               	skipz
  4708  0E80  2E7D               	goto	u2365
  4709  0E81  3520               	lslf	??__parallel_lcd_SetCgram,w
  4710  0E82  393F               	andlw	63
  4711  0E83  3840               	iorlw	64
  4712  0E84  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4713                           
  4714                           ;parallel_LCD.h: 112: for ( uint08 i = 0 ; i != 8 ; i++ , bitmap++ )
  4715  0E87  0020               	movlb	0	; select bank0
  4716  0E88  01A2               	clrf	__parallel_lcd_SetCgram@i
  4717  0E89                     L34:	
  4718  0E89  3008               	movlw	8
  4719  0E8A  0622               	xorwf	__parallel_lcd_SetCgram@i,w
  4720  0E8B  1903               	btfsc	3,2
  4721  0E8C  0008               	return
  4722                           
  4723                           ;parallel_LCD.h: 113: _private_parallel_lcd_WriteByte( *bitmap , 1 ) ;
  4724  0E8D  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4725  0E8E  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4726  0E8F  0876               	movf	__parallel_lcd_SetCgram@bitmap,w
  4727  0E90  0084               	movwf	4
  4728  0E91  0877               	movf	__parallel_lcd_SetCgram@bitmap+1,w
  4729  0E92  0085               	movwf	5
  4730  0E93  0800               	movf	0,w	;code access
  4731  0E94  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4732  0E97  3001               	movlw	1
  4733  0E98  0020               	movlb	0	; select bank0
  4734  0E99  00A0               	movwf	??__parallel_lcd_SetCgram
  4735  0E9A  0820               	movf	??__parallel_lcd_SetCgram,w
  4736  0E9B  07A2               	addwf	__parallel_lcd_SetCgram@i,f
  4737  0E9C  3001               	movlw	1
  4738  0E9D  07F6               	addwf	__parallel_lcd_SetCgram@bitmap,f
  4739  0E9E  3000               	movlw	0
  4740  0E9F  3DF7               	addwfc	__parallel_lcd_SetCgram@bitmap+1,f
  4741  0EA0  2E89               	goto	L34
  4742  0EA1                     __end_of__parallel_lcd_SetCgram:	
  4743                           
  4744                           	psect	text6
  4745  0E13                     __ptext6:	
  4746 ;; *************** function __parallel_lcd_Initialize *****************
  4747 ;; Defined at:
  4748 ;;		line 48 in file "src/../../_Common/parallel_LCD.h"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;		None
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;		None
  4753 ;; Return value:  Size  Location     Type
  4754 ;;		None               void
  4755 ;; Registers used:
  4756 ;;		wreg, status,2, status,0, pclath, cstack
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4762 ;;      Params:         0       0       0       0       0       0
  4763 ;;      Locals:         0       0       0       0       0       0
  4764 ;;      Temps:          0       0       0       0       0       0
  4765 ;;      Totals:         0       0       0       0       0       0
  4766 ;;Total ram usage:        0 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    2
  4769 ;; This function calls:
  4770 ;;		__private_parallel_lcd_WriteByte
  4771 ;; This function is called by:
  4772 ;;		_main
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function __parallel_lcd_Initialize
  4778  0E13                     __parallel_lcd_Initialize:	
  4779                           
  4780                           ;parallel_LCD.h: 49: _private_parallel_lcd_WriteByte( 0x20 | 0x10 | 0x08 | 0x00 , 0 ) ;
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in __parallel_lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4784  0E13  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4785  0E14  3038               	movlw	56
  4786  0E15  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4787                           
  4788                           ;parallel_LCD.h: 50: _private_parallel_lcd_WriteByte( 0x08 | 0x04 , 0 ) ;
  4789  0E18  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4790  0E19  300C               	movlw	12
  4791  0E1A  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4792                           
  4793                           ;parallel_LCD.h: 51: _private_parallel_lcd_WriteByte( 0x10 | 0x00 | 0x00 , 0 ) ;
  4794  0E1D  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4795  0E1E  3010               	movlw	16
  4796  0E1F  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4797                           
  4798                           ;parallel_LCD.h: 52: _private_parallel_lcd_WriteByte( 0x04 | 0x02 | 0x00 , 0 ) ;
  4799  0E22  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4800  0E23  3006               	movlw	6
  4801  0E24  318E  2627         	fcall	__private_parallel_lcd_WriteByte
  4802  0E26  0008               	return
  4803  0E27                     __end_of__parallel_lcd_Initialize:	
  4804                           
  4805                           	psect	text7
  4806  0E3D                     __ptext7:	
  4807 ;; *************** function __parallel_lcd_ClearRow *****************
  4808 ;; Defined at:
  4809 ;;		line 94 in file "src/../../_Common/parallel_LCD.h"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  rowSelect       1    wreg     unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  rowSelect       1    0[BANK0 ] unsigned char 
  4814 ;;  i               1    1[BANK0 ] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4824 ;;      Params:         0       0       0       0       0       0
  4825 ;;      Locals:         0       2       0       0       0       0
  4826 ;;      Temps:          1       0       0       0       0       0
  4827 ;;      Totals:         1       2       0       0       0       0
  4828 ;;Total ram usage:        3 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    2
  4831 ;; This function calls:
  4832 ;;		__private_parallel_lcd_WriteByte
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function __parallel_lcd_ClearRow
  4840  0E3D                     __parallel_lcd_ClearRow:	
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in __parallel_lcd_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  4844                           ;__parallel_lcd_ClearRow@rowSelect stored from wreg
  4845  0E3D  0020               	movlb	0	; select bank0
  4846  0E3E  00A0               	movwf	__parallel_lcd_ClearRow@rowSelect
  4847                           
  4848                           ;parallel_LCD.h: 95: _private_parallel_lcd_WriteByte( rowSelect & 0xF0 , 0 ) ;
  4849  0E3F  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4850  0E40  0820               	movf	__parallel_lcd_ClearRow@rowSelect,w
  4851  0E41  39F0               	andlw	240
  4852  0E42  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4853                           
  4854                           ;parallel_LCD.h: 96: for ( uint08 i = 0 ; i != 16 ; i++ )
  4855  0E45  0020               	movlb	0	; select bank0
  4856  0E46  01A1               	clrf	__parallel_lcd_ClearRow@i
  4857  0E47                     L35:	
  4858  0E47  3010               	movlw	16
  4859  0E48  0621               	xorwf	__parallel_lcd_ClearRow@i,w
  4860  0E49  1903               	btfsc	3,2
  4861  0E4A  0008               	return
  4862                           
  4863                           ;parallel_LCD.h: 97: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4864  0E4B  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4865  0E4C  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4866  0E4D  3020               	movlw	32
  4867  0E4E  318E  2627  318E   	fcall	__private_parallel_lcd_WriteByte
  4868  0E51  3001               	movlw	1
  4869  0E52  00F6               	movwf	??__parallel_lcd_ClearRow
  4870  0E53  0876               	movf	??__parallel_lcd_ClearRow,w
  4871  0E54  0020               	movlb	0	; select bank0
  4872  0E55  07A1               	addwf	__parallel_lcd_ClearRow@i,f
  4873  0E56  2E47               	goto	L35
  4874  0E57                     __end_of__parallel_lcd_ClearRow:	
  4875                           
  4876                           	psect	text8
  4877  0E27                     __ptext8:	
  4878 ;; *************** function __private_parallel_lcd_WriteByte *****************
  4879 ;; Defined at:
  4880 ;;		line 131 in file "src/../../_Common/parallel_LCD.h"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  data            1    wreg     unsigned char 
  4883 ;;  r               1    4[COMMON] unsigned char 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  data            1    5[COMMON] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4895 ;;      Params:         1       0       0       0       0       0
  4896 ;;      Locals:         1       0       0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0
  4898 ;;      Totals:         2       0       0       0       0       0
  4899 ;;Total ram usage:        2 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    1
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		__parallel_lcd_Initialize
  4906 ;;		__parallel_lcd_WriteCharacter
  4907 ;;		__parallel_lcd_WriteString
  4908 ;;		__parallel_lcd_WriteStringClearing
  4909 ;;		__parallel_lcd_ClearRow
  4910 ;;		__parallel_lcd_SetCgram
  4911 ;;		__parallel_lcd_WriteHexNumber
  4912 ;;		__parallel_lcd_ClearPartial
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           
  4917                           ;psect for function __private_parallel_lcd_WriteByte
  4918  0E27                     __private_parallel_lcd_WriteByte:	
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in __private_parallel_lcd_WriteByte: [wreg+status,2+status,0]
  4922                           ;__private_parallel_lcd_WriteByte@data stored from wreg
  4923  0E27  00F5               	movwf	__private_parallel_lcd_WriteByte@data
  4924  0E28                     l144:	
  4925                           ;parallel_LCD.h: 132: {while(!PIR3bits.TMR4IF);} ;
  4926                           
  4927  0E28  0020               	movlb	0	; select bank0
  4928  0E29  1C93               	btfss	19,1	;volatile
  4929  0E2A  2E28               	goto	l144
  4930                           
  4931                           ;parallel_LCD.h: 133: {LATB=data;} ;
  4932  0E2B  0875               	movf	__private_parallel_lcd_WriteByte@data,w
  4933  0E2C  0022               	movlb	2	; select bank2
  4934  0E2D  008D               	movwf	13	;volatile
  4935                           
  4936                           ;parallel_LCD.h: 134: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  4937  0E2E  0874               	movf	__private_parallel_lcd_WriteByte@r,w
  4938  0E2F  1903               	btfsc	3,2
  4939  0E30  2E33               	goto	l147
  4940  0E31  148C               	bsf	12,1	;volatile
  4941  0E32  2E34               	goto	l148
  4942  0E33                     l147:	
  4943  0E33  108C               	bcf	12,1	;volatile
  4944  0E34                     l148:	
  4945                           
  4946                           ;parallel_LCD.h: 135: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  4947  0E34  140C               	bsf	12,0	;volatile
  4948  0E35  0000               	nop
  4949  0E36  0022               	movlb	2	; select bank2
  4950  0E37  100C               	bcf	12,0	;volatile
  4951                           
  4952                           ;parallel_LCD.h: 136: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  4953  0E38  0028               	movlb	8	; select bank8
  4954  0E39  0195               	clrf	21	;volatile
  4955  0E3A  0020               	movlb	0	; select bank0
  4956  0E3B  1093               	bcf	19,1	;volatile
  4957  0E3C  0008               	return
  4958  0E3D                     __end_of__private_parallel_lcd_WriteByte:	
  4959                           
  4960                           	psect	text9
  4961  0F72                     __ptext9:	
  4962 ;; *************** function __configuration_Save *****************
  4963 ;; Defined at:
  4964 ;;		line 61 in file "src/configuration.h"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  config          1    wreg     PTR struct .
  4967 ;;		 -> configration_(11), 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;  config          1    4[BANK0 ] PTR struct .
  4970 ;;		 -> configration_(11), 
  4971 ;;  i               1    3[BANK0 ] unsigned char 
  4972 ;;  romOffset       1    2[BANK0 ] unsigned char 
  4973 ;;  ptrConfig       1    1[BANK0 ] PTR unsigned char 
  4974 ;;		 -> configration_(11), 
  4975 ;;  returnCode      1    0[BANK0 ] enum E2826
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      enum E2826
  4978 ;; Registers used:
  4979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4985 ;;      Params:         0       0       0       0       0       0
  4986 ;;      Locals:         0       5       0       0       0       0
  4987 ;;      Temps:          2       0       0       0       0       0
  4988 ;;      Totals:         2       5       0       0       0       0
  4989 ;;Total ram usage:        7 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    2
  4992 ;; This function calls:
  4993 ;;		__configuration_ReadByte
  4994 ;;		__configuration_WriteByte
  4995 ;; This function is called by:
  4996 ;;		_main
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           
  5001                           ;psect for function __configuration_Save
  5002  0F72                     __configuration_Save:	
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in __configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5006                           ;__configuration_Save@config stored from wreg
  5007  0F72  0020               	movlb	0	; select bank0
  5008  0F73  00A4               	movwf	__configuration_Save@config
  5009                           
  5010                           ;configuration.h: 63: uint08* ptrConfig = (uint08*) config ;
  5011  0F74  0824               	movf	__configuration_Save@config,w
  5012  0F75  00F6               	movwf	??__configuration_Save
  5013  0F76  0876               	movf	??__configuration_Save,w
  5014  0F77  00A1               	movwf	__configuration_Save@ptrConfig
  5015                           
  5016                           ;configuration.h: 64: uint08 romOffset ;
  5017                           ;configuration.h: 65: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5018  0F78  01A0               	clrf	__configuration_Save@returnCode
  5019                           
  5020                           ;configuration.h: 68: INTCONbits.GIE=0; ;
  5021  0F79  138B               	bcf	11,7	;volatile
  5022                           
  5023                           ;configuration.h: 71: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM )
      +                           ;
  5024  0F7A  01F4               	clrf	__configuration_ReadByte@memorySelect
  5025  0F7B  3000               	movlw	0
  5026  0F7C  318D  25EF  318F   	fcall	__configuration_ReadByte
  5027  0F7F  00F6               	movwf	??__configuration_Save
  5028  0F80  0876               	movf	??__configuration_Save,w
  5029  0F81  0020               	movlb	0	; select bank0
  5030  0F82  00A2               	movwf	__configuration_Save@romOffset
  5031                           
  5032                           ;configuration.h: 74: config->writeCount = _configuration_ReadByte( romOffset , MEMORY_S
      +                          ELECT_EEPROM ) ;
  5033  0F83  01F4               	clrf	__configuration_ReadByte@memorySelect
  5034  0F84  0822               	movf	__configuration_Save@romOffset,w
  5035  0F85  318D  25EF  318F   	fcall	__configuration_ReadByte
  5036  0F88  00F6               	movwf	??__configuration_Save
  5037  0F89  0020               	movlb	0	; select bank0
  5038  0F8A  0824               	movf	__configuration_Save@config,w
  5039  0F8B  0086               	movwf	6
  5040  0F8C  0187               	clrf	7
  5041  0F8D  0876               	movf	??__configuration_Save,w
  5042  0F8E  0081               	movwf	1
  5043                           
  5044                           ;configuration.h: 77: if ( ++config->writeCount == 1 ) {
  5045  0F8F  3001               	movlw	1
  5046  0F90  00F6               	movwf	??__configuration_Save
  5047  0F91  0824               	movf	__configuration_Save@config,w
  5048  0F92  0086               	movwf	6
  5049  0F93  0187               	clrf	7
  5050  0F94  0876               	movf	??__configuration_Save,w
  5051  0F95  0781               	addwf	1,f
  5052  0F96  0301               	decf	1,w
  5053  0F97  1D03               	btfss	3,2
  5054  0F98  2FA2               	goto	l2249
  5055                           
  5056                           ;configuration.h: 78: romOffset += sizeof(ConfigurationData) ;
  5057  0F99  300B               	movlw	11
  5058  0F9A  00F6               	movwf	??__configuration_Save
  5059  0F9B  0876               	movf	??__configuration_Save,w
  5060  0F9C  07A2               	addwf	__configuration_Save@romOffset,f
  5061                           
  5062                           ;configuration.h: 79: config->writeCount = 1 ;
  5063  0F9D  0824               	movf	__configuration_Save@config,w
  5064  0F9E  0086               	movwf	6
  5065  0F9F  0187               	clrf	7
  5066  0FA0  0181               	clrf	1
  5067  0FA1  0A81               	incf	1,f
  5068  0FA2                     l2249:	
  5069                           
  5070                           ;configuration.h: 80: }
  5071                           ;configuration.h: 82: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5072  0FA2  30F5               	movlw	245
  5073  0FA3  0222               	subwf	__configuration_Save@romOffset,w
  5074  0FA4  1C03               	skipc
  5075  0FA5  2FA8               	goto	l153
  5076                           
  5077                           ;configuration.h: 83: romOffset = 1 ;
  5078  0FA6  01A2               	clrf	__configuration_Save@romOffset
  5079  0FA7  0AA2               	incf	__configuration_Save@romOffset,f
  5080  0FA8                     l153:	
  5081                           
  5082                           ;configuration.h: 86: EECON1bits.WREN=1; ;
  5083  0FA8  0023               	movlb	3	; select bank3
  5084  0FA9  1515               	bsf	21,2	;volsfr
  5085                           
  5086                           ;configuration.h: 88: config->checkSum = 0x00 ;
  5087  0FAA  0020               	movlb	0	; select bank0
  5088  0FAB  0824               	movf	__configuration_Save@config,w
  5089  0FAC  3E0A               	addlw	10
  5090  0FAD  0086               	movwf	6
  5091  0FAE  0187               	clrf	7
  5092  0FAF  0181               	clrf	1
  5093                           
  5094                           ;configuration.h: 91: for ( uint08 i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5095  0FB0  01A3               	clrf	__configuration_Save@i
  5096  0FB1  2FB7               	goto	L36
  5097  0FB2                     l2269:	
  5098                           ;configuration.h: 96: break ;
  5099                           
  5100  0FB2  3001               	movlw	1
  5101  0FB3  00F6               	movwf	??__configuration_Save
  5102  0FB4  0876               	movf	??__configuration_Save,w
  5103  0FB5  0020               	movlb	0	; select bank0
  5104  0FB6  07A3               	addwf	__configuration_Save@i,f
  5105  0FB7                     L36:	
  5106  0FB7  300B               	movlw	11
  5107  0FB8  0623               	xorwf	__configuration_Save@i,w
  5108  0FB9  1903               	btfsc	3,2
  5109  0FBA  2FE1               	goto	l2271
  5110                           
  5111                           ;configuration.h: 92: _configuration_WriteByte( romOffset + i , ptrConfig[i] ) ;
  5112  0FBB  0823               	movf	__configuration_Save@i,w
  5113  0FBC  0721               	addwf	__configuration_Save@ptrConfig,w
  5114  0FBD  00F6               	movwf	??__configuration_Save
  5115  0FBE  0876               	movf	??__configuration_Save,w
  5116  0FBF  0086               	movwf	6
  5117  0FC0  0187               	clrf	7
  5118  0FC1  0801               	movf	1,w
  5119  0FC2  00F7               	movwf	??__configuration_Save+1
  5120  0FC3  0877               	movf	??__configuration_Save+1,w
  5121  0FC4  00F4               	movwf	__configuration_WriteByte@data
  5122  0FC5  0822               	movf	__configuration_Save@romOffset,w
  5123  0FC6  0723               	addwf	__configuration_Save@i,w
  5124  0FC7  318E  2601  318F   	fcall	__configuration_WriteByte
  5125                           
  5126                           ;configuration.h: 93: config->checkSum ^= ptrConfig[i] ;
  5127  0FCA  0020               	movlb	0	; select bank0
  5128  0FCB  0823               	movf	__configuration_Save@i,w
  5129  0FCC  0721               	addwf	__configuration_Save@ptrConfig,w
  5130  0FCD  00F6               	movwf	??__configuration_Save
  5131  0FCE  0876               	movf	??__configuration_Save,w
  5132  0FCF  0086               	movwf	6
  5133  0FD0  0187               	clrf	7
  5134  0FD1  0801               	movf	1,w
  5135  0FD2  00F7               	movwf	??__configuration_Save+1
  5136  0FD3  0824               	movf	__configuration_Save@config,w
  5137  0FD4  3E0A               	addlw	10
  5138  0FD5  0086               	movwf	6
  5139  0FD6  0187               	clrf	7
  5140  0FD7  0877               	movf	??__configuration_Save+1,w
  5141  0FD8  0681               	xorwf	1,f
  5142                           
  5143                           ;configuration.h: 94: if ( EECON1bits.WRERR ) {
  5144  0FD9  0023               	movlb	3	; select bank3
  5145  0FDA  1D95               	btfss	21,3	;volsfr
  5146  0FDB  2FB2               	goto	l2269
  5147                           
  5148                           ;configuration.h: 95: returnCode = RETURN_CODE_WRITE_ERROR ;
  5149  0FDC  3010               	movlw	16
  5150  0FDD  00F6               	movwf	??__configuration_Save
  5151  0FDE  0876               	movf	??__configuration_Save,w
  5152  0FDF  0020               	movlb	0	; select bank0
  5153  0FE0  00A0               	movwf	__configuration_Save@returnCode
  5154  0FE1                     l2271:	
  5155                           
  5156                           ;configuration.h: 97: }
  5157                           ;configuration.h: 98: }
  5158                           ;configuration.h: 101: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5159  0FE1  0824               	movf	__configuration_Save@config,w
  5160  0FE2  0086               	movwf	6
  5161  0FE3  0187               	clrf	7
  5162  0FE4  0301               	decf	1,w
  5163  0FE5  1D03               	btfss	3,2
  5164  0FE6  2FFB               	goto	l2281
  5165  0FE7  0023               	movlb	3	; select bank3
  5166  0FE8  1995               	btfsc	21,3	;volsfr
  5167  0FE9  2FFB               	goto	l2281
  5168                           
  5169                           ;configuration.h: 102: _configuration_WriteByte( 0x00 , romOffset ) ;
  5170  0FEA  0020               	movlb	0	; select bank0
  5171  0FEB  0822               	movf	__configuration_Save@romOffset,w
  5172  0FEC  00F6               	movwf	??__configuration_Save
  5173  0FED  0876               	movf	??__configuration_Save,w
  5174  0FEE  00F4               	movwf	__configuration_WriteByte@data
  5175  0FEF  3000               	movlw	0
  5176  0FF0  318E  2601  318F   	fcall	__configuration_WriteByte
  5177                           
  5178                           ;configuration.h: 103: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5179  0FF3  0023               	movlb	3	; select bank3
  5180  0FF4  1D95               	btfss	21,3	;volsfr
  5181  0FF5  2FFB               	goto	l2281
  5182  0FF6  3010               	movlw	16
  5183  0FF7  00F6               	movwf	??__configuration_Save
  5184  0FF8  0876               	movf	??__configuration_Save,w
  5185  0FF9  0020               	movlb	0	; select bank0
  5186  0FFA  00A0               	movwf	__configuration_Save@returnCode
  5187  0FFB                     l2281:	
  5188                           
  5189                           ;configuration.h: 104: }
  5190                           ;configuration.h: 107: EECON1bits.WREN=0; ;
  5191  0FFB  0023               	movlb	3	; select bank3
  5192  0FFC  1115               	bcf	21,2	;volsfr
  5193                           
  5194                           ;configuration.h: 110: INTCONbits.GIE=1; ;
  5195  0FFD  178B               	bsf	11,7	;volatile
  5196                           
  5197                           ;configuration.h: 112: return RETURN_CODE_NOERROR ;
  5198  0FFE  3000               	movlw	0
  5199  0FFF  0008               	return
  5200  1000                     __end_of__configuration_Save:	
  5201                           
  5202                           	psect	text10
  5203  0E01                     __ptext10:	
  5204 ;; *************** function __configuration_WriteByte *****************
  5205 ;; Defined at:
  5206 ;;		line 157 in file "src/configuration.h"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  address         1    wreg     unsigned char 
  5209 ;;  data            1    4[COMMON] unsigned char 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  address         1    5[COMMON] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;		None               void
  5214 ;; Registers used:
  5215 ;;		wreg, status,2
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5221 ;;      Params:         1       0       0       0       0       0
  5222 ;;      Locals:         1       0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0
  5224 ;;      Totals:         2       0       0       0       0       0
  5225 ;;Total ram usage:        2 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    1
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		__configuration_Save
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           
  5236                           ;psect for function __configuration_WriteByte
  5237  0E01                     __configuration_WriteByte:	
  5238                           
  5239                           ;incstack = 0
  5240                           ; Regs used in __configuration_WriteByte: [wreg+status,2]
  5241                           ;__configuration_WriteByte@address stored from wreg
  5242  0E01  00F5               	movwf	__configuration_WriteByte@address
  5243                           
  5244                           ;configuration.h: 158: EEADRH=0x00;EEADRL=(address); ;
  5245  0E02  0023               	movlb	3	; select bank3
  5246  0E03  0192               	clrf	18	;volatile
  5247  0E04  0875               	movf	__configuration_WriteByte@address,w
  5248  0E05  0091               	movwf	17	;volatile
  5249                           
  5250                           ;configuration.h: 159: EEDATH=0x00;EEDATL=(data); ;
  5251  0E06  0194               	clrf	20	;volatile
  5252  0E07  0874               	movf	__configuration_WriteByte@data,w
  5253  0E08  0093               	movwf	19	;volatile
  5254                           
  5255                           ;configuration.h: 160: EECON2=0x55;EECON2=0xAA; ;
  5256  0E09  3055               	movlw	85
  5257  0E0A  0096               	movwf	22	;volsfr
  5258  0E0B  30AA               	movlw	170
  5259  0E0C  0096               	movwf	22	;volsfr
  5260                           
  5261                           ;configuration.h: 161: EECON1bits.WR=1; ;
  5262  0E0D  1495               	bsf	21,1	;volsfr
  5263  0E0E                     l172:	
  5264                           ;configuration.h: 162: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5265                           
  5266  0E0E  0020               	movlb	0	; select bank0
  5267  0E0F  1E12               	btfss	18,4	;volatile
  5268  0E10  2E0E               	goto	l172
  5269  0E11  1212               	bcf	18,4	;volatile
  5270  0E12  0008               	return
  5271  0E13                     __end_of__configuration_WriteByte:	
  5272                           
  5273                           	psect	text11
  5274  0F20                     __ptext11:	
  5275 ;; *************** function __configuration_Load *****************
  5276 ;; Defined at:
  5277 ;;		line 118 in file "src/configuration.h"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  config          1    wreg     PTR struct .
  5280 ;;		 -> configration_(11), 
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;  config          1    2[BANK0 ] PTR struct .
  5283 ;;		 -> configration_(11), 
  5284 ;;  i               1    3[BANK0 ] unsigned char 
  5285 ;;  romOffset       1    1[BANK0 ] unsigned char 
  5286 ;;  ptrConfig       1    0[BANK0 ] PTR unsigned char 
  5287 ;;		 -> configration_(11), 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      enum E2826
  5290 ;; Registers used:
  5291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5297 ;;      Params:         0       0       0       0       0       0
  5298 ;;      Locals:         0       4       0       0       0       0
  5299 ;;      Temps:          2       0       0       0       0       0
  5300 ;;      Totals:         2       4       0       0       0       0
  5301 ;;Total ram usage:        6 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    2
  5304 ;; This function calls:
  5305 ;;		__configuration_ReadByte
  5306 ;; This function is called by:
  5307 ;;		_main
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function __configuration_Load
  5313  0F20                     __configuration_Load:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in __configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5317                           ;__configuration_Load@config stored from wreg
  5318  0F20  0020               	movlb	0	; select bank0
  5319  0F21  00A2               	movwf	__configuration_Load@config
  5320                           
  5321                           ;configuration.h: 120: uint08* ptrConfig = (uint08*) config ;
  5322  0F22  0822               	movf	__configuration_Load@config,w
  5323  0F23  00F6               	movwf	??__configuration_Load
  5324  0F24  0876               	movf	??__configuration_Load,w
  5325  0F25  00A0               	movwf	__configuration_Load@ptrConfig
  5326                           
  5327                           ;configuration.h: 121: uint08 romOffset ;
  5328                           ;configuration.h: 124: INTCONbits.GIE=0; ;
  5329  0F26  138B               	bcf	11,7	;volatile
  5330                           
  5331                           ;configuration.h: 127: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM 
      +                          ) ;
  5332  0F27  01F4               	clrf	__configuration_ReadByte@memorySelect
  5333  0F28  3000               	movlw	0
  5334  0F29  318D  25EF  318F   	fcall	__configuration_ReadByte
  5335  0F2C  00F6               	movwf	??__configuration_Load
  5336  0F2D  0876               	movf	??__configuration_Load,w
  5337  0F2E  0020               	movlb	0	; select bank0
  5338  0F2F  00A1               	movwf	__configuration_Load@romOffset
  5339                           
  5340                           ;configuration.h: 130: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) ) return 
      +                          RETURN_CODE_INVALID_OFFSET ;
  5341  0F30  30F5               	movlw	245
  5342  0F31  0221               	subwf	__configuration_Load@romOffset,w
  5343  0F32  1C03               	skipc
  5344  0F33  2F36               	goto	l2299
  5345  0F34  3030               	movlw	48
  5346  0F35  0008               	return
  5347  0F36                     l2299:	
  5348                           
  5349                           ;configuration.h: 132: config->checkSum = 0x00 ;
  5350  0F36  0822               	movf	__configuration_Load@config,w
  5351  0F37  3E0A               	addlw	10
  5352  0F38  0086               	movwf	6
  5353  0F39  0187               	clrf	7
  5354  0F3A  0181               	clrf	1
  5355                           
  5356                           ;configuration.h: 135: for ( uint08 i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5357  0F3B  01A3               	clrf	__configuration_Load@i
  5358  0F3C  300B               	movlw	11
  5359  0F3D  0623               	xorwf	__configuration_Load@i,w
  5360  0F3E  1903               	btfsc	3,2
  5361  0F3F  2F66               	goto	l165
  5362  0F40                     l2307:	
  5363                           
  5364                           ;configuration.h: 136: ptrConfig[i] = _configuration_ReadByte( romOffset + i , MEMORY_SE
      +                          LECT_EEPROM ) ;
  5365  0F40  01F4               	clrf	__configuration_ReadByte@memorySelect
  5366  0F41  0821               	movf	__configuration_Load@romOffset,w
  5367  0F42  0723               	addwf	__configuration_Load@i,w
  5368  0F43  318D  25EF  318F   	fcall	__configuration_ReadByte
  5369  0F46  00F6               	movwf	??__configuration_Load
  5370  0F47  0020               	movlb	0	; select bank0
  5371  0F48  0823               	movf	__configuration_Load@i,w
  5372  0F49  0720               	addwf	__configuration_Load@ptrConfig,w
  5373  0F4A  00F7               	movwf	??__configuration_Load+1
  5374  0F4B  0877               	movf	??__configuration_Load+1,w
  5375  0F4C  0086               	movwf	6
  5376  0F4D  0187               	clrf	7
  5377  0F4E  0876               	movf	??__configuration_Load,w
  5378  0F4F  0081               	movwf	1
  5379                           
  5380                           ;configuration.h: 137: config->checkSum ^= ptrConfig[i] ;
  5381  0F50  0823               	movf	__configuration_Load@i,w
  5382  0F51  0720               	addwf	__configuration_Load@ptrConfig,w
  5383  0F52  00F6               	movwf	??__configuration_Load
  5384  0F53  0876               	movf	??__configuration_Load,w
  5385  0F54  0086               	movwf	6
  5386  0F55  0187               	clrf	7
  5387  0F56  0801               	movf	1,w
  5388  0F57  00F7               	movwf	??__configuration_Load+1
  5389  0F58  0822               	movf	__configuration_Load@config,w
  5390  0F59  3E0A               	addlw	10
  5391  0F5A  0086               	movwf	6
  5392  0F5B  0187               	clrf	7
  5393  0F5C  0877               	movf	??__configuration_Load+1,w
  5394  0F5D  0681               	xorwf	1,f
  5395  0F5E  3001               	movlw	1
  5396  0F5F  00F6               	movwf	??__configuration_Load
  5397  0F60  0876               	movf	??__configuration_Load,w
  5398  0F61  07A3               	addwf	__configuration_Load@i,f
  5399  0F62  300B               	movlw	11
  5400  0F63  0623               	xorwf	__configuration_Load@i,w
  5401  0F64  1D03               	btfss	3,2
  5402  0F65  2F40               	goto	l2307
  5403  0F66                     l165:	
  5404                           
  5405                           ;configuration.h: 138: }
  5406                           ;configuration.h: 141: INTCONbits.GIE=1; ;
  5407  0F66  178B               	bsf	11,7	;volatile
  5408                           
  5409                           ;configuration.h: 144: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5410  0F67  0822               	movf	__configuration_Load@config,w
  5411  0F68  3E0A               	addlw	10
  5412  0F69  0086               	movwf	6
  5413  0F6A  0187               	clrf	7
  5414  0F6B  0801               	movf	1,w
  5415  0F6C  1903               	btfsc	3,2
  5416  0F6D  2F70               	goto	l2321
  5417  0F6E  3020               	movlw	32
  5418  0F6F  0008               	return
  5419  0F70                     l2321:	
  5420                           
  5421                           ;configuration.h: 146: return RETURN_CODE_NOERROR ;
  5422  0F70  3000               	movlw	0
  5423  0F71  0008               	return
  5424  0F72                     __end_of__configuration_Load:	
  5425                           
  5426                           	psect	text12
  5427  0DC1                     __ptext12:	
  5428 ;; *************** function __configuration_GetRomOffset *****************
  5429 ;; Defined at:
  5430 ;;		line 151 in file "src/configuration.h"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;		None
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      unsigned char 
  5437 ;; Registers used:
  5438 ;;		wreg, status,2, status,0, pclath, cstack
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5444 ;;      Params:         0       0       0       0       0       0
  5445 ;;      Locals:         0       0       0       0       0       0
  5446 ;;      Temps:          0       0       0       0       0       0
  5447 ;;      Totals:         0       0       0       0       0       0
  5448 ;;Total ram usage:        0 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    2
  5451 ;; This function calls:
  5452 ;;		__configuration_ReadByte
  5453 ;; This function is called by:
  5454 ;;		_main
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           
  5459                           ;psect for function __configuration_GetRomOffset
  5460  0DC1                     __configuration_GetRomOffset:	
  5461                           
  5462                           ;configuration.h: 152: return _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM ) ;
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in __configuration_GetRomOffset: [wreg+status,2+status,0+pclath+cstack]
  5466  0DC1  01F4               	clrf	__configuration_ReadByte@memorySelect
  5467  0DC2  3000               	movlw	0
  5468  0DC3  318D  25EF         	fcall	__configuration_ReadByte
  5469  0DC5  0008               	return
  5470  0DC6                     __end_of__configuration_GetRomOffset:	
  5471                           
  5472                           	psect	text13
  5473  0DEF                     __ptext13:	
  5474 ;; *************** function __configuration_ReadByte *****************
  5475 ;; Defined at:
  5476 ;;		line 167 in file "src/configuration.h"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  address         1    wreg     unsigned char 
  5479 ;;  memorySelect    1    4[COMMON] enum E2832
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  address         1    5[COMMON] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, status,2, status,0
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5491 ;;      Params:         1       0       0       0       0       0
  5492 ;;      Locals:         1       0       0       0       0       0
  5493 ;;      Temps:          0       0       0       0       0       0
  5494 ;;      Totals:         2       0       0       0       0       0
  5495 ;;Total ram usage:        2 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    1
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		__configuration_Save
  5502 ;;		__configuration_Load
  5503 ;;		__configuration_GetRomOffset
  5504 ;;		_main
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function __configuration_ReadByte
  5510  0DEF                     __configuration_ReadByte:	
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in __configuration_ReadByte: [wreg+status,2+status,0]
  5514                           ;__configuration_ReadByte@address stored from wreg
  5515  0DEF  00F5               	movwf	__configuration_ReadByte@address
  5516                           
  5517                           ;configuration.h: 168: EEADRH=0x00;EEADRL=(address); ;
  5518  0DF0  0023               	movlb	3	; select bank3
  5519  0DF1  0192               	clrf	18	;volatile
  5520  0DF2  0875               	movf	__configuration_ReadByte@address,w
  5521  0DF3  0091               	movwf	17	;volatile
  5522                           
  5523                           ;configuration.h: 169: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5524  0DF4  1395               	bcf	21,7	;volsfr
  5525  0DF5  0874               	movf	__configuration_ReadByte@memorySelect,w
  5526  0DF6  1903               	btfsc	3,2
  5527  0DF7  2DFA               	goto	l178
  5528  0DF8  1715               	bsf	21,6	;volsfr
  5529  0DF9  2DFB               	goto	l179
  5530  0DFA                     l178:	
  5531  0DFA  1315               	bcf	21,6	;volsfr
  5532  0DFB                     l179:	
  5533                           
  5534                           ;configuration.h: 170: EECON1bits.RD=1; ;
  5535  0DFB  1415               	bsf	21,0	;volsfr
  5536                           
  5537                           ;configuration.h: 171: __nop() ;
  5538  0DFC  0000               	nop
  5539                           
  5540                           ;configuration.h: 172: __nop() ;
  5541  0DFD  0000               	nop
  5542                           
  5543                           ;configuration.h: 173: return EEDATL ;
  5544  0DFE  0023               	movlb	3	; select bank3
  5545  0DFF  0813               	movf	19,w	;volatile
  5546  0E00  0008               	return
  5547  0E01                     __end_of__configuration_ReadByte:	
  5548                           
  5549                           	psect	text14
  5550  0DDE                     __ptext14:	
  5551 ;; *************** function ___bmul *****************
  5552 ;; Defined at:
  5553 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  multiplier      1    wreg     unsigned char 
  5556 ;;  multiplicand    1    4[COMMON] unsigned char 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  multiplier      1    7[COMMON] unsigned char 
  5559 ;;  product         1    6[COMMON] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  1    wreg      unsigned char 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5569 ;;      Params:         1       0       0       0       0       0
  5570 ;;      Locals:         2       0       0       0       0       0
  5571 ;;      Temps:          1       0       0       0       0       0
  5572 ;;      Totals:         4       0       0       0       0       0
  5573 ;;Total ram usage:        4 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    1
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_main
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           
  5584                           ;psect for function ___bmul
  5585  0DDE                     ___bmul:	
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5589                           ;___bmul@multiplier stored from wreg
  5590  0DDE  00F7               	movwf	___bmul@multiplier
  5591  0DDF  01F6               	clrf	___bmul@product
  5592  0DE0                     l2331:	
  5593  0DE0  1C77               	btfss	___bmul@multiplier,0
  5594  0DE1  2DE6               	goto	l2335
  5595  0DE2  0874               	movf	___bmul@multiplicand,w
  5596  0DE3  00F5               	movwf	??___bmul
  5597  0DE4  0875               	movf	??___bmul,w
  5598  0DE5  07F6               	addwf	___bmul@product,f
  5599  0DE6                     l2335:	
  5600  0DE6  1003               	clrc
  5601  0DE7  0DF4               	rlf	___bmul@multiplicand,f
  5602  0DE8  1003               	clrc
  5603  0DE9  0CF7               	rrf	___bmul@multiplier,f
  5604  0DEA  0877               	movf	___bmul@multiplier,w
  5605  0DEB  1D03               	btfss	3,2
  5606  0DEC  2DE0               	goto	l2331
  5607  0DED  0876               	movf	___bmul@product,w
  5608  0DEE  0008               	return
  5609  0DEF                     __end_of___bmul:	
  5610                           
  5611                           	psect	intentry
  5612  0004                     __pintentry:	
  5613 ;; *************** function _isr *****************
  5614 ;; Defined at:
  5615 ;;		line 912 in file "src/main.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;		None               void
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5629 ;;      Params:         0       0       0       0       0       0
  5630 ;;      Locals:         0       0       0       0       0       0
  5631 ;;      Temps:          4       0       0       0       0       0
  5632 ;;      Totals:         4       0       0       0       0       0
  5633 ;;Total ram usage:        4 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		Interrupt level 1
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642  0004                     _isr:	
  5643                           
  5644                           ;incstack = 0
  5645                           ; Regs used in _isr: [wreg+status,2+status,0]
  5646  0004  3180               	pagesel	$
  5647  0005  0020               	movlb	0	; select bank0
  5648  0006  087F               	movf	127,w
  5649  0007  00F3               	movwf	??_isr+3
  5650                           
  5651                           ;main.c: 913: if( !PIR3bits.TMR6IF ) return ;
  5652  0008  1D93               	btfss	19,3	;volatile
  5653  0009  28AA               	goto	i1l461
  5654                           
  5655                           ;main.c: 914: PIR3bits.TMR6IF = 0 ;
  5656  000A  1193               	bcf	19,3	;volatile
  5657                           
  5658                           ;main.c: 916: static uint16 eventPrescaler = 0 ;
  5659                           ;main.c: 919: tempoCounter_ += configration_.tempo ;
  5660  000B  0842               	movf	_configration_+1,w
  5661  000C  00F0               	movwf	??_isr
  5662  000D  0843               	movf	_configration_+2,w
  5663  000E  00F1               	movwf	??_isr+1
  5664  000F  01F2               	clrf	??_isr+2
  5665  0010  0870               	movf	??_isr,w
  5666  0011  07DC               	addwf	_tempoCounter_,f
  5667  0012  0871               	movf	??_isr+1,w
  5668  0013  3DDD               	addwfc	_tempoCounter_+1,f
  5669  0014  0872               	movf	??_isr+2,w
  5670  0015  3DDE               	addwfc	_tempoCounter_+2,f
  5671                           
  5672                           ;main.c: 920: if( tempoCounter_ >= ( 32000000UL * 3 / 25 ) ) {
  5673  0016  303A               	movlw	58
  5674  0017  025E               	subwf	_tempoCounter_+2,w
  5675  0018  1D03               	skipz
  5676  0019  2820               	goto	u208_25
  5677  001A  3098               	movlw	152
  5678  001B  025D               	subwf	_tempoCounter_+1,w
  5679  001C  1D03               	skipz
  5680  001D  2820               	goto	u208_25
  5681  001E  3000               	movlw	0
  5682  001F  025C               	subwf	_tempoCounter_,w
  5683  0020                     u208_25:	
  5684  0020  1C03               	skipc
  5685  0021  284A               	goto	i1l2917
  5686                           
  5687                           ;main.c: 921: tempoCounter_ -= ( 32000000UL * 3 / 25 ) ;
  5688  0022  3000               	movlw	0
  5689  0023  00F0               	movwf	??_isr
  5690  0024  3098               	movlw	152
  5691  0025  00F1               	movwf	??_isr+1
  5692  0026  303A               	movlw	58
  5693  0027  00F2               	movwf	??_isr+2
  5694  0028  0870               	movf	??_isr,w
  5695  0029  02DC               	subwf	_tempoCounter_,f
  5696  002A  0871               	movf	??_isr+1,w
  5697  002B  3BDD               	subwfb	_tempoCounter_+1,f
  5698  002C  0872               	movf	??_isr+2,w
  5699  002D  3BDE               	subwfb	_tempoCounter_+2,f
  5700                           
  5701                           ;main.c: 922: duration_ = configration_.duration ;
  5702  002E  0845               	movf	_configration_+4,w
  5703  002F  00F0               	movwf	??_isr
  5704  0030  0870               	movf	??_isr,w
  5705  0031  00E4               	movwf	_duration_
  5706                           
  5707                           ;main.c: 923: if( ++beatCounter_ >= ( configration_.beatCount << 1 ) )
  5708  0032  0844               	movf	_configration_+3,w
  5709  0033  00F0               	movwf	??_isr
  5710  0034  01F1               	clrf	??_isr+1
  5711  0035  35F0               	lslf	??_isr,f
  5712  0036  0DF1               	rlf	??_isr+1,f
  5713  0037  3001               	movlw	1
  5714  0038  00F2               	movwf	??_isr+2
  5715  0039  0872               	movf	??_isr+2,w
  5716  003A  07E1               	addwf	_beatCounter_,f
  5717  003B  0871               	movf	??_isr+1,w
  5718  003C  3A80               	xorlw	128
  5719  003D  3C80               	sublw	128
  5720  003E  1D03               	skipz
  5721  003F  2842               	goto	u209_25
  5722  0040  0870               	movf	??_isr,w
  5723  0041  0261               	subwf	_beatCounter_,w
  5724  0042                     u209_25:	
  5725  0042  1C03               	skipc
  5726  0043  2846               	goto	i1l2913
  5727                           
  5728                           ;main.c: 924: beatCounter_ = 0 ;
  5729  0044  0020               	movlb	0	; select bank0
  5730  0045  01E1               	clrf	_beatCounter_
  5731  0046                     i1l2913:	
  5732                           
  5733                           ;main.c: 926: if( !keyBeepCounter_ )
  5734  0046  0020               	movlb	0	; select bank0
  5735  0047  0867               	movf	_keyBeepCounter_,w
  5736  0048  1903               	btfsc	3,2
  5737                           
  5738                           ;main.c: 927: outputEvent_.soundClickOn = 1 ;
  5739  0049  1669               	bsf	_outputEvent_,4
  5740  004A                     i1l2917:	
  5741                           
  5742                           ;main.c: 928: }
  5743                           ;main.c: 931: if( !( eventPrescaler & 0x3F ) ) {
  5744  004A  303F               	movlw	63
  5745  004B  0578               	andwf	isr@eventPrescaler,w
  5746  004C  00F0               	movwf	??_isr
  5747  004D  3000               	movlw	0
  5748  004E  0579               	andwf	isr@eventPrescaler+1,w
  5749  004F  00F1               	movwf	??_isr+1
  5750  0050  0870               	movf	??_isr,w
  5751  0051  0471               	iorwf	??_isr+1,w
  5752  0052  1D03               	btfss	3,2
  5753  0053  2867               	goto	i1l2933
  5754                           
  5755                           ;main.c: 932: if( duration_ && !--duration_ && !keyBeepCounter_ )
  5756  0054  0864               	movf	_duration_,w
  5757  0055  1903               	btfsc	3,2
  5758  0056  285F               	goto	i1l2927
  5759  0057  3001               	movlw	1
  5760  0058  02E4               	subwf	_duration_,f
  5761  0059  1D03               	btfss	3,2
  5762  005A  285F               	goto	i1l2927
  5763  005B  0867               	movf	_keyBeepCounter_,w
  5764  005C  1D03               	btfss	3,2
  5765  005D  285F               	goto	i1l2927
  5766                           
  5767                           ;main.c: 933: outputEvent_.soundOff = 1 ;
  5768  005E  1769               	bsf	_outputEvent_,6
  5769  005F                     i1l2927:	
  5770                           
  5771                           ;main.c: 934: if( keyBeepCounter_ && ! --keyBeepCounter_ )
  5772  005F  0867               	movf	_keyBeepCounter_,w
  5773  0060  1903               	btfsc	3,2
  5774  0061  2867               	goto	i1l2933
  5775  0062  3001               	movlw	1
  5776  0063  02E7               	subwf	_keyBeepCounter_,f
  5777  0064  1D03               	btfss	3,2
  5778  0065  2867               	goto	i1l2933
  5779                           
  5780                           ;main.c: 935: outputEvent_.soundOff = 1 ;
  5781  0066  1769               	bsf	_outputEvent_,6
  5782  0067                     i1l2933:	
  5783                           
  5784                           ;main.c: 936: }
  5785                           ;main.c: 939: if( ++eventPrescaler != 640 ) return ;
  5786  0067  3001               	movlw	1
  5787  0068  07F8               	addwf	isr@eventPrescaler,f
  5788  0069  3000               	movlw	0
  5789  006A  3DF9               	addwfc	isr@eventPrescaler+1,f
  5790  006B  3080               	movlw	128
  5791  006C  0678               	xorwf	isr@eventPrescaler,w
  5792  006D  3002               	movlw	2
  5793  006E  1903               	skipnz
  5794  006F  0679               	xorwf	isr@eventPrescaler+1,w
  5795  0070  1D03               	btfss	3,2
  5796  0071  28AA               	goto	i1l461
  5797                           
  5798                           ;main.c: 940: eventPrescaler = 0 ;
  5799  0072  01F8               	clrf	isr@eventPrescaler
  5800  0073  01F9               	clrf	isr@eventPrescaler+1
  5801                           
  5802                           ;main.c: 943: if( stateReturnCounter_ ) {
  5803  0074  086B               	movf	_stateReturnCounter_,w
  5804  0075  1903               	btfsc	3,2
  5805  0076  287F               	goto	i1l2945
  5806                           
  5807                           ;main.c: 944: if( --stateReturnCounter_ ) return ;
  5808  0077  3001               	movlw	1
  5809  0078  02EB               	subwf	_stateReturnCounter_,f
  5810  0079  1D03               	btfss	3,2
  5811  007A  28AA               	goto	i1l461
  5812                           
  5813                           ;main.c: 946: outputEvent_.changeState = 1 ;
  5814  007B  1469               	bsf	_outputEvent_,0
  5815                           
  5816                           ;main.c: 947: outputEvent_.resetMetronome = 1 ;
  5817  007C  15E9               	bsf	_outputEvent_,3
  5818                           
  5819                           ;main.c: 948: machineState_ = STATE_METRONOME ;
  5820  007D  01E8               	clrf	_machineState_
  5821  007E  0AE8               	incf	_machineState_,f
  5822  007F                     i1l2945:	
  5823                           
  5824                           ;main.c: 949: }
  5825                           ;main.c: 952: portAState_.all = (~PORTA&0xE0) ;
  5826  007F  090C               	comf	12,w	;volatile
  5827  0080  39E0               	andlw	224
  5828  0081  00F0               	movwf	??_isr
  5829  0082  0870               	movf	??_isr,w
  5830  0083  00EA               	movwf	_portAState_
  5831                           
  5832                           ;main.c: 954: if( portAState_.keyUp && !portAState_.keyDown ) {
  5833  0084  1BEA               	btfsc	_portAState_,7
  5834  0085  1B6A               	btfsc	_portAState_,6
  5835  0086  2895               	goto	i1l2957
  5836                           
  5837                           ;main.c: 955: if( ++keyCount_.Up == 0x40 ) {
  5838  0087  3001               	movlw	1
  5839  0088  00F0               	movwf	??_isr
  5840  0089  0870               	movf	??_isr,w
  5841  008A  07D8               	addwf	_keyCount_,f
  5842  008B  3040               	movlw	64
  5843  008C  0658               	xorwf	_keyCount_,w
  5844  008D  1D03               	btfss	3,2
  5845  008E  2896               	goto	i1l2959
  5846                           
  5847                           ;main.c: 956: keyCount_.Up = 0x3C ;
  5848  008F  303C               	movlw	60
  5849  0090  00F0               	movwf	??_isr
  5850  0091  0870               	movf	??_isr,w
  5851  0092  00D8               	movwf	_keyCount_
  5852                           
  5853                           ;main.c: 957: inputEvent_.keyPressHeldUp = 1 ;
  5854  0093  1665               	bsf	_inputEvent_,4
  5855                           
  5856                           ;main.c: 958: }
  5857                           ;main.c: 959: }
  5858  0094  2896               	goto	i1l2959
  5859  0095                     i1l2957:	
  5860                           
  5861                           ;main.c: 960: else
  5862                           ;main.c: 961: keyCount_.Up = 0 ;
  5863  0095  01D8               	clrf	_keyCount_
  5864  0096                     i1l2959:	
  5865                           
  5866                           ;main.c: 963: if( portAState_.keyDown && !portAState_.keyUp ) {
  5867  0096  1B6A               	btfsc	_portAState_,6
  5868  0097  1BEA               	btfsc	_portAState_,7
  5869  0098  28A7               	goto	i1l2969
  5870                           
  5871                           ;main.c: 964: if( ++keyCount_.Down == 0x40 ) {
  5872  0099  3001               	movlw	1
  5873  009A  00F0               	movwf	??_isr
  5874  009B  0870               	movf	??_isr,w
  5875  009C  07DA               	addwf	_keyCount_+2,f
  5876  009D  3040               	movlw	64
  5877  009E  065A               	xorwf	_keyCount_+2,w
  5878  009F  1D03               	btfss	3,2
  5879  00A0  28A8               	goto	i1l2971
  5880                           
  5881                           ;main.c: 965: keyCount_.Down = 0x3C ;
  5882  00A1  303C               	movlw	60
  5883  00A2  00F0               	movwf	??_isr
  5884  00A3  0870               	movf	??_isr,w
  5885  00A4  00DA               	movwf	_keyCount_+2
  5886                           
  5887                           ;main.c: 966: inputEvent_.keyPressHeldDown = 1 ;
  5888  00A5  16E5               	bsf	_inputEvent_,5
  5889                           
  5890                           ;main.c: 967: }
  5891                           ;main.c: 968: }
  5892  00A6  28A8               	goto	i1l2971
  5893  00A7                     i1l2969:	
  5894                           
  5895                           ;main.c: 969: else
  5896                           ;main.c: 970: keyCount_.Down = 0 ;
  5897  00A7  01DA               	clrf	_keyCount_+2
  5898  00A8                     i1l2971:	
  5899                           
  5900                           ;main.c: 972: if( PIR3bits.TMR6IF ) asm("reset") ;
  5901  00A8  1993               	btfsc	19,3	;volatile
  5902  00A9  0001               	reset	;# 
  5903  00AA                     i1l461:	
  5904  00AA  0873               	movf	??_isr+3,w
  5905  00AB  0020               	movlb	0	; select bank0
  5906  00AC  00FF               	movwf	127
  5907  00AD  0009               	retfie
  5908  00AE                     __end_of_isr:	
  5909  007E                     btemp	set	126	;btemp
  5910  007E                     wtemp	set	126
  5911  007E                     wtemp0	set	126
  5912  0080                     wtemp1	set	128
  5913  0082                     wtemp2	set	130
  5914  0084                     wtemp3	set	132
  5915  0086                     wtemp4	set	134
  5916  0088                     wtemp5	set	136
  5917  007F                     wtemp6	set	127
  5918  007E                     ttemp	set	126
  5919  007E                     ttemp0	set	126
  5920  0081                     ttemp1	set	129
  5921  0084                     ttemp2	set	132
  5922  0087                     ttemp3	set	135
  5923  007F                     ttemp4	set	127
  5924  007E                     ltemp	set	126
  5925  007E                     ltemp0	set	126
  5926  0082                     ltemp1	set	130
  5927  0086                     ltemp2	set	134
  5928  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    81
    Data        97
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     33      77
    BANK1            80      0      74
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    currentValuePtr	PTR unsigned char  size(1) Largest target is 11
		 -> configration_.oscillatorTune(BANK0[1]), configration_.tone(BANK0[3]), configration_.pulseWidth(BANK0[1]), configration_.duration(BANK0[1]), 
		 -> configration_.beatCount(BANK0[1]), configration_(BANK0[11]), NULL(NULL[0]), 

    currentMenuStatePtr_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    currentMenuStatePtr_	PTR struct . size(1) Largest target is 5
		 -> menuStateInformation_(BANK0[4]), menuStateConfirm_(BANK0[4]), NULL(NULL[0]), menuStateTone_(BANK0[4]), 
		 -> menuStateMain_(BANK1[4]), 

    menuStateInformation_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateConfirm_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateTone_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S689$menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateMain_.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S631$MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_36(CODE[9]), 

    MESSAGE.ERROR.MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_36(CODE[9]), 

    S627$LOAD_DEFAULT	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_35(CODE[12]), 

    MESSAGE.MEMORY.LOAD_DEFAULT	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_35(CODE[12]), 

    S627$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_34(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_34(CODE[6]), 

    S627$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_33(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_33(CODE[7]), 

    S621$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), 

    S621$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    S621$RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_30(CODE[8]), 

    MESSAGE.CONFIRM.RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_30(CODE[8]), 

    S621$SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[7]), 

    MESSAGE.CONFIRM.SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[7]), 

    S621$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_28(CODE[7]), 

    MESSAGE.CONFIRM.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_28(CODE[7]), 

    S614$OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_27(CODE[10]), 

    MESSAGE.CONFIGURATION.OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_27(CODE[10]), 

    S614$PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[12]), 

    MESSAGE.CONFIGURATION.PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[12]), 

    S614$DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), 

    MESSAGE.CONFIGURATION.DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), 

    S614$TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), 

    MESSAGE.CONFIGURATION.TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), 

    S614$BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_23(CODE[11]), 

    MESSAGE.CONFIGURATION.BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_23(CODE[11]), 

    S614$TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[7]), 

    MESSAGE.CONFIGURATION.TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[7]), 

    S610$TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[6]), 

    MESSAGE.METRONOME.TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[6]), 

    S610$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), 

    S610$TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_19(CODE[10]), 

    MESSAGE.METRONOME.TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_19(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[11]), STR_15(CODE[8]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), 
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), 
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    _configuration_Load@config	PTR struct . size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _configuration_Save@config	PTR struct . size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 11
		 -> configration_(BANK0[11]), 

    _parallel_lcd_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    _parallel_lcd_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_36(CODE[9]), STR_35(CODE[12]), STR_34(CODE[6]), STR_33(CODE[7]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_27(CODE[10]), STR_26(CODE[12]), 
		 -> STR_25(CODE[9]), STR_24(CODE[5]), STR_23(CODE[11]), STR_22(CODE[7]), 
		 -> STR_21(CODE[6]), STR_19(CODE[10]), STR_18(CODE[11]), STR_17(CODE[11]), 
		 -> STR_16(CODE[11]), STR_15(CODE[8]), STR_14(CODE[6]), STR_13(CODE[6]), 
		 -> STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), STR_5(CODE[13]), 
		 -> STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), STR_1(CODE[9]), 

    _parallel_lcd_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 28
		 -> main@valueString(BANK0[6]), informationValueBuffer(BANK1[28]), STR_30(CODE[8]), STR_29(CODE[7]), 
		 -> STR_28(CODE[7]), STR_20(CODE[7]), 


Critical Paths under _main in COMMON

    _main->___bmul
    _main->__configuration_Load
    _main->__configuration_Save
    _main->__parallel_lcd_SetCgram
    _main->__parallel_lcd_WriteCharacter
    _main->__parallel_lcd_WriteStringClearing
    __parallel_lcd_WriteStringClearing->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteString->___bmul
    __parallel_lcd_WriteCharacter->__private_parallel_lcd_WriteByte
    __parallel_lcd_SetCgram->__private_parallel_lcd_WriteByte
    __parallel_lcd_Initialize->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearRow->__private_parallel_lcd_WriteByte
    __configuration_Save->__configuration_ReadByte
    __configuration_Save->__configuration_WriteByte
    __configuration_Load->__configuration_ReadByte
    __configuration_GetRomOffset->__configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->__configuration_Save

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   20097
                                              5 BANK0     28    28      0
                             ___bmul
        __configuration_GetRomOffset
                __configuration_Load
            __configuration_ReadByte
                __configuration_Save
             __parallel_lcd_ClearRow
           __parallel_lcd_Initialize
             __parallel_lcd_SetCgram
       __parallel_lcd_WriteCharacter
          __parallel_lcd_WriteString
  __parallel_lcd_WriteStringClearing
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteStringClearing                    5     3      2    4248
                                              6 COMMON     2     0      2
                                              0 BANK0      3     3      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteString                            4     2      2    2678
                                              0 BANK0      4     2      2
                             ___bmul (ARG)
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteCharacter                         2     1      1    2374
                                              6 COMMON     2     1      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_SetCgram                               5     3      2    2265
                                              6 COMMON     2     0      2
                                              0 BANK0      3     3      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_Initialize                             0     0      0    1862
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearRow                               3     3      0    1961
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) __private_parallel_lcd_WriteByte                      2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Save                                  7     7      0    1227
                                              6 COMMON     2     2      0
                                              0 BANK0      5     5      0
            __configuration_ReadByte
           __configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) __configuration_WriteByte                             2     1      1     196
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Load                                  6     6      0     916
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (1) __configuration_GetRomOffset                          0     0      0     576
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) __configuration_ReadByte                              2     1      1     576
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     144
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   __configuration_GetRomOffset
     __configuration_ReadByte
   __configuration_Load
     __configuration_ReadByte
   __configuration_ReadByte
   __configuration_Save
     __configuration_ReadByte
     __configuration_WriteByte
   __parallel_lcd_ClearRow
     __private_parallel_lcd_WriteByte
   __parallel_lcd_Initialize
     __private_parallel_lcd_WriteByte
   __parallel_lcd_SetCgram
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteCharacter
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteString
     ___bmul (ARG)
     __private_parallel_lcd_WriteByte (ARG)
   __parallel_lcd_WriteStringClearing
     __private_parallel_lcd_WriteByte
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A1       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     21      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      A1      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Aug  9 15:55:42 2015

                                          pc 0002                               ___bmul@product 0076  
                 ??__parallel_lcd_Initialize 0076                                  __CFG_CP$OFF 0000  
                 ?__parallel_lcd_WriteString 0020                                          l144 0E28  
                                        l400 0460                                          l153 0FA8  
                                        l241 00F9                                          l402 06BE  
                                        l322 02F1                                          l147 0E33  
                                        l323 02F4                                          l251 01A9  
                                        l172 0E0E                                          l148 0E34  
                                        l244 00FB                                          l165 0F66  
                                        l341 0356                                          l325 02FA  
                                        l261 01C9                                          l237 00F4  
                                        l350 0376                                          l342 0357  
                                        l238 01A4                                          l335 0319  
                                        l271 01EB                                          l263 01E5  
                                        l255 01BE                                          l336 0320  
                                        l280 028B                                          l256 01BD  
                                        l248 0198                                          l337 0327  
                                        l281 030B                                          l273 020B  
                                        l178 0DFA                                          l338 0332  
                                        l274 01F3                                          l258 01C5  
                                        l179 0DFB                                          l435 06D6  
                                        l339 0341                                          l259 01C4  
                                        l380 0418                                          l445 0711  
                                        l357 0406                                          l285 0291  
                                        l277 028C                                          l382 0420  
                                        l358 03B4                                          l367 03D5  
                                        l279 0289                                          l384 0427  
                                        l396 045F                                          l397 047C  
                                        _PR2 001B                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                                          _PR6 041D  
                                        _isr 0004                                 __CFG_IDLOC0$ 0001  
                               __CFG_IDLOC1$ 0001                                 __CFG_IDLOC2$ 0000  
                               __CFG_IDLOC3$ 0000                                 __CFG_BORV$HI 0000  
                                        wreg 0009                                         S3811 0958  
                                       S3813 099C                                         S3815 09BC  
                                       S3817 097A                                         S3809 09D8  
                               __CFG_LVP$OFF 0000                              __end_of_MESSAGE 0824  
                                       l2321 0F70                                         l2331 0DE0  
                                       l2307 0F40                                         l3115 0ECA  
                                       l3211 015B                                         l3203 013A  
                                       l3117 0ED0                                         l2335 0DE6  
                                       l2271 0FE1                                         l3311 029F  
                                       l3303 0295                                         l2281 0FFB  
                                       l2249 0FA2                                         l3321 02A9  
                                       l3313 02A1                                         l3305 0297  
                                       l3411 035D                                         l3403 034F  
                                       l3323 02AB                                         l3315 02A3  
                                       l3219 0180                                         l2269 0FB2  
                                       l3413 0367                                         l3341 02D0  
                                       l3333 02BF                                         l3317 02A5  
                                       l3245 01CD                                         l3173 00E4  
                                       l3423 0398                                         l3351 02E0  
                                       l3335 02C5                                         l3319 02A7  
                                       l3327 02AD                                         l3263 01EE  
                                       l3175 00E5                                         l3097 0E5E  
                                       l3601 066C                                         l3521 0438  
                                       l3425 0399                                         l3353 02E6  
                                       l3345 02D5                                         l3329 02B9  
                                       l3265 01F4                                         l3249 01D1  
                                       l3257 01DD                                         l3193 00FD  
                                       l2299 0F36                                         l3435 03B2  
                                       l3371 0311                                         l3347 02DB  
                                       l3339 02CA                                         l3291 027E  
                                       l3613 069F                                         l3605 067D  
                                       l3517 0432                                         l3445 03C3  
                                       l3373 0313                                         l3269 01FD  
                                       l3631 06EB                                         l3551 0512  
                                       l3535 0465                                         l3447 03C4  
                                       l3375 0315                                         l3359 02EE  
                                       l3367 02FE                                         l3633 06F1  
                                       l3625 06D1                                         l3609 068E  
                                       l3553 052B                                         l3561 0555  
                                       l3545 04D3                                         l3529 0447  
                                       l3457 03D3                                         l3289 027D  
                                       l3555 0539                                         l3563 0561  
                                       l3539 0480                                         l3619 06B0  
                                       l3467 03E7                                         l3661 071F  
                                       l3653 0714                                         l3637 06FC  
                                       l3581 05D5                                         l3573 05A3  
                                       l3565 057A                                         l3557 0547  
                                       l3549 04FA                                         l3663 073C  
                                       l3647 070A                                         l3639 0704  
                                       l3479 03F8                                         l3681 076E  
                                       l3673 0759                                         l3649 070C  
                                       l3593 0629                                         l3585 05EE  
                                       l3577 05BC                                         l3595 062C  
                                       l3677 0761                                         l3589 0607  
                                       l3679 076A                                         l3687 0778  
                                       ?_isr 0070                                         STR_1 08E1  
                               __CFG_WDTE$ON 0000                                         STR_2 08A5  
                                       STR_3 08BA                                         STR_4 0851  
                                       STR_5 085F                                         STR_6 08CE  
                                       STR_7 0941                                         STR_8 0946  
                                       STR_9 094B                                         u3005 0728  
                                       _LATB 010D                                         u2435 010A  
                                       u2365 0E7D                                         u2445 0128  
                                       u2565 0216                                         u2575 0237  
                                       u2904 043F                                         u2905 043E  
                                       u2585 0258                                         u2970 06CC  
                                       _TMR0 0015                                         _TMR1 0016  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                 __CFG_WRT$OFF 0000  
                        _MESSAGE_INFORMATION 00A0                                         _main 00D4  
                                       fsr0h 0005                                         fsr1h 0007  
                                       fsr0l 0004                                         indf0 0000  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                                       ltemp 007E                                         start 00AE  
                                       ttemp 007E                                         wtemp 007E  
                              __CFG_IESO$OFF 0000                            ___bmul@multiplier 0077  
                      _menuStateInformation_ 0050                                        ??_isr 0070  
                                      ?_main 0070                                        STR_10 093B  
                                      STR_11 08E1                                        STR_20 08FA  
                                      STR_12 091D                                        STR_21 0935  
                                      STR_13 0923                                        STR_30 08EA  
                                      STR_22 0916                                        STR_14 0929  
                                      STR_31 0950                                        STR_23 08A5  
                                      STR_15 08F2                                        STR_32 0954  
                                      STR_24 08BF                                        STR_16 088F  
                                      STR_33 090F                                        STR_25 0856  
                                      STR_17 089A                                        STR_34 092F  
                                      STR_26 0878                                        STR_18 0884  
                                      STR_35 086C                                        STR_27 08C4  
                                      STR_19 08B0                                        STR_36 08D8  
                                      STR_28 0901                                        STR_29 0908  
                                      i1l461 00AA                           main@prevPortAState 006C  
                               _outputEvent_ 0069                                        _PORTA 000C  
                                      _TRISA 008C                                        _TRISB 008D  
                              __CFG_PWRTE$ON 0000                               __CFG_FCMEN$OFF 0000  
            __end_of_PARALLEL_LCD_ROW_SELECT 0839                     ?__configuration_ReadByte 0074  
                                      main@i 0040                                 main@tmpValue 0038  
                                      ltemp0 007E                                        ltemp1 0082  
                                      ltemp2 0086                                        ltemp3 0080  
                          __end_of_CHAR_CODE 0837                                        ttemp0 007E  
                                      ttemp1 0081                                        ttemp2 0084  
                                      ttemp3 0087                                        ttemp4 007F  
                                      status 0003                                        wtemp0 007E  
                                      wtemp1 0080                                        wtemp2 0082  
                                      wtemp3 0084                                        wtemp4 0086  
                                      wtemp5 0088                                        wtemp6 007F  
                             __CFG_MCLRE$OFF 0000                              __initialization 00B0  
                               __end_of_main 0782                                 _beatCounter_ 0061  
                                     ??_main 0025                            __end_of_HEX_TABLE 0834  
                             __CFG_PLLEN$OFF 0000                __parallel_lcd_SetCgram@bitmap 0076  
            __configuration_ReadByte@address 0075                                main@isNonZero 0037  
                                     _EEADRH 0192                                       _EEADRL 0191  
                                     _EEDATH 0194                                       _CCPR4H 0319  
                                     _EEDATL 0193                                       _CCPR4L 0318  
                                     _EECON2 0196                                       _BITMAP 0839  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     i1l2913 0046                                       i1l2933 0067  
                                     i1l2917 004A                                       i1l2927 005F  
                                     i1l2945 007F                                       i1l2971 00A8  
                                     i1l2957 0095                                       i1l2959 0096  
                                     i1l2969 00A7                                       u208_25 0020  
                                     u209_25 0042                     ??__parallel_lcd_ClearRow 0076  
                                     ___bmul 0DDE             __end_of__parallel_lcd_Initialize 0E27  
                             __CFG_STVREN$ON 0000                     ??__parallel_lcd_SetCgram 0020  
                              main@romOffset 003A                              _currentValuePtr 0063  
       __private_parallel_lcd_WriteByte@data 0075                            _menuStateConfirm_ 004C  
                    __end_of__initialization 00D1                     __configuration_WriteByte 0E01  
                        ___bmul@multiplicand 0074                  __end_of__configuration_Load 0F72  
                __end_of__configuration_Save 1000                               __pcstackCOMMON 0070  
                               __pidataBANK0 07E9                                 __pidataBANK1 0ED6  
       __end_of__parallel_lcd_WriteCharacter 0DDE        __size_of__parallel_lcd_WriteCharacter 000C  
               __parallel_lcd_WriteCharacter 0DD2                  ??__parallel_lcd_WriteString 0022  
                             _OPTION_REGbits 0095                                   __pbssBANK0 0058  
            __size_of__parallel_lcd_ClearRow 001A                                   __pmaintext 00D4  
                                    ?___bmul 0074                                   __pintentry 0004  
              __configuration_WriteByte@data 0074                ?__parallel_lcd_WriteCharacter 0076  
            __size_of__parallel_lcd_SetCgram 002A                                      _CCPTMRS 029E  
               ?__configuration_GetRomOffset 0070                                      _MESSAGE 0800  
                             main@keyPressed 003C                                      _OSCTUNE 0098  
          __size_of__parallel_lcd_Initialize 0014                    ?__parallel_lcd_Initialize 0070  
                  __parallel_lcd_WriteString 0E57                                    _CHAR_CODE 0834  
                      __configuration_Load@i 0023             __size_of__configuration_ReadByte 0012  
                      __configuration_Save@i 0023                              __size_of___bmul 0011  
             __configuration_Save@returnCode 0020                                   _initialize 0782  
                                    __ptext1 0782                                      __ptext2 0EA1  
                                    __ptext3 0E57                                      __ptext4 0DD2  
                     __parallel_lcd_ClearRow 0E3D                                      __ptext5 0E77  
                                    __ptext6 0E13                                      __ptext7 0E3D  
                                    __ptext8 0E27                                      __ptext9 0F72  
                                    _isMute_ 0066                       _informationValueBuffer 00AE  
                                  _T1CONbits 0018                                    _T2CONbits 001C  
                               __size_of_isr 00AA                                    _T4CONbits 0417  
                                  _T6CONbits 041E                                    _HEX_TABLE 0824  
                                    clrloop0 0DCD                         end_of_initialization 00D1  
                     __parallel_lcd_SetCgram 0E77                               main@returnCode 003E  
        __parallel_lcd_WriteStringClearing@i 0022                                      init_ram 0DC6  
                                    initloop 0DC7                      _PARALLEL_LCD_ROW_SELECT 0837  
                               __pstringtext 0800                   __configuration_Load@config 0022  
                           __CFG_FOSC$INTOSC 0000          __parallel_lcd_WriteString@stringPtr 0020  
                 ??__configuration_WriteByte 0075                               __end_of_BITMAP 0851  
                                _CCP1CONbits 0293                                  _CCP2CONbits 029A  
       __size_of__configuration_GetRomOffset 0005                                  _CCP3CONbits 0313  
                                _CCP4CONbits 031A                                   main@userId 003F  
                             __end_of___bmul 0DEF                                  ?_initialize 0070  
                        start_initialization 00B0                                  __end_of_isr 00AE  
       __configuration_ReadByte@memorySelect 0074                   __configuration_Save@config 0024  
                    __configuration_ReadByte 0DEF           __size_of__parallel_lcd_WriteString 0020  
                                   ??___bmul 0075                                  _CCPTMRSbits 029E  
                                __pdataBANK0 0041                                  __pdataBANK1 00A0  
               __size_of__configuration_Load 0052                 __size_of__configuration_Save 008E  
           __parallel_lcd_ClearRow@rowSelect 0020        __parallel_lcd_WriteCharacter@position 0077  
                                __pbssCOMMON 0078                                    ___latbits 0001  
                              __pcstackBANK0 0020                          __size_of_initialize 0067  
                             _menuStateMain_ 00E6                               _menuStateTone_ 0054  
                                  _main$1165 002F                                    _main$1166 0031  
                                  _main$1167 0033                                    _main$1168 0035  
          __end_of__parallel_lcd_WriteString 0E77                      ?__parallel_lcd_ClearRow 0070  
                   __parallel_lcd_ClearRow@i 0021                              main@compareUnit 003B  
                                  __pswtext1 09D8                                    __pswtext2 0958  
                                  __pswtext3 099C                                    __pswtext4 09BC  
                                  __pswtext5 097A                                    _keyCount_ 0058  
              __configuration_Save@romOffset 0022             __end_of__configuration_WriteByte 0E13  
                    ?__parallel_lcd_SetCgram 0076                __configuration_Save@ptrConfig 0021  
    __end_of__private_parallel_lcd_WriteByte 0E3D     __size_of__private_parallel_lcd_WriteByte 0016  
          ??__private_parallel_lcd_WriteByte 0075             ?__private_parallel_lcd_WriteByte 0074  
            __private_parallel_lcd_WriteByte 0E27                                    _duration_ 0064  
                  ??__configuration_ReadByte 0075                                     _LATAbits 010C  
                                  clear_ram0 0DCC                                     _PIE1bits 0091  
                                   _PIE3bits 0093                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                     _PIR3bits 0013  
             __end_of__parallel_lcd_ClearRow 0E57                                    main@F3067 00A8  
         __parallel_lcd_WriteString@position 0023       __parallel_lcd_WriteCharacter@character 0076  
             __end_of__parallel_lcd_SetCgram 0EA1                                    main@phase 003D  
                   __parallel_lcd_Initialize 0E13                         _currentMenuStatePtr_ 0062  
                              _tempoCounter_ 005C                     __parallel_lcd_SetCgram@i 0022  
__parallel_lcd_WriteStringClearing@stringPtr 0076                                   _EECON1bits 0195  
          __private_parallel_lcd_WriteByte@r 0074              __end_of__configuration_ReadByte 0E01  
                               ??_initialize 0074          __end_of__configuration_GetRomOffset 0DC6  
                __configuration_GetRomOffset 0DC1              __parallel_lcd_SetCgram@charCode 0021  
                     _MESSAGE_MENU_ITEM_MAIN 00CA                       _MESSAGE_MENU_ITEM_TONE 00DE  
                                   __ptext10 0E01                                     __ptext11 0F20  
                                   __ptext12 0DC1                                     __ptext13 0DEF  
                                   __ptext14 0DDE                ??__configuration_GetRomOffset 0076  
                        __configuration_Load 0F20                          __configuration_Save 0F72  
                              __size_of_main 06AE                           __end_of_initialize 07E9  
  __end_of__parallel_lcd_WriteStringClearing 0ED6   __size_of__parallel_lcd_WriteStringClearing 0035  
        ??__parallel_lcd_WriteStringClearing 0020           ?__parallel_lcd_WriteStringClearing 0076  
          __parallel_lcd_WriteStringClearing 0EA1                                  _inputEvent_ 0065  
          __size_of__configuration_WriteByte 0012                    ?__configuration_WriteByte 0074  
 __parallel_lcd_WriteStringClearing@position 0021                         ?__configuration_Load 0070  
                       ?__configuration_Save 0070                              main@valueString 0029  
                                _OSCTUNEbits 0098                                   _INTCONbits 000B  
             ??__parallel_lcd_WriteCharacter 0077                            isr@eventPrescaler 0078  
                                   intlevel1 0000                            __CFG_CLKOUTEN$OFF 0000  
           __configuration_WriteByte@address 0075                                   _OSCCONbits 0099  
                                _valueLimit_ 005F                                _configration_ 0041  
                      ??__configuration_Load 0076                        ??__configuration_Save 0076  
                                _portAState_ 006A                              _keyBeepCounter_ 0067  
              __configuration_Load@romOffset 0021                                   _WDTCONbits 0097  
                              _machineState_ 0068                __configuration_Load@ptrConfig 0020  
                        _stateReturnCounter_ 006B  
