

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Aug  9 15:47:12 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	swtext3,local,class=CONST,delta=2
    20                           	psect	swtext4,local,class=CONST,delta=2
    21                           	psect	swtext5,local,class=CONST,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001E                     	;# 
    66  001F                     	;# 
    67  008C                     	;# 
    68  008D                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0094                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  0111                     	;# 
    87  0112                     	;# 
    88  0113                     	;# 
    89  0114                     	;# 
    90  0115                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  0118                     	;# 
    94  0119                     	;# 
    95  011A                     	;# 
    96  011B                     	;# 
    97  011D                     	;# 
    98  011E                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  0191                     	;# 
   102  0191                     	;# 
   103  0192                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0194                     	;# 
   108  0195                     	;# 
   109  0196                     	;# 
   110  0199                     	;# 
   111  019A                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019C                     	;# 
   117  019C                     	;# 
   118  019D                     	;# 
   119  019E                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020D                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0212                     	;# 
   127  0213                     	;# 
   128  0213                     	;# 
   129  0214                     	;# 
   130  0214                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  0219                     	;# 
   139  021A                     	;# 
   140  021B                     	;# 
   141  021C                     	;# 
   142  021D                     	;# 
   143  021E                     	;# 
   144  021F                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0294                     	;# 
   150  0295                     	;# 
   151  0295                     	;# 
   152  0296                     	;# 
   153  0298                     	;# 
   154  0298                     	;# 
   155  0299                     	;# 
   156  029A                     	;# 
   157  029B                     	;# 
   158  029C                     	;# 
   159  029C                     	;# 
   160  029D                     	;# 
   161  029E                     	;# 
   162  029E                     	;# 
   163  0311                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0318                     	;# 
   168  0318                     	;# 
   169  0319                     	;# 
   170  031A                     	;# 
   171  0394                     	;# 
   172  0395                     	;# 
   173  0396                     	;# 
   174  039A                     	;# 
   175  039C                     	;# 
   176  039D                     	;# 
   177  039E                     	;# 
   178  039F                     	;# 
   179  0415                     	;# 
   180  0416                     	;# 
   181  0417                     	;# 
   182  041C                     	;# 
   183  041D                     	;# 
   184  041E                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196                           
   197                           	psect	idataBANK0
   198  0E10                     __pidataBANK0:	
   199                           
   200                           ;initializer for _config
   201  0E10  3400               	retlw	0
   202  0E11  3478               	retlw	120
   203  0E12  3400               	retlw	0
   204  0E13  3404               	retlw	4
   205  0E14  3420               	retlw	32
   206  0E15  3401               	retlw	1
   207  0E16  34F9               	retlw	249
   208  0E17  343E               	retlw	62
   209  0E18  3452               	retlw	82
   210  0E19  3400               	retlw	0
   211  0E1A  3400               	retlw	0
   212                           
   213                           ;initializer for _menuStateConfirm
   214  0E1B  3400               	retlw	0
   215  0E1C  3400               	retlw	0
   216  0E1D  3401               	retlw	1
   217  0E1E  3400               	retlw	0
   218                           
   219                           ;initializer for _menuStateInformation
   220  0E1F  3400               	retlw	0
   221  0E20  3400               	retlw	0
   222  0E21  3402               	retlw	2
   223  0E22  3400               	retlw	0
   224                           
   225                           ;initializer for _menuStateTone
   226  0E23  3400               	retlw	0
   227  0E24  3400               	retlw	0
   228  0E25  3403               	retlw	3
   229  0E26  34DE               	retlw	low (_MESSAGE_MENU_ITEM_TONE| 0)
   230                           
   231                           	psect	idataBANK1
   232  0EC1                     __pidataBANK1:	
   233                           
   234                           ;initializer for _MESSAGE_INFORMATION
   235  0EC1  34F2               	retlw	low (STR_15| (0+32768))
   236  0EC2  3488               	retlw	high (STR_15| (0+32768))
   237  0EC3  348F               	retlw	low (STR_16| (0+32768))
   238  0EC4  3488               	retlw	high (STR_16| (0+32768))
   239  0EC5  349A               	retlw	low (STR_17| (0+32768))
   240  0EC6  3488               	retlw	high (STR_17| (0+32768))
   241  0EC7  3484               	retlw	low (STR_18| (0+32768))
   242  0EC8  3488               	retlw	high (STR_18| (0+32768))
   243                           
   244                           ;initializer for main@F3067
   245  0EC9  343D               	retlw	61
   246  0ECA  3420               	retlw	32
   247  0ECB  3430               	retlw	48
   248  0ECC  3430               	retlw	48
   249  0ECD  3430               	retlw	48
   250  0ECE  3400               	retlw	0
   251                           
   252                           ;initializer for _informationValueBuffer
   253  0ECF  3420               	retlw	32
   254  0ED0  342D               	retlw	45
   255  0ED1  342D               	retlw	45
   256  0ED2  342E               	retlw	46
   257  0ED3  342D               	retlw	45
   258  0ED4  342D               	retlw	45
   259  0ED5  3400               	retlw	0
   260  0ED6  3420               	retlw	32
   261  0ED7  3420               	retlw	32
   262  0ED8  3420               	retlw	32
   263  0ED9  342D               	retlw	45
   264  0EDA  342D               	retlw	45
   265  0EDB  3468               	retlw	104
   266  0EDC  3400               	retlw	0
   267  0EDD  3420               	retlw	32
   268  0EDE  3420               	retlw	32
   269  0EDF  3420               	retlw	32
   270  0EE0  342D               	retlw	45
   271  0EE1  342D               	retlw	45
   272  0EE2  3468               	retlw	104
   273  0EE3  3400               	retlw	0
   274  0EE4  3420               	retlw	32
   275  0EE5  3420               	retlw	32
   276  0EE6  3420               	retlw	32
   277  0EE7  3430               	retlw	48
   278  0EE8  3430               	retlw	48
   279  0EE9  3468               	retlw	104
   280  0EEA  3400               	retlw	0
   281                           
   282                           ;initializer for _MESSAGE_MENU_ITEM_MAIN
   283  0EEB  34E1               	retlw	low (STR_1| (0+32768))
   284  0EEC  3488               	retlw	high (STR_1| (0+32768))
   285  0EED  34A5               	retlw	low (STR_2| (0+32768))
   286  0EEE  3488               	retlw	high (STR_2| (0+32768))
   287  0EEF  34BA               	retlw	low (STR_3| (0+32768))
   288  0EF0  3488               	retlw	high (STR_3| (0+32768))
   289  0EF1  3451               	retlw	low (STR_4| (0+32768))
   290  0EF2  3488               	retlw	high (STR_4| (0+32768))
   291  0EF3  345F               	retlw	low (STR_5| (0+32768))
   292  0EF4  3488               	retlw	high (STR_5| (0+32768))
   293  0EF5  34CE               	retlw	low (STR_6| (0+32768))
   294  0EF6  3488               	retlw	high (STR_6| (0+32768))
   295  0EF7  3441               	retlw	low (STR_7| (0+32768))
   296  0EF8  3489               	retlw	high (STR_7| (0+32768))
   297  0EF9  3446               	retlw	low (STR_8| (0+32768))
   298  0EFA  3489               	retlw	high (STR_8| (0+32768))
   299  0EFB  344B               	retlw	low (STR_9| (0+32768))
   300  0EFC  3489               	retlw	high (STR_9| (0+32768))
   301  0EFD  343B               	retlw	low (STR_10| (0+32768))
   302  0EFE  3489               	retlw	high (STR_10| (0+32768))
   303                           
   304                           ;initializer for _MESSAGE_MENU_ITEM_TONE
   305  0EFF  34E1               	retlw	low (STR_1| (0+32768))
   306  0F00  3488               	retlw	high (STR_1| (0+32768))
   307  0F01  341D               	retlw	low (STR_12| (0+32768))
   308  0F02  3489               	retlw	high (STR_12| (0+32768))
   309  0F03  3423               	retlw	low (STR_13| (0+32768))
   310  0F04  3489               	retlw	high (STR_13| (0+32768))
   311  0F05  3429               	retlw	low (STR_14| (0+32768))
   312  0F06  3489               	retlw	high (STR_14| (0+32768))
   313                           
   314                           ;initializer for _menuStateMain
   315  0F07  3400               	retlw	0
   316  0F08  3400               	retlw	0
   317  0F09  3409               	retlw	9
   318  0F0A  34CA               	retlw	low (_MESSAGE_MENU_ITEM_MAIN| 0)
   319                           
   320                           	psect	stringtext
   321  0800                     __pstringtext:	
   322  0800                     _MESSAGE:	
   323  0800  34B0               	retlw	low (STR_19| (0+32768))
   324  0801  3488               	retlw	high (STR_19| (0+32768))
   325  0802  34FA               	retlw	low (STR_20| (0+32768))
   326  0803  3488               	retlw	high (STR_20| (0+32768))
   327  0804  3435               	retlw	low (STR_21| (0+32768))
   328  0805  3489               	retlw	high (STR_21| (0+32768))
   329  0806  3416               	retlw	low (STR_22| (0+32768))
   330  0807  3489               	retlw	high (STR_22| (0+32768))
   331  0808  34A5               	retlw	low (STR_2| (0+32768))
   332  0809  3488               	retlw	high (STR_2| (0+32768))
   333  080A  34BF               	retlw	low ((STR_3+5)| (0+32768))
   334  080B  3488               	retlw	high ((STR_3+5)| (0+32768))
   335  080C  3456               	retlw	low ((STR_4+5)| (0+32768))
   336  080D  3488               	retlw	high ((STR_4+5)| (0+32768))
   337  080E  3478               	retlw	low (STR_26| (0+32768))
   338  080F  3488               	retlw	high (STR_26| (0+32768))
   339  0810  34C4               	retlw	low (STR_27| (0+32768))
   340  0811  3488               	retlw	high (STR_27| (0+32768))
   341  0812  3401               	retlw	low (STR_28| (0+32768))
   342  0813  3489               	retlw	high (STR_28| (0+32768))
   343  0814  3408               	retlw	low (STR_29| (0+32768))
   344  0815  3489               	retlw	high (STR_29| (0+32768))
   345  0816  34EA               	retlw	low (STR_30| (0+32768))
   346  0817  3488               	retlw	high (STR_30| (0+32768))
   347  0818  3450               	retlw	low (STR_31| (0+32768))
   348  0819  3489               	retlw	high (STR_31| (0+32768))
   349  081A  3454               	retlw	low (STR_32| (0+32768))
   350  081B  3489               	retlw	high (STR_32| (0+32768))
   351  081C  340F               	retlw	low (STR_33| (0+32768))
   352  081D  3489               	retlw	high (STR_33| (0+32768))
   353  081E  342F               	retlw	low (STR_34| (0+32768))
   354  081F  3489               	retlw	high (STR_34| (0+32768))
   355  0820  346C               	retlw	low (STR_35| (0+32768))
   356  0821  3488               	retlw	high (STR_35| (0+32768))
   357  0822  34D8               	retlw	low (STR_36| (0+32768))
   358  0823  3488               	retlw	high (STR_36| (0+32768))
   359  0824                     __end_of_MESSAGE:	
   360  0824                     _HEX_TABLE:	
   361  0824  3430               	retlw	48
   362  0825  3431               	retlw	49
   363  0826  3432               	retlw	50
   364  0827  3433               	retlw	51
   365  0828  3434               	retlw	52
   366  0829  3435               	retlw	53
   367  082A  3436               	retlw	54
   368  082B  3437               	retlw	55
   369  082C  3438               	retlw	56
   370  082D  3439               	retlw	57
   371  082E  3441               	retlw	65
   372  082F  3442               	retlw	66
   373  0830  3443               	retlw	67
   374  0831  3444               	retlw	68
   375  0832  3445               	retlw	69
   376  0833  3446               	retlw	70
   377  0834                     __end_of_HEX_TABLE:	
   378  0834                     _CHAR_CODE:	
   379  0834  3400               	retlw	0
   380  0835  3401               	retlw	1
   381  0836  3402               	retlw	2
   382  0837                     __end_of_CHAR_CODE:	
   383  0837                     _PARALLEL_LCD_ROW_SELECT:	
   384  0837  3480               	retlw	128
   385  0838  34C0               	retlw	192
   386  0839                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   387  0839                     _BITMAP:	
   388  0839  3410               	retlw	16
   389  083A  3418               	retlw	24
   390  083B  341C               	retlw	28
   391  083C  341E               	retlw	30
   392  083D  341C               	retlw	28
   393  083E  3418               	retlw	24
   394  083F  3410               	retlw	16
   395  0840  3400               	retlw	0
   396  0841  3400               	retlw	0
   397  0842  3404               	retlw	4
   398  0843  340E               	retlw	14
   399  0844  341F               	retlw	31
   400  0845  3400               	retlw	0
   401  0846  3400               	retlw	0
   402  0847  3400               	retlw	0
   403  0848  3400               	retlw	0
   404  0849  3400               	retlw	0
   405  084A  3400               	retlw	0
   406  084B  3400               	retlw	0
   407  084C  3400               	retlw	0
   408  084D  341F               	retlw	31
   409  084E  340E               	retlw	14
   410  084F  3404               	retlw	4
   411  0850  3400               	retlw	0
   412  0851                     __end_of_BITMAP:	
   413  0016                     _TMR1	set	22
   414  000B                     _INTCONbits	set	11
   415  0011                     _PIR1bits	set	17
   416  0012                     _PIR2bits	set	18
   417  0013                     _PIR3bits	set	19
   418  000C                     _PORTA	set	12
   419  001B                     _PR2	set	27
   420  0018                     _T1CONbits	set	24
   421  001C                     _T2CONbits	set	28
   422  0015                     _TMR0	set	21
   423  001A                     _TMR2	set	26
   424  0095                     _OPTION_REGbits	set	149
   425  0099                     _OSCCONbits	set	153
   426  0098                     _OSCTUNE	set	152
   427  0098                     _OSCTUNEbits	set	152
   428  0091                     _PIE1bits	set	145
   429  0093                     _PIE3bits	set	147
   430  008C                     _TRISA	set	140
   431  008D                     _TRISB	set	141
   432  0097                     _WDTCONbits	set	151
   433  010C                     _LATAbits	set	268
   434  010D                     _LATB	set	269
   435  018C                     _ANSELA	set	396
   436  018D                     _ANSELB	set	397
   437  0192                     _EEADRH	set	402
   438  0191                     _EEADRL	set	401
   439  0195                     _EECON1bits	set	405
   440  0196                     _EECON2	set	406
   441  0194                     _EEDATH	set	404
   442  0193                     _EEDATL	set	403
   443  0293                     _CCP1CONbits	set	659
   444  029A                     _CCP2CONbits	set	666
   445  029E                     _CCPTMRS	set	670
   446  029E                     _CCPTMRSbits	set	670
   447  0313                     _CCP3CONbits	set	787
   448  031A                     _CCP4CONbits	set	794
   449  0319                     _CCPR4H	set	793
   450  0318                     _CCPR4L	set	792
   451  0416                     _PR4	set	1046
   452  041D                     _PR6	set	1053
   453  0417                     _T4CONbits	set	1047
   454  041E                     _T6CONbits	set	1054
   455  0415                     _TMR4	set	1045
   456  041C                     _TMR6	set	1052
   457  0851                     STR_4:	
   458  0851  3441               	retlw	65	;'A'
   459  0852  3464               	retlw	100	;'d'
   460  0853  346A               	retlw	106	;'j'
   461  0854  342E               	retlw	46	;'.'
   462  0855  3420               	retlw	32	;' '
   463  0856  3444               	retlw	68	;'D'
   464  0857  3475               	retlw	117	;'u'
   465  0858  3472               	retlw	114	;'r'
   466  0859  3461               	retlw	97	;'a'
   467  085A  3474               	retlw	116	;'t'
   468  085B  3469               	retlw	105	;'i'
   469  085C  346F               	retlw	111	;'o'
   470  085D  346E               	retlw	110	;'n'
   471  085E  3400               	retlw	0
   472  085F                     STR_5:	
   473  085F  3441               	retlw	65	;'A'
   474  0860  3464               	retlw	100	;'d'
   475  0861  346A               	retlw	106	;'j'
   476  0862  342E               	retlw	46	;'.'
   477  0863  3420               	retlw	32	;' '
   478  0864  3450               	retlw	80	;'P'
   479  0865  342D               	retlw	45	;'-'
   480  0866  3457               	retlw	87	;'W'
   481  0867  3469               	retlw	105	;'i'
   482  0868  3464               	retlw	100	;'d'
   483  0869  3474               	retlw	116	;'t'
   484  086A  3468               	retlw	104	;'h'
   485  086B  3400               	retlw	0
   486  086C                     STR_35:	
   487  086C  3449               	retlw	73	;'I'
   488  086D  346E               	retlw	110	;'n'
   489  086E  3469               	retlw	105	;'i'
   490  086F  3474               	retlw	116	;'t'
   491  0870  3469               	retlw	105	;'i'
   492  0871  3461               	retlw	97	;'a'
   493  0872  346C               	retlw	108	;'l'
   494  0873  3469               	retlw	105	;'i'
   495  0874  347A               	retlw	122	;'z'
   496  0875  3465               	retlw	101	;'e'
   497  0876  3464               	retlw	100	;'d'
   498  0877  3400               	retlw	0
   499  0878                     STR_26:	
   500  0878  3450               	retlw	80	;'P'
   501  0879  3475               	retlw	117	;'u'
   502  087A  346C               	retlw	108	;'l'
   503  087B  3473               	retlw	115	;'s'
   504  087C  3465               	retlw	101	;'e'
   505  087D  3420               	retlw	32	;' '
   506  087E  3457               	retlw	87	;'W'
   507  087F  3469               	retlw	105	;'i'
   508  0880  3464               	retlw	100	;'d'
   509  0881  3474               	retlw	116	;'t'
   510  0882  3468               	retlw	104	;'h'
   511  0883  3400               	retlw	0
   512  0884                     STR_18:	
   513  0884  3445               	retlw	69	;'E'
   514  0885  3472               	retlw	114	;'r'
   515  0886  3472               	retlw	114	;'r'
   516  0887  346F               	retlw	111	;'o'
   517  0888  3472               	retlw	114	;'r'
   518  0889  3420               	retlw	32	;' '
   519  088A  3443               	retlw	67	;'C'
   520  088B  346F               	retlw	111	;'o'
   521  088C  3464               	retlw	100	;'d'
   522  088D  3465               	retlw	101	;'e'
   523  088E  3400               	retlw	0
   524  088F                     STR_16:	
   525  088F  3452               	retlw	82	;'R'
   526  0890  344F               	retlw	79	;'O'
   527  0891  344D               	retlw	77	;'M'
   528  0892  3420               	retlw	32	;' '
   529  0893  344F               	retlw	79	;'O'
   530  0894  3466               	retlw	102	;'f'
   531  0895  3466               	retlw	102	;'f'
   532  0896  3473               	retlw	115	;'s'
   533  0897  3465               	retlw	101	;'e'
   534  0898  3474               	retlw	116	;'t'
   535  0899  3400               	retlw	0
   536  089A                     STR_17:	
   537  089A  3453               	retlw	83	;'S'
   538  089B  3461               	retlw	97	;'a'
   539  089C  3476               	retlw	118	;'v'
   540  089D  3465               	retlw	101	;'e'
   541  089E  3420               	retlw	32	;' '
   542  089F  3443               	retlw	67	;'C'
   543  08A0  346F               	retlw	111	;'o'
   544  08A1  3475               	retlw	117	;'u'
   545  08A2  346E               	retlw	110	;'n'
   546  08A3  3474               	retlw	116	;'t'
   547  08A4  3400               	retlw	0
   548  08A5                     STR_2:	
   549  08A5  3442               	retlw	66	;'B'
   550  08A6  3465               	retlw	101	;'e'
   551  08A7  3461               	retlw	97	;'a'
   552  08A8  3474               	retlw	116	;'t'
   553  08A9  3420               	retlw	32	;' '
   554  08AA  3443               	retlw	67	;'C'
   555  08AB  346F               	retlw	111	;'o'
   556  08AC  3475               	retlw	117	;'u'
   557  08AD  346E               	retlw	110	;'n'
   558  08AE  3474               	retlw	116	;'t'
   559  08AF  3400               	retlw	0
   560  08B0                     STR_19:	
   561  08B0  344D               	retlw	77	;'M'
   562  08B1  3465               	retlw	101	;'e'
   563  08B2  3474               	retlw	116	;'t'
   564  08B3  3472               	retlw	114	;'r'
   565  08B4  346F               	retlw	111	;'o'
   566  08B5  346E               	retlw	110	;'n'
   567  08B6  346F               	retlw	111	;'o'
   568  08B7  346D               	retlw	109	;'m'
   569  08B8  3465               	retlw	101	;'e'
   570  08B9  3400               	retlw	0
   571  08BA                     STR_3:	
   572  08BA  3441               	retlw	65	;'A'
   573  08BB  3464               	retlw	100	;'d'
   574  08BC  346A               	retlw	106	;'j'
   575  08BD  342E               	retlw	46	;'.'
   576  08BE  3420               	retlw	32	;' '
   577  08BF  3454               	retlw	84	;'T'
   578  08C0  346F               	retlw	111	;'o'
   579  08C1  346E               	retlw	110	;'n'
   580  08C2  3465               	retlw	101	;'e'
   581  08C3  3400               	retlw	0
   582  08C4                     STR_27:	
   583  08C4  344F               	retlw	79	;'O'
   584  08C5  3473               	retlw	115	;'s'
   585  08C6  3463               	retlw	99	;'c'
   586  08C7  342E               	retlw	46	;'.'
   587  08C8  3420               	retlw	32	;' '
   588  08C9  3454               	retlw	84	;'T'
   589  08CA  3475               	retlw	117	;'u'
   590  08CB  346E               	retlw	110	;'n'
   591  08CC  3465               	retlw	101	;'e'
   592  08CD  3400               	retlw	0
   593  08CE                     STR_6:	
   594  08CE  3441               	retlw	65	;'A'
   595  08CF  3464               	retlw	100	;'d'
   596  08D0  346A               	retlw	106	;'j'
   597  08D1  342E               	retlw	46	;'.'
   598  08D2  3420               	retlw	32	;' '
   599  08D3  3454               	retlw	84	;'T'
   600  08D4  3475               	retlw	117	;'u'
   601  08D5  346E               	retlw	110	;'n'
   602  08D6  3465               	retlw	101	;'e'
   603  08D7  3400               	retlw	0
   604  08D8                     STR_36:	
   605  08D8  3445               	retlw	69	;'E'
   606  08D9  3452               	retlw	82	;'R'
   607  08DA  3452               	retlw	82	;'R'
   608  08DB  344F               	retlw	79	;'O'
   609  08DC  3452               	retlw	82	;'R'
   610  08DD  3420               	retlw	32	;' '
   611  08DE  3421               	retlw	33	;'!'
   612  08DF  3421               	retlw	33	;'!'
   613  08E0  3400               	retlw	0
   614  08E1                     STR_1:	
   615  08E1  343C               	retlw	60	;'<'
   616  08E2  3420               	retlw	32	;' '
   617  08E3  3452               	retlw	82	;'R'
   618  08E4  3465               	retlw	101	;'e'
   619  08E5  3474               	retlw	116	;'t'
   620  08E6  3475               	retlw	117	;'u'
   621  08E7  3472               	retlw	114	;'r'
   622  08E8  346E               	retlw	110	;'n'
   623  08E9  3400               	retlw	0
   624  08EA                     STR_30:	
   625  08EA  3452               	retlw	82	;'R'
   626  08EB  3465               	retlw	101	;'e'
   627  08EC  3473               	retlw	115	;'s'
   628  08ED  3465               	retlw	101	;'e'
   629  08EE  3474               	retlw	116	;'t'
   630  08EF  3420               	retlw	32	;' '
   631  08F0  343F               	retlw	63	;'?'
   632  08F1  3400               	retlw	0
   633  08F2                     STR_15:	
   634  08F2  3456               	retlw	86	;'V'
   635  08F3  3465               	retlw	101	;'e'
   636  08F4  3472               	retlw	114	;'r'
   637  08F5  3473               	retlw	115	;'s'
   638  08F6  3469               	retlw	105	;'i'
   639  08F7  346F               	retlw	111	;'o'
   640  08F8  346E               	retlw	110	;'n'
   641  08F9  3400               	retlw	0
   642  08FA                     STR_20:	
   643  08FA  3423               	retlw	35	;'#'
   644  08FB  344D               	retlw	77	;'M'
   645  08FC  3475               	retlw	117	;'u'
   646  08FD  3474               	retlw	116	;'t'
   647  08FE  3465               	retlw	101	;'e'
   648  08FF  3423               	retlw	35	;'#'
   649  0900  3400               	retlw	0
   650  0901                     STR_28:	
   651  0901  344C               	retlw	76	;'L'
   652  0902  346F               	retlw	111	;'o'
   653  0903  3461               	retlw	97	;'a'
   654  0904  3464               	retlw	100	;'d'
   655  0905  3420               	retlw	32	;' '
   656  0906  343F               	retlw	63	;'?'
   657  0907  3400               	retlw	0
   658  0908                     STR_29:	
   659  0908  3453               	retlw	83	;'S'
   660  0909  3461               	retlw	97	;'a'
   661  090A  3476               	retlw	118	;'v'
   662  090B  3465               	retlw	101	;'e'
   663  090C  3420               	retlw	32	;' '
   664  090D  343F               	retlw	63	;'?'
   665  090E  3400               	retlw	0
   666  090F                     STR_33:	
   667  090F  344C               	retlw	76	;'L'
   668  0910  346F               	retlw	111	;'o'
   669  0911  3461               	retlw	97	;'a'
   670  0912  3464               	retlw	100	;'d'
   671  0913  3465               	retlw	101	;'e'
   672  0914  3464               	retlw	100	;'d'
   673  0915  3400               	retlw	0
   674  0916                     STR_22:	
   675  0916  3443               	retlw	67	;'C'
   676  0917  346F               	retlw	111	;'o'
   677  0918  346E               	retlw	110	;'n'
   678  0919  3466               	retlw	102	;'f'
   679  091A  3469               	retlw	105	;'i'
   680  091B  3467               	retlw	103	;'g'
   681  091C  3400               	retlw	0
   682  091D                     STR_12:	
   683  091D  3454               	retlw	84	;'T'
   684  091E  346F               	retlw	111	;'o'
   685  091F  346E               	retlw	110	;'n'
   686  0920  3465               	retlw	101	;'e'
   687  0921  3430               	retlw	48	;'0'
   688  0922  3400               	retlw	0
   689  0923                     STR_13:	
   690  0923  3454               	retlw	84	;'T'
   691  0924  346F               	retlw	111	;'o'
   692  0925  346E               	retlw	110	;'n'
   693  0926  3465               	retlw	101	;'e'
   694  0927  3431               	retlw	49	;'1'
   695  0928  3400               	retlw	0
   696  0929                     STR_14:	
   697  0929  3454               	retlw	84	;'T'
   698  092A  346F               	retlw	111	;'o'
   699  092B  346E               	retlw	110	;'n'
   700  092C  3465               	retlw	101	;'e'
   701  092D  3432               	retlw	50	;'2'
   702  092E  3400               	retlw	0
   703  092F                     STR_34:	
   704  092F  3453               	retlw	83	;'S'
   705  0930  3461               	retlw	97	;'a'
   706  0931  3476               	retlw	118	;'v'
   707  0932  3465               	retlw	101	;'e'
   708  0933  3464               	retlw	100	;'d'
   709  0934  3400               	retlw	0
   710  0935                     STR_21:	
   711  0935  3454               	retlw	84	;'T'
   712  0936  3465               	retlw	101	;'e'
   713  0937  346D               	retlw	109	;'m'
   714  0938  3470               	retlw	112	;'p'
   715  0939  346F               	retlw	111	;'o'
   716  093A  3400               	retlw	0
   717  093B                     STR_10:	
   718  093B  3452               	retlw	82	;'R'
   719  093C  3465               	retlw	101	;'e'
   720  093D  3473               	retlw	115	;'s'
   721  093E  3465               	retlw	101	;'e'
   722  093F  3474               	retlw	116	;'t'
   723  0940  3400               	retlw	0
   724  0941                     STR_7:	
   725  0941  344C               	retlw	76	;'L'
   726  0942  346F               	retlw	111	;'o'
   727  0943  3461               	retlw	97	;'a'
   728  0944  3464               	retlw	100	;'d'
   729  0945  3400               	retlw	0
   730  0946                     STR_8:	
   731  0946  3453               	retlw	83	;'S'
   732  0947  3461               	retlw	97	;'a'
   733  0948  3476               	retlw	118	;'v'
   734  0949  3465               	retlw	101	;'e'
   735  094A  3400               	retlw	0
   736  094B                     STR_9:	
   737  094B  3449               	retlw	73	;'I'
   738  094C  346E               	retlw	110	;'n'
   739  094D  3466               	retlw	102	;'f'
   740  094E  346F               	retlw	111	;'o'
   741  094F  3400               	retlw	0
   742  0950                     STR_31:	
   743  0950  344E               	retlw	78	;'N'
   744  0951  346F               	retlw	111	;'o'
   745  0952  3420               	retlw	32	;' '
   746  0953  3400               	retlw	0
   747  0954                     STR_32:	
   748  0954  3459               	retlw	89	;'Y'
   749  0955  3465               	retlw	101	;'e'
   750  0956  3473               	retlw	115	;'s'
   751  0957  3400               	retlw	0
   752  08BF                     
   753                           ; #config settings
   754  0000                     
   755                           	psect	cinit
   756  00B4                     start_initialization:	
   757  00B4                     __initialization:	
   758                           
   759                           ; Clear objects allocated to COMMON
   760  00B4  01F7               	clrf	__pbssCOMMON& (0+127)
   761  00B5  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   762  00B6  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   763                           
   764                           ; Clear objects allocated to BANK0
   765  00B7  305A               	movlw	low __pbssBANK0
   766  00B8  0084               	movwf	4
   767  00B9  3000               	movlw	high __pbssBANK0
   768  00BA  0085               	movwf	5
   769  00BB  3015               	movlw	21
   770  00BC  318D  25AF  3180   	fcall	clear_ram0
   771                           
   772                           ; Initialize objects allocated to BANK0
   773  00BF  3010               	movlw	low __pidataBANK0
   774  00C0  0084               	movwf	4
   775  00C1  308E               	movlw	(high __pidataBANK0)| (0+128)
   776  00C2  0085               	movwf	5
   777  00C3  3043               	movlw	low __pdataBANK0
   778  00C4  0086               	movwf	6
   779  00C5  3000               	movlw	high __pdataBANK0
   780  00C6  0087               	movwf	7
   781  00C7  3017               	movlw	23
   782  00C8  318D  25A9  3180   	fcall	init_ram
   783                           
   784                           ; Initialize objects allocated to BANK1
   785  00CB  30C1               	movlw	low __pidataBANK1
   786  00CC  0084               	movwf	4
   787  00CD  308E               	movlw	(high __pidataBANK1)| (0+128)
   788  00CE  0085               	movwf	5
   789  00CF  30A0               	movlw	low __pdataBANK1
   790  00D0  0086               	movwf	6
   791  00D1  3000               	movlw	high __pdataBANK1
   792  00D2  0087               	movwf	7
   793  00D3  304A               	movlw	74
   794  00D4  318D  25A9         	fcall	init_ram
   795  00D6                     end_of_initialization:	
   796                           ;End of C runtime variable initialization code
   797                           
   798  00D6                     __end_of__initialization:	
   799  00D6  0020               	movlb	0
   800  00D7  3180  28D9         	ljmp	_main	;jump to C main() function
   801                           
   802                           	psect	bssCOMMON
   803  0077                     __pbssCOMMON:	
   804  0077                     isr@eventPrescaler:	
   805  0077                     	ds	2
   806  0079                     isr@tmr3:	
   807  0079                     	ds	1
   808                           
   809                           	psect	bssBANK0
   810  005A                     __pbssBANK0:	
   811  005A                     _keyCount:	
   812  005A                     	ds	4
   813  005E                     _tempoCounter:	
   814  005E                     	ds	3
   815  0061                     _valueLimit:	
   816  0061                     	ds	2
   817  0063                     _beatCounter:	
   818  0063                     	ds	1
   819  0064                     _currentMenuStatePtr:	
   820  0064                     	ds	1
   821  0065                     _currentValuePtr:	
   822  0065                     	ds	1
   823  0066                     _duration:	
   824  0066                     	ds	1
   825  0067                     _inputEvent:	
   826  0067                     	ds	1
   827  0068                     _isMute:	
   828  0068                     	ds	1
   829  0069                     _keyBeepCounter_:	
   830  0069                     	ds	1
   831  006A                     _machineState_:	
   832  006A                     	ds	1
   833  006B                     _outputEvent:	
   834  006B                     	ds	1
   835  006C                     _portAState_:	
   836  006C                     	ds	1
   837  006D                     _stateReturnCounter:	
   838  006D                     	ds	1
   839  006E                     main@prevPortAState:	
   840  006E                     	ds	1
   841                           
   842                           	psect	dataBANK0
   843  0043                     __pdataBANK0:	
   844  0043                     _config:	
   845  0043                     	ds	11
   846  004E                     _menuStateConfirm:	
   847  004E                     	ds	4
   848  0052                     _menuStateInformation:	
   849  0052                     	ds	4
   850  0056                     _menuStateTone:	
   851  0056                     	ds	4
   852                           
   853                           	psect	dataBANK1
   854  00A0                     __pdataBANK1:	
   855  00A0                     _MESSAGE_INFORMATION:	
   856  00A0                     	ds	8
   857  00A8                     main@F3067:	
   858  00A8                     	ds	6
   859  00AE                     _informationValueBuffer:	
   860  00AE                     	ds	28
   861  00CA                     _MESSAGE_MENU_ITEM_MAIN:	
   862  00CA                     	ds	20
   863  00DE                     _MESSAGE_MENU_ITEM_TONE:	
   864  00DE                     	ds	8
   865  00E6                     _menuStateMain:	
   866  00E6                     	ds	4
   867                           
   868                           	psect	clrtext
   869  0DAF                     clear_ram0:	
   870                           ;	Called with FSR0 containing the base address, and
   871                           ;	WREG with the size to clear
   872                           
   873  0DAF  0064               	clrwdt	;clear the watchdog before getting into this loop
   874  0DB0                     clrloop0:	
   875  0DB0  0180               	clrf	0	;clear RAM location pointed to by FSR
   876  0DB1  3101               	addfsr 0,1
   877  0DB2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   878  0DB3  2DB0               	goto	clrloop0	;have we reached the end yet?
   879  0DB4  3400               	retlw	0	;all done for this memory range, return
   880                           
   881                           	psect	inittext
   882  0DA9                     init_ram:	
   883  0DA9  00FE               	movwf	126
   884  0DAA                     initloop:	
   885  0DAA  0012               	moviw fsr0++
   886  0DAB  001E               	movwi fsr1++
   887  0DAC  0BFE               	decfsz	126,f
   888  0DAD  2DAA               	goto	initloop
   889  0DAE  3400               	retlw	0
   890                           
   891                           	psect	cstackCOMMON
   892  0070                     __pcstackCOMMON:	
   893  0070                     ?_initialize:	
   894  0070                     ?__parallel_lcd_Initialize:	
   895                           ; 0 bytes @ 0x0
   896                           
   897  0070                     ?__parallel_lcd_ClearRow:	
   898                           ; 0 bytes @ 0x0
   899                           
   900  0070                     ?_main:	
   901                           ; 0 bytes @ 0x0
   902                           
   903  0070                     ?_isr:	
   904                           ; 0 bytes @ 0x0
   905                           
   906  0070                     ??_isr:	
   907                           ; 0 bytes @ 0x0
   908                           
   909  0070                     ?__configuration_Save:	
   910                           ; 0 bytes @ 0x0
   911                           
   912  0070                     ?__configuration_Load:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?__configuration_GetRomOffset:	
   916                           ; 1 bytes @ 0x0
   917                           
   918                           
   919                           ; 1 bytes @ 0x0
   920  0070                     	ds	4
   921  0074                     ?__private_parallel_lcd_WriteByte:	
   922  0074                     ?__configuration_WriteByte:	
   923                           ; 0 bytes @ 0x4
   924                           
   925  0074                     ??_initialize:	
   926                           ; 0 bytes @ 0x4
   927                           
   928  0074                     ?__configuration_ReadByte:	
   929                           ; 0 bytes @ 0x4
   930                           
   931  0074                     ?___bmul:	
   932                           ; 1 bytes @ 0x4
   933                           
   934  0074                     __private_parallel_lcd_WriteByte@r:	
   935                           ; 1 bytes @ 0x4
   936                           
   937  0074                     __configuration_WriteByte@data:	
   938                           ; 1 bytes @ 0x4
   939                           
   940  0074                     __configuration_ReadByte@memorySelect:	
   941                           ; 1 bytes @ 0x4
   942                           
   943  0074                     ___bmul@multiplicand:	
   944                           ; 1 bytes @ 0x4
   945                           
   946                           
   947                           ; 1 bytes @ 0x4
   948  0074                     	ds	1
   949  0075                     ??__private_parallel_lcd_WriteByte:	
   950  0075                     ??__configuration_ReadByte:	
   951                           ; 0 bytes @ 0x5
   952                           
   953  0075                     ??__configuration_WriteByte:	
   954                           ; 0 bytes @ 0x5
   955                           
   956  0075                     ??___bmul:	
   957                           ; 0 bytes @ 0x5
   958                           
   959  0075                     __private_parallel_lcd_WriteByte@data:	
   960                           ; 0 bytes @ 0x5
   961                           
   962  0075                     __configuration_WriteByte@address:	
   963                           ; 1 bytes @ 0x5
   964                           
   965  0075                     __configuration_ReadByte@address:	
   966                           ; 1 bytes @ 0x5
   967                           
   968                           
   969                           ; 1 bytes @ 0x5
   970  0075                     	ds	1
   971  0076                     ??__parallel_lcd_Initialize:	
   972  0076                     ?__parallel_lcd_WriteCharacter:	
   973                           ; 0 bytes @ 0x6
   974                           
   975  0076                     ??__parallel_lcd_WriteString:	
   976                           ; 0 bytes @ 0x6
   977                           
   978  0076                     ??__parallel_lcd_WriteStringClearing:	
   979                           ; 0 bytes @ 0x6
   980                           
   981  0076                     ??__parallel_lcd_ClearRow:	
   982                           ; 0 bytes @ 0x6
   983                           
   984  0076                     ??__parallel_lcd_SetCgram:	
   985                           ; 0 bytes @ 0x6
   986                           
   987  0076                     ??__configuration_GetRomOffset:	
   988                           ; 0 bytes @ 0x6
   989                           
   990  0076                     __parallel_lcd_WriteCharacter@character:	
   991                           ; 0 bytes @ 0x6
   992                           
   993                           
   994                           ; 1 bytes @ 0x6
   995  0076                     	ds	1
   996  0077                     ??__parallel_lcd_WriteCharacter:	
   997                           
   998                           	psect	cstackBANK0
   999  0020                     __pcstackBANK0:	
  1000                           ; 0 bytes @ 0x7
  1001                           
  1002  0020                     ?__parallel_lcd_WriteStringClearing:	
  1003  0020                     ?__parallel_lcd_SetCgram:	
  1004                           ; 0 bytes @ 0x0
  1005                           
  1006  0020                     ??__configuration_Save:	
  1007                           ; 0 bytes @ 0x0
  1008                           
  1009  0020                     ??__configuration_Load:	
  1010                           ; 0 bytes @ 0x0
  1011                           
  1012  0020                     __parallel_lcd_WriteCharacter@position:	
  1013                           ; 0 bytes @ 0x0
  1014                           
  1015  0020                     __parallel_lcd_ClearRow@rowSelect:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0020                     ___bmul@product:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0020                     __parallel_lcd_WriteStringClearing@stringPtr:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0020                     __parallel_lcd_SetCgram@bitmap:	
  1025                           ; 2 bytes @ 0x0
  1026                           
  1027                           
  1028                           ; 2 bytes @ 0x0
  1029  0020                     	ds	1
  1030  0021                     __parallel_lcd_ClearRow@i:	
  1031  0021                     ___bmul@multiplier:	
  1032                           ; 1 bytes @ 0x1
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0x1
  1036  0021                     	ds	1
  1037  0022                     ?__parallel_lcd_WriteString:	
  1038  0022                     __parallel_lcd_WriteStringClearing@position:	
  1039                           ; 0 bytes @ 0x2
  1040                           
  1041  0022                     __parallel_lcd_SetCgram@charCode:	
  1042                           ; 1 bytes @ 0x2
  1043                           
  1044  0022                     __configuration_Save@returnCode:	
  1045                           ; 1 bytes @ 0x2
  1046                           
  1047  0022                     __configuration_Load@ptrConfig:	
  1048                           ; 1 bytes @ 0x2
  1049                           
  1050  0022                     __parallel_lcd_WriteString@stringPtr:	
  1051                           ; 1 bytes @ 0x2
  1052                           
  1053                           
  1054                           ; 2 bytes @ 0x2
  1055  0022                     	ds	1
  1056  0023                     __parallel_lcd_WriteStringClearing@i:	
  1057  0023                     __parallel_lcd_SetCgram@i:	
  1058                           ; 1 bytes @ 0x3
  1059                           
  1060  0023                     __configuration_Save@ptrConfig:	
  1061                           ; 1 bytes @ 0x3
  1062                           
  1063  0023                     __configuration_Load@romOffset:	
  1064                           ; 1 bytes @ 0x3
  1065                           
  1066                           
  1067                           ; 1 bytes @ 0x3
  1068  0023                     	ds	1
  1069  0024                     __parallel_lcd_WriteString@position:	
  1070  0024                     __configuration_Save@romOffset:	
  1071                           ; 1 bytes @ 0x4
  1072                           
  1073  0024                     __configuration_Load@config:	
  1074                           ; 1 bytes @ 0x4
  1075                           
  1076                           
  1077                           ; 1 bytes @ 0x4
  1078  0024                     	ds	1
  1079  0025                     __configuration_Save@i:	
  1080  0025                     __configuration_Load@i:	
  1081                           ; 1 bytes @ 0x5
  1082                           
  1083                           
  1084                           ; 1 bytes @ 0x5
  1085  0025                     	ds	1
  1086  0026                     __configuration_Save@config:	
  1087                           
  1088                           ; 1 bytes @ 0x6
  1089  0026                     	ds	1
  1090  0027                     ??_main:	
  1091                           
  1092                           ; 0 bytes @ 0x7
  1093  0027                     	ds	4
  1094  002B                     main@valueString:	
  1095                           
  1096                           ; 6 bytes @ 0xB
  1097  002B                     	ds	6
  1098  0031                     _main$1165:	
  1099                           
  1100                           ; 2 bytes @ 0x11
  1101  0031                     	ds	2
  1102  0033                     _main$1166:	
  1103                           
  1104                           ; 2 bytes @ 0x13
  1105  0033                     	ds	2
  1106  0035                     _main$1167:	
  1107                           
  1108                           ; 2 bytes @ 0x15
  1109  0035                     	ds	2
  1110  0037                     _main$1168:	
  1111                           
  1112                           ; 2 bytes @ 0x17
  1113  0037                     	ds	2
  1114  0039                     main@isNonZero:	
  1115                           
  1116                           ; 1 bytes @ 0x19
  1117  0039                     	ds	1
  1118  003A                     main@tmpValue:	
  1119                           
  1120                           ; 2 bytes @ 0x1A
  1121  003A                     	ds	2
  1122  003C                     main@romOffset:	
  1123                           
  1124                           ; 1 bytes @ 0x1C
  1125  003C                     	ds	1
  1126  003D                     main@compareUnit:	
  1127                           
  1128                           ; 1 bytes @ 0x1D
  1129  003D                     	ds	1
  1130  003E                     main@keyPressed:	
  1131                           
  1132                           ; 1 bytes @ 0x1E
  1133  003E                     	ds	1
  1134  003F                     main@phase:	
  1135                           
  1136                           ; 1 bytes @ 0x1F
  1137  003F                     	ds	1
  1138  0040                     main@returnCode:	
  1139                           
  1140                           ; 1 bytes @ 0x20
  1141  0040                     	ds	1
  1142  0041                     main@userId:	
  1143                           
  1144                           ; 1 bytes @ 0x21
  1145  0041                     	ds	1
  1146  0042                     main@i:	
  1147                           
  1148                           ; 1 bytes @ 0x22
  1149  0042                     	ds	1
  1150                           
  1151                           	psect	maintext
  1152  00D9                     __pmaintext:	
  1153 ;;
  1154 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1155 ;;
  1156 ;; *************** function _main *****************
  1157 ;; Defined at:
  1158 ;;		line 208 in file "src/main.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;		None
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  compareUnit     1   29[BANK0 ] unsigned char 
  1163 ;;  i               1   34[BANK0 ] unsigned char 
  1164 ;;  userId          1   33[BANK0 ] unsigned char 
  1165 ;;  valueString     6   11[BANK0 ] unsigned char [6]
  1166 ;;  tmpValue        2   26[BANK0 ] unsigned int 
  1167 ;;  isNonZero       1   25[BANK0 ] unsigned char 
  1168 ;;  returnCode      1   32[BANK0 ] enum E2826
  1169 ;;  romOffset       1   28[BANK0 ] unsigned char 
  1170 ;;  keyPressed      1   30[BANK0 ] struct .
  1171 ;;  phase           1   31[BANK0 ] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;		None               void
  1174 ;; Registers used:
  1175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : B1F/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1181 ;;      Params:         0       0       0       0       0       0
  1182 ;;      Locals:         0      24       0       0       0       0
  1183 ;;      Temps:          0       4       0       0       0       0
  1184 ;;      Totals:         0      28       0       0       0       0
  1185 ;;Total ram usage:       28 bytes
  1186 ;; Hardware stack levels required when called:    3
  1187 ;; This function calls:
  1188 ;;		___bmul
  1189 ;;		__configuration_GetRomOffset
  1190 ;;		__configuration_Load
  1191 ;;		__configuration_ReadByte
  1192 ;;		__configuration_Save
  1193 ;;		__parallel_lcd_ClearRow
  1194 ;;		__parallel_lcd_Initialize
  1195 ;;		__parallel_lcd_SetCgram
  1196 ;;		__parallel_lcd_WriteCharacter
  1197 ;;		__parallel_lcd_WriteString
  1198 ;;		__parallel_lcd_WriteStringClearing
  1199 ;;		_initialize
  1200 ;; This function is called by:
  1201 ;;		Startup code after reset
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           
  1206                           ;psect for function _main
  1207  00D9                     _main:	
  1208                           
  1209                           ;main.c: 211: initialize( ) ;
  1210                           
  1211                           ;incstack = 0
  1212                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1213  00D9  318F  270B  3180   	fcall	_initialize
  1214                           
  1215                           ;main.c: 214: if( ( (~PORTA&0xE0) & 0xE0 ) == 0xC0 )
  1216  00DC  0020               	movlb	0	; select bank0
  1217  00DD  090C               	comf	12,w	;volatile
  1218  00DE  00A7               	movwf	??_main
  1219  00DF  30E0               	movlw	224
  1220  00E0  0527               	andwf	??_main,w
  1221  00E1  3AC0               	xorlw	192
  1222  00E2  1D03               	skipz
  1223  00E3  28E9               	goto	l3280
  1224                           
  1225                           ;main.c: 215: machineState_ = STATE_INITIALIZE ;
  1226  00E4  300F               	movlw	15
  1227  00E5  00A7               	movwf	??_main
  1228  00E6  0827               	movf	??_main,w
  1229  00E7  00EA               	movwf	_machineState_
  1230  00E8  28EA               	goto	l3282
  1231  00E9                     l3280:	
  1232                           
  1233                           ;main.c: 216: else
  1234                           ;main.c: 217: machineState_ = STATE_BOOT ;
  1235  00E9  01EA               	clrf	_machineState_
  1236  00EA                     l3282:	
  1237                           
  1238                           ;main.c: 219: outputEvent.accessEeprom = 1 ;
  1239  00EA  17EB               	bsf	_outputEvent,7
  1240                           
  1241                           ;main.c: 222: PR2 = 124 ;
  1242  00EB  307C               	movlw	124
  1243  00EC  009B               	movwf	27	;volatile
  1244                           
  1245                           ;main.c: 223: {CCPR4L=(PR2>>1);} ;
  1246  00ED  361B               	lsrf	27,w	;volatile
  1247  00EE  0026               	movlb	6	; select bank6
  1248  00EF  0098               	movwf	24	;volatile
  1249                           
  1250                           ;main.c: 226: T4CONbits.TMR4ON = 1 ;
  1251  00F0  0028               	movlb	8	; select bank8
  1252  00F1  1517               	bsf	23,2	;volatile
  1253                           
  1254                           ;main.c: 229: T1CONbits.TMR1ON = 1 ;
  1255  00F2  0020               	movlb	0	; select bank0
  1256  00F3  1418               	bsf	24,0	;volatile
  1257                           
  1258                           ;main.c: 232: for( uint08 phase = 0 ; phase < 0xE ; phase++ ) {
  1259  00F4  01BF               	clrf	main@phase
  1260  00F5  300E               	movlw	14
  1261  00F6  023F               	subwf	main@phase,w
  1262  00F7  1803               	btfsc	3,0
  1263  00F8  29B0               	goto	l238
  1264  00F9                     l237:	
  1265  00F9  0064               	clrwdt	;# 
  1266                           
  1267                           ;main.c: 236: TMR1 = 0x0000 ;
  1268  00FA  0020               	movlb	0	; select bank0
  1269  00FB  0196               	clrf	22	;volatile
  1270  00FC  0197               	clrf	23	;volatile
  1271                           
  1272                           ;main.c: 238: switch( phase ) {
  1273  00FD  298C               	goto	l3326
  1274  00FE                     l241:	
  1275                           ;main.c: 239: case 0x0:
  1276                           
  1277                           
  1278                           ;main.c: 240: case 0x2:
  1279                           ;main.c: 242: T2CONbits.TMR2ON = 1 ;
  1280  00FE  151C               	bsf	28,2	;volatile
  1281                           
  1282                           ;main.c: 243: break ;
  1283  00FF  29A4               	goto	l248
  1284  0100                     l244:	
  1285                           ;main.c: 245: case 0x1:
  1286                           
  1287                           
  1288                           ;main.c: 246: case 0xC:
  1289                           ;main.c: 248: T2CONbits.TMR2ON = 0 ;
  1290  0100  111C               	bcf	28,2	;volatile
  1291                           
  1292                           ;main.c: 249: break ;
  1293  0101  29A4               	goto	l248
  1294  0102                     l3300:	
  1295                           ;main.c: 251: case 0x3:
  1296                           
  1297                           
  1298                           ;main.c: 253: {
  1299                           ;main.c: 254: uint08 userId ;
  1300                           ;main.c: 255: userId = _configuration_ReadByte( 0 , MEMORY_SELECT_CONFIGURATION ) ;
  1301  0102  01F4               	clrf	__configuration_ReadByte@memorySelect
  1302  0103  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1303  0104  3000               	movlw	0
  1304  0105  318D  25D4  3180   	fcall	__configuration_ReadByte
  1305  0108  0020               	movlb	0	; select bank0
  1306  0109  00A7               	movwf	??_main
  1307  010A  0827               	movf	??_main,w
  1308  010B  00C1               	movwf	main@userId
  1309                           
  1310                           ;main.c: 256: informationValueBuffer[ INFORMATION_ITEM_VERSION ][1] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1311  010C  0841               	movf	main@userId,w
  1312  010D  00A7               	movwf	??_main
  1313  010E  3004               	movlw	4
  1314  010F                     u2555:	
  1315  010F  36A7               	lsrf	??_main,f
  1316  0110  0B89               	decfsz	9,f
  1317  0111  290F               	goto	u2555
  1318  0112  0827               	movf	??_main,w
  1319  0113  3830               	iorlw	48
  1320  0114  00A8               	movwf	??_main+1
  1321  0115  0828               	movf	??_main+1,w
  1322  0116  0021               	movlb	1	; select bank1
  1323  0117  00AF               	movwf	(_informationValueBuffer^(0+128)+1)
  1324                           
  1325                           ;main.c: 257: informationValueBuffer[ INFORMATION_ITEM_VERSION ][2] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1326  0118  0020               	movlb	0	; select bank0
  1327  0119  0841               	movf	main@userId,w
  1328  011A  390F               	andlw	15
  1329  011B  3830               	iorlw	48
  1330  011C  00A7               	movwf	??_main
  1331  011D  0827               	movf	??_main,w
  1332  011E  0021               	movlb	1	; select bank1
  1333  011F  00B0               	movwf	(_informationValueBuffer^(0+128)+2)
  1334                           
  1335                           ;main.c: 258: userId = _configuration_ReadByte( 1 , MEMORY_SELECT_CONFIGURATION ) ;
  1336  0120  01F4               	clrf	__configuration_ReadByte@memorySelect
  1337  0121  0AF4               	incf	__configuration_ReadByte@memorySelect,f
  1338  0122  3001               	movlw	1
  1339  0123  318D  25D4  3180   	fcall	__configuration_ReadByte
  1340  0126  0020               	movlb	0	; select bank0
  1341  0127  00A7               	movwf	??_main
  1342  0128  0827               	movf	??_main,w
  1343  0129  00C1               	movwf	main@userId
  1344                           
  1345                           ;main.c: 259: informationValueBuffer[ INFORMATION_ITEM_VERSION ][4] = ( ( userId >> 4 ) 
      +                          | '0' ) ;
  1346  012A  0841               	movf	main@userId,w
  1347  012B  00A7               	movwf	??_main
  1348  012C  3004               	movlw	4
  1349  012D                     u2565:	
  1350  012D  36A7               	lsrf	??_main,f
  1351  012E  0B89               	decfsz	9,f
  1352  012F  292D               	goto	u2565
  1353  0130  0827               	movf	??_main,w
  1354  0131  3830               	iorlw	48
  1355  0132  00A8               	movwf	??_main+1
  1356  0133  0828               	movf	??_main+1,w
  1357  0134  0021               	movlb	1	; select bank1
  1358  0135  00B2               	movwf	(_informationValueBuffer^(0+128)+4)
  1359                           
  1360                           ;main.c: 260: informationValueBuffer[ INFORMATION_ITEM_VERSION ][5] = ( ( userId & 0x0F 
      +                          ) | '0' ) ;
  1361  0136  0020               	movlb	0	; select bank0
  1362  0137  0841               	movf	main@userId,w
  1363  0138  390F               	andlw	15
  1364  0139  3830               	iorlw	48
  1365  013A  00A7               	movwf	??_main
  1366  013B  0827               	movf	??_main,w
  1367  013C  0021               	movlb	1	; select bank1
  1368  013D  00B3               	movwf	(_informationValueBuffer^(0+128)+5)
  1369                           
  1370                           ;main.c: 261: }
  1371                           ;main.c: 262: break ;
  1372  013E  29A4               	goto	l248
  1373  013F                     l3310:	
  1374                           ;main.c: 264: case 0x4:
  1375                           
  1376                           
  1377                           ;main.c: 266: _parallel_lcd_Initialize( ) ;
  1378  013F  318D  25E6  3180   	fcall	__parallel_lcd_Initialize
  1379                           
  1380                           ;main.c: 269: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  1381  0142  3000               	movlw	low (_MESSAGE| (0+32768))
  1382  0143  0084               	movwf	4
  1383  0144  3088               	movlw	high (_MESSAGE| (0+32768))
  1384  0145  0085               	movwf	5
  1385  0146  3F00               	moviw [0]fsr0
  1386  0147  0020               	movlb	0	; select bank0
  1387  0148  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1388  0149  3F01               	moviw [1]fsr0
  1389  014A  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1390  014B  3080               	movlw	128
  1391  014C  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  1392                           
  1393                           ;main.c: 270: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ INFOR
      +                          MATION_ITEM_VERSION ] ) ;
  1394  014F  0021               	movlb	1	; select bank1
  1395  0150  0820               	movf	_MESSAGE_INFORMATION^(0+128),w
  1396  0151  0020               	movlb	0	; select bank0
  1397  0152  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1398  0153  0021               	movlb	1	; select bank1
  1399  0154  0821               	movf	(_MESSAGE_INFORMATION+1)^(0+128),w
  1400  0155  0020               	movlb	0	; select bank0
  1401  0156  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1402  0157  30C0               	movlw	192
  1403  0158  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  1404                           
  1405                           ;main.c: 271: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ INFORMATI
      +                          ON_ITEM_VERSION ] ) ;
  1406  015B  30AE               	movlw	low _informationValueBuffer
  1407  015C  0020               	movlb	0	; select bank0
  1408  015D  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  1409  015E  3000               	movlw	high _informationValueBuffer
  1410  015F  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  1411  0160  30CA               	movlw	202
  1412  0161  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  1413  0164                     l3318:	
  1414                           ;main.c: 273: case 0x6:
  1415                           
  1416                           
  1417                           ;main.c: 275: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_UP , & BITMAP.CURSOR_UP ) ;
  1418  0164  3041               	movlw	low ((_BITMAP| (0+32768)+8))
  1419  0165  0020               	movlb	0	; select bank0
  1420  0166  00A0               	movwf	__parallel_lcd_SetCgram@bitmap
  1421  0167  3088               	movlw	high ((_BITMAP| (0+32768)+8))
  1422  0168  00A1               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1423  0169  3035               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  1424  016A  0084               	movwf	4
  1425  016B  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  1426  016C  0085               	movwf	5
  1427  016D  0800               	movf	0,w	;code access
  1428  016E  318E  2661  3180   	fcall	__parallel_lcd_SetCgram
  1429                           
  1430                           ;main.c: 276: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_DOWN , & BITMAP.CURSOR_DOWN ) ;
  1431  0171  3049               	movlw	low ((_BITMAP| (0+32768)+16))
  1432  0172  0020               	movlb	0	; select bank0
  1433  0173  00A0               	movwf	__parallel_lcd_SetCgram@bitmap
  1434  0174  3088               	movlw	high ((_BITMAP| (0+32768)+16))
  1435  0175  00A1               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1436  0176  3036               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  1437  0177  0084               	movwf	4
  1438  0178  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  1439  0179  0085               	movwf	5
  1440  017A  0800               	movf	0,w	;code access
  1441  017B  318E  2661  3180   	fcall	__parallel_lcd_SetCgram
  1442                           
  1443                           ;main.c: 277: _parallel_lcd_SetCgram( CHAR_CODE.CURSOR_RIGHT , & BITMAP.CURSOR_RIGHT ) ;
  1444  017E  3039               	movlw	low (_BITMAP| (0+32768))
  1445  017F  0020               	movlb	0	; select bank0
  1446  0180  00A0               	movwf	__parallel_lcd_SetCgram@bitmap
  1447  0181  3088               	movlw	high (_BITMAP| (0+32768))
  1448  0182  00A1               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1449  0183  3034               	movlw	low (_CHAR_CODE| (0+32768))
  1450  0184  0084               	movwf	4
  1451  0185  3088               	movlw	high (_CHAR_CODE| (0+32768))
  1452  0186  0085               	movwf	5
  1453  0187  0800               	movf	0,w	;code access
  1454  0188  318E  2661  3180   	fcall	__parallel_lcd_SetCgram
  1455                           
  1456                           ;main.c: 280: }
  1457                           
  1458                           ;main.c: 278: break ;
  1459  018B  29A4               	goto	l248
  1460  018C                     l3326:	
  1461  018C  0020               	movlb	0	; select bank0
  1462  018D  083F               	movf	main@phase,w
  1463                           
  1464                           ; Switch size 1, requested type "space"
  1465                           ; Number of cases is 7, Range of values is 0 to 12
  1466                           ; switch strategies available:
  1467                           ; Name         Instructions Cycles
  1468                           ; simple_byte           22    12 (average)
  1469                           ; direct_byte           32     6 (fixed)
  1470                           ; jumptable            260     6 (fixed)
  1471                           ;	Chosen strategy is simple_byte
  1472  018E  3A00               	xorlw	0	; case 0
  1473  018F  1903               	skipnz
  1474  0190  28FE               	goto	l241
  1475  0191  3A01               	xorlw	1	; case 1
  1476  0192  1903               	skipnz
  1477  0193  2900               	goto	l244
  1478  0194  3A03               	xorlw	3	; case 2
  1479  0195  1903               	skipnz
  1480  0196  28FE               	goto	l241
  1481  0197  3A01               	xorlw	1	; case 3
  1482  0198  1903               	skipnz
  1483  0199  2902               	goto	l3300
  1484  019A  3A07               	xorlw	7	; case 4
  1485  019B  1903               	skipnz
  1486  019C  293F               	goto	l3310
  1487  019D  3A02               	xorlw	2	; case 6
  1488  019E  1903               	skipnz
  1489  019F  2964               	goto	l3318
  1490  01A0  3A0A               	xorlw	10	; case 12
  1491  01A1  1903               	skipnz
  1492  01A2  2900               	goto	l244
  1493  01A3  29A4               	goto	l248
  1494  01A4                     l248:	
  1495                           ;main.c: 282: while( !PIR1bits.TMR1IF ) ;
  1496                           
  1497  01A4  0020               	movlb	0	; select bank0
  1498  01A5  1C11               	btfss	17,0	;volatile
  1499  01A6  29A4               	goto	l248
  1500                           
  1501                           ;main.c: 283: PIR1bits.TMR1IF = 0 ;
  1502  01A7  1011               	bcf	17,0	;volatile
  1503  01A8  3001               	movlw	1
  1504  01A9  00A7               	movwf	??_main
  1505  01AA  0827               	movf	??_main,w
  1506  01AB  07BF               	addwf	main@phase,f
  1507  01AC  300E               	movlw	14
  1508  01AD  023F               	subwf	main@phase,w
  1509  01AE  1C03               	skipc
  1510  01AF  28F9               	goto	l237
  1511  01B0                     l238:	
  1512                           
  1513                           ;main.c: 285: }
  1514                           ;main.c: 289: INTCONbits.PEIE = 1 ;
  1515  01B0  170B               	bsf	11,6	;volatile
  1516                           
  1517                           ;main.c: 290: T6CONbits.TMR6ON = 1 ;
  1518  01B1  0028               	movlb	8	; select bank8
  1519  01B2  151E               	bsf	30,2	;volatile
  1520                           
  1521                           ;main.c: 291: PIE3bits.TMR6IE = 1 ;
  1522  01B3  0021               	movlb	1	; select bank1
  1523  01B4  1593               	bsf	19,3	;volatile
  1524  01B5                     l251:	
  1525                           ;main.c: 294: for( ; ; ) {
  1526                           
  1527  01B5  0064               	clrwdt	;# 
  1528                           
  1529                           ;main.c: 300: static UniPortAState prevPortAState = { 0x00 } ;
  1530                           ;main.c: 301: UniPortAState keyPressed ;
  1531                           ;main.c: 303: keyPressed.all = ( portAState_.all ^ prevPortAState.all ) & portAState_.al
      +                          l ;
  1532  01B6  0020               	movlb	0	; select bank0
  1533  01B7  086C               	movf	_portAState_,w
  1534  01B8  066E               	xorwf	main@prevPortAState,w
  1535  01B9  056C               	andwf	_portAState_,w
  1536  01BA  00A7               	movwf	??_main
  1537  01BB  0827               	movf	??_main,w
  1538  01BC  00BE               	movwf	main@keyPressed
  1539                           
  1540                           ;main.c: 304: prevPortAState.all = portAState_.all ;
  1541  01BD  086C               	movf	_portAState_,w
  1542  01BE  00A7               	movwf	??_main
  1543  01BF  0827               	movf	??_main,w
  1544  01C0  00EE               	movwf	main@prevPortAState
  1545                           
  1546                           ;main.c: 306: if( keyPressed.keyMenu ) {
  1547  01C1  1ABE               	btfsc	main@keyPressed,5
  1548                           
  1549                           ;main.c: 307: inputEvent.keyPressMenu = 1 ;
  1550  01C2  1567               	bsf	_inputEvent,2
  1551                           
  1552                           ;main.c: 308: }
  1553                           ;main.c: 310: if( keyPressed.keyUp ) {
  1554  01C3  1FBE               	btfss	main@keyPressed,7
  1555  01C4  29CA               	goto	l255
  1556                           
  1557                           ;main.c: 311: if( portAState_.keyDown )
  1558  01C5  1F6C               	btfss	_portAState_,6
  1559  01C6  29C9               	goto	l256
  1560                           
  1561                           ;main.c: 312: inputEvent.keyPressUpDown = 1 ;
  1562  01C7  15E7               	bsf	_inputEvent,3
  1563  01C8  29CA               	goto	l255
  1564  01C9                     l256:	
  1565                           
  1566                           ;main.c: 313: else
  1567                           ;main.c: 314: inputEvent.keyPressUp = 1 ;
  1568  01C9  1467               	bsf	_inputEvent,0
  1569  01CA                     l255:	
  1570                           
  1571                           ;main.c: 315: }
  1572                           ;main.c: 317: if( keyPressed.keyDown ) {
  1573  01CA  1F3E               	btfss	main@keyPressed,6
  1574  01CB  29D1               	goto	l258
  1575                           
  1576                           ;main.c: 318: if( portAState_.keyUp )
  1577  01CC  1FEC               	btfss	_portAState_,7
  1578  01CD  29D0               	goto	l259
  1579                           
  1580                           ;main.c: 319: inputEvent.keyPressUpDown = 1 ;
  1581  01CE  15E7               	bsf	_inputEvent,3
  1582  01CF  29D1               	goto	l258
  1583  01D0                     l259:	
  1584                           
  1585                           ;main.c: 320: else
  1586                           ;main.c: 321: inputEvent.keyPressDown = 1 ;
  1587  01D0  14E7               	bsf	_inputEvent,1
  1588  01D1                     l258:	
  1589                           
  1590                           ;main.c: 322: }
  1591                           ;main.c: 324: if( (inputEvent.keyPressHeldUp&&!(inputEvent.keyPressHeldUp=0)) )
  1592  01D1  1E67               	btfss	_inputEvent,4
  1593  01D2  29D5               	goto	l261
  1594  01D3  1267               	bcf	_inputEvent,4
  1595                           
  1596                           ;main.c: 325: inputEvent.keyPressUp = 1 ;
  1597  01D4  1467               	bsf	_inputEvent,0
  1598  01D5                     l261:	
  1599                           
  1600                           ;main.c: 327: if( (inputEvent.keyPressHeldDown&&!(inputEvent.keyPressHeldDown=0)) )
  1601  01D5  1EE7               	btfss	_inputEvent,5
  1602  01D6  29D9               	goto	l3352
  1603  01D7  12E7               	bcf	_inputEvent,5
  1604                           
  1605                           ;main.c: 328: inputEvent.keyPressDown = 1 ;
  1606  01D8  14E7               	bsf	_inputEvent,1
  1607  01D9                     l3352:	
  1608                           
  1609                           ;main.c: 330: if( inputEvent.all ) {
  1610  01D9  0867               	movf	_inputEvent,w
  1611  01DA  1D03               	btfss	3,2
  1612  01DB  29E9               	goto	l3364
  1613  01DC  29F1               	goto	l263
  1614  01DD                     l3356:	
  1615                           ;main.c: 337: default:
  1616                           
  1617                           ;main.c: 333: case STATE_ADJUST_OSCILLATOR_TUNE:
  1618                           ;main.c: 335: break ;
  1619                           
  1620                           ;main.c: 332: case STATE_ADJUST_TONE:
  1621                           
  1622                           ;main.c: 331: switch( machineState_ ) {
  1623                           
  1624                           
  1625                           ;main.c: 338: keyBeepCounter_ = 0x20 ;
  1626  01DD  3020               	movlw	32
  1627  01DE  00A7               	movwf	??_main
  1628  01DF  0827               	movf	??_main,w
  1629  01E0  00E9               	movwf	_keyBeepCounter_
  1630                           
  1631                           ;main.c: 339: PR2 = 124 ;
  1632  01E1  307C               	movlw	124
  1633  01E2  009B               	movwf	27	;volatile
  1634                           
  1635                           ;main.c: 340: {CCPR4L=(PR2>>1);} ;
  1636  01E3  361B               	lsrf	27,w	;volatile
  1637  01E4  0026               	movlb	6	; select bank6
  1638  01E5  0098               	movwf	24	;volatile
  1639                           
  1640                           ;main.c: 341: T2CONbits.TMR2ON = 1 ;
  1641  01E6  0020               	movlb	0	; select bank0
  1642  01E7  151C               	bsf	28,2	;volatile
  1643                           
  1644                           ;main.c: 343: }
  1645                           
  1646                           ;main.c: 342: break ;
  1647  01E8  29F1               	goto	l263
  1648  01E9                     l3364:	
  1649  01E9  086A               	movf	_machineState_,w
  1650                           
  1651                           ; Switch size 1, requested type "space"
  1652                           ; Number of cases is 2, Range of values is 7 to 8
  1653                           ; switch strategies available:
  1654                           ; Name         Instructions Cycles
  1655                           ; simple_byte            7     4 (average)
  1656                           ; direct_byte           13     9 (fixed)
  1657                           ; jumptable            263     9 (fixed)
  1658                           ;	Chosen strategy is simple_byte
  1659  01EA  3A07               	xorlw	7	; case 7
  1660  01EB  1903               	skipnz
  1661  01EC  29F1               	goto	l263
  1662  01ED  3A0F               	xorlw	15	; case 8
  1663  01EE  1903               	skipnz
  1664  01EF  29F1               	goto	l263
  1665  01F0  29DD               	goto	l3356
  1666  01F1                     l263:	
  1667                           
  1668                           ;main.c: 345: }
  1669                           ;main.c: 348: if( (outputEvent.accessEeprom&&!(outputEvent.accessEeprom=0)) ) {
  1670  01F1  1FEB               	btfss	_outputEvent,7
  1671  01F2  2A8A               	goto	l3398
  1672  01F3  13EB               	bcf	_outputEvent,7
  1673                           
  1674                           ;main.c: 350: INTCONbits.GIE=0 ;
  1675  01F4  138B               	bcf	11,7	;volatile
  1676                           
  1677                           ;main.c: 352: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  1678  01F5  01C0               	clrf	main@returnCode
  1679                           
  1680                           ;main.c: 354: switch( machineState_ ) {
  1681  01F6  2A09               	goto	l3376
  1682  01F7                     l271:	
  1683                           ;main.c: 356: case STATE_BOOT:
  1684                           
  1685                           
  1686                           ;main.c: 357: machineState_ = STATE_METRONOME ;
  1687  01F7  01EA               	clrf	_machineState_
  1688  01F8  0AEA               	incf	_machineState_,f
  1689                           
  1690                           ;main.c: 358: outputEvent.changeState = 1 ;
  1691  01F9  146B               	bsf	_outputEvent,0
  1692  01FA                     l3370:	
  1693                           ;main.c: 359: case STATE_LOAD:
  1694                           
  1695                           
  1696                           ;main.c: 360: returnCode = _configuration_Load( &config ) ;
  1697  01FA  3043               	movlw	(low (_config| 0))& (0+255)
  1698  01FB  3187  279B  3180   	fcall	__configuration_Load
  1699  01FE  2A04               	goto	L1
  1700  01FF                     l274:	
  1701                           ;main.c: 363: case STATE_INITIALIZE:
  1702                           
  1703                           ;main.c: 361: break ;
  1704                           
  1705                           
  1706                           ;main.c: 364: outputEvent.changeState = 1 ;
  1707  01FF  146B               	bsf	_outputEvent,0
  1708  0200                     l3372:	
  1709                           ;main.c: 365: case STATE_SAVE:
  1710                           
  1711                           
  1712                           ;main.c: 366: returnCode = _configuration_Save( &config ) ;
  1713  0200  3043               	movlw	(low (_config| 0))& (0+255)
  1714  0201  318F  2772  3180   	fcall	__configuration_Save
  1715  0204                     L1:	
  1716  0204  0020               	movlb	0	; select bank0
  1717  0205  00A7               	movwf	??_main
  1718  0206  0827               	movf	??_main,w
  1719  0207  00C0               	movwf	main@returnCode
  1720                           
  1721                           ;main.c: 369: }
  1722                           
  1723                           ;main.c: 367: break ;
  1724  0208  2A17               	goto	l273
  1725  0209                     l3376:	
  1726  0209  086A               	movf	_machineState_,w
  1727                           
  1728                           ; Switch size 1, requested type "space"
  1729                           ; Number of cases is 4, Range of values is 0 to 15
  1730                           ; switch strategies available:
  1731                           ; Name         Instructions Cycles
  1732                           ; simple_byte           13     7 (average)
  1733                           ; direct_byte           38     6 (fixed)
  1734                           ; jumptable            260     6 (fixed)
  1735                           ;	Chosen strategy is simple_byte
  1736  020A  3A00               	xorlw	0	; case 0
  1737  020B  1903               	skipnz
  1738  020C  29F7               	goto	l271
  1739  020D  3A0B               	xorlw	11	; case 11
  1740  020E  1903               	skipnz
  1741  020F  2A00               	goto	l3372
  1742  0210  3A06               	xorlw	6	; case 13
  1743  0211  1903               	skipnz
  1744  0212  29FA               	goto	l3370
  1745  0213  3A02               	xorlw	2	; case 15
  1746  0214  1903               	skipnz
  1747  0215  29FF               	goto	l274
  1748  0216  2A17               	goto	l273
  1749  0217                     l273:	
  1750                           
  1751                           ;main.c: 370: outputEvent.resetMetronome = 1 ;
  1752  0217  15EB               	bsf	_outputEvent,3
  1753                           
  1754                           ;main.c: 372: uint08 romOffset = _configuration_GetRomOffset( ) ;
  1755  0218  318D  25A4  3180   	fcall	__configuration_GetRomOffset
  1756  021B  0020               	movlb	0	; select bank0
  1757  021C  00A7               	movwf	??_main
  1758  021D  0827               	movf	??_main,w
  1759  021E  00BC               	movwf	main@romOffset
  1760                           
  1761                           ;main.c: 373: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][3] = HEX_TABLE[ romO
      +                          ffset >> 4 ] ;
  1762  021F  083C               	movf	main@romOffset,w
  1763  0220  00A7               	movwf	??_main
  1764  0221  3004               	movlw	4
  1765  0222                     u2685:	
  1766  0222  36A7               	lsrf	??_main,f
  1767  0223  0B89               	decfsz	9,f
  1768  0224  2A22               	goto	u2685
  1769  0225  0827               	movf	??_main,w
  1770  0226  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1771  0227  0084               	movwf	4
  1772  0228  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1773  0229  1803               	skipnc
  1774  022A  3E01               	addlw	1
  1775  022B  0085               	movwf	5
  1776  022C  0800               	movf	0,w	;code access
  1777  022D  00A8               	movwf	??_main+1
  1778  022E  0828               	movf	??_main+1,w
  1779  022F  0021               	movlb	1	; select bank1
  1780  0230  00B8               	movwf	(_informationValueBuffer^(0+128)+10)
  1781                           
  1782                           ;main.c: 374: informationValueBuffer[ INFORMATION_ITEM_ROM_OFFSET ][4] = HEX_TABLE[ romO
      +                          ffset & 0x0F ] ;
  1783  0231  0020               	movlb	0	; select bank0
  1784  0232  083C               	movf	main@romOffset,w
  1785  0233  390F               	andlw	15
  1786  0234  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1787  0235  0084               	movwf	4
  1788  0236  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1789  0237  1803               	skipnc
  1790  0238  3E01               	addlw	1
  1791  0239  0085               	movwf	5
  1792  023A  0800               	movf	0,w	;code access
  1793  023B  00A7               	movwf	??_main
  1794  023C  0827               	movf	??_main,w
  1795  023D  0021               	movlb	1	; select bank1
  1796  023E  00B9               	movwf	(_informationValueBuffer^(0+128)+11)
  1797                           
  1798                           ;main.c: 375: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][3] = HEX_TABLE[ con
      +                          fig.writeCount >> 4 ] ;
  1799  023F  0020               	movlb	0	; select bank0
  1800  0240  0843               	movf	_config,w
  1801  0241  00A7               	movwf	??_main
  1802  0242  3004               	movlw	4
  1803  0243                     u2695:	
  1804  0243  36A7               	lsrf	??_main,f
  1805  0244  0B89               	decfsz	9,f
  1806  0245  2A43               	goto	u2695
  1807  0246  0827               	movf	??_main,w
  1808  0247  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1809  0248  0084               	movwf	4
  1810  0249  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1811  024A  1803               	skipnc
  1812  024B  3E01               	addlw	1
  1813  024C  0085               	movwf	5
  1814  024D  0800               	movf	0,w	;code access
  1815  024E  00A8               	movwf	??_main+1
  1816  024F  0828               	movf	??_main+1,w
  1817  0250  0021               	movlb	1	; select bank1
  1818  0251  00BF               	movwf	(_informationValueBuffer^(0+128)+17)
  1819                           
  1820                           ;main.c: 376: informationValueBuffer[ INFORMATION_ITEM_WRITE_COUNT ][4] = HEX_TABLE[ con
      +                          fig.writeCount & 0x0F ] ;
  1821  0252  0020               	movlb	0	; select bank0
  1822  0253  0843               	movf	_config,w
  1823  0254  390F               	andlw	15
  1824  0255  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1825  0256  0084               	movwf	4
  1826  0257  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1827  0258  1803               	skipnc
  1828  0259  3E01               	addlw	1
  1829  025A  0085               	movwf	5
  1830  025B  0800               	movf	0,w	;code access
  1831  025C  00A7               	movwf	??_main
  1832  025D  0827               	movf	??_main,w
  1833  025E  0021               	movlb	1	; select bank1
  1834  025F  00C0               	movwf	(_informationValueBuffer^(0+128)+18)
  1835                           
  1836                           ;main.c: 377: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][3] = HEX_TABLE[ retu
      +                          rnCode >> 4 ] ;
  1837  0260  0020               	movlb	0	; select bank0
  1838  0261  0840               	movf	main@returnCode,w
  1839  0262  00A7               	movwf	??_main
  1840  0263  3004               	movlw	4
  1841  0264                     u2705:	
  1842  0264  36A7               	lsrf	??_main,f
  1843  0265  0B89               	decfsz	9,f
  1844  0266  2A64               	goto	u2705
  1845  0267  0827               	movf	??_main,w
  1846  0268  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1847  0269  0084               	movwf	4
  1848  026A  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1849  026B  1803               	skipnc
  1850  026C  3E01               	addlw	1
  1851  026D  0085               	movwf	5
  1852  026E  0800               	movf	0,w	;code access
  1853  026F  00A8               	movwf	??_main+1
  1854  0270  0828               	movf	??_main+1,w
  1855  0271  0021               	movlb	1	; select bank1
  1856  0272  00C6               	movwf	(_informationValueBuffer^(0+128)+24)
  1857                           
  1858                           ;main.c: 378: informationValueBuffer[ INFORMATION_ITEM_ERROR_CODE ][4] = HEX_TABLE[ retu
      +                          rnCode & 0x0F ] ;
  1859  0273  0020               	movlb	0	; select bank0
  1860  0274  0840               	movf	main@returnCode,w
  1861  0275  390F               	andlw	15
  1862  0276  3E24               	addlw	low (_HEX_TABLE| (0+32768))
  1863  0277  0084               	movwf	4
  1864  0278  3088               	movlw	high (_HEX_TABLE| (0+32768))
  1865  0279  1803               	skipnc
  1866  027A  3E01               	addlw	1
  1867  027B  0085               	movwf	5
  1868  027C  0800               	movf	0,w	;code access
  1869  027D  00A7               	movwf	??_main
  1870  027E  0827               	movf	??_main,w
  1871  027F  0021               	movlb	1	; select bank1
  1872  0280  00C7               	movwf	(_informationValueBuffer^(0+128)+25)
  1873                           
  1874                           ;main.c: 380: if( returnCode )
  1875  0281  0020               	movlb	0	; select bank0
  1876  0282  0840               	movf	main@returnCode,w
  1877  0283  1903               	btfsc	3,2
  1878  0284  2A89               	goto	l3396
  1879                           
  1880                           ;main.c: 381: machineState_ = STATE_ERROR ;
  1881  0285  3011               	movlw	17
  1882  0286  00A7               	movwf	??_main
  1883  0287  0827               	movf	??_main,w
  1884  0288  00EA               	movwf	_machineState_
  1885  0289                     l3396:	
  1886                           
  1887                           ;main.c: 383: INTCONbits.GIE=1 ;
  1888  0289  178B               	bsf	11,7	;volatile
  1889  028A                     l3398:	
  1890                           
  1891                           ;main.c: 385: }
  1892                           ;main.c: 388: if( (inputEvent.keyPressUpDown&&!(inputEvent.keyPressUpDown=0)) ) {
  1893  028A  1DE7               	btfss	_inputEvent,3
  1894  028B  2A98               	goto	l277
  1895  028C  11E7               	bcf	_inputEvent,3
  1896                           
  1897                           ;main.c: 389: if( machineState_ == STATE_METRONOME ) {
  1898  028D  036A               	decf	_machineState_,w
  1899  028E  1D03               	btfss	3,2
  1900  028F  2A98               	goto	l277
  1901                           
  1902                           ;main.c: 390: {if(isMute){isMute=0;}else{isMute=1;}} ;
  1903  0290  0868               	movf	_isMute,w
  1904  0291  1903               	btfsc	3,2
  1905  0292  2A95               	goto	l279
  1906  0293  01E8               	clrf	_isMute
  1907  0294  2A97               	goto	l280
  1908  0295                     l279:	
  1909  0295  01E8               	clrf	_isMute
  1910  0296  0AE8               	incf	_isMute,f
  1911  0297                     l280:	
  1912                           
  1913                           ;main.c: 391: outputEvent.changeMessage = 1 ;
  1914  0297  14EB               	bsf	_outputEvent,1
  1915  0298                     l277:	
  1916                           
  1917                           ;main.c: 392: }
  1918                           ;main.c: 393: }
  1919                           ;main.c: 396: if( (inputEvent.keyPressMenu&&!(inputEvent.keyPressMenu=0)) ) {
  1920  0298  1D67               	btfss	_inputEvent,2
  1921  0299  2B17               	goto	l281
  1922  029A  1167               	bcf	_inputEvent,2
  1923                           
  1924                           ;main.c: 397: outputEvent.changeState = 1 ;
  1925  029B  146B               	bsf	_outputEvent,0
  1926                           
  1927                           ;main.c: 399: switch( machineState_ ) {
  1928  029C  2B0A               	goto	l3474
  1929  029D                     l285:	
  1930                           ;main.c: 403: case MENU_ITEM_MAIN_RETURN:
  1931                           
  1932                           ;main.c: 402: switch( menuStateMain.select ) {
  1933                           
  1934                           ;main.c: 401: case STATE_MENU_MAIN:
  1935                           
  1936                           
  1937                           ;main.c: 404: machineState_ = STATE_METRONOME ;
  1938  029D  0020               	movlb	0	; select bank0
  1939  029E  01EA               	clrf	_machineState_
  1940  029F  0AEA               	incf	_machineState_,f
  1941                           
  1942                           ;main.c: 405: break ;
  1943  02A0  2B17               	goto	l281
  1944  02A1                     l3410:	
  1945                           ;main.c: 407: case MENU_ITEM_MAIN_BEAT_COUNT:
  1946                           
  1947                           
  1948                           ;main.c: 408: machineState_ = STATE_ADJUST_BEAT_COUNT ;
  1949  02A1  3004               	movlw	4
  1950  02A2  2AFB               	goto	L32
  1951  02A3                     l3412:	
  1952                           ;main.c: 411: case MENU_ITEM_MAIN_TONE_MENU:
  1953                           
  1954                           ;main.c: 409: break ;
  1955                           
  1956                           
  1957                           ;main.c: 412: machineState_ = STATE_MENU_TONE ;
  1958  02A3  3003               	movlw	3
  1959  02A4  0020               	movlb	0	; select bank0
  1960  02A5  00A7               	movwf	??_main
  1961  02A6  0827               	movf	??_main,w
  1962  02A7  00EA               	movwf	_machineState_
  1963                           
  1964                           ;main.c: 413: menuStateTone.select = 0 ;
  1965  02A8  01D6               	clrf	_menuStateTone
  1966                           
  1967                           ;main.c: 414: menuStateTone.cursorPosition = 0 ;
  1968  02A9  01D7               	clrf	_menuStateTone+1
  1969                           
  1970                           ;main.c: 415: break ;
  1971  02AA  2B17               	goto	l281
  1972  02AB                     l3418:	
  1973                           ;main.c: 417: case MENU_ITEM_MAIN_ADJUST_DURATION:
  1974                           
  1975                           
  1976                           ;main.c: 418: machineState_ = STATE_ADJUST_DURATION ;
  1977  02AB  3005               	movlw	5
  1978  02AC  2AFB               	goto	L32
  1979  02AD                     l3420:	
  1980                           ;main.c: 421: case MENU_ITEM_MAIN_PULSE_WIDTH:
  1981                           
  1982                           ;main.c: 419: break ;
  1983                           
  1984                           
  1985                           ;main.c: 422: machineState_ = STATE_ADJUST_PULSE_WIDTH ;
  1986  02AD  3006               	movlw	6
  1987  02AE  2AFB               	goto	L32
  1988  02AF                     l3422:	
  1989                           ;main.c: 425: case MENU_ITEM_MAIN_ADJUST_OSCILLATOR_TUNE:
  1990                           
  1991                           ;main.c: 423: break ;
  1992                           
  1993                           
  1994                           ;main.c: 426: machineState_ = STATE_ADJUST_OSCILLATOR_TUNE ;
  1995  02AF  3008               	movlw	8
  1996  02B0  2AFB               	goto	L32
  1997  02B1                     l3424:	
  1998                           ;main.c: 429: case MENU_ITEM_MAIN_LOAD_CONFIGURATION:
  1999                           
  2000                           ;main.c: 427: break ;
  2001                           
  2002                           
  2003                           ;main.c: 430: machineState_ = STATE_CONFIRM_LOAD ;
  2004  02B1  300C               	movlw	12
  2005  02B2  2AFB               	goto	L32
  2006  02B3                     l3426:	
  2007                           ;main.c: 433: case MENU_ITEM_MAIN_SAVE_CONFIGURATION:
  2008                           
  2009                           ;main.c: 431: break ;
  2010                           
  2011                           
  2012                           ;main.c: 434: machineState_ = STATE_CONFIRM_SAVE ;
  2013  02B3  300A               	movlw	10
  2014  02B4  2AFB               	goto	L32
  2015  02B5                     l3428:	
  2016                           ;main.c: 437: case MENU_ITEM_MAIN_INFORMATION:
  2017                           
  2018                           ;main.c: 435: break ;
  2019                           
  2020                           
  2021                           ;main.c: 438: machineState_ = STATE_INFORMATION ;
  2022  02B5  3009               	movlw	9
  2023  02B6  2AFB               	goto	L32
  2024  02B7                     l3430:	
  2025                           ;main.c: 441: case MENU_ITEM_MAIN_RESET:
  2026                           
  2027                           ;main.c: 439: break ;
  2028                           
  2029                           
  2030                           ;main.c: 442: machineState_ = STATE_CONFIRM_RESET ;
  2031  02B7  300E               	movlw	14
  2032  02B8  2AFB               	goto	L32
  2033  02B9                     l3434:	
  2034                           ;main.c: 445: }
  2035                           
  2036                           ;main.c: 443: break ;
  2037                           
  2038  02B9  0021               	movlb	1	; select bank1
  2039  02BA  0866               	movf	_menuStateMain^(0+128),w
  2040                           
  2041                           ; Switch size 1, requested type "space"
  2042                           ; Number of cases is 10, Range of values is 0 to 9
  2043                           ; switch strategies available:
  2044                           ; Name         Instructions Cycles
  2045                           ; direct_byte           26     6 (fixed)
  2046                           ; simple_byte           31    16 (average)
  2047                           ; jumptable            260     6 (fixed)
  2048                           ;	Chosen strategy is direct_byte
  2049  02BB  0084               	movwf	4
  2050  02BC  300A               	movlw	10
  2051  02BD  0204               	subwf	4,w
  2052  02BE  1803               	skipnc
  2053  02BF  2B17               	goto	l281
  2054  02C0  3189               	movlp	high S3916
  2055  02C1  3504               	lslf	4,w
  2056  02C2  3ED8               	addlw	low S3916
  2057  02C3  0082               	movwf	2
  2058                           
  2059                           ;main.c: 446: break ;
  2060  02C4  2B17               	goto	l281
  2061  02C5                     l3436:	
  2062                           ;main.c: 448: case STATE_MENU_TONE:
  2063                           
  2064                           
  2065                           ;main.c: 449: machineState_ = ( menuStateTone.select == MENU_ITEM_TONE_RETURN ) ? STATE_
      +                          MENU_MAIN : STATE_ADJUST_TONE ;
  2066  02C5  0020               	movlb	0	; select bank0
  2067  02C6  0856               	movf	_menuStateTone,w
  2068  02C7  1903               	btfsc	3,2
  2069  02C8  2ACB               	goto	l3440
  2070  02C9  3007               	movlw	7
  2071  02CA  2ACC               	goto	L10
  2072  02CB                     l3440:	
  2073  02CB  3002               	movlw	2
  2074  02CC                     L10:	
  2075  02CC  00B1               	movwf	_main$1165
  2076  02CD  3000               	movlw	0
  2077  02CE  00B2               	movwf	_main$1165+1
  2078  02CF  0831               	movf	_main$1165,w
  2079  02D0  2B02               	goto	L19
  2080  02D1                     l3442:	
  2081                           ;main.c: 452: case STATE_CONFIRM_LOAD:
  2082                           
  2083                           ;main.c: 450: break ;
  2084                           
  2085                           
  2086                           ;main.c: 453: machineState_ = menuStateConfirm.select ? STATE_LOAD : STATE_MENU_MAIN ;
  2087  02D1  084E               	movf	_menuStateConfirm,w
  2088  02D2  1D03               	btfss	3,2
  2089  02D3  2AD6               	goto	l3446
  2090  02D4  3002               	movlw	2
  2091  02D5  2AD7               	goto	L12
  2092  02D6                     l3446:	
  2093  02D6  300D               	movlw	13
  2094  02D7                     L12:	
  2095  02D7  00B3               	movwf	_main$1166
  2096  02D8  3000               	movlw	0
  2097  02D9  00B4               	movwf	_main$1166+1
  2098  02DA  0833               	movf	_main$1166,w
  2099  02DB  2B02               	goto	L19
  2100  02DC                     l3448:	
  2101                           ;main.c: 456: case STATE_CONFIRM_SAVE:
  2102                           
  2103                           ;main.c: 454: break ;
  2104                           
  2105                           
  2106                           ;main.c: 457: machineState_ = menuStateConfirm.select ? STATE_SAVE : STATE_MENU_MAIN ;
  2107  02DC  084E               	movf	_menuStateConfirm,w
  2108  02DD  1D03               	btfss	3,2
  2109  02DE  2AE1               	goto	l3452
  2110  02DF  3002               	movlw	2
  2111  02E0  2AE2               	goto	L14
  2112  02E1                     l3452:	
  2113  02E1  300B               	movlw	11
  2114  02E2                     L14:	
  2115  02E2  00B5               	movwf	_main$1167
  2116  02E3  3000               	movlw	0
  2117  02E4  00B6               	movwf	_main$1167+1
  2118  02E5  0835               	movf	_main$1167,w
  2119  02E6  2B02               	goto	L19
  2120  02E7                     l3454:	
  2121                           ;main.c: 460: case STATE_CONFIRM_RESET:
  2122                           
  2123                           ;main.c: 458: break ;
  2124                           
  2125                           
  2126                           ;main.c: 461: machineState_ = menuStateConfirm.select ? STATE_RESET : STATE_MENU_MAIN ;
  2127  02E7  084E               	movf	_menuStateConfirm,w
  2128  02E8  1D03               	btfss	3,2
  2129  02E9  2AEC               	goto	l3458
  2130  02EA  3002               	movlw	2
  2131  02EB  2AED               	goto	L16
  2132  02EC                     l3458:	
  2133  02EC  3010               	movlw	16
  2134  02ED                     L16:	
  2135  02ED  00B7               	movwf	_main$1168
  2136  02EE  3000               	movlw	0
  2137  02EF  00B8               	movwf	_main$1168+1
  2138  02F0  0837               	movf	_main$1168,w
  2139  02F1  2B02               	goto	L19
  2140  02F2                     l3460:	
  2141                           ;main.c: 464: case STATE_METRONOME:
  2142                           
  2143                           ;main.c: 462: break ;
  2144                           
  2145                           
  2146                           ;main.c: 465: machineState_ = STATE_MENU_MAIN ;
  2147  02F2  3002               	movlw	2
  2148  02F3  00A7               	movwf	??_main
  2149  02F4  0827               	movf	??_main,w
  2150  02F5  00EA               	movwf	_machineState_
  2151                           
  2152                           ;main.c: 466: menuStateMain.select = 0 ;
  2153  02F6  0021               	movlb	1	; select bank1
  2154  02F7  01E6               	clrf	_menuStateMain^(0+128)
  2155                           
  2156                           ;main.c: 467: menuStateMain.cursorPosition = 0 ;
  2157  02F8  01E7               	clrf	(_menuStateMain^(0+128)+1)
  2158                           
  2159                           ;main.c: 468: break ;
  2160  02F9  2B17               	goto	l281
  2161  02FA                     l3466:	
  2162                           ;main.c: 470: case STATE_ADJUST_BEAT_COUNT:
  2163                           
  2164                           
  2165                           ;main.c: 471: case STATE_ADJUST_DURATION:
  2166                           ;main.c: 472: case STATE_ADJUST_PULSE_WIDTH:
  2167                           ;main.c: 473: case STATE_INFORMATION:
  2168                           ;main.c: 474: machineState_ = STATE_MENU_MAIN ;
  2169  02FA  3002               	movlw	2
  2170  02FB                     L32:	
  2171  02FB  0020               	movlb	0	; select bank0
  2172  02FC  2B02               	goto	L19
  2173  02FD                     l322:	
  2174                           ;main.c: 477: case STATE_ADJUST_OSCILLATOR_TUNE:
  2175                           
  2176                           ;main.c: 475: break ;
  2177                           
  2178                           
  2179                           ;main.c: 478: outputEvent.soundOff = 1 ;
  2180  02FD  176B               	bsf	_outputEvent,6
  2181                           
  2182                           ;main.c: 479: machineState_ = STATE_MENU_MAIN ;
  2183  02FE  3002               	movlw	2
  2184  02FF  2B02               	goto	L19
  2185  0300                     l323:	
  2186                           ;main.c: 482: case STATE_ADJUST_TONE:
  2187                           
  2188                           ;main.c: 480: break ;
  2189                           
  2190                           
  2191                           ;main.c: 483: outputEvent.soundOff = 1 ;
  2192  0300  176B               	bsf	_outputEvent,6
  2193                           
  2194                           ;main.c: 484: machineState_ = STATE_MENU_TONE ;
  2195  0301  3003               	movlw	3
  2196  0302                     L19:	
  2197  0302  00A7               	movwf	??_main
  2198  0303  0827               	movf	??_main,w
  2199  0304  00EA               	movwf	_machineState_
  2200                           
  2201                           ;main.c: 485: break ;
  2202  0305  2B17               	goto	l281
  2203  0306                     l325:	
  2204                           ;main.c: 487: case STATE_INITIALIZE:
  2205                           
  2206                           
  2207                           ;main.c: 488: case STATE_ERROR:
  2208                           ;main.c: 489: machineState_ = STATE_METRONOME ;
  2209  0306  01EA               	clrf	_machineState_
  2210  0307  0AEA               	incf	_machineState_,f
  2211                           
  2212                           ;main.c: 490: outputEvent.resetMetronome = 1 ;
  2213  0308  15EB               	bsf	_outputEvent,3
  2214                           
  2215                           ;main.c: 493: }
  2216                           
  2217                           ;main.c: 491: break ;
  2218  0309  2B17               	goto	l281
  2219  030A                     l3474:	
  2220  030A  086A               	movf	_machineState_,w
  2221                           
  2222                           ; Switch size 1, requested type "space"
  2223                           ; Number of cases is 14, Range of values is 1 to 17
  2224                           ; switch strategies available:
  2225                           ; Name         Instructions Cycles
  2226                           ; direct_byte           43     9 (fixed)
  2227                           ; simple_byte           43    22 (average)
  2228                           ; jumptable            263     9 (fixed)
  2229                           ;	Chosen strategy is direct_byte
  2230  030B  3EFF               	addlw	-1
  2231  030C  1C03               	skipc
  2232  030D  2B17               	goto	l281
  2233  030E  0084               	movwf	4
  2234  030F  3011               	movlw	17
  2235  0310  0204               	subwf	4,w
  2236  0311  1803               	skipnc
  2237  0312  2B17               	goto	l281
  2238  0313  3189               	movlp	high S3918
  2239  0314  3504               	lslf	4,w
  2240  0315  3E58               	addlw	low S3918
  2241  0316  0082               	movwf	2
  2242  0317                     l281:	
  2243                           
  2244                           ;main.c: 495: }
  2245                           ;main.c: 498: if( (outputEvent.changeState&&!(outputEvent.changeState=0)) ) {
  2246  0317  0020               	movlb	0	; select bank0
  2247  0318  1C6B               	btfss	_outputEvent,0
  2248  0319  2C04               	goto	l3586
  2249  031A  106B               	bcf	_outputEvent,0
  2250                           
  2251                           ;main.c: 500: outputEvent.changeMessage = 1 ;
  2252  031B  14EB               	bsf	_outputEvent,1
  2253                           
  2254                           ;main.c: 502: switch( machineState_ ) {
  2255  031C  2B73               	goto	l3520
  2256  031D                     l3478:	
  2257                           ;main.c: 506: case STATE_MENU_MAIN:
  2258                           
  2259                           ;main.c: 504: break ;
  2260                           
  2261                           ;main.c: 503: case STATE_METRONOME:
  2262                           
  2263                           
  2264                           ;main.c: 507: currentMenuStatePtr = &menuStateMain ;
  2265  031D  30E6               	movlw	(low (_menuStateMain| 0))& (0+255)
  2266  031E  2B5E               	goto	L22
  2267  031F                     l3480:	
  2268                           ;main.c: 510: case STATE_MENU_TONE:
  2269                           
  2270                           ;main.c: 508: break ;
  2271                           
  2272                           
  2273                           ;main.c: 511: currentMenuStatePtr = &menuStateTone ;
  2274  031F  3056               	movlw	(low (_menuStateTone| 0))& (0+255)
  2275  0320  2B5E               	goto	L22
  2276  0321                     l3482:	
  2277                           ;main.c: 514: case STATE_CONFIRM_LOAD:
  2278                           
  2279                           ;main.c: 512: break ;
  2280                           
  2281                           
  2282                           ;main.c: 515: case STATE_CONFIRM_SAVE:
  2283                           ;main.c: 516: case STATE_CONFIRM_RESET:
  2284                           ;main.c: 517: menuStateConfirm.select = 0 ;
  2285  0321  01CE               	clrf	_menuStateConfirm
  2286                           
  2287                           ;main.c: 518: menuStateConfirm.cursorPosition = 0 ;
  2288  0322  01CF               	clrf	_menuStateConfirm+1
  2289                           
  2290                           ;main.c: 519: currentMenuStatePtr = &menuStateConfirm ;
  2291  0323  304E               	movlw	(low (_menuStateConfirm| 0))& (0+255)
  2292  0324  2B5E               	goto	L22
  2293  0325                     l335:	
  2294                           ;main.c: 522: case STATE_ADJUST_BEAT_COUNT:
  2295                           
  2296                           ;main.c: 520: break ;
  2297                           
  2298                           
  2299                           ;main.c: 523: outputEvent.changeValue = 1 ;
  2300  0325  156B               	bsf	_outputEvent,2
  2301                           
  2302                           ;main.c: 524: currentValuePtr = &config.beatCount ;
  2303  0326  3046               	movlw	(low ((_config| 0+3)))& (0+255)
  2304  0327  00A7               	movwf	??_main
  2305  0328  0827               	movf	??_main,w
  2306  0329  00E5               	movwf	_currentValuePtr
  2307                           
  2308                           ;main.c: 525: valueLimit.upper = 64 ;
  2309  032A  3040               	movlw	64
  2310  032B  2B39               	goto	L28
  2311  032C                     l336:	
  2312                           ;main.c: 529: case STATE_ADJUST_DURATION:
  2313                           
  2314                           ;main.c: 527: break ;
  2315                           
  2316                           ;main.c: 526: valueLimit.lower = 0 ;
  2317                           
  2318                           
  2319                           ;main.c: 530: outputEvent.changeValue = 1 ;
  2320  032C  156B               	bsf	_outputEvent,2
  2321                           
  2322                           ;main.c: 531: currentValuePtr = &config.duration ;
  2323  032D  3047               	movlw	(low ((_config| 0+4)))& (0+255)
  2324  032E  00A7               	movwf	??_main
  2325  032F  0827               	movf	??_main,w
  2326  0330  00E5               	movwf	_currentValuePtr
  2327                           
  2328                           ;main.c: 532: valueLimit.upper = 0xFF ;
  2329  0331  30FF               	movlw	255
  2330  0332  2B39               	goto	L28
  2331  0333                     l337:	
  2332                           ;main.c: 536: case STATE_ADJUST_PULSE_WIDTH:
  2333                           
  2334                           ;main.c: 534: break ;
  2335                           
  2336                           ;main.c: 533: valueLimit.lower = 0x00 ;
  2337                           
  2338                           
  2339                           ;main.c: 537: outputEvent.changeValue = 1 ;
  2340  0333  156B               	bsf	_outputEvent,2
  2341                           
  2342                           ;main.c: 538: currentValuePtr = &config.pulseWidth ;
  2343  0334  3048               	movlw	(low ((_config| 0+5)))& (0+255)
  2344  0335  00A7               	movwf	??_main
  2345  0336  0827               	movf	??_main,w
  2346  0337  00E5               	movwf	_currentValuePtr
  2347                           
  2348                           ;main.c: 539: valueLimit.upper = 0x07 ;
  2349  0338  3007               	movlw	7
  2350  0339                     L28:	
  2351  0339  00A7               	movwf	??_main
  2352  033A  0827               	movf	??_main,w
  2353  033B  00E1               	movwf	_valueLimit
  2354                           
  2355                           ;main.c: 540: valueLimit.lower = 0x00 ;
  2356  033C  01E2               	clrf	_valueLimit+1
  2357                           
  2358                           ;main.c: 541: break ;
  2359  033D  2C04               	goto	l3586
  2360  033E                     l338:	
  2361                           ;main.c: 543: case STATE_ADJUST_OSCILLATOR_TUNE:
  2362                           
  2363                           
  2364                           ;main.c: 544: outputEvent.changeValue = 1 ;
  2365  033E  156B               	bsf	_outputEvent,2
  2366                           
  2367                           ;main.c: 545: currentValuePtr = ( uint08* ) & config.oscillatorTune ;
  2368  033F  304C               	movlw	(low ((_config| 0+9)))& (0+255)
  2369  0340  00A7               	movwf	??_main
  2370  0341  0827               	movf	??_main,w
  2371  0342  00E5               	movwf	_currentValuePtr
  2372                           
  2373                           ;main.c: 546: valueLimit.upper = (uint08)30 ;
  2374  0343  301E               	movlw	30
  2375  0344  00A7               	movwf	??_main
  2376  0345  0827               	movf	??_main,w
  2377  0346  00E1               	movwf	_valueLimit
  2378                           
  2379                           ;main.c: 547: valueLimit.lower = ( uint08 ) - 30 ;
  2380  0347  30E2               	movlw	226
  2381  0348  00A7               	movwf	??_main
  2382  0349  0827               	movf	??_main,w
  2383  034A  00E2               	movwf	_valueLimit+1
  2384                           
  2385                           ;main.c: 548: outputEvent.soundOn = 1 ;
  2386  034B  16EB               	bsf	_outputEvent,5
  2387                           
  2388                           ;main.c: 549: break ;
  2389  034C  2C04               	goto	l3586
  2390  034D                     l339:	
  2391                           ;main.c: 551: case STATE_ADJUST_TONE:
  2392                           
  2393                           
  2394                           ;main.c: 552: outputEvent.changeValue = 1 ;
  2395  034D  156B               	bsf	_outputEvent,2
  2396                           
  2397                           ;main.c: 553: currentValuePtr = &config.tone[ menuStateTone.select - MENU_ITEM_TONE_ADJU
      +                          ST_TONE0 ] ;
  2398  034E  0856               	movf	_menuStateTone,w
  2399  034F  3EFF               	addlw	255
  2400  0350  3E49               	addlw	(low ((_config| 0+6)))& (0+255)
  2401  0351  00A7               	movwf	??_main
  2402  0352  0827               	movf	??_main,w
  2403  0353  00E5               	movwf	_currentValuePtr
  2404                           
  2405                           ;main.c: 554: valueLimit.upper = 0xFF ;
  2406  0354  30FF               	movlw	255
  2407  0355  00A7               	movwf	??_main
  2408  0356  0827               	movf	??_main,w
  2409  0357  00E1               	movwf	_valueLimit
  2410                           
  2411                           ;main.c: 555: valueLimit.lower = 0x00 ;
  2412  0358  01E2               	clrf	_valueLimit+1
  2413                           
  2414                           ;main.c: 556: T2CONbits.TMR2ON = 1 ;
  2415  0359  151C               	bsf	28,2	;volatile
  2416                           
  2417                           ;main.c: 557: break ;
  2418  035A  2C04               	goto	l3586
  2419  035B                     l3510:	
  2420                           ;main.c: 559: case STATE_INFORMATION:
  2421                           
  2422                           
  2423                           ;main.c: 560: menuStateInformation.select = 0 ;
  2424  035B  01D2               	clrf	_menuStateInformation
  2425                           
  2426                           ;main.c: 561: menuStateInformation.cursorPosition = 0 ;
  2427  035C  01D3               	clrf	_menuStateInformation+1
  2428                           
  2429                           ;main.c: 562: currentMenuStatePtr = &menuStateInformation ;
  2430  035D  3052               	movlw	(low (_menuStateInformation| 0))& (0+255)
  2431  035E                     L22:	
  2432  035E  00A7               	movwf	??_main
  2433  035F  0827               	movf	??_main,w
  2434  0360  00E4               	movwf	_currentMenuStatePtr
  2435                           
  2436                           ;main.c: 563: break ;
  2437  0361  2C04               	goto	l3586
  2438  0362                     l341:	
  2439                           ;main.c: 565: case STATE_LOAD:
  2440                           
  2441                           
  2442                           ;main.c: 566: outputEvent.resetMetronome = 1 ;
  2443  0362  15EB               	bsf	_outputEvent,3
  2444  0363                     l342:	
  2445                           ;main.c: 571: case STATE_SAVE:
  2446                           
  2447                           ;main.c: 569: break ;
  2448                           
  2449                           ;main.c: 568: stateReturnCounter = 0xFF ;
  2450                           
  2451                           ;main.c: 567: outputEvent.accessEeprom = 1 ;
  2452                           
  2453                           
  2454                           ;main.c: 572: outputEvent.accessEeprom = 1 ;
  2455  0363  17EB               	bsf	_outputEvent,7
  2456                           
  2457                           ;main.c: 573: stateReturnCounter = 0xFF ;
  2458  0364  30FF               	movlw	255
  2459  0365  00A7               	movwf	??_main
  2460  0366  0827               	movf	??_main,w
  2461  0367  00ED               	movwf	_stateReturnCounter
  2462                           
  2463                           ;main.c: 574: break ;
  2464  0368  2C04               	goto	l3586
  2465  0369                     l3518:	
  2466                           ;main.c: 576: case STATE_RESET:
  2467                           
  2468                           
  2469                           ;main.c: 577: _parallel_lcd_ClearRow( 0x80 ) ;
  2470  0369  3080               	movlw	128
  2471  036A  318E  2627  3180   	fcall	__parallel_lcd_ClearRow
  2472                           
  2473                           ;main.c: 578: _parallel_lcd_ClearRow( 0xC0 ) ;
  2474  036D  30C0               	movlw	192
  2475  036E  318E  2627  3180   	fcall	__parallel_lcd_ClearRow
  2476  0371  0001               	reset	;# 
  2477                           
  2478                           ;main.c: 581: }
  2479  0372  2C04               	goto	l3586
  2480  0373                     l3520:	
  2481  0373  0020               	movlb	0	; select bank0
  2482  0374  086A               	movf	_machineState_,w
  2483                           
  2484                           ; Switch size 1, requested type "space"
  2485                           ; Number of cases is 15, Range of values is 1 to 16
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; direct_byte           41     9 (fixed)
  2489                           ; simple_byte           46    24 (average)
  2490                           ; jumptable            263     9 (fixed)
  2491                           ;	Chosen strategy is direct_byte
  2492  0375  3EFF               	addlw	-1
  2493  0376  1C03               	skipc
  2494  0377  2C04               	goto	l3586
  2495  0378  0084               	movwf	4
  2496  0379  3010               	movlw	16
  2497  037A  0204               	subwf	4,w
  2498  037B  1803               	skipnc
  2499  037C  2C04               	goto	l3586
  2500  037D  3189               	movlp	high S3920
  2501  037E  3504               	lslf	4,w
  2502  037F  3E9C               	addlw	low S3920
  2503  0380  0082               	movwf	2
  2504                           
  2505                           ;main.c: 583: }
  2506                           ;main.c: 586: switch( machineState_ ) {
  2507  0381  2C04               	goto	l3586
  2508  0382                     l350:	
  2509                           ;main.c: 588: case STATE_MENU_MAIN:
  2510                           
  2511                           
  2512                           ;main.c: 589: case STATE_MENU_TONE:
  2513                           ;main.c: 590: case STATE_CONFIRM_LOAD:
  2514                           ;main.c: 591: case STATE_CONFIRM_SAVE:
  2515                           ;main.c: 592: case STATE_CONFIRM_RESET:
  2516                           ;main.c: 593: case STATE_INFORMATION:
  2517                           ;main.c: 594: if( (inputEvent.keyPressDown&&!(inputEvent.keyPressDown=0)) ) {
  2518  0382  1CE7               	btfss	_inputEvent,1
  2519  0383  2BA5               	goto	l3532
  2520  0384  10E7               	bcf	_inputEvent,1
  2521                           
  2522                           ;main.c: 595: if( currentMenuStatePtr->select != currentMenuStatePtr->limit ) {
  2523  0385  0864               	movf	_currentMenuStatePtr,w
  2524  0386  3E02               	addlw	2
  2525  0387  0086               	movwf	6
  2526  0388  0187               	clrf	7
  2527  0389  0864               	movf	_currentMenuStatePtr,w
  2528  038A  0084               	movwf	4
  2529  038B  0185               	clrf	5
  2530  038C  0800               	movf	0,w
  2531  038D  0601               	xorwf	1,w
  2532  038E  1903               	skipnz
  2533  038F  2BA5               	goto	l3532
  2534                           
  2535                           ;main.c: 596: currentMenuStatePtr->select++ ;
  2536  0390  3001               	movlw	1
  2537  0391  00A7               	movwf	??_main
  2538  0392  0864               	movf	_currentMenuStatePtr,w
  2539  0393  0086               	movwf	6
  2540  0394  0187               	clrf	7
  2541  0395  0827               	movf	??_main,w
  2542  0396  0781               	addwf	1,f
  2543                           
  2544                           ;main.c: 597: if( !currentMenuStatePtr->cursorPosition ) currentMenuStatePtr->cursorPosi
      +                          tion++ ;
  2545  0397  0A64               	incf	_currentMenuStatePtr,w
  2546  0398  0086               	movwf	6
  2547  0399  0187               	clrf	7
  2548  039A  0801               	movf	1,w
  2549  039B  1D03               	btfss	3,2
  2550  039C  2BA4               	goto	l3530
  2551  039D  3001               	movlw	1
  2552  039E  00A7               	movwf	??_main
  2553  039F  0A64               	incf	_currentMenuStatePtr,w
  2554  03A0  0086               	movwf	6
  2555  03A1  0187               	clrf	7
  2556  03A2  0827               	movf	??_main,w
  2557  03A3  0781               	addwf	1,f
  2558  03A4                     l3530:	
  2559                           
  2560                           ;main.c: 598: outputEvent.changeMessage = 1 ;
  2561  03A4  14EB               	bsf	_outputEvent,1
  2562  03A5                     l3532:	
  2563                           
  2564                           ;main.c: 599: }
  2565                           ;main.c: 600: }
  2566                           ;main.c: 601: if( (inputEvent.keyPressUp&&!(inputEvent.keyPressUp=0)) ) {
  2567  03A5  1C67               	btfss	_inputEvent,0
  2568  03A6  2C12               	goto	l357
  2569  03A7  1067               	bcf	_inputEvent,0
  2570                           
  2571                           ;main.c: 602: if( currentMenuStatePtr->select ) {
  2572  03A8  0864               	movf	_currentMenuStatePtr,w
  2573  03A9  0086               	movwf	6
  2574  03AA  0187               	clrf	7
  2575  03AB  0801               	movf	1,w
  2576  03AC  1903               	btfsc	3,2
  2577  03AD  2C12               	goto	l357
  2578                           
  2579                           ;main.c: 603: currentMenuStatePtr->select-- ;
  2580  03AE  0864               	movf	_currentMenuStatePtr,w
  2581  03AF  0086               	movwf	6
  2582  03B0  0187               	clrf	7
  2583  03B1  3001               	movlw	1
  2584  03B2  0281               	subwf	1,f
  2585                           
  2586                           ;main.c: 604: if( currentMenuStatePtr->cursorPosition ) currentMenuStatePtr->cursorPosit
      +                          ion-- ;
  2587  03B3  0A64               	incf	_currentMenuStatePtr,w
  2588  03B4  0086               	movwf	6
  2589  03B5  0187               	clrf	7
  2590  03B6  0801               	movf	1,w
  2591  03B7  1903               	btfsc	3,2
  2592  03B8  2BBE               	goto	l3542
  2593  03B9  0A64               	incf	_currentMenuStatePtr,w
  2594  03BA  0086               	movwf	6
  2595  03BB  0187               	clrf	7
  2596  03BC  3001               	movlw	1
  2597  03BD  0281               	subwf	1,f
  2598  03BE                     l3542:	
  2599                           
  2600                           ;main.c: 605: outputEvent.changeMessage = 1 ;
  2601  03BE  14EB               	bsf	_outputEvent,1
  2602                           
  2603                           ;main.c: 606: }
  2604                           ;main.c: 607: }
  2605                           ;main.c: 608: break ;
  2606  03BF  2C12               	goto	l357
  2607  03C0                     l358:	
  2608                           ;main.c: 610: case STATE_METRONOME:
  2609                           
  2610                           
  2611                           ;main.c: 611: if( (inputEvent.keyPressUp&&!(inputEvent.keyPressUp=0)) ) {
  2612  03C0  1C67               	btfss	_inputEvent,0
  2613  03C1  2BD0               	goto	l3554
  2614  03C2  1067               	bcf	_inputEvent,0
  2615                           
  2616                           ;main.c: 612: if( config.tempo < 999 ) {
  2617  03C3  3003               	movlw	3
  2618  03C4  0245               	subwf	_config+2,w
  2619  03C5  30E7               	movlw	231
  2620  03C6  1903               	skipnz
  2621  03C7  0244               	subwf	_config+1,w
  2622  03C8  1803               	skipnc
  2623  03C9  2BCF               	goto	l3552
  2624                           
  2625                           ;main.c: 613: config.tempo++ ;
  2626  03CA  3001               	movlw	1
  2627  03CB  07C4               	addwf	_config+1,f
  2628  03CC  3000               	movlw	0
  2629  03CD  3DC5               	addwfc	_config+2,f
  2630                           
  2631                           ;main.c: 614: outputEvent.changeValue = 1 ;
  2632  03CE  156B               	bsf	_outputEvent,2
  2633  03CF                     l3552:	
  2634                           
  2635                           ;main.c: 615: }
  2636                           ;main.c: 616: outputEvent.resetMetronome = 1 ;
  2637  03CF  15EB               	bsf	_outputEvent,3
  2638  03D0                     l3554:	
  2639                           
  2640                           ;main.c: 617: }
  2641                           ;main.c: 618: if( (inputEvent.keyPressDown&&!(inputEvent.keyPressDown=0)) ) {
  2642  03D0  1CE7               	btfss	_inputEvent,1
  2643  03D1  2C12               	goto	l357
  2644  03D2  10E7               	bcf	_inputEvent,1
  2645                           
  2646                           ;main.c: 619: if( config.tempo > 1 ) {
  2647  03D3  3000               	movlw	0
  2648  03D4  0245               	subwf	_config+2,w
  2649  03D5  3002               	movlw	2
  2650  03D6  1903               	skipnz
  2651  03D7  0244               	subwf	_config+1,w
  2652  03D8  1C03               	skipc
  2653  03D9  2BDF               	goto	l3564
  2654                           
  2655                           ;main.c: 620: config.tempo-- ;
  2656  03DA  3001               	movlw	1
  2657  03DB  02C4               	subwf	_config+1,f
  2658  03DC  3000               	movlw	0
  2659  03DD  3BC5               	subwfb	_config+2,f
  2660                           
  2661                           ;main.c: 621: outputEvent.changeValue = 1 ;
  2662  03DE  156B               	bsf	_outputEvent,2
  2663  03DF                     l3564:	
  2664                           
  2665                           ;main.c: 622: }
  2666                           ;main.c: 623: outputEvent.resetMetronome = 1 ;
  2667  03DF  15EB               	bsf	_outputEvent,3
  2668                           
  2669                           ;main.c: 624: }
  2670                           ;main.c: 625: break ;
  2671  03E0  2C12               	goto	l357
  2672  03E1                     l367:	
  2673                           ;main.c: 627: case STATE_ADJUST_BEAT_COUNT:
  2674                           
  2675                           
  2676                           ;main.c: 628: case STATE_ADJUST_PULSE_WIDTH:
  2677                           ;main.c: 629: case STATE_ADJUST_DURATION:
  2678                           ;main.c: 630: case STATE_ADJUST_TONE:
  2679                           ;main.c: 631: case STATE_ADJUST_OSCILLATOR_TUNE:
  2680                           ;main.c: 632: if( (inputEvent.keyPressUp&&!(inputEvent.keyPressUp=0)) ) {
  2681  03E1  1C67               	btfss	_inputEvent,0
  2682  03E2  2BF3               	goto	l3574
  2683  03E3  1067               	bcf	_inputEvent,0
  2684                           
  2685                           ;main.c: 633: if( *currentValuePtr != valueLimit.upper ) {
  2686  03E4  0865               	movf	_currentValuePtr,w
  2687  03E5  0086               	movwf	6
  2688  03E6  0187               	clrf	7
  2689  03E7  0801               	movf	1,w
  2690  03E8  0661               	xorwf	_valueLimit,w
  2691  03E9  1903               	skipnz
  2692  03EA  2BF3               	goto	l3574
  2693                           
  2694                           ;main.c: 634: ( *currentValuePtr )++ ;
  2695  03EB  3001               	movlw	1
  2696  03EC  00A7               	movwf	??_main
  2697  03ED  0865               	movf	_currentValuePtr,w
  2698  03EE  0086               	movwf	6
  2699  03EF  0187               	clrf	7
  2700  03F0  0827               	movf	??_main,w
  2701  03F1  0781               	addwf	1,f
  2702                           
  2703                           ;main.c: 635: outputEvent.changeValue = 1 ;
  2704  03F2  156B               	bsf	_outputEvent,2
  2705  03F3                     l3574:	
  2706                           
  2707                           ;main.c: 636: }
  2708                           ;main.c: 637: }
  2709                           ;main.c: 638: if( (inputEvent.keyPressDown&&!(inputEvent.keyPressDown=0)) ) {
  2710  03F3  1CE7               	btfss	_inputEvent,1
  2711  03F4  2C12               	goto	l357
  2712  03F5  10E7               	bcf	_inputEvent,1
  2713                           
  2714                           ;main.c: 639: if( *currentValuePtr != valueLimit.lower ) {
  2715  03F6  0865               	movf	_currentValuePtr,w
  2716  03F7  0086               	movwf	6
  2717  03F8  0187               	clrf	7
  2718  03F9  0862               	movf	_valueLimit+1,w
  2719  03FA  0601               	xorwf	1,w
  2720  03FB  1903               	skipnz
  2721  03FC  2C12               	goto	l357
  2722                           
  2723                           ;main.c: 640: ( *currentValuePtr )-- ;
  2724  03FD  0865               	movf	_currentValuePtr,w
  2725  03FE  0086               	movwf	6
  2726  03FF  0187               	clrf	7
  2727  0400  3001               	movlw	1
  2728  0401  0281               	subwf	1,f
  2729                           
  2730                           ;main.c: 641: outputEvent.changeValue = 1 ;
  2731  0402  156B               	bsf	_outputEvent,2
  2732                           
  2733                           ;main.c: 646: }
  2734                           
  2735                           ;main.c: 642: }
  2736                           ;main.c: 643: }
  2737                           ;main.c: 644: break ;
  2738  0403  2C12               	goto	l357
  2739  0404                     l3586:	
  2740  0404  0020               	movlb	0	; select bank0
  2741  0405  086A               	movf	_machineState_,w
  2742                           
  2743                           ; Switch size 1, requested type "space"
  2744                           ; Number of cases is 12, Range of values is 1 to 14
  2745                           ; switch strategies available:
  2746                           ; Name         Instructions Cycles
  2747                           ; direct_byte           37     9 (fixed)
  2748                           ; simple_byte           37    19 (average)
  2749                           ; jumptable            263     9 (fixed)
  2750                           ;	Chosen strategy is direct_byte
  2751  0406  3EFF               	addlw	-1
  2752  0407  1C03               	skipc
  2753  0408  2C12               	goto	l357
  2754  0409  0084               	movwf	4
  2755  040A  300E               	movlw	14
  2756  040B  0204               	subwf	4,w
  2757  040C  1803               	skipnc
  2758  040D  2C12               	goto	l357
  2759  040E  3189               	movlp	high S3922
  2760  040F  3504               	lslf	4,w
  2761  0410  3EBC               	addlw	low S3922
  2762  0411  0082               	movwf	2
  2763  0412                     l357:	
  2764                           
  2765                           ;main.c: 649: if( (outputEvent.resetMetronome&&!(outputEvent.resetMetronome=0)) ) {
  2766  0412  1DEB               	btfss	_outputEvent,3
  2767  0413  2C53               	goto	l3636
  2768  0414  11EB               	bcf	_outputEvent,3
  2769                           
  2770                           ;main.c: 650: INTCONbits.GIE=0 ;
  2771  0415  138B               	bcf	11,7	;volatile
  2772                           
  2773                           ;main.c: 651: tempoCounter = 0 ;
  2774  0416  3000               	movlw	0
  2775  0417  00DE               	movwf	_tempoCounter
  2776  0418  3000               	movlw	0
  2777  0419  00DF               	movwf	_tempoCounter+1
  2778  041A  3000               	movlw	0
  2779  041B  00E0               	movwf	_tempoCounter+2
  2780                           
  2781                           ;main.c: 652: beatCounter = 0 ;
  2782  041C  01E3               	clrf	_beatCounter
  2783                           
  2784                           ;main.c: 653: duration = config.duration ;
  2785  041D  0847               	movf	_config+4,w
  2786  041E  00A7               	movwf	??_main
  2787  041F  0827               	movf	??_main,w
  2788  0420  00E6               	movwf	_duration
  2789                           
  2790                           ;main.c: 654: outputEvent.soundClickOn = 1 ;
  2791  0421  166B               	bsf	_outputEvent,4
  2792                           
  2793                           ;main.c: 655: INTCONbits.GIE=1 ;
  2794  0422  178B               	bsf	11,7	;volatile
  2795                           
  2796                           ;main.c: 656: }
  2797                           ;main.c: 659: switch( machineState_ ) {
  2798  0423  2C53               	goto	l3636
  2799  0424                     l380:	
  2800                           ;main.c: 669: case STATE_ADJUST_TONE:
  2801                           
  2802                           ;main.c: 662: case STATE_INITIALIZE:
  2803                           ;main.c: 663: case STATE_LOAD:
  2804                           ;main.c: 664: case STATE_SAVE:
  2805                           ;main.c: 665: case STATE_ERROR:
  2806                           ;main.c: 667: break ;
  2807                           
  2808                           ;main.c: 661: case STATE_BOOT:
  2809                           
  2810                           
  2811                           ;main.c: 670: if( (outputEvent.soundOn&&!(outputEvent.soundOn=0)) ) {
  2812  0424  1EEB               	btfss	_outputEvent,5
  2813  0425  2C71               	goto	l3642
  2814  0426  12EB               	bcf	_outputEvent,5
  2815                           
  2816                           ;main.c: 671: PR2 = *currentValuePtr ;
  2817  0427  0865               	movf	_currentValuePtr,w
  2818  0428  0086               	movwf	6
  2819  0429  0187               	clrf	7
  2820  042A  0801               	movf	1,w
  2821  042B  2C30               	goto	L31
  2822  042C                     l382:	
  2823                           ;main.c: 676: case STATE_ADJUST_OSCILLATOR_TUNE:
  2824                           
  2825                           ;main.c: 674: }
  2826                           ;main.c: 675: break ;
  2827                           
  2828                           ;main.c: 673: T2CONbits.TMR2ON = 1 ;
  2829                           
  2830                           ;main.c: 672: {CCPR4L=(PR2>>1);} ;
  2831                           
  2832                           
  2833                           ;main.c: 677: if( (outputEvent.soundOn&&!(outputEvent.soundOn=0)) ) {
  2834  042C  1EEB               	btfss	_outputEvent,5
  2835  042D  2C71               	goto	l3642
  2836  042E  12EB               	bcf	_outputEvent,5
  2837                           
  2838                           ;main.c: 678: PR2 = 141 ;
  2839  042F  308D               	movlw	141
  2840  0430                     L31:	
  2841  0430  009B               	movwf	27	;volatile
  2842                           
  2843                           ;main.c: 679: {CCPR4L=(PR2>>1);} ;
  2844  0431  361B               	lsrf	27,w	;volatile
  2845  0432  2C4E               	goto	L29
  2846  0433                     l384:	
  2847                           ;main.c: 684: default:
  2848                           
  2849                           ;main.c: 681: }
  2850                           ;main.c: 682: break ;
  2851                           
  2852                           ;main.c: 680: T2CONbits.TMR2ON = 1 ;
  2853                           
  2854                           
  2855                           ;main.c: 685: if( (outputEvent.soundClickOn&&!(outputEvent.soundClickOn=0)) ) {
  2856  0433  1E6B               	btfss	_outputEvent,4
  2857  0434  2C71               	goto	l3642
  2858  0435  126B               	bcf	_outputEvent,4
  2859                           
  2860                           ;main.c: 686: if( !isMute ) {
  2861  0436  0868               	movf	_isMute,w
  2862  0437  1D03               	btfss	3,2
  2863  0438  2C71               	goto	l3642
  2864                           
  2865                           ;main.c: 687: if( beatCounter == 0 )
  2866  0439  0863               	movf	_beatCounter,w
  2867  043A  1D03               	btfss	3,2
  2868  043B  2C3E               	goto	l3624
  2869                           
  2870                           ;main.c: 688: PR2 = config.tone[ 1 ] ;
  2871  043C  084A               	movf	_config+7,w
  2872  043D  2C45               	goto	L24
  2873  043E                     l3624:	
  2874                           
  2875                           ;main.c: 689: else if( beatCounter == config.beatCount )
  2876  043E  0846               	movf	_config+3,w
  2877  043F  0663               	xorwf	_beatCounter,w
  2878  0440  1D03               	skipz
  2879  0441  2C44               	goto	l3628
  2880                           
  2881                           ;main.c: 690: PR2 = config.tone[ 2 ] ;
  2882  0442  084B               	movf	_config+8,w
  2883  0443  2C45               	goto	L24
  2884  0444                     l3628:	
  2885                           
  2886                           ;main.c: 691: else
  2887                           ;main.c: 692: PR2 = config.tone[ 0 ] ;
  2888  0444  0849               	movf	_config+6,w
  2889  0445                     L24:	
  2890  0445  009B               	movwf	27	;volatile
  2891                           
  2892                           ;main.c: 694: {CCPR4L=(PR2>>config.pulseWidth);} ;
  2893  0446  081B               	movf	27,w	;volatile
  2894  0447  00A7               	movwf	??_main
  2895  0448  0A48               	incf	_config+5,w
  2896  0449  2C4B               	goto	u3024
  2897  044A                     u3025:	
  2898  044A  36A7               	lsrf	??_main,f
  2899  044B                     u3024:	
  2900  044B  0B89               	decfsz	9,f
  2901  044C  2C4A               	goto	u3025
  2902  044D  0827               	movf	??_main,w
  2903  044E                     L29:	
  2904  044E  0026               	movlb	6	; select bank6
  2905  044F  0098               	movwf	24	;volatile
  2906                           
  2907                           ;main.c: 695: T2CONbits.TMR2ON = 1 ;
  2908  0450  0020               	movlb	0	; select bank0
  2909  0451  151C               	bsf	28,2	;volatile
  2910                           
  2911                           ;main.c: 700: }
  2912                           
  2913                           ;main.c: 696: }
  2914                           ;main.c: 697: }
  2915                           ;main.c: 699: break ;
  2916  0452  2C71               	goto	l3642
  2917  0453                     l3636:	
  2918  0453  086A               	movf	_machineState_,w
  2919                           
  2920                           ; Switch size 1, requested type "space"
  2921                           ; Number of cases is 7, Range of values is 0 to 17
  2922                           ; switch strategies available:
  2923                           ; Name         Instructions Cycles
  2924                           ; simple_byte           22    12 (average)
  2925                           ; direct_byte           42     6 (fixed)
  2926                           ; jumptable            260     6 (fixed)
  2927                           ;	Chosen strategy is simple_byte
  2928  0454  3A00               	xorlw	0	; case 0
  2929  0455  1903               	skipnz
  2930  0456  2C71               	goto	l3642
  2931  0457  3A07               	xorlw	7	; case 7
  2932  0458  1903               	skipnz
  2933  0459  2C24               	goto	l380
  2934  045A  3A0F               	xorlw	15	; case 8
  2935  045B  1903               	skipnz
  2936  045C  2C2C               	goto	l382
  2937  045D  3A03               	xorlw	3	; case 11
  2938  045E  1903               	skipnz
  2939  045F  2C71               	goto	l3642
  2940  0460  3A06               	xorlw	6	; case 13
  2941  0461  1903               	skipnz
  2942  0462  2C71               	goto	l3642
  2943  0463  3A02               	xorlw	2	; case 15
  2944  0464  1903               	skipnz
  2945  0465  2C71               	goto	l3642
  2946  0466  3A1E               	xorlw	30	; case 17
  2947  0467  1903               	skipnz
  2948  0468  2C71               	goto	l3642
  2949  0469  2C33               	goto	l384
  2950                           
  2951                           ;main.c: 703: switch( machineState_ ) {
  2952  046A  2C71               	goto	l3642
  2953  046B                     l396:	
  2954                           ;main.c: 705: case STATE_BOOT:
  2955                           
  2956  046B  2C6F               	goto	L25
  2957  046C                     l400:	
  2958                           ;main.c: 718: default:
  2959                           
  2960                           ;main.c: 714: case STATE_ADJUST_OSCILLATOR_TUNE:
  2961                           ;main.c: 716: break ;
  2962                           
  2963                           ;main.c: 713: case STATE_ADJUST_TONE:
  2964                           
  2965                           ;main.c: 711: break ;
  2966                           
  2967                           ;main.c: 706: case STATE_INITIALIZE:
  2968                           ;main.c: 707: case STATE_LOAD:
  2969                           ;main.c: 708: case STATE_SAVE:
  2970                           ;main.c: 709: case STATE_ERROR:
  2971                           ;main.c: 710: T2CONbits.TMR2ON = 0 ;
  2972                           
  2973                           
  2974                           ;main.c: 719: if( (outputEvent.soundOff&&!(outputEvent.soundOff=0)) )
  2975  046C  1F6B               	btfss	_outputEvent,6
  2976  046D  2C88               	goto	l397
  2977  046E  136B               	bcf	_outputEvent,6
  2978  046F                     L25:	
  2979                           
  2980                           ;main.c: 720: T2CONbits.TMR2ON = 0 ;
  2981  046F  111C               	bcf	28,2	;volatile
  2982                           
  2983                           ;main.c: 723: }
  2984                           
  2985                           ;main.c: 722: break ;
  2986  0470  2C88               	goto	l397
  2987  0471                     l3642:	
  2988  0471  086A               	movf	_machineState_,w
  2989                           
  2990                           ; Switch size 1, requested type "space"
  2991                           ; Number of cases is 7, Range of values is 0 to 17
  2992                           ; switch strategies available:
  2993                           ; Name         Instructions Cycles
  2994                           ; simple_byte           22    12 (average)
  2995                           ; direct_byte           42     6 (fixed)
  2996                           ; jumptable            260     6 (fixed)
  2997                           ;	Chosen strategy is simple_byte
  2998  0472  3A00               	xorlw	0	; case 0
  2999  0473  1903               	skipnz
  3000  0474  2C6B               	goto	l396
  3001  0475  3A07               	xorlw	7	; case 7
  3002  0476  1903               	skipnz
  3003  0477  2C88               	goto	l397
  3004  0478  3A0F               	xorlw	15	; case 8
  3005  0479  1903               	skipnz
  3006  047A  2C88               	goto	l397
  3007  047B  3A03               	xorlw	3	; case 11
  3008  047C  1903               	skipnz
  3009  047D  2C6B               	goto	l396
  3010  047E  3A06               	xorlw	6	; case 13
  3011  047F  1903               	skipnz
  3012  0480  2C6B               	goto	l396
  3013  0481  3A02               	xorlw	2	; case 15
  3014  0482  1903               	skipnz
  3015  0483  2C6B               	goto	l396
  3016  0484  3A1E               	xorlw	30	; case 17
  3017  0485  1903               	skipnz
  3018  0486  2C6B               	goto	l396
  3019  0487  2C6C               	goto	l400
  3020  0488                     l397:	
  3021                           
  3022                           ;main.c: 726: if( (outputEvent.changeMessage&&!(outputEvent.changeMessage=0)) ) {
  3023  0488  1CEB               	btfss	_outputEvent,1
  3024  0489  2ED7               	goto	l402
  3025  048A  10EB               	bcf	_outputEvent,1
  3026                           
  3027                           ;main.c: 728: switch( machineState_ ) {
  3028  048B  2EC9               	goto	l3726
  3029  048C                     l3646:	
  3030                           ;main.c: 730: case STATE_MENU_MAIN:
  3031                           
  3032                           
  3033                           ;main.c: 731: case STATE_MENU_TONE:
  3034                           ;main.c: 732: _parallel_lcd_WriteStringClearing( 0x80 | 0x1 , currentMenuStatePtr->menuM
      +                          essage[ currentMenuStatePtr->select - currentMenuStatePtr->cursorPosition ] ) ;
  3035  048C  0864               	movf	_currentMenuStatePtr,w
  3036  048D  3E03               	addlw	3
  3037  048E  0086               	movwf	6
  3038  048F  0187               	clrf	7
  3039  0490  0864               	movf	_currentMenuStatePtr,w
  3040  0491  0084               	movwf	4
  3041  0492  0185               	clrf	5
  3042  0493  0800               	movf	0,w
  3043  0494  00A7               	movwf	??_main
  3044  0495  0A64               	incf	_currentMenuStatePtr,w
  3045  0496  0084               	movwf	4
  3046  0497  0185               	clrf	5
  3047  0498  0300               	decf	0,w
  3048  0499  3AFF               	xorlw	255
  3049  049A  0727               	addwf	??_main,w
  3050  049B  0709               	addwf	9,w
  3051  049C  0701               	addwf	1,w
  3052  049D  00A8               	movwf	??_main+1
  3053  049E  0828               	movf	??_main+1,w
  3054  049F  0086               	movwf	6
  3055  04A0  0187               	clrf	7
  3056  04A1  3F40               	moviw [0]fsr1
  3057  04A2  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3058  04A3  3F41               	moviw [1]fsr1
  3059  04A4  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3060  04A5  3081               	movlw	129
  3061  04A6  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3062                           
  3063                           ;main.c: 733: _parallel_lcd_WriteStringClearing( 0xC0 | 0x1 , currentMenuStatePtr->menuM
      +                          essage[ currentMenuStatePtr->select - currentMenuStatePtr->cursorPosition + 1 ] ) ;
  3064  04A9  0020               	movlb	0	; select bank0
  3065  04AA  0864               	movf	_currentMenuStatePtr,w
  3066  04AB  3E03               	addlw	3
  3067  04AC  0086               	movwf	6
  3068  04AD  0187               	clrf	7
  3069  04AE  0864               	movf	_currentMenuStatePtr,w
  3070  04AF  0084               	movwf	4
  3071  04B0  0185               	clrf	5
  3072  04B1  0800               	movf	0,w
  3073  04B2  00A7               	movwf	??_main
  3074  04B3  0A64               	incf	_currentMenuStatePtr,w
  3075  04B4  0084               	movwf	4
  3076  04B5  0185               	clrf	5
  3077  04B6  0300               	decf	0,w
  3078  04B7  3AFF               	xorlw	255
  3079  04B8  0727               	addwf	??_main,w
  3080  04B9  0709               	addwf	9,w
  3081  04BA  3E02               	addlw	2
  3082  04BB  0701               	addwf	1,w
  3083  04BC  00A8               	movwf	??_main+1
  3084  04BD  0828               	movf	??_main+1,w
  3085  04BE  0086               	movwf	6
  3086  04BF  0187               	clrf	7
  3087  04C0  3F40               	moviw [0]fsr1
  3088  04C1  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3089  04C2  3F41               	moviw [1]fsr1
  3090  04C3  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3091  04C4  30C1               	movlw	193
  3092  04C5  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3093                           
  3094                           ;main.c: 735: if( currentMenuStatePtr->select != currentMenuStatePtr->cursorPosition )
  3095  04C8  0020               	movlb	0	; select bank0
  3096  04C9  0A64               	incf	_currentMenuStatePtr,w
  3097  04CA  0086               	movwf	6
  3098  04CB  0187               	clrf	7
  3099  04CC  0864               	movf	_currentMenuStatePtr,w
  3100  04CD  0084               	movwf	4
  3101  04CE  0185               	clrf	5
  3102  04CF  0800               	movf	0,w
  3103  04D0  0601               	xorwf	1,w
  3104  04D1  1903               	skipnz
  3105  04D2  2CDF               	goto	l3652
  3106                           
  3107                           ;main.c: 736: _parallel_lcd_WriteCharacter( 0x80 | 0xF , CHAR_CODE.CURSOR_UP ) ;
  3108  04D3  3035               	movlw	low ((_CHAR_CODE+1)| (0+32768))
  3109  04D4  0084               	movwf	4
  3110  04D5  3088               	movlw	high ((_CHAR_CODE+1)| (0+32768))
  3111  04D6  0085               	movwf	5
  3112  04D7  0800               	movf	0,w	;code access
  3113  04D8  00A7               	movwf	??_main
  3114  04D9  0827               	movf	??_main,w
  3115  04DA  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3116  04DB  308F               	movlw	143
  3117  04DC  318D  25B5  3180   	fcall	__parallel_lcd_WriteCharacter
  3118  04DF                     l3652:	
  3119                           
  3120                           ;main.c: 737: if( currentMenuStatePtr->select != ( currentMenuStatePtr->limit + currentM
      +                          enuStatePtr->cursorPosition - 1 ) )
  3121  04DF  0020               	movlb	0	; select bank0
  3122  04E0  0A64               	incf	_currentMenuStatePtr,w
  3123  04E1  0086               	movwf	6
  3124  04E2  0187               	clrf	7
  3125  04E3  0864               	movf	_currentMenuStatePtr,w
  3126  04E4  3E02               	addlw	2
  3127  04E5  0084               	movwf	4
  3128  04E6  0185               	clrf	5
  3129  04E7  0800               	movf	0,w
  3130  04E8  0701               	addwf	1,w
  3131  04E9  00A7               	movwf	??_main
  3132  04EA  01A8               	clrf	??_main+1
  3133  04EB  0DA8               	rlf	??_main+1,f
  3134  04EC  0827               	movf	??_main,w
  3135  04ED  3EFF               	addlw	255
  3136  04EE  00A9               	movwf	??_main+2
  3137  04EF  30FF               	movlw	255
  3138  04F0  3D28               	addwfc	??_main+1,w
  3139  04F1  00AA               	movwf	??_main+3
  3140  04F2  0864               	movf	_currentMenuStatePtr,w
  3141  04F3  0086               	movwf	6
  3142  04F4  0187               	clrf	7
  3143  04F5  0801               	movf	1,w
  3144  04F6  0629               	xorwf	??_main+2,w
  3145  04F7  042A               	iorwf	??_main+3,w
  3146  04F8  1903               	skipnz
  3147  04F9  2D06               	goto	l3656
  3148                           
  3149                           ;main.c: 738: _parallel_lcd_WriteCharacter( 0xC0 | 0xF , CHAR_CODE.CURSOR_DOWN ) ;
  3150  04FA  3036               	movlw	low ((_CHAR_CODE+2)| (0+32768))
  3151  04FB  0084               	movwf	4
  3152  04FC  3088               	movlw	high ((_CHAR_CODE+2)| (0+32768))
  3153  04FD  0085               	movwf	5
  3154  04FE  0800               	movf	0,w	;code access
  3155  04FF  00A7               	movwf	??_main
  3156  0500  0827               	movf	??_main,w
  3157  0501  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3158  0502  30CF               	movlw	207
  3159  0503  318D  25B5  3180   	fcall	__parallel_lcd_WriteCharacter
  3160  0506                     l3656:	
  3161                           
  3162                           ;main.c: 740: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[currentMenuStatePtr-
      +                          >cursorPosition] | 0x0 , CHAR_CODE.CURSOR_RIGHT ) ;
  3163  0506  3034               	movlw	low (_CHAR_CODE| (0+32768))
  3164  0507  0084               	movwf	4
  3165  0508  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3166  0509  0085               	movwf	5
  3167  050A  0800               	movf	0,w	;code access
  3168  050B  0020               	movlb	0	; select bank0
  3169  050C  00A7               	movwf	??_main
  3170  050D  0827               	movf	??_main,w
  3171  050E  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3172  050F  0A64               	incf	_currentMenuStatePtr,w
  3173  0510  0086               	movwf	6
  3174  0511  0187               	clrf	7
  3175  0512  0801               	movf	1,w
  3176  0513  3E37               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3177  0514  0084               	movwf	4
  3178  0515  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3179  0516  1803               	skipnc
  3180  0517  3E01               	addlw	1
  3181  0518  0085               	movwf	5
  3182  0519  0800               	movf	0,w	;code access
  3183  051A  318D  25B5  3180   	fcall	__parallel_lcd_WriteCharacter
  3184                           
  3185                           ;main.c: 742: break ;
  3186  051D  2ED7               	goto	l402
  3187  051E                     l3658:	
  3188                           ;main.c: 744: case STATE_CONFIRM_LOAD:
  3189                           
  3190                           
  3191                           ;main.c: 745: case STATE_CONFIRM_SAVE:
  3192                           ;main.c: 746: case STATE_CONFIRM_RESET:
  3193                           ;main.c: 748: _parallel_lcd_WriteStringClearing( 0x80 | 0xD , MESSAGE.CONFIRM.NO ) ;
  3194  051E  3018               	movlw	low ((_MESSAGE+24)| (0+32768))
  3195  051F  0084               	movwf	4
  3196  0520  3088               	movlw	high ((_MESSAGE+24)| (0+32768))
  3197  0521  0085               	movwf	5
  3198  0522  3F00               	moviw [0]fsr0
  3199  0523  0020               	movlb	0	; select bank0
  3200  0524  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3201  0525  3F01               	moviw [1]fsr0
  3202  0526  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3203  0527  308D               	movlw	141
  3204  0528  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3205                           
  3206                           ;main.c: 749: _parallel_lcd_WriteStringClearing( 0xC0 | 0xD , MESSAGE.CONFIRM.YES ) ;
  3207  052B  301A               	movlw	low ((_MESSAGE+26)| (0+32768))
  3208  052C  0084               	movwf	4
  3209  052D  3088               	movlw	high ((_MESSAGE+26)| (0+32768))
  3210  052E  0085               	movwf	5
  3211  052F  3F00               	moviw [0]fsr0
  3212  0530  0020               	movlb	0	; select bank0
  3213  0531  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3214  0532  3F01               	moviw [1]fsr0
  3215  0533  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3216  0534  30CD               	movlw	205
  3217  0535  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3218                           
  3219                           ;main.c: 751: switch( machineState_ ) {
  3220  0538  2D63               	goto	l3668
  3221  0539                     l3660:	
  3222                           ;main.c: 752: case STATE_CONFIRM_LOAD:
  3223                           
  3224                           
  3225                           ;main.c: 753: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.LOAD ) ;
  3226  0539  3012               	movlw	low ((_MESSAGE+18)| (0+32768))
  3227  053A  0084               	movwf	4
  3228  053B  3088               	movlw	high ((_MESSAGE+18)| (0+32768))
  3229  053C  0085               	movwf	5
  3230  053D  3F00               	moviw [0]fsr0
  3231  053E  0020               	movlb	0	; select bank0
  3232  053F  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  3233  0540  3F01               	moviw [1]fsr0
  3234  0541  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3235  0542  3080               	movlw	128
  3236  0543  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  3237                           
  3238                           ;main.c: 754: break ;
  3239  0546  2D6F               	goto	l3670
  3240  0547                     l3662:	
  3241                           ;main.c: 755: case STATE_CONFIRM_SAVE:
  3242                           
  3243                           
  3244                           ;main.c: 756: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.SAVE ) ;
  3245  0547  3014               	movlw	low ((_MESSAGE+20)| (0+32768))
  3246  0548  0084               	movwf	4
  3247  0549  3088               	movlw	high ((_MESSAGE+20)| (0+32768))
  3248  054A  0085               	movwf	5
  3249  054B  3F00               	moviw [0]fsr0
  3250  054C  0020               	movlb	0	; select bank0
  3251  054D  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  3252  054E  3F01               	moviw [1]fsr0
  3253  054F  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3254  0550  3080               	movlw	128
  3255  0551  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  3256                           
  3257                           ;main.c: 757: break ;
  3258  0554  2D6F               	goto	l3670
  3259  0555                     l3664:	
  3260                           ;main.c: 758: case STATE_CONFIRM_RESET:
  3261                           
  3262                           
  3263                           ;main.c: 759: _parallel_lcd_WriteString( 0x80 | 0x0 , MESSAGE.CONFIRM.RESET ) ;
  3264  0555  3016               	movlw	low ((_MESSAGE+22)| (0+32768))
  3265  0556  0084               	movwf	4
  3266  0557  3088               	movlw	high ((_MESSAGE+22)| (0+32768))
  3267  0558  0085               	movwf	5
  3268  0559  3F00               	moviw [0]fsr0
  3269  055A  0020               	movlb	0	; select bank0
  3270  055B  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  3271  055C  3F01               	moviw [1]fsr0
  3272  055D  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3273  055E  3080               	movlw	128
  3274  055F  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  3275                           
  3276                           ;main.c: 762: }
  3277                           
  3278                           ;main.c: 760: break ;
  3279  0562  2D6F               	goto	l3670
  3280  0563                     l3668:	
  3281  0563  0020               	movlb	0	; select bank0
  3282  0564  086A               	movf	_machineState_,w
  3283                           
  3284                           ; Switch size 1, requested type "space"
  3285                           ; Number of cases is 3, Range of values is 10 to 14
  3286                           ; switch strategies available:
  3287                           ; Name         Instructions Cycles
  3288                           ; simple_byte           10     6 (average)
  3289                           ; direct_byte           19     9 (fixed)
  3290                           ; jumptable            263     9 (fixed)
  3291                           ;	Chosen strategy is simple_byte
  3292  0565  3A0A               	xorlw	10	; case 10
  3293  0566  1903               	skipnz
  3294  0567  2D47               	goto	l3662
  3295  0568  3A06               	xorlw	6	; case 12
  3296  0569  1903               	skipnz
  3297  056A  2D39               	goto	l3660
  3298  056B  3A02               	xorlw	2	; case 14
  3299  056C  1903               	skipnz
  3300  056D  2D55               	goto	l3664
  3301  056E  2D6F               	goto	l3670
  3302  056F                     l3670:	
  3303                           
  3304                           ;main.c: 764: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[ currentMenuStatePtr
      +                          ->cursorPosition ] | 0xC , CHAR_CODE.CURSOR_RIGHT ) ;
  3305  056F  3034               	movlw	low (_CHAR_CODE| (0+32768))
  3306  0570  0084               	movwf	4
  3307  0571  3088               	movlw	high (_CHAR_CODE| (0+32768))
  3308  0572  0085               	movwf	5
  3309  0573  0800               	movf	0,w	;code access
  3310  0574  0020               	movlb	0	; select bank0
  3311  0575  00A7               	movwf	??_main
  3312  0576  0827               	movf	??_main,w
  3313  0577  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3314  0578  0A64               	incf	_currentMenuStatePtr,w
  3315  0579  0086               	movwf	6
  3316  057A  0187               	clrf	7
  3317  057B  0801               	movf	1,w
  3318  057C  3E37               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3319  057D  0084               	movwf	4
  3320  057E  3088               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  3321  057F  1803               	skipnc
  3322  0580  3E01               	addlw	1
  3323  0581  0085               	movwf	5
  3324  0582  0800               	movf	0,w	;code access
  3325  0583  380C               	iorlw	12
  3326  0584  318D  25B5  3180   	fcall	__parallel_lcd_WriteCharacter
  3327                           
  3328                           ;main.c: 766: break ;
  3329  0587  2ED7               	goto	l402
  3330  0588                     l3672:	
  3331                           ;main.c: 768: case STATE_METRONOME:
  3332                           
  3333                           
  3334                           ;main.c: 769: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.METRONOME.TILE ) ;
  3335  0588  3000               	movlw	low (_MESSAGE| (0+32768))
  3336  0589  0084               	movwf	4
  3337  058A  3088               	movlw	high (_MESSAGE| (0+32768))
  3338  058B  0085               	movwf	5
  3339  058C  3F00               	moviw [0]fsr0
  3340  058D  0020               	movlb	0	; select bank0
  3341  058E  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3342  058F  3F01               	moviw [1]fsr0
  3343  0590  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3344  0591  3080               	movlw	128
  3345  0592  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3346                           
  3347                           ;main.c: 770: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.METRONOME.TEMPO ) 
      +                          ;
  3348  0595  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  3349  0596  0084               	movwf	4
  3350  0597  3088               	movlw	high ((_MESSAGE+4)| (0+32768))
  3351  0598  0085               	movwf	5
  3352  0599  3F00               	moviw [0]fsr0
  3353  059A  0020               	movlb	0	; select bank0
  3354  059B  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3355  059C  3F01               	moviw [1]fsr0
  3356  059D  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3357  059E  30C0               	movlw	192
  3358  059F  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3359                           
  3360                           ;main.c: 771: if( isMute ) _parallel_lcd_WriteString( 0x80 | 0xA , MESSAGE.METRONOME.MUT
      +                          E ) ;
  3361  05A2  0020               	movlb	0	; select bank0
  3362  05A3  0868               	movf	_isMute,w
  3363  05A4  1903               	btfsc	3,2
  3364  05A5  2E3E               	goto	l3700
  3365  05A6  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  3366  05A7  0084               	movwf	4
  3367  05A8  3088               	movlw	high ((_MESSAGE+2)| (0+32768))
  3368  05A9  0085               	movwf	5
  3369  05AA  3F00               	moviw [0]fsr0
  3370  05AB  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  3371  05AC  3F01               	moviw [1]fsr0
  3372  05AD  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3373  05AE  308A               	movlw	138
  3374  05AF  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  3375  05B2  2E3E               	goto	l3700
  3376  05B3                     l3680:	
  3377                           ;main.c: 775: case STATE_ADJUST_BEAT_COUNT:
  3378                           
  3379                           ;main.c: 773: break ;
  3380                           
  3381                           ;main.c: 772: outputEvent.changeValue = 1 ;
  3382                           
  3383                           
  3384                           ;main.c: 776: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3385  05B3  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3386  05B4  0084               	movwf	4
  3387  05B5  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3388  05B6  0085               	movwf	5
  3389  05B7  3F00               	moviw [0]fsr0
  3390  05B8  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3391  05B9  3F01               	moviw [1]fsr0
  3392  05BA  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3393  05BB  3080               	movlw	128
  3394  05BC  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3395                           
  3396                           ;main.c: 777: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.BEAT
      +                          _COUNT ) ;
  3397  05BF  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  3398  05C0  0084               	movwf	4
  3399  05C1  3088               	movlw	high ((_MESSAGE+8)| (0+32768))
  3400  05C2  0085               	movwf	5
  3401  05C3  3F00               	moviw [0]fsr0
  3402  05C4  0020               	movlb	0	; select bank0
  3403  05C5  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3404  05C6  3F01               	moviw [1]fsr0
  3405  05C7  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3406  05C8  30C0               	movlw	192
  3407  05C9  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3408  05CC  2E3E               	goto	l3700
  3409  05CD                     l3684:	
  3410                           ;main.c: 781: case STATE_ADJUST_DURATION:
  3411                           
  3412                           ;main.c: 779: break ;
  3413                           
  3414                           ;main.c: 778: outputEvent.changeValue = 1 ;
  3415                           
  3416                           
  3417                           ;main.c: 782: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3418  05CD  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3419  05CE  0084               	movwf	4
  3420  05CF  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3421  05D0  0085               	movwf	5
  3422  05D1  3F00               	moviw [0]fsr0
  3423  05D2  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3424  05D3  3F01               	moviw [1]fsr0
  3425  05D4  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3426  05D5  3080               	movlw	128
  3427  05D6  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3428                           
  3429                           ;main.c: 783: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.DURA
      +                          TION ) ;
  3430  05D9  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  3431  05DA  0084               	movwf	4
  3432  05DB  3088               	movlw	high ((_MESSAGE+12)| (0+32768))
  3433  05DC  0085               	movwf	5
  3434  05DD  3F00               	moviw [0]fsr0
  3435  05DE  0020               	movlb	0	; select bank0
  3436  05DF  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3437  05E0  3F01               	moviw [1]fsr0
  3438  05E1  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3439  05E2  30C0               	movlw	192
  3440  05E3  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3441  05E6  2E3E               	goto	l3700
  3442  05E7                     l3688:	
  3443                           ;main.c: 787: case STATE_ADJUST_PULSE_WIDTH:
  3444                           
  3445                           ;main.c: 785: break ;
  3446                           
  3447                           ;main.c: 784: outputEvent.changeValue = 1 ;
  3448                           
  3449                           
  3450                           ;main.c: 788: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3451  05E7  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3452  05E8  0084               	movwf	4
  3453  05E9  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3454  05EA  0085               	movwf	5
  3455  05EB  3F00               	moviw [0]fsr0
  3456  05EC  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3457  05ED  3F01               	moviw [1]fsr0
  3458  05EE  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3459  05EF  3080               	movlw	128
  3460  05F0  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3461                           
  3462                           ;main.c: 789: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.PULS
      +                          E_WIDTH ) ;
  3463  05F3  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  3464  05F4  0084               	movwf	4
  3465  05F5  3088               	movlw	high ((_MESSAGE+14)| (0+32768))
  3466  05F6  0085               	movwf	5
  3467  05F7  3F00               	moviw [0]fsr0
  3468  05F8  0020               	movlb	0	; select bank0
  3469  05F9  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3470  05FA  3F01               	moviw [1]fsr0
  3471  05FB  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3472  05FC  30C0               	movlw	192
  3473  05FD  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3474  0600  2E3E               	goto	l3700
  3475  0601                     l3692:	
  3476                           ;main.c: 793: case STATE_ADJUST_OSCILLATOR_TUNE:
  3477                           
  3478                           ;main.c: 791: break ;
  3479                           
  3480                           ;main.c: 790: outputEvent.changeValue = 1 ;
  3481                           
  3482                           
  3483                           ;main.c: 794: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3484  0601  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3485  0602  0084               	movwf	4
  3486  0603  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3487  0604  0085               	movwf	5
  3488  0605  3F00               	moviw [0]fsr0
  3489  0606  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3490  0607  3F01               	moviw [1]fsr0
  3491  0608  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3492  0609  3080               	movlw	128
  3493  060A  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3494                           
  3495                           ;main.c: 795: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.OSCI
      +                          LLATOR_TUNE ) ;
  3496  060D  3010               	movlw	low ((_MESSAGE+16)| (0+32768))
  3497  060E  0084               	movwf	4
  3498  060F  3088               	movlw	high ((_MESSAGE+16)| (0+32768))
  3499  0610  0085               	movwf	5
  3500  0611  3F00               	moviw [0]fsr0
  3501  0612  0020               	movlb	0	; select bank0
  3502  0613  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3503  0614  3F01               	moviw [1]fsr0
  3504  0615  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3505  0616  30C0               	movlw	192
  3506  0617  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3507  061A  2E3E               	goto	l3700
  3508  061B                     l3696:	
  3509                           ;main.c: 799: case STATE_ADJUST_TONE:
  3510                           
  3511                           ;main.c: 797: break ;
  3512                           
  3513                           ;main.c: 796: outputEvent.changeValue = 1 ;
  3514                           
  3515                           
  3516                           ;main.c: 800: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.CONFIGURATION.TITL
      +                          E ) ;
  3517  061B  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  3518  061C  0084               	movwf	4
  3519  061D  3088               	movlw	high ((_MESSAGE+6)| (0+32768))
  3520  061E  0085               	movwf	5
  3521  061F  3F00               	moviw [0]fsr0
  3522  0620  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3523  0621  3F01               	moviw [1]fsr0
  3524  0622  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3525  0623  3080               	movlw	128
  3526  0624  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3527                           
  3528                           ;main.c: 801: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE.CONFIGURATION.TONE
      +                           ) ;
  3529  0627  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  3530  0628  0084               	movwf	4
  3531  0629  3088               	movlw	high ((_MESSAGE+10)| (0+32768))
  3532  062A  0085               	movwf	5
  3533  062B  3F00               	moviw [0]fsr0
  3534  062C  0020               	movlb	0	; select bank0
  3535  062D  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3536  062E  3F01               	moviw [1]fsr0
  3537  062F  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3538  0630  30C0               	movlw	192
  3539  0631  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3540                           
  3541                           ;main.c: 802: _parallel_lcd_WriteCharacter( 0xC0 | 0x5 , menuStateTone.select - MENU_ITE
      +                          M_TONE_ADJUST_TONE0 + '0' ) ;
  3542  0634  0020               	movlb	0	; select bank0
  3543  0635  0856               	movf	_menuStateTone,w
  3544  0636  3E2F               	addlw	47
  3545  0637  00A7               	movwf	??_main
  3546  0638  0827               	movf	??_main,w
  3547  0639  00F6               	movwf	__parallel_lcd_WriteCharacter@character
  3548  063A  30C5               	movlw	197
  3549  063B  318D  25B5  3180   	fcall	__parallel_lcd_WriteCharacter
  3550  063E                     l3700:	
  3551                           
  3552                           ;main.c: 803: outputEvent.changeValue = 1 ;
  3553  063E  0020               	movlb	0	; select bank0
  3554  063F  156B               	bsf	_outputEvent,2
  3555                           
  3556                           ;main.c: 804: break ;
  3557  0640  2ED7               	goto	l402
  3558  0641                     l3702:	
  3559                           ;main.c: 806: case STATE_INFORMATION:
  3560                           
  3561                           
  3562                           ;main.c: 807: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE_INFORMATION[ menuS
      +                          tateInformation.select ] ) ;
  3563  0641  3552               	lslf	_menuStateInformation,w
  3564  0642  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3565  0643  0086               	movwf	6
  3566  0644  0187               	clrf	7
  3567  0645  3F40               	moviw [0]fsr1
  3568  0646  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3569  0647  3F41               	moviw [1]fsr1
  3570  0648  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3571  0649  3080               	movlw	128
  3572  064A  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3573                           
  3574                           ;main.c: 808: _parallel_lcd_WriteString( 0x80 | 0xA , &informationValueBuffer[ menuState
      +                          Information.select ] ) ;
  3575  064D  3007               	movlw	7
  3576  064E  0020               	movlb	0	; select bank0
  3577  064F  00A7               	movwf	??_main
  3578  0650  0827               	movf	??_main,w
  3579  0651  00F4               	movwf	___bmul@multiplicand
  3580  0652  0852               	movf	_menuStateInformation,w
  3581  0653  318D  25C2  3180   	fcall	___bmul
  3582  0656  3EAE               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3583  0657  0020               	movlb	0	; select bank0
  3584  0658  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  3585  0659  3000               	movlw	0
  3586  065A  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3587  065B  308A               	movlw	138
  3588  065C  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  3589                           
  3590                           ;main.c: 809: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , MESSAGE_INFORMATION[ menuS
      +                          tateInformation.select + 1 ] ) ;
  3591  065F  0020               	movlb	0	; select bank0
  3592  0660  3552               	lslf	_menuStateInformation,w
  3593  0661  3E02               	addlw	2
  3594  0662  3EA0               	addlw	(low (_MESSAGE_INFORMATION| 0))& (0+255)
  3595  0663  0086               	movwf	6
  3596  0664  0187               	clrf	7
  3597  0665  3F40               	moviw [0]fsr1
  3598  0666  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3599  0667  3F41               	moviw [1]fsr1
  3600  0668  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3601  0669  30C0               	movlw	192
  3602  066A  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3603                           
  3604                           ;main.c: 810: _parallel_lcd_WriteString( 0xC0 | 0xA , &informationValueBuffer[ menuState
      +                          Information.select + 1 ] ) ;
  3605  066D  3007               	movlw	7
  3606  066E  0020               	movlb	0	; select bank0
  3607  066F  00A7               	movwf	??_main
  3608  0670  0827               	movf	??_main,w
  3609  0671  00F4               	movwf	___bmul@multiplicand
  3610  0672  0852               	movf	_menuStateInformation,w
  3611  0673  3E01               	addlw	1
  3612  0674  318D  25C2  3180   	fcall	___bmul
  3613  0677  3EAE               	addlw	(low (_informationValueBuffer| 0))& (0+255)
  3614  0678  0020               	movlb	0	; select bank0
  3615  0679  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  3616  067A  3000               	movlw	0
  3617  067B  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  3618  067C  30CA               	movlw	202
  3619  067D  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  3620                           
  3621                           ;main.c: 811: break ;
  3622  0680  2ED7               	goto	l402
  3623  0681                     l3708:	
  3624                           ;main.c: 813: case STATE_LOAD:
  3625                           
  3626                           
  3627                           ;main.c: 814: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.LOAD ) ;
  3628  0681  301C               	movlw	low ((_MESSAGE+28)| (0+32768))
  3629  0682  0084               	movwf	4
  3630  0683  3088               	movlw	high ((_MESSAGE+28)| (0+32768))
  3631  0684  0085               	movwf	5
  3632  0685  3F00               	moviw [0]fsr0
  3633  0686  0020               	movlb	0	; select bank0
  3634  0687  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3635  0688  3F01               	moviw [1]fsr0
  3636  0689  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3637  068A  3080               	movlw	128
  3638  068B  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3639                           
  3640                           ;main.c: 815: _parallel_lcd_ClearRow( 0xC0 ) ;
  3641  068E  30C0               	movlw	192
  3642  068F  318E  2627  3180   	fcall	__parallel_lcd_ClearRow
  3643                           
  3644                           ;main.c: 816: break ;
  3645  0692  2ED7               	goto	l402
  3646  0693                     l3712:	
  3647                           ;main.c: 818: case STATE_SAVE:
  3648                           
  3649                           
  3650                           ;main.c: 819: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.SAVE ) ;
  3651  0693  301E               	movlw	low ((_MESSAGE+30)| (0+32768))
  3652  0694  0084               	movwf	4
  3653  0695  3088               	movlw	high ((_MESSAGE+30)| (0+32768))
  3654  0696  0085               	movwf	5
  3655  0697  3F00               	moviw [0]fsr0
  3656  0698  0020               	movlb	0	; select bank0
  3657  0699  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3658  069A  3F01               	moviw [1]fsr0
  3659  069B  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3660  069C  3080               	movlw	128
  3661  069D  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3662                           
  3663                           ;main.c: 820: _parallel_lcd_ClearRow( 0xC0 ) ;
  3664  06A0  30C0               	movlw	192
  3665  06A1  318E  2627  3180   	fcall	__parallel_lcd_ClearRow
  3666                           
  3667                           ;main.c: 821: break ;
  3668  06A4  2ED7               	goto	l402
  3669  06A5                     l3716:	
  3670                           ;main.c: 823: case STATE_INITIALIZE:
  3671                           
  3672                           
  3673                           ;main.c: 824: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.MEMORY.LOAD_DEFAUL
      +                          T ) ;
  3674  06A5  3020               	movlw	low ((_MESSAGE+32)| (0+32768))
  3675  06A6  0084               	movwf	4
  3676  06A7  3088               	movlw	high ((_MESSAGE+32)| (0+32768))
  3677  06A8  0085               	movwf	5
  3678  06A9  3F00               	moviw [0]fsr0
  3679  06AA  0020               	movlb	0	; select bank0
  3680  06AB  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3681  06AC  3F01               	moviw [1]fsr0
  3682  06AD  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3683  06AE  3080               	movlw	128
  3684  06AF  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3685                           
  3686                           ;main.c: 825: _parallel_lcd_ClearRow( 0xC0 ) ;
  3687  06B2  30C0               	movlw	192
  3688  06B3  318E  2627  3180   	fcall	__parallel_lcd_ClearRow
  3689                           
  3690                           ;main.c: 826: break ;
  3691  06B6  2ED7               	goto	l402
  3692  06B7                     l3720:	
  3693                           ;main.c: 828: case STATE_ERROR:
  3694                           
  3695                           
  3696                           ;main.c: 829: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , MESSAGE.ERROR.MESSAGE ) ;
  3697  06B7  3022               	movlw	low ((_MESSAGE+34)| (0+32768))
  3698  06B8  0084               	movwf	4
  3699  06B9  3088               	movlw	high ((_MESSAGE+34)| (0+32768))
  3700  06BA  0085               	movwf	5
  3701  06BB  3F00               	moviw [0]fsr0
  3702  06BC  0020               	movlb	0	; select bank0
  3703  06BD  00A0               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  3704  06BE  3F01               	moviw [1]fsr0
  3705  06BF  00A1               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  3706  06C0  3080               	movlw	128
  3707  06C1  318E  268B  3180   	fcall	__parallel_lcd_WriteStringClearing
  3708                           
  3709                           ;main.c: 830: _parallel_lcd_ClearRow( 0xC0 ) ;
  3710  06C4  30C0               	movlw	192
  3711  06C5  318E  2627  3180   	fcall	__parallel_lcd_ClearRow
  3712                           
  3713                           ;main.c: 832: }
  3714                           
  3715                           ;main.c: 831: break ;
  3716  06C8  2ED7               	goto	l402
  3717  06C9                     l3726:	
  3718  06C9  0020               	movlb	0	; select bank0
  3719  06CA  086A               	movf	_machineState_,w
  3720                           
  3721                           ; Switch size 1, requested type "space"
  3722                           ; Number of cases is 16, Range of values is 1 to 17
  3723                           ; switch strategies available:
  3724                           ; Name         Instructions Cycles
  3725                           ; direct_byte           43     9 (fixed)
  3726                           ; simple_byte           49    25 (average)
  3727                           ; jumptable            263     9 (fixed)
  3728                           ;	Chosen strategy is direct_byte
  3729  06CB  3EFF               	addlw	-1
  3730  06CC  1C03               	skipc
  3731  06CD  2ED7               	goto	l402
  3732  06CE  0084               	movwf	4
  3733  06CF  3011               	movlw	17
  3734  06D0  0204               	subwf	4,w
  3735  06D1  1803               	skipnc
  3736  06D2  2ED7               	goto	l402
  3737  06D3  3189               	movlp	high S3924
  3738  06D4  3504               	lslf	4,w
  3739  06D5  3E7A               	addlw	low S3924
  3740  06D6  0082               	movwf	2
  3741  06D7                     l402:	
  3742                           
  3743                           ;main.c: 834: }
  3744                           ;main.c: 837: if( (outputEvent.changeValue&&!(outputEvent.changeValue=0)) ) {
  3745  06D7  0020               	movlb	0	; select bank0
  3746  06D8  1D6B               	btfss	_outputEvent,2
  3747  06D9  29B5               	goto	l251
  3748  06DA  116B               	bcf	_outputEvent,2
  3749                           
  3750                           ;main.c: 839: uint16 tmpValue ;
  3751                           ;main.c: 840: char valueString[6] = "= 000" ;
  3752  06DB  30A8               	movlw	low main@F3067
  3753  06DC  0086               	movwf	6
  3754  06DD  3000               	movlw	high main@F3067
  3755  06DE  0087               	movwf	7
  3756  06DF  302B               	movlw	low main@valueString
  3757  06E0  0084               	movwf	4
  3758  06E1  3000               	movlw	high main@valueString
  3759  06E2  0085               	movwf	5
  3760  06E3  3006               	movlw	6
  3761  06E4  00A7               	movwf	??_main
  3762  06E5                     u3090:	
  3763  06E5  0016               	moviw fsr1++
  3764  06E6  001A               	movwi fsr0++
  3765  06E7  0BA7               	decfsz	??_main,f
  3766  06E8  2EE5               	goto	u3090
  3767                           
  3768                           ;main.c: 842: switch( machineState_ ) {
  3769  06E9  2F15               	goto	l3744
  3770  06EA                     l3732:	
  3771                           ;main.c: 844: case STATE_METRONOME:
  3772                           
  3773                           
  3774                           ;main.c: 845: tmpValue = config.tempo ;
  3775  06EA  0845               	movf	_config+2,w
  3776  06EB  00BB               	movwf	main@tmpValue+1
  3777  06EC  0844               	movf	_config+1,w
  3778  06ED  00BA               	movwf	main@tmpValue
  3779                           
  3780                           ;main.c: 846: break ;
  3781  06EE  2F1D               	goto	l3746
  3782  06EF                     l435:	
  3783                           ;main.c: 848: case STATE_ADJUST_OSCILLATOR_TUNE:
  3784                           
  3785                           
  3786                           ;main.c: 849: if( (uint08)config.oscillatorTune & 0x80 ) {
  3787  06EF  1FCC               	btfss	_config+9,7
  3788  06F0  2F04               	goto	l3738
  3789                           
  3790                           ;main.c: 850: tmpValue = -config.oscillatorTune ;
  3791  06F1  084C               	movf	_config+9,w
  3792  06F2  00A7               	movwf	??_main
  3793  06F3  01A8               	clrf	??_main+1
  3794  06F4  1BA7               	btfsc	??_main,7
  3795  06F5  03A8               	decf	??_main+1,f
  3796  06F6  09A7               	comf	??_main,f
  3797  06F7  09A8               	comf	??_main+1,f
  3798  06F8  0AA7               	incf	??_main,f
  3799  06F9  1903               	skipnz
  3800  06FA  0AA8               	incf	??_main+1,f
  3801  06FB  0827               	movf	??_main,w
  3802  06FC  00BA               	movwf	main@tmpValue
  3803  06FD  0828               	movf	??_main+1,w
  3804  06FE  00BB               	movwf	main@tmpValue+1
  3805                           
  3806                           ;main.c: 851: valueString[1] = '-' ;
  3807  06FF  302D               	movlw	45
  3808  0700  00A7               	movwf	??_main
  3809  0701  0827               	movf	??_main,w
  3810  0702  00AC               	movwf	main@valueString+1
  3811                           
  3812                           ;main.c: 852: }
  3813  0703  2F1D               	goto	l3746
  3814  0704                     l3738:	
  3815                           
  3816                           ;main.c: 853: else {
  3817                           ;main.c: 854: tmpValue = (uint16)config.oscillatorTune ;
  3818  0704  084C               	movf	_config+9,w
  3819  0705  00BA               	movwf	main@tmpValue
  3820  0706  01BB               	clrf	main@tmpValue+1
  3821  0707  1BBA               	btfsc	main@tmpValue,7
  3822  0708  03BB               	decf	main@tmpValue+1,f
  3823                           
  3824                           ;main.c: 855: }
  3825                           ;main.c: 856: break ;
  3826  0709  2F1D               	goto	l3746
  3827  070A                     l3740:	
  3828                           ;main.c: 858: default:
  3829                           
  3830                           
  3831                           ;main.c: 859: tmpValue = *currentValuePtr ;
  3832  070A  0865               	movf	_currentValuePtr,w
  3833  070B  0086               	movwf	6
  3834  070C  0187               	clrf	7
  3835  070D  0801               	movf	1,w
  3836  070E  00A7               	movwf	??_main
  3837  070F  01A8               	clrf	??_main+1
  3838  0710  0827               	movf	??_main,w
  3839  0711  00BA               	movwf	main@tmpValue
  3840  0712  0828               	movf	??_main+1,w
  3841  0713  00BB               	movwf	main@tmpValue+1
  3842                           
  3843                           ;main.c: 861: }
  3844                           
  3845                           ;main.c: 860: break ;
  3846  0714  2F1D               	goto	l3746
  3847  0715                     l3744:	
  3848  0715  086A               	movf	_machineState_,w
  3849                           
  3850                           ; Switch size 1, requested type "space"
  3851                           ; Number of cases is 2, Range of values is 1 to 8
  3852                           ; switch strategies available:
  3853                           ; Name         Instructions Cycles
  3854                           ; simple_byte            7     4 (average)
  3855                           ; direct_byte           25     9 (fixed)
  3856                           ; jumptable            263     9 (fixed)
  3857                           ;	Chosen strategy is simple_byte
  3858  0716  3A01               	xorlw	1	; case 1
  3859  0717  1903               	skipnz
  3860  0718  2EEA               	goto	l3732
  3861  0719  3A09               	xorlw	9	; case 8
  3862  071A  1903               	skipnz
  3863  071B  2EEF               	goto	l435
  3864  071C  2F0A               	goto	l3740
  3865  071D                     l3746:	
  3866                           
  3867                           ;main.c: 863: uint08 isNonZero = BOOL_FALSE ;
  3868  071D  01B9               	clrf	main@isNonZero
  3869                           
  3870                           ;main.c: 864: for( uint08 i = 2 ; i != 5 ; i++ ) {
  3871  071E  3002               	movlw	2
  3872  071F  00A7               	movwf	??_main
  3873  0720  0827               	movf	??_main,w
  3874  0721  00C2               	movwf	main@i
  3875  0722  2F76               	goto	L30
  3876  0723                     l3754:	
  3877                           ;main.c: 867: case 2: compareUnit = 100 ;
  3878                           
  3879                           ;main.c: 865: uint08 compareUnit ;
  3880                           ;main.c: 866: switch( i ) {
  3881                           
  3882  0723  3064               	movlw	100
  3883  0724  2F26               	goto	L26
  3884  0725                     l3756:	
  3885                           ;main.c: 869: case 3: compareUnit = 10 ;
  3886                           
  3887                           ;main.c: 868: break ;
  3888                           
  3889  0725  300A               	movlw	10
  3890  0726                     L26:	
  3891  0726  00A7               	movwf	??_main
  3892  0727  0827               	movf	??_main,w
  3893  0728  00BD               	movwf	main@compareUnit
  3894                           
  3895                           ;main.c: 870: break ;
  3896  0729  2F38               	goto	l3768
  3897  072A                     l445:	
  3898                           ;main.c: 871: case 4: compareUnit = 1 ;
  3899                           
  3900  072A  01BD               	clrf	main@compareUnit
  3901  072B  0ABD               	incf	main@compareUnit,f
  3902                           
  3903                           ;main.c: 873: }
  3904                           
  3905                           ;main.c: 872: break ;
  3906  072C  2F38               	goto	l3768
  3907  072D                     l3760:	
  3908  072D  0842               	movf	main@i,w
  3909                           
  3910                           ; Switch size 1, requested type "space"
  3911                           ; Number of cases is 3, Range of values is 2 to 4
  3912                           ; switch strategies available:
  3913                           ; Name         Instructions Cycles
  3914                           ; simple_byte           10     6 (average)
  3915                           ; direct_byte           15     9 (fixed)
  3916                           ; jumptable            263     9 (fixed)
  3917                           ;	Chosen strategy is simple_byte
  3918  072E  3A02               	xorlw	2	; case 2
  3919  072F  1903               	skipnz
  3920  0730  2F23               	goto	l3754
  3921  0731  3A01               	xorlw	1	; case 3
  3922  0732  1903               	skipnz
  3923  0733  2F25               	goto	l3756
  3924  0734  3A07               	xorlw	7	; case 4
  3925  0735  1903               	skipnz
  3926  0736  2F2A               	goto	l445
  3927  0737  2F38               	goto	l3768
  3928  0738                     l3768:	
  3929                           ;main.c: 874: while( tmpValue >= compareUnit ) {
  3930                           
  3931  0738  083D               	movf	main@compareUnit,w
  3932  0739  00A7               	movwf	??_main
  3933  073A  01A8               	clrf	??_main+1
  3934  073B  0828               	movf	??_main+1,w
  3935  073C  023B               	subwf	main@tmpValue+1,w
  3936  073D  1D03               	skipz
  3937  073E  2F41               	goto	u3125
  3938  073F  0827               	movf	??_main,w
  3939  0740  023A               	subwf	main@tmpValue,w
  3940  0741                     u3125:	
  3941  0741  1C03               	btfss	3,0
  3942  0742  2F55               	goto	l3770
  3943                           
  3944                           ;main.c: 875: tmpValue -= compareUnit ;
  3945  0743  083D               	movf	main@compareUnit,w
  3946  0744  00A7               	movwf	??_main
  3947  0745  01A8               	clrf	??_main+1
  3948  0746  0827               	movf	??_main,w
  3949  0747  02BA               	subwf	main@tmpValue,f
  3950  0748  0828               	movf	??_main+1,w
  3951  0749  3BBB               	subwfb	main@tmpValue+1,f
  3952                           
  3953                           ;main.c: 876: valueString[i]++ ;
  3954  074A  3001               	movlw	1
  3955  074B  00A7               	movwf	??_main
  3956  074C  0842               	movf	main@i,w
  3957  074D  3E2B               	addlw	(low (main@valueString| 0))& (0+255)
  3958  074E  0086               	movwf	6
  3959  074F  0187               	clrf	7
  3960  0750  0827               	movf	??_main,w
  3961  0751  0781               	addwf	1,f
  3962                           
  3963                           ;main.c: 877: isNonZero = BOOL_TRUE ;
  3964  0752  01B9               	clrf	main@isNonZero
  3965  0753  0AB9               	incf	main@isNonZero,f
  3966  0754  2F38               	goto	l3768
  3967  0755                     l3770:	
  3968                           
  3969                           ;main.c: 878: }
  3970                           ;main.c: 880: if( i == 4 ) break ;
  3971  0755  3004               	movlw	4
  3972  0756  0642               	xorwf	main@i,w
  3973  0757  1903               	btfsc	3,2
  3974  0758  2F7A               	goto	l3784
  3975                           
  3976                           ;main.c: 882: if( isNonZero ) continue ;
  3977  0759  0839               	movf	main@isNonZero,w
  3978  075A  1D03               	btfss	3,2
  3979  075B  2F72               	goto	l3780
  3980                           
  3981                           ;main.c: 884: valueString[i] = valueString[ i - 1 ] ;
  3982  075C  0842               	movf	main@i,w
  3983  075D  3EFF               	addlw	255
  3984  075E  3E2B               	addlw	(low (main@valueString| 0))& (0+255)
  3985  075F  0086               	movwf	6
  3986  0760  0187               	clrf	7
  3987  0761  0801               	movf	1,w
  3988  0762  00A7               	movwf	??_main
  3989  0763  0842               	movf	main@i,w
  3990  0764  3E2B               	addlw	(low (main@valueString| 0))& (0+255)
  3991  0765  0086               	movwf	6
  3992  0766  0187               	clrf	7
  3993  0767  0827               	movf	??_main,w
  3994  0768  0081               	movwf	1
  3995                           
  3996                           ;main.c: 885: valueString[ i - 1 ] = ' ' ;
  3997  0769  3020               	movlw	32
  3998  076A  00A7               	movwf	??_main
  3999  076B  0842               	movf	main@i,w
  4000  076C  3EFF               	addlw	255
  4001  076D  3E2B               	addlw	(low (main@valueString| 0))& (0+255)
  4002  076E  0086               	movwf	6
  4003  076F  0187               	clrf	7
  4004  0770  0827               	movf	??_main,w
  4005  0771  0081               	movwf	1
  4006  0772                     l3780:	
  4007  0772  3001               	movlw	1
  4008  0773  00A7               	movwf	??_main
  4009  0774  0827               	movf	??_main,w
  4010  0775  07C2               	addwf	main@i,f
  4011  0776                     L30:	
  4012  0776  3005               	movlw	5
  4013  0777  0642               	xorwf	main@i,w
  4014  0778  1D03               	btfss	3,2
  4015  0779  2F2D               	goto	l3760
  4016  077A                     l3784:	
  4017                           
  4018                           ;main.c: 887: }
  4019                           ;main.c: 889: _parallel_lcd_WriteString( 0xC0 | 0xB , &valueString ) ;
  4020  077A  302B               	movlw	low main@valueString
  4021  077B  00A2               	movwf	__parallel_lcd_WriteString@stringPtr
  4022  077C  3000               	movlw	high main@valueString
  4023  077D  00A3               	movwf	__parallel_lcd_WriteString@stringPtr+1
  4024  077E  30CB               	movlw	203
  4025  077F  318E  2641  3180   	fcall	__parallel_lcd_WriteString
  4026                           
  4027                           ;main.c: 891: switch( machineState_ ) {
  4028  0782  2F91               	goto	l3794
  4029  0783                     l3786:	
  4030                           ;main.c: 892: case STATE_ADJUST_OSCILLATOR_TUNE:
  4031                           
  4032                           
  4033                           ;main.c: 893: OSCTUNE = config.oscillatorTune ;
  4034  0783  0020               	movlb	0	; select bank0
  4035  0784  084C               	movf	_config+9,w
  4036  0785  0021               	movlb	1	; select bank1
  4037  0786  2F8F               	goto	L27
  4038  0787                     l3788:	
  4039                           ;main.c: 895: case STATE_ADJUST_TONE:
  4040                           
  4041                           ;main.c: 894: break ;
  4042                           
  4043                           
  4044                           ;main.c: 896: PR2 = *currentValuePtr ;
  4045  0787  0020               	movlb	0	; select bank0
  4046  0788  0865               	movf	_currentValuePtr,w
  4047  0789  0086               	movwf	6
  4048  078A  0187               	clrf	7
  4049  078B  0801               	movf	1,w
  4050  078C  009B               	movwf	27	;volatile
  4051                           
  4052                           ;main.c: 897: {CCPR4L=(PR2>>1);} ;
  4053  078D  361B               	lsrf	27,w	;volatile
  4054  078E  0026               	movlb	6	; select bank6
  4055  078F                     L27:	
  4056  078F  0098               	movwf	24	;volatile
  4057                           
  4058                           ;main.c: 899: }
  4059                           
  4060                           ;main.c: 898: break ;
  4061  0790  29B5               	goto	l251
  4062  0791                     l3794:	
  4063  0791  0020               	movlb	0	; select bank0
  4064  0792  086A               	movf	_machineState_,w
  4065                           
  4066                           ; Switch size 1, requested type "space"
  4067                           ; Number of cases is 2, Range of values is 7 to 8
  4068                           ; switch strategies available:
  4069                           ; Name         Instructions Cycles
  4070                           ; simple_byte            7     4 (average)
  4071                           ; direct_byte           13     9 (fixed)
  4072                           ; jumptable            263     9 (fixed)
  4073                           ;	Chosen strategy is simple_byte
  4074  0793  3A07               	xorlw	7	; case 7
  4075  0794  1903               	skipnz
  4076  0795  2F87               	goto	l3788
  4077  0796  3A0F               	xorlw	15	; case 8
  4078  0797  1903               	skipnz
  4079  0798  2F83               	goto	l3786
  4080  0799  29B5               	goto	l251
  4081                           
  4082                           ;main.c: 900: }
  4083                           ;main.c: 902: }
  4084  079A  29B5               	goto	l251
  4085  079B                     __end_of_main:	
  4086                           
  4087                           	psect	swtext1
  4088  09D8                     __pswtext1:	
  4089  09D8                     S3916:	
  4090  09D8  3182  2A9D         	ljmp	l285
  4091  09DA  3182  2AA1         	ljmp	l3410
  4092  09DC  3182  2AA3         	ljmp	l3412
  4093  09DE  3182  2AAB         	ljmp	l3418
  4094  09E0  3182  2AAD         	ljmp	l3420
  4095  09E2  3182  2AAF         	ljmp	l3422
  4096  09E4  3182  2AB1         	ljmp	l3424
  4097  09E6  3182  2AB3         	ljmp	l3426
  4098  09E8  3182  2AB5         	ljmp	l3428
  4099  09EA  3182  2AB7         	ljmp	l3430
  4100                           
  4101                           	psect	swtext2
  4102  0958                     __pswtext2:	
  4103  0958                     S3918:	
  4104  0958  3182  2AF2         	ljmp	l3460
  4105  095A  3182  2AB9         	ljmp	l3434
  4106  095C  3182  2AC5         	ljmp	l3436
  4107  095E  3182  2AFA         	ljmp	l3466
  4108  0960  3182  2AFA         	ljmp	l3466
  4109  0962  3182  2AFA         	ljmp	l3466
  4110  0964  3183  2B00         	ljmp	l323
  4111  0966  3182  2AFD         	ljmp	l322
  4112  0968  3182  2AFA         	ljmp	l3466
  4113  096A  3182  2ADC         	ljmp	l3448
  4114  096C  3183  2B17         	ljmp	l281
  4115  096E  3182  2AD1         	ljmp	l3442
  4116  0970  3183  2B17         	ljmp	l281
  4117  0972  3182  2AE7         	ljmp	l3454
  4118  0974  3183  2B06         	ljmp	l325
  4119  0976  3183  2B17         	ljmp	l281
  4120  0978  3183  2B06         	ljmp	l325
  4121                           
  4122                           	psect	swtext3
  4123  099C                     __pswtext3:	
  4124  099C                     S3920:	
  4125  099C  3184  2C04         	ljmp	l3586
  4126  099E  3183  2B1D         	ljmp	l3478
  4127  09A0  3183  2B1F         	ljmp	l3480
  4128  09A2  3183  2B25         	ljmp	l335
  4129  09A4  3183  2B2C         	ljmp	l336
  4130  09A6  3183  2B33         	ljmp	l337
  4131  09A8  3183  2B4D         	ljmp	l339
  4132  09AA  3183  2B3E         	ljmp	l338
  4133  09AC  3183  2B5B         	ljmp	l3510
  4134  09AE  3183  2B21         	ljmp	l3482
  4135  09B0  3183  2B63         	ljmp	l342
  4136  09B2  3183  2B21         	ljmp	l3482
  4137  09B4  3183  2B62         	ljmp	l341
  4138  09B6  3183  2B21         	ljmp	l3482
  4139  09B8  3184  2C04         	ljmp	l3586
  4140  09BA  3183  2B69         	ljmp	l3518
  4141                           
  4142                           	psect	swtext4
  4143  09BC                     __pswtext4:	
  4144  09BC                     S3922:	
  4145  09BC  3183  2BC0         	ljmp	l358
  4146  09BE  3183  2B82         	ljmp	l350
  4147  09C0  3183  2B82         	ljmp	l350
  4148  09C2  3183  2BE1         	ljmp	l367
  4149  09C4  3183  2BE1         	ljmp	l367
  4150  09C6  3183  2BE1         	ljmp	l367
  4151  09C8  3183  2BE1         	ljmp	l367
  4152  09CA  3183  2BE1         	ljmp	l367
  4153  09CC  3183  2B82         	ljmp	l350
  4154  09CE  3183  2B82         	ljmp	l350
  4155  09D0  3184  2C12         	ljmp	l357
  4156  09D2  3183  2B82         	ljmp	l350
  4157  09D4  3184  2C12         	ljmp	l357
  4158  09D6  3183  2B82         	ljmp	l350
  4159                           
  4160                           	psect	swtext5
  4161  097A                     __pswtext5:	
  4162  097A                     S3924:	
  4163  097A  3185  2D88         	ljmp	l3672
  4164  097C  3184  2C8C         	ljmp	l3646
  4165  097E  3184  2C8C         	ljmp	l3646
  4166  0980  3185  2DB3         	ljmp	l3680
  4167  0982  3185  2DCD         	ljmp	l3684
  4168  0984  3185  2DE7         	ljmp	l3688
  4169  0986  3186  2E1B         	ljmp	l3696
  4170  0988  3186  2E01         	ljmp	l3692
  4171  098A  3186  2E41         	ljmp	l3702
  4172  098C  3185  2D1E         	ljmp	l3658
  4173  098E  3186  2E93         	ljmp	l3712
  4174  0990  3185  2D1E         	ljmp	l3658
  4175  0992  3186  2E81         	ljmp	l3708
  4176  0994  3185  2D1E         	ljmp	l3658
  4177  0996  3186  2EA5         	ljmp	l3716
  4178  0998  3186  2ED7         	ljmp	l402
  4179  099A  3186  2EB7         	ljmp	l3720
  4180                           
  4181                           	psect	text1
  4182  0F0B                     __ptext1:	
  4183 ;; *************** function _initialize *****************
  4184 ;; Defined at:
  4185 ;;		line 5 in file "src/pic16f1827_init.h"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4199 ;;      Params:         0       0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0
  4202 ;;      Totals:         0       0       0       0       0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    1
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_main
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _initialize
  4215  0F0B                     _initialize:	
  4216                           
  4217                           ;pic16f1827_init.h: 8: OSCCONbits.IRCF = 0b1110 ;
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _initialize: [wreg+status,2+status,0]
  4221  0F0B  0021               	movlb	1	; select bank1
  4222  0F0C  0819               	movf	25,w	;volatile
  4223  0F0D  3987               	andlw	-121
  4224  0F0E  3870               	iorlw	112
  4225  0F0F  0099               	movwf	25	;volatile
  4226                           
  4227                           ;pic16f1827_init.h: 9: OSCCONbits.SCS = 0b00 ;
  4228  0F10  30FC               	movlw	-4
  4229  0F11  0599               	andwf	25,f	;volatile
  4230                           
  4231                           ;pic16f1827_init.h: 10: OSCCONbits.SPLLEN = 1 ;
  4232  0F12  1799               	bsf	25,7	;volatile
  4233                           
  4234                           ;pic16f1827_init.h: 11: OSCTUNEbits.TUN = 0b000000 ;
  4235  0F13  30C0               	movlw	-64
  4236  0F14  0598               	andwf	24,f	;volatile
  4237                           
  4238                           ;pic16f1827_init.h: 14: WDTCONbits.WDTPS = 0b01111 ;
  4239  0F15  0817               	movf	23,w	;volatile
  4240  0F16  39C1               	andlw	-63
  4241  0F17  381E               	iorlw	30
  4242  0F18  0097               	movwf	23	;volatile
  4243                           
  4244                           ;pic16f1827_init.h: 17: INTCONbits.GIE = 0 ;
  4245  0F19  138B               	bcf	11,7	;volatile
  4246                           
  4247                           ;pic16f1827_init.h: 18: INTCONbits.PEIE = 0 ;
  4248  0F1A  130B               	bcf	11,6	;volatile
  4249                           
  4250                           ;pic16f1827_init.h: 21: OPTION_REGbits.PSA = 1 ;
  4251  0F1B  1595               	bsf	21,3	;volatile
  4252                           
  4253                           ;pic16f1827_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  4254  0F1C  1295               	bcf	21,5	;volatile
  4255                           
  4256                           ;pic16f1827_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  4257  0F1D  1615               	bsf	21,4	;volatile
  4258                           
  4259                           ;pic16f1827_init.h: 24: TMR0 = 0x00 ;
  4260  0F1E  0020               	movlb	0	; select bank0
  4261  0F1F  0195               	clrf	21	;volatile
  4262                           
  4263                           ;pic16f1827_init.h: 25: INTCONbits.TMR0IE = 0 ;
  4264  0F20  128B               	bcf	11,5	;volatile
  4265                           
  4266                           ;pic16f1827_init.h: 26: INTCONbits.TMR0IF = 0 ;
  4267  0F21  110B               	bcf	11,2	;volatile
  4268                           
  4269                           ;pic16f1827_init.h: 29: T1CONbits.TMR1ON = 0 ;
  4270  0F22  1018               	bcf	24,0	;volatile
  4271                           
  4272                           ;pic16f1827_init.h: 30: T1CONbits.TMR1CS = 0b00 ;
  4273  0F23  303F               	movlw	-193
  4274  0F24  0598               	andwf	24,f	;volatile
  4275                           
  4276                           ;pic16f1827_init.h: 31: T1CONbits.T1CKPS = 0b11 ;
  4277  0F25  3030               	movlw	48
  4278  0F26  0498               	iorwf	24,f	;volatile
  4279                           
  4280                           ;pic16f1827_init.h: 32: T1CONbits.nT1SYNC = 0 ;
  4281  0F27  1118               	bcf	24,2	;volatile
  4282                           
  4283                           ;pic16f1827_init.h: 33: TMR1 = 0x0000 ;
  4284  0F28  0196               	clrf	22	;volatile
  4285  0F29  0197               	clrf	23	;volatile
  4286                           
  4287                           ;pic16f1827_init.h: 34: PIR1bits.TMR1IF = 0 ;
  4288  0F2A  1011               	bcf	17,0	;volatile
  4289                           
  4290                           ;pic16f1827_init.h: 35: PIE1bits.TMR1IE = 0 ;
  4291  0F2B  0021               	movlb	1	; select bank1
  4292  0F2C  1011               	bcf	17,0	;volatile
  4293                           
  4294                           ;pic16f1827_init.h: 38: T2CONbits.TMR2ON = 0 ;
  4295  0F2D  0020               	movlb	0	; select bank0
  4296  0F2E  111C               	bcf	28,2	;volatile
  4297                           
  4298                           ;pic16f1827_init.h: 39: T2CONbits.T2OUTPS = 0b0000 ;
  4299  0F2F  3087               	movlw	-121
  4300  0F30  059C               	andwf	28,f	;volatile
  4301                           
  4302                           ;pic16f1827_init.h: 40: T2CONbits.T2CKPS = 0b11 ;
  4303  0F31  3003               	movlw	3
  4304  0F32  049C               	iorwf	28,f	;volatile
  4305                           
  4306                           ;pic16f1827_init.h: 41: PR2 = 124 ;
  4307  0F33  307C               	movlw	124
  4308  0F34  009B               	movwf	27	;volatile
  4309                           
  4310                           ;pic16f1827_init.h: 42: TMR2 = 0x00 ;
  4311  0F35  019A               	clrf	26	;volatile
  4312                           
  4313                           ;pic16f1827_init.h: 43: PIR1bits.TMR2IF = 0 ;
  4314  0F36  1091               	bcf	17,1	;volatile
  4315                           
  4316                           ;pic16f1827_init.h: 44: PIE1bits.TMR2IE = 0 ;
  4317  0F37  0021               	movlb	1	; select bank1
  4318  0F38  1091               	bcf	17,1	;volatile
  4319                           
  4320                           ;pic16f1827_init.h: 47: T4CONbits.TMR4ON = 0 ;
  4321  0F39  0028               	movlb	8	; select bank8
  4322  0F3A  1117               	bcf	23,2	;volatile
  4323                           
  4324                           ;pic16f1827_init.h: 48: T4CONbits.T4OUTPS = 0b0000 ;
  4325  0F3B  3087               	movlw	-121
  4326  0F3C  0597               	andwf	23,f	;volatile
  4327                           
  4328                           ;pic16f1827_init.h: 49: T4CONbits.T4CKPS = 0b01 ;
  4329  0F3D  0817               	movf	23,w	;volatile
  4330  0F3E  39FC               	andlw	-4
  4331  0F3F  3801               	iorlw	1
  4332  0F40  0097               	movwf	23	;volatile
  4333                           
  4334                           ;pic16f1827_init.h: 50: PR4 = 79 ;
  4335  0F41  304F               	movlw	79
  4336  0F42  0096               	movwf	22	;volatile
  4337                           
  4338                           ;pic16f1827_init.h: 51: TMR4 = 0x00 ;
  4339  0F43  0195               	clrf	21	;volatile
  4340                           
  4341                           ;pic16f1827_init.h: 52: PIR3bits.TMR4IF = 0 ;
  4342  0F44  0020               	movlb	0	; select bank0
  4343  0F45  1093               	bcf	19,1	;volatile
  4344                           
  4345                           ;pic16f1827_init.h: 53: PIE3bits.TMR4IE = 0 ;
  4346  0F46  0021               	movlb	1	; select bank1
  4347  0F47  1093               	bcf	19,1	;volatile
  4348                           
  4349                           ;pic16f1827_init.h: 56: T6CONbits.TMR6ON = 0 ;
  4350  0F48  0028               	movlb	8	; select bank8
  4351  0F49  111E               	bcf	30,2	;volatile
  4352                           
  4353                           ;pic16f1827_init.h: 57: T6CONbits.T6OUTPS = 0b0000 ;
  4354  0F4A  3087               	movlw	-121
  4355  0F4B  059E               	andwf	30,f	;volatile
  4356                           
  4357                           ;pic16f1827_init.h: 58: T6CONbits.T6CKPS = 0b00 ;
  4358  0F4C  30FC               	movlw	-4
  4359  0F4D  059E               	andwf	30,f	;volatile
  4360                           
  4361                           ;pic16f1827_init.h: 59: PR6 = 124 ;
  4362  0F4E  307C               	movlw	124
  4363  0F4F  009D               	movwf	29	;volatile
  4364                           
  4365                           ;pic16f1827_init.h: 60: TMR6 = 0x00 ;
  4366  0F50  019C               	clrf	28	;volatile
  4367                           
  4368                           ;pic16f1827_init.h: 61: PIR3bits.TMR6IF = 0 ;
  4369  0F51  0020               	movlb	0	; select bank0
  4370  0F52  1193               	bcf	19,3	;volatile
  4371                           
  4372                           ;pic16f1827_init.h: 62: PIE3bits.TMR6IE = 0 ;
  4373  0F53  0021               	movlb	1	; select bank1
  4374  0F54  1193               	bcf	19,3	;volatile
  4375                           
  4376                           ;pic16f1827_init.h: 65: CCPTMRS = 0b00000000 ;
  4377  0F55  0025               	movlb	5	; select bank5
  4378  0F56  019E               	clrf	30	;volatile
  4379                           
  4380                           ;pic16f1827_init.h: 66: CCP1CONbits.CCP1M = 0b0000 ;
  4381  0F57  30F0               	movlw	-16
  4382  0F58  0593               	andwf	19,f	;volatile
  4383                           
  4384                           ;pic16f1827_init.h: 67: CCP2CONbits.CCP2M = 0b0000 ;
  4385  0F59  30F0               	movlw	-16
  4386  0F5A  059A               	andwf	26,f	;volatile
  4387                           
  4388                           ;pic16f1827_init.h: 68: CCP3CONbits.CCP3M = 0b0000 ;
  4389  0F5B  30F0               	movlw	-16
  4390  0F5C  0026               	movlb	6	; select bank6
  4391  0F5D  0593               	andwf	19,f	;volatile
  4392                           
  4393                           ;pic16f1827_init.h: 71: CCP4CONbits.CCP4M = 0b1100 ;
  4394  0F5E  081A               	movf	26,w	;volatile
  4395  0F5F  39F0               	andlw	-16
  4396  0F60  380C               	iorlw	12
  4397  0F61  009A               	movwf	26	;volatile
  4398                           
  4399                           ;pic16f1827_init.h: 72: CCP4CONbits.DC4B = 0b00 ;
  4400  0F62  30CF               	movlw	-49
  4401  0F63  059A               	andwf	26,f	;volatile
  4402                           
  4403                           ;pic16f1827_init.h: 73: CCPTMRSbits.C4TSEL = 0b00 ;
  4404  0F64  303F               	movlw	-193
  4405  0F65  0025               	movlb	5	; select bank5
  4406  0F66  059E               	andwf	30,f	;volatile
  4407                           
  4408                           ;pic16f1827_init.h: 74: CCPR4L = 0 ;
  4409  0F67  0026               	movlb	6	; select bank6
  4410  0F68  0198               	clrf	24	;volatile
  4411                           
  4412                           ;pic16f1827_init.h: 75: CCPR4H = 0 ;
  4413  0F69  0199               	clrf	25	;volatile
  4414                           
  4415                           ;pic16f1827_init.h: 78: ANSELA = 0b00000000 ;
  4416  0F6A  0023               	movlb	3	; select bank3
  4417  0F6B  018C               	clrf	12	;volatile
  4418                           
  4419                           ;pic16f1827_init.h: 79: ANSELB = 0b00000000 ;
  4420  0F6C  018D               	clrf	13	;volatile
  4421                           
  4422                           ;pic16f1827_init.h: 81: TRISA = 0b11100000 ;
  4423  0F6D  30E0               	movlw	224
  4424  0F6E  0021               	movlb	1	; select bank1
  4425  0F6F  008C               	movwf	12	;volatile
  4426                           
  4427                           ;pic16f1827_init.h: 82: TRISB = 0b00000000 ;
  4428  0F70  018D               	clrf	13	;volatile
  4429  0F71  0008               	return
  4430  0F72                     __end_of_initialize:	
  4431                           
  4432                           	psect	text2
  4433  0E8B                     __ptext2:	
  4434 ;; *************** function __parallel_lcd_WriteStringClearing *****************
  4435 ;; Defined at:
  4436 ;;		line 73 in file "src/../../_Common/parallel_LCD.h"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  position        1    wreg     unsigned char 
  4439 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  4440 ;;		 -> STR_36(9), STR_35(12), STR_34(6), STR_33(7), 
  4441 ;;		 -> STR_32(4), STR_31(4), STR_27(10), STR_26(12), 
  4442 ;;		 -> STR_25(9), STR_24(5), STR_23(11), STR_22(7), 
  4443 ;;		 -> STR_21(6), STR_19(10), STR_18(11), STR_17(11), 
  4444 ;;		 -> STR_16(11), STR_15(8), STR_14(6), STR_13(6), 
  4445 ;;		 -> STR_12(6), STR_11(9), STR_10(6), STR_9(5), 
  4446 ;;		 -> STR_8(5), STR_7(5), STR_6(10), STR_5(13), 
  4447 ;;		 -> STR_4(14), STR_3(10), STR_2(11), STR_1(9), 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  position        1    2[BANK0 ] unsigned char 
  4450 ;;  i               1    3[BANK0 ] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;		None               void
  4453 ;; Registers used:
  4454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4460 ;;      Params:         0       2       0       0       0       0
  4461 ;;      Locals:         0       2       0       0       0       0
  4462 ;;      Temps:          1       0       0       0       0       0
  4463 ;;      Totals:         1       4       0       0       0       0
  4464 ;;Total ram usage:        5 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    2
  4467 ;; This function calls:
  4468 ;;		__private_parallel_lcd_WriteByte
  4469 ;; This function is called by:
  4470 ;;		_main
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           
  4475                           ;psect for function __parallel_lcd_WriteStringClearing
  4476  0E8B                     __parallel_lcd_WriteStringClearing:	
  4477                           
  4478                           ;incstack = 0
  4479                           ; Regs used in __parallel_lcd_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  4480                           ;__parallel_lcd_WriteStringClearing@position stored from wreg
  4481  0E8B  0020               	movlb	0	; select bank0
  4482  0E8C  00A2               	movwf	__parallel_lcd_WriteStringClearing@position
  4483                           
  4484                           ;parallel_LCD.h: 74: _private_parallel_lcd_WriteByte( position & 0xF0 , 0 ) ;
  4485  0E8D  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4486  0E8E  0822               	movf	__parallel_lcd_WriteStringClearing@position,w
  4487  0E8F  39F0               	andlw	240
  4488  0E90  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4489                           
  4490                           ;parallel_LCD.h: 75: for ( uint08 i = 0 ; i != 16 ; i++ ) {
  4491  0E93  0020               	movlb	0	; select bank0
  4492  0E94  01A3               	clrf	__parallel_lcd_WriteStringClearing@i
  4493  0E95                     L33:	
  4494  0E95  3010               	movlw	16
  4495  0E96  0623               	xorwf	__parallel_lcd_WriteStringClearing@i,w
  4496  0E97  1903               	btfsc	3,2
  4497  0E98  0008               	return
  4498                           
  4499                           ;parallel_LCD.h: 76: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4500  0E99  0822               	movf	__parallel_lcd_WriteStringClearing@position,w
  4501  0E9A  390F               	andlw	15
  4502  0E9B  0223               	subwf	__parallel_lcd_WriteStringClearing@i,w
  4503  0E9C  1C03               	skipc
  4504  0E9D  2EB5               	goto	l3116
  4505  0E9E  0820               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4506  0E9F  0084               	movwf	4
  4507  0EA0  0821               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4508  0EA1  0085               	movwf	5
  4509  0EA2  0012               	moviw fsr0++
  4510  0EA3  1903               	btfsc	3,2
  4511  0EA4  2EB5               	goto	l3116
  4512                           
  4513                           ;parallel_LCD.h: 77: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4514  0EA5  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4515  0EA6  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4516  0EA7  0820               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  4517  0EA8  0084               	movwf	4
  4518  0EA9  0821               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  4519  0EAA  0085               	movwf	5
  4520  0EAB  0800               	movf	0,w	;code access
  4521  0EAC  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4522  0EAF  3001               	movlw	1
  4523  0EB0  0020               	movlb	0	; select bank0
  4524  0EB1  07A0               	addwf	__parallel_lcd_WriteStringClearing@stringPtr,f
  4525  0EB2  3000               	movlw	0
  4526  0EB3  3DA1               	addwfc	__parallel_lcd_WriteStringClearing@stringPtr+1,f
  4527  0EB4  2EBB               	goto	l3118
  4528  0EB5                     l3116:	
  4529                           
  4530                           ;parallel_LCD.h: 78: else
  4531                           ;parallel_LCD.h: 79: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4532  0EB5  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4533  0EB6  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4534  0EB7  3020               	movlw	32
  4535  0EB8  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4536  0EBB                     l3118:	
  4537  0EBB  3001               	movlw	1
  4538  0EBC  00F6               	movwf	??__parallel_lcd_WriteStringClearing
  4539  0EBD  0876               	movf	??__parallel_lcd_WriteStringClearing,w
  4540  0EBE  0020               	movlb	0	; select bank0
  4541  0EBF  07A3               	addwf	__parallel_lcd_WriteStringClearing@i,f
  4542  0EC0  2E95               	goto	L33
  4543  0EC1                     __end_of__parallel_lcd_WriteStringClearing:	
  4544                           
  4545                           	psect	text3
  4546  0E41                     __ptext3:	
  4547 ;; *************** function __parallel_lcd_WriteString *****************
  4548 ;; Defined at:
  4549 ;;		line 64 in file "src/../../_Common/parallel_LCD.h"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  position        1    wreg     unsigned char 
  4552 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  4553 ;;		 -> main@valueString(6), informationValueBuffer(28), STR_30(8), STR_29(7), 
  4554 ;;		 -> STR_28(7), STR_20(7), 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  position        1    4[BANK0 ] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;		None               void
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4566 ;;      Params:         0       2       0       0       0       0
  4567 ;;      Locals:         0       1       0       0       0       0
  4568 ;;      Temps:          1       0       0       0       0       0
  4569 ;;      Totals:         1       3       0       0       0       0
  4570 ;;Total ram usage:        4 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    2
  4573 ;; This function calls:
  4574 ;;		__private_parallel_lcd_WriteByte
  4575 ;; This function is called by:
  4576 ;;		_main
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function __parallel_lcd_WriteString
  4582  0E41                     __parallel_lcd_WriteString:	
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in __parallel_lcd_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4586                           ;__parallel_lcd_WriteString@position stored from wreg
  4587  0E41  0020               	movlb	0	; select bank0
  4588  0E42  00A4               	movwf	__parallel_lcd_WriteString@position
  4589                           
  4590                           ;parallel_LCD.h: 65: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4591  0E43  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4592  0E44  0824               	movf	__parallel_lcd_WriteString@position,w
  4593  0E45  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4594  0E48                     l3098:	
  4595                           ;parallel_LCD.h: 66: while ( *stringPtr ) {
  4596                           
  4597  0E48  0020               	movlb	0	; select bank0
  4598  0E49  0822               	movf	__parallel_lcd_WriteString@stringPtr,w
  4599  0E4A  0084               	movwf	4
  4600  0E4B  0823               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4601  0E4C  0085               	movwf	5
  4602  0E4D  0012               	moviw fsr0++
  4603  0E4E  1903               	btfsc	3,2
  4604  0E4F  0008               	return
  4605                           
  4606                           ;parallel_LCD.h: 67: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  4607  0E50  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4608  0E51  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4609  0E52  0020               	movlb	0	; select bank0
  4610  0E53  0822               	movf	__parallel_lcd_WriteString@stringPtr,w
  4611  0E54  0084               	movwf	4
  4612  0E55  0823               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  4613  0E56  0085               	movwf	5
  4614  0E57  0800               	movf	0,w	;code access
  4615  0E58  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4616  0E5B  3001               	movlw	1
  4617  0E5C  0020               	movlb	0	; select bank0
  4618  0E5D  07A2               	addwf	__parallel_lcd_WriteString@stringPtr,f
  4619  0E5E  3000               	movlw	0
  4620  0E5F  3DA3               	addwfc	__parallel_lcd_WriteString@stringPtr+1,f
  4621  0E60  2E48               	goto	l3098
  4622  0E61                     __end_of__parallel_lcd_WriteString:	
  4623                           
  4624                           	psect	text4
  4625  0DB5                     __ptext4:	
  4626 ;; *************** function __parallel_lcd_WriteCharacter *****************
  4627 ;; Defined at:
  4628 ;;		line 57 in file "src/../../_Common/parallel_LCD.h"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  position        1    wreg     unsigned char 
  4631 ;;  character       1    6[COMMON] unsigned char 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  position        1    0[BANK0 ] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;		None               void
  4636 ;; Registers used:
  4637 ;;		wreg, status,2, status,0, pclath, cstack
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4643 ;;      Params:         1       0       0       0       0       0
  4644 ;;      Locals:         0       1       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0
  4646 ;;      Totals:         1       1       0       0       0       0
  4647 ;;Total ram usage:        2 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    2
  4650 ;; This function calls:
  4651 ;;		__private_parallel_lcd_WriteByte
  4652 ;; This function is called by:
  4653 ;;		_main
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function __parallel_lcd_WriteCharacter
  4659  0DB5                     __parallel_lcd_WriteCharacter:	
  4660                           
  4661                           ;incstack = 0
  4662                           ; Regs used in __parallel_lcd_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4663                           ;__parallel_lcd_WriteCharacter@position stored from wreg
  4664  0DB5  0020               	movlb	0	; select bank0
  4665  0DB6  00A0               	movwf	__parallel_lcd_WriteCharacter@position
  4666                           
  4667                           ;parallel_LCD.h: 58: _private_parallel_lcd_WriteByte( position , 0 ) ;
  4668  0DB7  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4669  0DB8  0820               	movf	__parallel_lcd_WriteCharacter@position,w
  4670  0DB9  318D  25FA  318D   	fcall	__private_parallel_lcd_WriteByte
  4671                           
  4672                           ;parallel_LCD.h: 59: _private_parallel_lcd_WriteByte( character , 1 ) ;
  4673  0DBC  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4674  0DBD  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4675  0DBE  0876               	movf	__parallel_lcd_WriteCharacter@character,w
  4676  0DBF  318D  25FA         	fcall	__private_parallel_lcd_WriteByte
  4677  0DC1  0008               	return
  4678  0DC2                     __end_of__parallel_lcd_WriteCharacter:	
  4679                           
  4680                           	psect	text5
  4681  0E61                     __ptext5:	
  4682 ;; *************** function __parallel_lcd_SetCgram *****************
  4683 ;; Defined at:
  4684 ;;		line 110 in file "src/../../_Common/parallel_LCD.h"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  charCode        1    wreg     unsigned char 
  4687 ;;  bitmap          2    0[BANK0 ] PTR const unsigned char 
  4688 ;;		 -> BITMAP(24), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  charCode        1    2[BANK0 ] unsigned char 
  4691 ;;  i               1    3[BANK0 ] unsigned char 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4701 ;;      Params:         0       2       0       0       0       0
  4702 ;;      Locals:         0       2       0       0       0       0
  4703 ;;      Temps:          1       0       0       0       0       0
  4704 ;;      Totals:         1       4       0       0       0       0
  4705 ;;Total ram usage:        5 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    2
  4708 ;; This function calls:
  4709 ;;		__private_parallel_lcd_WriteByte
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           
  4716                           ;psect for function __parallel_lcd_SetCgram
  4717  0E61                     __parallel_lcd_SetCgram:	
  4718                           
  4719                           ;incstack = 0
  4720                           ; Regs used in __parallel_lcd_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4721                           ;__parallel_lcd_SetCgram@charCode stored from wreg
  4722  0E61  0020               	movlb	0	; select bank0
  4723  0E62  00A2               	movwf	__parallel_lcd_SetCgram@charCode
  4724                           
  4725                           ;parallel_LCD.h: 111: _private_parallel_lcd_WriteByte( ( ( charCode << 3 ) & 0b00111111 
      +                          ) | 0b01000000 , 0 ) ;
  4726  0E63  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4727  0E64  0822               	movf	__parallel_lcd_SetCgram@charCode,w
  4728  0E65  00F6               	movwf	??__parallel_lcd_SetCgram
  4729  0E66  3002               	movlw	2
  4730  0E67                     u2345:	
  4731  0E67  35F6               	lslf	??__parallel_lcd_SetCgram,f
  4732  0E68  3EFF               	addlw	-1
  4733  0E69  1D03               	skipz
  4734  0E6A  2E67               	goto	u2345
  4735  0E6B  3576               	lslf	??__parallel_lcd_SetCgram,w
  4736  0E6C  393F               	andlw	63
  4737  0E6D  3840               	iorlw	64
  4738  0E6E  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4739                           
  4740                           ;parallel_LCD.h: 112: for ( uint08 i = 0 ; i != 8 ; i++ , bitmap++ )
  4741  0E71  0020               	movlb	0	; select bank0
  4742  0E72  01A3               	clrf	__parallel_lcd_SetCgram@i
  4743  0E73                     L34:	
  4744  0E73  3008               	movlw	8
  4745  0E74  0623               	xorwf	__parallel_lcd_SetCgram@i,w
  4746  0E75  1903               	btfsc	3,2
  4747  0E76  0008               	return
  4748                           
  4749                           ;parallel_LCD.h: 113: _private_parallel_lcd_WriteByte( *bitmap , 1 ) ;
  4750  0E77  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4751  0E78  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4752  0E79  0820               	movf	__parallel_lcd_SetCgram@bitmap,w
  4753  0E7A  0084               	movwf	4
  4754  0E7B  0821               	movf	__parallel_lcd_SetCgram@bitmap+1,w
  4755  0E7C  0085               	movwf	5
  4756  0E7D  0800               	movf	0,w	;code access
  4757  0E7E  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4758  0E81  3001               	movlw	1
  4759  0E82  00F6               	movwf	??__parallel_lcd_SetCgram
  4760  0E83  0876               	movf	??__parallel_lcd_SetCgram,w
  4761  0E84  0020               	movlb	0	; select bank0
  4762  0E85  07A3               	addwf	__parallel_lcd_SetCgram@i,f
  4763  0E86  3001               	movlw	1
  4764  0E87  07A0               	addwf	__parallel_lcd_SetCgram@bitmap,f
  4765  0E88  3000               	movlw	0
  4766  0E89  3DA1               	addwfc	__parallel_lcd_SetCgram@bitmap+1,f
  4767  0E8A  2E73               	goto	L34
  4768  0E8B                     __end_of__parallel_lcd_SetCgram:	
  4769                           
  4770                           	psect	text6
  4771  0DE6                     __ptext6:	
  4772 ;; *************** function __parallel_lcd_Initialize *****************
  4773 ;; Defined at:
  4774 ;;		line 48 in file "src/../../_Common/parallel_LCD.h"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;		None               void
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4788 ;;      Params:         0       0       0       0       0       0
  4789 ;;      Locals:         0       0       0       0       0       0
  4790 ;;      Temps:          0       0       0       0       0       0
  4791 ;;      Totals:         0       0       0       0       0       0
  4792 ;;Total ram usage:        0 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    2
  4795 ;; This function calls:
  4796 ;;		__private_parallel_lcd_WriteByte
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function __parallel_lcd_Initialize
  4804  0DE6                     __parallel_lcd_Initialize:	
  4805                           
  4806                           ;parallel_LCD.h: 49: _private_parallel_lcd_WriteByte( 0x20 | 0x10 | 0x08 | 0x00 , 0 ) ;
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in __parallel_lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4810  0DE6  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4811  0DE7  3038               	movlw	56
  4812  0DE8  318D  25FA  318D   	fcall	__private_parallel_lcd_WriteByte
  4813                           
  4814                           ;parallel_LCD.h: 50: _private_parallel_lcd_WriteByte( 0x08 | 0x04 , 0 ) ;
  4815  0DEB  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4816  0DEC  300C               	movlw	12
  4817  0DED  318D  25FA  318D   	fcall	__private_parallel_lcd_WriteByte
  4818                           
  4819                           ;parallel_LCD.h: 51: _private_parallel_lcd_WriteByte( 0x10 | 0x00 | 0x00 , 0 ) ;
  4820  0DF0  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4821  0DF1  3010               	movlw	16
  4822  0DF2  318D  25FA  318D   	fcall	__private_parallel_lcd_WriteByte
  4823                           
  4824                           ;parallel_LCD.h: 52: _private_parallel_lcd_WriteByte( 0x04 | 0x02 | 0x00 , 0 ) ;
  4825  0DF5  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4826  0DF6  3006               	movlw	6
  4827  0DF7  318D  25FA         	fcall	__private_parallel_lcd_WriteByte
  4828  0DF9  0008               	return
  4829  0DFA                     __end_of__parallel_lcd_Initialize:	
  4830                           
  4831                           	psect	text7
  4832  0E27                     __ptext7:	
  4833 ;; *************** function __parallel_lcd_ClearRow *****************
  4834 ;; Defined at:
  4835 ;;		line 94 in file "src/../../_Common/parallel_LCD.h"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  rowSelect       1    wreg     unsigned char 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  rowSelect       1    0[BANK0 ] unsigned char 
  4840 ;;  i               1    1[BANK0 ] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;		None               void
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4850 ;;      Params:         0       0       0       0       0       0
  4851 ;;      Locals:         0       2       0       0       0       0
  4852 ;;      Temps:          1       0       0       0       0       0
  4853 ;;      Totals:         1       2       0       0       0       0
  4854 ;;Total ram usage:        3 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    2
  4857 ;; This function calls:
  4858 ;;		__private_parallel_lcd_WriteByte
  4859 ;; This function is called by:
  4860 ;;		_main
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           
  4865                           ;psect for function __parallel_lcd_ClearRow
  4866  0E27                     __parallel_lcd_ClearRow:	
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in __parallel_lcd_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  4870                           ;__parallel_lcd_ClearRow@rowSelect stored from wreg
  4871  0E27  0020               	movlb	0	; select bank0
  4872  0E28  00A0               	movwf	__parallel_lcd_ClearRow@rowSelect
  4873                           
  4874                           ;parallel_LCD.h: 95: _private_parallel_lcd_WriteByte( rowSelect & 0xF0 , 0 ) ;
  4875  0E29  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4876  0E2A  0820               	movf	__parallel_lcd_ClearRow@rowSelect,w
  4877  0E2B  39F0               	andlw	240
  4878  0E2C  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4879                           
  4880                           ;parallel_LCD.h: 96: for ( uint08 i = 0 ; i != 16 ; i++ )
  4881  0E2F  0020               	movlb	0	; select bank0
  4882  0E30  01A1               	clrf	__parallel_lcd_ClearRow@i
  4883  0E31                     L35:	
  4884  0E31  3010               	movlw	16
  4885  0E32  0621               	xorwf	__parallel_lcd_ClearRow@i,w
  4886  0E33  1903               	btfsc	3,2
  4887  0E34  0008               	return
  4888                           
  4889                           ;parallel_LCD.h: 97: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  4890  0E35  01F4               	clrf	__private_parallel_lcd_WriteByte@r
  4891  0E36  0AF4               	incf	__private_parallel_lcd_WriteByte@r,f
  4892  0E37  3020               	movlw	32
  4893  0E38  318D  25FA  318E   	fcall	__private_parallel_lcd_WriteByte
  4894  0E3B  3001               	movlw	1
  4895  0E3C  00F6               	movwf	??__parallel_lcd_ClearRow
  4896  0E3D  0876               	movf	??__parallel_lcd_ClearRow,w
  4897  0E3E  0020               	movlb	0	; select bank0
  4898  0E3F  07A1               	addwf	__parallel_lcd_ClearRow@i,f
  4899  0E40  2E31               	goto	L35
  4900  0E41                     __end_of__parallel_lcd_ClearRow:	
  4901                           
  4902                           	psect	text8
  4903  0DFA                     __ptext8:	
  4904 ;; *************** function __private_parallel_lcd_WriteByte *****************
  4905 ;; Defined at:
  4906 ;;		line 131 in file "src/../../_Common/parallel_LCD.h"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  data            1    wreg     unsigned char 
  4909 ;;  r               1    4[COMMON] unsigned char 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  data            1    5[COMMON] unsigned char 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;		None               void
  4914 ;; Registers used:
  4915 ;;		wreg, status,2, status,0
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4921 ;;      Params:         1       0       0       0       0       0
  4922 ;;      Locals:         1       0       0       0       0       0
  4923 ;;      Temps:          0       0       0       0       0       0
  4924 ;;      Totals:         2       0       0       0       0       0
  4925 ;;Total ram usage:        2 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    1
  4928 ;; This function calls:
  4929 ;;		Nothing
  4930 ;; This function is called by:
  4931 ;;		__parallel_lcd_Initialize
  4932 ;;		__parallel_lcd_WriteCharacter
  4933 ;;		__parallel_lcd_WriteString
  4934 ;;		__parallel_lcd_WriteStringClearing
  4935 ;;		__parallel_lcd_ClearRow
  4936 ;;		__parallel_lcd_SetCgram
  4937 ;;		__parallel_lcd_WriteHexNumber
  4938 ;;		__parallel_lcd_ClearPartial
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function __private_parallel_lcd_WriteByte
  4944  0DFA                     __private_parallel_lcd_WriteByte:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in __private_parallel_lcd_WriteByte: [wreg+status,2+status,0]
  4948                           ;__private_parallel_lcd_WriteByte@data stored from wreg
  4949  0DFA  00F5               	movwf	__private_parallel_lcd_WriteByte@data
  4950  0DFB                     l144:	
  4951                           ;parallel_LCD.h: 132: {while(!PIR3bits.TMR4IF);} ;
  4952                           
  4953  0DFB  0020               	movlb	0	; select bank0
  4954  0DFC  1C93               	btfss	19,1	;volatile
  4955  0DFD  2DFB               	goto	l144
  4956                           
  4957                           ;parallel_LCD.h: 133: {LATB=data;} ;
  4958  0DFE  0875               	movf	__private_parallel_lcd_WriteByte@data,w
  4959  0DFF  0022               	movlb	2	; select bank2
  4960  0E00  008D               	movwf	13	;volatile
  4961                           
  4962                           ;parallel_LCD.h: 134: {if(r)LATAbits.LATA1=1;else LATAbits.LATA1=0;} ;
  4963  0E01  0874               	movf	__private_parallel_lcd_WriteByte@r,w
  4964  0E02  1903               	btfsc	3,2
  4965  0E03  2E06               	goto	l147
  4966  0E04  148C               	bsf	12,1	;volatile
  4967  0E05  2E07               	goto	l148
  4968  0E06                     l147:	
  4969  0E06  108C               	bcf	12,1	;volatile
  4970  0E07                     l148:	
  4971                           
  4972                           ;parallel_LCD.h: 135: {LATAbits.LATA0=1;__nop();LATAbits.LATA0=0;} ;
  4973  0E07  140C               	bsf	12,0	;volatile
  4974  0E08  0000               	nop
  4975  0E09  0022               	movlb	2	; select bank2
  4976  0E0A  100C               	bcf	12,0	;volatile
  4977                           
  4978                           ;parallel_LCD.h: 136: {TMR4=0x00;PIR3bits.TMR4IF=0;} ;
  4979  0E0B  0028               	movlb	8	; select bank8
  4980  0E0C  0195               	clrf	21	;volatile
  4981  0E0D  0020               	movlb	0	; select bank0
  4982  0E0E  1093               	bcf	19,1	;volatile
  4983  0E0F  0008               	return
  4984  0E10                     __end_of__private_parallel_lcd_WriteByte:	
  4985                           
  4986                           	psect	text9
  4987  0F72                     __ptext9:	
  4988 ;; *************** function __configuration_Save *****************
  4989 ;; Defined at:
  4990 ;;		line 61 in file "src/configuration.h"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  config          1    wreg     PTR struct .
  4993 ;;		 -> config(11), 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  config          1    6[BANK0 ] PTR struct .
  4996 ;;		 -> config(11), 
  4997 ;;  i               1    5[BANK0 ] unsigned char 
  4998 ;;  romOffset       1    4[BANK0 ] unsigned char 
  4999 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  5000 ;;		 -> config(11), 
  5001 ;;  returnCode      1    2[BANK0 ] enum E2826
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      enum E2826
  5004 ;; Registers used:
  5005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5011 ;;      Params:         0       0       0       0       0       0
  5012 ;;      Locals:         0       5       0       0       0       0
  5013 ;;      Temps:          0       2       0       0       0       0
  5014 ;;      Totals:         0       7       0       0       0       0
  5015 ;;Total ram usage:        7 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    2
  5018 ;; This function calls:
  5019 ;;		__configuration_ReadByte
  5020 ;;		__configuration_WriteByte
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function __configuration_Save
  5028  0F72                     __configuration_Save:	
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in __configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5032                           ;__configuration_Save@config stored from wreg
  5033  0F72  0020               	movlb	0	; select bank0
  5034  0F73  00A6               	movwf	__configuration_Save@config
  5035                           
  5036                           ;configuration.h: 63: uint08* ptrConfig = (uint08*) config ;
  5037  0F74  0826               	movf	__configuration_Save@config,w
  5038  0F75  00A0               	movwf	??__configuration_Save
  5039  0F76  0820               	movf	??__configuration_Save,w
  5040  0F77  00A3               	movwf	__configuration_Save@ptrConfig
  5041                           
  5042                           ;configuration.h: 64: uint08 romOffset ;
  5043                           ;configuration.h: 65: ReturnCode returnCode = RETURN_CODE_NOERROR ;
  5044  0F78  01A2               	clrf	__configuration_Save@returnCode
  5045                           
  5046                           ;configuration.h: 68: INTCONbits.GIE=0; ;
  5047  0F79  138B               	bcf	11,7	;volatile
  5048                           
  5049                           ;configuration.h: 71: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM )
      +                           ;
  5050  0F7A  01F4               	clrf	__configuration_ReadByte@memorySelect
  5051  0F7B  3000               	movlw	0
  5052  0F7C  318D  25D4  318F   	fcall	__configuration_ReadByte
  5053  0F7F  0020               	movlb	0	; select bank0
  5054  0F80  00A0               	movwf	??__configuration_Save
  5055  0F81  0820               	movf	??__configuration_Save,w
  5056  0F82  00A4               	movwf	__configuration_Save@romOffset
  5057                           
  5058                           ;configuration.h: 74: config->writeCount = _configuration_ReadByte( romOffset , MEMORY_S
      +                          ELECT_EEPROM ) ;
  5059  0F83  01F4               	clrf	__configuration_ReadByte@memorySelect
  5060  0F84  0824               	movf	__configuration_Save@romOffset,w
  5061  0F85  318D  25D4  318F   	fcall	__configuration_ReadByte
  5062  0F88  0020               	movlb	0	; select bank0
  5063  0F89  00A0               	movwf	??__configuration_Save
  5064  0F8A  0826               	movf	__configuration_Save@config,w
  5065  0F8B  0086               	movwf	6
  5066  0F8C  0187               	clrf	7
  5067  0F8D  0820               	movf	??__configuration_Save,w
  5068  0F8E  0081               	movwf	1
  5069                           
  5070                           ;configuration.h: 77: if ( ++config->writeCount == 1 ) {
  5071  0F8F  3001               	movlw	1
  5072  0F90  00A0               	movwf	??__configuration_Save
  5073  0F91  0826               	movf	__configuration_Save@config,w
  5074  0F92  0086               	movwf	6
  5075  0F93  0187               	clrf	7
  5076  0F94  0820               	movf	??__configuration_Save,w
  5077  0F95  0781               	addwf	1,f
  5078  0F96  0301               	decf	1,w
  5079  0F97  1D03               	btfss	3,2
  5080  0F98  2FA2               	goto	l3168
  5081                           
  5082                           ;configuration.h: 78: romOffset += sizeof(ConfigurationData) ;
  5083  0F99  300B               	movlw	11
  5084  0F9A  00A0               	movwf	??__configuration_Save
  5085  0F9B  0820               	movf	??__configuration_Save,w
  5086  0F9C  07A4               	addwf	__configuration_Save@romOffset,f
  5087                           
  5088                           ;configuration.h: 79: config->writeCount = 1 ;
  5089  0F9D  0826               	movf	__configuration_Save@config,w
  5090  0F9E  0086               	movwf	6
  5091  0F9F  0187               	clrf	7
  5092  0FA0  0181               	clrf	1
  5093  0FA1  0A81               	incf	1,f
  5094  0FA2                     l3168:	
  5095                           
  5096                           ;configuration.h: 80: }
  5097                           ;configuration.h: 82: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) )
  5098  0FA2  30F5               	movlw	245
  5099  0FA3  0224               	subwf	__configuration_Save@romOffset,w
  5100  0FA4  1C03               	skipc
  5101  0FA5  2FA8               	goto	l153
  5102                           
  5103                           ;configuration.h: 83: romOffset = 1 ;
  5104  0FA6  01A4               	clrf	__configuration_Save@romOffset
  5105  0FA7  0AA4               	incf	__configuration_Save@romOffset,f
  5106  0FA8                     l153:	
  5107                           
  5108                           ;configuration.h: 86: EECON1bits.WREN=1; ;
  5109  0FA8  0023               	movlb	3	; select bank3
  5110  0FA9  1515               	bsf	21,2	;volsfr
  5111                           
  5112                           ;configuration.h: 88: config->checkSum = 0x00 ;
  5113  0FAA  0020               	movlb	0	; select bank0
  5114  0FAB  0826               	movf	__configuration_Save@config,w
  5115  0FAC  3E0A               	addlw	10
  5116  0FAD  0086               	movwf	6
  5117  0FAE  0187               	clrf	7
  5118  0FAF  0181               	clrf	1
  5119                           
  5120                           ;configuration.h: 91: for ( uint08 i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5121  0FB0  01A5               	clrf	__configuration_Save@i
  5122  0FB1  2FB7               	goto	L36
  5123  0FB2                     l3188:	
  5124                           ;configuration.h: 96: break ;
  5125                           
  5126  0FB2  3001               	movlw	1
  5127  0FB3  0020               	movlb	0	; select bank0
  5128  0FB4  00A0               	movwf	??__configuration_Save
  5129  0FB5  0820               	movf	??__configuration_Save,w
  5130  0FB6  07A5               	addwf	__configuration_Save@i,f
  5131  0FB7                     L36:	
  5132  0FB7  300B               	movlw	11
  5133  0FB8  0625               	xorwf	__configuration_Save@i,w
  5134  0FB9  1903               	btfsc	3,2
  5135  0FBA  2FE1               	goto	l3190
  5136                           
  5137                           ;configuration.h: 92: _configuration_WriteByte( romOffset + i , ptrConfig[i] ) ;
  5138  0FBB  0825               	movf	__configuration_Save@i,w
  5139  0FBC  0723               	addwf	__configuration_Save@ptrConfig,w
  5140  0FBD  00A0               	movwf	??__configuration_Save
  5141  0FBE  0820               	movf	??__configuration_Save,w
  5142  0FBF  0086               	movwf	6
  5143  0FC0  0187               	clrf	7
  5144  0FC1  0801               	movf	1,w
  5145  0FC2  00A1               	movwf	??__configuration_Save+1
  5146  0FC3  0821               	movf	??__configuration_Save+1,w
  5147  0FC4  00F4               	movwf	__configuration_WriteByte@data
  5148  0FC5  0824               	movf	__configuration_Save@romOffset,w
  5149  0FC6  0725               	addwf	__configuration_Save@i,w
  5150  0FC7  3187  27ED  318F   	fcall	__configuration_WriteByte
  5151                           
  5152                           ;configuration.h: 93: config->checkSum ^= ptrConfig[i] ;
  5153  0FCA  0020               	movlb	0	; select bank0
  5154  0FCB  0825               	movf	__configuration_Save@i,w
  5155  0FCC  0723               	addwf	__configuration_Save@ptrConfig,w
  5156  0FCD  00A0               	movwf	??__configuration_Save
  5157  0FCE  0820               	movf	??__configuration_Save,w
  5158  0FCF  0086               	movwf	6
  5159  0FD0  0187               	clrf	7
  5160  0FD1  0801               	movf	1,w
  5161  0FD2  00A1               	movwf	??__configuration_Save+1
  5162  0FD3  0826               	movf	__configuration_Save@config,w
  5163  0FD4  3E0A               	addlw	10
  5164  0FD5  0086               	movwf	6
  5165  0FD6  0187               	clrf	7
  5166  0FD7  0821               	movf	??__configuration_Save+1,w
  5167  0FD8  0681               	xorwf	1,f
  5168                           
  5169                           ;configuration.h: 94: if ( EECON1bits.WRERR ) {
  5170  0FD9  0023               	movlb	3	; select bank3
  5171  0FDA  1D95               	btfss	21,3	;volsfr
  5172  0FDB  2FB2               	goto	l3188
  5173                           
  5174                           ;configuration.h: 95: returnCode = RETURN_CODE_WRITE_ERROR ;
  5175  0FDC  3010               	movlw	16
  5176  0FDD  0020               	movlb	0	; select bank0
  5177  0FDE  00A0               	movwf	??__configuration_Save
  5178  0FDF  0820               	movf	??__configuration_Save,w
  5179  0FE0  00A2               	movwf	__configuration_Save@returnCode
  5180  0FE1                     l3190:	
  5181                           
  5182                           ;configuration.h: 97: }
  5183                           ;configuration.h: 98: }
  5184                           ;configuration.h: 101: if ( ( config->writeCount == 1 ) && ( !EECON1bits.WRERR ) ) {
  5185  0FE1  0826               	movf	__configuration_Save@config,w
  5186  0FE2  0086               	movwf	6
  5187  0FE3  0187               	clrf	7
  5188  0FE4  0301               	decf	1,w
  5189  0FE5  1D03               	btfss	3,2
  5190  0FE6  2FFB               	goto	l3200
  5191  0FE7  0023               	movlb	3	; select bank3
  5192  0FE8  1995               	btfsc	21,3	;volsfr
  5193  0FE9  2FFB               	goto	l3200
  5194                           
  5195                           ;configuration.h: 102: _configuration_WriteByte( 0x00 , romOffset ) ;
  5196  0FEA  0020               	movlb	0	; select bank0
  5197  0FEB  0824               	movf	__configuration_Save@romOffset,w
  5198  0FEC  00A0               	movwf	??__configuration_Save
  5199  0FED  0820               	movf	??__configuration_Save,w
  5200  0FEE  00F4               	movwf	__configuration_WriteByte@data
  5201  0FEF  3000               	movlw	0
  5202  0FF0  3187  27ED  318F   	fcall	__configuration_WriteByte
  5203                           
  5204                           ;configuration.h: 103: if ( EECON1bits.WRERR ) returnCode = RETURN_CODE_WRITE_ERROR ;
  5205  0FF3  0023               	movlb	3	; select bank3
  5206  0FF4  1D95               	btfss	21,3	;volsfr
  5207  0FF5  2FFB               	goto	l3200
  5208  0FF6  3010               	movlw	16
  5209  0FF7  0020               	movlb	0	; select bank0
  5210  0FF8  00A0               	movwf	??__configuration_Save
  5211  0FF9  0820               	movf	??__configuration_Save,w
  5212  0FFA  00A2               	movwf	__configuration_Save@returnCode
  5213  0FFB                     l3200:	
  5214                           
  5215                           ;configuration.h: 104: }
  5216                           ;configuration.h: 107: EECON1bits.WREN=0; ;
  5217  0FFB  0023               	movlb	3	; select bank3
  5218  0FFC  1115               	bcf	21,2	;volsfr
  5219                           
  5220                           ;configuration.h: 110: INTCONbits.GIE=1; ;
  5221  0FFD  178B               	bsf	11,7	;volatile
  5222                           
  5223                           ;configuration.h: 112: return RETURN_CODE_NOERROR ;
  5224  0FFE  3000               	movlw	0
  5225  0FFF  0008               	return
  5226  1000                     __end_of__configuration_Save:	
  5227                           
  5228                           	psect	text10
  5229  07ED                     __ptext10:	
  5230 ;; *************** function __configuration_WriteByte *****************
  5231 ;; Defined at:
  5232 ;;		line 157 in file "src/configuration.h"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  address         1    wreg     unsigned char 
  5235 ;;  data            1    4[COMMON] unsigned char 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  address         1    5[COMMON] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		wreg, status,2
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5247 ;;      Params:         1       0       0       0       0       0
  5248 ;;      Locals:         1       0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0
  5250 ;;      Totals:         2       0       0       0       0       0
  5251 ;;Total ram usage:        2 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    1
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		__configuration_Save
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function __configuration_WriteByte
  5263  07ED                     __configuration_WriteByte:	
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in __configuration_WriteByte: [wreg+status,2]
  5267                           ;__configuration_WriteByte@address stored from wreg
  5268  07ED  00F5               	movwf	__configuration_WriteByte@address
  5269                           
  5270                           ;configuration.h: 158: EEADRH=0x00;EEADRL=(address); ;
  5271  07EE  0023               	movlb	3	; select bank3
  5272  07EF  0192               	clrf	18	;volatile
  5273  07F0  0875               	movf	__configuration_WriteByte@address,w
  5274  07F1  0091               	movwf	17	;volatile
  5275                           
  5276                           ;configuration.h: 159: EEDATH=0x00;EEDATL=(data); ;
  5277  07F2  0194               	clrf	20	;volatile
  5278  07F3  0874               	movf	__configuration_WriteByte@data,w
  5279  07F4  0093               	movwf	19	;volatile
  5280                           
  5281                           ;configuration.h: 160: EECON2=0x55;EECON2=0xAA; ;
  5282  07F5  3055               	movlw	85
  5283  07F6  0096               	movwf	22	;volsfr
  5284  07F7  30AA               	movlw	170
  5285  07F8  0096               	movwf	22	;volsfr
  5286                           
  5287                           ;configuration.h: 161: EECON1bits.WR=1; ;
  5288  07F9  1495               	bsf	21,1	;volsfr
  5289  07FA                     l172:	
  5290                           ;configuration.h: 162: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  5291                           
  5292  07FA  0020               	movlb	0	; select bank0
  5293  07FB  1E12               	btfss	18,4	;volatile
  5294  07FC  2FFA               	goto	l172
  5295  07FD  1212               	bcf	18,4	;volatile
  5296  07FE  0008               	return
  5297  07FF                     __end_of__configuration_WriteByte:	
  5298                           
  5299                           	psect	text11
  5300  079B                     __ptext11:	
  5301 ;; *************** function __configuration_Load *****************
  5302 ;; Defined at:
  5303 ;;		line 118 in file "src/configuration.h"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  config          1    wreg     PTR struct .
  5306 ;;		 -> config(11), 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  config          1    4[BANK0 ] PTR struct .
  5309 ;;		 -> config(11), 
  5310 ;;  i               1    5[BANK0 ] unsigned char 
  5311 ;;  romOffset       1    3[BANK0 ] unsigned char 
  5312 ;;  ptrConfig       1    2[BANK0 ] PTR unsigned char 
  5313 ;;		 -> config(11), 
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      enum E2826
  5316 ;; Registers used:
  5317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5323 ;;      Params:         0       0       0       0       0       0
  5324 ;;      Locals:         0       4       0       0       0       0
  5325 ;;      Temps:          0       2       0       0       0       0
  5326 ;;      Totals:         0       6       0       0       0       0
  5327 ;;Total ram usage:        6 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    2
  5330 ;; This function calls:
  5331 ;;		__configuration_ReadByte
  5332 ;; This function is called by:
  5333 ;;		_main
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function __configuration_Load
  5339  079B                     __configuration_Load:	
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in __configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5343                           ;__configuration_Load@config stored from wreg
  5344  079B  0020               	movlb	0	; select bank0
  5345  079C  00A4               	movwf	__configuration_Load@config
  5346                           
  5347                           ;configuration.h: 120: uint08* ptrConfig = (uint08*) config ;
  5348  079D  0824               	movf	__configuration_Load@config,w
  5349  079E  00A0               	movwf	??__configuration_Load
  5350  079F  0820               	movf	??__configuration_Load,w
  5351  07A0  00A2               	movwf	__configuration_Load@ptrConfig
  5352                           
  5353                           ;configuration.h: 121: uint08 romOffset ;
  5354                           ;configuration.h: 124: INTCONbits.GIE=0; ;
  5355  07A1  138B               	bcf	11,7	;volatile
  5356                           
  5357                           ;configuration.h: 127: romOffset = _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM 
      +                          ) ;
  5358  07A2  01F4               	clrf	__configuration_ReadByte@memorySelect
  5359  07A3  3000               	movlw	0
  5360  07A4  318D  25D4  3187   	fcall	__configuration_ReadByte
  5361  07A7  0020               	movlb	0	; select bank0
  5362  07A8  00A0               	movwf	??__configuration_Load
  5363  07A9  0820               	movf	??__configuration_Load,w
  5364  07AA  00A3               	movwf	__configuration_Load@romOffset
  5365                           
  5366                           ;configuration.h: 130: if ( romOffset >= ( 0x100 - sizeof(ConfigurationData) ) ) return 
      +                          RETURN_CODE_INVALID_OFFSET ;
  5367  07AB  30F5               	movlw	245
  5368  07AC  0223               	subwf	__configuration_Load@romOffset,w
  5369  07AD  1C03               	skipc
  5370  07AE  2FB1               	goto	l3218
  5371  07AF  3030               	movlw	48
  5372  07B0  0008               	return
  5373  07B1                     l3218:	
  5374                           
  5375                           ;configuration.h: 132: config->checkSum = 0x00 ;
  5376  07B1  0824               	movf	__configuration_Load@config,w
  5377  07B2  3E0A               	addlw	10
  5378  07B3  0086               	movwf	6
  5379  07B4  0187               	clrf	7
  5380  07B5  0181               	clrf	1
  5381                           
  5382                           ;configuration.h: 135: for ( uint08 i = 0 ; i != sizeof(ConfigurationData) ; i++ ) {
  5383  07B6  01A5               	clrf	__configuration_Load@i
  5384  07B7  300B               	movlw	11
  5385  07B8  0625               	xorwf	__configuration_Load@i,w
  5386  07B9  1903               	btfsc	3,2
  5387  07BA  2FE1               	goto	l165
  5388  07BB                     l3226:	
  5389                           
  5390                           ;configuration.h: 136: ptrConfig[i] = _configuration_ReadByte( romOffset + i , MEMORY_SE
      +                          LECT_EEPROM ) ;
  5391  07BB  01F4               	clrf	__configuration_ReadByte@memorySelect
  5392  07BC  0823               	movf	__configuration_Load@romOffset,w
  5393  07BD  0725               	addwf	__configuration_Load@i,w
  5394  07BE  318D  25D4  3187   	fcall	__configuration_ReadByte
  5395  07C1  0020               	movlb	0	; select bank0
  5396  07C2  00A0               	movwf	??__configuration_Load
  5397  07C3  0825               	movf	__configuration_Load@i,w
  5398  07C4  0722               	addwf	__configuration_Load@ptrConfig,w
  5399  07C5  00A1               	movwf	??__configuration_Load+1
  5400  07C6  0821               	movf	??__configuration_Load+1,w
  5401  07C7  0086               	movwf	6
  5402  07C8  0187               	clrf	7
  5403  07C9  0820               	movf	??__configuration_Load,w
  5404  07CA  0081               	movwf	1
  5405                           
  5406                           ;configuration.h: 137: config->checkSum ^= ptrConfig[i] ;
  5407  07CB  0825               	movf	__configuration_Load@i,w
  5408  07CC  0722               	addwf	__configuration_Load@ptrConfig,w
  5409  07CD  00A0               	movwf	??__configuration_Load
  5410  07CE  0820               	movf	??__configuration_Load,w
  5411  07CF  0086               	movwf	6
  5412  07D0  0187               	clrf	7
  5413  07D1  0801               	movf	1,w
  5414  07D2  00A1               	movwf	??__configuration_Load+1
  5415  07D3  0824               	movf	__configuration_Load@config,w
  5416  07D4  3E0A               	addlw	10
  5417  07D5  0086               	movwf	6
  5418  07D6  0187               	clrf	7
  5419  07D7  0821               	movf	??__configuration_Load+1,w
  5420  07D8  0681               	xorwf	1,f
  5421  07D9  3001               	movlw	1
  5422  07DA  00A0               	movwf	??__configuration_Load
  5423  07DB  0820               	movf	??__configuration_Load,w
  5424  07DC  07A5               	addwf	__configuration_Load@i,f
  5425  07DD  300B               	movlw	11
  5426  07DE  0625               	xorwf	__configuration_Load@i,w
  5427  07DF  1D03               	btfss	3,2
  5428  07E0  2FBB               	goto	l3226
  5429  07E1                     l165:	
  5430                           
  5431                           ;configuration.h: 138: }
  5432                           ;configuration.h: 141: INTCONbits.GIE=1; ;
  5433  07E1  178B               	bsf	11,7	;volatile
  5434                           
  5435                           ;configuration.h: 144: if ( config->checkSum ) return RETURN_CODE_CHECKSUM_ERROR ;
  5436  07E2  0824               	movf	__configuration_Load@config,w
  5437  07E3  3E0A               	addlw	10
  5438  07E4  0086               	movwf	6
  5439  07E5  0187               	clrf	7
  5440  07E6  0801               	movf	1,w
  5441  07E7  1903               	btfsc	3,2
  5442  07E8  2FEB               	goto	l3240
  5443  07E9  3020               	movlw	32
  5444  07EA  0008               	return
  5445  07EB                     l3240:	
  5446                           
  5447                           ;configuration.h: 146: return RETURN_CODE_NOERROR ;
  5448  07EB  3000               	movlw	0
  5449  07EC  0008               	return
  5450  07ED                     __end_of__configuration_Load:	
  5451                           
  5452                           	psect	text12
  5453  0DA4                     __ptext12:	
  5454 ;; *************** function __configuration_GetRomOffset *****************
  5455 ;; Defined at:
  5456 ;;		line 151 in file "src/configuration.h"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      unsigned char 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0, pclath, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5470 ;;      Params:         0       0       0       0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0
  5473 ;;      Totals:         0       0       0       0       0       0
  5474 ;;Total ram usage:        0 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    2
  5477 ;; This function calls:
  5478 ;;		__configuration_ReadByte
  5479 ;; This function is called by:
  5480 ;;		_main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function __configuration_GetRomOffset
  5486  0DA4                     __configuration_GetRomOffset:	
  5487                           
  5488                           ;configuration.h: 152: return _configuration_ReadByte( 0x00 , MEMORY_SELECT_EEPROM ) ;
  5489                           
  5490                           ;incstack = 0
  5491                           ; Regs used in __configuration_GetRomOffset: [wreg+status,2+status,0+pclath+cstack]
  5492  0DA4  01F4               	clrf	__configuration_ReadByte@memorySelect
  5493  0DA5  3000               	movlw	0
  5494  0DA6  318D  25D4         	fcall	__configuration_ReadByte
  5495  0DA8  0008               	return
  5496  0DA9                     __end_of__configuration_GetRomOffset:	
  5497                           
  5498                           	psect	text13
  5499  0DD4                     __ptext13:	
  5500 ;; *************** function __configuration_ReadByte *****************
  5501 ;; Defined at:
  5502 ;;		line 167 in file "src/configuration.h"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  address         1    wreg     unsigned char 
  5505 ;;  memorySelect    1    4[COMMON] enum E2832
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  address         1    5[COMMON] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  1    wreg      unsigned char 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5517 ;;      Params:         1       0       0       0       0       0
  5518 ;;      Locals:         1       0       0       0       0       0
  5519 ;;      Temps:          0       0       0       0       0       0
  5520 ;;      Totals:         2       0       0       0       0       0
  5521 ;;Total ram usage:        2 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    1
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		__configuration_Save
  5528 ;;		__configuration_Load
  5529 ;;		__configuration_GetRomOffset
  5530 ;;		_main
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           
  5535                           ;psect for function __configuration_ReadByte
  5536  0DD4                     __configuration_ReadByte:	
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in __configuration_ReadByte: [wreg+status,2+status,0]
  5540                           ;__configuration_ReadByte@address stored from wreg
  5541  0DD4  00F5               	movwf	__configuration_ReadByte@address
  5542                           
  5543                           ;configuration.h: 168: EEADRH=0x00;EEADRL=(address); ;
  5544  0DD5  0023               	movlb	3	; select bank3
  5545  0DD6  0192               	clrf	18	;volatile
  5546  0DD7  0875               	movf	__configuration_ReadByte@address,w
  5547  0DD8  0091               	movwf	17	;volatile
  5548                           
  5549                           ;configuration.h: 169: EECON1bits.EEPGD=0;if(memorySelect)EECON1bits.CFGS=1;else EECON1b
      +                          its.CFGS=0; ;
  5550  0DD9  1395               	bcf	21,7	;volsfr
  5551  0DDA  0874               	movf	__configuration_ReadByte@memorySelect,w
  5552  0DDB  1903               	btfsc	3,2
  5553  0DDC  2DDF               	goto	l178
  5554  0DDD  1715               	bsf	21,6	;volsfr
  5555  0DDE  2DE0               	goto	l179
  5556  0DDF                     l178:	
  5557  0DDF  1315               	bcf	21,6	;volsfr
  5558  0DE0                     l179:	
  5559                           
  5560                           ;configuration.h: 170: EECON1bits.RD=1; ;
  5561  0DE0  1415               	bsf	21,0	;volsfr
  5562                           
  5563                           ;configuration.h: 171: __nop() ;
  5564  0DE1  0000               	nop
  5565                           
  5566                           ;configuration.h: 172: __nop() ;
  5567  0DE2  0000               	nop
  5568                           
  5569                           ;configuration.h: 173: return EEDATL ;
  5570  0DE3  0023               	movlb	3	; select bank3
  5571  0DE4  0813               	movf	19,w	;volatile
  5572  0DE5  0008               	return
  5573  0DE6                     __end_of__configuration_ReadByte:	
  5574                           
  5575                           	psect	text14
  5576  0DC2                     __ptext14:	
  5577 ;; *************** function ___bmul *****************
  5578 ;; Defined at:
  5579 ;;		line 4 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul8.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  multiplier      1    wreg     unsigned char 
  5582 ;;  multiplicand    1    4[COMMON] unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  multiplier      1    1[BANK0 ] unsigned char 
  5585 ;;  product         1    0[BANK0 ] unsigned char 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      unsigned char 
  5588 ;; Registers used:
  5589 ;;		wreg, status,2, status,0
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5595 ;;      Params:         1       0       0       0       0       0
  5596 ;;      Locals:         0       2       0       0       0       0
  5597 ;;      Temps:          1       0       0       0       0       0
  5598 ;;      Totals:         2       2       0       0       0       0
  5599 ;;Total ram usage:        4 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    1
  5602 ;; This function calls:
  5603 ;;		Nothing
  5604 ;; This function is called by:
  5605 ;;		_main
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function ___bmul
  5611  0DC2                     ___bmul:	
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5615                           ;___bmul@multiplier stored from wreg
  5616  0DC2  0020               	movlb	0	; select bank0
  5617  0DC3  00A1               	movwf	___bmul@multiplier
  5618  0DC4  01A0               	clrf	___bmul@product
  5619  0DC5                     l3246:	
  5620  0DC5  1C21               	btfss	___bmul@multiplier,0
  5621  0DC6  2DCB               	goto	l3250
  5622  0DC7  0874               	movf	___bmul@multiplicand,w
  5623  0DC8  00F5               	movwf	??___bmul
  5624  0DC9  0875               	movf	??___bmul,w
  5625  0DCA  07A0               	addwf	___bmul@product,f
  5626  0DCB                     l3250:	
  5627  0DCB  1003               	clrc
  5628  0DCC  0DF4               	rlf	___bmul@multiplicand,f
  5629  0DCD  1003               	clrc
  5630  0DCE  0CA1               	rrf	___bmul@multiplier,f
  5631  0DCF  0821               	movf	___bmul@multiplier,w
  5632  0DD0  1D03               	btfss	3,2
  5633  0DD1  2DC5               	goto	l3246
  5634  0DD2  0820               	movf	___bmul@product,w
  5635  0DD3  0008               	return
  5636  0DD4                     __end_of___bmul:	
  5637                           
  5638                           	psect	intentry
  5639  0004                     __pintentry:	
  5640 ;; *************** function _isr *****************
  5641 ;; Defined at:
  5642 ;;		line 912 in file "src/main.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;		None               void
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5656 ;;      Params:         0       0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0
  5658 ;;      Temps:          4       0       0       0       0       0
  5659 ;;      Totals:         4       0       0       0       0       0
  5660 ;;Total ram usage:        4 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		Interrupt level 1
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669  0004                     _isr:	
  5670                           
  5671                           ;incstack = 0
  5672                           ; Regs used in _isr: [wreg+status,2+status,0]
  5673  0004  3180               	pagesel	$
  5674  0005  0020               	movlb	0	; select bank0
  5675  0006  087F               	movf	127,w
  5676  0007  00F3               	movwf	??_isr+3
  5677                           
  5678                           ;main.c: 913: if( !PIR3bits.TMR6IF ) return ;
  5679  0008  1D93               	btfss	19,3	;volatile
  5680  0009  28AE               	goto	i1l461
  5681                           
  5682                           ;main.c: 914: PIR3bits.TMR6IF = 0 ;
  5683  000A  1193               	bcf	19,3	;volatile
  5684                           
  5685                           ;main.c: 916: static uint16 eventPrescaler = 0 ;
  5686                           ;main.c: 919: tempoCounter += config.tempo ;
  5687  000B  0844               	movf	_config+1,w
  5688  000C  00F0               	movwf	??_isr
  5689  000D  0845               	movf	_config+2,w
  5690  000E  00F1               	movwf	??_isr+1
  5691  000F  01F2               	clrf	??_isr+2
  5692  0010  0870               	movf	??_isr,w
  5693  0011  07DE               	addwf	_tempoCounter,f
  5694  0012  0871               	movf	??_isr+1,w
  5695  0013  3DDF               	addwfc	_tempoCounter+1,f
  5696  0014  0872               	movf	??_isr+2,w
  5697  0015  3DE0               	addwfc	_tempoCounter+2,f
  5698                           
  5699                           ;main.c: 920: if( tempoCounter >= ( 32000000UL * 3 / 25 ) ) {
  5700  0016  303A               	movlw	58
  5701  0017  0260               	subwf	_tempoCounter+2,w
  5702  0018  1D03               	skipz
  5703  0019  2820               	goto	u207_25
  5704  001A  3098               	movlw	152
  5705  001B  025F               	subwf	_tempoCounter+1,w
  5706  001C  1D03               	skipz
  5707  001D  2820               	goto	u207_25
  5708  001E  3000               	movlw	0
  5709  001F  025E               	subwf	_tempoCounter,w
  5710  0020                     u207_25:	
  5711  0020  1C03               	skipc
  5712  0021  284A               	goto	i1l2918
  5713                           
  5714                           ;main.c: 921: tempoCounter -= ( 32000000UL * 3 / 25 ) ;
  5715  0022  3000               	movlw	0
  5716  0023  00F0               	movwf	??_isr
  5717  0024  3098               	movlw	152
  5718  0025  00F1               	movwf	??_isr+1
  5719  0026  303A               	movlw	58
  5720  0027  00F2               	movwf	??_isr+2
  5721  0028  0870               	movf	??_isr,w
  5722  0029  02DE               	subwf	_tempoCounter,f
  5723  002A  0871               	movf	??_isr+1,w
  5724  002B  3BDF               	subwfb	_tempoCounter+1,f
  5725  002C  0872               	movf	??_isr+2,w
  5726  002D  3BE0               	subwfb	_tempoCounter+2,f
  5727                           
  5728                           ;main.c: 922: duration = config.duration ;
  5729  002E  0847               	movf	_config+4,w
  5730  002F  00F0               	movwf	??_isr
  5731  0030  0870               	movf	??_isr,w
  5732  0031  00E6               	movwf	_duration
  5733                           
  5734                           ;main.c: 923: if( ++beatCounter >= ( config.beatCount << 1 ) )
  5735  0032  0846               	movf	_config+3,w
  5736  0033  00F0               	movwf	??_isr
  5737  0034  01F1               	clrf	??_isr+1
  5738  0035  35F0               	lslf	??_isr,f
  5739  0036  0DF1               	rlf	??_isr+1,f
  5740  0037  3001               	movlw	1
  5741  0038  00F2               	movwf	??_isr+2
  5742  0039  0872               	movf	??_isr+2,w
  5743  003A  07E3               	addwf	_beatCounter,f
  5744  003B  0871               	movf	??_isr+1,w
  5745  003C  3A80               	xorlw	128
  5746  003D  3C80               	sublw	128
  5747  003E  1D03               	skipz
  5748  003F  2842               	goto	u208_25
  5749  0040  0870               	movf	??_isr,w
  5750  0041  0263               	subwf	_beatCounter,w
  5751  0042                     u208_25:	
  5752  0042  1C03               	skipc
  5753  0043  2846               	goto	i1l2914
  5754                           
  5755                           ;main.c: 924: beatCounter = 0 ;
  5756  0044  0020               	movlb	0	; select bank0
  5757  0045  01E3               	clrf	_beatCounter
  5758  0046                     i1l2914:	
  5759                           
  5760                           ;main.c: 926: if( !keyBeepCounter_ )
  5761  0046  0020               	movlb	0	; select bank0
  5762  0047  0869               	movf	_keyBeepCounter_,w
  5763  0048  1903               	btfsc	3,2
  5764                           
  5765                           ;main.c: 927: outputEvent.soundClickOn = 1 ;
  5766  0049  166B               	bsf	_outputEvent,4
  5767  004A                     i1l2918:	
  5768                           
  5769                           ;main.c: 928: }
  5770                           ;main.c: 931: if( !( eventPrescaler & 0x3F ) ) {
  5771  004A  303F               	movlw	63
  5772  004B  0577               	andwf	isr@eventPrescaler,w
  5773  004C  00F0               	movwf	??_isr
  5774  004D  3000               	movlw	0
  5775  004E  0578               	andwf	isr@eventPrescaler+1,w
  5776  004F  00F1               	movwf	??_isr+1
  5777  0050  0870               	movf	??_isr,w
  5778  0051  0471               	iorwf	??_isr+1,w
  5779  0052  1D03               	btfss	3,2
  5780  0053  2867               	goto	i1l2934
  5781                           
  5782                           ;main.c: 932: if( duration && !--duration && !keyBeepCounter_ )
  5783  0054  0866               	movf	_duration,w
  5784  0055  1903               	btfsc	3,2
  5785  0056  285F               	goto	i1l2928
  5786  0057  3001               	movlw	1
  5787  0058  02E6               	subwf	_duration,f
  5788  0059  1D03               	btfss	3,2
  5789  005A  285F               	goto	i1l2928
  5790  005B  0869               	movf	_keyBeepCounter_,w
  5791  005C  1D03               	btfss	3,2
  5792  005D  285F               	goto	i1l2928
  5793                           
  5794                           ;main.c: 933: outputEvent.soundOff = 1 ;
  5795  005E  176B               	bsf	_outputEvent,6
  5796  005F                     i1l2928:	
  5797                           
  5798                           ;main.c: 934: if( keyBeepCounter_ && ! --keyBeepCounter_ )
  5799  005F  0869               	movf	_keyBeepCounter_,w
  5800  0060  1903               	btfsc	3,2
  5801  0061  2867               	goto	i1l2934
  5802  0062  3001               	movlw	1
  5803  0063  02E9               	subwf	_keyBeepCounter_,f
  5804  0064  1D03               	btfss	3,2
  5805  0065  2867               	goto	i1l2934
  5806                           
  5807                           ;main.c: 935: outputEvent.soundOff = 1 ;
  5808  0066  176B               	bsf	_outputEvent,6
  5809  0067                     i1l2934:	
  5810                           
  5811                           ;main.c: 936: }
  5812                           ;main.c: 939: if( ++eventPrescaler != 640 ) return ;
  5813  0067  3001               	movlw	1
  5814  0068  07F7               	addwf	isr@eventPrescaler,f
  5815  0069  3000               	movlw	0
  5816  006A  3DF8               	addwfc	isr@eventPrescaler+1,f
  5817  006B  3080               	movlw	128
  5818  006C  0677               	xorwf	isr@eventPrescaler,w
  5819  006D  3002               	movlw	2
  5820  006E  1903               	skipnz
  5821  006F  0678               	xorwf	isr@eventPrescaler+1,w
  5822  0070  1D03               	btfss	3,2
  5823  0071  28AE               	goto	i1l461
  5824                           
  5825                           ;main.c: 940: eventPrescaler = 0 ;
  5826  0072  01F7               	clrf	isr@eventPrescaler
  5827  0073  01F8               	clrf	isr@eventPrescaler+1
  5828                           
  5829                           ;main.c: 943: if( stateReturnCounter ) {
  5830  0074  086D               	movf	_stateReturnCounter,w
  5831  0075  1903               	btfsc	3,2
  5832  0076  287F               	goto	i1l2946
  5833                           
  5834                           ;main.c: 944: if( --stateReturnCounter ) return ;
  5835  0077  3001               	movlw	1
  5836  0078  02ED               	subwf	_stateReturnCounter,f
  5837  0079  1D03               	btfss	3,2
  5838  007A  28AE               	goto	i1l461
  5839                           
  5840                           ;main.c: 946: outputEvent.changeState = 1 ;
  5841  007B  146B               	bsf	_outputEvent,0
  5842                           
  5843                           ;main.c: 947: outputEvent.resetMetronome = 1 ;
  5844  007C  15EB               	bsf	_outputEvent,3
  5845                           
  5846                           ;main.c: 948: machineState_ = STATE_METRONOME ;
  5847  007D  01EA               	clrf	_machineState_
  5848  007E  0AEA               	incf	_machineState_,f
  5849  007F                     i1l2946:	
  5850                           
  5851                           ;main.c: 949: }
  5852                           ;main.c: 952: portAState_.all = (~PORTA&0xE0) ;
  5853  007F  090C               	comf	12,w	;volatile
  5854  0080  39E0               	andlw	224
  5855  0081  00F0               	movwf	??_isr
  5856  0082  0870               	movf	??_isr,w
  5857  0083  00EC               	movwf	_portAState_
  5858                           
  5859                           ;main.c: 954: if( portAState_.keyUp && !portAState_.keyDown ) {
  5860  0084  1BEC               	btfsc	_portAState_,7
  5861  0085  1B6C               	btfsc	_portAState_,6
  5862  0086  2895               	goto	i1l2958
  5863                           
  5864                           ;main.c: 955: if( ++keyCount.Up == 0x40 ) {
  5865  0087  3001               	movlw	1
  5866  0088  00F0               	movwf	??_isr
  5867  0089  0870               	movf	??_isr,w
  5868  008A  07DA               	addwf	_keyCount,f
  5869  008B  3040               	movlw	64
  5870  008C  065A               	xorwf	_keyCount,w
  5871  008D  1D03               	btfss	3,2
  5872  008E  2896               	goto	i1l2960
  5873                           
  5874                           ;main.c: 956: keyCount.Up = 0x3C ;
  5875  008F  303C               	movlw	60
  5876  0090  00F0               	movwf	??_isr
  5877  0091  0870               	movf	??_isr,w
  5878  0092  00DA               	movwf	_keyCount
  5879                           
  5880                           ;main.c: 957: inputEvent.keyPressHeldUp = 1 ;
  5881  0093  1667               	bsf	_inputEvent,4
  5882                           
  5883                           ;main.c: 958: }
  5884                           ;main.c: 959: }
  5885  0094  2896               	goto	i1l2960
  5886  0095                     i1l2958:	
  5887                           
  5888                           ;main.c: 960: else
  5889                           ;main.c: 961: keyCount.Up = 0 ;
  5890  0095  01DA               	clrf	_keyCount
  5891  0096                     i1l2960:	
  5892                           
  5893                           ;main.c: 963: if( portAState_.keyDown && !portAState_.keyUp ) {
  5894  0096  1B6C               	btfsc	_portAState_,6
  5895  0097  1BEC               	btfsc	_portAState_,7
  5896  0098  28A7               	goto	i1l2970
  5897                           
  5898                           ;main.c: 964: if( ++keyCount.Down == 0x40 ) {
  5899  0099  3001               	movlw	1
  5900  009A  00F0               	movwf	??_isr
  5901  009B  0870               	movf	??_isr,w
  5902  009C  07DC               	addwf	_keyCount+2,f
  5903  009D  3040               	movlw	64
  5904  009E  065C               	xorwf	_keyCount+2,w
  5905  009F  1D03               	btfss	3,2
  5906  00A0  28A8               	goto	i1l2972
  5907                           
  5908                           ;main.c: 965: keyCount.Down = 0x3C ;
  5909  00A1  303C               	movlw	60
  5910  00A2  00F0               	movwf	??_isr
  5911  00A3  0870               	movf	??_isr,w
  5912  00A4  00DC               	movwf	_keyCount+2
  5913                           
  5914                           ;main.c: 966: inputEvent.keyPressHeldDown = 1 ;
  5915  00A5  16E7               	bsf	_inputEvent,5
  5916                           
  5917                           ;main.c: 967: }
  5918                           ;main.c: 968: }
  5919  00A6  28A8               	goto	i1l2972
  5920  00A7                     i1l2970:	
  5921                           
  5922                           ;main.c: 969: else
  5923                           ;main.c: 970: keyCount.Down = 0 ;
  5924  00A7  01DC               	clrf	_keyCount+2
  5925  00A8                     i1l2972:	
  5926                           
  5927                           ;main.c: 972: static uint08 tmr3=0;
  5928                           ;main.c: 973: tmr3 = TMR6;
  5929  00A8  0028               	movlb	8	; select bank8
  5930  00A9  081C               	movf	28,w	;volatile
  5931  00AA  00F0               	movwf	??_isr
  5932  00AB  0870               	movf	??_isr,w
  5933  00AC  00F9               	movwf	isr@tmr3
  5934                           
  5935                           ;main.c: 974: tmr3 = 0;
  5936  00AD  01F9               	clrf	isr@tmr3
  5937  00AE                     i1l461:	
  5938  00AE  0873               	movf	??_isr+3,w
  5939  00AF  0020               	movlb	0	; select bank0
  5940  00B0  00FF               	movwf	127
  5941  00B1  0009               	retfie
  5942  00B2                     __end_of_isr:	
  5943  007E                     btemp	set	126	;btemp
  5944  007E                     wtemp	set	126
  5945  007E                     wtemp0	set	126
  5946  0080                     wtemp1	set	128
  5947  0082                     wtemp2	set	130
  5948  0084                     wtemp3	set	132
  5949  0086                     wtemp4	set	134
  5950  0088                     wtemp5	set	136
  5951  007F                     wtemp6	set	127
  5952  007E                     ttemp	set	126
  5953  007E                     ttemp0	set	126
  5954  0081                     ttemp1	set	129
  5955  0084                     ttemp2	set	132
  5956  0087                     ttemp3	set	135
  5957  007F                     ttemp4	set	127
  5958  007E                     ltemp	set	126
  5959  007E                     ltemp0	set	126
  5960  0082                     ltemp1	set	130
  5961  0086                     ltemp2	set	134
  5962  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    81
    Data        97
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     35      79
    BANK1            80      0      74
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            32      0       0

Pointer List with Targets:

    currentValuePtr	PTR unsigned char  size(1) Largest target is 11
		 -> config.oscillatorTune(BANK0[1]), config.tone(BANK0[3]), config.pulseWidth(BANK0[1]), config.duration(BANK0[1]), 
		 -> config.beatCount(BANK0[1]), config(BANK0[11]), NULL(NULL[0]), 

    currentMenuStatePtr.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    currentMenuStatePtr	PTR struct . size(1) Largest target is 5
		 -> menuStateInformation(BANK0[4]), menuStateConfirm(BANK0[4]), NULL(NULL[0]), menuStateTone(BANK0[4]), 
		 -> menuStateMain(BANK1[4]), 

    menuStateInformation.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateConfirm.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateTone.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S689$menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    menuStateMain.menuMessage	PTR PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), MESSAGE_MENU_ITEM_TONE(BANK1[8]), MESSAGE_MENU_ITEM_MAIN(BANK1[20]), 

    S631$MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_36(CODE[9]), 

    MESSAGE.ERROR.MESSAGE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_36(CODE[9]), 

    S627$LOAD_DEFAULT	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_35(CODE[12]), 

    MESSAGE.MEMORY.LOAD_DEFAULT	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_35(CODE[12]), 

    S627$SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_34(CODE[6]), 

    MESSAGE.MEMORY.SAVE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_34(CODE[6]), 

    S627$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_33(CODE[7]), 

    MESSAGE.MEMORY.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_33(CODE[7]), 

    S621$YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), 

    MESSAGE.CONFIRM.YES	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), 

    S621$NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    MESSAGE.CONFIRM.NO	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), 

    S621$RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_30(CODE[8]), 

    MESSAGE.CONFIRM.RESET	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_30(CODE[8]), 

    S621$SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[7]), 

    MESSAGE.CONFIRM.SAVE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_29(CODE[7]), 

    S621$LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_28(CODE[7]), 

    MESSAGE.CONFIRM.LOAD	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_28(CODE[7]), 

    S614$OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_27(CODE[10]), 

    MESSAGE.CONFIGURATION.OSCILLATOR_TUNE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_27(CODE[10]), 

    S614$PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[12]), 

    MESSAGE.CONFIGURATION.PULSE_WIDTH	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[12]), 

    S614$DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), 

    MESSAGE.CONFIGURATION.DURATION	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), 

    S614$TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), 

    MESSAGE.CONFIGURATION.TONE	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), 

    S614$BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_23(CODE[11]), 

    MESSAGE.CONFIGURATION.BEAT_COUNT	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_23(CODE[11]), 

    S614$TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[7]), 

    MESSAGE.CONFIGURATION.TITLE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[7]), 

    S610$TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[6]), 

    MESSAGE.METRONOME.TEMPO	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_21(CODE[6]), 

    S610$MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), 

    MESSAGE.METRONOME.MUTE	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), 

    S610$TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_19(CODE[10]), 

    MESSAGE.METRONOME.TILE	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_19(CODE[10]), 

    MESSAGE_INFORMATION	PTR const unsigned char [4] size(2) Largest target is 11
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[11]), STR_15(CODE[8]), 

    MESSAGE_MENU_ITEM_TONE	PTR const unsigned char [4] size(2) Largest target is 14
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), 
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    MESSAGE_MENU_ITEM_MAIN	PTR const unsigned char [10] size(2) Largest target is 14
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[9]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[10]), 
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    _configuration_Load@config	PTR struct . size(1) Largest target is 11
		 -> config(BANK0[11]), 

    _configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 11
		 -> config(BANK0[11]), 

    _configuration_Save@config	PTR struct . size(1) Largest target is 11
		 -> config(BANK0[11]), 

    _configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 11
		 -> config(BANK0[11]), 

    _parallel_lcd_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 24
		 -> BITMAP(CODE[24]), 

    _parallel_lcd_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_36(CODE[9]), STR_35(CODE[12]), STR_34(CODE[6]), STR_33(CODE[7]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_27(CODE[10]), STR_26(CODE[12]), 
		 -> STR_25(CODE[9]), STR_24(CODE[5]), STR_23(CODE[11]), STR_22(CODE[7]), 
		 -> STR_21(CODE[6]), STR_19(CODE[10]), STR_18(CODE[11]), STR_17(CODE[11]), 
		 -> STR_16(CODE[11]), STR_15(CODE[8]), STR_14(CODE[6]), STR_13(CODE[6]), 
		 -> STR_12(CODE[6]), STR_11(CODE[9]), STR_10(CODE[6]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[10]), STR_5(CODE[13]), 
		 -> STR_4(CODE[14]), STR_3(CODE[10]), STR_2(CODE[11]), STR_1(CODE[9]), 

    _parallel_lcd_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 28
		 -> main@valueString(BANK0[6]), informationValueBuffer(BANK1[28]), STR_30(CODE[8]), STR_29(CODE[7]), 
		 -> STR_28(CODE[7]), STR_20(CODE[7]), 


Critical Paths under _main in COMMON

    _main->__parallel_lcd_ClearRow
    _main->__parallel_lcd_SetCgram
    _main->__parallel_lcd_WriteCharacter
    _main->__parallel_lcd_WriteString
    _main->__parallel_lcd_WriteStringClearing
    __parallel_lcd_WriteStringClearing->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteString->___bmul
    __parallel_lcd_WriteString->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteCharacter->__private_parallel_lcd_WriteByte
    __parallel_lcd_SetCgram->__private_parallel_lcd_WriteByte
    __parallel_lcd_Initialize->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearRow->__private_parallel_lcd_WriteByte
    __configuration_Save->__configuration_ReadByte
    __configuration_Save->__configuration_WriteByte
    __configuration_Load->__configuration_ReadByte
    __configuration_GetRomOffset->__configuration_ReadByte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->__configuration_Save
    __parallel_lcd_WriteString->___bmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   20474
                                              7 BANK0     28    28      0
                             ___bmul
        __configuration_GetRomOffset
                __configuration_Load
            __configuration_ReadByte
                __configuration_Save
             __parallel_lcd_ClearRow
           __parallel_lcd_Initialize
             __parallel_lcd_SetCgram
       __parallel_lcd_WriteCharacter
          __parallel_lcd_WriteString
  __parallel_lcd_WriteStringClearing
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteStringClearing                    5     3      2    4248
                                              6 COMMON     1     1      0
                                              0 BANK0      4     2      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteString                            4     2      2    2678
                                              6 COMMON     1     1      0
                                              2 BANK0      3     1      2
                             ___bmul (ARG)
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteCharacter                         2     1      1    2374
                                              6 COMMON     1     0      1
                                              0 BANK0      1     1      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_SetCgram                               5     3      2    2265
                                              6 COMMON     1     1      0
                                              0 BANK0      4     2      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_Initialize                             0     0      0    1862
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearRow                               3     3      0    1961
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) __private_parallel_lcd_WriteByte                      2     1      1    1862
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Save                                  7     7      0    1412
                                              0 BANK0      7     7      0
            __configuration_ReadByte
           __configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) __configuration_WriteByte                             2     1      1     196
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) __configuration_Load                                  6     6      0    1046
                                              0 BANK0      6     6      0
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (1) __configuration_GetRomOffset                          0     0      0     576
            __configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) __configuration_ReadByte                              2     1      1     576
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     206
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   __configuration_GetRomOffset
     __configuration_ReadByte
   __configuration_Load
     __configuration_ReadByte
   __configuration_ReadByte
   __configuration_Save
     __configuration_ReadByte
     __configuration_WriteByte
   __parallel_lcd_ClearRow
     __private_parallel_lcd_WriteByte
   __parallel_lcd_Initialize
     __private_parallel_lcd_WriteByte
   __parallel_lcd_SetCgram
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteCharacter
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteString
     ___bmul (ARG)
     __private_parallel_lcd_WriteByte (ARG)
   __parallel_lcd_WriteStringClearing
     __private_parallel_lcd_WriteByte
   _initialize

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             160      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A3       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     23      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            20      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      A3      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Aug  9 15:47:12 2015

                                          pc 0002                               ___bmul@product 0020  
                 ??__parallel_lcd_Initialize 0076                                  __CFG_CP$OFF 0000  
                 ?__parallel_lcd_WriteString 0022                                          l144 0DFB  
                                        l400 046C                                          l153 0FA8  
                                        l241 00FE                                          l402 06D7  
                                        l322 02FD                                          l147 0E06  
                                        l323 0300                                          l251 01B5  
                                        l172 07FA                                          l148 0E07  
                                        l244 0100                                          l165 07E1  
                                        l341 0362                                          l325 0306  
                                        l261 01D5                                          l237 00F9  
                                        l350 0382                                          l342 0363  
                                        l238 01B0                                          l335 0325  
                                        l271 01F7                                          l263 01F1  
                                        l255 01CA                                          l336 032C  
                                        l280 0297                                          l256 01C9  
                                        l248 01A4                                          l337 0333  
                                        l281 0317                                          l273 0217  
                                        l178 0DDF                                          l338 033E  
                                        l274 01FF                                          l258 01D1  
                                        l179 0DE0                                          l435 06EF  
                                        l339 034D                                          l259 01D0  
                                        l380 0424                                          l445 072A  
                                        l357 0412                                          l285 029D  
                                        l277 0298                                          l382 042C  
                                        l358 03C0                                          l367 03E1  
                                        l279 0295                                          l384 0433  
                                        l396 046B                                          l397 0488  
                                        _PR2 001B                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                                          _PR6 041D  
                                        _isr 0004                                 __CFG_IDLOC0$ 0001  
                               __CFG_IDLOC1$ 0001                                 __CFG_IDLOC2$ 0000  
                               __CFG_IDLOC3$ 0000                                 __CFG_BORV$HI 0000  
                                        wreg 0009                         _menuStateInformation 0052  
                                       S3920 099C                                         S3922 09BC  
                                       S3924 097A                                         S3916 09D8  
                                       S3918 0958                                 __CFG_LVP$OFF 0000  
                            __end_of_MESSAGE 0824                                         l3200 0FFB  
                                       l3116 0EB5                                         l3300 0102  
                                       l3118 0EBB                                         l3310 013F  
                                       l3240 07EB                                         l3250 0DCB  
                                       l3226 07BB                                         l3218 07B1  
                                       l3410 02A1                                         l3420 02AD  
                                       l3412 02A3                                         l3246 0DC5  
                                       l3190 0FE1                                         l3510 035B  
                                       l3430 02B7                                         l3422 02AF  
                                       l3318 0164                                         l3326 018C  
                                       l3168 0FA2                                         l3520 0373  
                                       l3440 02CB                                         l3424 02B1  
                                       l3352 01D9                                         l3280 00E9  
                                       l3098 0E48                                         l3530 03A4  
                                       l3442 02D1                                         l3426 02B3  
                                       l3418 02AB                                         l3434 02B9  
                                       l3370 01FA                                         l3282 00EA  
                                       l3188 0FB2                                         l3700 063E  
                                       l3532 03A5                                         l3460 02F2  
                                       l3452 02E1                                         l3436 02C5  
                                       l3428 02B5                                         l3372 0200  
                                       l3356 01DD                                         l3364 01E9  
                                       l3702 0641                                         l3542 03BE  
                                       l3518 0369                                         l3454 02E7  
                                       l3446 02D6                                         l3720 06B7  
                                       l3712 0693                                         l3624 043E  
                                       l3552 03CF                                         l3480 031F  
                                       l3448 02DC                                         l3376 0209  
                                       l3642 0471                                         l3554 03D0  
                                       l3482 0321                                         l3466 02FA  
                                       l3458 02EC                                         l3474 030A  
                                       l3740 070A                                         l3732 06EA  
                                       l3716 06A5                                         l3708 0681  
                                       l3660 0539                                         l3652 04DF  
                                       l3628 0444                                         l3636 0453  
                                       l3564 03DF                                         l3396 0289  
                                       l3662 0547                                         l3670 056F  
                                       l3646 048C                                         l3726 06C9  
                                       l3574 03F3                                         l3478 031D  
                                       l3398 028A                                         l3760 072D  
                                       l3744 0715                                         l3680 05B3  
                                       l3672 0588                                         l3664 0555  
                                       l3656 0506                                         l3770 0755  
                                       l3754 0723                                         l3738 0704  
                                       l3746 071D                                         l3658 051E  
                                       l3586 0404                                         l3780 0772  
                                       l3756 0725                                         l3692 0601  
                                       l3684 05CD                                         l3668 0563  
                                       l3768 0738                                         l3784 077A  
                                       l3696 061B                                         l3688 05E7  
                                       l3786 0783                                         l3794 0791  
                                       l3788 0787                                         ?_isr 0070  
                                       STR_1 08E1                                 __CFG_WDTE$ON 0000  
                                       STR_2 08A5                                         STR_3 08BA  
                                       STR_4 0851                                         STR_5 085F  
                                       STR_6 08CE                                         STR_7 0941  
                                       STR_8 0946                                         STR_9 094B  
                                       _LATB 010D                                         u3024 044B  
                                       u3025 044A                                         u3125 0741  
                                       u2345 0E67                                         u3090 06E5  
                                       u2705 0264                                         u2555 010F  
                                       u2565 012D                                         u2685 0222  
                                       u2695 0243                                  _outputEvent 006B  
                                       _TMR0 0015                                         _TMR1 0016  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                 __CFG_WRT$OFF 0000  
                        _MESSAGE_INFORMATION 00A0                                         _main 00D9  
                                       fsr0h 0005                                         fsr1h 0007  
                                       fsr0l 0004                                         indf0 0000  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                                       ltemp 007E                                         start 00B2  
                                       ttemp 007E                                         wtemp 007E  
                              __CFG_IESO$OFF 0000                            ___bmul@multiplier 0021  
                                      ??_isr 0070                                        ?_main 0070  
                                      STR_10 093B                                        STR_11 08E1  
                                      STR_20 08FA                                        STR_12 091D  
                                      STR_21 0935                                        STR_13 0923  
                                      STR_30 08EA                                        STR_22 0916  
                                      STR_14 0929                                        STR_31 0950  
                                      STR_23 08A5                                        STR_15 08F2  
                                      STR_32 0954                                        STR_24 08BF  
                                      STR_16 088F                                        STR_33 090F  
                                      STR_25 0856                                        STR_17 089A  
                                      STR_34 092F                                        STR_26 0878  
                                      STR_18 0884                                        STR_35 086C  
                                      STR_27 08C4                                        STR_19 08B0  
                                      STR_36 08D8                                        STR_28 0901  
                                      STR_29 0908                                        i1l461 00AE  
                         main@prevPortAState 006E                                        _PORTA 000C  
                                      _TRISA 008C                                        _TRISB 008D  
                              __CFG_PWRTE$ON 0000                               __CFG_FCMEN$OFF 0000  
            __end_of_PARALLEL_LCD_ROW_SELECT 0839                     ?__configuration_ReadByte 0074  
                                      main@i 0042                                 main@tmpValue 003A  
                                      ltemp0 007E                                        ltemp1 0082  
                                      ltemp2 0086                                        ltemp3 0080  
                          __end_of_CHAR_CODE 0837                                        ttemp0 007E  
                                      ttemp1 0081                                        ttemp2 0084  
                                      ttemp3 0087                                        ttemp4 007F  
                                      status 0003                                        wtemp0 007E  
                                      wtemp1 0080                                        wtemp2 0082  
                                      wtemp3 0084                                        wtemp4 0086  
                                      wtemp5 0088                                        wtemp6 007F  
                             __CFG_MCLRE$OFF 0000                              __initialization 00B4  
                               __end_of_main 079B                                       ??_main 0027  
                          __end_of_HEX_TABLE 0834                               __CFG_PLLEN$OFF 0000  
              __parallel_lcd_SetCgram@bitmap 0020              __configuration_ReadByte@address 0075  
                              main@isNonZero 0039                                       _EEADRH 0192  
                                     _EEADRL 0191                                       _EEDATH 0194  
                                     _CCPR4H 0319                                       _EEDATL 0193  
                                     _CCPR4L 0318                                       _EECON2 0196  
                                     _BITMAP 0839                                       _ANSELA 018C  
                                     _ANSELB 018D                                       i1l2914 0046  
                                     i1l2934 0067                                       i1l2918 004A  
                                     i1l2960 0096                                       i1l2928 005F  
                                     i1l2970 00A7                                       i1l2946 007F  
                                     i1l2972 00A8                                       i1l2958 0095  
                                     u207_25 0020                                       u208_25 0042  
                   ??__parallel_lcd_ClearRow 0076                                       ___bmul 0DC2  
           __end_of__parallel_lcd_Initialize 0DFA                               __CFG_STVREN$ON 0000  
                                     _config 0043                                       _isMute 0068  
                   ??__parallel_lcd_SetCgram 0076                                main@romOffset 003C  
                            _currentValuePtr 0065         __private_parallel_lcd_WriteByte@data 0075  
                    __end_of__initialization 00D6                     __configuration_WriteByte 07ED  
                        ___bmul@multiplicand 0074                  __end_of__configuration_Load 07ED  
                __end_of__configuration_Save 1000                               __pcstackCOMMON 0070  
                               __pidataBANK0 0E10                                 __pidataBANK1 0EC1  
       __end_of__parallel_lcd_WriteCharacter 0DC2        __size_of__parallel_lcd_WriteCharacter 000D  
               __parallel_lcd_WriteCharacter 0DB5                  ??__parallel_lcd_WriteString 0076  
                             _OPTION_REGbits 0095                                   __pbssBANK0 005A  
            __size_of__parallel_lcd_ClearRow 001A                                _menuStateMain 00E6  
                              _menuStateTone 0056                                   __pmaintext 00D9  
                                    ?___bmul 0074                                   __pintentry 0004  
              __configuration_WriteByte@data 0074                ?__parallel_lcd_WriteCharacter 0076  
            __size_of__parallel_lcd_SetCgram 002A                                      _CCPTMRS 029E  
               ?__configuration_GetRomOffset 0070                                      _MESSAGE 0800  
                             main@keyPressed 003E                                      _OSCTUNE 0098  
          __size_of__parallel_lcd_Initialize 0014                    ?__parallel_lcd_Initialize 0070  
                  __parallel_lcd_WriteString 0E41                          _currentMenuStatePtr 0064  
                                  _CHAR_CODE 0834                        __configuration_Load@i 0025  
           __size_of__configuration_ReadByte 0012                        __configuration_Save@i 0025  
                            __size_of___bmul 0012               __configuration_Save@returnCode 0022  
                                 _initialize 0F0B                                      __ptext1 0F0B  
                                    __ptext2 0E8B                                      __ptext3 0E41  
                                    __ptext4 0DB5                       __parallel_lcd_ClearRow 0E27  
                                    __ptext5 0E61                                      __ptext6 0DE6  
                                    __ptext7 0E27                                      __ptext8 0DFA  
                                    __ptext9 0F72                       _informationValueBuffer 00AE  
                                  _T1CONbits 0018                                    _T2CONbits 001C  
                               __size_of_isr 00AE                                    _T4CONbits 0417  
                                 _inputEvent 0067                                    _T6CONbits 041E  
                                  _HEX_TABLE 0824                                      clrloop0 0DB0  
                       end_of_initialization 00D6                       __parallel_lcd_SetCgram 0E61  
                             main@returnCode 0040          __parallel_lcd_WriteStringClearing@i 0023  
                                    isr@tmr3 0079                                      init_ram 0DA9  
                                    initloop 0DAA                      _PARALLEL_LCD_ROW_SELECT 0837  
                                 _valueLimit 0061                                 __pstringtext 0800  
                 __configuration_Load@config 0024                             __CFG_FOSC$INTOSC 0000  
        __parallel_lcd_WriteString@stringPtr 0022                   ??__configuration_WriteByte 0075  
                             __end_of_BITMAP 0851                                  _CCP1CONbits 0293  
                                _CCP2CONbits 029A         __size_of__configuration_GetRomOffset 0005  
                                _CCP3CONbits 0313                                  _CCP4CONbits 031A  
                                 main@userId 0041                               __end_of___bmul 0DD4  
                                ?_initialize 0070                          start_initialization 00B4  
                                __end_of_isr 00B2         __configuration_ReadByte@memorySelect 0074  
                                _beatCounter 0063                   __configuration_Save@config 0026  
                    __configuration_ReadByte 0DD4           __size_of__parallel_lcd_WriteString 0020  
                                   ??___bmul 0075                                  _CCPTMRSbits 029E  
                                __pdataBANK0 0043                                  __pdataBANK1 00A0  
               __size_of__configuration_Load 0052                 __size_of__configuration_Save 008E  
           __parallel_lcd_ClearRow@rowSelect 0020                             _menuStateConfirm 004E  
      __parallel_lcd_WriteCharacter@position 0020                                  __pbssCOMMON 0077  
                                  ___latbits 0001                                __pcstackBANK0 0020  
                        __size_of_initialize 0067                                    _main$1165 0031  
                                  _main$1166 0033                                    _main$1167 0035  
                                  _main$1168 0037            __end_of__parallel_lcd_WriteString 0E61  
                    ?__parallel_lcd_ClearRow 0070                     __parallel_lcd_ClearRow@i 0021  
                            main@compareUnit 003D                                    __pswtext1 09D8  
                                  __pswtext2 0958                                    __pswtext3 099C  
                                  __pswtext4 09BC                                    __pswtext5 097A  
              __configuration_Save@romOffset 0024             __end_of__configuration_WriteByte 07FF  
                    ?__parallel_lcd_SetCgram 0020                __configuration_Save@ptrConfig 0023  
    __end_of__private_parallel_lcd_WriteByte 0E10     __size_of__private_parallel_lcd_WriteByte 0016  
          ??__private_parallel_lcd_WriteByte 0075             ?__private_parallel_lcd_WriteByte 0074  
            __private_parallel_lcd_WriteByte 0DFA                    ??__configuration_ReadByte 0075  
                                   _LATAbits 010C                                    clear_ram0 0DAF  
                                   _PIE1bits 0091                                     _PIE3bits 0093  
                                   _PIR1bits 0011                                     _PIR2bits 0012  
                                   _PIR3bits 0013               __end_of__parallel_lcd_ClearRow 0E41  
                                  main@F3067 00A8           __parallel_lcd_WriteString@position 0024  
     __parallel_lcd_WriteCharacter@character 0076               __end_of__parallel_lcd_SetCgram 0E8B  
                                  main@phase 003F                     __parallel_lcd_Initialize 0DE6  
                   __parallel_lcd_SetCgram@i 0023  __parallel_lcd_WriteStringClearing@stringPtr 0020  
                                 _EECON1bits 0195            __private_parallel_lcd_WriteByte@r 0074  
            __end_of__configuration_ReadByte 0DE6                                 ??_initialize 0074  
        __end_of__configuration_GetRomOffset 0DA9                  __configuration_GetRomOffset 0DA4  
            __parallel_lcd_SetCgram@charCode 0022                       _MESSAGE_MENU_ITEM_MAIN 00CA  
                     _MESSAGE_MENU_ITEM_TONE 00DE                                     __ptext10 07ED  
                                   __ptext11 079B                                     __ptext12 0DA4  
                                   __ptext13 0DD4                                     __ptext14 0DC2  
              ??__configuration_GetRomOffset 0076                                     _keyCount 005A  
                        __configuration_Load 079B                          __configuration_Save 0F72  
                                   _duration 0066                                __size_of_main 06C2  
                         __end_of_initialize 0F72    __end_of__parallel_lcd_WriteStringClearing 0EC1  
 __size_of__parallel_lcd_WriteStringClearing 0036           ?__parallel_lcd_WriteStringClearing 0020  
        ??__parallel_lcd_WriteStringClearing 0076            __parallel_lcd_WriteStringClearing 0E8B  
          __size_of__configuration_WriteByte 0012                    ?__configuration_WriteByte 0074  
 __parallel_lcd_WriteStringClearing@position 0022                         ?__configuration_Load 0070  
                       ?__configuration_Save 0070                              main@valueString 002B  
                               _tempoCounter 005E                                  _OSCTUNEbits 0098  
                                 _INTCONbits 000B               ??__parallel_lcd_WriteCharacter 0077  
                          isr@eventPrescaler 0077                                     intlevel1 0000  
                          __CFG_CLKOUTEN$OFF 0000             __configuration_WriteByte@address 0075  
                                 _OSCCONbits 0099                        ??__configuration_Load 0020  
                      ??__configuration_Save 0020                                  _portAState_ 006C  
                            _keyBeepCounter_ 0069                __configuration_Load@romOffset 0023  
                                 _WDTCONbits 0097                                _machineState_ 006A  
              __configuration_Load@ptrConfig 0022                           _stateReturnCounter 006D  
