

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 12 22:05:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext2,local,class=CONST,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  0011                     	;# 
    51  0012                     	;# 
    52  0013                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001C                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  010C                     	;# 
    80  010D                     	;# 
    81  010E                     	;# 
    82  0111                     	;# 
    83  0112                     	;# 
    84  0113                     	;# 
    85  0114                     	;# 
    86  0115                     	;# 
    87  0116                     	;# 
    88  0117                     	;# 
    89  0118                     	;# 
    90  0119                     	;# 
    91  011D                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94  018E                     	;# 
    95  0191                     	;# 
    96  0191                     	;# 
    97  0192                     	;# 
    98  0193                     	;# 
    99  0193                     	;# 
   100  0194                     	;# 
   101  0195                     	;# 
   102  0196                     	;# 
   103  0197                     	;# 
   104  0199                     	;# 
   105  019A                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019C                     	;# 
   109  019D                     	;# 
   110  019E                     	;# 
   111  019F                     	;# 
   112  020C                     	;# 
   113  020D                     	;# 
   114  0211                     	;# 
   115  0211                     	;# 
   116  0212                     	;# 
   117  0212                     	;# 
   118  0213                     	;# 
   119  0213                     	;# 
   120  0214                     	;# 
   121  0214                     	;# 
   122  0215                     	;# 
   123  0215                     	;# 
   124  0215                     	;# 
   125  0216                     	;# 
   126  0216                     	;# 
   127  0217                     	;# 
   128  0217                     	;# 
   129  0391                     	;# 
   130  0392                     	;# 
   131  0393                     	;# 
   132  0394                     	;# 
   133  0395                     	;# 
   134  0396                     	;# 
   135  0498                     	;# 
   136  0498                     	;# 
   137  0499                     	;# 
   138  049A                     	;# 
   139  049B                     	;# 
   140  049B                     	;# 
   141  049C                     	;# 
   142  049E                     	;# 
   143  049F                     	;# 
   144  0611                     	;# 
   145  0612                     	;# 
   146  0613                     	;# 
   147  0613                     	;# 
   148  0614                     	;# 
   149  0615                     	;# 
   150  0616                     	;# 
   151  0616                     	;# 
   152  0617                     	;# 
   153  0618                     	;# 
   154  0619                     	;# 
   155  0619                     	;# 
   156  061A                     	;# 
   157  061B                     	;# 
   158  061C                     	;# 
   159  061C                     	;# 
   160  0691                     	;# 
   161  0692                     	;# 
   162  0693                     	;# 
   163  0694                     	;# 
   164  0695                     	;# 
   165  0F0F                     	;# 
   166  0F10                     	;# 
   167  0F11                     	;# 
   168  0F12                     	;# 
   169  0F13                     	;# 
   170  0F14                     	;# 
   171  0F15                     	;# 
   172  0F16                     	;# 
   173  0F17                     	;# 
   174  0F18                     	;# 
   175  0F19                     	;# 
   176  0F1A                     	;# 
   177  0F1B                     	;# 
   178  0F1C                     	;# 
   179  0F1D                     	;# 
   180  0F1E                     	;# 
   181  0F1F                     	;# 
   182  0F20                     	;# 
   183  0F21                     	;# 
   184  0F22                     	;# 
   185  0F23                     	;# 
   186  0F24                     	;# 
   187  0F25                     	;# 
   188  0F26                     	;# 
   189  0F27                     	;# 
   190  0F28                     	;# 
   191  0F29                     	;# 
   192  0F2A                     	;# 
   193  0F2B                     	;# 
   194  0F2C                     	;# 
   195  0F2D                     	;# 
   196  0F2E                     	;# 
   197  0F2F                     	;# 
   198  0F8C                     	;# 
   199  0F8D                     	;# 
   200  0F91                     	;# 
   201  0F95                     	;# 
   202  0F96                     	;# 
   203  0F97                     	;# 
   204  0F9C                     	;# 
   205  0F9D                     	;# 
   206  0F9E                     	;# 
   207  0FE3                     	;# 
   208  0FE4                     	;# 
   209  0FE5                     	;# 
   210  0FE6                     	;# 
   211  0FE7                     	;# 
   212  0FE8                     	;# 
   213  0FE9                     	;# 
   214  0FEA                     	;# 
   215  0FEB                     	;# 
   216  0FED                     	;# 
   217  0FEE                     	;# 
   218  0FEF                     	;# 
   219                           
   220                           	psect	idataBANK0
   221  0E4F                     __pidataBANK0:	
   222                           
   223                           ;initializer for main@F4267
   224  0E4F  3430               	retlw	48
   225  0E50  3430               	retlw	48
   226  0E51  3430               	retlw	48
   227  0E52  3400               	retlw	0
   228                           
   229                           	psect	idataBANK1
   230  0E61                     __pidataBANK1:	
   231                           
   232                           ;initializer for _STR_DAY_OF_WEEK
   233  0E61  34AA               	retlw	low (STR_1| (0+32768))
   234  0E62  3487               	retlw	high (STR_1| (0+32768))
   235  0E63  34A6               	retlw	low (STR_2| (0+32768))
   236  0E64  3487               	retlw	high (STR_2| (0+32768))
   237  0E65  349E               	retlw	low (STR_3| (0+32768))
   238  0E66  3487               	retlw	high (STR_3| (0+32768))
   239  0E67  349A               	retlw	low (STR_4| (0+32768))
   240  0E68  3487               	retlw	high (STR_4| (0+32768))
   241  0E69  34B2               	retlw	low (STR_5| (0+32768))
   242  0E6A  3487               	retlw	high (STR_5| (0+32768))
   243  0E6B  34A2               	retlw	low (STR_6| (0+32768))
   244  0E6C  3487               	retlw	high (STR_6| (0+32768))
   245  0E6D  34AE               	retlw	low (STR_7| (0+32768))
   246  0E6E  3487               	retlw	high (STR_7| (0+32768))
   247                           
   248                           ;initializer for _MESSAGE_MENU
   249  0E6F  344A               	retlw	low (STR_8| (0+32768))
   250  0E70  3487               	retlw	high (STR_8| (0+32768))
   251  0E71  3463               	retlw	low (STR_9| (0+32768))
   252  0E72  3487               	retlw	high (STR_9| (0+32768))
   253  0E73  3457               	retlw	low (STR_10| (0+32768))
   254  0E74  3487               	retlw	high (STR_10| (0+32768))
   255  0E75  347E               	retlw	low (STR_11| (0+32768))
   256  0E76  3487               	retlw	high (STR_11| (0+32768))
   257                           
   258                           	psect	stringtext
   259  0700                     __pstringtext:	
   260  0700                     _HEX_TABLE:	
   261  0700  3430               	retlw	48
   262  0701  3431               	retlw	49
   263  0702  3432               	retlw	50
   264  0703  3433               	retlw	51
   265  0704  3434               	retlw	52
   266  0705  3435               	retlw	53
   267  0706  3436               	retlw	54
   268  0707  3437               	retlw	55
   269  0708  3438               	retlw	56
   270  0709  3439               	retlw	57
   271  070A  3441               	retlw	65
   272  070B  3442               	retlw	66
   273  070C  3443               	retlw	67
   274  070D  3444               	retlw	68
   275  070E  3445               	retlw	69
   276  070F  3446               	retlw	70
   277  0710                     __end_of_HEX_TABLE:	
   278  0710                     main@COMPARE_UNITS:	
   279  0710  3464               	retlw	100
   280  0711  340A               	retlw	10
   281  0712  3401               	retlw	1
   282  0713                     __end_ofmain@COMPARE_UNITS:	
   283  0713                     _PARALLEL_LCD_ROW_SELECT:	
   284  0713  3480               	retlw	128
   285  0714  34C0               	retlw	192
   286  0715                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   287  0715                     _VALUE_INFORMATIONS:	
   288  0715  3482               	retlw	130
   289  0716  3402               	retlw	2
   290  0717  3499               	retlw	153
   291  0718  3400               	retlw	0
   292  0719  3485               	retlw	133
   293  071A  3402               	retlw	2
   294  071B  3412               	retlw	18
   295  071C  3401               	retlw	1
   296  071D  3488               	retlw	136
   297  071E  3402               	retlw	2
   298  071F  3431               	retlw	49
   299  0720  3401               	retlw	1
   300  0721  348C               	retlw	140
   301  0722  3403               	retlw	3
   302  0723  3407               	retlw	7
   303  0724  3401               	retlw	1
   304  0725  34C0               	retlw	192
   305  0726  3402               	retlw	2
   306  0727  3423               	retlw	35
   307  0728  3400               	retlw	0
   308  0729  34C3               	retlw	195
   309  072A  3402               	retlw	2
   310  072B  3459               	retlw	89
   311  072C  3400               	retlw	0
   312  072D  34C6               	retlw	198
   313  072E  3402               	retlw	2
   314  072F  3459               	retlw	89
   315  0730  3400               	retlw	0
   316  0731                     __end_of_VALUE_INFORMATIONS:	
   317  0731                     _CURSOR_BITMAP:	
   318  0731  3410               	retlw	16
   319  0732  3418               	retlw	24
   320  0733  341C               	retlw	28
   321  0734  341E               	retlw	30
   322  0735  341C               	retlw	28
   323  0736  3418               	retlw	24
   324  0737  3410               	retlw	16
   325  0738  3400               	retlw	0
   326  0739                     __end_of_CURSOR_BITMAP:	
   327  000B                     _INTCONbits	set	11
   328  000C                     _PORTA	set	12
   329  001B                     _PR2	set	27
   330  001C                     _T2CON	set	28
   331  0015                     _TMR0	set	21
   332  001A                     _TMR2	set	26
   333  005B                     _IOCIE	set	91
   334  0058                     _IOCIF	set	88
   335  008B                     _SSP1IF	set	139
   336  005D                     _TMR0IE	set	93
   337  005A                     _TMR0IF	set	90
   338  0089                     _TMR2IF	set	137
   339  00E2                     _TMR2ON	set	226
   340  0095                     _OPTION_REGbits	set	149
   341  0099                     _OSCCONbits	set	153
   342  008C                     _TRISA	set	140
   343  008D                     _TRISB	set	141
   344  008E                     _TRISC	set	142
   345  0489                     _TMR2IE	set	1161
   346  010D                     _LATBbits	set	269
   347  010E                     _LATC	set	270
   348  018C                     _ANSELA	set	396
   349  018D                     _ANSELB	set	397
   350  018E                     _ANSELC	set	398
   351  0212                     _SSP1ADD	set	530
   352  0211                     _SSP1BUF	set	529
   353  0215                     _SSP1CON1	set	533
   354  0216                     _SSP1CON2bits	set	534
   355  0214                     _SSP1STAT	set	532
   356  0214                     _SSPSTATbits	set	532
   357  0392                     _IOCANbits	set	914
   358  1C9B                     _IOCAF3	set	7323
   359  0618                     _PWM3DCH	set	1560
   360  0617                     _PWM3DCL	set	1559
   361  30CF                     _PWM3EN	set	12495
   362  30CE                     _PWM3OE	set	12494
   363  30CC                     _PWM3POL	set	12492
   364  0739                     STR_22:	
   365  0739  3452               	retlw	82	;'R'
   366  073A  3465               	retlw	101	;'e'
   367  073B  3463               	retlw	99	;'c'
   368  073C  3465               	retlw	101	;'e'
   369  073D  3469               	retlw	105	;'i'
   370  073E  3476               	retlw	118	;'v'
   371  073F  3465               	retlw	101	;'e'
   372  0740  3420               	retlw	32	;' '
   373  0741  3445               	retlw	69	;'E'
   374  0742  3472               	retlw	114	;'r'
   375  0743  3472               	retlw	114	;'r'
   376  0744  346F               	retlw	111	;'o'
   377  0745  3472               	retlw	114	;'r'
   378  0746  3420               	retlw	32	;' '
   379  0747  3421               	retlw	33	;'!'
   380  0748  3421               	retlw	33	;'!'
   381  0749  3400               	retlw	0
   382  074A                     STR_8:	
   383  074A  3441               	retlw	65	;'A'
   384  074B  3464               	retlw	100	;'d'
   385  074C  346A               	retlw	106	;'j'
   386  074D  3475               	retlw	117	;'u'
   387  074E  3473               	retlw	115	;'s'
   388  074F  3474               	retlw	116	;'t'
   389  0750  3420               	retlw	32	;' '
   390  0751  3443               	retlw	67	;'C'
   391  0752  346C               	retlw	108	;'l'
   392  0753  346F               	retlw	111	;'o'
   393  0754  3463               	retlw	99	;'c'
   394  0755  346B               	retlw	107	;'k'
   395  0756  3400               	retlw	0
   396  0757                     STR_10:	
   397  0757  3442               	retlw	66	;'B'
   398  0758  3475               	retlw	117	;'u'
   399  0759  347A               	retlw	122	;'z'
   400  075A  347A               	retlw	122	;'z'
   401  075B  3465               	retlw	101	;'e'
   402  075C  3472               	retlw	114	;'r'
   403  075D  3420               	retlw	32	;' '
   404  075E  3454               	retlw	84	;'T'
   405  075F  3465               	retlw	101	;'e'
   406  0760  3473               	retlw	115	;'s'
   407  0761  3474               	retlw	116	;'t'
   408  0762  3400               	retlw	0
   409  0763                     STR_9:	
   410  0763  3453               	retlw	83	;'S'
   411  0764  3465               	retlw	101	;'e'
   412  0765  3474               	retlw	116	;'t'
   413  0766  3420               	retlw	32	;' '
   414  0767  3454               	retlw	84	;'T'
   415  0768  3469               	retlw	105	;'i'
   416  0769  346D               	retlw	109	;'m'
   417  076A  3465               	retlw	101	;'e'
   418  076B  3472               	retlw	114	;'r'
   419  076C  3400               	retlw	0
   420  076D                     STR_19:	
   421  076D  3450               	retlw	80	;'P'
   422  076E  3465               	retlw	101	;'e'
   423  076F  3472               	retlw	114	;'r'
   424  0770  3469               	retlw	105	;'i'
   425  0771  346F               	retlw	111	;'o'
   426  0772  3464               	retlw	100	;'d'
   427  0773  3420               	retlw	32	;' '
   428  0774  343D               	retlw	61	;'='
   429  0775  3400               	retlw	0
   430  0776                     STR_15:	
   431  0776  3441               	retlw	65	;'A'
   432  0777  344C               	retlw	76	;'L'
   433  0778  3445               	retlw	69	;'E'
   434  0779  3452               	retlw	82	;'R'
   435  077A  344D               	retlw	77	;'M'
   436  077B  3421               	retlw	33	;'!'
   437  077C  3421               	retlw	33	;'!'
   438  077D  3400               	retlw	0
   439  077E                     STR_11:	
   440  077E  3456               	retlw	86	;'V'
   441  077F  3465               	retlw	101	;'e'
   442  0780  3472               	retlw	114	;'r'
   443  0781  3473               	retlw	115	;'s'
   444  0782  3469               	retlw	105	;'i'
   445  0783  346F               	retlw	111	;'o'
   446  0784  346E               	retlw	110	;'n'
   447  0785  3400               	retlw	0
   448  0786                     STR_14:	
   449  0786  3430               	retlw	48	;'0'
   450  0787  3430               	retlw	48	;'0'
   451  0788  342E               	retlw	46	;'.'
   452  0789  3431               	retlw	49	;'1'
   453  078A  3430               	retlw	48	;'0'
   454  078B  3430               	retlw	48	;'0'
   455  078C  3400               	retlw	0
   456  078D                     STR_16:	
   457  078D  3461               	retlw	97	;'a'
   458  078E  3464               	retlw	100	;'d'
   459  078F  346A               	retlw	106	;'j'
   460  0790  3475               	retlw	117	;'u'
   461  0791  3473               	retlw	115	;'s'
   462  0792  3474               	retlw	116	;'t'
   463  0793  3400               	retlw	0
   464  0794                     STR_17:	
   465  0794  3474               	retlw	116	;'t'
   466  0795  3469               	retlw	105	;'i'
   467  0796  346D               	retlw	109	;'m'
   468  0797  3465               	retlw	101	;'e'
   469  0798  3472               	retlw	114	;'r'
   470  0799  3400               	retlw	0
   471  079A                     STR_4:	
   472  079A  3457               	retlw	87	;'W'
   473  079B  3445               	retlw	69	;'E'
   474  079C  3444               	retlw	68	;'D'
   475  079D  3400               	retlw	0
   476  079E                     STR_3:	
   477  079E  3454               	retlw	84	;'T'
   478  079F  3455               	retlw	85	;'U'
   479  07A0  3445               	retlw	69	;'E'
   480  07A1  3400               	retlw	0
   481  07A2                     STR_6:	
   482  07A2  3446               	retlw	70	;'F'
   483  07A3  3452               	retlw	82	;'R'
   484  07A4  3449               	retlw	73	;'I'
   485  07A5  3400               	retlw	0
   486  07A6                     STR_2:	
   487  07A6  344D               	retlw	77	;'M'
   488  07A7  344F               	retlw	79	;'O'
   489  07A8  344E               	retlw	78	;'N'
   490  07A9  3400               	retlw	0
   491  07AA                     STR_1:	
   492  07AA  3453               	retlw	83	;'S'
   493  07AB  3455               	retlw	85	;'U'
   494  07AC  344E               	retlw	78	;'N'
   495  07AD  3400               	retlw	0
   496  07AE                     STR_7:	
   497  07AE  3453               	retlw	83	;'S'
   498  07AF  3441               	retlw	65	;'A'
   499  07B0  3454               	retlw	84	;'T'
   500  07B1  3400               	retlw	0
   501  07B2                     STR_5:	
   502  07B2  3454               	retlw	84	;'T'
   503  07B3  3448               	retlw	72	;'H'
   504  07B4  3455               	retlw	85	;'U'
   505  07B5  3400               	retlw	0
   506  0786                     
   507                           ; #config settings
   508  0000                     
   509                           	psect	cinit
   510  0073                     start_initialization:	
   511  0073                     __initialization:	
   512                           
   513                           ; Clear objects allocated to BANK0
   514  0073  3049               	movlw	low __pbssBANK0
   515  0074  0084               	movwf	4
   516  0075  3000               	movlw	high __pbssBANK0
   517  0076  0085               	movwf	5
   518  0077  3022               	movlw	34
   519  0078  3187  27F4  3180   	fcall	clear_ram0
   520                           
   521                           ; Initialize objects allocated to BANK0
   522  007B  304F               	movlw	low __pidataBANK0
   523  007C  0084               	movwf	4
   524  007D  308E               	movlw	(high __pidataBANK0)| (0+128)
   525  007E  0085               	movwf	5
   526  007F  306B               	movlw	low __pdataBANK0
   527  0080  0086               	movwf	6
   528  0081  3000               	movlw	high __pdataBANK0
   529  0082  0087               	movwf	7
   530  0083  3004               	movlw	4
   531  0084  3187  27FA  3180   	fcall	init_ram
   532                           
   533                           ; Initialize objects allocated to BANK1
   534  0087  3061               	movlw	low __pidataBANK1
   535  0088  0084               	movwf	4
   536  0089  308E               	movlw	(high __pidataBANK1)| (0+128)
   537  008A  0085               	movwf	5
   538  008B  30A0               	movlw	low __pdataBANK1
   539  008C  0086               	movwf	6
   540  008D  3000               	movlw	high __pdataBANK1
   541  008E  0087               	movwf	7
   542  008F  3016               	movlw	22
   543  0090  3187  27FA         	fcall	init_ram
   544  0092                     end_of_initialization:	
   545                           ;End of C runtime variable initialization code
   546                           
   547  0092                     __end_of__initialization:	
   548  0092  0020               	movlb	0
   549  0093  3180  2895         	ljmp	_main	;jump to C main() function
   550                           
   551                           	psect	bssBANK0
   552  0049                     __pbssBANK0:	
   553  0049                     _keyCount:	
   554  0049                     	ds	6
   555  004F                     _currentValueInfo:	
   556  004F                     	ds	2
   557  0051                     _alerm:	
   558  0051                     	ds	1
   559  0052                     _blinkPrescaler:	
   560  0052                     	ds	1
   561  0053                     _currentEditValue:	
   562  0053                     	ds	1
   563  0054                     _cursorPosition:	
   564  0054                     	ds	1
   565  0055                     _editSelect:	
   566  0055                     	ds	1
   567  0056                     _keyEvents_:	
   568  0056                     	ds	1
   569  0057                     _machineState:	
   570  0057                     	ds	1
   571  0058                     _menuSelect:	
   572  0058                     	ds	1
   573  0059                     _outputEvent:	
   574  0059                     	ds	1
   575  005A                     _portAState_:	
   576  005A                     	ds	1
   577  005B                     main@prevPortAState:	
   578  005B                     	ds	1
   579  005C                     _dateCurrent:	
   580  005C                     	ds	7
   581  0063                     _dateTimer:	
   582  0063                     	ds	7
   583  006A                     _datePtr:	
   584  006A                     	ds	1
   585                           
   586                           	psect	dataBANK0
   587  006B                     __pdataBANK0:	
   588  006B                     main@F4267:	
   589  006B                     	ds	4
   590                           
   591                           	psect	dataBANK1
   592  00A0                     __pdataBANK1:	
   593  00A0                     _STR_DAY_OF_WEEK:	
   594  00A0                     	ds	14
   595  00AE                     _MESSAGE_MENU:	
   596  00AE                     	ds	8
   597                           
   598                           	psect	clrtext
   599  07F4                     clear_ram0:	
   600                           ;	Called with FSR0 containing the base address, and
   601                           ;	WREG with the size to clear
   602                           
   603  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
   604  07F5                     clrloop0:	
   605  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
   606  07F6  3101               	addfsr 0,1
   607  07F7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   608  07F8  2FF5               	goto	clrloop0	;have we reached the end yet?
   609  07F9  3400               	retlw	0	;all done for this memory range, return
   610                           
   611                           	psect	inittext
   612  07FA                     init_ram:	
   613  07FA  00FE               	movwf	126
   614  07FB                     initloop:	
   615  07FB  0012               	moviw fsr0++
   616  07FC  001E               	movwi fsr1++
   617  07FD  0BFE               	decfsz	126,f
   618  07FE  2FFB               	goto	initloop
   619  07FF  3400               	retlw	0
   620                           
   621                           	psect	cstackCOMMON
   622  0070                     __pcstackCOMMON:	
   623  0070                     ?_initialize:	
   624  0070                     ?__parallel_lcd_Initialize:	
   625                           ; 0 bytes @ 0x0
   626                           
   627  0070                     ?__parallel_lcd_ClearRow:	
   628                           ; 0 bytes @ 0x0
   629                           
   630  0070                     ?__:	
   631                           ; 0 bytes @ 0x0
   632                           
   633  0070                     ?__ds1307_SetClock:	
   634                           ; 0 bytes @ 0x0
   635                           
   636  0070                     ?i1__ds1307_GetData:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_main:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     i1__ds1307_GetData@ramAddress:	
   643                           ; 2 bytes @ 0x0
   644                           
   645                           
   646                           ; 1 bytes @ 0x0
   647  0070                     	ds	1
   648  0071                     i1__ds1307_GetData@length:	
   649                           
   650                           ; 1 bytes @ 0x1
   651  0071                     	ds	1
   652  0072                     ??i1__ds1307_GetData:	
   653                           
   654                           ; 0 bytes @ 0x2
   655  0072                     	ds	2
   656  0074                     i1__ds1307_GetData@date:	
   657                           
   658                           ; 1 bytes @ 0x4
   659  0074                     	ds	1
   660  0075                     i1__ds1307_GetData@dataCount:	
   661                           
   662                           ; 1 bytes @ 0x5
   663  0075                     	ds	1
   664  0076                     ??__:	
   665                           
   666                           ; 0 bytes @ 0x6
   667  0076                     	ds	2
   668  0078                     __@isTimeToAlerm:	
   669                           
   670                           ; 1 bytes @ 0x8
   671  0078                     	ds	1
   672  0079                     __@i:	
   673                           
   674                           ; 1 bytes @ 0x9
   675  0079                     	ds	1
   676                           
   677                           	psect	cstackBANK0
   678  0020                     __pcstackBANK0:	
   679  0020                     ?__private_parallel_lcd_WriteByte:	
   680  0020                     ??_initialize:	
   681                           ; 0 bytes @ 0x0
   682                           
   683  0020                     ?__date_time_ConvertByteToDate:	
   684                           ; 0 bytes @ 0x0
   685                           
   686  0020                     ?__date_time_ConvertByteToTime:	
   687                           ; 0 bytes @ 0x0
   688                           
   689  0020                     ?__date_time_ConvertByteToDiscrete:	
   690                           ; 0 bytes @ 0x0
   691                           
   692  0020                     ??__ds1307_SetClock:	
   693                           ; 0 bytes @ 0x0
   694                           
   695  0020                     ?__ds1307_GetData:	
   696                           ; 0 bytes @ 0x0
   697                           
   698  0020                     __private_parallel_lcd_WriteByte@r:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0020                     __date_time_ConvertByteToDate@stinrg:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0020                     __date_time_ConvertByteToTime@string:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0020                     __date_time_ConvertByteToDiscrete@string:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0020                     __ds1307_GetData@ramAddress:	
   711                           ; 1 bytes @ 0x0
   712                           
   713                           
   714                           ; 1 bytes @ 0x0
   715  0020                     	ds	1
   716  0021                     ??__private_parallel_lcd_WriteByte:	
   717  0021                     ??__date_time_ConvertByteToDate:	
   718                           ; 0 bytes @ 0x1
   719                           
   720  0021                     ??__date_time_ConvertByteToTime:	
   721                           ; 0 bytes @ 0x1
   722                           
   723  0021                     __date_time_ConvertByteToDiscrete@select:	
   724                           ; 0 bytes @ 0x1
   725                           
   726  0021                     __ds1307_GetData@length:	
   727                           ; 1 bytes @ 0x1
   728                           
   729  0021                     __ds1307_SetClock@date:	
   730                           ; 1 bytes @ 0x1
   731                           
   732                           
   733                           ; 1 bytes @ 0x1
   734  0021                     	ds	1
   735  0022                     ??__date_time_ConvertByteToDiscrete:	
   736  0022                     ??__ds1307_GetData:	
   737                           ; 0 bytes @ 0x2
   738                           
   739  0022                     __private_parallel_lcd_WriteByte@data:	
   740                           ; 0 bytes @ 0x2
   741                           
   742  0022                     __ds1307_SetClock@i:	
   743                           ; 1 bytes @ 0x2
   744                           
   745                           
   746                           ; 1 bytes @ 0x2
   747  0022                     	ds	1
   748  0023                     ??__parallel_lcd_Initialize:	
   749  0023                     ?__parallel_lcd_WriteCharacter:	
   750                           ; 0 bytes @ 0x3
   751                           
   752  0023                     ?__parallel_lcd_WriteString:	
   753                           ; 0 bytes @ 0x3
   754                           
   755  0023                     ?__parallel_lcd_WriteStringClearing:	
   756                           ; 0 bytes @ 0x3
   757                           
   758  0023                     ??__parallel_lcd_ClearRow:	
   759                           ; 0 bytes @ 0x3
   760                           
   761  0023                     ?__parallel_lcd_ClearPartial:	
   762                           ; 0 bytes @ 0x3
   763                           
   764  0023                     ?__parallel_lcd_SetCgram:	
   765                           ; 0 bytes @ 0x3
   766                           
   767  0023                     __parallel_lcd_WriteCharacter@character:	
   768                           ; 0 bytes @ 0x3
   769                           
   770  0023                     __parallel_lcd_ClearPartial@length:	
   771                           ; 1 bytes @ 0x3
   772                           
   773  0023                     __date_time_ConvertByteToTime@dateTime:	
   774                           ; 1 bytes @ 0x3
   775                           
   776  0023                     __parallel_lcd_WriteString@stringPtr:	
   777                           ; 1 bytes @ 0x3
   778                           
   779  0023                     __parallel_lcd_WriteStringClearing@stringPtr:	
   780                           ; 2 bytes @ 0x3
   781                           
   782  0023                     __parallel_lcd_SetCgram@bitmap:	
   783                           ; 2 bytes @ 0x3
   784                           
   785                           
   786                           ; 2 bytes @ 0x3
   787  0023                     	ds	1
   788  0024                     ??__parallel_lcd_WriteCharacter:	
   789  0024                     ??__parallel_lcd_ClearPartial:	
   790                           ; 0 bytes @ 0x4
   791                           
   792  0024                     __parallel_lcd_WriteCharacter@position:	
   793                           ; 0 bytes @ 0x4
   794                           
   795  0024                     __parallel_lcd_ClearRow@rowSelect:	
   796                           ; 1 bytes @ 0x4
   797                           
   798  0024                     __date_time_ConvertByteToDate@dateTime:	
   799                           ; 1 bytes @ 0x4
   800                           
   801  0024                     __ds1307_GetData@date:	
   802                           ; 1 bytes @ 0x4
   803                           
   804                           
   805                           ; 1 bytes @ 0x4
   806  0024                     	ds	1
   807  0025                     ??__parallel_lcd_WriteString:	
   808  0025                     ??__parallel_lcd_WriteStringClearing:	
   809                           ; 0 bytes @ 0x5
   810                           
   811  0025                     ??__parallel_lcd_SetCgram:	
   812                           ; 0 bytes @ 0x5
   813                           
   814  0025                     __parallel_lcd_ClearRow@i:	
   815                           ; 0 bytes @ 0x5
   816                           
   817  0025                     __parallel_lcd_ClearPartial@position:	
   818                           ; 1 bytes @ 0x5
   819                           
   820  0025                     __date_time_ConvertByteToDiscrete@dateTime:	
   821                           ; 1 bytes @ 0x5
   822                           
   823  0025                     __ds1307_GetData@dataCount:	
   824                           ; 1 bytes @ 0x5
   825                           
   826                           
   827                           ; 1 bytes @ 0x5
   828  0025                     	ds	1
   829  0026                     __parallel_lcd_WriteString@position:	
   830  0026                     __parallel_lcd_WriteStringClearing@position:	
   831                           ; 1 bytes @ 0x6
   832                           
   833  0026                     __parallel_lcd_ClearPartial@i:	
   834                           ; 1 bytes @ 0x6
   835                           
   836  0026                     __parallel_lcd_SetCgram@charCode:	
   837                           ; 1 bytes @ 0x6
   838                           
   839                           
   840                           ; 1 bytes @ 0x6
   841  0026                     	ds	1
   842  0027                     __parallel_lcd_WriteStringClearing@i:	
   843  0027                     __parallel_lcd_SetCgram@i:	
   844                           ; 1 bytes @ 0x7
   845                           
   846                           
   847                           ; 1 bytes @ 0x7
   848  0027                     	ds	1
   849  0028                     ??_main:	
   850                           
   851                           ; 0 bytes @ 0x8
   852  0028                     	ds	3
   853  002B                     main@string:	
   854                           
   855                           ; 17 bytes @ 0xB
   856  002B                     	ds	17
   857  003C                     main@valueString:	
   858                           
   859                           ; 4 bytes @ 0x1C
   860  003C                     	ds	4
   861  0040                     main@tmpValue:	
   862                           
   863                           ; 1 bytes @ 0x20
   864  0040                     	ds	1
   865  0041                     main@isNonZero:	
   866                           
   867                           ; 1 bytes @ 0x21
   868  0041                     	ds	1
   869  0042                     main@compareUnit:	
   870                           
   871                           ; 1 bytes @ 0x22
   872  0042                     	ds	1
   873  0043                     main@string_664:	
   874                           
   875                           ; 4 bytes @ 0x23
   876  0043                     	ds	4
   877  0047                     main@keyPressed:	
   878                           
   879                           ; 1 bytes @ 0x27
   880  0047                     	ds	1
   881  0048                     main@i:	
   882                           
   883                           ; 1 bytes @ 0x28
   884  0048                     	ds	1
   885                           
   886                           	psect	maintext
   887  0095                     __pmaintext:	
   888 ;;
   889 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   890 ;;
   891 ;; *************** function _main *****************
   892 ;; Defined at:
   893 ;;		line 196 in file "src/main.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  compareUnit     1   34[BANK0 ] unsigned char 
   898 ;;  i               1   40[BANK0 ] unsigned char 
   899 ;;  valueString     4   28[BANK0 ] unsigned char [4]
   900 ;;  isNonZero       1   33[BANK0 ] unsigned char 
   901 ;;  tmpValue        1   32[BANK0 ] unsigned char 
   902 ;;  string         17   11[BANK0 ] unsigned char [17]
   903 ;;  string          4   35[BANK0 ] unsigned char [4]
   904 ;;  keyPressed      1   39[BANK0 ] struct .
   905 ;; Return value:  Size  Location     Type
   906 ;;                  2  266[None  ] int 
   907 ;; Registers used:
   908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : B1F/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   914 ;;      Params:         0       0       0       0
   915 ;;      Locals:         0      30       0       0
   916 ;;      Temps:          0       3       0       0
   917 ;;      Totals:         0      33       0       0
   918 ;;Total ram usage:       33 bytes
   919 ;; Hardware stack levels required when called:    4
   920 ;; This function calls:
   921 ;;		__date_time_ConvertByteToDate
   922 ;;		__date_time_ConvertByteToDiscrete
   923 ;;		__date_time_ConvertByteToTime
   924 ;;		__ds1307_GetData
   925 ;;		__ds1307_SetClock
   926 ;;		__parallel_lcd_ClearPartial
   927 ;;		__parallel_lcd_ClearRow
   928 ;;		__parallel_lcd_Initialize
   929 ;;		__parallel_lcd_SetCgram
   930 ;;		__parallel_lcd_WriteCharacter
   931 ;;		__parallel_lcd_WriteString
   932 ;;		__parallel_lcd_WriteStringClearing
   933 ;;		_initialize
   934 ;; This function is called by:
   935 ;;		Startup code after reset
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           
   940                           ;psect for function _main
   941  0095                     _main:	
   942                           
   943                           ;main.c: 197: initialize( ) ;
   944                           
   945                           ;incstack = 0
   946                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   947  0095  3186  26A7  3180   	fcall	_initialize
   948                           
   949                           ;main.c: 199: PWM3DCH = ( 125 >> 2 ) ;
   950  0098  301F               	movlw	31
   951  0099  002C               	movlb	12	; select bank12
   952  009A  0098               	movwf	24	;volatile
   953                           
   954                           ;main.c: 200: PWM3DCL = ( ( 125 & 0b11 ) << 6 ) ;
   955  009B  3040               	movlw	64
   956  009C  0097               	movwf	23	;volatile
   957                           
   958                           ;main.c: 201: PWM3OE = 0 ;
   959  009D  1319               	bcf	25,6	;volatile
   960                           
   961                           ;main.c: 204: _delay((unsigned long)((20)*(1000000L/4000.0))) ;
   962  009E  3007               	movlw	7
   963  009F  0020               	movlb	0	; select bank0
   964  00A0  00A9               	movwf	??_main+1
   965  00A1  307D               	movlw	125
   966  00A2  00A8               	movwf	??_main
   967  00A3                     u2517:	
   968  00A3  0BA8               	decfsz	??_main,f
   969  00A4  28A3               	goto	u2517
   970  00A5  0BA9               	decfsz	??_main+1,f
   971  00A6  28A3               	goto	u2517
   972                           
   973                           ;main.c: 205: _parallel_lcd_Initialize( ) ;
   974  00A7  318E  2677  3180   	fcall	__parallel_lcd_Initialize
   975                           
   976                           ;main.c: 208: _parallel_lcd_SetCgram( 0x00 , CURSOR_BITMAP ) ;
   977  00AA  3031               	movlw	low (_CURSOR_BITMAP| (0+32768))
   978  00AB  0020               	movlb	0	; select bank0
   979  00AC  00A3               	movwf	__parallel_lcd_SetCgram@bitmap
   980  00AD  3087               	movlw	high (_CURSOR_BITMAP| (0+32768))
   981  00AE  00A4               	movwf	__parallel_lcd_SetCgram@bitmap+1
   982  00AF  3000               	movlw	0
   983  00B0  318E  26E5  3180   	fcall	__parallel_lcd_SetCgram
   984                           
   985                           ;main.c: 210: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Clock" ) ;
   986  00B3  3051               	movlw	low ((STR_8+7)| (0+32768))
   987  00B4  0020               	movlb	0	; select bank0
   988  00B5  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
   989  00B6  3087               	movlw	high ((STR_8+7)| (0+32768))
   990  00B7  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
   991  00B8  3080               	movlw	128
   992  00B9  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
   993                           
   994                           ;main.c: 211: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , "Version" ) ;
   995  00BC  307E               	movlw	low (STR_11| (0+32768))
   996  00BD  0020               	movlb	0	; select bank0
   997  00BE  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
   998  00BF  3087               	movlw	high (STR_11| (0+32768))
   999  00C0  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1000  00C1  30C0               	movlw	192
  1001  00C2  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  1002                           
  1003                           ;main.c: 212: _parallel_lcd_WriteString( 0xC0 | 0xA , "00.100" ) ;
  1004  00C5  3086               	movlw	low (STR_14| (0+32768))
  1005  00C6  0020               	movlb	0	; select bank0
  1006  00C7  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  1007  00C8  3087               	movlw	high (STR_14| (0+32768))
  1008  00C9  00A4               	movwf	__parallel_lcd_WriteString@stringPtr+1
  1009  00CA  30CA               	movlw	202
  1010  00CB  318E  26C5  3180   	fcall	__parallel_lcd_WriteString
  1011                           
  1012                           ;main.c: 215: _ds1307_GetData( &dateTimer , 0x10 , 7 ) ;
  1013  00CE  3010               	movlw	16
  1014  00CF  0020               	movlb	0	; select bank0
  1015  00D0  00A8               	movwf	??_main
  1016  00D1  0828               	movf	??_main,w
  1017  00D2  00A0               	movwf	__ds1307_GetData@ramAddress
  1018  00D3  3007               	movlw	7
  1019  00D4  00A9               	movwf	??_main+1
  1020  00D5  0829               	movf	??_main+1,w
  1021  00D6  00A1               	movwf	__ds1307_GetData@length
  1022  00D7  3063               	movlw	(low (_dateTimer| 0))& (0+255)
  1023  00D8  318F  279F  3180   	fcall	__ds1307_GetData
  1024                           
  1025                           ;main.c: 217: TMR0IE = 1 ;
  1026  00DB  168B               	bsf	11,5	;volatile
  1027                           
  1028                           ;main.c: 218: IOCIE = 0 ;
  1029  00DC  118B               	bcf	11,3	;volatile
  1030  00DD                     l267:	
  1031                           ;main.c: 220: for( ; ; ) {
  1032                           
  1033  00DD  0064               	clrwdt	;# 
  1034                           
  1035                           ;main.c: 225: static UniPortA prevPortAState = { 0x00 } ;
  1036                           ;main.c: 226: UniPortA keyPressed ;
  1037                           ;main.c: 229: keyPressed.byte = ( portAState_.byte ^ prevPortAState.byte ) & portAState_
      +                          .byte ;
  1038  00DE  0020               	movlb	0	; select bank0
  1039  00DF  085A               	movf	_portAState_,w
  1040  00E0  065B               	xorwf	main@prevPortAState,w
  1041  00E1  055A               	andwf	_portAState_,w
  1042  00E2  00A8               	movwf	??_main
  1043  00E3  0828               	movf	??_main,w
  1044  00E4  00C7               	movwf	main@keyPressed
  1045                           
  1046                           ;main.c: 230: prevPortAState.byte = portAState_.byte ;
  1047  00E5  085A               	movf	_portAState_,w
  1048  00E6  00A8               	movwf	??_main
  1049  00E7  0828               	movf	??_main,w
  1050  00E8  00DB               	movwf	main@prevPortAState
  1051                           
  1052                           ;main.c: 232: if( keyPressed.keyUp ) {
  1053  00E9  1CC7               	btfss	main@keyPressed,1
  1054  00EA  28F0               	goto	l270
  1055                           
  1056                           ;main.c: 233: if( portAState_.keyDown )
  1057  00EB  1C5A               	btfss	_portAState_,0
  1058  00EC  28EF               	goto	l271
  1059                           
  1060                           ;main.c: 234: keyEvents_.upDown=1 ;
  1061  00ED  1556               	bsf	_keyEvents_,2
  1062  00EE  28F0               	goto	l270
  1063  00EF                     l271:	
  1064                           
  1065                           ;main.c: 235: else
  1066                           ;main.c: 236: keyEvents_.up=1 ;
  1067  00EF  14D6               	bsf	_keyEvents_,1
  1068  00F0                     l270:	
  1069                           
  1070                           ;main.c: 237: }
  1071                           ;main.c: 239: if( keyPressed.keyDown ) {
  1072  00F0  1C47               	btfss	main@keyPressed,0
  1073  00F1  28F7               	goto	l273
  1074                           
  1075                           ;main.c: 240: if( portAState_.keyUp )
  1076  00F2  1CDA               	btfss	_portAState_,1
  1077  00F3  28F6               	goto	l274
  1078                           
  1079                           ;main.c: 241: keyEvents_.upDown=1 ;
  1080  00F4  1556               	bsf	_keyEvents_,2
  1081  00F5  28F7               	goto	l273
  1082  00F6                     l274:	
  1083                           
  1084                           ;main.c: 242: else
  1085                           ;main.c: 243: keyEvents_.down=1 ;
  1086  00F6  15D6               	bsf	_keyEvents_,3
  1087  00F7                     l273:	
  1088                           
  1089                           ;main.c: 244: }
  1090                           ;main.c: 246: if( keyPressed.keyLeft ) {
  1091  00F7  1AC7               	btfsc	main@keyPressed,5
  1092                           
  1093                           ;main.c: 247: keyEvents_.left=1 ;
  1094  00F8  16D6               	bsf	_keyEvents_,5
  1095                           
  1096                           ;main.c: 248: }
  1097                           ;main.c: 250: if( keyPressed.keyRight ) {
  1098  00F9  1A47               	btfsc	main@keyPressed,4
  1099                           
  1100                           ;main.c: 251: keyEvents_.right=1 ;
  1101  00FA  17D6               	bsf	_keyEvents_,7
  1102                           
  1103                           ;main.c: 252: }
  1104                           ;main.c: 255: if( (keyEvents_.leftRightHold&&!(keyEvents_.leftRightHold=0)) ) {
  1105  00FB  1F56               	btfss	_keyEvents_,6
  1106  00FC  2910               	goto	l278
  1107  00FD  1356               	bcf	_keyEvents_,6
  1108                           
  1109                           ;main.c: 257: outputEvent.changeMessage=1 ;
  1110  00FE  1459               	bsf	_outputEvent,0
  1111                           
  1112                           ;main.c: 259: switch( machineState ) {
  1113  00FF  2908               	goto	l1944
  1114  0100                     l1938:	
  1115                           ;main.c: 261: case STATE_ADJUST_CLOCK:
  1116                           
  1117                           
  1118                           ;main.c: 262: _ds1307_SetClock( &dateCurrent ) ;
  1119  0100  305C               	movlw	(low (_dateCurrent| 0))& (0+255)
  1120  0101  3187  27B6  3180   	fcall	__ds1307_SetClock
  1121                           
  1122                           ;main.c: 263: machineState = STATE_CLOCK ;
  1123  0104  0020               	movlb	0	; select bank0
  1124  0105                     l282:	
  1125                           ;main.c: 266: case STATE_SET_TIMER:
  1126                           
  1127                           ;main.c: 264: break ;
  1128                           
  1129                           
  1130                           ;main.c: 267: machineState = STATE_CLOCK ;
  1131  0105  01D7               	clrf	_machineState
  1132  0106  0AD7               	incf	_machineState,f
  1133                           
  1134                           ;main.c: 270: }
  1135                           
  1136                           ;main.c: 268: break ;
  1137  0107  2910               	goto	l278
  1138  0108                     l1944:	
  1139  0108  0857               	movf	_machineState,w
  1140                           
  1141                           ; Switch size 1, requested type "space"
  1142                           ; Number of cases is 2, Range of values is 3 to 5
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; simple_byte            7     4 (average)
  1146                           ; direct_byte           15     9 (fixed)
  1147                           ; jumptable            263     9 (fixed)
  1148                           ;	Chosen strategy is simple_byte
  1149  0109  3A03               	xorlw	3	; case 3
  1150  010A  1903               	skipnz
  1151  010B  2900               	goto	l1938
  1152  010C  3A06               	xorlw	6	; case 5
  1153  010D  1903               	skipnz
  1154  010E  2905               	goto	l282
  1155  010F  2910               	goto	l278
  1156  0110                     l278:	
  1157                           
  1158                           ;main.c: 271: }
  1159                           ;main.c: 274: if( (keyEvents_.left&&!(keyEvents_.left=0)) ) {
  1160  0110  1ED6               	btfss	_keyEvents_,5
  1161  0111  294B               	goto	l283
  1162  0112  12D6               	bcf	_keyEvents_,5
  1163                           
  1164                           ;main.c: 276: outputEvent.changeMessage=1 ;
  1165  0113  1459               	bsf	_outputEvent,0
  1166                           
  1167                           ;main.c: 278: switch( machineState ) {
  1168  0114  293A               	goto	l1966
  1169  0115                     l285:	
  1170                           ;main.c: 280: case STATE_MENU:
  1171                           
  1172                           
  1173                           ;main.c: 281: machineState = STATE_CLOCK ;
  1174  0115  01D7               	clrf	_machineState
  1175  0116  0AD7               	incf	_machineState,f
  1176                           
  1177                           ;main.c: 282: break ;
  1178  0117  294B               	goto	l283
  1179  0118                     l1948:	
  1180                           ;main.c: 284: case STATE_ADJUST_CLOCK:
  1181                           
  1182                           
  1183                           ;main.c: 285: case STATE_SET_TIMER:
  1184                           ;main.c: 286: if( editSelect == DATE_ITEM_YEAR ) {
  1185  0118  0855               	movf	_editSelect,w
  1186  0119  1D03               	btfss	3,2
  1187  011A  2928               	goto	l1952
  1188                           
  1189                           ;main.c: 287: editSelect = DATE_ITEM_SECOND ;
  1190  011B  3006               	movlw	6
  1191  011C  00A8               	movwf	??_main
  1192  011D  0828               	movf	??_main,w
  1193  011E  00D5               	movwf	_editSelect
  1194                           
  1195                           ;main.c: 288: currentValueInfo = &VALUE_INFORMATIONS.second ;
  1196  011F  302D               	movlw	low ((_VALUE_INFORMATIONS| (0+32768)+24))
  1197  0120  00CF               	movwf	_currentValueInfo
  1198  0121  3087               	movlw	high ((_VALUE_INFORMATIONS| (0+32768)+24))
  1199  0122  00D0               	movwf	_currentValueInfo+1
  1200                           
  1201                           ;main.c: 289: currentEditValue = &datePtr->second ;
  1202  0123  086A               	movf	_datePtr,w
  1203  0124  00A8               	movwf	??_main
  1204  0125  0828               	movf	??_main,w
  1205  0126  00D3               	movwf	_currentEditValue
  1206                           
  1207                           ;main.c: 290: }
  1208  0127  2932               	goto	l1958
  1209  0128                     l1952:	
  1210                           
  1211                           ;main.c: 291: else {
  1212                           ;main.c: 292: editSelect-- ;
  1213  0128  3001               	movlw	1
  1214  0129  02D5               	subwf	_editSelect,f
  1215                           
  1216                           ;main.c: 293: currentValueInfo-- ;
  1217  012A  3004               	movlw	4
  1218  012B  02CF               	subwf	_currentValueInfo,f
  1219  012C  3000               	movlw	0
  1220  012D  3BD0               	subwfb	_currentValueInfo+1,f
  1221                           
  1222                           ;main.c: 294: currentEditValue++ ;
  1223  012E  3001               	movlw	1
  1224  012F  00A8               	movwf	??_main
  1225  0130  0828               	movf	??_main,w
  1226  0131  07D3               	addwf	_currentEditValue,f
  1227  0132                     l1958:	
  1228                           
  1229                           ;main.c: 295: }
  1230                           ;main.c: 297: blinkPrescaler = 0 ;
  1231  0132  01D2               	clrf	_blinkPrescaler
  1232                           
  1233                           ;main.c: 298: outputEvent.changeMessage=0 ;
  1234  0133  1059               	bcf	_outputEvent,0
  1235                           
  1236                           ;main.c: 299: break ;
  1237  0134  294B               	goto	l283
  1238  0135                     l1962:	
  1239                           ;main.c: 301: case STATE_BUZZER_TEST:
  1240                           
  1241                           
  1242                           ;main.c: 302: case STATE_VERSION:
  1243                           ;main.c: 303: machineState = STATE_MENU ;
  1244  0135  3002               	movlw	2
  1245  0136  00A8               	movwf	??_main
  1246  0137  0828               	movf	??_main,w
  1247  0138  00D7               	movwf	_machineState
  1248                           
  1249                           ;main.c: 306: }
  1250                           
  1251                           ;main.c: 304: break ;
  1252  0139  294B               	goto	l283
  1253  013A                     l1966:	
  1254  013A  0857               	movf	_machineState,w
  1255                           
  1256                           ; Switch size 1, requested type "space"
  1257                           ; Number of cases is 5, Range of values is 2 to 7
  1258                           ; switch strategies available:
  1259                           ; Name         Instructions Cycles
  1260                           ; simple_byte           16     9 (average)
  1261                           ; direct_byte           21     9 (fixed)
  1262                           ; jumptable            263     9 (fixed)
  1263                           ;	Chosen strategy is simple_byte
  1264  013B  3A02               	xorlw	2	; case 2
  1265  013C  1903               	skipnz
  1266  013D  2915               	goto	l285
  1267  013E  3A01               	xorlw	1	; case 3
  1268  013F  1903               	skipnz
  1269  0140  2918               	goto	l1948
  1270  0141  3A06               	xorlw	6	; case 5
  1271  0142  1903               	skipnz
  1272  0143  2918               	goto	l1948
  1273  0144  3A03               	xorlw	3	; case 6
  1274  0145  1903               	skipnz
  1275  0146  2935               	goto	l1962
  1276  0147  3A01               	xorlw	1	; case 7
  1277  0148  1903               	skipnz
  1278  0149  2935               	goto	l1962
  1279  014A  294B               	goto	l283
  1280  014B                     l283:	
  1281                           
  1282                           ;main.c: 308: }
  1283                           ;main.c: 311: if( (keyEvents_.right&&!(keyEvents_.right=0)) ) {
  1284  014B  1FD6               	btfss	_keyEvents_,7
  1285  014C  29B2               	goto	l293
  1286  014D  13D6               	bcf	_keyEvents_,7
  1287                           
  1288                           ;main.c: 313: switch( machineState ) {
  1289  014E  29A4               	goto	l2012
  1290  014F                     l1970:	
  1291                           ;main.c: 315: case STATE_CLOCK:
  1292                           
  1293                           
  1294                           ;main.c: 316: machineState = STATE_MENU ;
  1295  014F  3002               	movlw	2
  1296  0150  00A8               	movwf	??_main
  1297  0151  0828               	movf	??_main,w
  1298  0152  00D7               	movwf	_machineState
  1299                           
  1300                           ;main.c: 317: datePtr = &dateCurrent ;
  1301  0153  305C               	movlw	(low (_dateCurrent| 0))& (0+255)
  1302  0154  00A8               	movwf	??_main
  1303  0155  0828               	movf	??_main,w
  1304  0156  00EA               	movwf	_datePtr
  1305                           
  1306                           ;main.c: 318: menuSelect = 0 ;
  1307  0157  01D8               	clrf	_menuSelect
  1308                           
  1309                           ;main.c: 319: cursorPosition = 0 ;
  1310  0158  01D4               	clrf	_cursorPosition
  1311  0159  29A2               	goto	l304
  1312  015A                     l1978:	
  1313                           ;main.c: 324: case STATE_ADJUST_CLOCK:
  1314                           
  1315                           ;main.c: 321: break ;
  1316                           
  1317                           ;main.c: 320: outputEvent.changeMessage=1 ;
  1318                           
  1319                           
  1320                           ;main.c: 325: case STATE_SET_TIMER:
  1321                           ;main.c: 326: if( editSelect == DATE_ITEM_SECOND ) {
  1322  015A  3006               	movlw	6
  1323  015B  0655               	xorwf	_editSelect,w
  1324  015C  1D03               	btfss	3,2
  1325  015D  2969               	goto	l1986
  1326                           
  1327                           ;main.c: 327: editSelect = DATE_ITEM_YEAR ;
  1328  015E  01D5               	clrf	_editSelect
  1329                           
  1330                           ;main.c: 328: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1331  015F  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1332  0160  00CF               	movwf	_currentValueInfo
  1333  0161  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1334  0162  00D0               	movwf	_currentValueInfo+1
  1335                           
  1336                           ;main.c: 329: currentEditValue = &datePtr->year ;
  1337  0163  086A               	movf	_datePtr,w
  1338  0164  3E06               	addlw	6
  1339  0165  00A8               	movwf	??_main
  1340  0166  0828               	movf	??_main,w
  1341  0167  00D3               	movwf	_currentEditValue
  1342                           
  1343                           ;main.c: 330: }
  1344  0168  2973               	goto	l1992
  1345  0169                     l1986:	
  1346                           
  1347                           ;main.c: 331: else {
  1348                           ;main.c: 332: editSelect++ ;
  1349  0169  3001               	movlw	1
  1350  016A  00A8               	movwf	??_main
  1351  016B  0828               	movf	??_main,w
  1352  016C  07D5               	addwf	_editSelect,f
  1353                           
  1354                           ;main.c: 333: currentValueInfo++ ;
  1355  016D  3004               	movlw	4
  1356  016E  07CF               	addwf	_currentValueInfo,f
  1357  016F  3000               	movlw	0
  1358  0170  3DD0               	addwfc	_currentValueInfo+1,f
  1359                           
  1360                           ;main.c: 334: currentEditValue-- ;
  1361  0171  3001               	movlw	1
  1362  0172  02D3               	subwf	_currentEditValue,f
  1363  0173                     l1992:	
  1364                           
  1365                           ;main.c: 335: }
  1366                           ;main.c: 337: blinkPrescaler = 0 ;
  1367  0173  01D2               	clrf	_blinkPrescaler
  1368                           
  1369                           ;main.c: 338: break ;
  1370  0174  29B2               	goto	l293
  1371  0175                     l1994:	
  1372                           ;main.c: 342: case MENU_ADJUST:
  1373                           
  1374                           ;main.c: 341: switch( menuSelect ) {
  1375                           
  1376                           ;main.c: 340: case STATE_MENU:
  1377                           
  1378                           
  1379                           ;main.c: 343: machineState = STATE_ADJUST_CLOCK ;
  1380  0175  3003               	movlw	3
  1381  0176  00A8               	movwf	??_main
  1382  0177  0828               	movf	??_main,w
  1383  0178  00D7               	movwf	_machineState
  1384                           
  1385                           ;main.c: 344: datePtr = &dateCurrent ;
  1386  0179  305C               	movlw	(low (_dateCurrent| 0))& (0+255)
  1387  017A  2980               	goto	L4
  1388  017B                     l1998:	
  1389                           ;main.c: 349: case MENU_TIMER:
  1390                           
  1391                           ;main.c: 347: break ;
  1392                           
  1393                           ;main.c: 346: currentEditValue = &datePtr->year ;
  1394                           
  1395                           ;main.c: 345: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1396                           
  1397                           
  1398                           ;main.c: 350: machineState = STATE_SET_TIMER ;
  1399  017B  3005               	movlw	5
  1400  017C  00A8               	movwf	??_main
  1401  017D  0828               	movf	??_main,w
  1402  017E  00D7               	movwf	_machineState
  1403                           
  1404                           ;main.c: 351: datePtr = &dateTimer ;
  1405  017F  3063               	movlw	(low (_dateTimer| 0))& (0+255)
  1406  0180                     L4:	
  1407  0180  00A8               	movwf	??_main
  1408  0181  0828               	movf	??_main,w
  1409  0182  00EA               	movwf	_datePtr
  1410                           
  1411                           ;main.c: 352: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1412  0183  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1413  0184  00CF               	movwf	_currentValueInfo
  1414  0185  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1415  0186  00D0               	movwf	_currentValueInfo+1
  1416                           
  1417                           ;main.c: 353: currentEditValue = &datePtr->year ;
  1418  0187  086A               	movf	_datePtr,w
  1419  0188  3E06               	addlw	6
  1420  0189  00A8               	movwf	??_main
  1421  018A  0828               	movf	??_main,w
  1422  018B  00D3               	movwf	_currentEditValue
  1423                           
  1424                           ;main.c: 354: break ;
  1425  018C  29A2               	goto	l304
  1426  018D                     l2002:	
  1427                           ;main.c: 356: case MENU_BUZZER_TEST:
  1428                           
  1429                           
  1430                           ;main.c: 357: machineState = STATE_BUZZER_TEST ;
  1431  018D  3006               	movlw	6
  1432  018E  2990               	goto	L1
  1433  018F                     l2004:	
  1434                           ;main.c: 360: case MENU_VERSION:
  1435                           
  1436                           ;main.c: 358: break ;
  1437                           
  1438                           
  1439                           ;main.c: 361: machineState = STATE_VERSION ;
  1440  018F  3007               	movlw	7
  1441  0190                     L1:	
  1442  0190  00A8               	movwf	??_main
  1443  0191  0828               	movf	??_main,w
  1444  0192  00D7               	movwf	_machineState
  1445                           
  1446                           ;main.c: 363: }
  1447                           
  1448                           ;main.c: 362: break ;
  1449  0193  29A2               	goto	l304
  1450  0194                     l2008:	
  1451  0194  0858               	movf	_menuSelect,w
  1452                           
  1453                           ; Switch size 1, requested type "space"
  1454                           ; Number of cases is 4, Range of values is 0 to 3
  1455                           ; switch strategies available:
  1456                           ; Name         Instructions Cycles
  1457                           ; simple_byte           13     7 (average)
  1458                           ; direct_byte           14     6 (fixed)
  1459                           ; jumptable            260     6 (fixed)
  1460                           ;	Chosen strategy is simple_byte
  1461  0195  3A00               	xorlw	0	; case 0
  1462  0196  1903               	skipnz
  1463  0197  2975               	goto	l1994
  1464  0198  3A01               	xorlw	1	; case 1
  1465  0199  1903               	skipnz
  1466  019A  297B               	goto	l1998
  1467  019B  3A03               	xorlw	3	; case 2
  1468  019C  1903               	skipnz
  1469  019D  298D               	goto	l2002
  1470  019E  3A01               	xorlw	1	; case 3
  1471  019F  1903               	skipnz
  1472  01A0  298F               	goto	l2004
  1473  01A1  29A2               	goto	l304
  1474  01A2                     l304:	
  1475                           
  1476                           ;main.c: 364: outputEvent.changeMessage=1 ;
  1477  01A2  1459               	bsf	_outputEvent,0
  1478                           
  1479                           ;main.c: 368: }
  1480                           
  1481                           ;main.c: 366: break ;
  1482  01A3  29B2               	goto	l293
  1483  01A4                     l2012:	
  1484  01A4  0857               	movf	_machineState,w
  1485                           
  1486                           ; Switch size 1, requested type "space"
  1487                           ; Number of cases is 4, Range of values is 1 to 5
  1488                           ; switch strategies available:
  1489                           ; Name         Instructions Cycles
  1490                           ; simple_byte           13     7 (average)
  1491                           ; direct_byte           19     9 (fixed)
  1492                           ; jumptable            263     9 (fixed)
  1493                           ;	Chosen strategy is simple_byte
  1494  01A5  3A01               	xorlw	1	; case 1
  1495  01A6  1903               	skipnz
  1496  01A7  294F               	goto	l1970
  1497  01A8  3A03               	xorlw	3	; case 2
  1498  01A9  1903               	skipnz
  1499  01AA  2994               	goto	l2008
  1500  01AB  3A01               	xorlw	1	; case 3
  1501  01AC  1903               	skipnz
  1502  01AD  295A               	goto	l1978
  1503  01AE  3A06               	xorlw	6	; case 5
  1504  01AF  1903               	skipnz
  1505  01B0  295A               	goto	l1978
  1506  01B1  29B2               	goto	l293
  1507  01B2                     l293:	
  1508                           
  1509                           ;main.c: 370: }
  1510                           ;main.c: 373: if( (keyEvents_.upDown&&!(keyEvents_.upDown=0)) ) {
  1511  01B2  1D56               	btfss	_keyEvents_,2
  1512  01B3  2A7D               	goto	l2100
  1513  01B4  1156               	bcf	_keyEvents_,2
  1514                           
  1515                           ;main.c: 374: switch( machineState ) {
  1516  01B5  29BA               	goto	l2018
  1517  01B6                     l310:	
  1518                           ;main.c: 376: case STATE_ALERM:
  1519                           
  1520                           
  1521                           ;main.c: 377: machineState = STATE_CLOCK ;
  1522  01B6  01D7               	clrf	_machineState
  1523  01B7  0AD7               	incf	_machineState,f
  1524                           
  1525                           ;main.c: 378: outputEvent.changeMessage=1 ;
  1526  01B8  1459               	bsf	_outputEvent,0
  1527                           
  1528                           ;main.c: 381: }
  1529                           
  1530                           ;main.c: 379: break ;
  1531  01B9  2A7D               	goto	l2100
  1532  01BA                     l2018:	
  1533  01BA  0857               	movf	_machineState,w
  1534                           
  1535                           ; Switch size 1, requested type "space"
  1536                           ; Number of cases is 1, Range of values is 4 to 4
  1537                           ; switch strategies available:
  1538                           ; Name         Instructions Cycles
  1539                           ; simple_byte            4     3 (average)
  1540                           ; direct_byte           11     9 (fixed)
  1541                           ; jumptable            263     9 (fixed)
  1542                           ;	Chosen strategy is simple_byte
  1543  01BB  3A04               	xorlw	4	; case 4
  1544  01BC  1903               	skipnz
  1545  01BD  29B6               	goto	l310
  1546  01BE  2A7D               	goto	l2100
  1547                           
  1548                           ;main.c: 382: }
  1549                           ;main.c: 385: switch( machineState ) {
  1550  01BF  2A7D               	goto	l2100
  1551  01C0                     l313:	
  1552                           ;main.c: 387: case STATE_MENU:
  1553                           
  1554                           
  1555                           ;main.c: 388: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1556  01C0  1CD6               	btfss	_keyEvents_,1
  1557  01C1  29CE               	goto	l2030
  1558  01C2  10D6               	bcf	_keyEvents_,1
  1559                           
  1560                           ;main.c: 389: if( menuSelect ) menuSelect-- ;
  1561  01C3  0858               	movf	_menuSelect,w
  1562  01C4  1903               	btfsc	3,2
  1563  01C5  29C8               	goto	l315
  1564  01C6  3001               	movlw	1
  1565  01C7  02D8               	subwf	_menuSelect,f
  1566  01C8                     l315:	
  1567                           
  1568                           ;main.c: 390: if( cursorPosition != 0 ) cursorPosition-- ;
  1569  01C8  0854               	movf	_cursorPosition,w
  1570  01C9  1903               	btfsc	3,2
  1571  01CA  29CD               	goto	l2028
  1572  01CB  3001               	movlw	1
  1573  01CC  02D4               	subwf	_cursorPosition,f
  1574  01CD                     l2028:	
  1575                           
  1576                           ;main.c: 391: outputEvent.changeMessage=1 ;
  1577  01CD  1459               	bsf	_outputEvent,0
  1578  01CE                     l2030:	
  1579                           
  1580                           ;main.c: 392: }
  1581                           ;main.c: 393: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1582  01CE  1DD6               	btfss	_keyEvents_,3
  1583  01CF  2A9D               	goto	l2114
  1584  01D0  11D6               	bcf	_keyEvents_,3
  1585                           
  1586                           ;main.c: 394: if( menuSelect != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU[0] ) )
      +                           - 1 ) ) menuSelect++ ;
  1587  01D1  3003               	movlw	3
  1588  01D2  0658               	xorwf	_menuSelect,w
  1589  01D3  1903               	btfsc	3,2
  1590  01D4  29D9               	goto	l318
  1591  01D5  3001               	movlw	1
  1592  01D6  00A8               	movwf	??_main
  1593  01D7  0828               	movf	??_main,w
  1594  01D8  07D8               	addwf	_menuSelect,f
  1595  01D9                     l318:	
  1596                           
  1597                           ;main.c: 395: if( cursorPosition != 1 ) cursorPosition++ ;
  1598  01D9  0354               	decf	_cursorPosition,w
  1599  01DA  1903               	btfsc	3,2
  1600  01DB  29E0               	goto	l2040
  1601  01DC  3001               	movlw	1
  1602  01DD  00A8               	movwf	??_main
  1603  01DE  0828               	movf	??_main,w
  1604  01DF  07D4               	addwf	_cursorPosition,f
  1605  01E0                     l2040:	
  1606                           
  1607                           ;main.c: 396: outputEvent.changeMessage=1 ;
  1608  01E0  1459               	bsf	_outputEvent,0
  1609                           
  1610                           ;main.c: 397: }
  1611                           ;main.c: 398: break ;
  1612  01E1  2A9D               	goto	l2114
  1613  01E2                     l322:	
  1614                           ;main.c: 400: case STATE_ADJUST_CLOCK:
  1615                           
  1616                           
  1617                           ;main.c: 401: case STATE_SET_TIMER:
  1618                           ;main.c: 402: if( (keyEvents_.up&&!(keyEvents_.up=0)) || (keyEvents_.upHold&&!(keyEvents
      +                          _.upHold=0)) ) {
  1619  01E2  1CD6               	btfss	_keyEvents_,1
  1620  01E3  29E6               	goto	l327
  1621  01E4  10D6               	bcf	_keyEvents_,1
  1622  01E5  29E9               	goto	l2046
  1623  01E6                     l327:	
  1624  01E6  1C56               	btfss	_keyEvents_,0
  1625  01E7  2A22               	goto	l2058
  1626  01E8  1056               	bcf	_keyEvents_,0
  1627  01E9                     l2046:	
  1628                           
  1629                           ;main.c: 403: if( *currentEditValue == currentValueInfo->max )
  1630  01E9  0853               	movf	_currentEditValue,w
  1631  01EA  0086               	movwf	6
  1632  01EB  0187               	clrf	7
  1633  01EC  0850               	movf	_currentValueInfo+1,w
  1634  01ED  00A9               	movwf	??_main+1
  1635  01EE  084F               	movf	_currentValueInfo,w
  1636  01EF  00A8               	movwf	??_main
  1637  01F0  3002               	movlw	2
  1638  01F1  0728               	addwf	??_main,w
  1639  01F2  0084               	movwf	4
  1640  01F3  0829               	movf	??_main+1,w
  1641  01F4  1803               	skipnc
  1642  01F5  0A29               	incf	??_main+1,w
  1643  01F6  0085               	movwf	5
  1644  01F7  0800               	movf	0,w	;code access
  1645  01F8  0601               	xorwf	1,w
  1646  01F9  1D03               	skipz
  1647  01FA  2A0E               	goto	l2050
  1648                           
  1649                           ;main.c: 404: *currentEditValue = currentValueInfo->min ;
  1650  01FB  0850               	movf	_currentValueInfo+1,w
  1651  01FC  00A9               	movwf	??_main+1
  1652  01FD  084F               	movf	_currentValueInfo,w
  1653  01FE  00A8               	movwf	??_main
  1654  01FF  3003               	movlw	3
  1655  0200  0728               	addwf	??_main,w
  1656  0201  0084               	movwf	4
  1657  0202  0829               	movf	??_main+1,w
  1658  0203  1803               	skipnc
  1659  0204  0A29               	incf	??_main+1,w
  1660  0205  0085               	movwf	5
  1661  0206  0800               	movf	0,w	;code access
  1662  0207  00AA               	movwf	??_main+2
  1663  0208  0853               	movf	_currentEditValue,w
  1664  0209  0086               	movwf	6
  1665  020A  0187               	clrf	7
  1666  020B  082A               	movf	??_main+2,w
  1667  020C  0081               	movwf	1
  1668  020D  2A21               	goto	l2056
  1669  020E                     l2050:	
  1670                           
  1671                           ;main.c: 405: else if( ( *currentEditValue & 0x0F ) == 0x09 )
  1672  020E  0853               	movf	_currentEditValue,w
  1673  020F  0086               	movwf	6
  1674  0210  0187               	clrf	7
  1675  0211  300F               	movlw	15
  1676  0212  0501               	andwf	1,w
  1677  0213  00A8               	movwf	??_main
  1678  0214  3009               	movlw	9
  1679  0215  0628               	xorwf	??_main,w
  1680  0216  1D03               	btfss	3,2
  1681  0217  2A1A               	goto	l2054
  1682                           
  1683                           ;main.c: 406: *currentEditValue += 7 ;
  1684  0218  3007               	movlw	7
  1685  0219  2A1B               	goto	L2
  1686  021A                     l2054:	
  1687                           
  1688                           ;main.c: 407: else
  1689                           ;main.c: 408: ( *currentEditValue )++ ;
  1690  021A  3001               	movlw	1
  1691  021B                     L2:	
  1692  021B  00A8               	movwf	??_main
  1693  021C  0853               	movf	_currentEditValue,w
  1694  021D  0086               	movwf	6
  1695  021E  0187               	clrf	7
  1696  021F  0828               	movf	??_main,w
  1697  0220  0781               	addwf	1,f
  1698  0221                     l2056:	
  1699                           
  1700                           ;main.c: 409: outputEvent.changeValue=1 ;
  1701  0221  14D9               	bsf	_outputEvent,1
  1702  0222                     l2058:	
  1703                           
  1704                           ;main.c: 410: }
  1705                           ;main.c: 411: if( (keyEvents_.down&&!(keyEvents_.down=0)) || (keyEvents_.downHold&&!(key
      +                          Events_.downHold=0)) ) {
  1706  0222  1DD6               	btfss	_keyEvents_,3
  1707  0223  2A26               	goto	l336
  1708  0224  11D6               	bcf	_keyEvents_,3
  1709  0225  2A29               	goto	l2064
  1710  0226                     l336:	
  1711  0226  1E56               	btfss	_keyEvents_,4
  1712  0227  2A9D               	goto	l2114
  1713  0228  1256               	bcf	_keyEvents_,4
  1714  0229                     l2064:	
  1715                           
  1716                           ;main.c: 412: if( *currentEditValue == currentValueInfo->min )
  1717  0229  0853               	movf	_currentEditValue,w
  1718  022A  0086               	movwf	6
  1719  022B  0187               	clrf	7
  1720  022C  0850               	movf	_currentValueInfo+1,w
  1721  022D  00A9               	movwf	??_main+1
  1722  022E  084F               	movf	_currentValueInfo,w
  1723  022F  00A8               	movwf	??_main
  1724  0230  3003               	movlw	3
  1725  0231  0728               	addwf	??_main,w
  1726  0232  0084               	movwf	4
  1727  0233  0829               	movf	??_main+1,w
  1728  0234  1803               	skipnc
  1729  0235  0A29               	incf	??_main+1,w
  1730  0236  0085               	movwf	5
  1731  0237  0800               	movf	0,w	;code access
  1732  0238  0601               	xorwf	1,w
  1733  0239  1D03               	skipz
  1734  023A  2A4E               	goto	l2068
  1735                           
  1736                           ;main.c: 413: *currentEditValue = currentValueInfo->max ;
  1737  023B  0850               	movf	_currentValueInfo+1,w
  1738  023C  00A9               	movwf	??_main+1
  1739  023D  084F               	movf	_currentValueInfo,w
  1740  023E  00A8               	movwf	??_main
  1741  023F  3002               	movlw	2
  1742  0240  0728               	addwf	??_main,w
  1743  0241  0084               	movwf	4
  1744  0242  0829               	movf	??_main+1,w
  1745  0243  1803               	skipnc
  1746  0244  0A29               	incf	??_main+1,w
  1747  0245  0085               	movwf	5
  1748  0246  0800               	movf	0,w	;code access
  1749  0247  00AA               	movwf	??_main+2
  1750  0248  0853               	movf	_currentEditValue,w
  1751  0249  0086               	movwf	6
  1752  024A  0187               	clrf	7
  1753  024B  082A               	movf	??_main+2,w
  1754  024C  0081               	movwf	1
  1755  024D  2A7B               	goto	l2096
  1756  024E                     l2068:	
  1757                           
  1758                           ;main.c: 414: else if( ( *currentEditValue & 0x0F ) == 0x00 )
  1759  024E  0853               	movf	_currentEditValue,w
  1760  024F  0086               	movwf	6
  1761  0250  0187               	clrf	7
  1762  0251  0801               	movf	1,w
  1763  0252  390F               	andlw	15
  1764  0253  1D03               	btfss	3,2
  1765  0254  2A5A               	goto	l2072
  1766                           
  1767                           ;main.c: 415: *currentEditValue -= 7 ;
  1768  0255  0853               	movf	_currentEditValue,w
  1769  0256  0086               	movwf	6
  1770  0257  0187               	clrf	7
  1771  0258  3007               	movlw	7
  1772  0259  2A5E               	goto	L3
  1773  025A                     l2072:	
  1774                           
  1775                           ;main.c: 416: else
  1776                           ;main.c: 417: ( *currentEditValue )-- ;
  1777  025A  0853               	movf	_currentEditValue,w
  1778  025B  0086               	movwf	6
  1779  025C  0187               	clrf	7
  1780  025D  3001               	movlw	1
  1781  025E                     L3:	
  1782  025E  0281               	subwf	1,f
  1783  025F  2A7B               	goto	l2096
  1784  0260                     l341:	
  1785                           ;main.c: 422: case STATE_BUZZER_TEST:
  1786                           
  1787                           ;main.c: 419: }
  1788                           ;main.c: 420: break ;
  1789                           
  1790                           ;main.c: 418: outputEvent.changeValue=1 ;
  1791                           
  1792                           
  1793                           ;main.c: 423: if( (keyEvents_.up&&!(keyEvents_.up=0)) || (keyEvents_.upHold&&!(keyEvents
      +                          _.upHold=0)) ) {
  1794  0260  1CD6               	btfss	_keyEvents_,1
  1795  0261  2A64               	goto	l346
  1796  0262  10D6               	bcf	_keyEvents_,1
  1797  0263  2A67               	goto	l2080
  1798  0264                     l346:	
  1799  0264  1C56               	btfss	_keyEvents_,0
  1800  0265  2A6F               	goto	l2086
  1801  0266  1056               	bcf	_keyEvents_,0
  1802  0267                     l2080:	
  1803                           
  1804                           ;main.c: 424: if( PR2 != 0xFF ) PR2++ ;
  1805  0267  0A1B               	incf	27,w	;volatile
  1806  0268  1903               	btfsc	3,2
  1807  0269  2A6E               	goto	l2084
  1808  026A  3001               	movlw	1
  1809  026B  00A8               	movwf	??_main
  1810  026C  0828               	movf	??_main,w
  1811  026D  079B               	addwf	27,f	;volatile
  1812  026E                     l2084:	
  1813                           
  1814                           ;main.c: 425: outputEvent.changeValue=1 ;
  1815  026E  14D9               	bsf	_outputEvent,1
  1816  026F                     l2086:	
  1817                           
  1818                           ;main.c: 426: }
  1819                           ;main.c: 427: if( (keyEvents_.down&&!(keyEvents_.down=0)) || (keyEvents_.downHold&&!(key
      +                          Events_.downHold=0)) ) {
  1820  026F  1DD6               	btfss	_keyEvents_,3
  1821  0270  2A73               	goto	l352
  1822  0271  11D6               	bcf	_keyEvents_,3
  1823  0272  2A76               	goto	l2092
  1824  0273                     l352:	
  1825  0273  1E56               	btfss	_keyEvents_,4
  1826  0274  2A9D               	goto	l2114
  1827  0275  1256               	bcf	_keyEvents_,4
  1828  0276                     l2092:	
  1829                           
  1830                           ;main.c: 428: if( PR2 != 0 ) PR2-- ;
  1831  0276  081B               	movf	27,w	;volatile
  1832  0277  1903               	btfsc	3,2
  1833  0278  2A7B               	goto	l2096
  1834  0279  3001               	movlw	1
  1835  027A  029B               	subwf	27,f	;volatile
  1836  027B                     l2096:	
  1837                           
  1838                           ;main.c: 429: outputEvent.changeValue=1 ;
  1839  027B  14D9               	bsf	_outputEvent,1
  1840                           
  1841                           ;main.c: 433: }
  1842                           
  1843                           ;main.c: 430: }
  1844                           ;main.c: 431: break ;
  1845  027C  2A9D               	goto	l2114
  1846  027D                     l2100:	
  1847  027D  0857               	movf	_machineState,w
  1848                           
  1849                           ; Switch size 1, requested type "space"
  1850                           ; Number of cases is 4, Range of values is 2 to 6
  1851                           ; switch strategies available:
  1852                           ; Name         Instructions Cycles
  1853                           ; simple_byte           13     7 (average)
  1854                           ; direct_byte           19     9 (fixed)
  1855                           ; jumptable            263     9 (fixed)
  1856                           ;	Chosen strategy is simple_byte
  1857  027E  3A02               	xorlw	2	; case 2
  1858  027F  1903               	skipnz
  1859  0280  29C0               	goto	l313
  1860  0281  3A01               	xorlw	1	; case 3
  1861  0282  1903               	skipnz
  1862  0283  29E2               	goto	l322
  1863  0284  3A06               	xorlw	6	; case 5
  1864  0285  1903               	skipnz
  1865  0286  29E2               	goto	l322
  1866  0287  3A03               	xorlw	3	; case 6
  1867  0288  1903               	skipnz
  1868  0289  2A60               	goto	l341
  1869  028A  2A9D               	goto	l2114
  1870                           
  1871                           ;main.c: 437: switch( machineState ) {
  1872  028B  2A9D               	goto	l2114
  1873  028C                     l355:	
  1874                           ;main.c: 439: case STATE_BUZZER_TEST:
  1875                           
  1876                           
  1877                           ;main.c: 440: if( portAState_.keyRight )
  1878  028C  1E5A               	btfss	_portAState_,4
  1879  028D  2A9A               	goto	l362
  1880  028E  2A97               	goto	l2110
  1881  028F                     l2104:	
  1882                           ;main.c: 446: case STATE_ALERM:
  1883                           
  1884                           ;main.c: 444: break ;
  1885                           
  1886                           ;main.c: 442: else
  1887                           ;main.c: 443: PWM3OE = 0 ;
  1888                           
  1889                           ;main.c: 441: PWM3OE = 1 ;
  1890                           
  1891                           
  1892                           ;main.c: 447: alerm++ ;
  1893  028F  3001               	movlw	1
  1894  0290  0020               	movlb	0	; select bank0
  1895  0291  00A8               	movwf	??_main
  1896  0292  0828               	movf	??_main,w
  1897  0293  07D1               	addwf	_alerm,f
  1898                           
  1899                           ;main.c: 448: if( ( alerm & 0b00000100 ) && !( alerm & 0b00100000 ) )
  1900  0294  1951               	btfsc	_alerm,2
  1901  0295  1AD1               	btfsc	_alerm,5
  1902  0296  2A9A               	goto	l362
  1903  0297                     l2110:	
  1904                           
  1905                           ;main.c: 449: PWM3OE = 1 ;
  1906  0297  002C               	movlb	12	; select bank12
  1907  0298  1719               	bsf	25,6	;volatile
  1908  0299  2AA6               	goto	l358
  1909  029A                     l362:	
  1910                           ;main.c: 454: default:
  1911                           
  1912                           ;main.c: 452: break ;
  1913                           
  1914                           ;main.c: 450: else
  1915                           ;main.c: 451: PWM3OE = 0 ;
  1916                           
  1917                           
  1918                           ;main.c: 455: PWM3OE = 0 ;
  1919  029A  002C               	movlb	12	; select bank12
  1920  029B  1319               	bcf	25,6	;volatile
  1921                           
  1922                           ;main.c: 458: }
  1923                           
  1924                           ;main.c: 456: break ;
  1925  029C  2AA6               	goto	l358
  1926  029D                     l2114:	
  1927  029D  0020               	movlb	0	; select bank0
  1928  029E  0857               	movf	_machineState,w
  1929                           
  1930                           ; Switch size 1, requested type "space"
  1931                           ; Number of cases is 2, Range of values is 4 to 6
  1932                           ; switch strategies available:
  1933                           ; Name         Instructions Cycles
  1934                           ; simple_byte            7     4 (average)
  1935                           ; direct_byte           15     9 (fixed)
  1936                           ; jumptable            263     9 (fixed)
  1937                           ;	Chosen strategy is simple_byte
  1938  029F  3A04               	xorlw	4	; case 4
  1939  02A0  1903               	skipnz
  1940  02A1  2A8F               	goto	l2104
  1941  02A2  3A02               	xorlw	2	; case 6
  1942  02A3  1903               	skipnz
  1943  02A4  2A8C               	goto	l355
  1944  02A5  2A9A               	goto	l362
  1945  02A6                     l358:	
  1946                           
  1947                           ;main.c: 461: if( (outputEvent.changeMessage&&!(outputEvent.changeMessage=0)) ) {
  1948  02A6  0020               	movlb	0	; select bank0
  1949  02A7  1C59               	btfss	_outputEvent,0
  1950  02A8  2B4B               	goto	l363
  1951  02A9  1059               	bcf	_outputEvent,0
  1952                           
  1953                           ;main.c: 463: switch( machineState ) {
  1954  02AA  2B3D               	goto	l2148
  1955  02AB                     l2118:	
  1956                           ;main.c: 464: case STATE_CLOCK:
  1957                           
  1958                           
  1959                           ;main.c: 465: case STATE_ALERM:
  1960                           ;main.c: 466: case STATE_ADJUST_CLOCK:
  1961                           ;main.c: 467: case STATE_SET_TIMER:
  1962                           ;main.c: 469: _parallel_lcd_ClearRow( 0x80 ) ;
  1963  02AB  3080               	movlw	128
  1964  02AC  3186  26E4  3180   	fcall	__parallel_lcd_ClearRow
  1965                           
  1966                           ;main.c: 471: switch( machineState ) {
  1967  02AF  2ACA               	goto	l2130
  1968  02B0                     l2120:	
  1969                           ;main.c: 472: case STATE_CLOCK:
  1970                           
  1971                           
  1972                           ;main.c: 473: _parallel_lcd_ClearRow( 0xC0 ) ;
  1973  02B0  30C0               	movlw	192
  1974  02B1  3186  26E4  3180   	fcall	__parallel_lcd_ClearRow
  1975                           
  1976                           ;main.c: 474: break ;
  1977  02B4  2B1A               	goto	l2138
  1978  02B5                     l2122:	
  1979                           ;main.c: 475: case STATE_ALERM:
  1980                           
  1981                           
  1982                           ;main.c: 476: _parallel_lcd_WriteStringClearing( 0xC0 | 0x9 , "ALERM!!" ) ;
  1983  02B5  3076               	movlw	low (STR_15| (0+32768))
  1984  02B6  0020               	movlb	0	; select bank0
  1985  02B7  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1986  02B8  3087               	movlw	high (STR_15| (0+32768))
  1987  02B9  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1988  02BA  30C9               	movlw	201
  1989  02BB  2B17               	goto	L5
  1990  02BC                     l2124:	
  1991                           ;main.c: 478: case STATE_ADJUST_CLOCK:
  1992                           
  1993                           ;main.c: 477: break ;
  1994                           
  1995                           
  1996                           ;main.c: 479: _parallel_lcd_WriteStringClearing( 0xC0 | 0xA , "adjust" ) ;
  1997  02BC  308D               	movlw	low (STR_16| (0+32768))
  1998  02BD  0020               	movlb	0	; select bank0
  1999  02BE  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2000  02BF  3087               	movlw	high (STR_16| (0+32768))
  2001  02C0  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2002  02C1  30CA               	movlw	202
  2003  02C2  2B17               	goto	L5
  2004  02C3                     l2126:	
  2005                           ;main.c: 481: case STATE_SET_TIMER:
  2006                           
  2007                           ;main.c: 480: break ;
  2008                           
  2009                           
  2010                           ;main.c: 482: _parallel_lcd_WriteStringClearing( 0xC0 | 0xB , "timer" ) ;
  2011  02C3  3094               	movlw	low (STR_17| (0+32768))
  2012  02C4  0020               	movlb	0	; select bank0
  2013  02C5  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2014  02C6  3087               	movlw	high (STR_17| (0+32768))
  2015  02C7  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2016  02C8  30CB               	movlw	203
  2017  02C9  2B17               	goto	L5
  2018  02CA                     l2130:	
  2019                           ;main.c: 484: }
  2020                           
  2021                           ;main.c: 483: break ;
  2022                           
  2023  02CA  0020               	movlb	0	; select bank0
  2024  02CB  0857               	movf	_machineState,w
  2025                           
  2026                           ; Switch size 1, requested type "space"
  2027                           ; Number of cases is 4, Range of values is 1 to 5
  2028                           ; switch strategies available:
  2029                           ; Name         Instructions Cycles
  2030                           ; simple_byte           13     7 (average)
  2031                           ; direct_byte           19     9 (fixed)
  2032                           ; jumptable            263     9 (fixed)
  2033                           ;	Chosen strategy is simple_byte
  2034  02CC  3A01               	xorlw	1	; case 1
  2035  02CD  1903               	skipnz
  2036  02CE  2AB0               	goto	l2120
  2037  02CF  3A02               	xorlw	2	; case 3
  2038  02D0  1903               	skipnz
  2039  02D1  2ABC               	goto	l2124
  2040  02D2  3A07               	xorlw	7	; case 4
  2041  02D3  1903               	skipnz
  2042  02D4  2AB5               	goto	l2122
  2043  02D5  3A01               	xorlw	1	; case 5
  2044  02D6  1903               	skipnz
  2045  02D7  2AC3               	goto	l2126
  2046  02D8  2AD9               	goto	l371
  2047  02D9                     l371:	
  2048  02D9  2B1A               	goto	l2138
  2049  02DA                     l2132:	
  2050                           ;main.c: 489: case STATE_MENU:
  2051                           
  2052                           ;main.c: 487: break ;
  2053                           
  2054                           ;main.c: 485: outputEvent.changeValue=1 ;
  2055                           
  2056                           
  2057                           ;main.c: 490: _parallel_lcd_WriteStringClearing( 0x80 | 0x1 , MESSAGE_MENU[ menuSelect -
      +                           cursorPosition ] ) ;
  2058  02DA  0354               	decf	_cursorPosition,w
  2059  02DB  3AFF               	xorlw	255
  2060  02DC  0758               	addwf	_menuSelect,w
  2061  02DD  0709               	addwf	9,w
  2062  02DE  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2063  02DF  0086               	movwf	6
  2064  02E0  0187               	clrf	7
  2065  02E1  3F40               	moviw [0]fsr1
  2066  02E2  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2067  02E3  3F41               	moviw [1]fsr1
  2068  02E4  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2069  02E5  3081               	movlw	129
  2070  02E6  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2071                           
  2072                           ;main.c: 491: _parallel_lcd_WriteStringClearing( 0xC0 | 0x1 , MESSAGE_MENU[ menuSelect -
      +                           cursorPosition + 1] ) ;
  2073  02E9  0020               	movlb	0	; select bank0
  2074  02EA  0354               	decf	_cursorPosition,w
  2075  02EB  3AFF               	xorlw	255
  2076  02EC  0758               	addwf	_menuSelect,w
  2077  02ED  0709               	addwf	9,w
  2078  02EE  3E02               	addlw	2
  2079  02EF  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2080  02F0  0086               	movwf	6
  2081  02F1  0187               	clrf	7
  2082  02F2  3F40               	moviw [0]fsr1
  2083  02F3  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2084  02F4  3F41               	moviw [1]fsr1
  2085  02F5  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2086  02F6  30C1               	movlw	193
  2087  02F7  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2088                           
  2089                           ;main.c: 492: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[cursorPosition] | 0x
      +                          0 , 0x00 ) ;
  2090  02FA  0020               	movlb	0	; select bank0
  2091  02FB  01A3               	clrf	__parallel_lcd_WriteCharacter@character
  2092  02FC  0854               	movf	_cursorPosition,w
  2093  02FD  3E13               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2094  02FE  0084               	movwf	4
  2095  02FF  3087               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2096  0300  1803               	skipnc
  2097  0301  3E01               	addlw	1
  2098  0302  0085               	movwf	5
  2099  0303  0800               	movf	0,w	;code access
  2100  0304  318E  2653  3180   	fcall	__parallel_lcd_WriteCharacter
  2101                           
  2102                           ;main.c: 493: break ;
  2103  0307  2B4B               	goto	l363
  2104  0308                     l2136:	
  2105                           ;main.c: 495: case STATE_BUZZER_TEST:
  2106                           
  2107                           
  2108                           ;main.c: 496: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Buzzer Test" ) ;
  2109  0308  3057               	movlw	low (STR_10| (0+32768))
  2110  0309  0020               	movlb	0	; select bank0
  2111  030A  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2112  030B  3087               	movlw	high (STR_10| (0+32768))
  2113  030C  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2114  030D  3080               	movlw	128
  2115  030E  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2116                           
  2117                           ;main.c: 497: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , "Period =" ) ;
  2118  0311  306D               	movlw	low (STR_19| (0+32768))
  2119  0312  0020               	movlb	0	; select bank0
  2120  0313  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2121  0314  3087               	movlw	high (STR_19| (0+32768))
  2122  0315  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2123  0316  30C0               	movlw	192
  2124  0317                     L5:	
  2125  0317  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2126  031A                     l2138:	
  2127                           
  2128                           ;main.c: 498: outputEvent.changeValue=1 ;
  2129  031A  0020               	movlb	0	; select bank0
  2130  031B  14D9               	bsf	_outputEvent,1
  2131                           
  2132                           ;main.c: 499: break ;
  2133  031C  2B4B               	goto	l363
  2134  031D                     l2140:	
  2135                           ;main.c: 501: case STATE_VERSION:
  2136                           
  2137                           
  2138                           ;main.c: 502: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Version" ) ;
  2139  031D  307E               	movlw	low (STR_11| (0+32768))
  2140  031E  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2141  031F  3087               	movlw	high (STR_11| (0+32768))
  2142  0320  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2143  0321  3080               	movlw	128
  2144  0322  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2145                           
  2146                           ;main.c: 503: _parallel_lcd_WriteStringClearing( 0xC0 | 0x8 , "00.100" ) ;
  2147  0325  3086               	movlw	low (STR_14| (0+32768))
  2148  0326  0020               	movlb	0	; select bank0
  2149  0327  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2150  0328  3087               	movlw	high (STR_14| (0+32768))
  2151  0329  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2152  032A  30C8               	movlw	200
  2153  032B  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2154                           
  2155                           ;main.c: 504: break ;
  2156  032E  2B4B               	goto	l363
  2157  032F                     l2142:	
  2158                           ;main.c: 506: case STATE_ERROR:
  2159                           
  2160                           
  2161                           ;main.c: 507: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Receive Error !!" ) ;
  2162  032F  3039               	movlw	low (STR_22| (0+32768))
  2163  0330  0020               	movlb	0	; select bank0
  2164  0331  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2165  0332  3087               	movlw	high (STR_22| (0+32768))
  2166  0333  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2167  0334  3080               	movlw	128
  2168  0335  318F  270F  3180   	fcall	__parallel_lcd_WriteStringClearing
  2169                           
  2170                           ;main.c: 508: _parallel_lcd_ClearRow( 0xC0 ) ;
  2171  0338  30C0               	movlw	192
  2172  0339  3186  26E4  3180   	fcall	__parallel_lcd_ClearRow
  2173                           
  2174                           ;main.c: 510: }
  2175                           
  2176                           ;main.c: 509: break ;
  2177  033C  2B4B               	goto	l363
  2178  033D                     l2148:	
  2179  033D  0020               	movlb	0	; select bank0
  2180  033E  0857               	movf	_machineState,w
  2181                           
  2182                           ; Switch size 1, requested type "space"
  2183                           ; Number of cases is 8, Range of values is 1 to 8
  2184                           ; switch strategies available:
  2185                           ; Name         Instructions Cycles
  2186                           ; direct_byte           25     9 (fixed)
  2187                           ; simple_byte           25    13 (average)
  2188                           ; jumptable            263     9 (fixed)
  2189                           ;	Chosen strategy is direct_byte
  2190  033F  3EFF               	addlw	-1
  2191  0340  1C03               	skipc
  2192  0341  2B4B               	goto	l363
  2193  0342  0084               	movwf	4
  2194  0343  3008               	movlw	8
  2195  0344  0204               	subwf	4,w
  2196  0345  1803               	skipnc
  2197  0346  2B4B               	goto	l363
  2198  0347  3188               	movlp	high S2316
  2199  0348  3504               	lslf	4,w
  2200  0349  3E00               	addlw	low S2316
  2201  034A  0082               	movwf	2
  2202  034B                     l363:	
  2203                           
  2204                           ;main.c: 512: }
  2205                           ;main.c: 515: if( (outputEvent.changeValue&&!(outputEvent.changeValue=0)) ) {
  2206  034B  0020               	movlb	0	; select bank0
  2207  034C  1CD9               	btfss	_outputEvent,1
  2208  034D  2BE0               	goto	l2204
  2209  034E  10D9               	bcf	_outputEvent,1
  2210                           
  2211                           ;main.c: 516: switch( machineState ) {
  2212  034F  2BCE               	goto	l2202
  2213  0350                     l2152:	
  2214                           ;main.c: 517: case STATE_CLOCK:
  2215                           
  2216                           
  2217                           ;main.c: 518: case STATE_ALERM:
  2218                           ;main.c: 519: case STATE_ADJUST_CLOCK:
  2219                           ;main.c: 520: case STATE_SET_TIMER:
  2220                           ;main.c: 521: {
  2221                           ;main.c: 522: char string[17] ;
  2222                           ;main.c: 523: _date_time_ConvertByteToDate( datePtr , &string ) ;
  2223  0350  302B               	movlw	(low (main@string| 0))& (0+255)
  2224  0351  00A8               	movwf	??_main
  2225  0352  0828               	movf	??_main,w
  2226  0353  00A0               	movwf	__date_time_ConvertByteToDate@stinrg
  2227  0354  086A               	movf	_datePtr,w
  2228  0355  3185  2543  3180   	fcall	__date_time_ConvertByteToDate
  2229                           
  2230                           ;main.c: 524: _parallel_lcd_WriteString( 0x80 | 0x0 , &string ) ;
  2231  0358  302B               	movlw	low main@string
  2232  0359  0020               	movlb	0	; select bank0
  2233  035A  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2234  035B  3000               	movlw	high main@string
  2235  035C  00A4               	movwf	__parallel_lcd_WriteString@stringPtr+1
  2236  035D  3080               	movlw	128
  2237  035E  318E  26C5  3180   	fcall	__parallel_lcd_WriteString
  2238                           
  2239                           ;main.c: 525: _date_time_ConvertByteToTime( datePtr , &string ) ;
  2240  0361  302B               	movlw	(low (main@string| 0))& (0+255)
  2241  0362  0020               	movlb	0	; select bank0
  2242  0363  00A8               	movwf	??_main
  2243  0364  0828               	movf	??_main,w
  2244  0365  00A0               	movwf	__date_time_ConvertByteToTime@string
  2245  0366  086A               	movf	_datePtr,w
  2246  0367  3186  2632  3180   	fcall	__date_time_ConvertByteToTime
  2247                           
  2248                           ;main.c: 526: _parallel_lcd_WriteString( 0xC0 | 0x0 , &string ) ;
  2249  036A  302B               	movlw	low main@string
  2250  036B  0020               	movlb	0	; select bank0
  2251  036C  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2252  036D  3000               	movlw	high main@string
  2253  036E  00A4               	movwf	__parallel_lcd_WriteString@stringPtr+1
  2254  036F  30C0               	movlw	192
  2255  0370  318E  26C5  3180   	fcall	__parallel_lcd_WriteString
  2256                           
  2257                           ;main.c: 527: blinkPrescaler = 0 ;
  2258  0373  0020               	movlb	0	; select bank0
  2259  0374  01D2               	clrf	_blinkPrescaler
  2260                           
  2261                           ;main.c: 528: }
  2262                           ;main.c: 529: break ;
  2263  0375  2BE0               	goto	l2204
  2264  0376                     l2162:	
  2265                           ;main.c: 531: case STATE_BUZZER_TEST:
  2266                           
  2267                           
  2268                           ;main.c: 532: {
  2269                           ;main.c: 533: char valueString[4] = "000" ;
  2270  0376  086E               	movf	main@F4267+3,w
  2271  0377  00BF               	movwf	main@valueString+3
  2272  0378  086D               	movf	main@F4267+2,w
  2273  0379  00BE               	movwf	main@valueString+2
  2274  037A  086C               	movf	main@F4267+1,w
  2275  037B  00BD               	movwf	main@valueString+1
  2276  037C  086B               	movf	main@F4267,w
  2277  037D  00BC               	movwf	main@valueString
  2278                           
  2279                           ;main.c: 534: PWM3DCH = PR2 >> 2 ;
  2280  037E  081B               	movf	27,w	;volatile
  2281  037F  00A8               	movwf	??_main
  2282  0380  3002               	movlw	2
  2283  0381                     u2295:	
  2284  0381  36A8               	lsrf	??_main,f
  2285  0382  0B89               	decfsz	9,f
  2286  0383  2B81               	goto	u2295
  2287  0384  0828               	movf	??_main,w
  2288  0385  002C               	movlb	12	; select bank12
  2289  0386  0098               	movwf	24	;volatile
  2290                           
  2291                           ;main.c: 535: uint08_t tmpValue = PR2 ;
  2292  0387  0020               	movlb	0	; select bank0
  2293  0388  081B               	movf	27,w	;volatile
  2294  0389  00A8               	movwf	??_main
  2295  038A  0828               	movf	??_main,w
  2296  038B  00C0               	movwf	main@tmpValue
  2297                           
  2298                           ;main.c: 536: uint08_t isNonZero = 0 ;
  2299  038C  01C1               	clrf	main@isNonZero
  2300                           
  2301                           ;main.c: 537: static const uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 } ;
  2302                           ;main.c: 539: for( uint08_t i = 0 ; i != 3 ; i++ ) {
  2303  038D  01C8               	clrf	main@i
  2304  038E  3003               	movlw	3
  2305  038F  0648               	xorwf	main@i,w
  2306  0390  1903               	btfsc	3,2
  2307  0391  2BC5               	goto	l2198
  2308  0392                     l2174:	
  2309                           
  2310                           ;main.c: 540: uint08_t compareUnit = COMPARE_UNITS[i] ;
  2311  0392  0848               	movf	main@i,w
  2312  0393  3E10               	addlw	low (main@COMPARE_UNITS| (0+32768))
  2313  0394  0084               	movwf	4
  2314  0395  3087               	movlw	high (main@COMPARE_UNITS| (0+32768))
  2315  0396  1803               	skipnc
  2316  0397  3E01               	addlw	1
  2317  0398  0085               	movwf	5
  2318  0399  0800               	movf	0,w	;code access
  2319  039A  00A8               	movwf	??_main
  2320  039B  0828               	movf	??_main,w
  2321  039C  00C2               	movwf	main@compareUnit
  2322  039D                     l2182:	
  2323                           ;main.c: 541: while( tmpValue >= compareUnit ) {
  2324                           
  2325  039D  0842               	movf	main@compareUnit,w
  2326  039E  0240               	subwf	main@tmpValue,w
  2327  039F  1C03               	btfss	3,0
  2328  03A0  2BAE               	goto	l2184
  2329                           
  2330                           ;main.c: 542: tmpValue -= compareUnit ;
  2331  03A1  0842               	movf	main@compareUnit,w
  2332  03A2  02C0               	subwf	main@tmpValue,f
  2333                           
  2334                           ;main.c: 543: valueString[i]++ ;
  2335  03A3  3001               	movlw	1
  2336  03A4  00A8               	movwf	??_main
  2337  03A5  0848               	movf	main@i,w
  2338  03A6  3E3C               	addlw	(low (main@valueString| 0))& (0+255)
  2339  03A7  0086               	movwf	6
  2340  03A8  0187               	clrf	7
  2341  03A9  0828               	movf	??_main,w
  2342  03AA  0781               	addwf	1,f
  2343                           
  2344                           ;main.c: 544: isNonZero = 1 ;
  2345  03AB  01C1               	clrf	main@isNonZero
  2346  03AC  0AC1               	incf	main@isNonZero,f
  2347  03AD  2B9D               	goto	l2182
  2348  03AE                     l2184:	
  2349                           
  2350                           ;main.c: 545: }
  2351                           ;main.c: 547: if( i == 2 ) break ;
  2352  03AE  3002               	movlw	2
  2353  03AF  0648               	xorwf	main@i,w
  2354  03B0  1903               	btfsc	3,2
  2355  03B1  2BC5               	goto	l2198
  2356                           
  2357                           ;main.c: 548: if( isNonZero ) continue ;
  2358  03B2  0841               	movf	main@isNonZero,w
  2359  03B3  1D03               	btfss	3,2
  2360  03B4  2BBD               	goto	l2194
  2361                           
  2362                           ;main.c: 550: valueString[i] = ' ' ;
  2363  03B5  3020               	movlw	32
  2364  03B6  00A8               	movwf	??_main
  2365  03B7  0848               	movf	main@i,w
  2366  03B8  3E3C               	addlw	(low (main@valueString| 0))& (0+255)
  2367  03B9  0086               	movwf	6
  2368  03BA  0187               	clrf	7
  2369  03BB  0828               	movf	??_main,w
  2370  03BC  0081               	movwf	1
  2371  03BD                     l2194:	
  2372  03BD  3001               	movlw	1
  2373  03BE  00A8               	movwf	??_main
  2374  03BF  0828               	movf	??_main,w
  2375  03C0  07C8               	addwf	main@i,f
  2376  03C1  3003               	movlw	3
  2377  03C2  0648               	xorwf	main@i,w
  2378  03C3  1D03               	btfss	3,2
  2379  03C4  2B92               	goto	l2174
  2380  03C5                     l2198:	
  2381                           
  2382                           ;main.c: 551: }
  2383                           ;main.c: 553: _parallel_lcd_WriteString( 0xC0 | 0xD , &valueString ) ;
  2384  03C5  303C               	movlw	low main@valueString
  2385  03C6  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2386  03C7  3000               	movlw	high main@valueString
  2387  03C8  00A4               	movwf	__parallel_lcd_WriteString@stringPtr+1
  2388  03C9  30CD               	movlw	205
  2389  03CA  318E  26C5  3180   	fcall	__parallel_lcd_WriteString
  2390                           
  2391                           ;main.c: 556: }
  2392                           
  2393                           ;main.c: 554: }
  2394                           ;main.c: 555: break ;
  2395  03CD  2BE0               	goto	l2204
  2396  03CE                     l2202:	
  2397  03CE  0020               	movlb	0	; select bank0
  2398  03CF  0857               	movf	_machineState,w
  2399                           
  2400                           ; Switch size 1, requested type "space"
  2401                           ; Number of cases is 5, Range of values is 1 to 6
  2402                           ; switch strategies available:
  2403                           ; Name         Instructions Cycles
  2404                           ; simple_byte           16     9 (average)
  2405                           ; direct_byte           21     9 (fixed)
  2406                           ; jumptable            263     9 (fixed)
  2407                           ;	Chosen strategy is simple_byte
  2408  03D0  3A01               	xorlw	1	; case 1
  2409  03D1  1903               	skipnz
  2410  03D2  2B50               	goto	l2152
  2411  03D3  3A02               	xorlw	2	; case 3
  2412  03D4  1903               	skipnz
  2413  03D5  2B50               	goto	l2152
  2414  03D6  3A07               	xorlw	7	; case 4
  2415  03D7  1903               	skipnz
  2416  03D8  2B50               	goto	l2152
  2417  03D9  3A01               	xorlw	1	; case 5
  2418  03DA  1903               	skipnz
  2419  03DB  2B50               	goto	l2152
  2420  03DC  3A03               	xorlw	3	; case 6
  2421  03DD  1903               	skipnz
  2422  03DE  2B76               	goto	l2162
  2423  03DF  2BE0               	goto	l2204
  2424  03E0                     l2204:	
  2425                           
  2426                           ;main.c: 558: }
  2427                           ;main.c: 560: if( machineState == STATE_ADJUST_CLOCK || machineState == STATE_SET_TIMER 
      +                          ) {
  2428  03E0  3003               	movlw	3
  2429  03E1  0020               	movlb	0	; select bank0
  2430  03E2  0657               	xorwf	_machineState,w
  2431  03E3  1903               	btfsc	3,2
  2432  03E4  2BE9               	goto	l2208
  2433  03E5  3005               	movlw	5
  2434  03E6  0657               	xorwf	_machineState,w
  2435  03E7  1D03               	btfss	3,2
  2436  03E8  28DD               	goto	l267
  2437  03E9                     l2208:	
  2438                           
  2439                           ;main.c: 561: char string[4] ;
  2440                           ;main.c: 562: if( blinkPrescaler == 0x00 ) {
  2441  03E9  0852               	movf	_blinkPrescaler,w
  2442  03EA  1D03               	btfss	3,2
  2443  03EB  2C05               	goto	l2214
  2444                           
  2445                           ;main.c: 563: _date_time_ConvertByteToDiscrete( datePtr , &string , editSelect ) ;
  2446  03EC  3043               	movlw	(low (main@string_664| 0))& (0+255)
  2447  03ED  00A8               	movwf	??_main
  2448  03EE  0828               	movf	??_main,w
  2449  03EF  00A0               	movwf	__date_time_ConvertByteToDiscrete@string
  2450  03F0  0855               	movf	_editSelect,w
  2451  03F1  00A9               	movwf	??_main+1
  2452  03F2  0829               	movf	??_main+1,w
  2453  03F3  00A1               	movwf	__date_time_ConvertByteToDiscrete@select
  2454  03F4  086A               	movf	_datePtr,w
  2455  03F5  3184  2422  3180   	fcall	__date_time_ConvertByteToDiscrete
  2456                           
  2457                           ;main.c: 564: _parallel_lcd_WriteString( currentValueInfo->position , &string ) ;
  2458  03F8  3043               	movlw	low main@string_664
  2459  03F9  0020               	movlb	0	; select bank0
  2460  03FA  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2461  03FB  3000               	movlw	high main@string_664
  2462  03FC  00A4               	movwf	__parallel_lcd_WriteString@stringPtr+1
  2463  03FD  084F               	movf	_currentValueInfo,w
  2464  03FE  0084               	movwf	4
  2465  03FF  0850               	movf	_currentValueInfo+1,w
  2466  0400  0085               	movwf	5
  2467  0401  0800               	movf	0,w	;code access
  2468  0402  318E  26C5  3180   	fcall	__parallel_lcd_WriteString
  2469  0405                     l2214:	
  2470                           
  2471                           ;main.c: 565: }
  2472                           ;main.c: 566: if( blinkPrescaler == 0xC0 ) {
  2473  0405  30C0               	movlw	192
  2474  0406  0020               	movlb	0	; select bank0
  2475  0407  0652               	xorwf	_blinkPrescaler,w
  2476  0408  1D03               	btfss	3,2
  2477  0409  28DD               	goto	l267
  2478                           
  2479                           ;main.c: 567: _parallel_lcd_ClearPartial( currentValueInfo->position , currentValueInfo-
      +                          >length ) ;
  2480  040A  0850               	movf	_currentValueInfo+1,w
  2481  040B  00A9               	movwf	??_main+1
  2482  040C  084F               	movf	_currentValueInfo,w
  2483  040D  00A8               	movwf	??_main
  2484  040E  3001               	movlw	1
  2485  040F  0728               	addwf	??_main,w
  2486  0410  0084               	movwf	4
  2487  0411  0829               	movf	??_main+1,w
  2488  0412  1803               	skipnc
  2489  0413  0A29               	incf	??_main+1,w
  2490  0414  0085               	movwf	5
  2491  0415  0800               	movf	0,w	;code access
  2492  0416  00AA               	movwf	??_main+2
  2493  0417  082A               	movf	??_main+2,w
  2494  0418  00A3               	movwf	__parallel_lcd_ClearPartial@length
  2495  0419  084F               	movf	_currentValueInfo,w
  2496  041A  0084               	movwf	4
  2497  041B  0850               	movf	_currentValueInfo+1,w
  2498  041C  0085               	movwf	5
  2499  041D  0800               	movf	0,w	;code access
  2500  041E  318E  268F  3180   	fcall	__parallel_lcd_ClearPartial
  2501                           
  2502                           ;main.c: 568: }
  2503                           ;main.c: 569: }
  2504                           ;main.c: 570: }
  2505  0421  28DD               	goto	l267
  2506  0422                     __end_of_main:	
  2507                           
  2508                           	psect	swtext1
  2509  0800                     __pswtext1:	
  2510  0800                     S2316:	
  2511  0800  3182  2AAB         	ljmp	l2118
  2512  0802  3182  2ADA         	ljmp	l2132
  2513  0804  3182  2AAB         	ljmp	l2118
  2514  0806  3182  2AAB         	ljmp	l2118
  2515  0808  3182  2AAB         	ljmp	l2118
  2516  080A  3183  2B08         	ljmp	l2136
  2517  080C  3183  2B1D         	ljmp	l2140
  2518  080E  3183  2B2F         	ljmp	l2142
  2519                           
  2520                           	psect	text1
  2521  06A7                     __ptext1:	
  2522 ;; *************** function _initialize *****************
  2523 ;; Defined at:
  2524 ;;		line 3 in file "src/pic16f1508_init.h"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;		None               void
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2538 ;;      Params:         0       0       0       0
  2539 ;;      Locals:         0       0       0       0
  2540 ;;      Temps:          0       0       0       0
  2541 ;;      Totals:         0       0       0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    2
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_main
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _initialize
  2554  06A7                     _initialize:	
  2555                           
  2556                           ;pic16f1508_init.h: 6: OSCCONbits.IRCF = 0b1010;
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in _initialize: [wreg+status,2+status,0]
  2560  06A7  0021               	movlb	1	; select bank1
  2561  06A8  0819               	movf	25,w	;volatile
  2562  06A9  3987               	andlw	-121
  2563  06AA  3850               	iorlw	80
  2564  06AB  0099               	movwf	25	;volatile
  2565                           
  2566                           ;pic16f1508_init.h: 7: OSCCONbits.SCS = 0b10;
  2567  06AC  0819               	movf	25,w	;volatile
  2568  06AD  39FC               	andlw	-4
  2569  06AE  3802               	iorlw	2
  2570  06AF  0099               	movwf	25	;volatile
  2571                           
  2572                           ;pic16f1508_init.h: 10: INTCONbits.GIE = 1;
  2573  06B0  178B               	bsf	11,7	;volatile
  2574                           
  2575                           ;pic16f1508_init.h: 11: INTCONbits.PEIE = 0;
  2576  06B1  130B               	bcf	11,6	;volatile
  2577                           
  2578                           ;pic16f1508_init.h: 12: INTCONbits.INTE = 1;
  2579  06B2  160B               	bsf	11,4	;volatile
  2580                           
  2581                           ;pic16f1508_init.h: 15: INTCONbits.IOCIE = 0;
  2582  06B3  118B               	bcf	11,3	;volatile
  2583                           
  2584                           ;pic16f1508_init.h: 16: INTCONbits.IOCIE =0;
  2585  06B4  118B               	bcf	11,3	;volatile
  2586                           
  2587                           ;pic16f1508_init.h: 17: IOCANbits.IOCAN3 = 1;
  2588  06B5  0027               	movlb	7	; select bank7
  2589  06B6  1592               	bsf	18,3	;volatile
  2590                           
  2591                           ;pic16f1508_init.h: 20: OPTION_REGbits.PSA = 0;
  2592  06B7  0021               	movlb	1	; select bank1
  2593  06B8  1195               	bcf	21,3	;volatile
  2594                           
  2595                           ;pic16f1508_init.h: 21: OPTION_REGbits.PS = 0b001;
  2596  06B9  0815               	movf	21,w	;volatile
  2597  06BA  39F8               	andlw	-8
  2598  06BB  3801               	iorlw	1
  2599  06BC  0095               	movwf	21	;volatile
  2600                           
  2601                           ;pic16f1508_init.h: 22: OPTION_REGbits.TMR0CS = 0;
  2602  06BD  1295               	bcf	21,5	;volatile
  2603                           
  2604                           ;pic16f1508_init.h: 23: OPTION_REGbits.TMR0SE = 1;
  2605  06BE  1615               	bsf	21,4	;volatile
  2606                           
  2607                           ;pic16f1508_init.h: 24: TMR0 = 0 ;
  2608  06BF  0020               	movlb	0	; select bank0
  2609  06C0  0195               	clrf	21	;volatile
  2610                           
  2611                           ;pic16f1508_init.h: 25: INTCONbits.TMR0IE = 0;
  2612  06C1  128B               	bcf	11,5	;volatile
  2613                           
  2614                           ;pic16f1508_init.h: 26: INTCONbits.TMR0IF = 0;
  2615  06C2  110B               	bcf	11,2	;volatile
  2616                           
  2617                           ;pic16f1508_init.h: 29: T2CON = 0b00000000 ;
  2618  06C3  019C               	clrf	28	;volatile
  2619                           
  2620                           ;pic16f1508_init.h: 30: PR2 = 30 ;
  2621  06C4  301E               	movlw	30
  2622  06C5  009B               	movwf	27	;volatile
  2623                           
  2624                           ;pic16f1508_init.h: 31: TMR2 = 0 ;
  2625  06C6  019A               	clrf	26	;volatile
  2626                           
  2627                           ;pic16f1508_init.h: 32: TMR2IF = 0 ;
  2628  06C7  1091               	bcf	17,1	;volatile
  2629                           
  2630                           ;pic16f1508_init.h: 33: TMR2IE = 0 ;
  2631  06C8  0021               	movlb	1	; select bank1
  2632  06C9  1091               	bcf	17,1	;volatile
  2633                           
  2634                           ;pic16f1508_init.h: 34: TMR2ON = 1 ;
  2635  06CA  0020               	movlb	0	; select bank0
  2636  06CB  151C               	bsf	28,2	;volatile
  2637                           
  2638                           ;pic16f1508_init.h: 37: SSP1STAT = 0b10000000 ;
  2639  06CC  3080               	movlw	128
  2640  06CD  0024               	movlb	4	; select bank4
  2641  06CE  0094               	movwf	20	;volatile
  2642                           
  2643                           ;pic16f1508_init.h: 38: SSP1CON1 = 0b00101000 ;
  2644  06CF  3028               	movlw	40
  2645  06D0  0095               	movwf	21	;volatile
  2646                           
  2647                           ;pic16f1508_init.h: 39: SSP1ADD = 39 ;
  2648  06D1  3027               	movlw	39
  2649  06D2  0092               	movwf	18	;volatile
  2650                           
  2651                           ;pic16f1508_init.h: 42: PWM3POL = 0 ;
  2652  06D3  002C               	movlb	12	; select bank12
  2653  06D4  1219               	bcf	25,4	;volatile
  2654                           
  2655                           ;pic16f1508_init.h: 43: PWM3DCH = 0 ;
  2656  06D5  0198               	clrf	24	;volatile
  2657                           
  2658                           ;pic16f1508_init.h: 44: PWM3DCL = 0 ;
  2659  06D6  0197               	clrf	23	;volatile
  2660                           
  2661                           ;pic16f1508_init.h: 45: PWM3EN = 1 ;
  2662  06D7  1799               	bsf	25,7	;volatile
  2663                           
  2664                           ;pic16f1508_init.h: 46: PWM3OE = 0 ;
  2665  06D8  1319               	bcf	25,6	;volatile
  2666                           
  2667                           ;pic16f1508_init.h: 48: ANSELA = 0b00000000 ;
  2668  06D9  0023               	movlb	3	; select bank3
  2669  06DA  018C               	clrf	12	;volatile
  2670                           
  2671                           ;pic16f1508_init.h: 49: ANSELB = 0b00000000 ;
  2672  06DB  018D               	clrf	13	;volatile
  2673                           
  2674                           ;pic16f1508_init.h: 50: ANSELC = 0b00000000 ;
  2675  06DC  018E               	clrf	14	;volatile
  2676                           
  2677                           ;pic16f1508_init.h: 52: TRISA = 0b00110011 ;
  2678  06DD  3033               	movlw	51
  2679  06DE  0021               	movlb	1	; select bank1
  2680  06DF  008C               	movwf	12	;volatile
  2681                           
  2682                           ;pic16f1508_init.h: 53: TRISB = 0b01010000 ;
  2683  06E0  3050               	movlw	80
  2684  06E1  008D               	movwf	13	;volatile
  2685                           
  2686                           ;pic16f1508_init.h: 54: TRISC = 0b00000000 ;
  2687  06E2  018E               	clrf	14	;volatile
  2688  06E3  0008               	return
  2689  06E4                     __end_of_initialize:	
  2690                           
  2691                           	psect	text2
  2692  0F0F                     __ptext2:	
  2693 ;; *************** function __parallel_lcd_WriteStringClearing *****************
  2694 ;; Defined at:
  2695 ;;		line 72 in file "src/../../_Common/parallel_LCD.h"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  position        1    wreg     unsigned char 
  2698 ;;  stringPtr       2    3[BANK0 ] PTR const unsigned char 
  2699 ;;		 -> STR_22(17), STR_21(7), STR_20(8), STR_19(9), 
  2700 ;;		 -> STR_18(12), STR_17(6), STR_16(7), STR_15(8), 
  2701 ;;		 -> STR_13(8), STR_12(6), STR_11(8), STR_10(12), 
  2702 ;;		 -> STR_9(10), STR_8(13), 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  position        1    6[BANK0 ] unsigned char 
  2705 ;;  i               1    7[BANK0 ] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;		None               void
  2708 ;; Registers used:
  2709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2715 ;;      Params:         0       2       0       0
  2716 ;;      Locals:         0       2       0       0
  2717 ;;      Temps:          0       1       0       0
  2718 ;;      Totals:         0       5       0       0
  2719 ;;Total ram usage:        5 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    3
  2722 ;; This function calls:
  2723 ;;		__private_parallel_lcd_WriteByte
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function __parallel_lcd_WriteStringClearing
  2731  0F0F                     __parallel_lcd_WriteStringClearing:	
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in __parallel_lcd_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  2735                           ;__parallel_lcd_WriteStringClearing@position stored from wreg
  2736  0F0F  0020               	movlb	0	; select bank0
  2737  0F10  00A6               	movwf	__parallel_lcd_WriteStringClearing@position
  2738                           
  2739                           ;parallel_LCD.h: 73: _private_parallel_lcd_WriteByte( position & 0xF0 , 0 ) ;
  2740  0F11  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2741  0F12  0826               	movf	__parallel_lcd_WriteStringClearing@position,w
  2742  0F13  39F0               	andlw	240
  2743  0F14  318E  26A8  318F   	fcall	__private_parallel_lcd_WriteByte
  2744                           
  2745                           ;parallel_LCD.h: 74: for ( uint08_t i = 0 ; i != 16 ; i++ ) {
  2746  0F17  0020               	movlb	0	; select bank0
  2747  0F18  01A7               	clrf	__parallel_lcd_WriteStringClearing@i
  2748  0F19                     L6:	
  2749  0F19  3010               	movlw	16
  2750  0F1A  0627               	xorwf	__parallel_lcd_WriteStringClearing@i,w
  2751  0F1B  1903               	btfsc	3,2
  2752  0F1C  0008               	return
  2753                           
  2754                           ;parallel_LCD.h: 75: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  2755  0F1D  0826               	movf	__parallel_lcd_WriteStringClearing@position,w
  2756  0F1E  390F               	andlw	15
  2757  0F1F  0227               	subwf	__parallel_lcd_WriteStringClearing@i,w
  2758  0F20  1C03               	skipc
  2759  0F21  2F39               	goto	l1680
  2760  0F22  0823               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  2761  0F23  0084               	movwf	4
  2762  0F24  0824               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  2763  0F25  0085               	movwf	5
  2764  0F26  0012               	moviw fsr0++
  2765  0F27  1903               	btfsc	3,2
  2766  0F28  2F39               	goto	l1680
  2767                           
  2768                           ;parallel_LCD.h: 76: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  2769  0F29  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2770  0F2A  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2771  0F2B  0823               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  2772  0F2C  0084               	movwf	4
  2773  0F2D  0824               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  2774  0F2E  0085               	movwf	5
  2775  0F2F  0800               	movf	0,w	;code access
  2776  0F30  318E  26A8  318F   	fcall	__private_parallel_lcd_WriteByte
  2777  0F33  3001               	movlw	1
  2778  0F34  0020               	movlb	0	; select bank0
  2779  0F35  07A3               	addwf	__parallel_lcd_WriteStringClearing@stringPtr,f
  2780  0F36  3000               	movlw	0
  2781  0F37  3DA4               	addwfc	__parallel_lcd_WriteStringClearing@stringPtr+1,f
  2782  0F38  2F3F               	goto	l1682
  2783  0F39                     l1680:	
  2784                           
  2785                           ;parallel_LCD.h: 77: else
  2786                           ;parallel_LCD.h: 78: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  2787  0F39  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2788  0F3A  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2789  0F3B  3020               	movlw	32
  2790  0F3C  318E  26A8  318F   	fcall	__private_parallel_lcd_WriteByte
  2791  0F3F                     l1682:	
  2792  0F3F  3001               	movlw	1
  2793  0F40  0020               	movlb	0	; select bank0
  2794  0F41  00A5               	movwf	??__parallel_lcd_WriteStringClearing
  2795  0F42  0825               	movf	??__parallel_lcd_WriteStringClearing,w
  2796  0F43  07A7               	addwf	__parallel_lcd_WriteStringClearing@i,f
  2797  0F44  2F19               	goto	L6
  2798  0F45                     __end_of__parallel_lcd_WriteStringClearing:	
  2799                           
  2800                           	psect	text3
  2801  0EC5                     __ptext3:	
  2802 ;; *************** function __parallel_lcd_WriteString *****************
  2803 ;; Defined at:
  2804 ;;		line 63 in file "src/../../_Common/parallel_LCD.h"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  position        1    wreg     unsigned char 
  2807 ;;  stringPtr       2    3[BANK0 ] PTR const unsigned char 
  2808 ;;		 -> main@string_664(4), main@valueString(4), main@string(17), STR_14(7), 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  position        1    6[BANK0 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;		None               void
  2813 ;; Registers used:
  2814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2820 ;;      Params:         0       2       0       0
  2821 ;;      Locals:         0       1       0       0
  2822 ;;      Temps:          0       1       0       0
  2823 ;;      Totals:         0       4       0       0
  2824 ;;Total ram usage:        4 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    3
  2827 ;; This function calls:
  2828 ;;		__private_parallel_lcd_WriteByte
  2829 ;; This function is called by:
  2830 ;;		_main
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           
  2835                           ;psect for function __parallel_lcd_WriteString
  2836  0EC5                     __parallel_lcd_WriteString:	
  2837                           
  2838                           ;incstack = 0
  2839                           ; Regs used in __parallel_lcd_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2840                           ;__parallel_lcd_WriteString@position stored from wreg
  2841  0EC5  0020               	movlb	0	; select bank0
  2842  0EC6  00A6               	movwf	__parallel_lcd_WriteString@position
  2843                           
  2844                           ;parallel_LCD.h: 64: _private_parallel_lcd_WriteByte( position , 0 ) ;
  2845  0EC7  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2846  0EC8  0826               	movf	__parallel_lcd_WriteString@position,w
  2847  0EC9  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  2848  0ECC                     l1662:	
  2849                           ;parallel_LCD.h: 65: while ( *stringPtr ) {
  2850                           
  2851  0ECC  0020               	movlb	0	; select bank0
  2852  0ECD  0823               	movf	__parallel_lcd_WriteString@stringPtr,w
  2853  0ECE  0084               	movwf	4
  2854  0ECF  0824               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  2855  0ED0  0085               	movwf	5
  2856  0ED1  0012               	moviw fsr0++
  2857  0ED2  1903               	btfsc	3,2
  2858  0ED3  0008               	return
  2859                           
  2860                           ;parallel_LCD.h: 66: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  2861  0ED4  0020               	movlb	0	; select bank0
  2862  0ED5  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2863  0ED6  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2864  0ED7  0823               	movf	__parallel_lcd_WriteString@stringPtr,w
  2865  0ED8  0084               	movwf	4
  2866  0ED9  0824               	movf	__parallel_lcd_WriteString@stringPtr+1,w
  2867  0EDA  0085               	movwf	5
  2868  0EDB  0800               	movf	0,w	;code access
  2869  0EDC  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  2870  0EDF  3001               	movlw	1
  2871  0EE0  0020               	movlb	0	; select bank0
  2872  0EE1  07A3               	addwf	__parallel_lcd_WriteString@stringPtr,f
  2873  0EE2  3000               	movlw	0
  2874  0EE3  3DA4               	addwfc	__parallel_lcd_WriteString@stringPtr+1,f
  2875  0EE4  2ECC               	goto	l1662
  2876  0EE5                     __end_of__parallel_lcd_WriteString:	
  2877                           
  2878                           	psect	text4
  2879  0E53                     __ptext4:	
  2880 ;; *************** function __parallel_lcd_WriteCharacter *****************
  2881 ;; Defined at:
  2882 ;;		line 56 in file "src/../../_Common/parallel_LCD.h"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  position        1    wreg     unsigned char 
  2885 ;;  character       1    3[BANK0 ] unsigned char 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  position        1    4[BANK0 ] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;		None               void
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0, pclath, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2897 ;;      Params:         0       1       0       0
  2898 ;;      Locals:         0       1       0       0
  2899 ;;      Temps:          0       0       0       0
  2900 ;;      Totals:         0       2       0       0
  2901 ;;Total ram usage:        2 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    3
  2904 ;; This function calls:
  2905 ;;		__private_parallel_lcd_WriteByte
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           
  2912                           ;psect for function __parallel_lcd_WriteCharacter
  2913  0E53                     __parallel_lcd_WriteCharacter:	
  2914                           
  2915                           ;incstack = 0
  2916                           ; Regs used in __parallel_lcd_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  2917                           ;__parallel_lcd_WriteCharacter@position stored from wreg
  2918  0E53  0020               	movlb	0	; select bank0
  2919  0E54  00A4               	movwf	__parallel_lcd_WriteCharacter@position
  2920                           
  2921                           ;parallel_LCD.h: 57: _private_parallel_lcd_WriteByte( position , 0 ) ;
  2922  0E55  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2923  0E56  0824               	movf	__parallel_lcd_WriteCharacter@position,w
  2924  0E57  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  2925                           
  2926                           ;parallel_LCD.h: 58: _private_parallel_lcd_WriteByte( character , 1 ) ;
  2927  0E5A  0020               	movlb	0	; select bank0
  2928  0E5B  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2929  0E5C  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2930  0E5D  0823               	movf	__parallel_lcd_WriteCharacter@character,w
  2931  0E5E  318E  26A8         	fcall	__private_parallel_lcd_WriteByte
  2932  0E60  0008               	return
  2933  0E61                     __end_of__parallel_lcd_WriteCharacter:	
  2934                           
  2935                           	psect	text5
  2936  0EE5                     __ptext5:	
  2937 ;; *************** function __parallel_lcd_SetCgram *****************
  2938 ;; Defined at:
  2939 ;;		line 109 in file "src/../../_Common/parallel_LCD.h"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  charCode        1    wreg     unsigned char 
  2942 ;;  bitmap          2    3[BANK0 ] PTR const unsigned char 
  2943 ;;		 -> CURSOR_BITMAP(8), 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  charCode        1    6[BANK0 ] unsigned char 
  2946 ;;  i               1    7[BANK0 ] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;		None               void
  2949 ;; Registers used:
  2950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2956 ;;      Params:         0       2       0       0
  2957 ;;      Locals:         0       2       0       0
  2958 ;;      Temps:          0       1       0       0
  2959 ;;      Totals:         0       5       0       0
  2960 ;;Total ram usage:        5 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    3
  2963 ;; This function calls:
  2964 ;;		__private_parallel_lcd_WriteByte
  2965 ;; This function is called by:
  2966 ;;		_main
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           
  2971                           ;psect for function __parallel_lcd_SetCgram
  2972  0EE5                     __parallel_lcd_SetCgram:	
  2973                           
  2974                           ;incstack = 0
  2975                           ; Regs used in __parallel_lcd_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2976                           ;__parallel_lcd_SetCgram@charCode stored from wreg
  2977  0EE5  0020               	movlb	0	; select bank0
  2978  0EE6  00A6               	movwf	__parallel_lcd_SetCgram@charCode
  2979                           
  2980                           ;parallel_LCD.h: 110: _private_parallel_lcd_WriteByte( ( ( charCode << 3 ) & 0b00111111 
      +                          ) | 0b01000000 , 0 ) ;
  2981  0EE7  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2982  0EE8  0826               	movf	__parallel_lcd_SetCgram@charCode,w
  2983  0EE9  00A5               	movwf	??__parallel_lcd_SetCgram
  2984  0EEA  3002               	movlw	2
  2985  0EEB                     u1385:	
  2986  0EEB  35A5               	lslf	??__parallel_lcd_SetCgram,f
  2987  0EEC  3EFF               	addlw	-1
  2988  0EED  1D03               	skipz
  2989  0EEE  2EEB               	goto	u1385
  2990  0EEF  3525               	lslf	??__parallel_lcd_SetCgram,w
  2991  0EF0  393F               	andlw	63
  2992  0EF1  3840               	iorlw	64
  2993  0EF2  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  2994                           
  2995                           ;parallel_LCD.h: 111: for ( uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  2996  0EF5  0020               	movlb	0	; select bank0
  2997  0EF6  01A7               	clrf	__parallel_lcd_SetCgram@i
  2998  0EF7                     L7:	
  2999  0EF7  3008               	movlw	8
  3000  0EF8  0627               	xorwf	__parallel_lcd_SetCgram@i,w
  3001  0EF9  1903               	btfsc	3,2
  3002  0EFA  0008               	return
  3003                           
  3004                           ;parallel_LCD.h: 112: _private_parallel_lcd_WriteByte( *bitmap , 1 ) ;
  3005  0EFB  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3006  0EFC  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  3007  0EFD  0823               	movf	__parallel_lcd_SetCgram@bitmap,w
  3008  0EFE  0084               	movwf	4
  3009  0EFF  0824               	movf	__parallel_lcd_SetCgram@bitmap+1,w
  3010  0F00  0085               	movwf	5
  3011  0F01  0800               	movf	0,w	;code access
  3012  0F02  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  3013  0F05  3001               	movlw	1
  3014  0F06  0020               	movlb	0	; select bank0
  3015  0F07  00A5               	movwf	??__parallel_lcd_SetCgram
  3016  0F08  0825               	movf	??__parallel_lcd_SetCgram,w
  3017  0F09  07A7               	addwf	__parallel_lcd_SetCgram@i,f
  3018  0F0A  3001               	movlw	1
  3019  0F0B  07A3               	addwf	__parallel_lcd_SetCgram@bitmap,f
  3020  0F0C  3000               	movlw	0
  3021  0F0D  3DA4               	addwfc	__parallel_lcd_SetCgram@bitmap+1,f
  3022  0F0E  2EF7               	goto	L7
  3023  0F0F                     __end_of__parallel_lcd_SetCgram:	
  3024                           
  3025                           	psect	text6
  3026  0E77                     __ptext6:	
  3027 ;; *************** function __parallel_lcd_Initialize *****************
  3028 ;; Defined at:
  3029 ;;		line 47 in file "src/../../_Common/parallel_LCD.h"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;		None
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;		None
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3043 ;;      Params:         0       0       0       0
  3044 ;;      Locals:         0       0       0       0
  3045 ;;      Temps:          0       0       0       0
  3046 ;;      Totals:         0       0       0       0
  3047 ;;Total ram usage:        0 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    3
  3050 ;; This function calls:
  3051 ;;		__private_parallel_lcd_WriteByte
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           
  3058                           ;psect for function __parallel_lcd_Initialize
  3059  0E77                     __parallel_lcd_Initialize:	
  3060                           
  3061                           ;parallel_LCD.h: 48: _private_parallel_lcd_WriteByte( 0x20 | 0x10 | 0x08 | 0x00 , 0 ) ;
  3062                           
  3063                           ;incstack = 0
  3064                           ; Regs used in __parallel_lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3065  0E77  0020               	movlb	0	; select bank0
  3066  0E78  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3067  0E79  3038               	movlw	56
  3068  0E7A  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  3069                           
  3070                           ;parallel_LCD.h: 49: _private_parallel_lcd_WriteByte( 0x08 | 0x04 , 0 ) ;
  3071  0E7D  0020               	movlb	0	; select bank0
  3072  0E7E  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3073  0E7F  300C               	movlw	12
  3074  0E80  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  3075                           
  3076                           ;parallel_LCD.h: 50: _private_parallel_lcd_WriteByte( 0x10 | 0x00 | 0x00 , 0 ) ;
  3077  0E83  0020               	movlb	0	; select bank0
  3078  0E84  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3079  0E85  3010               	movlw	16
  3080  0E86  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  3081                           
  3082                           ;parallel_LCD.h: 51: _private_parallel_lcd_WriteByte( 0x04 | 0x02 | 0x00 , 0 ) ;
  3083  0E89  0020               	movlb	0	; select bank0
  3084  0E8A  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3085  0E8B  3006               	movlw	6
  3086  0E8C  318E  26A8         	fcall	__private_parallel_lcd_WriteByte
  3087  0E8E  0008               	return
  3088  0E8F                     __end_of__parallel_lcd_Initialize:	
  3089                           
  3090                           	psect	text7
  3091  06E4                     __ptext7:	
  3092 ;; *************** function __parallel_lcd_ClearRow *****************
  3093 ;; Defined at:
  3094 ;;		line 93 in file "src/../../_Common/parallel_LCD.h"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  rowSelect       1    wreg     unsigned char 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  rowSelect       1    4[BANK0 ] unsigned char 
  3099 ;;  i               1    5[BANK0 ] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;		None               void
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0, pclath, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3109 ;;      Params:         0       0       0       0
  3110 ;;      Locals:         0       2       0       0
  3111 ;;      Temps:          0       1       0       0
  3112 ;;      Totals:         0       3       0       0
  3113 ;;Total ram usage:        3 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    3
  3116 ;; This function calls:
  3117 ;;		__private_parallel_lcd_WriteByte
  3118 ;; This function is called by:
  3119 ;;		_main
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function __parallel_lcd_ClearRow
  3125  06E4                     __parallel_lcd_ClearRow:	
  3126                           
  3127                           ;incstack = 0
  3128                           ; Regs used in __parallel_lcd_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  3129                           ;__parallel_lcd_ClearRow@rowSelect stored from wreg
  3130  06E4  0020               	movlb	0	; select bank0
  3131  06E5  00A4               	movwf	__parallel_lcd_ClearRow@rowSelect
  3132                           
  3133                           ;parallel_LCD.h: 94: _private_parallel_lcd_WriteByte( rowSelect & 0xF0 , 0 ) ;
  3134  06E6  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3135  06E7  0824               	movf	__parallel_lcd_ClearRow@rowSelect,w
  3136  06E8  39F0               	andlw	240
  3137  06E9  318E  26A8  3186   	fcall	__private_parallel_lcd_WriteByte
  3138                           
  3139                           ;parallel_LCD.h: 95: for ( uint08_t i = 0 ; i != 16 ; i++ )
  3140  06EC  0020               	movlb	0	; select bank0
  3141  06ED  01A5               	clrf	__parallel_lcd_ClearRow@i
  3142  06EE                     L8:	
  3143  06EE  3010               	movlw	16
  3144  06EF  0625               	xorwf	__parallel_lcd_ClearRow@i,w
  3145  06F0  1903               	btfsc	3,2
  3146  06F1  0008               	return
  3147                           
  3148                           ;parallel_LCD.h: 96: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  3149  06F2  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3150  06F3  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  3151  06F4  3020               	movlw	32
  3152  06F5  318E  26A8  3186   	fcall	__private_parallel_lcd_WriteByte
  3153  06F8  3001               	movlw	1
  3154  06F9  0020               	movlb	0	; select bank0
  3155  06FA  00A3               	movwf	??__parallel_lcd_ClearRow
  3156  06FB  0823               	movf	??__parallel_lcd_ClearRow,w
  3157  06FC  07A5               	addwf	__parallel_lcd_ClearRow@i,f
  3158  06FD  2EEE               	goto	L8
  3159  06FE                     __end_of__parallel_lcd_ClearRow:	
  3160                           
  3161                           	psect	text8
  3162  0E8F                     __ptext8:	
  3163 ;; *************** function __parallel_lcd_ClearPartial *****************
  3164 ;; Defined at:
  3165 ;;		line 101 in file "src/../../_Common/parallel_LCD.h"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  position        1    wreg     unsigned char 
  3168 ;;  length          1    3[BANK0 ] unsigned char 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  position        1    5[BANK0 ] unsigned char 
  3171 ;;  i               1    6[BANK0 ] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;		None               void
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, pclath, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3181 ;;      Params:         0       1       0       0
  3182 ;;      Locals:         0       2       0       0
  3183 ;;      Temps:          0       1       0       0
  3184 ;;      Totals:         0       4       0       0
  3185 ;;Total ram usage:        4 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		__private_parallel_lcd_WriteByte
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function __parallel_lcd_ClearPartial
  3197  0E8F                     __parallel_lcd_ClearPartial:	
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in __parallel_lcd_ClearPartial: [wreg+status,2+status,0+pclath+cstack]
  3201                           ;__parallel_lcd_ClearPartial@position stored from wreg
  3202  0E8F  0020               	movlb	0	; select bank0
  3203  0E90  00A5               	movwf	__parallel_lcd_ClearPartial@position
  3204                           
  3205                           ;parallel_LCD.h: 102: _private_parallel_lcd_WriteByte( position , 0 ) ;
  3206  0E91  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3207  0E92  0825               	movf	__parallel_lcd_ClearPartial@position,w
  3208  0E93  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  3209                           
  3210                           ;parallel_LCD.h: 103: for ( uint08_t i = 0 ; i != length ; i++ )
  3211  0E96  0020               	movlb	0	; select bank0
  3212  0E97  01A6               	clrf	__parallel_lcd_ClearPartial@i
  3213  0E98                     l1708:	
  3214  0E98  0826               	movf	__parallel_lcd_ClearPartial@i,w
  3215  0E99  0623               	xorwf	__parallel_lcd_ClearPartial@length,w
  3216  0E9A  1903               	btfsc	3,2
  3217  0E9B  0008               	return
  3218                           
  3219                           ;parallel_LCD.h: 104: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  3220  0E9C  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3221  0E9D  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  3222  0E9E  3020               	movlw	32
  3223  0E9F  318E  26A8  318E   	fcall	__private_parallel_lcd_WriteByte
  3224  0EA2  3001               	movlw	1
  3225  0EA3  0020               	movlb	0	; select bank0
  3226  0EA4  00A4               	movwf	??__parallel_lcd_ClearPartial
  3227  0EA5  0824               	movf	??__parallel_lcd_ClearPartial,w
  3228  0EA6  07A6               	addwf	__parallel_lcd_ClearPartial@i,f
  3229  0EA7  2E98               	goto	l1708
  3230  0EA8                     __end_of__parallel_lcd_ClearPartial:	
  3231                           
  3232                           	psect	text9
  3233  0EA8                     __ptext9:	
  3234 ;; *************** function __private_parallel_lcd_WriteByte *****************
  3235 ;; Defined at:
  3236 ;;		line 130 in file "src/../../_Common/parallel_LCD.h"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  data            1    wreg     unsigned char 
  3239 ;;  r               1    0[BANK0 ] unsigned char 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  data            1    2[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3251 ;;      Params:         0       1       0       0
  3252 ;;      Locals:         0       1       0       0
  3253 ;;      Temps:          0       1       0       0
  3254 ;;      Totals:         0       3       0       0
  3255 ;;Total ram usage:        3 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    2
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		__parallel_lcd_Initialize
  3262 ;;		__parallel_lcd_WriteCharacter
  3263 ;;		__parallel_lcd_WriteString
  3264 ;;		__parallel_lcd_WriteStringClearing
  3265 ;;		__parallel_lcd_ClearRow
  3266 ;;		__parallel_lcd_ClearPartial
  3267 ;;		__parallel_lcd_SetCgram
  3268 ;;		__parallel_lcd_WriteHexNumber
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           
  3273                           ;psect for function __private_parallel_lcd_WriteByte
  3274  0EA8                     __private_parallel_lcd_WriteByte:	
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in __private_parallel_lcd_WriteByte: [wreg+status,2+status,0]
  3278                           ;__private_parallel_lcd_WriteByte@data stored from wreg
  3279  0EA8  0020               	movlb	0	; select bank0
  3280  0EA9  00A2               	movwf	__private_parallel_lcd_WriteByte@data
  3281                           
  3282                           ;parallel_LCD.h: 131: _delay((unsigned long)((40)*(1000000L/4000000.0))); ;
  3283  0EAA  3003               	movlw	3
  3284  0EAB  00A1               	movwf	??__private_parallel_lcd_WriteByte
  3285  0EAC                     u2527:	
  3286  0EAC  0BA1               	decfsz	??__private_parallel_lcd_WriteByte,f
  3287  0EAD  2EAC               	goto	u2527
  3288                           
  3289                           ;parallel_LCD.h: 132: LATC=data; ;
  3290  0EAE  0020               	movlb	0	; select bank0
  3291  0EAF  0822               	movf	__private_parallel_lcd_WriteByte@data,w
  3292  0EB0  0022               	movlb	2	; select bank2
  3293  0EB1  008E               	movwf	14	;volatile
  3294                           
  3295                           ;parallel_LCD.h: 133: LATBbits.LATB7=r&0x01; ;
  3296  0EB2  0020               	movlb	0	; select bank0
  3297  0EB3  0820               	movf	__private_parallel_lcd_WriteByte@r,w
  3298  0EB4  3901               	andlw	1
  3299  0EB5  00A1               	movwf	??__private_parallel_lcd_WriteByte
  3300  0EB6  0CA1               	rrf	??__private_parallel_lcd_WriteByte,f
  3301  0EB7  0CA1               	rrf	??__private_parallel_lcd_WriteByte,f
  3302  0EB8  0022               	movlb	2	; select bank2
  3303  0EB9  080D               	movf	13,w	;volatile
  3304  0EBA  0020               	movlb	0	; select bank0
  3305  0EBB  0621               	xorwf	??__private_parallel_lcd_WriteByte,w
  3306  0EBC  397F               	andlw	-129
  3307  0EBD  0621               	xorwf	??__private_parallel_lcd_WriteByte,w
  3308  0EBE  0022               	movlb	2	; select bank2
  3309  0EBF  008D               	movwf	13	;volatile
  3310                           
  3311                           ;parallel_LCD.h: 134: LATBbits.LATB5=1;__nop();LATBbits.LATB5=0; ;
  3312  0EC0  168D               	bsf	13,5	;volatile
  3313  0EC1  0000               	nop
  3314  0EC2  0022               	movlb	2	; select bank2
  3315  0EC3  128D               	bcf	13,5	;volatile
  3316  0EC4  0008               	return
  3317  0EC5                     __end_of__private_parallel_lcd_WriteByte:	
  3318                           
  3319                           	psect	text10
  3320  07B6                     __ptext10:	
  3321 ;; *************** function __ds1307_SetClock *****************
  3322 ;; Defined at:
  3323 ;;		line 123 in file "src/../../_Common/ds1307.h"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  date            1    wreg     PTR struct .
  3326 ;;		 -> dateCurrent(7), 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  date            1    1[BANK0 ] PTR struct .
  3329 ;;		 -> dateCurrent(7), 
  3330 ;;  i               1    2[BANK0 ] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      unsigned char 
  3333 ;; Registers used:
  3334 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3340 ;;      Params:         0       0       0       0
  3341 ;;      Locals:         0       2       0       0
  3342 ;;      Temps:          0       1       0       0
  3343 ;;      Totals:         0       3       0       0
  3344 ;;Total ram usage:        3 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    2
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function __ds1307_SetClock
  3356  07B6                     __ds1307_SetClock:	
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in __ds1307_SetClock: [wreg+fsr1l+fsr1h+status,2+status,0]
  3360                           ;__ds1307_SetClock@date stored from wreg
  3361  07B6  0020               	movlb	0	; select bank0
  3362  07B7  00A1               	movwf	__ds1307_SetClock@date
  3363                           
  3364                           ;ds1307.h: 126: SSP1CON2bits.SEN = 1 ;
  3365  07B8  0024               	movlb	4	; select bank4
  3366  07B9  1416               	bsf	22,0	;volatile
  3367  07BA                     l208:	
  3368                           ;ds1307.h: 127: while ( SSP1CON2bits.SEN ) ;
  3369                           
  3370  07BA  1816               	btfsc	22,0	;volatile
  3371  07BB  2FBA               	goto	l208
  3372                           
  3373                           ;ds1307.h: 128: SSP1IF = 0 ;
  3374  07BC  0020               	movlb	0	; select bank0
  3375  07BD  1191               	bcf	17,3	;volatile
  3376                           
  3377                           ;ds1307.h: 131: SSP1BUF = 0xD0 ;
  3378  07BE  30D0               	movlw	208
  3379  07BF  0024               	movlb	4	; select bank4
  3380  07C0  0091               	movwf	17	;volatile
  3381  07C1                     l211:	
  3382                           ;ds1307.h: 132: while ( !SSP1IF ) ;
  3383                           
  3384  07C1  0020               	movlb	0	; select bank0
  3385  07C2  1D91               	btfss	17,3	;volatile
  3386  07C3  2FC1               	goto	l211
  3387                           
  3388                           ;ds1307.h: 133: SSP1IF = 0 ;
  3389  07C4  1191               	bcf	17,3	;volatile
  3390                           
  3391                           ;ds1307.h: 134: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  3392  07C5  0024               	movlb	4	; select bank4
  3393  07C6  1B16               	btfsc	22,6	;volatile
  3394  07C7  0008               	return
  3395                           
  3396                           ;ds1307.h: 137: SSP1BUF = 0x00 ;
  3397                           
  3398                           ;	Return value of __ds1307_SetClock is never used
  3399  07C8  0191               	clrf	17	;volatile
  3400  07C9                     l216:	
  3401                           ;ds1307.h: 138: while ( !SSP1IF ) ;
  3402                           
  3403  07C9  0020               	movlb	0	; select bank0
  3404  07CA  1D91               	btfss	17,3	;volatile
  3405  07CB  2FC9               	goto	l216
  3406                           
  3407                           ;ds1307.h: 139: SSP1IF = 0 ;
  3408  07CC  1191               	bcf	17,3	;volatile
  3409                           
  3410                           ;ds1307.h: 140: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  3411  07CD  0024               	movlb	4	; select bank4
  3412  07CE  1B16               	btfsc	22,6	;volatile
  3413  07CF  0008               	return
  3414                           
  3415                           ;ds1307.h: 142: for ( uint08_t i = 0 ; i < sizeof ( StDateTime ) ; i++ ) {
  3416                           
  3417                           ;	Return value of __ds1307_SetClock is never used
  3418  07D0  0020               	movlb	0	; select bank0
  3419  07D1  01A2               	clrf	__ds1307_SetClock@i
  3420  07D2  3007               	movlw	7
  3421  07D3  0222               	subwf	__ds1307_SetClock@i,w
  3422  07D4  1803               	btfsc	3,0
  3423  07D5  2FEF               	goto	l221
  3424  07D6                     l1838:	
  3425                           
  3426                           ;ds1307.h: 144: SSP1BUF = date->array[i] ;
  3427  07D6  0822               	movf	__ds1307_SetClock@i,w
  3428  07D7  0721               	addwf	__ds1307_SetClock@date,w
  3429  07D8  00A0               	movwf	??__ds1307_SetClock
  3430  07D9  0820               	movf	??__ds1307_SetClock,w
  3431  07DA  0086               	movwf	6
  3432  07DB  0187               	clrf	7
  3433  07DC  0801               	movf	1,w
  3434  07DD  0024               	movlb	4	; select bank4
  3435  07DE  0091               	movwf	17	;volatile
  3436  07DF                     l222:	
  3437                           ;ds1307.h: 145: while ( !SSP1IF ) ;
  3438                           
  3439  07DF  0020               	movlb	0	; select bank0
  3440  07E0  1D91               	btfss	17,3	;volatile
  3441  07E1  2FDF               	goto	l222
  3442                           
  3443                           ;ds1307.h: 146: SSP1IF = 0 ;
  3444  07E2  1191               	bcf	17,3	;volatile
  3445                           
  3446                           ;ds1307.h: 147: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  3447  07E3  0024               	movlb	4	; select bank4
  3448  07E4  1B16               	btfsc	22,6	;volatile
  3449  07E5  0008               	return
  3450                           
  3451                           ;	Return value of __ds1307_SetClock is never used
  3452  07E6  3001               	movlw	1
  3453  07E7  0020               	movlb	0	; select bank0
  3454  07E8  00A0               	movwf	??__ds1307_SetClock
  3455  07E9  0820               	movf	??__ds1307_SetClock,w
  3456  07EA  07A2               	addwf	__ds1307_SetClock@i,f
  3457  07EB  3007               	movlw	7
  3458  07EC  0222               	subwf	__ds1307_SetClock@i,w
  3459  07ED  1C03               	skipc
  3460  07EE  2FD6               	goto	l1838
  3461  07EF                     l221:	
  3462                           
  3463                           ;ds1307.h: 148: }
  3464                           ;ds1307.h: 151: SSP1CON2bits.PEN = 1 ;
  3465  07EF  0024               	movlb	4	; select bank4
  3466  07F0  1516               	bsf	22,2	;volatile
  3467  07F1                     l226:	
  3468                           ;ds1307.h: 152: while ( SSP1CON2bits.PEN ) ;
  3469                           
  3470  07F1  1D16               	btfss	22,2	;volatile
  3471                           
  3472                           ;ds1307.h: 154: return 0 ;
  3473                           ;	Return value of __ds1307_SetClock is never used
  3474  07F2  0008               	return
  3475  07F3  2FF1               	goto	l226
  3476  07F4                     __end_of__ds1307_SetClock:	
  3477                           
  3478                           	psect	text11
  3479  0F9F                     __ptext11:	
  3480 ;; *************** function __ds1307_GetData *****************
  3481 ;; Defined at:
  3482 ;;		line 74 in file "src/../../_Common/ds1307.h"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  date            1    wreg     PTR struct .
  3485 ;;		 -> dateCurrent(7), dateTimer(7), 
  3486 ;;  ramAddress      1    0[BANK0 ] unsigned char 
  3487 ;;  length          1    1[BANK0 ] unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  date            1    4[BANK0 ] PTR struct .
  3490 ;;		 -> dateCurrent(7), dateTimer(7), 
  3491 ;;  dataCount       1    5[BANK0 ] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      unsigned char 
  3494 ;; Registers used:
  3495 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3501 ;;      Params:         0       2       0       0
  3502 ;;      Locals:         0       2       0       0
  3503 ;;      Temps:          0       2       0       0
  3504 ;;      Totals:         0       6       0       0
  3505 ;;Total ram usage:        6 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    2
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function __ds1307_GetData
  3517  0F9F                     __ds1307_GetData:	
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in __ds1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3521                           ;__ds1307_GetData@date stored from wreg
  3522  0F9F  0020               	movlb	0	; select bank0
  3523  0FA0  00A4               	movwf	__ds1307_GetData@date
  3524                           
  3525                           ;ds1307.h: 77: SSP1CON2bits.SEN = 1 ;
  3526  0FA1  0024               	movlb	4	; select bank4
  3527  0FA2  1416               	bsf	22,0	;volatile
  3528  0FA3                     l175:	
  3529                           ;ds1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  3530                           
  3531  0FA3  1816               	btfsc	22,0	;volatile
  3532  0FA4  2FA3               	goto	l175
  3533                           
  3534                           ;ds1307.h: 79: SSP1IF = 0 ;
  3535  0FA5  0020               	movlb	0	; select bank0
  3536  0FA6  1191               	bcf	17,3	;volatile
  3537                           
  3538                           ;ds1307.h: 82: SSP1BUF = 0xD0 ;
  3539  0FA7  30D0               	movlw	208
  3540  0FA8  0024               	movlb	4	; select bank4
  3541  0FA9  0091               	movwf	17	;volatile
  3542  0FAA                     l178:	
  3543                           ;ds1307.h: 83: while ( !SSP1IF ) ;
  3544                           
  3545  0FAA  0020               	movlb	0	; select bank0
  3546  0FAB  1D91               	btfss	17,3	;volatile
  3547  0FAC  2FAA               	goto	l178
  3548                           
  3549                           ;ds1307.h: 84: SSP1IF = 0 ;
  3550  0FAD  1191               	bcf	17,3	;volatile
  3551                           
  3552                           ;ds1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  3553  0FAE  0024               	movlb	4	; select bank4
  3554  0FAF  1F16               	btfss	22,6	;volatile
  3555  0FB0  2FB3               	goto	l1790
  3556  0FB1  3001               	movlw	1
  3557  0FB2  0008               	return
  3558  0FB3                     l1790:	
  3559                           
  3560                           ;ds1307.h: 88: SSP1BUF = ramAddress ;
  3561  0FB3  0020               	movlb	0	; select bank0
  3562  0FB4  0820               	movf	__ds1307_GetData@ramAddress,w
  3563  0FB5  0024               	movlb	4	; select bank4
  3564  0FB6  0091               	movwf	17	;volatile
  3565  0FB7                     l183:	
  3566                           ;ds1307.h: 89: while ( !SSP1IF ) ;
  3567                           
  3568  0FB7  0020               	movlb	0	; select bank0
  3569  0FB8  1D91               	btfss	17,3	;volatile
  3570  0FB9  2FB7               	goto	l183
  3571                           
  3572                           ;ds1307.h: 90: SSP1IF = 0 ;
  3573  0FBA  1191               	bcf	17,3	;volatile
  3574                           
  3575                           ;ds1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  3576  0FBB  0024               	movlb	4	; select bank4
  3577  0FBC  1F16               	btfss	22,6	;volatile
  3578  0FBD  2FC0               	goto	l186
  3579  0FBE  3002               	movlw	2
  3580  0FBF  0008               	return
  3581  0FC0                     l186:	
  3582                           
  3583                           ;ds1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  3584  0FC0  1496               	bsf	22,1	;volatile
  3585  0FC1                     l187:	
  3586                           ;ds1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  3587                           
  3588  0FC1  1896               	btfsc	22,1	;volatile
  3589  0FC2  2FC1               	goto	l187
  3590                           
  3591                           ;ds1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  3592  0FC3  30D1               	movlw	209
  3593  0FC4  0091               	movwf	17	;volatile
  3594  0FC5                     l190:	
  3595                           ;ds1307.h: 98: while ( !SSP1IF ) ;
  3596                           
  3597  0FC5  0020               	movlb	0	; select bank0
  3598  0FC6  1D91               	btfss	17,3	;volatile
  3599  0FC7  2FC5               	goto	l190
  3600                           
  3601                           ;ds1307.h: 99: SSP1IF = 0 ;
  3602  0FC8  1191               	bcf	17,3	;volatile
  3603                           
  3604                           ;ds1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  3605  0FC9  0024               	movlb	4	; select bank4
  3606  0FCA  1F16               	btfss	22,6	;volatile
  3607  0FCB  2FCE               	goto	l1802
  3608  0FCC  3003               	movlw	3
  3609  0FCD  0008               	return
  3610  0FCE                     l1802:	
  3611                           
  3612                           ;ds1307.h: 103: uint08_t dataCount = 0 ;
  3613  0FCE  0020               	movlb	0	; select bank0
  3614  0FCF  01A5               	clrf	__ds1307_GetData@dataCount
  3615  0FD0                     l1816:	
  3616                           ;ds1307.h: 104: while ( dataCount < length ) {
  3617                           
  3618  0FD0  0020               	movlb	0	; select bank0
  3619  0FD1  0821               	movf	__ds1307_GetData@length,w
  3620  0FD2  0225               	subwf	__ds1307_GetData@dataCount,w
  3621  0FD3  1803               	btfsc	3,0
  3622  0FD4  2FFA               	goto	l202
  3623                           
  3624                           ;ds1307.h: 105: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  3625  0FD5  30A6               	movlw	166
  3626  0FD6  00A2               	movwf	??__ds1307_GetData
  3627  0FD7                     u2537:	
  3628  0FD7  0BA2               	decfsz	??__ds1307_GetData,f
  3629  0FD8  2FD7               	goto	u2537
  3630  0FD9  0000               	nop
  3631                           
  3632                           ;ds1307.h: 106: SSP1CON2bits.RCEN = 1 ;
  3633  0FDA  0024               	movlb	4	; select bank4
  3634  0FDB  1596               	bsf	22,3	;volatile
  3635  0FDC                     l196:	
  3636                           ;ds1307.h: 107: while ( SSP1CON2bits.RCEN ) ;
  3637                           
  3638  0FDC  1996               	btfsc	22,3	;volatile
  3639  0FDD  2FDC               	goto	l196
  3640  0FDE                     l199:	
  3641                           ;ds1307.h: 108: while ( !SSPSTATbits.BF ) ;
  3642                           
  3643  0FDE  1C14               	btfss	20,0	;volatile
  3644  0FDF  2FDE               	goto	l199
  3645                           
  3646                           ;ds1307.h: 109: date->array[ dataCount++ ] = SSP1BUF ;
  3647  0FE0  0811               	movf	17,w	;volatile
  3648  0FE1  0020               	movlb	0	; select bank0
  3649  0FE2  00A2               	movwf	??__ds1307_GetData
  3650  0FE3  0825               	movf	__ds1307_GetData@dataCount,w
  3651  0FE4  0724               	addwf	__ds1307_GetData@date,w
  3652  0FE5  00A3               	movwf	??__ds1307_GetData+1
  3653  0FE6  0823               	movf	??__ds1307_GetData+1,w
  3654  0FE7  0086               	movwf	6
  3655  0FE8  0187               	clrf	7
  3656  0FE9  0822               	movf	??__ds1307_GetData,w
  3657  0FEA  0081               	movwf	1
  3658  0FEB  3001               	movlw	1
  3659  0FEC  00A2               	movwf	??__ds1307_GetData
  3660  0FED  0822               	movf	??__ds1307_GetData,w
  3661  0FEE  07A5               	addwf	__ds1307_GetData@dataCount,f
  3662                           
  3663                           ;ds1307.h: 110: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  3664  0FEF  0825               	movf	__ds1307_GetData@dataCount,w
  3665  0FF0  0621               	xorwf	__ds1307_GetData@length,w
  3666  0FF1  1D03               	btfss	3,2
  3667  0FF2  2FF6               	goto	u1630
  3668  0FF3  0024               	movlb	4	; select bank4
  3669  0FF4  1696               	bsf	22,5	;volatile
  3670  0FF5  2FF8               	goto	l1814
  3671  0FF6                     u1630:	
  3672  0FF6  0024               	movlb	4	; select bank4
  3673  0FF7  1296               	bcf	22,5	;volatile
  3674  0FF8                     l1814:	
  3675                           
  3676                           ;ds1307.h: 111: SSP1CON2bits.ACKEN = 1 ;
  3677  0FF8  1616               	bsf	22,4	;volatile
  3678  0FF9  2FD0               	goto	l1816
  3679  0FFA                     l202:	
  3680                           
  3681                           ;ds1307.h: 112: }
  3682                           ;ds1307.h: 115: SSP1CON2bits.PEN = 1 ;
  3683  0FFA  0024               	movlb	4	; select bank4
  3684  0FFB  1516               	bsf	22,2	;volatile
  3685  0FFC                     l203:	
  3686                           ;ds1307.h: 116: while ( SSP1CON2bits.PEN ) ;
  3687                           
  3688  0FFC  1916               	btfsc	22,2	;volatile
  3689  0FFD  2FFC               	goto	l203
  3690                           
  3691                           ;ds1307.h: 118: return 0 ;
  3692  0FFE  3000               	movlw	0
  3693  0FFF  0008               	return
  3694  1000                     __end_of__ds1307_GetData:	
  3695                           
  3696                           	psect	text12
  3697  0632                     __ptext12:	
  3698 ;; *************** function __date_time_ConvertByteToTime *****************
  3699 ;; Defined at:
  3700 ;;		line 108 in file "src/../../_Common/date_time.h"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  dateTime        1    wreg     PTR struct .
  3703 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3704 ;;  string          1    0[BANK0 ] PTR unsigned char 
  3705 ;;		 -> main@string(17), 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  dateTime        1    3[BANK0 ] PTR struct .
  3708 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3709 ;; Return value:  Size  Location     Type
  3710 ;;		None               void
  3711 ;; Registers used:
  3712 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3718 ;;      Params:         0       1       0       0
  3719 ;;      Locals:         0       1       0       0
  3720 ;;      Temps:          0       2       0       0
  3721 ;;      Totals:         0       4       0       0
  3722 ;;Total ram usage:        4 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    2
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           
  3733                           ;psect for function __date_time_ConvertByteToTime
  3734  0632                     __date_time_ConvertByteToTime:	
  3735                           
  3736                           ;incstack = 0
  3737                           ; Regs used in __date_time_ConvertByteToTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  3738                           ;__date_time_ConvertByteToTime@dateTime stored from wreg
  3739  0632  0020               	movlb	0	; select bank0
  3740  0633  00A3               	movwf	__date_time_ConvertByteToTime@dateTime
  3741                           
  3742                           ;date_time.h: 110: string[8] = 0 ;
  3743  0634  0820               	movf	__date_time_ConvertByteToTime@string,w
  3744  0635  3E08               	addlw	8
  3745  0636  0086               	movwf	6
  3746  0637  0187               	clrf	7
  3747  0638  0181               	clrf	1
  3748                           
  3749                           ;date_time.h: 112: string[5] = ':' ;
  3750  0639  303A               	movlw	58
  3751  063A  00A1               	movwf	??__date_time_ConvertByteToTime
  3752  063B  0820               	movf	__date_time_ConvertByteToTime@string,w
  3753  063C  3E05               	addlw	5
  3754  063D  0086               	movwf	6
  3755  063E  0187               	clrf	7
  3756  063F  0821               	movf	??__date_time_ConvertByteToTime,w
  3757  0640  0081               	movwf	1
  3758                           
  3759                           ;date_time.h: 113: string[2] = ':' ;
  3760  0641  303A               	movlw	58
  3761  0642  00A1               	movwf	??__date_time_ConvertByteToTime
  3762  0643  0820               	movf	__date_time_ConvertByteToTime@string,w
  3763  0644  3E02               	addlw	2
  3764  0645  0086               	movwf	6
  3765  0646  0187               	clrf	7
  3766  0647  0821               	movf	??__date_time_ConvertByteToTime,w
  3767  0648  0081               	movwf	1
  3768                           
  3769                           ;date_time.h: 116: string[7] = ( dateTime->second & 0x0F ) | '0' ;
  3770  0649  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3771  064A  0086               	movwf	6
  3772  064B  0187               	clrf	7
  3773  064C  0801               	movf	1,w
  3774  064D  390F               	andlw	15
  3775  064E  3830               	iorlw	48
  3776  064F  00A1               	movwf	??__date_time_ConvertByteToTime
  3777  0650  0820               	movf	__date_time_ConvertByteToTime@string,w
  3778  0651  3E07               	addlw	7
  3779  0652  0086               	movwf	6
  3780  0653  0187               	clrf	7
  3781  0654  0821               	movf	??__date_time_ConvertByteToTime,w
  3782  0655  0081               	movwf	1
  3783                           
  3784                           ;date_time.h: 117: string[6] = ( dateTime->second >> 4 ) | '0' ;
  3785  0656  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3786  0657  0086               	movwf	6
  3787  0658  0187               	clrf	7
  3788  0659  0801               	movf	1,w
  3789  065A  00A1               	movwf	??__date_time_ConvertByteToTime
  3790  065B  3004               	movlw	4
  3791  065C                     u1445:	
  3792  065C  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3793  065D  0B89               	decfsz	9,f
  3794  065E  2E5C               	goto	u1445
  3795  065F  0821               	movf	??__date_time_ConvertByteToTime,w
  3796  0660  3830               	iorlw	48
  3797  0661  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3798  0662  0820               	movf	__date_time_ConvertByteToTime@string,w
  3799  0663  3E06               	addlw	6
  3800  0664  0086               	movwf	6
  3801  0665  0187               	clrf	7
  3802  0666  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3803  0667  0081               	movwf	1
  3804                           
  3805                           ;date_time.h: 119: string[4] = ( dateTime->minute & 0x0F ) | '0' ;
  3806  0668  0A23               	incf	__date_time_ConvertByteToTime@dateTime,w
  3807  0669  0086               	movwf	6
  3808  066A  0187               	clrf	7
  3809  066B  0801               	movf	1,w
  3810  066C  390F               	andlw	15
  3811  066D  3830               	iorlw	48
  3812  066E  00A1               	movwf	??__date_time_ConvertByteToTime
  3813  066F  0820               	movf	__date_time_ConvertByteToTime@string,w
  3814  0670  3E04               	addlw	4
  3815  0671  0086               	movwf	6
  3816  0672  0187               	clrf	7
  3817  0673  0821               	movf	??__date_time_ConvertByteToTime,w
  3818  0674  0081               	movwf	1
  3819                           
  3820                           ;date_time.h: 120: string[3] = ( dateTime->minute >> 4 ) | '0' ;
  3821  0675  0A23               	incf	__date_time_ConvertByteToTime@dateTime,w
  3822  0676  0086               	movwf	6
  3823  0677  0187               	clrf	7
  3824  0678  0801               	movf	1,w
  3825  0679  00A1               	movwf	??__date_time_ConvertByteToTime
  3826  067A  3004               	movlw	4
  3827  067B                     u1455:	
  3828  067B  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3829  067C  0B89               	decfsz	9,f
  3830  067D  2E7B               	goto	u1455
  3831  067E  0821               	movf	??__date_time_ConvertByteToTime,w
  3832  067F  3830               	iorlw	48
  3833  0680  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3834  0681  0820               	movf	__date_time_ConvertByteToTime@string,w
  3835  0682  3E03               	addlw	3
  3836  0683  0086               	movwf	6
  3837  0684  0187               	clrf	7
  3838  0685  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3839  0686  0081               	movwf	1
  3840                           
  3841                           ;date_time.h: 122: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  3842  0687  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3843  0688  3E02               	addlw	2
  3844  0689  0086               	movwf	6
  3845  068A  0187               	clrf	7
  3846  068B  0801               	movf	1,w
  3847  068C  390F               	andlw	15
  3848  068D  3830               	iorlw	48
  3849  068E  00A1               	movwf	??__date_time_ConvertByteToTime
  3850  068F  0A20               	incf	__date_time_ConvertByteToTime@string,w
  3851  0690  0086               	movwf	6
  3852  0691  0187               	clrf	7
  3853  0692  0821               	movf	??__date_time_ConvertByteToTime,w
  3854  0693  0081               	movwf	1
  3855                           
  3856                           ;date_time.h: 123: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  3857  0694  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3858  0695  3E02               	addlw	2
  3859  0696  0086               	movwf	6
  3860  0697  0187               	clrf	7
  3861  0698  0801               	movf	1,w
  3862  0699  00A1               	movwf	??__date_time_ConvertByteToTime
  3863  069A  3004               	movlw	4
  3864  069B                     u1465:	
  3865  069B  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3866  069C  0B89               	decfsz	9,f
  3867  069D  2E9B               	goto	u1465
  3868  069E  0821               	movf	??__date_time_ConvertByteToTime,w
  3869  069F  3830               	iorlw	48
  3870  06A0  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3871  06A1  0820               	movf	__date_time_ConvertByteToTime@string,w
  3872  06A2  0086               	movwf	6
  3873  06A3  0187               	clrf	7
  3874  06A4  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3875  06A5  0081               	movwf	1
  3876  06A6  0008               	return
  3877  06A7                     __end_of__date_time_ConvertByteToTime:	
  3878                           
  3879                           	psect	text13
  3880  0422                     __ptext13:	
  3881 ;; *************** function __date_time_ConvertByteToDiscrete *****************
  3882 ;; Defined at:
  3883 ;;		line 128 in file "src/../../_Common/date_time.h"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  dateTime        1    wreg     PTR struct .
  3886 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3887 ;;  string          1    0[BANK0 ] PTR unsigned char 
  3888 ;;		 -> main@string_664(4), 
  3889 ;;  select          1    1[BANK0 ] enum E4110
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;  dateTime        1    5[BANK0 ] PTR struct .
  3892 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;		None               void
  3895 ;; Registers used:
  3896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3902 ;;      Params:         0       2       0       0
  3903 ;;      Locals:         0       1       0       0
  3904 ;;      Temps:          0       3       0       0
  3905 ;;      Totals:         0       6       0       0
  3906 ;;Total ram usage:        6 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    2
  3909 ;; This function calls:
  3910 ;;		Nothing
  3911 ;; This function is called by:
  3912 ;;		_main
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function __date_time_ConvertByteToDiscrete
  3918  0422                     __date_time_ConvertByteToDiscrete:	
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in __date_time_ConvertByteToDiscrete: [wreg-fsr1h+status,2+status,0+pclath]
  3922                           ;__date_time_ConvertByteToDiscrete@dateTime stored from wreg
  3923  0422  0020               	movlb	0	; select bank0
  3924  0423  00A5               	movwf	__date_time_ConvertByteToDiscrete@dateTime
  3925                           
  3926                           ;date_time.h: 130: string[2] = 0 ;
  3927  0424  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3928  0425  3E02               	addlw	2
  3929  0426  0086               	movwf	6
  3930  0427  0187               	clrf	7
  3931  0428  0181               	clrf	1
  3932                           
  3933                           ;date_time.h: 132: switch ( select ) {
  3934  0429  2D38               	goto	l1776
  3935  042A                     l1754:	
  3936                           ;date_time.h: 133: case DATE_ITEM_YEAR:
  3937                           
  3938                           
  3939                           ;date_time.h: 134: string[1] = ( dateTime->year & 0x0F ) | '0' ;
  3940  042A  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3941  042B  3E06               	addlw	6
  3942  042C  0086               	movwf	6
  3943  042D  0187               	clrf	7
  3944  042E  0801               	movf	1,w
  3945  042F  390F               	andlw	15
  3946  0430  3830               	iorlw	48
  3947  0431  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3948  0432  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3949  0433  0086               	movwf	6
  3950  0434  0187               	clrf	7
  3951  0435  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3952  0436  0081               	movwf	1
  3953                           
  3954                           ;date_time.h: 135: string[0] = ( dateTime->year >> 4 ) | '0' ;
  3955  0437  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3956  0438  3E06               	addlw	6
  3957  0439  0086               	movwf	6
  3958  043A  0187               	clrf	7
  3959  043B  0801               	movf	1,w
  3960  043C  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3961  043D  3004               	movlw	4
  3962  043E                     u1475:	
  3963  043E  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3964  043F  0B89               	decfsz	9,f
  3965  0440  2C3E               	goto	u1475
  3966  0441  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3967  0442  3830               	iorlw	48
  3968  0443  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3969  0444  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3970  0445  0086               	movwf	6
  3971  0446  0187               	clrf	7
  3972  0447  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3973  0448  0081               	movwf	1
  3974                           
  3975                           ;date_time.h: 136: break ;
  3976  0449  0008               	return
  3977  044A                     l1756:	
  3978                           ;date_time.h: 137: case DATE_ITEM_MONTH:
  3979                           
  3980                           
  3981                           ;date_time.h: 138: string[1] = ( dateTime->month & 0x0F ) | '0' ;
  3982  044A  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3983  044B  3E05               	addlw	5
  3984  044C  0086               	movwf	6
  3985  044D  0187               	clrf	7
  3986  044E  0801               	movf	1,w
  3987  044F  390F               	andlw	15
  3988  0450  3830               	iorlw	48
  3989  0451  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3990  0452  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3991  0453  0086               	movwf	6
  3992  0454  0187               	clrf	7
  3993  0455  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3994  0456  0081               	movwf	1
  3995                           
  3996                           ;date_time.h: 139: string[0] = ( dateTime->month >> 4 ) | '0' ;
  3997  0457  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3998  0458  3E05               	addlw	5
  3999  0459  0086               	movwf	6
  4000  045A  0187               	clrf	7
  4001  045B  0801               	movf	1,w
  4002  045C  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4003  045D  3004               	movlw	4
  4004  045E                     u1485:	
  4005  045E  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4006  045F  0B89               	decfsz	9,f
  4007  0460  2C5E               	goto	u1485
  4008  0461  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4009  0462  3830               	iorlw	48
  4010  0463  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4011  0464  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4012  0465  0086               	movwf	6
  4013  0466  0187               	clrf	7
  4014  0467  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4015  0468  0081               	movwf	1
  4016                           
  4017                           ;date_time.h: 140: break ;
  4018  0469  0008               	return
  4019  046A                     l1758:	
  4020                           ;date_time.h: 141: case DATE_ITEM_DATE:
  4021                           
  4022                           
  4023                           ;date_time.h: 142: string[1] = ( dateTime->day & 0x0F ) | '0' ;
  4024  046A  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4025  046B  3E04               	addlw	4
  4026  046C  0086               	movwf	6
  4027  046D  0187               	clrf	7
  4028  046E  0801               	movf	1,w
  4029  046F  390F               	andlw	15
  4030  0470  3830               	iorlw	48
  4031  0471  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4032  0472  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4033  0473  0086               	movwf	6
  4034  0474  0187               	clrf	7
  4035  0475  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4036  0476  0081               	movwf	1
  4037                           
  4038                           ;date_time.h: 143: string[0] = ( dateTime->day >> 4 ) | '0' ;
  4039  0477  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4040  0478  3E04               	addlw	4
  4041  0479  0086               	movwf	6
  4042  047A  0187               	clrf	7
  4043  047B  0801               	movf	1,w
  4044  047C  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4045  047D  3004               	movlw	4
  4046  047E                     u1495:	
  4047  047E  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4048  047F  0B89               	decfsz	9,f
  4049  0480  2C7E               	goto	u1495
  4050  0481  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4051  0482  3830               	iorlw	48
  4052  0483  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4053  0484  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4054  0485  0086               	movwf	6
  4055  0486  0187               	clrf	7
  4056  0487  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4057  0488  0081               	movwf	1
  4058                           
  4059                           ;date_time.h: 144: break ;
  4060  0489  0008               	return
  4061  048A                     l1760:	
  4062                           ;date_time.h: 145: case DATE_ITEM_DAY_OF_WEEK:
  4063                           
  4064                           
  4065                           ;date_time.h: 146: string[0] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  4066  048A  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4067  048B  3E03               	addlw	3
  4068  048C  0086               	movwf	6
  4069  048D  0187               	clrf	7
  4070  048E  3501               	lslf	1,w
  4071  048F  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4072  0490  0086               	movwf	6
  4073  0491  0187               	clrf	7
  4074  0492  3F40               	moviw [0]fsr1
  4075  0493  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4076  0494  3F41               	moviw [1]fsr1
  4077  0495  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4078  0496  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4079  0497  0084               	movwf	4
  4080  0498  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4081  0499  0085               	movwf	5
  4082  049A  0800               	movf	0,w	;code access
  4083  049B  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  4084  049C  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4085  049D  0086               	movwf	6
  4086  049E  0187               	clrf	7
  4087  049F  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  4088  04A0  0081               	movwf	1
  4089                           
  4090                           ;date_time.h: 147: string[1] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  4091  04A1  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4092  04A2  3E03               	addlw	3
  4093  04A3  0086               	movwf	6
  4094  04A4  0187               	clrf	7
  4095  04A5  3501               	lslf	1,w
  4096  04A6  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4097  04A7  0086               	movwf	6
  4098  04A8  0187               	clrf	7
  4099  04A9  3F40               	moviw [0]fsr1
  4100  04AA  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4101  04AB  3F41               	moviw [1]fsr1
  4102  04AC  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4103  04AD  3001               	movlw	1
  4104  04AE  0722               	addwf	??__date_time_ConvertByteToDiscrete,w
  4105  04AF  0084               	movwf	4
  4106  04B0  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4107  04B1  1803               	skipnc
  4108  04B2  0A23               	incf	??__date_time_ConvertByteToDiscrete+1,w
  4109  04B3  0085               	movwf	5
  4110  04B4  0800               	movf	0,w	;code access
  4111  04B5  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  4112  04B6  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4113  04B7  0086               	movwf	6
  4114  04B8  0187               	clrf	7
  4115  04B9  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  4116  04BA  0081               	movwf	1
  4117                           
  4118                           ;date_time.h: 148: string[2] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  4119  04BB  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4120  04BC  3E03               	addlw	3
  4121  04BD  0086               	movwf	6
  4122  04BE  0187               	clrf	7
  4123  04BF  3501               	lslf	1,w
  4124  04C0  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4125  04C1  0086               	movwf	6
  4126  04C2  0187               	clrf	7
  4127  04C3  3F40               	moviw [0]fsr1
  4128  04C4  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4129  04C5  3F41               	moviw [1]fsr1
  4130  04C6  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4131  04C7  3002               	movlw	2
  4132  04C8  0722               	addwf	??__date_time_ConvertByteToDiscrete,w
  4133  04C9  0084               	movwf	4
  4134  04CA  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4135  04CB  1803               	skipnc
  4136  04CC  0A23               	incf	??__date_time_ConvertByteToDiscrete+1,w
  4137  04CD  0085               	movwf	5
  4138  04CE  0800               	movf	0,w	;code access
  4139  04CF  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  4140  04D0  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4141  04D1  3E02               	addlw	2
  4142  04D2  0086               	movwf	6
  4143  04D3  0187               	clrf	7
  4144  04D4  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  4145  04D5  0081               	movwf	1
  4146                           
  4147                           ;date_time.h: 149: string[3] = 0 ;
  4148  04D6  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4149  04D7  3E03               	addlw	3
  4150  04D8  0086               	movwf	6
  4151  04D9  0187               	clrf	7
  4152  04DA  0181               	clrf	1
  4153                           
  4154                           ;date_time.h: 150: break ;
  4155  04DB  0008               	return
  4156  04DC                     l1764:	
  4157                           ;date_time.h: 151: case DATE_ITEM_HOUR:
  4158                           
  4159                           
  4160                           ;date_time.h: 152: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  4161  04DC  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4162  04DD  3E02               	addlw	2
  4163  04DE  0086               	movwf	6
  4164  04DF  0187               	clrf	7
  4165  04E0  0801               	movf	1,w
  4166  04E1  390F               	andlw	15
  4167  04E2  3830               	iorlw	48
  4168  04E3  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4169  04E4  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4170  04E5  0086               	movwf	6
  4171  04E6  0187               	clrf	7
  4172  04E7  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4173  04E8  0081               	movwf	1
  4174                           
  4175                           ;date_time.h: 153: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  4176  04E9  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4177  04EA  3E02               	addlw	2
  4178  04EB  0086               	movwf	6
  4179  04EC  0187               	clrf	7
  4180  04ED  0801               	movf	1,w
  4181  04EE  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4182  04EF  3004               	movlw	4
  4183  04F0                     u1505:	
  4184  04F0  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4185  04F1  0B89               	decfsz	9,f
  4186  04F2  2CF0               	goto	u1505
  4187  04F3  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4188  04F4  3830               	iorlw	48
  4189  04F5  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4190  04F6  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4191  04F7  0086               	movwf	6
  4192  04F8  0187               	clrf	7
  4193  04F9  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4194  04FA  0081               	movwf	1
  4195                           
  4196                           ;date_time.h: 154: break ;
  4197  04FB  0008               	return
  4198  04FC                     l1766:	
  4199                           ;date_time.h: 155: case DATE_ITEM_MINUTE:
  4200                           
  4201                           
  4202                           ;date_time.h: 156: string[1] = ( dateTime->minute & 0x0F ) | '0' ;
  4203  04FC  0A25               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  4204  04FD  0086               	movwf	6
  4205  04FE  0187               	clrf	7
  4206  04FF  0801               	movf	1,w
  4207  0500  390F               	andlw	15
  4208  0501  3830               	iorlw	48
  4209  0502  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4210  0503  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4211  0504  0086               	movwf	6
  4212  0505  0187               	clrf	7
  4213  0506  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4214  0507  0081               	movwf	1
  4215                           
  4216                           ;date_time.h: 157: string[0] = ( dateTime->minute >> 4 ) | '0' ;
  4217  0508  0A25               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  4218  0509  0086               	movwf	6
  4219  050A  0187               	clrf	7
  4220  050B  0801               	movf	1,w
  4221  050C  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4222  050D  3004               	movlw	4
  4223  050E                     u1515:	
  4224  050E  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4225  050F  0B89               	decfsz	9,f
  4226  0510  2D0E               	goto	u1515
  4227  0511  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4228  0512  3830               	iorlw	48
  4229  0513  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4230  0514  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4231  0515  0086               	movwf	6
  4232  0516  0187               	clrf	7
  4233  0517  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4234  0518  0081               	movwf	1
  4235                           
  4236                           ;date_time.h: 158: break ;
  4237  0519  0008               	return
  4238  051A                     l1770:	
  4239                           ;date_time.h: 159: case DATE_ITEM_SECOND:
  4240                           
  4241                           
  4242                           ;date_time.h: 160: string[1] = ( dateTime->second & 0x0F ) | '0' ;
  4243  051A  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4244  051B  0086               	movwf	6
  4245  051C  0187               	clrf	7
  4246  051D  0801               	movf	1,w
  4247  051E  390F               	andlw	15
  4248  051F  3830               	iorlw	48
  4249  0520  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4250  0521  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4251  0522  0086               	movwf	6
  4252  0523  0187               	clrf	7
  4253  0524  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4254  0525  0081               	movwf	1
  4255                           
  4256                           ;date_time.h: 161: string[0] = ( dateTime->second >> 4 ) | '0' ;
  4257  0526  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4258  0527  0086               	movwf	6
  4259  0528  0187               	clrf	7
  4260  0529  0801               	movf	1,w
  4261  052A  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4262  052B  3004               	movlw	4
  4263  052C                     u1525:	
  4264  052C  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4265  052D  0B89               	decfsz	9,f
  4266  052E  2D2C               	goto	u1525
  4267  052F  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4268  0530  3830               	iorlw	48
  4269  0531  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4270  0532  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4271  0533  0086               	movwf	6
  4272  0534  0187               	clrf	7
  4273  0535  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4274  0536  0081               	movwf	1
  4275                           
  4276                           ;date_time.h: 163: }
  4277                           
  4278                           ;date_time.h: 162: break ;
  4279  0537  0008               	return
  4280  0538                     l1776:	
  4281  0538  0821               	movf	__date_time_ConvertByteToDiscrete@select,w
  4282                           
  4283                           ; Switch size 1, requested type "space"
  4284                           ; Number of cases is 7, Range of values is 0 to 6
  4285                           ; switch strategies available:
  4286                           ; Name         Instructions Cycles
  4287                           ; direct_byte           20     6 (fixed)
  4288                           ; simple_byte           22    12 (average)
  4289                           ; jumptable            260     6 (fixed)
  4290                           ;	Chosen strategy is direct_byte
  4291  0539  0084               	movwf	4
  4292  053A  3007               	movlw	7
  4293  053B  0204               	subwf	4,w
  4294  053C  1803               	skipnc
  4295  053D  0008               	return
  4296  053E  3188               	movlp	high S2318
  4297  053F  3504               	lslf	4,w
  4298  0540  3E10               	addlw	low S2318
  4299  0541  0082               	movwf	2
  4300  0542  0008               	return
  4301  0543                     __end_of__date_time_ConvertByteToDiscrete:	
  4302                           
  4303                           	psect	swtext2
  4304  0810                     __pswtext2:	
  4305  0810                     S2318:	
  4306  0810  3184  2C2A         	ljmp	l1754
  4307  0812  3184  2C4A         	ljmp	l1756
  4308  0814  3184  2C6A         	ljmp	l1758
  4309  0816  3184  2C8A         	ljmp	l1760
  4310  0818  3184  2CDC         	ljmp	l1764
  4311  081A  3184  2CFC         	ljmp	l1766
  4312  081C  3185  2D1A         	ljmp	l1770
  4313                           
  4314                           	psect	text14
  4315  0543                     __ptext14:	
  4316 ;; *************** function __date_time_ConvertByteToDate *****************
  4317 ;; Defined at:
  4318 ;;		line 80 in file "src/../../_Common/date_time.h"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  dateTime        1    wreg     PTR struct .
  4321 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  4322 ;;  stinrg          1    0[BANK0 ] PTR unsigned char 
  4323 ;;		 -> main@string(17), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  dateTime        1    4[BANK0 ] PTR struct .
  4326 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  4327 ;; Return value:  Size  Location     Type
  4328 ;;		None               void
  4329 ;; Registers used:
  4330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4336 ;;      Params:         0       1       0       0
  4337 ;;      Locals:         0       1       0       0
  4338 ;;      Temps:          0       3       0       0
  4339 ;;      Totals:         0       5       0       0
  4340 ;;Total ram usage:        5 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    2
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_main
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           
  4351                           ;psect for function __date_time_ConvertByteToDate
  4352  0543                     __date_time_ConvertByteToDate:	
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in __date_time_ConvertByteToDate: [wreg-fsr1h+status,2+status,0+pclath]
  4356                           ;__date_time_ConvertByteToDate@dateTime stored from wreg
  4357  0543  0020               	movlb	0	; select bank0
  4358  0544  00A4               	movwf	__date_time_ConvertByteToDate@dateTime
  4359                           
  4360                           ;date_time.h: 82: stinrg[16] = 0 ;
  4361  0545  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4362  0546  3E10               	addlw	16
  4363  0547  0086               	movwf	6
  4364  0548  0187               	clrf	7
  4365  0549  0181               	clrf	1
  4366                           
  4367                           ;date_time.h: 83: stinrg[15] = ']' ;
  4368  054A  305D               	movlw	93
  4369  054B  00A1               	movwf	??__date_time_ConvertByteToDate
  4370  054C  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4371  054D  3E0F               	addlw	15
  4372  054E  0086               	movwf	6
  4373  054F  0187               	clrf	7
  4374  0550  0821               	movf	??__date_time_ConvertByteToDate,w
  4375  0551  0081               	movwf	1
  4376                           
  4377                           ;date_time.h: 84: stinrg[11] = '[' ;
  4378  0552  305B               	movlw	91
  4379  0553  00A1               	movwf	??__date_time_ConvertByteToDate
  4380  0554  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4381  0555  3E0B               	addlw	11
  4382  0556  0086               	movwf	6
  4383  0557  0187               	clrf	7
  4384  0558  0821               	movf	??__date_time_ConvertByteToDate,w
  4385  0559  0081               	movwf	1
  4386                           
  4387                           ;date_time.h: 85: stinrg[10] = ' ' ;
  4388  055A  3020               	movlw	32
  4389  055B  00A1               	movwf	??__date_time_ConvertByteToDate
  4390  055C  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4391  055D  3E0A               	addlw	10
  4392  055E  0086               	movwf	6
  4393  055F  0187               	clrf	7
  4394  0560  0821               	movf	??__date_time_ConvertByteToDate,w
  4395  0561  0081               	movwf	1
  4396                           
  4397                           ;date_time.h: 86: stinrg[7] = '-' ;
  4398  0562  302D               	movlw	45
  4399  0563  00A1               	movwf	??__date_time_ConvertByteToDate
  4400  0564  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4401  0565  3E07               	addlw	7
  4402  0566  0086               	movwf	6
  4403  0567  0187               	clrf	7
  4404  0568  0821               	movf	??__date_time_ConvertByteToDate,w
  4405  0569  0081               	movwf	1
  4406                           
  4407                           ;date_time.h: 87: stinrg[4] = '-' ;
  4408  056A  302D               	movlw	45
  4409  056B  00A1               	movwf	??__date_time_ConvertByteToDate
  4410  056C  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4411  056D  3E04               	addlw	4
  4412  056E  0086               	movwf	6
  4413  056F  0187               	clrf	7
  4414  0570  0821               	movf	??__date_time_ConvertByteToDate,w
  4415  0571  0081               	movwf	1
  4416                           
  4417                           ;date_time.h: 90: stinrg[14] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  4418  0572  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4419  0573  3E03               	addlw	3
  4420  0574  0086               	movwf	6
  4421  0575  0187               	clrf	7
  4422  0576  3501               	lslf	1,w
  4423  0577  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4424  0578  0086               	movwf	6
  4425  0579  0187               	clrf	7
  4426  057A  3F40               	moviw [0]fsr1
  4427  057B  00A1               	movwf	??__date_time_ConvertByteToDate
  4428  057C  3F41               	moviw [1]fsr1
  4429  057D  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4430  057E  3002               	movlw	2
  4431  057F  0721               	addwf	??__date_time_ConvertByteToDate,w
  4432  0580  0084               	movwf	4
  4433  0581  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4434  0582  1803               	skipnc
  4435  0583  0A22               	incf	??__date_time_ConvertByteToDate+1,w
  4436  0584  0085               	movwf	5
  4437  0585  0800               	movf	0,w	;code access
  4438  0586  00A3               	movwf	??__date_time_ConvertByteToDate+2
  4439  0587  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4440  0588  3E0E               	addlw	14
  4441  0589  0086               	movwf	6
  4442  058A  0187               	clrf	7
  4443  058B  0823               	movf	??__date_time_ConvertByteToDate+2,w
  4444  058C  0081               	movwf	1
  4445                           
  4446                           ;date_time.h: 91: stinrg[13] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  4447  058D  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4448  058E  3E03               	addlw	3
  4449  058F  0086               	movwf	6
  4450  0590  0187               	clrf	7
  4451  0591  3501               	lslf	1,w
  4452  0592  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4453  0593  0086               	movwf	6
  4454  0594  0187               	clrf	7
  4455  0595  3F40               	moviw [0]fsr1
  4456  0596  00A1               	movwf	??__date_time_ConvertByteToDate
  4457  0597  3F41               	moviw [1]fsr1
  4458  0598  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4459  0599  3001               	movlw	1
  4460  059A  0721               	addwf	??__date_time_ConvertByteToDate,w
  4461  059B  0084               	movwf	4
  4462  059C  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4463  059D  1803               	skipnc
  4464  059E  0A22               	incf	??__date_time_ConvertByteToDate+1,w
  4465  059F  0085               	movwf	5
  4466  05A0  0800               	movf	0,w	;code access
  4467  05A1  00A3               	movwf	??__date_time_ConvertByteToDate+2
  4468  05A2  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4469  05A3  3E0D               	addlw	13
  4470  05A4  0086               	movwf	6
  4471  05A5  0187               	clrf	7
  4472  05A6  0823               	movf	??__date_time_ConvertByteToDate+2,w
  4473  05A7  0081               	movwf	1
  4474                           
  4475                           ;date_time.h: 92: stinrg[12] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  4476  05A8  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4477  05A9  3E03               	addlw	3
  4478  05AA  0086               	movwf	6
  4479  05AB  0187               	clrf	7
  4480  05AC  3501               	lslf	1,w
  4481  05AD  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4482  05AE  0086               	movwf	6
  4483  05AF  0187               	clrf	7
  4484  05B0  3F40               	moviw [0]fsr1
  4485  05B1  00A1               	movwf	??__date_time_ConvertByteToDate
  4486  05B2  3F41               	moviw [1]fsr1
  4487  05B3  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4488  05B4  0821               	movf	??__date_time_ConvertByteToDate,w
  4489  05B5  0084               	movwf	4
  4490  05B6  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4491  05B7  0085               	movwf	5
  4492  05B8  0800               	movf	0,w	;code access
  4493  05B9  00A3               	movwf	??__date_time_ConvertByteToDate+2
  4494  05BA  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4495  05BB  3E0C               	addlw	12
  4496  05BC  0086               	movwf	6
  4497  05BD  0187               	clrf	7
  4498  05BE  0823               	movf	??__date_time_ConvertByteToDate+2,w
  4499  05BF  0081               	movwf	1
  4500                           
  4501                           ;date_time.h: 94: stinrg[9] = ( dateTime->day & 0x0F ) | '0' ;
  4502  05C0  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4503  05C1  3E04               	addlw	4
  4504  05C2  0086               	movwf	6
  4505  05C3  0187               	clrf	7
  4506  05C4  0801               	movf	1,w
  4507  05C5  390F               	andlw	15
  4508  05C6  3830               	iorlw	48
  4509  05C7  00A1               	movwf	??__date_time_ConvertByteToDate
  4510  05C8  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4511  05C9  3E09               	addlw	9
  4512  05CA  0086               	movwf	6
  4513  05CB  0187               	clrf	7
  4514  05CC  0821               	movf	??__date_time_ConvertByteToDate,w
  4515  05CD  0081               	movwf	1
  4516                           
  4517                           ;date_time.h: 95: stinrg[8] = ( dateTime->day >> 4 ) | '0' ;
  4518  05CE  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4519  05CF  3E04               	addlw	4
  4520  05D0  0086               	movwf	6
  4521  05D1  0187               	clrf	7
  4522  05D2  0801               	movf	1,w
  4523  05D3  00A1               	movwf	??__date_time_ConvertByteToDate
  4524  05D4  3004               	movlw	4
  4525  05D5                     u1415:	
  4526  05D5  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4527  05D6  0B89               	decfsz	9,f
  4528  05D7  2DD5               	goto	u1415
  4529  05D8  0821               	movf	??__date_time_ConvertByteToDate,w
  4530  05D9  3830               	iorlw	48
  4531  05DA  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4532  05DB  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4533  05DC  3E08               	addlw	8
  4534  05DD  0086               	movwf	6
  4535  05DE  0187               	clrf	7
  4536  05DF  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4537  05E0  0081               	movwf	1
  4538                           
  4539                           ;date_time.h: 97: stinrg[6] = ( dateTime->month & 0x0F ) | '0' ;
  4540  05E1  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4541  05E2  3E05               	addlw	5
  4542  05E3  0086               	movwf	6
  4543  05E4  0187               	clrf	7
  4544  05E5  0801               	movf	1,w
  4545  05E6  390F               	andlw	15
  4546  05E7  3830               	iorlw	48
  4547  05E8  00A1               	movwf	??__date_time_ConvertByteToDate
  4548  05E9  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4549  05EA  3E06               	addlw	6
  4550  05EB  0086               	movwf	6
  4551  05EC  0187               	clrf	7
  4552  05ED  0821               	movf	??__date_time_ConvertByteToDate,w
  4553  05EE  0081               	movwf	1
  4554                           
  4555                           ;date_time.h: 98: stinrg[5] = ( dateTime->month >> 4 ) | '0' ;
  4556  05EF  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4557  05F0  3E05               	addlw	5
  4558  05F1  0086               	movwf	6
  4559  05F2  0187               	clrf	7
  4560  05F3  0801               	movf	1,w
  4561  05F4  00A1               	movwf	??__date_time_ConvertByteToDate
  4562  05F5  3004               	movlw	4
  4563  05F6                     u1425:	
  4564  05F6  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4565  05F7  0B89               	decfsz	9,f
  4566  05F8  2DF6               	goto	u1425
  4567  05F9  0821               	movf	??__date_time_ConvertByteToDate,w
  4568  05FA  3830               	iorlw	48
  4569  05FB  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4570  05FC  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4571  05FD  3E05               	addlw	5
  4572  05FE  0086               	movwf	6
  4573  05FF  0187               	clrf	7
  4574  0600  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4575  0601  0081               	movwf	1
  4576                           
  4577                           ;date_time.h: 100: stinrg[3] = ( dateTime->year & 0x0F ) | '0' ;
  4578  0602  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4579  0603  3E06               	addlw	6
  4580  0604  0086               	movwf	6
  4581  0605  0187               	clrf	7
  4582  0606  0801               	movf	1,w
  4583  0607  390F               	andlw	15
  4584  0608  3830               	iorlw	48
  4585  0609  00A1               	movwf	??__date_time_ConvertByteToDate
  4586  060A  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4587  060B  3E03               	addlw	3
  4588  060C  0086               	movwf	6
  4589  060D  0187               	clrf	7
  4590  060E  0821               	movf	??__date_time_ConvertByteToDate,w
  4591  060F  0081               	movwf	1
  4592                           
  4593                           ;date_time.h: 101: stinrg[2] = ( dateTime->year >> 4 ) | '0' ;
  4594  0610  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4595  0611  3E06               	addlw	6
  4596  0612  0086               	movwf	6
  4597  0613  0187               	clrf	7
  4598  0614  0801               	movf	1,w
  4599  0615  00A1               	movwf	??__date_time_ConvertByteToDate
  4600  0616  3004               	movlw	4
  4601  0617                     u1435:	
  4602  0617  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4603  0618  0B89               	decfsz	9,f
  4604  0619  2E17               	goto	u1435
  4605  061A  0821               	movf	??__date_time_ConvertByteToDate,w
  4606  061B  3830               	iorlw	48
  4607  061C  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4608  061D  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4609  061E  3E02               	addlw	2
  4610  061F  0086               	movwf	6
  4611  0620  0187               	clrf	7
  4612  0621  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4613  0622  0081               	movwf	1
  4614                           
  4615                           ;date_time.h: 102: stinrg[1] = '0' ;
  4616  0623  3030               	movlw	48
  4617  0624  00A1               	movwf	??__date_time_ConvertByteToDate
  4618  0625  0A20               	incf	__date_time_ConvertByteToDate@stinrg,w
  4619  0626  0086               	movwf	6
  4620  0627  0187               	clrf	7
  4621  0628  0821               	movf	??__date_time_ConvertByteToDate,w
  4622  0629  0081               	movwf	1
  4623                           
  4624                           ;date_time.h: 103: stinrg[0] = '2' ;
  4625  062A  3032               	movlw	50
  4626  062B  00A1               	movwf	??__date_time_ConvertByteToDate
  4627  062C  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4628  062D  0086               	movwf	6
  4629  062E  0187               	clrf	7
  4630  062F  0821               	movf	??__date_time_ConvertByteToDate,w
  4631  0630  0081               	movwf	1
  4632  0631  0008               	return
  4633  0632                     __end_of__date_time_ConvertByteToDate:	
  4634                           
  4635                           	psect	intentry
  4636  0004                     __pintentry:	
  4637 ;; *************** function __ *****************
  4638 ;; Defined at:
  4639 ;;		line 575 in file "src/main.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  i               1    9[COMMON] unsigned char 
  4644 ;;  isTimeToAler    1    8[COMMON] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;		None               void
  4647 ;; Registers used:
  4648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4654 ;;      Params:         0       0       0       0
  4655 ;;      Locals:         2       0       0       0
  4656 ;;      Temps:          2       0       0       0
  4657 ;;      Totals:         4       0       0       0
  4658 ;;Total ram usage:        4 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    1
  4661 ;; This function calls:
  4662 ;;		i1__ds1307_GetData
  4663 ;; This function is called by:
  4664 ;;		Interrupt level 1
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668  0004                     __:	
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in __: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4672  0004  3180               	pagesel	$
  4673  0005  0020               	movlb	0	; select bank0
  4674  0006  087F               	movf	127,w
  4675  0007  00F7               	movwf	??__+1
  4676                           
  4677                           ;main.c: 578: if( IOCIF && machineState != STATE_ADJUST_CLOCK ) {
  4678  0008  1C0B               	btfss	11,0	;volatile
  4679  0009  2862               	goto	i1l2268
  4680  000A  3003               	movlw	3
  4681  000B  0657               	xorwf	_machineState,w
  4682  000C  1903               	btfsc	3,2
  4683  000D  2862               	goto	i1l2268
  4684                           
  4685                           ;main.c: 579: IOCAF3 = 0 ;
  4686  000E  0027               	movlb	7	; select bank7
  4687  000F  1193               	bcf	19,3	;volatile
  4688                           
  4689                           ;main.c: 581: if( machineState == STATE_BOOT ) {
  4690  0010  0020               	movlb	0	; select bank0
  4691  0011  0857               	movf	_machineState,w
  4692  0012  1D03               	btfss	3,2
  4693  0013  281C               	goto	i1l410
  4694                           
  4695                           ;main.c: 582: machineState = STATE_CLOCK ;
  4696  0014  01D7               	clrf	_machineState
  4697  0015  0AD7               	incf	_machineState,f
  4698                           
  4699                           ;main.c: 583: datePtr = &dateCurrent ;
  4700  0016  305C               	movlw	(low (_dateCurrent| 0))& (0+255)
  4701  0017  00F6               	movwf	??__
  4702  0018  0876               	movf	??__,w
  4703  0019  00EA               	movwf	_datePtr
  4704                           
  4705                           ;main.c: 584: outputEvent.changeMessage=1 ;
  4706  001A  1459               	bsf	_outputEvent,0
  4707                           
  4708                           ;main.c: 585: }
  4709  001B  281D               	goto	i1l2236
  4710  001C                     i1l410:	
  4711                           
  4712                           ;main.c: 586: else {
  4713                           ;main.c: 587: outputEvent.changeValue=1 ;
  4714  001C  14D9               	bsf	_outputEvent,1
  4715  001D                     i1l2236:	
  4716                           
  4717                           ;main.c: 588: }
  4718                           ;main.c: 592: if( _ds1307_GetData( &dateCurrent , 0x00 , 7 ) ) {
  4719  001D  01F0               	clrf	i1__ds1307_GetData@ramAddress
  4720  001E  3007               	movlw	7
  4721  001F  00F6               	movwf	??__
  4722  0020  0876               	movf	??__,w
  4723  0021  00F1               	movwf	i1__ds1307_GetData@length
  4724  0022  305C               	movlw	(low (_dateCurrent| 0))& (0+255)
  4725  0023  318F  2745  3180   	fcall	i1__ds1307_GetData
  4726  0026  3A00               	xorlw	0
  4727  0027  1903               	skipnz
  4728  0028  282E               	goto	i1l412
  4729                           
  4730                           ;main.c: 593: machineState = STATE_ERROR ;
  4731  0029  3008               	movlw	8
  4732  002A  00F6               	movwf	??__
  4733  002B  0876               	movf	??__,w
  4734  002C  0020               	movlb	0	; select bank0
  4735  002D  2861               	goto	L9
  4736  002E                     i1l412:	
  4737                           ;main.c: 594: }
  4738                           
  4739                           
  4740                           ;main.c: 595: else {
  4741                           ;main.c: 598: uint08_t isTimeToAlerm = 1 ;
  4742  002E  01F8               	clrf	__@isTimeToAlerm
  4743  002F  0AF8               	incf	__@isTimeToAlerm,f
  4744                           
  4745                           ;main.c: 599: for( uint08_t i = 0 ; i < 7 ; i++ ) {
  4746  0030  01F9               	clrf	__@i
  4747  0031  3007               	movlw	7
  4748  0032  0279               	subwf	__@i,w
  4749  0033  1803               	btfsc	3,0
  4750  0034  2853               	goto	i1l2260
  4751  0035                     i1l2246:	
  4752                           
  4753                           ;main.c: 600: if( ( !dateTimer.dayOfWeek ) && i == 3 ) continue ;
  4754  0035  0020               	movlb	0	; select bank0
  4755  0036  0866               	movf	_dateTimer+3,w
  4756  0037  1D03               	btfss	3,2
  4757  0038  283D               	goto	i1l2252
  4758  0039  3003               	movlw	3
  4759  003A  0679               	xorwf	__@i,w
  4760  003B  1903               	btfsc	3,2
  4761  003C  284B               	goto	i1l2256
  4762  003D                     i1l2252:	
  4763                           
  4764                           ;main.c: 601: if( dateCurrent.array[i] != dateTimer.array[i] ) {
  4765  003D  0879               	movf	__@i,w
  4766  003E  3E63               	addlw	(low (_dateTimer| 0))& (0+255)
  4767  003F  0086               	movwf	6
  4768  0040  0187               	clrf	7
  4769  0041  0879               	movf	__@i,w
  4770  0042  3E5C               	addlw	(low (_dateCurrent| 0))& (0+255)
  4771  0043  0084               	movwf	4
  4772  0044  0185               	clrf	5
  4773  0045  0800               	movf	0,w
  4774  0046  0601               	xorwf	1,w
  4775  0047  1903               	skipnz
  4776  0048  284B               	goto	i1l2256
  4777                           
  4778                           ;main.c: 602: isTimeToAlerm = 0 ;
  4779  0049  01F8               	clrf	__@isTimeToAlerm
  4780                           
  4781                           ;main.c: 603: break ;
  4782  004A  2853               	goto	i1l2260
  4783  004B                     i1l2256:	
  4784  004B  3001               	movlw	1
  4785  004C  00F6               	movwf	??__
  4786  004D  0876               	movf	??__,w
  4787  004E  07F9               	addwf	__@i,f
  4788  004F  3007               	movlw	7
  4789  0050  0279               	subwf	__@i,w
  4790  0051  1C03               	skipc
  4791  0052  2835               	goto	i1l2246
  4792  0053                     i1l2260:	
  4793                           
  4794                           ;main.c: 604: }
  4795                           ;main.c: 605: }
  4796                           ;main.c: 607: if( isTimeToAlerm ) machineState = STATE_ALERM ;
  4797  0053  0878               	movf	__@isTimeToAlerm,w
  4798  0054  1903               	btfsc	3,2
  4799  0055  285B               	goto	i1l2264
  4800  0056  3004               	movlw	4
  4801  0057  00F6               	movwf	??__
  4802  0058  0876               	movf	??__,w
  4803  0059  0020               	movlb	0	; select bank0
  4804  005A  00D7               	movwf	_machineState
  4805  005B                     i1l2264:	
  4806                           
  4807                           ;main.c: 608: if( dateCurrent.clockHalt ) machineState = STATE_ERROR ;
  4808  005B  0020               	movlb	0	; select bank0
  4809  005C  1FDC               	btfss	_dateCurrent,7
  4810  005D  2862               	goto	i1l2268
  4811  005E  3008               	movlw	8
  4812  005F  00F6               	movwf	??__
  4813  0060  0876               	movf	??__,w
  4814  0061                     L9:	
  4815  0061  00D7               	movwf	_machineState
  4816  0062                     i1l2268:	
  4817                           
  4818                           ;main.c: 609: }
  4819                           ;main.c: 611: }
  4820                           ;main.c: 613: if( !TMR0IF ) return ;
  4821  0062  1D0B               	btfss	11,2	;volatile
  4822  0063  286E               	goto	i1l422
  4823                           
  4824                           ;main.c: 614: TMR0IF = 0 ;
  4825  0064  110B               	bcf	11,2	;volatile
  4826                           
  4827                           ;main.c: 617: portAState_.byte = (~PORTA&0x33) ;
  4828  0065  090C               	comf	12,w	;volatile
  4829  0066  3933               	andlw	51
  4830  0067  00F6               	movwf	??__
  4831  0068  0876               	movf	??__,w
  4832  0069  00DA               	movwf	_portAState_
  4833                           
  4834                           ;main.c: 619: blinkPrescaler++ ;
  4835  006A  3001               	movlw	1
  4836  006B  00F6               	movwf	??__
  4837  006C  0876               	movf	??__,w
  4838  006D  07D2               	addwf	_blinkPrescaler,f
  4839  006E                     i1l422:	
  4840  006E  0877               	movf	??__+1,w
  4841  006F  00FF               	movwf	127
  4842  0070  0009               	retfie
  4843  0071                     __end_of__:	
  4844                           
  4845                           	psect	text16
  4846  0F45                     __ptext16:	
  4847 ;; *************** function i1__ds1307_GetData *****************
  4848 ;; Defined at:
  4849 ;;		line 74 in file "src/../../_Common/ds1307.h"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  date            1    wreg     PTR struct .
  4852 ;;		 -> dateCurrent(7), dateTimer(7), 
  4853 ;;  ramAddress      1    0[COMMON] unsigned char 
  4854 ;;  length          1    1[COMMON] unsigned char 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  date            1    4[COMMON] PTR struct .
  4857 ;;		 -> dateCurrent(7), dateTimer(7), 
  4858 ;;  _ds1307_GetD    1    5[COMMON] unsigned char 
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      unsigned char 
  4861 ;; Registers used:
  4862 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4868 ;;      Params:         2       0       0       0
  4869 ;;      Locals:         2       0       0       0
  4870 ;;      Temps:          2       0       0       0
  4871 ;;      Totals:         6       0       0       0
  4872 ;;Total ram usage:        6 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		__
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           
  4882                           ;psect for function i1__ds1307_GetData
  4883  0F45                     i1__ds1307_GetData:	
  4884                           
  4885                           ;incstack = 0
  4886                           ; Regs used in i1__ds1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  4887                           ;i1__ds1307_GetData@date stored from wreg
  4888  0F45  00F4               	movwf	i1__ds1307_GetData@date
  4889                           
  4890                           ;ds1307.h: 77: SSP1CON2bits.SEN = 1 ;
  4891  0F46  0024               	movlb	4	; select bank4
  4892  0F47  1416               	bsf	22,0	;volatile
  4893  0F48                     i1l175:	
  4894                           ;ds1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  4895                           
  4896  0F48  1816               	btfsc	22,0	;volatile
  4897  0F49  2F48               	goto	i1l175
  4898                           
  4899                           ;ds1307.h: 79: SSP1IF = 0 ;
  4900  0F4A  0020               	movlb	0	; select bank0
  4901  0F4B  1191               	bcf	17,3	;volatile
  4902                           
  4903                           ;ds1307.h: 82: SSP1BUF = 0xD0 ;
  4904  0F4C  30D0               	movlw	208
  4905  0F4D  0024               	movlb	4	; select bank4
  4906  0F4E  0091               	movwf	17	;volatile
  4907  0F4F                     i1l178:	
  4908                           ;ds1307.h: 83: while ( !SSP1IF ) ;
  4909                           
  4910  0F4F  0020               	movlb	0	; select bank0
  4911  0F50  1D91               	btfss	17,3	;volatile
  4912  0F51  2F4F               	goto	i1l178
  4913                           
  4914                           ;ds1307.h: 84: SSP1IF = 0 ;
  4915  0F52  1191               	bcf	17,3	;volatile
  4916                           
  4917                           ;ds1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  4918  0F53  0024               	movlb	4	; select bank4
  4919  0F54  1F16               	btfss	22,6	;volatile
  4920  0F55  2F58               	goto	i1l1854
  4921  0F56  3001               	movlw	1
  4922  0F57  0008               	return
  4923  0F58                     i1l1854:	
  4924                           
  4925                           ;ds1307.h: 88: SSP1BUF = ramAddress ;
  4926  0F58  0870               	movf	i1__ds1307_GetData@ramAddress,w
  4927  0F59  0091               	movwf	17	;volatile
  4928  0F5A                     i1l183:	
  4929                           ;ds1307.h: 89: while ( !SSP1IF ) ;
  4930                           
  4931  0F5A  0020               	movlb	0	; select bank0
  4932  0F5B  1D91               	btfss	17,3	;volatile
  4933  0F5C  2F5A               	goto	i1l183
  4934                           
  4935                           ;ds1307.h: 90: SSP1IF = 0 ;
  4936  0F5D  1191               	bcf	17,3	;volatile
  4937                           
  4938                           ;ds1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  4939  0F5E  0024               	movlb	4	; select bank4
  4940  0F5F  1F16               	btfss	22,6	;volatile
  4941  0F60  2F63               	goto	i1l186
  4942  0F61  3002               	movlw	2
  4943  0F62  0008               	return
  4944  0F63                     i1l186:	
  4945                           
  4946                           ;ds1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  4947  0F63  1496               	bsf	22,1	;volatile
  4948  0F64                     i1l187:	
  4949                           ;ds1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  4950                           
  4951  0F64  1896               	btfsc	22,1	;volatile
  4952  0F65  2F64               	goto	i1l187
  4953                           
  4954                           ;ds1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  4955  0F66  30D1               	movlw	209
  4956  0F67  0091               	movwf	17	;volatile
  4957  0F68                     i1l190:	
  4958                           ;ds1307.h: 98: while ( !SSP1IF ) ;
  4959                           
  4960  0F68  0020               	movlb	0	; select bank0
  4961  0F69  1D91               	btfss	17,3	;volatile
  4962  0F6A  2F68               	goto	i1l190
  4963                           
  4964                           ;ds1307.h: 99: SSP1IF = 0 ;
  4965  0F6B  1191               	bcf	17,3	;volatile
  4966                           
  4967                           ;ds1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  4968  0F6C  0024               	movlb	4	; select bank4
  4969  0F6D  1F16               	btfss	22,6	;volatile
  4970  0F6E  2F71               	goto	i1l1866
  4971  0F6F  3003               	movlw	3
  4972  0F70  0008               	return
  4973  0F71                     i1l1866:	
  4974                           
  4975                           ;ds1307.h: 103: uint08_t dataCount = 0 ;
  4976  0F71  01F5               	clrf	i1__ds1307_GetData@dataCount
  4977  0F72                     i1l1880:	
  4978                           ;ds1307.h: 104: while ( dataCount < length ) {
  4979                           
  4980  0F72  0871               	movf	i1__ds1307_GetData@length,w
  4981  0F73  0275               	subwf	i1__ds1307_GetData@dataCount,w
  4982  0F74  1803               	btfsc	3,0
  4983  0F75  2F9A               	goto	i1l202
  4984                           
  4985                           ;ds1307.h: 105: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  4986  0F76  30A6               	movlw	166
  4987  0F77  00F2               	movwf	??i1__ds1307_GetData
  4988  0F78                     u254_27:	
  4989  0F78  0BF2               	decfsz	??i1__ds1307_GetData,f
  4990  0F79  2F78               	goto	u254_27
  4991  0F7A  0000               	nop
  4992                           
  4993                           ;ds1307.h: 106: SSP1CON2bits.RCEN = 1 ;
  4994  0F7B  0024               	movlb	4	; select bank4
  4995  0F7C  1596               	bsf	22,3	;volatile
  4996  0F7D                     i1l196:	
  4997                           ;ds1307.h: 107: while ( SSP1CON2bits.RCEN ) ;
  4998                           
  4999  0F7D  1996               	btfsc	22,3	;volatile
  5000  0F7E  2F7D               	goto	i1l196
  5001  0F7F                     i1l199:	
  5002                           ;ds1307.h: 108: while ( !SSPSTATbits.BF ) ;
  5003                           
  5004  0F7F  1C14               	btfss	20,0	;volatile
  5005  0F80  2F7F               	goto	i1l199
  5006                           
  5007                           ;ds1307.h: 109: date->array[ dataCount++ ] = SSP1BUF ;
  5008  0F81  0811               	movf	17,w	;volatile
  5009  0F82  00F2               	movwf	??i1__ds1307_GetData
  5010  0F83  0875               	movf	i1__ds1307_GetData@dataCount,w
  5011  0F84  0774               	addwf	i1__ds1307_GetData@date,w
  5012  0F85  00F3               	movwf	??i1__ds1307_GetData+1
  5013  0F86  0873               	movf	??i1__ds1307_GetData+1,w
  5014  0F87  0086               	movwf	6
  5015  0F88  0187               	clrf	7
  5016  0F89  0872               	movf	??i1__ds1307_GetData,w
  5017  0F8A  0081               	movwf	1
  5018  0F8B  3001               	movlw	1
  5019  0F8C  00F2               	movwf	??i1__ds1307_GetData
  5020  0F8D  0872               	movf	??i1__ds1307_GetData,w
  5021  0F8E  07F5               	addwf	i1__ds1307_GetData@dataCount,f
  5022                           
  5023                           ;ds1307.h: 110: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  5024  0F8F  0875               	movf	i1__ds1307_GetData@dataCount,w
  5025  0F90  0671               	xorwf	i1__ds1307_GetData@length,w
  5026  0F91  1D03               	btfss	3,2
  5027  0F92  2F96               	goto	u187_20
  5028  0F93  0024               	movlb	4	; select bank4
  5029  0F94  1696               	bsf	22,5	;volatile
  5030  0F95  2F98               	goto	i1l1878
  5031  0F96                     u187_20:	
  5032  0F96  0024               	movlb	4	; select bank4
  5033  0F97  1296               	bcf	22,5	;volatile
  5034  0F98                     i1l1878:	
  5035                           
  5036                           ;ds1307.h: 111: SSP1CON2bits.ACKEN = 1 ;
  5037  0F98  1616               	bsf	22,4	;volatile
  5038  0F99  2F72               	goto	i1l1880
  5039  0F9A                     i1l202:	
  5040                           
  5041                           ;ds1307.h: 112: }
  5042                           ;ds1307.h: 115: SSP1CON2bits.PEN = 1 ;
  5043  0F9A  1516               	bsf	22,2	;volatile
  5044  0F9B                     i1l203:	
  5045                           ;ds1307.h: 116: while ( SSP1CON2bits.PEN ) ;
  5046                           
  5047  0F9B  1916               	btfsc	22,2	;volatile
  5048  0F9C  2F9B               	goto	i1l203
  5049                           
  5050                           ;ds1307.h: 118: return 0 ;
  5051  0F9D  3000               	movlw	0
  5052  0F9E  0008               	return
  5053  0F9F                     __end_ofi1__ds1307_GetData:	
  5054  007E                     btemp	set	126	;btemp
  5055  007E                     wtemp	set	126
  5056  007E                     wtemp0	set	126
  5057  0080                     wtemp1	set	128
  5058  0082                     wtemp2	set	130
  5059  0084                     wtemp3	set	132
  5060  0086                     wtemp4	set	134
  5061  0088                     wtemp5	set	136
  5062  007F                     wtemp6	set	127
  5063  007E                     ttemp	set	126
  5064  007E                     ttemp0	set	126
  5065  0081                     ttemp1	set	129
  5066  0084                     ttemp2	set	132
  5067  0087                     ttemp3	set	135
  5068  007F                     ttemp4	set	127
  5069  007E                     ltemp	set	126
  5070  007E                     ltemp0	set	126
  5071  0082                     ltemp1	set	130
  5072  0086                     ltemp2	set	134
  5073  0080                     ltemp3	set	128


Data Sizes:
    Strings     125
    Constant    57
    Data        26
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     41      79
    BANK1            80      0      22
    BANK2            64      0       0

Pointer List with Targets:

    datePtr	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    currentEditValue	PTR unsigned char  size(1) Largest target is 2
		 -> dateCurrent.second(BANK0[1]), dateCurrent.year(BANK0[1]), dateTimer.year(BANK0[1]), dateTimer.second(BANK0[1]), 
		 -> NULL(NULL[0]), datePtr.year(COMMON[1]), datePtr.second(COMMON[1]), datePtr(BANK0[1]), 

    currentValueInfo	PTR const struct . size(2) Largest target is 4096
		 -> ROM(CODE[4096]), VALUE_INFORMATIONS.second(CODE[4]), VALUE_INFORMATIONS.year(CODE[4]), VALUE_INFORMATIONS(CODE[28]), 

    MESSAGE_MENU	PTR const unsigned char [4] size(2) Largest target is 13
		 -> STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), STR_8(CODE[13]), 

    _ds1307_SetClock@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), 

    _ds1307_GetData@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@string	PTR unsigned char  size(1) Largest target is 4
		 -> main@string_664(BANK0[4]), 

    _date_time_ConvertByteToTime@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToTime@string	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    _date_time_ConvertByteToDate@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDate@stinrg	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    STR_DAY_OF_WEEK	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    _parallel_lcd_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 8
		 -> CURSOR_BITMAP(CODE[8]), 

    _parallel_lcd_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[7]), STR_20(CODE[8]), STR_19(CODE[9]), 
		 -> STR_18(CODE[12]), STR_17(CODE[6]), STR_16(CODE[7]), STR_15(CODE[8]), 
		 -> STR_13(CODE[8]), STR_12(CODE[6]), STR_11(CODE[8]), STR_10(CODE[12]), 
		 -> STR_9(CODE[10]), STR_8(CODE[13]), 

    _parallel_lcd_WriteString@stringPtr	PTR const unsigned char  size(2) Largest target is 17
		 -> main@string_664(BANK0[4]), main@valueString(BANK0[4]), main@string(BANK0[17]), STR_14(CODE[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under __ in COMMON

    __->i1__ds1307_GetData

Critical Paths under _main in BANK0

    _main->__parallel_lcd_SetCgram
    _main->__parallel_lcd_WriteStringClearing
    __parallel_lcd_WriteStringClearing->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteString->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteCharacter->__private_parallel_lcd_WriteByte
    __parallel_lcd_SetCgram->__private_parallel_lcd_WriteByte
    __parallel_lcd_Initialize->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearRow->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearPartial->__private_parallel_lcd_WriteByte

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0   16304
                                              8 BANK0     33    33      0
       __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
       __date_time_ConvertByteToTime
                    __ds1307_GetData
                   __ds1307_SetClock
         __parallel_lcd_ClearPartial
             __parallel_lcd_ClearRow
           __parallel_lcd_Initialize
             __parallel_lcd_SetCgram
       __parallel_lcd_WriteCharacter
          __parallel_lcd_WriteString
  __parallel_lcd_WriteStringClearing
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteStringClearing                    5     3      2    2633
                                              3 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteString                            4     2      2    2011
                                              3 BANK0      4     2      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteCharacter                         2     1      1    1684
                                              3 BANK0      2     1      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_SetCgram                               5     3      2    1731
                                              3 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_Initialize                             0     0      0    1564
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearRow                               3     3      0    1632
                                              3 BANK0      3     3      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearPartial                           4     3      1    1708
                                              3 BANK0      4     3      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) __private_parallel_lcd_WriteByte                      3     2      1    1564
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) __ds1307_SetClock                                     3     3      0     140
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) __ds1307_GetData                                      6     4      2     508
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToTime                         4     3      1     456
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDiscrete                     6     4      2     928
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDate                         5     4      1     698
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    4     4      0     344
                                              6 COMMON     4     4      0
                  i1__ds1307_GetData
 ---------------------------------------------------------------------------------
 (4) i1__ds1307_GetData                                    6     4      2     208
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
   __date_time_ConvertByteToTime
   __ds1307_GetData
   __ds1307_SetClock
   __parallel_lcd_ClearPartial
     __private_parallel_lcd_WriteByte
   __parallel_lcd_ClearRow
     __private_parallel_lcd_WriteByte
   __parallel_lcd_Initialize
     __private_parallel_lcd_WriteByte
   __parallel_lcd_SetCgram
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteCharacter
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteString
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteStringClearing
     __private_parallel_lcd_WriteByte
   _initialize

 __ (ROOT)
   i1__ds1307_GetData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      16       8       27.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            40      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               40      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      6F      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 12 22:05:27 2015

                                          __ 0004                                            pc 0002  
                 ??__parallel_lcd_Initialize 0023                                  __CFG_CP$OFF 0000  
                                         ?__ 0070                                  _SSPSTATbits 0214  
                 ?__parallel_lcd_WriteString 0023                                          ??__ 0076  
                                        l202 0FFA                                          l203 0FFC  
                                        l211 07C1                                          l221 07EF  
                                        l222 07DF                                          l310 01B6  
                                        l216 07C9                                          l208 07BA  
                                        l304 01A2                                          l313 01C0  
                                        l226 07F1                                          l322 01E2  
                                        l315 01C8                                          l341 0260  
                                        l190 0FC5                                          l318 01D9  
                                        l270 00F0                                          l183 0FB7  
                                        l175 0FA3                                          l327 01E6  
                                        l271 00EF                                          l352 0273  
                                        l336 0226                                          l273 00F7  
                                        l186 0FC0                                          l178 0FAA  
                                        l362 029A                                          l346 0264  
                                        l282 0105                                          l274 00F6  
                                        l187 0FC1                                          l371 02D9  
                                        l363 034B                                          l355 028C  
                                        l283 014B                                          l267 00DD  
                                        l196 0FDC                                          l293 01B2  
                                        l285 0115                                          l358 02A6  
                                        l278 0110                                          l199 0FDE  
                                        _PR2 001B                                          __@i 0079  
                               __CFG_BORV$HI 0000                                          wreg 0009  
      __date_time_ConvertByteToDate@dateTime 0024                                         S2316 0800  
                                       S2318 0810                              __@isTimeToAlerm 0078  
                               __CFG_LVP$OFF 0000                                         l2002 018D  
                                       l2100 027D                                         l2004 018F  
                                       l2012 01A4                                         l2110 0297  
                                       l2030 01CE                                         l2120 02B0  
                                       l2104 028F                                         l2040 01E0  
                                       l2008 0194                                         l2202 03CE  
                                       l2122 02B5                                         l2130 02CA  
                                       l2050 020E                                         l2114 029D  
                                       l2018 01BA                                         l2204 03E0  
                                       l2140 031D                                         l2132 02DA  
                                       l2124 02BC                                         l2028 01CD  
                                       l2214 0405                                         l2142 032F  
                                       l2126 02C3                                         l2118 02AB  
                                       l2054 021A                                         l2046 01E9  
                                       l2208 03E9                                         l2152 0350  
                                       l2136 0308                                         l2080 0267  
                                       l2072 025A                                         l2064 0229  
                                       l2056 0221                                         l2162 0376  
                                       l2138 031A                                         l2058 0222  
                                       l2148 033D                                         l2092 0276  
                                       l2084 026E                                         l2068 024E  
                                       l2182 039D                                         l2174 0392  
                                       l2086 026F                                         l2184 03AE  
                                       l2096 027B                                         l1802 0FCE  
                                       l2194 03BD                                         l1708 0E98  
                                       l1814 0FF8                                         l1662 0ECC  
                                       l2198 03C5                                         l1760 048A  
                                       l1816 0FD0                                         l1680 0F39  
                                       l1770 051A                                         l1754 042A  
                                       l1682 0F3F                                         l1764 04DC  
                                       l1756 044A                                         l1766 04FC  
                                       l1758 046A                                         l1790 0FB3  
                                       l1838 07D6                                         l1776 0538  
                                       l1952 0128                                         l1944 0108  
                                       l1970 014F                                         l1962 0135  
                                       l1938 0100                                         l1948 0118  
                                       l1958 0132                                         l1966 013A  
                                       l1992 0173                                         l1994 0175  
                                       l1986 0169                                         l1978 015A  
                                       l1998 017B                                         STR_1 07AA  
                               __CFG_WDTE$ON 0000                                         STR_2 07A6  
                                       STR_3 079E                                         STR_4 079A  
                                       STR_5 07B2                                         STR_6 07A2  
                                       STR_7 07AE                                         STR_8 074A  
                                       STR_9 0763                                         u1415 05D5  
                                       _LATC 010E                                         u1425 05F6  
                                       u1505 04F0                                         u1435 0617  
                                       u1515 050E                                         u1525 052C  
                                       u1445 065C                                         u1630 0FF6  
                                       u1455 067B                                         u1465 069B  
                                       u1385 0EEB                                         u1475 043E  
                                       u1485 045E                                         u2517 00A3  
                                       u1495 047E                                         u2527 0EAC  
                                       u2295 0381                                         u2537 0FD7  
                                _outputEvent 0059                                         _TMR0 0015  
                                       _TMR2 001A                                 __CFG_WRT$OFF 0000  
                              __CFG_FCMEN$ON 0000                                         _main 0095  
                              _CURSOR_BITMAP 0731                                         fsr0h 0005  
                                       fsr1h 0007                                         fsr0l 0004  
                                       indf0 0000                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                              __CFG_BOREN$ON 0000                                         ltemp 007E  
                                       start 0071                                         ttemp 007E  
                                       wtemp 007E                                __CFG_IESO$OFF 0000  
                            __ds1307_GetData 0F9F                                __CFG_LPBOR$ON 0000  
                                      ?_main 0070                                        STR_10 0757  
                                      STR_11 077E                                        STR_12 0751  
                                      STR_20 077E                                        STR_21 0786  
                                      STR_13 077E                                        STR_14 0786  
                                      STR_22 0739                                        STR_15 0776  
                                      STR_16 078D                                        STR_17 0794  
                                      STR_18 0757                                        STR_19 076D  
                                      _T2CON 001C                                        _IOCIE 005B  
                                      _IOCIF 0058                                        i1l202 0F9A  
                                      i1l203 0F9B                                        i1l410 001C  
                                      i1l412 002E                                        i1l190 0F68  
                                      i1l422 006E                                        i1l183 0F5A  
                                      i1l175 0F48                                        i1l186 0F63  
                                      i1l178 0F4F                                        i1l187 0F64  
                                      i1l196 0F7D                                        i1l199 0F7F  
                         main@prevPortAState 005B                                        _PORTA 000C  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                                __CFG_PWRTE$ON 0000  
            __end_of_PARALLEL_LCD_ROW_SELECT 0715                                        _alerm 0051  
                                      main@i 0048                                 main@tmpValue 0040  
                                      ltemp0 007E                                        ltemp1 0082  
                                      ltemp2 0086                                        ltemp3 0080  
                                      ttemp0 007E                                        ttemp1 0081  
                                      ttemp2 0084                                        ttemp3 0087  
                                      ttemp4 007F                                        status 0003  
                                      wtemp0 007E                                        wtemp1 0080  
                                      wtemp2 0082                                        wtemp3 0084  
                                      wtemp4 0086                                        wtemp5 0088  
                                      wtemp6 007F                               __CFG_MCLRE$OFF 0000  
                            __initialization 0073                                 __end_of_main 0422  
                           __ds1307_SetClock 07B6                                       ??_main 0028  
                          __end_of_HEX_TABLE 0710                   __end_of_VALUE_INFORMATIONS 0731  
              __parallel_lcd_SetCgram@bitmap 0023                                main@isNonZero 0041  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _IOCAF3 1C9B  
                    __end_of__ds1307_GetData 1000                                       i1l2252 003D  
                                     i1l2260 0053                                       i1l2236 001D  
                                     i1l2246 0035                                       i1l2264 005B  
                                     i1l2256 004B                                       i1l2268 0062  
                                     i1l1854 0F58                                       i1l1880 0F72  
                                     i1l1866 0F71                                       i1l1878 0F98  
                                     u254_27 0F78                                       u187_20 0F96  
                                     _TMR0IE 005D                                       _TMR0IF 005A  
                                     _PWM3EN 30CF                                       _TMR2IE 0489  
                                     _TMR2IF 0089                                       _PWM3OE 30CE  
                                     _TMR2ON 00E2                                       _SSP1IF 008B  
                   ??__parallel_lcd_ClearRow 0023             __end_of__parallel_lcd_Initialize 0E8F  
                             __CFG_STVREN$ON 0000                     ??__parallel_lcd_SetCgram 0025  
       __private_parallel_lcd_WriteByte@data 0022                      __end_of__initialization 0092  
                  __ds1307_GetData@dataCount 0025          __parallel_lcd_ClearPartial@position 0025  
      __date_time_ConvertByteToTime@dateTime 0023                               __pcstackCOMMON 0070  
                               __pidataBANK0 0E4F                                 __pidataBANK1 0E61  
       __end_of__parallel_lcd_WriteCharacter 0E61        __size_of__parallel_lcd_WriteCharacter 000E  
               __parallel_lcd_WriteCharacter 0E53                  ??__parallel_lcd_WriteString 0025  
                             _OPTION_REGbits 0095                                   __pbssBANK0 0049  
                           ?__ds1307_GetData 0020          __size_of__parallel_lcd_ClearPartial 0019  
            __size_of__parallel_lcd_ClearRow 001A                                   _editSelect 0055  
                                 __pmaintext 0095                                   __pintentry 0004  
              ?__parallel_lcd_WriteCharacter 0023              __size_of__parallel_lcd_SetCgram 002A  
                i1__ds1307_GetData@dataCount 0075                                   __size_of__ 006D  
                             main@keyPressed 0047                                      _PWM3DCH 0618  
                                    _PWM3DCL 0617                                      _PWM3POL 30CC  
                                    _SSP1ADD 0212                                      _SSP1BUF 0211  
          __size_of__parallel_lcd_Initialize 0018                    ?__parallel_lcd_Initialize 0070  
                  __parallel_lcd_WriteString 0EC5                             _currentEditValue 0053  
               i1__ds1307_GetData@ramAddress 0070                     __end_of__ds1307_SetClock 07F4  
   __end_of__date_time_ConvertByteToDiscrete 0543    __size_of__date_time_ConvertByteToDiscrete 0121  
         ??__date_time_ConvertByteToDiscrete 0022            ?__date_time_ConvertByteToDiscrete 0020  
           __date_time_ConvertByteToDiscrete 0422                                   _keyEvents_ 0056  
                          main@COMPARE_UNITS 0710                                   _menuSelect 0058  
                                    _datePtr 006A                                   _initialize 06A7  
                                    __ptext1 06A7                                      __ptext2 0F0F  
                                    __ptext3 0EC5                                      __ptext4 0E53  
                     __parallel_lcd_ClearRow 06E4                                      __ptext5 0EE5  
                                    __ptext6 0E77                                      __ptext7 06E4  
                                    __ptext8 0E8F                                      __ptext9 0EA8  
                                  _IOCANbits 0392                               _blinkPrescaler 0052  
                                  _HEX_TABLE 0700                                      clrloop0 07F5  
                       end_of_initialization 0092                       __parallel_lcd_SetCgram 0EE5  
        __parallel_lcd_WriteStringClearing@i 0027                             _currentValueInfo 004F  
                                    init_ram 07FA                           _VALUE_INFORMATIONS 0715  
                                    initloop 07FB                    __end_ofmain@COMPARE_UNITS 0713  
         __end_of__parallel_lcd_ClearPartial 0EA8                   __parallel_lcd_ClearPartial 0E8F  
                    _PARALLEL_LCD_ROW_SELECT 0713                ?__date_time_ConvertByteToDate 0020  
              ?__date_time_ConvertByteToTime 0020                                 __pstringtext 0700  
                               _machineState 0057                             __CFG_FOSC$INTOSC 0000  
                             main@string_664 0043          __parallel_lcd_WriteString@stringPtr 0023  
                            _STR_DAY_OF_WEEK 00A0                                   main@string 002B  
    __date_time_ConvertByteToDiscrete@select 0021      __date_time_ConvertByteToDiscrete@string 0020  
                                ?_initialize 0070                                 _MESSAGE_MENU 00AE  
          __parallel_lcd_ClearPartial@length 0023                          start_initialization 0073  
        __date_time_ConvertByteToDate@stinrg 0020                        __end_of_CURSOR_BITMAP 0739  
         __size_of__parallel_lcd_WriteString 0020                   __ds1307_GetData@ramAddress 0020  
                         __ds1307_SetClock@i 0022                                  __pdataBANK0 006B  
                                __pdataBANK1 00A0               ??__date_time_ConvertByteToDate 0021  
             ??__date_time_ConvertByteToTime 0021             __parallel_lcd_ClearRow@rowSelect 0024  
      __parallel_lcd_WriteCharacter@position 0024                                  _dateCurrent 005C  
                                  ___latbits 0001                                __pcstackBANK0 0020  
                                  __end_of__ 0071                            i1__ds1307_GetData 0F45  
                        __size_of_initialize 003D                            ?__ds1307_SetClock 0070  
                                  _dateTimer 0063                           ?i1__ds1307_GetData 0070  
                         ??__ds1307_SetClock 0020                     __size_of__ds1307_GetData 0061  
          __end_of__parallel_lcd_WriteString 0EE5                      ?__parallel_lcd_ClearRow 0070  
                   __parallel_lcd_ClearRow@i 0025                              main@compareUnit 0042  
                        ??i1__ds1307_GetData 0072                     i1__ds1307_GetData@length 0071  
               ??__parallel_lcd_ClearPartial 0024                                    __pswtext1 0800  
                                  __pswtext2 0810                               _cursorPosition 0054  
                    ?__parallel_lcd_SetCgram 0023      __end_of__private_parallel_lcd_WriteByte 0EC5  
   __size_of__private_parallel_lcd_WriteByte 001D            ??__private_parallel_lcd_WriteByte 0021  
           ?__private_parallel_lcd_WriteByte 0020              __private_parallel_lcd_WriteByte 0EA8  
                  __end_ofi1__ds1307_GetData 0F9F                                     _LATBbits 010D  
                                  clear_ram0 07F4               __end_of__parallel_lcd_ClearRow 06FE  
                ?__parallel_lcd_ClearPartial 0023                                    main@F4267 006B  
                                   _SSP1CON1 0215           __parallel_lcd_WriteString@position 0026  
                                   _SSP1STAT 0214       __parallel_lcd_WriteCharacter@character 0023  
             __end_of__parallel_lcd_SetCgram 0F0F                     __parallel_lcd_Initialize 0E77  
                   __parallel_lcd_SetCgram@i 0027  __parallel_lcd_WriteStringClearing@stringPtr 0023  
          __private_parallel_lcd_WriteByte@r 0020                                 ??_initialize 0020  
                          ??__ds1307_GetData 0022              __parallel_lcd_SetCgram@charCode 0026  
                      __ds1307_SetClock@date 0021                                     __ptext10 07B6  
                                   __ptext11 0F9F                                     __ptext12 0632  
                                   __ptext13 0422                                     __ptext14 0543  
                                   __ptext16 0F45                                 _SSP1CON2bits 0216  
                 __size_ofi1__ds1307_GetData 005A                                     _keyCount 0049  
                              __size_of_main 038D                           __end_of_initialize 06E4  
  __end_of__parallel_lcd_WriteStringClearing 0F45   __size_of__parallel_lcd_WriteStringClearing 0036  
        ??__parallel_lcd_WriteStringClearing 0025           ?__parallel_lcd_WriteStringClearing 0023  
          __parallel_lcd_WriteStringClearing 0F0F                 __parallel_lcd_ClearPartial@i 0026  
 __parallel_lcd_WriteStringClearing@position 0026                              main@valueString 003C  
        __date_time_ConvertByteToTime@string 0020                                   _INTCONbits 000B  
             ??__parallel_lcd_WriteCharacter 0024    __date_time_ConvertByteToDiscrete@dateTime 0025  
                                   intlevel1 0000                       i1__ds1307_GetData@date 0074  
                          __CFG_CLKOUTEN$OFF 0000                                   _OSCCONbits 0099  
                                _portAState_ 005A                    __size_of__ds1307_SetClock 003E  
                     __ds1307_GetData@length 0021         __end_of__date_time_ConvertByteToDate 0632  
      __size_of__date_time_ConvertByteToDate 00EF                 __date_time_ConvertByteToDate 0543  
       __end_of__date_time_ConvertByteToTime 06A7        __size_of__date_time_ConvertByteToTime 0075  
               __date_time_ConvertByteToTime 0632                         __ds1307_GetData@date 0024  
