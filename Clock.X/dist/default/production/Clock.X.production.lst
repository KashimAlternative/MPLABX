

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 13 11:37:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext2,local,class=CONST,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     	;# 
    37  0001                     	;# 
    38  0002                     	;# 
    39  0003                     	;# 
    40  0004                     	;# 
    41  0005                     	;# 
    42  0006                     	;# 
    43  0007                     	;# 
    44  0008                     	;# 
    45  0009                     	;# 
    46  000A                     	;# 
    47  000B                     	;# 
    48  000C                     	;# 
    49  000D                     	;# 
    50  000E                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  008C                     	;# 
    64  008D                     	;# 
    65  008E                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010D                     	;# 
    82  010E                     	;# 
    83  0111                     	;# 
    84  0112                     	;# 
    85  0113                     	;# 
    86  0114                     	;# 
    87  0115                     	;# 
    88  0116                     	;# 
    89  0117                     	;# 
    90  0118                     	;# 
    91  0119                     	;# 
    92  011D                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  018E                     	;# 
    96  0191                     	;# 
    97  0191                     	;# 
    98  0192                     	;# 
    99  0193                     	;# 
   100  0193                     	;# 
   101  0194                     	;# 
   102  0195                     	;# 
   103  0196                     	;# 
   104  0197                     	;# 
   105  0199                     	;# 
   106  019A                     	;# 
   107  019B                     	;# 
   108  019B                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019E                     	;# 
   112  019F                     	;# 
   113  020C                     	;# 
   114  020D                     	;# 
   115  0211                     	;# 
   116  0211                     	;# 
   117  0212                     	;# 
   118  0212                     	;# 
   119  0213                     	;# 
   120  0213                     	;# 
   121  0214                     	;# 
   122  0214                     	;# 
   123  0215                     	;# 
   124  0215                     	;# 
   125  0215                     	;# 
   126  0216                     	;# 
   127  0216                     	;# 
   128  0217                     	;# 
   129  0217                     	;# 
   130  0391                     	;# 
   131  0392                     	;# 
   132  0393                     	;# 
   133  0394                     	;# 
   134  0395                     	;# 
   135  0396                     	;# 
   136  0498                     	;# 
   137  0498                     	;# 
   138  0499                     	;# 
   139  049A                     	;# 
   140  049B                     	;# 
   141  049B                     	;# 
   142  049C                     	;# 
   143  049E                     	;# 
   144  049F                     	;# 
   145  0611                     	;# 
   146  0612                     	;# 
   147  0613                     	;# 
   148  0613                     	;# 
   149  0614                     	;# 
   150  0615                     	;# 
   151  0616                     	;# 
   152  0616                     	;# 
   153  0617                     	;# 
   154  0618                     	;# 
   155  0619                     	;# 
   156  0619                     	;# 
   157  061A                     	;# 
   158  061B                     	;# 
   159  061C                     	;# 
   160  061C                     	;# 
   161  0691                     	;# 
   162  0692                     	;# 
   163  0693                     	;# 
   164  0694                     	;# 
   165  0695                     	;# 
   166  0F0F                     	;# 
   167  0F10                     	;# 
   168  0F11                     	;# 
   169  0F12                     	;# 
   170  0F13                     	;# 
   171  0F14                     	;# 
   172  0F15                     	;# 
   173  0F16                     	;# 
   174  0F17                     	;# 
   175  0F18                     	;# 
   176  0F19                     	;# 
   177  0F1A                     	;# 
   178  0F1B                     	;# 
   179  0F1C                     	;# 
   180  0F1D                     	;# 
   181  0F1E                     	;# 
   182  0F1F                     	;# 
   183  0F20                     	;# 
   184  0F21                     	;# 
   185  0F22                     	;# 
   186  0F23                     	;# 
   187  0F24                     	;# 
   188  0F25                     	;# 
   189  0F26                     	;# 
   190  0F27                     	;# 
   191  0F28                     	;# 
   192  0F29                     	;# 
   193  0F2A                     	;# 
   194  0F2B                     	;# 
   195  0F2C                     	;# 
   196  0F2D                     	;# 
   197  0F2E                     	;# 
   198  0F2F                     	;# 
   199  0F8C                     	;# 
   200  0F8D                     	;# 
   201  0F91                     	;# 
   202  0F95                     	;# 
   203  0F96                     	;# 
   204  0F97                     	;# 
   205  0F9C                     	;# 
   206  0F9D                     	;# 
   207  0F9E                     	;# 
   208  0FE3                     	;# 
   209  0FE4                     	;# 
   210  0FE5                     	;# 
   211  0FE6                     	;# 
   212  0FE7                     	;# 
   213  0FE8                     	;# 
   214  0FE9                     	;# 
   215  0FEA                     	;# 
   216  0FEB                     	;# 
   217  0FED                     	;# 
   218  0FEE                     	;# 
   219  0FEF                     	;# 
   220                           
   221                           	psect	idataBANK0
   222  0E3E                     __pidataBANK0:	
   223                           
   224                           ;initializer for main@F4297
   225  0E3E  3430               	retlw	48
   226  0E3F  3430               	retlw	48
   227  0E40  3430               	retlw	48
   228  0E41  3400               	retlw	0
   229                           
   230                           	psect	idataBANK1
   231  0E5C                     __pidataBANK1:	
   232                           
   233                           ;initializer for _STR_DAY_OF_WEEK
   234  0E5C  34B3               	retlw	low (STR_1| (0+32768))
   235  0E5D  3487               	retlw	high (STR_1| (0+32768))
   236  0E5E  34AF               	retlw	low (STR_2| (0+32768))
   237  0E5F  3487               	retlw	high (STR_2| (0+32768))
   238  0E60  34A7               	retlw	low (STR_3| (0+32768))
   239  0E61  3487               	retlw	high (STR_3| (0+32768))
   240  0E62  34A3               	retlw	low (STR_4| (0+32768))
   241  0E63  3487               	retlw	high (STR_4| (0+32768))
   242  0E64  34BB               	retlw	low (STR_5| (0+32768))
   243  0E65  3487               	retlw	high (STR_5| (0+32768))
   244  0E66  34AB               	retlw	low (STR_6| (0+32768))
   245  0E67  3487               	retlw	high (STR_6| (0+32768))
   246  0E68  34B7               	retlw	low (STR_7| (0+32768))
   247  0E69  3487               	retlw	high (STR_7| (0+32768))
   248                           
   249                           ;initializer for _MESSAGE_MENU
   250  0E6A  344A               	retlw	low (STR_8| (0+32768))
   251  0E6B  3487               	retlw	high (STR_8| (0+32768))
   252  0E6C  3463               	retlw	low (STR_9| (0+32768))
   253  0E6D  3487               	retlw	high (STR_9| (0+32768))
   254  0E6E  3457               	retlw	low (STR_10| (0+32768))
   255  0E6F  3487               	retlw	high (STR_10| (0+32768))
   256  0E70  3487               	retlw	low (STR_11| (0+32768))
   257  0E71  3487               	retlw	high (STR_11| (0+32768))
   258                           
   259                           	psect	stringtext
   260  0700                     __pstringtext:	
   261  0700                     _HEX_TABLE:	
   262  0700  3430               	retlw	48
   263  0701  3431               	retlw	49
   264  0702  3432               	retlw	50
   265  0703  3433               	retlw	51
   266  0704  3434               	retlw	52
   267  0705  3435               	retlw	53
   268  0706  3436               	retlw	54
   269  0707  3437               	retlw	55
   270  0708  3438               	retlw	56
   271  0709  3439               	retlw	57
   272  070A  3441               	retlw	65
   273  070B  3442               	retlw	66
   274  070C  3443               	retlw	67
   275  070D  3444               	retlw	68
   276  070E  3445               	retlw	69
   277  070F  3446               	retlw	70
   278  0710                     __end_of_HEX_TABLE:	
   279  0710                     main@COMPARE_UNITS:	
   280  0710  3464               	retlw	100
   281  0711  340A               	retlw	10
   282  0712  3401               	retlw	1
   283  0713                     __end_ofmain@COMPARE_UNITS:	
   284  0713                     _PARALLEL_LCD_ROW_SELECT:	
   285  0713  3480               	retlw	128
   286  0714  34C0               	retlw	192
   287  0715                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   288  0715                     _VALUE_INFORMATIONS:	
   289  0715  3482               	retlw	130
   290  0716  3402               	retlw	2
   291  0717  3499               	retlw	153
   292  0718  3400               	retlw	0
   293  0719  3485               	retlw	133
   294  071A  3402               	retlw	2
   295  071B  3412               	retlw	18
   296  071C  3401               	retlw	1
   297  071D  3488               	retlw	136
   298  071E  3402               	retlw	2
   299  071F  3431               	retlw	49
   300  0720  3401               	retlw	1
   301  0721  348C               	retlw	140
   302  0722  3403               	retlw	3
   303  0723  3407               	retlw	7
   304  0724  3401               	retlw	1
   305  0725  34C0               	retlw	192
   306  0726  3402               	retlw	2
   307  0727  3423               	retlw	35
   308  0728  3400               	retlw	0
   309  0729  34C3               	retlw	195
   310  072A  3402               	retlw	2
   311  072B  3459               	retlw	89
   312  072C  3400               	retlw	0
   313  072D  34C6               	retlw	198
   314  072E  3402               	retlw	2
   315  072F  3459               	retlw	89
   316  0730  3400               	retlw	0
   317  0731                     __end_of_VALUE_INFORMATIONS:	
   318  0731                     _CURSOR_BITMAP:	
   319  0731  3410               	retlw	16
   320  0732  3418               	retlw	24
   321  0733  341C               	retlw	28
   322  0734  341E               	retlw	30
   323  0735  341C               	retlw	28
   324  0736  3418               	retlw	24
   325  0737  3410               	retlw	16
   326  0738  3400               	retlw	0
   327  0739                     __end_of_CURSOR_BITMAP:	
   328  000B                     _INTCONbits	set	11
   329  0011                     _PIR1bits	set	17
   330  000C                     _PORTA	set	12
   331  001B                     _PR2	set	27
   332  001C                     _T2CONbits	set	28
   333  0015                     _TMR0	set	21
   334  001A                     _TMR2	set	26
   335  005B                     _IOCIE	set	91
   336  0058                     _IOCIF	set	88
   337  008B                     _SSP1IF	set	139
   338  0095                     _OPTION_REGbits	set	149
   339  0099                     _OSCCONbits	set	153
   340  0091                     _PIE1bits	set	145
   341  008C                     _TRISA	set	140
   342  008D                     _TRISB	set	141
   343  008E                     _TRISC	set	142
   344  010D                     _LATBbits	set	269
   345  010E                     _LATC	set	270
   346  018C                     _ANSELA	set	396
   347  018D                     _ANSELB	set	397
   348  018E                     _ANSELC	set	398
   349  0212                     _SSP1ADD	set	530
   350  0211                     _SSP1BUF	set	529
   351  0215                     _SSP1CON1	set	533
   352  0216                     _SSP1CON2bits	set	534
   353  0214                     _SSP1STAT	set	532
   354  0214                     _SSPSTATbits	set	532
   355  0392                     _IOCANbits	set	914
   356  1C9B                     _IOCAF3	set	7323
   357  0619                     _PWM3CONbits	set	1561
   358  0618                     _PWM3DCH	set	1560
   359  0617                     _PWM3DCL	set	1559
   360  30CE                     _PWM3OE	set	12494
   361  0739                     STR_20:	
   362  0739  3452               	retlw	82	;'R'
   363  073A  3465               	retlw	101	;'e'
   364  073B  3463               	retlw	99	;'c'
   365  073C  3465               	retlw	101	;'e'
   366  073D  3469               	retlw	105	;'i'
   367  073E  3476               	retlw	118	;'v'
   368  073F  3465               	retlw	101	;'e'
   369  0740  3420               	retlw	32	;' '
   370  0741  3445               	retlw	69	;'E'
   371  0742  3472               	retlw	114	;'r'
   372  0743  3472               	retlw	114	;'r'
   373  0744  346F               	retlw	111	;'o'
   374  0745  3472               	retlw	114	;'r'
   375  0746  3420               	retlw	32	;' '
   376  0747  3421               	retlw	33	;'!'
   377  0748  3421               	retlw	33	;'!'
   378  0749  3400               	retlw	0
   379  074A                     STR_8:	
   380  074A  3441               	retlw	65	;'A'
   381  074B  3464               	retlw	100	;'d'
   382  074C  346A               	retlw	106	;'j'
   383  074D  3475               	retlw	117	;'u'
   384  074E  3473               	retlw	115	;'s'
   385  074F  3474               	retlw	116	;'t'
   386  0750  3420               	retlw	32	;' '
   387  0751  3443               	retlw	67	;'C'
   388  0752  346C               	retlw	108	;'l'
   389  0753  346F               	retlw	111	;'o'
   390  0754  3463               	retlw	99	;'c'
   391  0755  346B               	retlw	107	;'k'
   392  0756  3400               	retlw	0
   393  0757                     STR_10:	
   394  0757  3442               	retlw	66	;'B'
   395  0758  3475               	retlw	117	;'u'
   396  0759  347A               	retlw	122	;'z'
   397  075A  347A               	retlw	122	;'z'
   398  075B  3465               	retlw	101	;'e'
   399  075C  3472               	retlw	114	;'r'
   400  075D  3420               	retlw	32	;' '
   401  075E  3454               	retlw	84	;'T'
   402  075F  3465               	retlw	101	;'e'
   403  0760  3473               	retlw	115	;'s'
   404  0761  3474               	retlw	116	;'t'
   405  0762  3400               	retlw	0
   406  0763                     STR_9:	
   407  0763  3453               	retlw	83	;'S'
   408  0764  3465               	retlw	101	;'e'
   409  0765  3474               	retlw	116	;'t'
   410  0766  3420               	retlw	32	;' '
   411  0767  3454               	retlw	84	;'T'
   412  0768  3469               	retlw	105	;'i'
   413  0769  346D               	retlw	109	;'m'
   414  076A  3465               	retlw	101	;'e'
   415  076B  3472               	retlw	114	;'r'
   416  076C  3400               	retlw	0
   417  076D                     STR_12:	
   418  076D  3442               	retlw	66	;'B'
   419  076E  346F               	retlw	111	;'o'
   420  076F  346F               	retlw	111	;'o'
   421  0770  3474               	retlw	116	;'t'
   422  0771  3420               	retlw	32	;' '
   423  0772  342E               	retlw	46	;'.'
   424  0773  342E               	retlw	46	;'.'
   425  0774  342E               	retlw	46	;'.'
   426  0775  3400               	retlw	0
   427  0776                     STR_17:	
   428  0776  3450               	retlw	80	;'P'
   429  0777  3465               	retlw	101	;'e'
   430  0778  3472               	retlw	114	;'r'
   431  0779  3469               	retlw	105	;'i'
   432  077A  346F               	retlw	111	;'o'
   433  077B  3464               	retlw	100	;'d'
   434  077C  3420               	retlw	32	;' '
   435  077D  343D               	retlw	61	;'='
   436  077E  3400               	retlw	0
   437  077F                     STR_13:	
   438  077F  3441               	retlw	65	;'A'
   439  0780  344C               	retlw	76	;'L'
   440  0781  3445               	retlw	69	;'E'
   441  0782  3452               	retlw	82	;'R'
   442  0783  344D               	retlw	77	;'M'
   443  0784  3421               	retlw	33	;'!'
   444  0785  3421               	retlw	33	;'!'
   445  0786  3400               	retlw	0
   446  0787                     STR_11:	
   447  0787  3456               	retlw	86	;'V'
   448  0788  3465               	retlw	101	;'e'
   449  0789  3472               	retlw	114	;'r'
   450  078A  3473               	retlw	115	;'s'
   451  078B  3469               	retlw	105	;'i'
   452  078C  346F               	retlw	111	;'o'
   453  078D  346E               	retlw	110	;'n'
   454  078E  3400               	retlw	0
   455  078F                     STR_19:	
   456  078F  3430               	retlw	48	;'0'
   457  0790  3430               	retlw	48	;'0'
   458  0791  342E               	retlw	46	;'.'
   459  0792  3431               	retlw	49	;'1'
   460  0793  3430               	retlw	48	;'0'
   461  0794  3430               	retlw	48	;'0'
   462  0795  3400               	retlw	0
   463  0796                     STR_14:	
   464  0796  3461               	retlw	97	;'a'
   465  0797  3464               	retlw	100	;'d'
   466  0798  346A               	retlw	106	;'j'
   467  0799  3475               	retlw	117	;'u'
   468  079A  3473               	retlw	115	;'s'
   469  079B  3474               	retlw	116	;'t'
   470  079C  3400               	retlw	0
   471  079D                     STR_15:	
   472  079D  3474               	retlw	116	;'t'
   473  079E  3469               	retlw	105	;'i'
   474  079F  346D               	retlw	109	;'m'
   475  07A0  3465               	retlw	101	;'e'
   476  07A1  3472               	retlw	114	;'r'
   477  07A2  3400               	retlw	0
   478  07A3                     STR_4:	
   479  07A3  3457               	retlw	87	;'W'
   480  07A4  3445               	retlw	69	;'E'
   481  07A5  3444               	retlw	68	;'D'
   482  07A6  3400               	retlw	0
   483  07A7                     STR_3:	
   484  07A7  3454               	retlw	84	;'T'
   485  07A8  3455               	retlw	85	;'U'
   486  07A9  3445               	retlw	69	;'E'
   487  07AA  3400               	retlw	0
   488  07AB                     STR_6:	
   489  07AB  3446               	retlw	70	;'F'
   490  07AC  3452               	retlw	82	;'R'
   491  07AD  3449               	retlw	73	;'I'
   492  07AE  3400               	retlw	0
   493  07AF                     STR_2:	
   494  07AF  344D               	retlw	77	;'M'
   495  07B0  344F               	retlw	79	;'O'
   496  07B1  344E               	retlw	78	;'N'
   497  07B2  3400               	retlw	0
   498  07B3                     STR_1:	
   499  07B3  3453               	retlw	83	;'S'
   500  07B4  3455               	retlw	85	;'U'
   501  07B5  344E               	retlw	78	;'N'
   502  07B6  3400               	retlw	0
   503  07B7                     STR_7:	
   504  07B7  3453               	retlw	83	;'S'
   505  07B8  3441               	retlw	65	;'A'
   506  07B9  3454               	retlw	84	;'T'
   507  07BA  3400               	retlw	0
   508  07BB                     STR_5:	
   509  07BB  3454               	retlw	84	;'T'
   510  07BC  3448               	retlw	72	;'H'
   511  07BD  3455               	retlw	85	;'U'
   512  07BE  3400               	retlw	0
   513  0787                     
   514                           ; #config settings
   515  0000                     
   516                           	psect	cinit
   517  0073                     start_initialization:	
   518  0073                     __initialization:	
   519                           
   520                           ; Clear objects allocated to COMMON
   521  0073  01FA               	clrf	__pbssCOMMON& (0+127)
   522                           
   523                           ; Clear objects allocated to BANK0
   524  0074  304B               	movlw	low __pbssBANK0
   525  0075  0084               	movwf	4
   526  0076  3000               	movlw	high __pbssBANK0
   527  0077  0085               	movwf	5
   528  0078  3021               	movlw	33
   529  0079  318E  2648  3180   	fcall	clear_ram0
   530                           
   531                           ; Initialize objects allocated to BANK0
   532  007C  303E               	movlw	low __pidataBANK0
   533  007D  0084               	movwf	4
   534  007E  308E               	movlw	(high __pidataBANK0)| (0+128)
   535  007F  0085               	movwf	5
   536  0080  306C               	movlw	low __pdataBANK0
   537  0081  0086               	movwf	6
   538  0082  3000               	movlw	high __pdataBANK0
   539  0083  0087               	movwf	7
   540  0084  3004               	movlw	4
   541  0085  318E  2642  3180   	fcall	init_ram
   542                           
   543                           ; Initialize objects allocated to BANK1
   544  0088  305C               	movlw	low __pidataBANK1
   545  0089  0084               	movwf	4
   546  008A  308E               	movlw	(high __pidataBANK1)| (0+128)
   547  008B  0085               	movwf	5
   548  008C  30A0               	movlw	low __pdataBANK1
   549  008D  0086               	movwf	6
   550  008E  3000               	movlw	high __pdataBANK1
   551  008F  0087               	movwf	7
   552  0090  3016               	movlw	22
   553  0091  318E  2642         	fcall	init_ram
   554  0093                     end_of_initialization:	
   555                           ;End of C runtime variable initialization code
   556                           
   557  0093                     __end_of__initialization:	
   558  0093  0020               	movlb	0
   559  0094  3180  2896         	ljmp	_main	;jump to C main() function
   560                           
   561                           	psect	bssCOMMON
   562  007A                     __pbssCOMMON:	
   563  007A                     _alerm:	
   564  007A                     	ds	1
   565                           
   566                           	psect	bssBANK0
   567  004B                     __pbssBANK0:	
   568  004B                     _keyCount:	
   569  004B                     	ds	6
   570  0051                     _currentValueInfo:	
   571  0051                     	ds	2
   572  0053                     _blinkPrescaler:	
   573  0053                     	ds	1
   574  0054                     _currentEditValue:	
   575  0054                     	ds	1
   576  0055                     _cursorPosition:	
   577  0055                     	ds	1
   578  0056                     _editSelect:	
   579  0056                     	ds	1
   580  0057                     _keyEvents_:	
   581  0057                     	ds	1
   582  0058                     _machineState_:	
   583  0058                     	ds	1
   584  0059                     _menuSelect:	
   585  0059                     	ds	1
   586  005A                     _outputEvent:	
   587  005A                     	ds	1
   588  005B                     _portAState_:	
   589  005B                     	ds	1
   590  005C                     main@prevPortAState:	
   591  005C                     	ds	1
   592  005D                     _dateCurrent:	
   593  005D                     	ds	7
   594  0064                     _dateTimer:	
   595  0064                     	ds	7
   596  006B                     _datePtr:	
   597  006B                     	ds	1
   598                           
   599                           	psect	dataBANK0
   600  006C                     __pdataBANK0:	
   601  006C                     main@F4297:	
   602  006C                     	ds	4
   603                           
   604                           	psect	dataBANK1
   605  00A0                     __pdataBANK1:	
   606  00A0                     _STR_DAY_OF_WEEK:	
   607  00A0                     	ds	14
   608  00AE                     _MESSAGE_MENU:	
   609  00AE                     	ds	8
   610                           
   611                           	psect	clrtext
   612  0E48                     clear_ram0:	
   613                           ;	Called with FSR0 containing the base address, and
   614                           ;	WREG with the size to clear
   615                           
   616  0E48  0064               	clrwdt	;clear the watchdog before getting into this loop
   617  0E49                     clrloop0:	
   618  0E49  0180               	clrf	0	;clear RAM location pointed to by FSR
   619  0E4A  3101               	addfsr 0,1
   620  0E4B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   621  0E4C  2E49               	goto	clrloop0	;have we reached the end yet?
   622  0E4D  3400               	retlw	0	;all done for this memory range, return
   623                           
   624                           	psect	inittext
   625  0E42                     init_ram:	
   626  0E42  00FE               	movwf	126
   627  0E43                     initloop:	
   628  0E43  0012               	moviw fsr0++
   629  0E44  001E               	movwi fsr1++
   630  0E45  0BFE               	decfsz	126,f
   631  0E46  2E43               	goto	initloop
   632  0E47  3400               	retlw	0
   633                           
   634                           	psect	cstackCOMMON
   635  0070                     __pcstackCOMMON:	
   636  0070                     ?_initialize:	
   637  0070                     ?_ParallelLCD_ClearRow:	
   638                           ; 0 bytes @ 0x0
   639                           
   640  0070                     ?__:	
   641                           ; 0 bytes @ 0x0
   642                           
   643  0070                     ?__ds1307_SetClock:	
   644                           ; 0 bytes @ 0x0
   645                           
   646  0070                     ?i1__ds1307_GetData:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_main:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     i1__ds1307_GetData@ramAddress:	
   653                           ; 2 bytes @ 0x0
   654                           
   655                           
   656                           ; 1 bytes @ 0x0
   657  0070                     	ds	1
   658  0071                     i1__ds1307_GetData@length:	
   659                           
   660                           ; 1 bytes @ 0x1
   661  0071                     	ds	1
   662  0072                     ??i1__ds1307_GetData:	
   663                           
   664                           ; 0 bytes @ 0x2
   665  0072                     	ds	2
   666  0074                     i1__ds1307_GetData@date:	
   667                           
   668                           ; 1 bytes @ 0x4
   669  0074                     	ds	1
   670  0075                     i1__ds1307_GetData@dataCount:	
   671                           
   672                           ; 1 bytes @ 0x5
   673  0075                     	ds	1
   674  0076                     ??__:	
   675                           
   676                           ; 0 bytes @ 0x6
   677  0076                     	ds	2
   678  0078                     __@isTimeToAlerm:	
   679                           
   680                           ; 1 bytes @ 0x8
   681  0078                     	ds	1
   682  0079                     __@i:	
   683                           
   684                           ; 1 bytes @ 0x9
   685  0079                     	ds	1
   686                           
   687                           	psect	cstackBANK0
   688  0020                     __pcstackBANK0:	
   689  0020                     ?_ParallelLCD_WriteByte:	
   690  0020                     ??_initialize:	
   691                           ; 0 bytes @ 0x0
   692                           
   693  0020                     ?__date_time_ConvertByteToDate:	
   694                           ; 0 bytes @ 0x0
   695                           
   696  0020                     ?__date_time_ConvertByteToTime:	
   697                           ; 0 bytes @ 0x0
   698                           
   699  0020                     ?__date_time_ConvertByteToDiscrete:	
   700                           ; 0 bytes @ 0x0
   701                           
   702  0020                     ??__ds1307_SetClock:	
   703                           ; 0 bytes @ 0x0
   704                           
   705  0020                     ?__ds1307_GetData:	
   706                           ; 0 bytes @ 0x0
   707                           
   708  0020                     ParallelLCD_WriteByte@r:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0020                     __date_time_ConvertByteToDate@stinrg:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0020                     __date_time_ConvertByteToTime@string:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0020                     __date_time_ConvertByteToDiscrete@string:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0020                     __ds1307_GetData@ramAddress:	
   721                           ; 1 bytes @ 0x0
   722                           
   723                           
   724                           ; 1 bytes @ 0x0
   725  0020                     	ds	1
   726  0021                     ??_ParallelLCD_WriteByte:	
   727  0021                     ??__date_time_ConvertByteToDate:	
   728                           ; 0 bytes @ 0x1
   729                           
   730  0021                     ??__date_time_ConvertByteToTime:	
   731                           ; 0 bytes @ 0x1
   732                           
   733  0021                     __date_time_ConvertByteToDiscrete@select:	
   734                           ; 0 bytes @ 0x1
   735                           
   736  0021                     __ds1307_GetData@length:	
   737                           ; 1 bytes @ 0x1
   738                           
   739  0021                     __ds1307_SetClock@date:	
   740                           ; 1 bytes @ 0x1
   741                           
   742                           
   743                           ; 1 bytes @ 0x1
   744  0021                     	ds	1
   745  0022                     ??__date_time_ConvertByteToDiscrete:	
   746  0022                     ??__ds1307_GetData:	
   747                           ; 0 bytes @ 0x2
   748                           
   749  0022                     ParallelLCD_WriteByte@data:	
   750                           ; 0 bytes @ 0x2
   751                           
   752  0022                     __ds1307_SetClock@i:	
   753                           ; 1 bytes @ 0x2
   754                           
   755                           
   756                           ; 1 bytes @ 0x2
   757  0022                     	ds	1
   758  0023                     ?_ParallelLCD_Initialize:	
   759  0023                     ?_ParallelLCD_WriteCharacter:	
   760                           ; 0 bytes @ 0x3
   761                           
   762  0023                     ?_ParallelLCD_WriteString:	
   763                           ; 0 bytes @ 0x3
   764                           
   765  0023                     ?_ParallelLCD_WriteStringClearing:	
   766                           ; 0 bytes @ 0x3
   767                           
   768  0023                     ??_ParallelLCD_ClearRow:	
   769                           ; 0 bytes @ 0x3
   770                           
   771  0023                     ?_ParallelLCD_ClearPartial:	
   772                           ; 0 bytes @ 0x3
   773                           
   774  0023                     ?_ParallelLCD_SetCgram:	
   775                           ; 0 bytes @ 0x3
   776                           
   777  0023                     ParallelLCD_Initialize@configDisplay:	
   778                           ; 0 bytes @ 0x3
   779                           
   780  0023                     ParallelLCD_WriteCharacter@character:	
   781                           ; 1 bytes @ 0x3
   782                           
   783  0023                     ParallelLCD_WriteString@stringPtr:	
   784                           ; 1 bytes @ 0x3
   785                           
   786  0023                     ParallelLCD_ClearPartial@length:	
   787                           ; 1 bytes @ 0x3
   788                           
   789  0023                     __date_time_ConvertByteToTime@dateTime:	
   790                           ; 1 bytes @ 0x3
   791                           
   792  0023                     ParallelLCD_WriteStringClearing@stringPtr:	
   793                           ; 1 bytes @ 0x3
   794                           
   795  0023                     ParallelLCD_SetCgram@bitmap:	
   796                           ; 2 bytes @ 0x3
   797                           
   798                           
   799                           ; 2 bytes @ 0x3
   800  0023                     	ds	1
   801  0024                     ??_ParallelLCD_WriteCharacter:	
   802  0024                     ??_ParallelLCD_WriteString:	
   803                           ; 0 bytes @ 0x4
   804                           
   805  0024                     ??_ParallelLCD_ClearPartial:	
   806                           ; 0 bytes @ 0x4
   807                           
   808  0024                     ParallelLCD_Initialize@configCursor:	
   809                           ; 0 bytes @ 0x4
   810                           
   811  0024                     ParallelLCD_WriteCharacter@position:	
   812                           ; 1 bytes @ 0x4
   813                           
   814  0024                     ParallelLCD_ClearRow@rowSelect:	
   815                           ; 1 bytes @ 0x4
   816                           
   817  0024                     __date_time_ConvertByteToDate@dateTime:	
   818                           ; 1 bytes @ 0x4
   819                           
   820  0024                     __ds1307_GetData@date:	
   821                           ; 1 bytes @ 0x4
   822                           
   823                           
   824                           ; 1 bytes @ 0x4
   825  0024                     	ds	1
   826  0025                     ??_ParallelLCD_WriteStringClearing:	
   827  0025                     ??_ParallelLCD_SetCgram:	
   828                           ; 0 bytes @ 0x5
   829                           
   830  0025                     ParallelLCD_Initialize@configEntryMode:	
   831                           ; 0 bytes @ 0x5
   832                           
   833  0025                     ParallelLCD_WriteString@position:	
   834                           ; 1 bytes @ 0x5
   835                           
   836  0025                     ParallelLCD_ClearRow@i:	
   837                           ; 1 bytes @ 0x5
   838                           
   839  0025                     ParallelLCD_ClearPartial@position:	
   840                           ; 1 bytes @ 0x5
   841                           
   842  0025                     __date_time_ConvertByteToDiscrete@dateTime:	
   843                           ; 1 bytes @ 0x5
   844                           
   845  0025                     __ds1307_GetData@dataCount:	
   846                           ; 1 bytes @ 0x5
   847                           
   848                           
   849                           ; 1 bytes @ 0x5
   850  0025                     	ds	1
   851  0026                     ??_ParallelLCD_Initialize:	
   852  0026                     ParallelLCD_Initialize@configFunction:	
   853                           ; 0 bytes @ 0x6
   854                           
   855  0026                     ParallelLCD_WriteStringClearing@position:	
   856                           ; 1 bytes @ 0x6
   857                           
   858  0026                     ParallelLCD_ClearPartial@i:	
   859                           ; 1 bytes @ 0x6
   860                           
   861  0026                     ParallelLCD_SetCgram@charCode:	
   862                           ; 1 bytes @ 0x6
   863                           
   864                           
   865                           ; 1 bytes @ 0x6
   866  0026                     	ds	1
   867  0027                     ParallelLCD_WriteStringClearing@i:	
   868  0027                     ParallelLCD_SetCgram@i:	
   869                           ; 1 bytes @ 0x7
   870                           
   871                           
   872                           ; 1 bytes @ 0x7
   873  0027                     	ds	1
   874  0028                     ??_main:	
   875                           
   876                           ; 0 bytes @ 0x8
   877  0028                     	ds	3
   878  002B                     main@string:	
   879                           
   880                           ; 17 bytes @ 0xB
   881  002B                     	ds	17
   882  003C                     main@valueString:	
   883                           
   884                           ; 4 bytes @ 0x1C
   885  003C                     	ds	4
   886  0040                     main@keyReleased:	
   887                           
   888                           ; 1 bytes @ 0x20
   889  0040                     	ds	1
   890  0041                     main@tmpValue:	
   891                           
   892                           ; 1 bytes @ 0x21
   893  0041                     	ds	1
   894  0042                     main@isNonZero:	
   895                           
   896                           ; 1 bytes @ 0x22
   897  0042                     	ds	1
   898  0043                     main@keyChange:	
   899                           
   900                           ; 1 bytes @ 0x23
   901  0043                     	ds	1
   902  0044                     main@compareUnit:	
   903                           
   904                           ; 1 bytes @ 0x24
   905  0044                     	ds	1
   906  0045                     main@string_797:	
   907                           
   908                           ; 4 bytes @ 0x25
   909  0045                     	ds	4
   910  0049                     main@keyPressed:	
   911                           
   912                           ; 1 bytes @ 0x29
   913  0049                     	ds	1
   914  004A                     main@i:	
   915                           
   916                           ; 1 bytes @ 0x2A
   917  004A                     	ds	1
   918                           
   919                           	psect	maintext
   920  0096                     __pmaintext:	
   921 ;;
   922 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   923 ;;
   924 ;; *************** function _main *****************
   925 ;; Defined at:
   926 ;;		line 198 in file "src/main.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  compareUnit     1   36[BANK0 ] unsigned char 
   931 ;;  i               1   42[BANK0 ] unsigned char 
   932 ;;  valueString     4   28[BANK0 ] unsigned char [4]
   933 ;;  isNonZero       1   34[BANK0 ] unsigned char 
   934 ;;  tmpValue        1   33[BANK0 ] unsigned char 
   935 ;;  string         17   11[BANK0 ] unsigned char [17]
   936 ;;  string          4   37[BANK0 ] unsigned char [4]
   937 ;;  keyPressed      1   41[BANK0 ] struct .
   938 ;;  keyChange       1   35[BANK0 ] struct .
   939 ;;  keyReleased     1   32[BANK0 ] struct .
   940 ;; Return value:  Size  Location     Type
   941 ;;                  2  258[None  ] int 
   942 ;; Registers used:
   943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : B1F/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   949 ;;      Params:         0       0       0       0
   950 ;;      Locals:         0      32       0       0
   951 ;;      Temps:          0       3       0       0
   952 ;;      Totals:         0      35       0       0
   953 ;;Total ram usage:       35 bytes
   954 ;; Hardware stack levels required when called:    4
   955 ;; This function calls:
   956 ;;		_ParallelLCD_ClearPartial
   957 ;;		_ParallelLCD_ClearRow
   958 ;;		_ParallelLCD_Initialize
   959 ;;		_ParallelLCD_SetCgram
   960 ;;		_ParallelLCD_WriteCharacter
   961 ;;		_ParallelLCD_WriteString
   962 ;;		_ParallelLCD_WriteStringClearing
   963 ;;		__date_time_ConvertByteToDate
   964 ;;		__date_time_ConvertByteToDiscrete
   965 ;;		__date_time_ConvertByteToTime
   966 ;;		__ds1307_GetData
   967 ;;		__ds1307_SetClock
   968 ;;		_initialize
   969 ;; This function is called by:
   970 ;;		Startup code after reset
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           
   975                           ;psect for function _main
   976  0096                     _main:	
   977                           
   978                           ;main.c: 199: initialize( ) ;
   979                           
   980                           ;incstack = 0
   981                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   982  0096  3187  27BF  3180   	fcall	_initialize
   983                           
   984                           ;main.c: 201: PWM3DCH = ( PR2 >> 2 ) ;
   985  0099  0020               	movlb	0	; select bank0
   986  009A  081B               	movf	27,w	;volatile
   987  009B  00A8               	movwf	??_main
   988  009C  3002               	movlw	2
   989  009D                     u1895:	
   990  009D  36A8               	lsrf	??_main,f
   991  009E  0B89               	decfsz	9,f
   992  009F  289D               	goto	u1895
   993  00A0  0828               	movf	??_main,w
   994  00A1  002C               	movlb	12	; select bank12
   995  00A2  0098               	movwf	24	;volatile
   996                           
   997                           ;main.c: 202: PWM3DCL = ( ( PR2 & 0b11 ) << 6 ) ;
   998  00A3  0020               	movlb	0	; select bank0
   999  00A4  081B               	movf	27,w	;volatile
  1000  00A5  3903               	andlw	3
  1001  00A6  00A8               	movwf	??_main
  1002  00A7  3005               	movlw	5
  1003  00A8                     u1905:	
  1004  00A8  35A8               	lslf	??_main,f
  1005  00A9  3EFF               	addlw	-1
  1006  00AA  1D03               	skipz
  1007  00AB  28A8               	goto	u1905
  1008  00AC  3528               	lslf	??_main,w
  1009  00AD  002C               	movlb	12	; select bank12
  1010  00AE  0097               	movwf	23	;volatile
  1011                           
  1012                           ;main.c: 203: PWM3OE = 0 ;
  1013  00AF  1319               	bcf	25,6	;volatile
  1014                           
  1015                           ;main.c: 206: _delay((unsigned long)((20)*(1000000L/4000.0))) ;
  1016  00B0  3007               	movlw	7
  1017  00B1  0020               	movlb	0	; select bank0
  1018  00B2  00A9               	movwf	??_main+1
  1019  00B3  307D               	movlw	125
  1020  00B4  00A8               	movwf	??_main
  1021  00B5                     u2457:	
  1022  00B5  0BA8               	decfsz	??_main,f
  1023  00B6  28B5               	goto	u2457
  1024  00B7  0BA9               	decfsz	??_main+1,f
  1025  00B8  28B5               	goto	u2457
  1026                           
  1027                           ;main.c: 207: ParallelLCD_Initialize(
  1028                           ;main.c: 208: PARALLEL_LCD_CONFIG_8BIT_MODE | PARALLEL_LCD_CONFIG_2LINE_MODE ,
  1029                           ;main.c: 209: PARALLEL_LCD_CONFIG_DISPLAY_ON ,
  1030                           ;main.c: 210: PARALLEL_LCD_CONFIG_CURSOR_NONE ,
  1031                           ;main.c: 211: PARALLEL_LCD_CONFIG_INCREMENTAL
  1032                           ;main.c: 212: ) ;
  1033  00B9  3004               	movlw	4
  1034  00BA  0020               	movlb	0	; select bank0
  1035  00BB  00A8               	movwf	??_main
  1036  00BC  0828               	movf	??_main,w
  1037  00BD  00A3               	movwf	ParallelLCD_Initialize@configDisplay
  1038  00BE  01A4               	clrf	ParallelLCD_Initialize@configCursor
  1039  00BF  3002               	movlw	2
  1040  00C0  00A9               	movwf	??_main+1
  1041  00C1  0829               	movf	??_main+1,w
  1042  00C2  00A5               	movwf	ParallelLCD_Initialize@configEntryMode
  1043  00C3  3018               	movlw	24
  1044  00C4  318E  26E0  3180   	fcall	_ParallelLCD_Initialize
  1045                           
  1046                           ;main.c: 215: ParallelLCD_SetCgram( 0x00 , CURSOR_BITMAP ) ;
  1047  00C7  3031               	movlw	low (_CURSOR_BITMAP| (0+32768))
  1048  00C8  0020               	movlb	0	; select bank0
  1049  00C9  00A3               	movwf	ParallelLCD_SetCgram@bitmap
  1050  00CA  3087               	movlw	high (_CURSOR_BITMAP| (0+32768))
  1051  00CB  00A4               	movwf	ParallelLCD_SetCgram@bitmap+1
  1052  00CC  3000               	movlw	0
  1053  00CD  318F  2701  3180   	fcall	_ParallelLCD_SetCgram
  1054                           
  1055                           ;main.c: 217: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Boot .
      +                          .." ) ;
  1056  00D0  306D               	movlw	low (STR_12| (0+32768))
  1057  00D1  0020               	movlb	0	; select bank0
  1058  00D2  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  1059  00D3  3087               	movlw	high (STR_12| (0+32768))
  1060  00D4  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  1061  00D5  3080               	movlw	128
  1062  00D6  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  1063                           
  1064                           ;main.c: 220: _ds1307_GetData( &dateTimer , 0x10 , 7 ) ;
  1065  00D9  3010               	movlw	16
  1066  00DA  0020               	movlb	0	; select bank0
  1067  00DB  00A8               	movwf	??_main
  1068  00DC  0828               	movf	??_main,w
  1069  00DD  00A0               	movwf	__ds1307_GetData@ramAddress
  1070  00DE  3007               	movlw	7
  1071  00DF  00A9               	movwf	??_main+1
  1072  00E0  0829               	movf	??_main+1,w
  1073  00E1  00A1               	movwf	__ds1307_GetData@length
  1074  00E2  3064               	movlw	(low (_dateTimer| 0))& (0+255)
  1075  00E3  318F  279F  3180   	fcall	__ds1307_GetData
  1076                           
  1077                           ;main.c: 222: INTCONbits.TMR0IE = 1 ;
  1078  00E6  168B               	bsf	11,5	;volatile
  1079                           
  1080                           ;main.c: 223: IOCIE = 0 ;
  1081  00E7  118B               	bcf	11,3	;volatile
  1082  00E8                     l259:	
  1083                           ;main.c: 225: for( ; ; ) {
  1084                           
  1085  00E8  0064               	clrwdt	;# 
  1086                           
  1087                           ;main.c: 230: static UniPortA prevPortAState = { 0x00 } ;
  1088                           ;main.c: 231: UniPortA keyChange , keyPressed , keyReleased ;
  1089                           ;main.c: 234: keyChange.byte = portAState_.byte ^ prevPortAState.byte ;
  1090  00E9  0020               	movlb	0	; select bank0
  1091  00EA  085B               	movf	_portAState_,w
  1092  00EB  065C               	xorwf	main@prevPortAState,w
  1093  00EC  00A8               	movwf	??_main
  1094  00ED  0828               	movf	??_main,w
  1095  00EE  00C3               	movwf	main@keyChange
  1096                           
  1097                           ;main.c: 235: keyPressed.byte = keyChange.byte & portAState_.byte ;
  1098  00EF  0843               	movf	main@keyChange,w
  1099  00F0  055B               	andwf	_portAState_,w
  1100  00F1  00A8               	movwf	??_main
  1101  00F2  0828               	movf	??_main,w
  1102  00F3  00C9               	movwf	main@keyPressed
  1103                           
  1104                           ;main.c: 236: keyReleased.byte = keyChange.byte & ~portAState_.byte ;
  1105  00F4  095B               	comf	_portAState_,w
  1106  00F5  0543               	andwf	main@keyChange,w
  1107  00F6  00A8               	movwf	??_main
  1108  00F7  0828               	movf	??_main,w
  1109  00F8  00C0               	movwf	main@keyReleased
  1110                           
  1111                           ;main.c: 237: prevPortAState.byte = portAState_.byte ;
  1112  00F9  085B               	movf	_portAState_,w
  1113  00FA  00A8               	movwf	??_main
  1114  00FB  0828               	movf	??_main,w
  1115  00FC  00DC               	movwf	main@prevPortAState
  1116                           
  1117                           ;main.c: 239: if( keyPressed.keyUp ) {
  1118  00FD  1CC9               	btfss	main@keyPressed,1
  1119  00FE  2904               	goto	l262
  1120                           
  1121                           ;main.c: 240: if( portAState_.keyDown )
  1122  00FF  1C5B               	btfss	_portAState_,0
  1123  0100  2903               	goto	l263
  1124                           
  1125                           ;main.c: 241: keyEvents_.upDown=1 ;
  1126  0101  1557               	bsf	_keyEvents_,2
  1127  0102  2904               	goto	l262
  1128  0103                     l263:	
  1129                           
  1130                           ;main.c: 242: else
  1131                           ;main.c: 243: keyEvents_.up=1 ;
  1132  0103  1457               	bsf	_keyEvents_,0
  1133  0104                     l262:	
  1134                           
  1135                           ;main.c: 244: }
  1136                           ;main.c: 246: if( keyPressed.keyDown ) {
  1137  0104  1C49               	btfss	main@keyPressed,0
  1138  0105  290B               	goto	l265
  1139                           
  1140                           ;main.c: 247: if( portAState_.keyUp )
  1141  0106  1CDB               	btfss	_portAState_,1
  1142  0107  290A               	goto	l266
  1143                           
  1144                           ;main.c: 248: keyEvents_.upDown=1 ;
  1145  0108  1557               	bsf	_keyEvents_,2
  1146  0109  290B               	goto	l265
  1147  010A                     l266:	
  1148                           
  1149                           ;main.c: 249: else
  1150                           ;main.c: 250: keyEvents_.down=1 ;
  1151  010A  14D7               	bsf	_keyEvents_,1
  1152  010B                     l265:	
  1153                           
  1154                           ;main.c: 251: }
  1155                           ;main.c: 253: if( keyPressed.keyLeft ) {
  1156  010B  1AC9               	btfsc	main@keyPressed,5
  1157                           
  1158                           ;main.c: 254: keyEvents_.left=1 ;
  1159  010C  15D7               	bsf	_keyEvents_,3
  1160                           
  1161                           ;main.c: 255: }
  1162                           ;main.c: 257: if( keyPressed.keyRight ) {
  1163  010D  1A49               	btfsc	main@keyPressed,4
  1164                           
  1165                           ;main.c: 258: keyEvents_.right=1 ;
  1166  010E  1657               	bsf	_keyEvents_,4
  1167                           
  1168                           ;main.c: 259: }
  1169                           ;main.c: 260: if( keyReleased.keyRight ) {
  1170  010F  1A40               	btfsc	main@keyReleased,4
  1171                           
  1172                           ;main.c: 261: keyEvents_.releaseRight=1 ;
  1173  0110  1757               	bsf	_keyEvents_,6
  1174                           
  1175                           ;main.c: 262: }
  1176                           ;main.c: 265: if( (keyEvents_.leftRightHold&&!(keyEvents_.leftRightHold=0)) ) {
  1177  0111  1ED7               	btfss	_keyEvents_,5
  1178  0112  2926               	goto	l271
  1179  0113  12D7               	bcf	_keyEvents_,5
  1180                           
  1181                           ;main.c: 267: outputEvent.changeMessage=1 ;
  1182  0114  145A               	bsf	_outputEvent,0
  1183                           
  1184                           ;main.c: 269: switch( machineState_ ) {
  1185  0115  291E               	goto	l1907
  1186  0116                     l1901:	
  1187                           ;main.c: 271: case STATE_ADJUST_CLOCK:
  1188                           
  1189                           
  1190                           ;main.c: 272: _ds1307_SetClock( &dateCurrent ) ;
  1191  0116  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  1192  0117  318F  2761  3180   	fcall	__ds1307_SetClock
  1193                           
  1194                           ;main.c: 273: machineState_ = STATE_CLOCK ;
  1195  011A  0020               	movlb	0	; select bank0
  1196  011B                     l275:	
  1197                           ;main.c: 276: case STATE_SET_TIMER:
  1198                           
  1199                           ;main.c: 274: break ;
  1200                           
  1201                           
  1202                           ;main.c: 277: machineState_ = STATE_CLOCK ;
  1203  011B  01D8               	clrf	_machineState_
  1204  011C  0AD8               	incf	_machineState_,f
  1205                           
  1206                           ;main.c: 280: }
  1207                           
  1208                           ;main.c: 278: break ;
  1209  011D  2926               	goto	l271
  1210  011E                     l1907:	
  1211  011E  0858               	movf	_machineState_,w
  1212                           
  1213                           ; Switch size 1, requested type "space"
  1214                           ; Number of cases is 2, Range of values is 3 to 5
  1215                           ; switch strategies available:
  1216                           ; Name         Instructions Cycles
  1217                           ; simple_byte            7     4 (average)
  1218                           ; direct_byte           15     9 (fixed)
  1219                           ; jumptable            263     9 (fixed)
  1220                           ;	Chosen strategy is simple_byte
  1221  011F  3A03               	xorlw	3	; case 3
  1222  0120  1903               	skipnz
  1223  0121  2916               	goto	l1901
  1224  0122  3A06               	xorlw	6	; case 5
  1225  0123  1903               	skipnz
  1226  0124  291B               	goto	l275
  1227  0125  2926               	goto	l271
  1228  0126                     l271:	
  1229                           
  1230                           ;main.c: 281: }
  1231                           ;main.c: 284: if( (keyEvents_.left&&!(keyEvents_.left=0)) ) {
  1232  0126  1DD7               	btfss	_keyEvents_,3
  1233  0127  2960               	goto	l276
  1234  0128  11D7               	bcf	_keyEvents_,3
  1235                           
  1236                           ;main.c: 286: switch( machineState_ ) {
  1237  0129  294F               	goto	l1929
  1238  012A                     l278:	
  1239                           ;main.c: 288: case STATE_MENU:
  1240                           
  1241                           
  1242                           ;main.c: 289: machineState_ = STATE_CLOCK ;
  1243  012A  01D8               	clrf	_machineState_
  1244  012B  0AD8               	incf	_machineState_,f
  1245  012C  294D               	goto	l1925
  1246  012D                     l1911:	
  1247                           ;main.c: 293: case STATE_ADJUST_CLOCK:
  1248                           
  1249                           ;main.c: 291: break ;
  1250                           
  1251                           ;main.c: 290: outputEvent.changeMessage=1 ;
  1252                           
  1253                           
  1254                           ;main.c: 294: case STATE_SET_TIMER:
  1255                           ;main.c: 295: if( editSelect == DATE_ITEM_YEAR ) {
  1256  012D  0856               	movf	_editSelect,w
  1257  012E  1D03               	btfss	3,2
  1258  012F  293D               	goto	l1915
  1259                           
  1260                           ;main.c: 296: editSelect = DATE_ITEM_SECOND ;
  1261  0130  3006               	movlw	6
  1262  0131  00A8               	movwf	??_main
  1263  0132  0828               	movf	??_main,w
  1264  0133  00D6               	movwf	_editSelect
  1265                           
  1266                           ;main.c: 297: currentValueInfo = &VALUE_INFORMATIONS.second ;
  1267  0134  302D               	movlw	low ((_VALUE_INFORMATIONS| (0+32768)+24))
  1268  0135  00D1               	movwf	_currentValueInfo
  1269  0136  3087               	movlw	high ((_VALUE_INFORMATIONS| (0+32768)+24))
  1270  0137  00D2               	movwf	_currentValueInfo+1
  1271                           
  1272                           ;main.c: 298: currentEditValue = &datePtr->second ;
  1273  0138  086B               	movf	_datePtr,w
  1274  0139  00A8               	movwf	??_main
  1275  013A  0828               	movf	??_main,w
  1276  013B  00D4               	movwf	_currentEditValue
  1277                           
  1278                           ;main.c: 299: }
  1279  013C  2947               	goto	l1921
  1280  013D                     l1915:	
  1281                           
  1282                           ;main.c: 300: else {
  1283                           ;main.c: 301: editSelect-- ;
  1284  013D  3001               	movlw	1
  1285  013E  02D6               	subwf	_editSelect,f
  1286                           
  1287                           ;main.c: 302: currentValueInfo-- ;
  1288  013F  3004               	movlw	4
  1289  0140  02D1               	subwf	_currentValueInfo,f
  1290  0141  3000               	movlw	0
  1291  0142  3BD2               	subwfb	_currentValueInfo+1,f
  1292                           
  1293                           ;main.c: 303: currentEditValue++ ;
  1294  0143  3001               	movlw	1
  1295  0144  00A8               	movwf	??_main
  1296  0145  0828               	movf	??_main,w
  1297  0146  07D4               	addwf	_currentEditValue,f
  1298  0147                     l1921:	
  1299                           
  1300                           ;main.c: 304: }
  1301                           ;main.c: 306: blinkPrescaler = 0 ;
  1302  0147  01D3               	clrf	_blinkPrescaler
  1303                           
  1304                           ;main.c: 307: break ;
  1305  0148  2960               	goto	l276
  1306  0149                     l1923:	
  1307                           ;main.c: 309: case STATE_BUZZER_TEST:
  1308                           
  1309                           
  1310                           ;main.c: 310: case STATE_VERSION:
  1311                           ;main.c: 311: machineState_ = STATE_MENU ;
  1312  0149  3002               	movlw	2
  1313  014A  00A8               	movwf	??_main
  1314  014B  0828               	movf	??_main,w
  1315  014C  00D8               	movwf	_machineState_
  1316  014D                     l1925:	
  1317                           
  1318                           ;main.c: 312: outputEvent.changeMessage=1 ;
  1319  014D  145A               	bsf	_outputEvent,0
  1320                           
  1321                           ;main.c: 315: }
  1322                           
  1323                           ;main.c: 313: break ;
  1324  014E  2960               	goto	l276
  1325  014F                     l1929:	
  1326  014F  0858               	movf	_machineState_,w
  1327                           
  1328                           ; Switch size 1, requested type "space"
  1329                           ; Number of cases is 5, Range of values is 2 to 7
  1330                           ; switch strategies available:
  1331                           ; Name         Instructions Cycles
  1332                           ; simple_byte           16     9 (average)
  1333                           ; direct_byte           21     9 (fixed)
  1334                           ; jumptable            263     9 (fixed)
  1335                           ;	Chosen strategy is simple_byte
  1336  0150  3A02               	xorlw	2	; case 2
  1337  0151  1903               	skipnz
  1338  0152  292A               	goto	l278
  1339  0153  3A01               	xorlw	1	; case 3
  1340  0154  1903               	skipnz
  1341  0155  292D               	goto	l1911
  1342  0156  3A06               	xorlw	6	; case 5
  1343  0157  1903               	skipnz
  1344  0158  292D               	goto	l1911
  1345  0159  3A03               	xorlw	3	; case 6
  1346  015A  1903               	skipnz
  1347  015B  2949               	goto	l1923
  1348  015C  3A01               	xorlw	1	; case 7
  1349  015D  1903               	skipnz
  1350  015E  2949               	goto	l1923
  1351  015F  2960               	goto	l276
  1352  0160                     l276:	
  1353                           
  1354                           ;main.c: 317: }
  1355                           ;main.c: 320: if( (keyEvents_.right&&!(keyEvents_.right=0)) ) {
  1356  0160  1E57               	btfss	_keyEvents_,4
  1357  0161  29CE               	goto	l286
  1358  0162  1257               	bcf	_keyEvents_,4
  1359                           
  1360                           ;main.c: 322: switch( machineState_ ) {
  1361  0163  29BC               	goto	l1975
  1362  0164                     l1933:	
  1363                           ;main.c: 324: case STATE_CLOCK:
  1364                           
  1365                           
  1366                           ;main.c: 325: machineState_ = STATE_MENU ;
  1367  0164  3002               	movlw	2
  1368  0165  00A8               	movwf	??_main
  1369  0166  0828               	movf	??_main,w
  1370  0167  00D8               	movwf	_machineState_
  1371                           
  1372                           ;main.c: 326: datePtr = &dateCurrent ;
  1373  0168  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  1374  0169  00A8               	movwf	??_main
  1375  016A  0828               	movf	??_main,w
  1376  016B  00EB               	movwf	_datePtr
  1377                           
  1378                           ;main.c: 327: menuSelect = 0 ;
  1379  016C  01D9               	clrf	_menuSelect
  1380                           
  1381                           ;main.c: 328: cursorPosition = 0 ;
  1382  016D  01D5               	clrf	_cursorPosition
  1383  016E  29B7               	goto	l297
  1384  016F                     l1941:	
  1385                           ;main.c: 333: case STATE_ADJUST_CLOCK:
  1386                           
  1387                           ;main.c: 330: break ;
  1388                           
  1389                           ;main.c: 329: outputEvent.changeMessage=1 ;
  1390                           
  1391                           
  1392                           ;main.c: 334: case STATE_SET_TIMER:
  1393                           ;main.c: 335: if( editSelect == DATE_ITEM_SECOND ) {
  1394  016F  3006               	movlw	6
  1395  0170  0656               	xorwf	_editSelect,w
  1396  0171  1D03               	btfss	3,2
  1397  0172  297E               	goto	l1949
  1398                           
  1399                           ;main.c: 336: editSelect = DATE_ITEM_YEAR ;
  1400  0173  01D6               	clrf	_editSelect
  1401                           
  1402                           ;main.c: 337: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1403  0174  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1404  0175  00D1               	movwf	_currentValueInfo
  1405  0176  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1406  0177  00D2               	movwf	_currentValueInfo+1
  1407                           
  1408                           ;main.c: 338: currentEditValue = &datePtr->year ;
  1409  0178  086B               	movf	_datePtr,w
  1410  0179  3E06               	addlw	6
  1411  017A  00A8               	movwf	??_main
  1412  017B  0828               	movf	??_main,w
  1413  017C  00D4               	movwf	_currentEditValue
  1414                           
  1415                           ;main.c: 339: }
  1416  017D  2988               	goto	l1955
  1417  017E                     l1949:	
  1418                           
  1419                           ;main.c: 340: else {
  1420                           ;main.c: 341: editSelect++ ;
  1421  017E  3001               	movlw	1
  1422  017F  00A8               	movwf	??_main
  1423  0180  0828               	movf	??_main,w
  1424  0181  07D6               	addwf	_editSelect,f
  1425                           
  1426                           ;main.c: 342: currentValueInfo++ ;
  1427  0182  3004               	movlw	4
  1428  0183  07D1               	addwf	_currentValueInfo,f
  1429  0184  3000               	movlw	0
  1430  0185  3DD2               	addwfc	_currentValueInfo+1,f
  1431                           
  1432                           ;main.c: 343: currentEditValue-- ;
  1433  0186  3001               	movlw	1
  1434  0187  02D4               	subwf	_currentEditValue,f
  1435  0188                     l1955:	
  1436                           
  1437                           ;main.c: 344: }
  1438                           ;main.c: 346: blinkPrescaler = 0 ;
  1439  0188  01D3               	clrf	_blinkPrescaler
  1440                           
  1441                           ;main.c: 347: break ;
  1442  0189  29CE               	goto	l286
  1443  018A                     l1957:	
  1444                           ;main.c: 351: case MENU_ADJUST:
  1445                           
  1446                           ;main.c: 350: switch( menuSelect ) {
  1447                           
  1448                           ;main.c: 349: case STATE_MENU:
  1449                           
  1450                           
  1451                           ;main.c: 352: machineState_ = STATE_ADJUST_CLOCK ;
  1452  018A  3003               	movlw	3
  1453  018B  00A8               	movwf	??_main
  1454  018C  0828               	movf	??_main,w
  1455  018D  00D8               	movwf	_machineState_
  1456                           
  1457                           ;main.c: 353: datePtr = &dateCurrent ;
  1458  018E  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  1459  018F  2995               	goto	L4
  1460  0190                     l1961:	
  1461                           ;main.c: 358: case MENU_TIMER:
  1462                           
  1463                           ;main.c: 356: break ;
  1464                           
  1465                           ;main.c: 355: currentEditValue = &datePtr->year ;
  1466                           
  1467                           ;main.c: 354: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1468                           
  1469                           
  1470                           ;main.c: 359: machineState_ = STATE_SET_TIMER ;
  1471  0190  3005               	movlw	5
  1472  0191  00A8               	movwf	??_main
  1473  0192  0828               	movf	??_main,w
  1474  0193  00D8               	movwf	_machineState_
  1475                           
  1476                           ;main.c: 360: datePtr = &dateTimer ;
  1477  0194  3064               	movlw	(low (_dateTimer| 0))& (0+255)
  1478  0195                     L4:	
  1479  0195  00A8               	movwf	??_main
  1480  0196  0828               	movf	??_main,w
  1481  0197  00EB               	movwf	_datePtr
  1482                           
  1483                           ;main.c: 361: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1484  0198  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1485  0199  00D1               	movwf	_currentValueInfo
  1486  019A  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1487  019B  00D2               	movwf	_currentValueInfo+1
  1488                           
  1489                           ;main.c: 362: currentEditValue = &datePtr->year ;
  1490  019C  086B               	movf	_datePtr,w
  1491  019D  3E06               	addlw	6
  1492  019E  00A8               	movwf	??_main
  1493  019F  0828               	movf	??_main,w
  1494  01A0  00D4               	movwf	_currentEditValue
  1495                           
  1496                           ;main.c: 363: break ;
  1497  01A1  29B7               	goto	l297
  1498  01A2                     l1965:	
  1499                           ;main.c: 365: case MENU_BUZZER_TEST:
  1500                           
  1501                           
  1502                           ;main.c: 366: machineState_ = STATE_BUZZER_TEST ;
  1503  01A2  3006               	movlw	6
  1504  01A3  29A5               	goto	L1
  1505  01A4                     l1967:	
  1506                           ;main.c: 369: case MENU_VERSION:
  1507                           
  1508                           ;main.c: 367: break ;
  1509                           
  1510                           
  1511                           ;main.c: 370: machineState_ = STATE_VERSION ;
  1512  01A4  3007               	movlw	7
  1513  01A5                     L1:	
  1514  01A5  00A8               	movwf	??_main
  1515  01A6  0828               	movf	??_main,w
  1516  01A7  00D8               	movwf	_machineState_
  1517                           
  1518                           ;main.c: 372: }
  1519                           
  1520                           ;main.c: 371: break ;
  1521  01A8  29B7               	goto	l297
  1522  01A9                     l1971:	
  1523  01A9  0859               	movf	_menuSelect,w
  1524                           
  1525                           ; Switch size 1, requested type "space"
  1526                           ; Number of cases is 4, Range of values is 0 to 3
  1527                           ; switch strategies available:
  1528                           ; Name         Instructions Cycles
  1529                           ; simple_byte           13     7 (average)
  1530                           ; direct_byte           14     6 (fixed)
  1531                           ; jumptable            260     6 (fixed)
  1532                           ;	Chosen strategy is simple_byte
  1533  01AA  3A00               	xorlw	0	; case 0
  1534  01AB  1903               	skipnz
  1535  01AC  298A               	goto	l1957
  1536  01AD  3A01               	xorlw	1	; case 1
  1537  01AE  1903               	skipnz
  1538  01AF  2990               	goto	l1961
  1539  01B0  3A03               	xorlw	3	; case 2
  1540  01B1  1903               	skipnz
  1541  01B2  29A2               	goto	l1965
  1542  01B3  3A01               	xorlw	1	; case 3
  1543  01B4  1903               	skipnz
  1544  01B5  29A4               	goto	l1967
  1545  01B6  29B7               	goto	l297
  1546  01B7                     l297:	
  1547                           
  1548                           ;main.c: 373: outputEvent.changeMessage=1 ;
  1549  01B7  145A               	bsf	_outputEvent,0
  1550                           
  1551                           ;main.c: 375: break ;
  1552  01B8  29CE               	goto	l286
  1553  01B9                     l301:	
  1554                           ;main.c: 377: case STATE_BUZZER_TEST:
  1555                           
  1556                           
  1557                           ;main.c: 378: PWM3CONbits.PWM3OE=1 ;
  1558  01B9  002C               	movlb	12	; select bank12
  1559  01BA  1719               	bsf	25,6	;volatile
  1560                           
  1561                           ;main.c: 380: }
  1562                           
  1563                           ;main.c: 379: break ;
  1564  01BB  29CE               	goto	l286
  1565  01BC                     l1975:	
  1566  01BC  0020               	movlb	0	; select bank0
  1567  01BD  0858               	movf	_machineState_,w
  1568                           
  1569                           ; Switch size 1, requested type "space"
  1570                           ; Number of cases is 5, Range of values is 1 to 6
  1571                           ; switch strategies available:
  1572                           ; Name         Instructions Cycles
  1573                           ; simple_byte           16     9 (average)
  1574                           ; direct_byte           21     9 (fixed)
  1575                           ; jumptable            263     9 (fixed)
  1576                           ;	Chosen strategy is simple_byte
  1577  01BE  3A01               	xorlw	1	; case 1
  1578  01BF  1903               	skipnz
  1579  01C0  2964               	goto	l1933
  1580  01C1  3A03               	xorlw	3	; case 2
  1581  01C2  1903               	skipnz
  1582  01C3  29A9               	goto	l1971
  1583  01C4  3A01               	xorlw	1	; case 3
  1584  01C5  1903               	skipnz
  1585  01C6  296F               	goto	l1941
  1586  01C7  3A06               	xorlw	6	; case 5
  1587  01C8  1903               	skipnz
  1588  01C9  296F               	goto	l1941
  1589  01CA  3A03               	xorlw	3	; case 6
  1590  01CB  1903               	skipnz
  1591  01CC  29B9               	goto	l301
  1592  01CD  29CE               	goto	l286
  1593  01CE                     l286:	
  1594                           
  1595                           ;main.c: 382: }
  1596                           ;main.c: 384: if( (keyEvents_.releaseRight&&!(keyEvents_.releaseRight=0)) ) {
  1597  01CE  0020               	movlb	0	; select bank0
  1598  01CF  1F57               	btfss	_keyEvents_,6
  1599  01D0  29DC               	goto	l302
  1600  01D1  1357               	bcf	_keyEvents_,6
  1601                           
  1602                           ;main.c: 385: switch( machineState_ ) {
  1603  01D2  29D6               	goto	l1981
  1604  01D3                     l304:	
  1605                           ;main.c: 386: case STATE_BUZZER_TEST:
  1606                           
  1607                           
  1608                           ;main.c: 387: PWM3CONbits.PWM3OE=0 ;
  1609  01D3  002C               	movlb	12	; select bank12
  1610  01D4  1319               	bcf	25,6	;volatile
  1611                           
  1612                           ;main.c: 389: }
  1613                           
  1614                           ;main.c: 388: break ;
  1615  01D5  29DC               	goto	l302
  1616  01D6                     l1981:	
  1617  01D6  0020               	movlb	0	; select bank0
  1618  01D7  0858               	movf	_machineState_,w
  1619                           
  1620                           ; Switch size 1, requested type "space"
  1621                           ; Number of cases is 1, Range of values is 6 to 6
  1622                           ; switch strategies available:
  1623                           ; Name         Instructions Cycles
  1624                           ; simple_byte            4     3 (average)
  1625                           ; direct_byte           11     9 (fixed)
  1626                           ; jumptable            263     9 (fixed)
  1627                           ;	Chosen strategy is simple_byte
  1628  01D8  3A06               	xorlw	6	; case 6
  1629  01D9  1903               	skipnz
  1630  01DA  29D3               	goto	l304
  1631  01DB  29DC               	goto	l302
  1632  01DC                     l302:	
  1633                           
  1634                           ;main.c: 390: }
  1635                           ;main.c: 393: if( (keyEvents_.upDown&&!(keyEvents_.upDown=0)) ) {
  1636  01DC  0020               	movlb	0	; select bank0
  1637  01DD  1D57               	btfss	_keyEvents_,2
  1638  01DE  2A98               	goto	l2061
  1639  01DF  1157               	bcf	_keyEvents_,2
  1640                           
  1641                           ;main.c: 394: switch( machineState_ ) {
  1642  01E0  29E5               	goto	l1987
  1643  01E1                     l308:	
  1644                           ;main.c: 396: case STATE_ALERM:
  1645                           
  1646                           
  1647                           ;main.c: 397: machineState_ = STATE_CLOCK ;
  1648  01E1  01D8               	clrf	_machineState_
  1649  01E2  0AD8               	incf	_machineState_,f
  1650                           
  1651                           ;main.c: 398: outputEvent.changeMessage=1 ;
  1652  01E3  145A               	bsf	_outputEvent,0
  1653                           
  1654                           ;main.c: 401: }
  1655                           
  1656                           ;main.c: 399: break ;
  1657  01E4  2A98               	goto	l2061
  1658  01E5                     l1987:	
  1659  01E5  0858               	movf	_machineState_,w
  1660                           
  1661                           ; Switch size 1, requested type "space"
  1662                           ; Number of cases is 1, Range of values is 4 to 4
  1663                           ; switch strategies available:
  1664                           ; Name         Instructions Cycles
  1665                           ; simple_byte            4     3 (average)
  1666                           ; direct_byte           11     9 (fixed)
  1667                           ; jumptable            263     9 (fixed)
  1668                           ;	Chosen strategy is simple_byte
  1669  01E6  3A04               	xorlw	4	; case 4
  1670  01E7  1903               	skipnz
  1671  01E8  29E1               	goto	l308
  1672  01E9  2A98               	goto	l2061
  1673                           
  1674                           ;main.c: 402: }
  1675                           ;main.c: 405: switch( machineState_ ) {
  1676  01EA  2A98               	goto	l2061
  1677  01EB                     l311:	
  1678                           ;main.c: 407: case STATE_MENU:
  1679                           
  1680                           
  1681                           ;main.c: 408: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1682  01EB  1C57               	btfss	_keyEvents_,0
  1683  01EC  29F9               	goto	l1999
  1684  01ED  1057               	bcf	_keyEvents_,0
  1685                           
  1686                           ;main.c: 409: if( menuSelect ) menuSelect-- ;
  1687  01EE  0859               	movf	_menuSelect,w
  1688  01EF  1903               	btfsc	3,2
  1689  01F0  29F3               	goto	l313
  1690  01F1  3001               	movlw	1
  1691  01F2  02D9               	subwf	_menuSelect,f
  1692  01F3                     l313:	
  1693                           
  1694                           ;main.c: 410: if( cursorPosition != 0 ) cursorPosition-- ;
  1695  01F3  0855               	movf	_cursorPosition,w
  1696  01F4  1903               	btfsc	3,2
  1697  01F5  29F8               	goto	l1997
  1698  01F6  3001               	movlw	1
  1699  01F7  02D5               	subwf	_cursorPosition,f
  1700  01F8                     l1997:	
  1701                           
  1702                           ;main.c: 411: outputEvent.changeMessage=1 ;
  1703  01F8  145A               	bsf	_outputEvent,0
  1704  01F9                     l1999:	
  1705                           
  1706                           ;main.c: 412: }
  1707                           ;main.c: 413: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1708  01F9  1CD7               	btfss	_keyEvents_,1
  1709  01FA  2AA6               	goto	l318
  1710  01FB  10D7               	bcf	_keyEvents_,1
  1711                           
  1712                           ;main.c: 414: if( menuSelect != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU[0] ) )
      +                           - 1 ) ) menuSelect++ ;
  1713  01FC  3003               	movlw	3
  1714  01FD  0659               	xorwf	_menuSelect,w
  1715  01FE  1903               	btfsc	3,2
  1716  01FF  2A04               	goto	l316
  1717  0200  3001               	movlw	1
  1718  0201  00A8               	movwf	??_main
  1719  0202  0828               	movf	??_main,w
  1720  0203  07D9               	addwf	_menuSelect,f
  1721  0204                     l316:	
  1722                           
  1723                           ;main.c: 415: if( cursorPosition != 1 ) cursorPosition++ ;
  1724  0204  0355               	decf	_cursorPosition,w
  1725  0205  1903               	btfsc	3,2
  1726  0206  2A0B               	goto	l2009
  1727  0207  3001               	movlw	1
  1728  0208  00A8               	movwf	??_main
  1729  0209  0828               	movf	??_main,w
  1730  020A  07D5               	addwf	_cursorPosition,f
  1731  020B                     l2009:	
  1732                           
  1733                           ;main.c: 416: outputEvent.changeMessage=1 ;
  1734  020B  145A               	bsf	_outputEvent,0
  1735                           
  1736                           ;main.c: 417: }
  1737                           ;main.c: 418: break ;
  1738  020C  2AA6               	goto	l318
  1739  020D                     l320:	
  1740                           ;main.c: 420: case STATE_ADJUST_CLOCK:
  1741                           
  1742                           
  1743                           ;main.c: 421: case STATE_SET_TIMER:
  1744                           ;main.c: 422: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1745  020D  1C57               	btfss	_keyEvents_,0
  1746  020E  2A49               	goto	l2025
  1747  020F  1057               	bcf	_keyEvents_,0
  1748                           
  1749                           ;main.c: 423: if( *currentEditValue == currentValueInfo->max )
  1750  0210  0854               	movf	_currentEditValue,w
  1751  0211  0086               	movwf	6
  1752  0212  0187               	clrf	7
  1753  0213  0852               	movf	_currentValueInfo+1,w
  1754  0214  00A9               	movwf	??_main+1
  1755  0215  0851               	movf	_currentValueInfo,w
  1756  0216  00A8               	movwf	??_main
  1757  0217  3002               	movlw	2
  1758  0218  0728               	addwf	??_main,w
  1759  0219  0084               	movwf	4
  1760  021A  0829               	movf	??_main+1,w
  1761  021B  1803               	skipnc
  1762  021C  0A29               	incf	??_main+1,w
  1763  021D  0085               	movwf	5
  1764  021E  0800               	movf	0,w	;code access
  1765  021F  0601               	xorwf	1,w
  1766  0220  1D03               	skipz
  1767  0221  2A35               	goto	l2017
  1768                           
  1769                           ;main.c: 424: *currentEditValue = currentValueInfo->min ;
  1770  0222  0852               	movf	_currentValueInfo+1,w
  1771  0223  00A9               	movwf	??_main+1
  1772  0224  0851               	movf	_currentValueInfo,w
  1773  0225  00A8               	movwf	??_main
  1774  0226  3003               	movlw	3
  1775  0227  0728               	addwf	??_main,w
  1776  0228  0084               	movwf	4
  1777  0229  0829               	movf	??_main+1,w
  1778  022A  1803               	skipnc
  1779  022B  0A29               	incf	??_main+1,w
  1780  022C  0085               	movwf	5
  1781  022D  0800               	movf	0,w	;code access
  1782  022E  00AA               	movwf	??_main+2
  1783  022F  0854               	movf	_currentEditValue,w
  1784  0230  0086               	movwf	6
  1785  0231  0187               	clrf	7
  1786  0232  082A               	movf	??_main+2,w
  1787  0233  0081               	movwf	1
  1788  0234  2A48               	goto	l2023
  1789  0235                     l2017:	
  1790                           
  1791                           ;main.c: 425: else if( ( *currentEditValue & 0x0F ) == 0x09 )
  1792  0235  0854               	movf	_currentEditValue,w
  1793  0236  0086               	movwf	6
  1794  0237  0187               	clrf	7
  1795  0238  300F               	movlw	15
  1796  0239  0501               	andwf	1,w
  1797  023A  00A8               	movwf	??_main
  1798  023B  3009               	movlw	9
  1799  023C  0628               	xorwf	??_main,w
  1800  023D  1D03               	btfss	3,2
  1801  023E  2A41               	goto	l2021
  1802                           
  1803                           ;main.c: 426: *currentEditValue += 7 ;
  1804  023F  3007               	movlw	7
  1805  0240  2A42               	goto	L2
  1806  0241                     l2021:	
  1807                           
  1808                           ;main.c: 427: else
  1809                           ;main.c: 428: ( *currentEditValue )++ ;
  1810  0241  3001               	movlw	1
  1811  0242                     L2:	
  1812  0242  00A8               	movwf	??_main
  1813  0243  0854               	movf	_currentEditValue,w
  1814  0244  0086               	movwf	6
  1815  0245  0187               	clrf	7
  1816  0246  0828               	movf	??_main,w
  1817  0247  0781               	addwf	1,f
  1818  0248                     l2023:	
  1819                           
  1820                           ;main.c: 429: outputEvent.changeValue=1 ;
  1821  0248  14DA               	bsf	_outputEvent,1
  1822  0249                     l2025:	
  1823                           
  1824                           ;main.c: 430: }
  1825                           ;main.c: 431: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1826  0249  1CD7               	btfss	_keyEvents_,1
  1827  024A  2AA6               	goto	l318
  1828  024B  10D7               	bcf	_keyEvents_,1
  1829                           
  1830                           ;main.c: 432: if( *currentEditValue == currentValueInfo->min )
  1831  024C  0854               	movf	_currentEditValue,w
  1832  024D  0086               	movwf	6
  1833  024E  0187               	clrf	7
  1834  024F  0852               	movf	_currentValueInfo+1,w
  1835  0250  00A9               	movwf	??_main+1
  1836  0251  0851               	movf	_currentValueInfo,w
  1837  0252  00A8               	movwf	??_main
  1838  0253  3003               	movlw	3
  1839  0254  0728               	addwf	??_main,w
  1840  0255  0084               	movwf	4
  1841  0256  0829               	movf	??_main+1,w
  1842  0257  1803               	skipnc
  1843  0258  0A29               	incf	??_main+1,w
  1844  0259  0085               	movwf	5
  1845  025A  0800               	movf	0,w	;code access
  1846  025B  0601               	xorwf	1,w
  1847  025C  1D03               	skipz
  1848  025D  2A71               	goto	l2033
  1849                           
  1850                           ;main.c: 433: *currentEditValue = currentValueInfo->max ;
  1851  025E  0852               	movf	_currentValueInfo+1,w
  1852  025F  00A9               	movwf	??_main+1
  1853  0260  0851               	movf	_currentValueInfo,w
  1854  0261  00A8               	movwf	??_main
  1855  0262  3002               	movlw	2
  1856  0263  0728               	addwf	??_main,w
  1857  0264  0084               	movwf	4
  1858  0265  0829               	movf	??_main+1,w
  1859  0266  1803               	skipnc
  1860  0267  0A29               	incf	??_main+1,w
  1861  0268  0085               	movwf	5
  1862  0269  0800               	movf	0,w	;code access
  1863  026A  00AA               	movwf	??_main+2
  1864  026B  0854               	movf	_currentEditValue,w
  1865  026C  0086               	movwf	6
  1866  026D  0187               	clrf	7
  1867  026E  082A               	movf	??_main+2,w
  1868  026F  0081               	movwf	1
  1869  0270  2A96               	goto	l2057
  1870  0271                     l2033:	
  1871                           
  1872                           ;main.c: 434: else if( ( *currentEditValue & 0x0F ) == 0x00 )
  1873  0271  0854               	movf	_currentEditValue,w
  1874  0272  0086               	movwf	6
  1875  0273  0187               	clrf	7
  1876  0274  0801               	movf	1,w
  1877  0275  390F               	andlw	15
  1878  0276  1D03               	btfss	3,2
  1879  0277  2A7D               	goto	l2037
  1880                           
  1881                           ;main.c: 435: *currentEditValue -= 7 ;
  1882  0278  0854               	movf	_currentEditValue,w
  1883  0279  0086               	movwf	6
  1884  027A  0187               	clrf	7
  1885  027B  3007               	movlw	7
  1886  027C  2A81               	goto	L3
  1887  027D                     l2037:	
  1888                           
  1889                           ;main.c: 436: else
  1890                           ;main.c: 437: ( *currentEditValue )-- ;
  1891  027D  0854               	movf	_currentEditValue,w
  1892  027E  0086               	movwf	6
  1893  027F  0187               	clrf	7
  1894  0280  3001               	movlw	1
  1895  0281                     L3:	
  1896  0281  0281               	subwf	1,f
  1897  0282  2A96               	goto	l2057
  1898  0283                     l331:	
  1899                           ;main.c: 442: case STATE_BUZZER_TEST:
  1900                           
  1901                           ;main.c: 439: }
  1902                           ;main.c: 440: break ;
  1903                           
  1904                           ;main.c: 438: outputEvent.changeValue=1 ;
  1905                           
  1906                           
  1907                           ;main.c: 443: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1908  0283  1C57               	btfss	_keyEvents_,0
  1909  0284  2A8E               	goto	l2049
  1910  0285  1057               	bcf	_keyEvents_,0
  1911                           
  1912                           ;main.c: 444: if( PR2 != 0xFF ) PR2++ ;
  1913  0286  0A1B               	incf	27,w	;volatile
  1914  0287  1903               	btfsc	3,2
  1915  0288  2A8D               	goto	l2047
  1916  0289  3001               	movlw	1
  1917  028A  00A8               	movwf	??_main
  1918  028B  0828               	movf	??_main,w
  1919  028C  079B               	addwf	27,f	;volatile
  1920  028D                     l2047:	
  1921                           
  1922                           ;main.c: 445: outputEvent.changeValue=1 ;
  1923  028D  14DA               	bsf	_outputEvent,1
  1924  028E                     l2049:	
  1925                           
  1926                           ;main.c: 446: }
  1927                           ;main.c: 447: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1928  028E  1CD7               	btfss	_keyEvents_,1
  1929  028F  2AA6               	goto	l318
  1930  0290  10D7               	bcf	_keyEvents_,1
  1931                           
  1932                           ;main.c: 448: if( PR2 != 0 ) PR2-- ;
  1933  0291  081B               	movf	27,w	;volatile
  1934  0292  1903               	btfsc	3,2
  1935  0293  2A96               	goto	l2057
  1936  0294  3001               	movlw	1
  1937  0295  029B               	subwf	27,f	;volatile
  1938  0296                     l2057:	
  1939                           
  1940                           ;main.c: 449: outputEvent.changeValue=1 ;
  1941  0296  14DA               	bsf	_outputEvent,1
  1942                           
  1943                           ;main.c: 453: }
  1944                           
  1945                           ;main.c: 450: }
  1946                           ;main.c: 451: break ;
  1947  0297  2AA6               	goto	l318
  1948  0298                     l2061:	
  1949  0298  0858               	movf	_machineState_,w
  1950                           
  1951                           ; Switch size 1, requested type "space"
  1952                           ; Number of cases is 4, Range of values is 2 to 6
  1953                           ; switch strategies available:
  1954                           ; Name         Instructions Cycles
  1955                           ; simple_byte           13     7 (average)
  1956                           ; direct_byte           19     9 (fixed)
  1957                           ; jumptable            263     9 (fixed)
  1958                           ;	Chosen strategy is simple_byte
  1959  0299  3A02               	xorlw	2	; case 2
  1960  029A  1903               	skipnz
  1961  029B  29EB               	goto	l311
  1962  029C  3A01               	xorlw	1	; case 3
  1963  029D  1903               	skipnz
  1964  029E  2A0D               	goto	l320
  1965  029F  3A06               	xorlw	6	; case 5
  1966  02A0  1903               	skipnz
  1967  02A1  2A0D               	goto	l320
  1968  02A2  3A03               	xorlw	3	; case 6
  1969  02A3  1903               	skipnz
  1970  02A4  2A83               	goto	l331
  1971  02A5  2AA6               	goto	l318
  1972  02A6                     l318:	
  1973                           
  1974                           ;main.c: 480: if( (outputEvent.changeMessage&&!(outputEvent.changeMessage=0)) ) {
  1975  02A6  1C5A               	btfss	_outputEvent,0
  1976  02A7  2B4A               	goto	l336
  1977  02A8  105A               	bcf	_outputEvent,0
  1978                           
  1979                           ;main.c: 482: switch( machineState_ ) {
  1980  02A9  2B3C               	goto	l2095
  1981  02AA                     l2065:	
  1982                           ;main.c: 483: case STATE_CLOCK:
  1983                           
  1984                           
  1985                           ;main.c: 484: case STATE_ALERM:
  1986                           ;main.c: 485: case STATE_ADJUST_CLOCK:
  1987                           ;main.c: 486: case STATE_SET_TIMER:
  1988                           ;main.c: 488: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_0 ) ;
  1989  02AA  3080               	movlw	128
  1990  02AB  318E  268B  3180   	fcall	_ParallelLCD_ClearRow
  1991                           
  1992                           ;main.c: 490: switch( machineState_ ) {
  1993  02AE  2AC9               	goto	l2077
  1994  02AF                     l2067:	
  1995                           ;main.c: 491: case STATE_CLOCK:
  1996                           
  1997                           
  1998                           ;main.c: 492: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  1999  02AF  30C0               	movlw	192
  2000  02B0  318E  268B  3180   	fcall	_ParallelLCD_ClearRow
  2001                           
  2002                           ;main.c: 493: break ;
  2003  02B3  2B19               	goto	l2085
  2004  02B4                     l2069:	
  2005                           ;main.c: 494: case STATE_ALERM:
  2006                           
  2007                           
  2008                           ;main.c: 495: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x9 , "ALERM!
      +                          !" ) ;
  2009  02B4  307F               	movlw	low (STR_13| (0+32768))
  2010  02B5  0020               	movlb	0	; select bank0
  2011  02B6  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2012  02B7  3087               	movlw	high (STR_13| (0+32768))
  2013  02B8  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2014  02B9  30C9               	movlw	201
  2015  02BA  2B16               	goto	L5
  2016  02BB                     l2071:	
  2017                           ;main.c: 497: case STATE_ADJUST_CLOCK:
  2018                           
  2019                           ;main.c: 496: break ;
  2020                           
  2021                           
  2022                           ;main.c: 498: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xA , "adjust
      +                          " ) ;
  2023  02BB  3096               	movlw	low (STR_14| (0+32768))
  2024  02BC  0020               	movlb	0	; select bank0
  2025  02BD  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2026  02BE  3087               	movlw	high (STR_14| (0+32768))
  2027  02BF  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2028  02C0  30CA               	movlw	202
  2029  02C1  2B16               	goto	L5
  2030  02C2                     l2073:	
  2031                           ;main.c: 500: case STATE_SET_TIMER:
  2032                           
  2033                           ;main.c: 499: break ;
  2034                           
  2035                           
  2036                           ;main.c: 501: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xB , "timer"
      +                           ) ;
  2037  02C2  309D               	movlw	low (STR_15| (0+32768))
  2038  02C3  0020               	movlb	0	; select bank0
  2039  02C4  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2040  02C5  3087               	movlw	high (STR_15| (0+32768))
  2041  02C6  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2042  02C7  30CB               	movlw	203
  2043  02C8  2B16               	goto	L5
  2044  02C9                     l2077:	
  2045                           ;main.c: 503: }
  2046                           
  2047                           ;main.c: 502: break ;
  2048                           
  2049  02C9  0020               	movlb	0	; select bank0
  2050  02CA  0858               	movf	_machineState_,w
  2051                           
  2052                           ; Switch size 1, requested type "space"
  2053                           ; Number of cases is 4, Range of values is 1 to 5
  2054                           ; switch strategies available:
  2055                           ; Name         Instructions Cycles
  2056                           ; simple_byte           13     7 (average)
  2057                           ; direct_byte           19     9 (fixed)
  2058                           ; jumptable            263     9 (fixed)
  2059                           ;	Chosen strategy is simple_byte
  2060  02CB  3A01               	xorlw	1	; case 1
  2061  02CC  1903               	skipnz
  2062  02CD  2AAF               	goto	l2067
  2063  02CE  3A02               	xorlw	2	; case 3
  2064  02CF  1903               	skipnz
  2065  02D0  2ABB               	goto	l2071
  2066  02D1  3A07               	xorlw	7	; case 4
  2067  02D2  1903               	skipnz
  2068  02D3  2AB4               	goto	l2069
  2069  02D4  3A01               	xorlw	1	; case 5
  2070  02D5  1903               	skipnz
  2071  02D6  2AC2               	goto	l2073
  2072  02D7  2AD8               	goto	l344
  2073  02D8                     l344:	
  2074  02D8  2B19               	goto	l2085
  2075  02D9                     l2079:	
  2076                           ;main.c: 508: case STATE_MENU:
  2077                           
  2078                           ;main.c: 506: break ;
  2079                           
  2080                           ;main.c: 504: outputEvent.changeValue=1 ;
  2081                           
  2082                           
  2083                           ;main.c: 509: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x1 , MESSAGE
      +                          _MENU[ menuSelect - cursorPosition ] ) ;
  2084  02D9  0355               	decf	_cursorPosition,w
  2085  02DA  3AFF               	xorlw	255
  2086  02DB  0759               	addwf	_menuSelect,w
  2087  02DC  0709               	addwf	9,w
  2088  02DD  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2089  02DE  0086               	movwf	6
  2090  02DF  0187               	clrf	7
  2091  02E0  3F40               	moviw [0]fsr1
  2092  02E1  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2093  02E2  3F41               	moviw [1]fsr1
  2094  02E3  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2095  02E4  3081               	movlw	129
  2096  02E5  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2097                           
  2098                           ;main.c: 510: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x1 , MESSAGE
      +                          _MENU[ menuSelect - cursorPosition + 1] ) ;
  2099  02E8  0020               	movlb	0	; select bank0
  2100  02E9  0355               	decf	_cursorPosition,w
  2101  02EA  3AFF               	xorlw	255
  2102  02EB  0759               	addwf	_menuSelect,w
  2103  02EC  0709               	addwf	9,w
  2104  02ED  3E02               	addlw	2
  2105  02EE  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2106  02EF  0086               	movwf	6
  2107  02F0  0187               	clrf	7
  2108  02F1  3F40               	moviw [0]fsr1
  2109  02F2  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2110  02F3  3F41               	moviw [1]fsr1
  2111  02F4  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2112  02F5  30C1               	movlw	193
  2113  02F6  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2114                           
  2115                           ;main.c: 511: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[cursorPosition] | 0x0 
      +                          , 0x00 ) ;
  2116  02F9  0020               	movlb	0	; select bank0
  2117  02FA  01A3               	clrf	ParallelLCD_WriteCharacter@character
  2118  02FB  0855               	movf	_cursorPosition,w
  2119  02FC  3E13               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2120  02FD  0084               	movwf	4
  2121  02FE  3087               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2122  02FF  1803               	skipnc
  2123  0300  3E01               	addlw	1
  2124  0301  0085               	movwf	5
  2125  0302  0800               	movf	0,w	;code access
  2126  0303  318E  264E  3180   	fcall	_ParallelLCD_WriteCharacter
  2127                           
  2128                           ;main.c: 512: break ;
  2129  0306  2B4A               	goto	l336
  2130  0307                     l2083:	
  2131                           ;main.c: 514: case STATE_BUZZER_TEST:
  2132                           
  2133                           
  2134                           ;main.c: 515: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Buzzer
      +                           Test" ) ;
  2135  0307  3057               	movlw	low (STR_10| (0+32768))
  2136  0308  0020               	movlb	0	; select bank0
  2137  0309  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2138  030A  3087               	movlw	high (STR_10| (0+32768))
  2139  030B  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2140  030C  3080               	movlw	128
  2141  030D  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2142                           
  2143                           ;main.c: 516: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , "Period
      +                           =" ) ;
  2144  0310  3076               	movlw	low (STR_17| (0+32768))
  2145  0311  0020               	movlb	0	; select bank0
  2146  0312  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2147  0313  3087               	movlw	high (STR_17| (0+32768))
  2148  0314  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2149  0315  30C0               	movlw	192
  2150  0316                     L5:	
  2151  0316  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2152  0319                     l2085:	
  2153                           
  2154                           ;main.c: 517: outputEvent.changeValue=1 ;
  2155  0319  0020               	movlb	0	; select bank0
  2156  031A  14DA               	bsf	_outputEvent,1
  2157                           
  2158                           ;main.c: 518: break ;
  2159  031B  2B4A               	goto	l336
  2160  031C                     l2087:	
  2161                           ;main.c: 520: case STATE_VERSION:
  2162                           
  2163                           
  2164                           ;main.c: 521: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Versio
      +                          n" ) ;
  2165  031C  3087               	movlw	low (STR_11| (0+32768))
  2166  031D  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2167  031E  3087               	movlw	high (STR_11| (0+32768))
  2168  031F  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2169  0320  3080               	movlw	128
  2170  0321  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2171                           
  2172                           ;main.c: 522: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x8 , "00.100
      +                          " ) ;
  2173  0324  308F               	movlw	low (STR_19| (0+32768))
  2174  0325  0020               	movlb	0	; select bank0
  2175  0326  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2176  0327  3087               	movlw	high (STR_19| (0+32768))
  2177  0328  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2178  0329  30C8               	movlw	200
  2179  032A  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2180                           
  2181                           ;main.c: 523: break ;
  2182  032D  2B4A               	goto	l336
  2183  032E                     l2089:	
  2184                           ;main.c: 525: case STATE_ERROR:
  2185                           
  2186                           
  2187                           ;main.c: 526: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Receiv
      +                          e Error !!" ) ;
  2188  032E  3039               	movlw	low (STR_20| (0+32768))
  2189  032F  0020               	movlb	0	; select bank0
  2190  0330  00A3               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2191  0331  3087               	movlw	high (STR_20| (0+32768))
  2192  0332  00A4               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2193  0333  3080               	movlw	128
  2194  0334  318F  272B  3180   	fcall	_ParallelLCD_WriteStringClearing
  2195                           
  2196                           ;main.c: 527: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  2197  0337  30C0               	movlw	192
  2198  0338  318E  268B  3180   	fcall	_ParallelLCD_ClearRow
  2199                           
  2200                           ;main.c: 529: }
  2201                           
  2202                           ;main.c: 528: break ;
  2203  033B  2B4A               	goto	l336
  2204  033C                     l2095:	
  2205  033C  0020               	movlb	0	; select bank0
  2206  033D  0858               	movf	_machineState_,w
  2207                           
  2208                           ; Switch size 1, requested type "space"
  2209                           ; Number of cases is 8, Range of values is 1 to 8
  2210                           ; switch strategies available:
  2211                           ; Name         Instructions Cycles
  2212                           ; direct_byte           25     9 (fixed)
  2213                           ; simple_byte           25    13 (average)
  2214                           ; jumptable            263     9 (fixed)
  2215                           ;	Chosen strategy is direct_byte
  2216  033E  3EFF               	addlw	-1
  2217  033F  1C03               	skipc
  2218  0340  2B4A               	goto	l336
  2219  0341  0084               	movwf	4
  2220  0342  3008               	movlw	8
  2221  0343  0204               	subwf	4,w
  2222  0344  1803               	skipnc
  2223  0345  2B4A               	goto	l336
  2224  0346  3188               	movlp	high S2261
  2225  0347  3504               	lslf	4,w
  2226  0348  3E00               	addlw	low S2261
  2227  0349  0082               	movwf	2
  2228  034A                     l336:	
  2229                           
  2230                           ;main.c: 531: }
  2231                           ;main.c: 534: if( (outputEvent.changeValue&&!(outputEvent.changeValue=0)) ) {
  2232  034A  0020               	movlb	0	; select bank0
  2233  034B  1CDA               	btfss	_outputEvent,1
  2234  034C  2BDF               	goto	l2151
  2235  034D  10DA               	bcf	_outputEvent,1
  2236                           
  2237                           ;main.c: 535: switch( machineState_ ) {
  2238  034E  2BCD               	goto	l2149
  2239  034F                     l2099:	
  2240                           ;main.c: 536: case STATE_CLOCK:
  2241                           
  2242                           
  2243                           ;main.c: 537: case STATE_ALERM:
  2244                           ;main.c: 538: case STATE_ADJUST_CLOCK:
  2245                           ;main.c: 539: case STATE_SET_TIMER:
  2246                           ;main.c: 540: {
  2247                           ;main.c: 541: char string[17] ;
  2248                           ;main.c: 542: _date_time_ConvertByteToDate( datePtr , &string ) ;
  2249  034F  302B               	movlw	(low (main@string| 0))& (0+255)
  2250  0350  00A8               	movwf	??_main
  2251  0351  0828               	movf	??_main,w
  2252  0352  00A0               	movwf	__date_time_ConvertByteToDate@stinrg
  2253  0353  086B               	movf	_datePtr,w
  2254  0354  3185  2542  3180   	fcall	__date_time_ConvertByteToDate
  2255                           
  2256                           ;main.c: 543: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , &string ) ;
  2257  0357  302B               	movlw	(low (main@string| 0))& (0+255)
  2258  0358  0020               	movlb	0	; select bank0
  2259  0359  00A8               	movwf	??_main
  2260  035A  0828               	movf	??_main,w
  2261  035B  00A3               	movwf	ParallelLCD_WriteString@stringPtr
  2262  035C  3080               	movlw	128
  2263  035D  318E  26C2  3180   	fcall	_ParallelLCD_WriteString
  2264                           
  2265                           ;main.c: 544: _date_time_ConvertByteToTime( datePtr , &string ) ;
  2266  0360  302B               	movlw	(low (main@string| 0))& (0+255)
  2267  0361  0020               	movlb	0	; select bank0
  2268  0362  00A8               	movwf	??_main
  2269  0363  0828               	movf	??_main,w
  2270  0364  00A0               	movwf	__date_time_ConvertByteToTime@string
  2271  0365  086B               	movf	_datePtr,w
  2272  0366  3186  2631  3180   	fcall	__date_time_ConvertByteToTime
  2273                           
  2274                           ;main.c: 545: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , &string ) ;
  2275  0369  302B               	movlw	(low (main@string| 0))& (0+255)
  2276  036A  0020               	movlb	0	; select bank0
  2277  036B  00A8               	movwf	??_main
  2278  036C  0828               	movf	??_main,w
  2279  036D  00A3               	movwf	ParallelLCD_WriteString@stringPtr
  2280  036E  30C0               	movlw	192
  2281  036F  318E  26C2  3180   	fcall	_ParallelLCD_WriteString
  2282                           
  2283                           ;main.c: 546: blinkPrescaler = 0 ;
  2284  0372  0020               	movlb	0	; select bank0
  2285  0373  01D3               	clrf	_blinkPrescaler
  2286                           
  2287                           ;main.c: 547: }
  2288                           ;main.c: 548: break ;
  2289  0374  2BDF               	goto	l2151
  2290  0375                     l2109:	
  2291                           ;main.c: 550: case STATE_BUZZER_TEST:
  2292                           
  2293                           
  2294                           ;main.c: 551: {
  2295                           ;main.c: 552: char valueString[4] = "000" ;
  2296  0375  086F               	movf	main@F4297+3,w
  2297  0376  00BF               	movwf	main@valueString+3
  2298  0377  086E               	movf	main@F4297+2,w
  2299  0378  00BE               	movwf	main@valueString+2
  2300  0379  086D               	movf	main@F4297+1,w
  2301  037A  00BD               	movwf	main@valueString+1
  2302  037B  086C               	movf	main@F4297,w
  2303  037C  00BC               	movwf	main@valueString
  2304                           
  2305                           ;main.c: 553: PWM3DCH = PR2 >> 2 ;
  2306  037D  081B               	movf	27,w	;volatile
  2307  037E  00A8               	movwf	??_main
  2308  037F  3002               	movlw	2
  2309  0380                     u2235:	
  2310  0380  36A8               	lsrf	??_main,f
  2311  0381  0B89               	decfsz	9,f
  2312  0382  2B80               	goto	u2235
  2313  0383  0828               	movf	??_main,w
  2314  0384  002C               	movlb	12	; select bank12
  2315  0385  0098               	movwf	24	;volatile
  2316                           
  2317                           ;main.c: 554: Uint08_t tmpValue = PR2 ;
  2318  0386  0020               	movlb	0	; select bank0
  2319  0387  081B               	movf	27,w	;volatile
  2320  0388  00A8               	movwf	??_main
  2321  0389  0828               	movf	??_main,w
  2322  038A  00C1               	movwf	main@tmpValue
  2323                           
  2324                           ;main.c: 555: Uint08_t isNonZero = 0 ;
  2325  038B  01C2               	clrf	main@isNonZero
  2326                           
  2327                           ;main.c: 556: static const Uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 } ;
  2328                           ;main.c: 558: for( Uint08_t i = 0 ; i != 3 ; i++ ) {
  2329  038C  01CA               	clrf	main@i
  2330  038D  3003               	movlw	3
  2331  038E  064A               	xorwf	main@i,w
  2332  038F  1903               	btfsc	3,2
  2333  0390  2BC4               	goto	l2145
  2334  0391                     l2121:	
  2335                           
  2336                           ;main.c: 559: Uint08_t compareUnit = COMPARE_UNITS[i] ;
  2337  0391  084A               	movf	main@i,w
  2338  0392  3E10               	addlw	low (main@COMPARE_UNITS| (0+32768))
  2339  0393  0084               	movwf	4
  2340  0394  3087               	movlw	high (main@COMPARE_UNITS| (0+32768))
  2341  0395  1803               	skipnc
  2342  0396  3E01               	addlw	1
  2343  0397  0085               	movwf	5
  2344  0398  0800               	movf	0,w	;code access
  2345  0399  00A8               	movwf	??_main
  2346  039A  0828               	movf	??_main,w
  2347  039B  00C4               	movwf	main@compareUnit
  2348  039C                     l2129:	
  2349                           ;main.c: 560: while( tmpValue >= compareUnit ) {
  2350                           
  2351  039C  0844               	movf	main@compareUnit,w
  2352  039D  0241               	subwf	main@tmpValue,w
  2353  039E  1C03               	btfss	3,0
  2354  039F  2BAD               	goto	l2131
  2355                           
  2356                           ;main.c: 561: tmpValue -= compareUnit ;
  2357  03A0  0844               	movf	main@compareUnit,w
  2358  03A1  02C1               	subwf	main@tmpValue,f
  2359                           
  2360                           ;main.c: 562: valueString[i]++ ;
  2361  03A2  3001               	movlw	1
  2362  03A3  00A8               	movwf	??_main
  2363  03A4  084A               	movf	main@i,w
  2364  03A5  3E3C               	addlw	(low (main@valueString| 0))& (0+255)
  2365  03A6  0086               	movwf	6
  2366  03A7  0187               	clrf	7
  2367  03A8  0828               	movf	??_main,w
  2368  03A9  0781               	addwf	1,f
  2369                           
  2370                           ;main.c: 563: isNonZero = 1 ;
  2371  03AA  01C2               	clrf	main@isNonZero
  2372  03AB  0AC2               	incf	main@isNonZero,f
  2373  03AC  2B9C               	goto	l2129
  2374  03AD                     l2131:	
  2375                           
  2376                           ;main.c: 564: }
  2377                           ;main.c: 566: if( i == 2 ) break ;
  2378  03AD  3002               	movlw	2
  2379  03AE  064A               	xorwf	main@i,w
  2380  03AF  1903               	btfsc	3,2
  2381  03B0  2BC4               	goto	l2145
  2382                           
  2383                           ;main.c: 567: if( isNonZero ) continue ;
  2384  03B1  0842               	movf	main@isNonZero,w
  2385  03B2  1D03               	btfss	3,2
  2386  03B3  2BBC               	goto	l2141
  2387                           
  2388                           ;main.c: 569: valueString[i] = ' ' ;
  2389  03B4  3020               	movlw	32
  2390  03B5  00A8               	movwf	??_main
  2391  03B6  084A               	movf	main@i,w
  2392  03B7  3E3C               	addlw	(low (main@valueString| 0))& (0+255)
  2393  03B8  0086               	movwf	6
  2394  03B9  0187               	clrf	7
  2395  03BA  0828               	movf	??_main,w
  2396  03BB  0081               	movwf	1
  2397  03BC                     l2141:	
  2398  03BC  3001               	movlw	1
  2399  03BD  00A8               	movwf	??_main
  2400  03BE  0828               	movf	??_main,w
  2401  03BF  07CA               	addwf	main@i,f
  2402  03C0  3003               	movlw	3
  2403  03C1  064A               	xorwf	main@i,w
  2404  03C2  1D03               	btfss	3,2
  2405  03C3  2B91               	goto	l2121
  2406  03C4                     l2145:	
  2407                           
  2408                           ;main.c: 570: }
  2409                           ;main.c: 572: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xD , &valueString ) 
      +                          ;
  2410  03C4  303C               	movlw	(low (main@valueString| 0))& (0+255)
  2411  03C5  00A8               	movwf	??_main
  2412  03C6  0828               	movf	??_main,w
  2413  03C7  00A3               	movwf	ParallelLCD_WriteString@stringPtr
  2414  03C8  30CD               	movlw	205
  2415  03C9  318E  26C2  3180   	fcall	_ParallelLCD_WriteString
  2416                           
  2417                           ;main.c: 575: }
  2418                           
  2419                           ;main.c: 573: }
  2420                           ;main.c: 574: break ;
  2421  03CC  2BDF               	goto	l2151
  2422  03CD                     l2149:	
  2423  03CD  0020               	movlb	0	; select bank0
  2424  03CE  0858               	movf	_machineState_,w
  2425                           
  2426                           ; Switch size 1, requested type "space"
  2427                           ; Number of cases is 5, Range of values is 1 to 6
  2428                           ; switch strategies available:
  2429                           ; Name         Instructions Cycles
  2430                           ; simple_byte           16     9 (average)
  2431                           ; direct_byte           21     9 (fixed)
  2432                           ; jumptable            263     9 (fixed)
  2433                           ;	Chosen strategy is simple_byte
  2434  03CF  3A01               	xorlw	1	; case 1
  2435  03D0  1903               	skipnz
  2436  03D1  2B4F               	goto	l2099
  2437  03D2  3A02               	xorlw	2	; case 3
  2438  03D3  1903               	skipnz
  2439  03D4  2B4F               	goto	l2099
  2440  03D5  3A07               	xorlw	7	; case 4
  2441  03D6  1903               	skipnz
  2442  03D7  2B4F               	goto	l2099
  2443  03D8  3A01               	xorlw	1	; case 5
  2444  03D9  1903               	skipnz
  2445  03DA  2B4F               	goto	l2099
  2446  03DB  3A03               	xorlw	3	; case 6
  2447  03DC  1903               	skipnz
  2448  03DD  2B75               	goto	l2109
  2449  03DE  2BDF               	goto	l2151
  2450  03DF                     l2151:	
  2451                           
  2452                           ;main.c: 577: }
  2453                           ;main.c: 579: if( machineState_ == STATE_ADJUST_CLOCK || machineState_ == STATE_SET_TIME
      +                          R ) {
  2454  03DF  3003               	movlw	3
  2455  03E0  0020               	movlb	0	; select bank0
  2456  03E1  0658               	xorwf	_machineState_,w
  2457  03E2  1903               	btfsc	3,2
  2458  03E3  2BE8               	goto	l2155
  2459  03E4  3005               	movlw	5
  2460  03E5  0658               	xorwf	_machineState_,w
  2461  03E6  1D03               	btfss	3,2
  2462  03E7  28E8               	goto	l259
  2463  03E8                     l2155:	
  2464                           
  2465                           ;main.c: 580: char string[4] ;
  2466                           ;main.c: 581: if( blinkPrescaler == 0x00 ) {
  2467  03E8  0853               	movf	_blinkPrescaler,w
  2468  03E9  1D03               	btfss	3,2
  2469  03EA  2C04               	goto	l2159
  2470                           
  2471                           ;main.c: 582: _date_time_ConvertByteToDiscrete( datePtr , &string , editSelect ) ;
  2472  03EB  3045               	movlw	(low (main@string_797| 0))& (0+255)
  2473  03EC  00A8               	movwf	??_main
  2474  03ED  0828               	movf	??_main,w
  2475  03EE  00A0               	movwf	__date_time_ConvertByteToDiscrete@string
  2476  03EF  0856               	movf	_editSelect,w
  2477  03F0  00A9               	movwf	??_main+1
  2478  03F1  0829               	movf	??_main+1,w
  2479  03F2  00A1               	movwf	__date_time_ConvertByteToDiscrete@select
  2480  03F3  086B               	movf	_datePtr,w
  2481  03F4  3184  2421  3180   	fcall	__date_time_ConvertByteToDiscrete
  2482                           
  2483                           ;main.c: 583: ParallelLCD_WriteString( currentValueInfo->position , &string ) ;
  2484  03F7  3045               	movlw	(low (main@string_797| 0))& (0+255)
  2485  03F8  0020               	movlb	0	; select bank0
  2486  03F9  00A8               	movwf	??_main
  2487  03FA  0828               	movf	??_main,w
  2488  03FB  00A3               	movwf	ParallelLCD_WriteString@stringPtr
  2489  03FC  0851               	movf	_currentValueInfo,w
  2490  03FD  0084               	movwf	4
  2491  03FE  0852               	movf	_currentValueInfo+1,w
  2492  03FF  0085               	movwf	5
  2493  0400  0800               	movf	0,w	;code access
  2494  0401  318E  26C2  3180   	fcall	_ParallelLCD_WriteString
  2495  0404                     l2159:	
  2496                           
  2497                           ;main.c: 584: }
  2498                           ;main.c: 585: if( blinkPrescaler == 0xC0 ) {
  2499  0404  30C0               	movlw	192
  2500  0405  0020               	movlb	0	; select bank0
  2501  0406  0653               	xorwf	_blinkPrescaler,w
  2502  0407  1D03               	btfss	3,2
  2503  0408  28E8               	goto	l259
  2504                           
  2505                           ;main.c: 586: ParallelLCD_ClearPartial( currentValueInfo->position , currentValueInfo->l
      +                          ength ) ;
  2506  0409  0852               	movf	_currentValueInfo+1,w
  2507  040A  00A9               	movwf	??_main+1
  2508  040B  0851               	movf	_currentValueInfo,w
  2509  040C  00A8               	movwf	??_main
  2510  040D  3001               	movlw	1
  2511  040E  0728               	addwf	??_main,w
  2512  040F  0084               	movwf	4
  2513  0410  0829               	movf	??_main+1,w
  2514  0411  1803               	skipnc
  2515  0412  0A29               	incf	??_main+1,w
  2516  0413  0085               	movwf	5
  2517  0414  0800               	movf	0,w	;code access
  2518  0415  00AA               	movwf	??_main+2
  2519  0416  082A               	movf	??_main+2,w
  2520  0417  00A3               	movwf	ParallelLCD_ClearPartial@length
  2521  0418  0851               	movf	_currentValueInfo,w
  2522  0419  0084               	movwf	4
  2523  041A  0852               	movf	_currentValueInfo+1,w
  2524  041B  0085               	movwf	5
  2525  041C  0800               	movf	0,w	;code access
  2526  041D  318E  2672  3180   	fcall	_ParallelLCD_ClearPartial
  2527                           
  2528                           ;main.c: 587: }
  2529                           ;main.c: 588: }
  2530                           ;main.c: 589: }
  2531  0420  28E8               	goto	l259
  2532  0421                     __end_of_main:	
  2533                           
  2534                           	psect	swtext1
  2535  0800                     __pswtext1:	
  2536  0800                     S2261:	
  2537  0800  3182  2AAA         	ljmp	l2065
  2538  0802  3182  2AD9         	ljmp	l2079
  2539  0804  3182  2AAA         	ljmp	l2065
  2540  0806  3182  2AAA         	ljmp	l2065
  2541  0808  3182  2AAA         	ljmp	l2065
  2542  080A  3183  2B07         	ljmp	l2083
  2543  080C  3183  2B1C         	ljmp	l2087
  2544  080E  3183  2B2E         	ljmp	l2089
  2545                           
  2546                           	psect	text1
  2547  07BF                     __ptext1:	
  2548 ;; *************** function _initialize *****************
  2549 ;; Defined at:
  2550 ;;		line 3 in file "src/pic16f1508_init.h"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;		None               void
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2564 ;;      Params:         0       0       0       0
  2565 ;;      Locals:         0       0       0       0
  2566 ;;      Temps:          0       0       0       0
  2567 ;;      Totals:         0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    2
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_main
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           
  2579                           ;psect for function _initialize
  2580  07BF                     _initialize:	
  2581                           
  2582                           ;pic16f1508_init.h: 6: OSCCONbits.IRCF = 0b1011 ;
  2583                           
  2584                           ;incstack = 0
  2585                           ; Regs used in _initialize: [wreg+status,2+status,0]
  2586  07BF  0021               	movlb	1	; select bank1
  2587  07C0  0819               	movf	25,w	;volatile
  2588  07C1  3987               	andlw	-121
  2589  07C2  3858               	iorlw	88
  2590  07C3  0099               	movwf	25	;volatile
  2591                           
  2592                           ;pic16f1508_init.h: 7: OSCCONbits.SCS = 0b10 ;
  2593  07C4  0819               	movf	25,w	;volatile
  2594  07C5  39FC               	andlw	-4
  2595  07C6  3802               	iorlw	2
  2596  07C7  0099               	movwf	25	;volatile
  2597                           
  2598                           ;pic16f1508_init.h: 10: INTCONbits.GIE = 1 ;
  2599  07C8  178B               	bsf	11,7	;volatile
  2600                           
  2601                           ;pic16f1508_init.h: 11: INTCONbits.PEIE = 0 ;
  2602  07C9  130B               	bcf	11,6	;volatile
  2603                           
  2604                           ;pic16f1508_init.h: 12: INTCONbits.INTE = 0 ;
  2605  07CA  120B               	bcf	11,4	;volatile
  2606                           
  2607                           ;pic16f1508_init.h: 15: INTCONbits.IOCIE = 0 ;
  2608  07CB  118B               	bcf	11,3	;volatile
  2609                           
  2610                           ;pic16f1508_init.h: 16: INTCONbits.IOCIE = 0 ;
  2611  07CC  118B               	bcf	11,3	;volatile
  2612                           
  2613                           ;pic16f1508_init.h: 17: IOCANbits.IOCAN3 = 1 ;
  2614  07CD  0027               	movlb	7	; select bank7
  2615  07CE  1592               	bsf	18,3	;volatile
  2616                           
  2617                           ;pic16f1508_init.h: 20: OPTION_REGbits.PSA = 0 ;
  2618  07CF  0021               	movlb	1	; select bank1
  2619  07D0  1195               	bcf	21,3	;volatile
  2620                           
  2621                           ;pic16f1508_init.h: 21: OPTION_REGbits.PS = 0b010 ;
  2622  07D1  0815               	movf	21,w	;volatile
  2623  07D2  39F8               	andlw	-8
  2624  07D3  3802               	iorlw	2
  2625  07D4  0095               	movwf	21	;volatile
  2626                           
  2627                           ;pic16f1508_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  2628  07D5  1295               	bcf	21,5	;volatile
  2629                           
  2630                           ;pic16f1508_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  2631  07D6  1615               	bsf	21,4	;volatile
  2632                           
  2633                           ;pic16f1508_init.h: 24: TMR0 = 0 ;
  2634  07D7  0020               	movlb	0	; select bank0
  2635  07D8  0195               	clrf	21	;volatile
  2636                           
  2637                           ;pic16f1508_init.h: 25: INTCONbits.TMR0IE = 0 ;
  2638  07D9  128B               	bcf	11,5	;volatile
  2639                           
  2640                           ;pic16f1508_init.h: 26: INTCONbits.TMR0IF = 0 ;
  2641  07DA  110B               	bcf	11,2	;volatile
  2642                           
  2643                           ;pic16f1508_init.h: 29: SSP1STAT = 0b10000000 ;
  2644  07DB  3080               	movlw	128
  2645  07DC  0024               	movlb	4	; select bank4
  2646  07DD  0094               	movwf	20	;volatile
  2647                           
  2648                           ;pic16f1508_init.h: 30: SSP1CON1 = 0b00101000 ;
  2649  07DE  3028               	movlw	40
  2650  07DF  0095               	movwf	21	;volatile
  2651                           
  2652                           ;pic16f1508_init.h: 31: SSP1ADD = 9 ;
  2653  07E0  3009               	movlw	9
  2654  07E1  0092               	movwf	18	;volatile
  2655                           
  2656                           ;pic16f1508_init.h: 34: T2CONbits.T2CKPS = 0b00 ;
  2657  07E2  30FC               	movlw	-4
  2658  07E3  0020               	movlb	0	; select bank0
  2659  07E4  059C               	andwf	28,f	;volatile
  2660                           
  2661                           ;pic16f1508_init.h: 35: T2CONbits.T2OUTPS = 0b0000 ;
  2662  07E5  3087               	movlw	-121
  2663  07E6  059C               	andwf	28,f	;volatile
  2664                           
  2665                           ;pic16f1508_init.h: 36: PIE1bits.TMR2IE = 0 ;
  2666  07E7  0021               	movlb	1	; select bank1
  2667  07E8  1091               	bcf	17,1	;volatile
  2668                           
  2669                           ;pic16f1508_init.h: 37: PIR1bits.TMR2IF = 0 ;
  2670  07E9  0020               	movlb	0	; select bank0
  2671  07EA  1091               	bcf	17,1	;volatile
  2672                           
  2673                           ;pic16f1508_init.h: 38: PR2 = 60 ;
  2674  07EB  303C               	movlw	60
  2675  07EC  009B               	movwf	27	;volatile
  2676                           
  2677                           ;pic16f1508_init.h: 39: TMR2 = 0 ;
  2678  07ED  019A               	clrf	26	;volatile
  2679                           
  2680                           ;pic16f1508_init.h: 40: T2CONbits.TMR2ON = 1 ;
  2681  07EE  151C               	bsf	28,2	;volatile
  2682                           
  2683                           ;pic16f1508_init.h: 43: PWM3DCH = 0 ;
  2684  07EF  002C               	movlb	12	; select bank12
  2685  07F0  0198               	clrf	24	;volatile
  2686                           
  2687                           ;pic16f1508_init.h: 44: PWM3DCL = 0 ;
  2688  07F1  0197               	clrf	23	;volatile
  2689                           
  2690                           ;pic16f1508_init.h: 45: PWM3CONbits.PWM3OE = 0 ;
  2691  07F2  1319               	bcf	25,6	;volatile
  2692                           
  2693                           ;pic16f1508_init.h: 46: PWM3CONbits.PWM3POL = 0 ;
  2694  07F3  1219               	bcf	25,4	;volatile
  2695                           
  2696                           ;pic16f1508_init.h: 47: PWM3CONbits.PWM3EN = 1 ;
  2697  07F4  1799               	bsf	25,7	;volatile
  2698                           
  2699                           ;pic16f1508_init.h: 49: ANSELA = 0b00000000 ;
  2700  07F5  0023               	movlb	3	; select bank3
  2701  07F6  018C               	clrf	12	;volatile
  2702                           
  2703                           ;pic16f1508_init.h: 50: ANSELB = 0b00000000 ;
  2704  07F7  018D               	clrf	13	;volatile
  2705                           
  2706                           ;pic16f1508_init.h: 51: ANSELC = 0b00000000 ;
  2707  07F8  018E               	clrf	14	;volatile
  2708                           
  2709                           ;pic16f1508_init.h: 53: TRISA = 0b00110011 ;
  2710  07F9  3033               	movlw	51
  2711  07FA  0021               	movlb	1	; select bank1
  2712  07FB  008C               	movwf	12	;volatile
  2713                           
  2714                           ;pic16f1508_init.h: 54: TRISB = 0b01010000 ;
  2715  07FC  3050               	movlw	80
  2716  07FD  008D               	movwf	13	;volatile
  2717                           
  2718                           ;pic16f1508_init.h: 55: TRISC = 0b00000000 ;
  2719  07FE  018E               	clrf	14	;volatile
  2720  07FF  0008               	return
  2721  0800                     __end_of_initialize:	
  2722                           
  2723                           	psect	text2
  2724  0F61                     __ptext2:	
  2725 ;; *************** function __ds1307_SetClock *****************
  2726 ;; Defined at:
  2727 ;;		line 123 in file "src/../../_Common/DS1307.h"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  date            1    wreg     PTR struct .
  2730 ;;		 -> dateCurrent(7), 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  date            1    1[BANK0 ] PTR struct .
  2733 ;;		 -> dateCurrent(7), 
  2734 ;;  i               1    2[BANK0 ] unsigned char 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      unsigned char 
  2737 ;; Registers used:
  2738 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2744 ;;      Params:         0       0       0       0
  2745 ;;      Locals:         0       2       0       0
  2746 ;;      Temps:          0       1       0       0
  2747 ;;      Totals:         0       3       0       0
  2748 ;;Total ram usage:        3 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    2
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_main
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           
  2759                           ;psect for function __ds1307_SetClock
  2760  0F61                     __ds1307_SetClock:	
  2761                           
  2762                           ;incstack = 0
  2763                           ; Regs used in __ds1307_SetClock: [wreg+fsr1l+fsr1h+status,2+status,0]
  2764                           ;__ds1307_SetClock@date stored from wreg
  2765  0F61  0020               	movlb	0	; select bank0
  2766  0F62  00A1               	movwf	__ds1307_SetClock@date
  2767                           
  2768                           ;DS1307.h: 126: SSP1CON2bits.SEN = 1 ;
  2769  0F63  0024               	movlb	4	; select bank4
  2770  0F64  1416               	bsf	22,0	;volatile
  2771  0F65                     l200:	
  2772                           ;DS1307.h: 127: while ( SSP1CON2bits.SEN ) ;
  2773                           
  2774  0F65  1816               	btfsc	22,0	;volatile
  2775  0F66  2F65               	goto	l200
  2776                           
  2777                           ;DS1307.h: 128: SSP1IF = 0 ;
  2778  0F67  0020               	movlb	0	; select bank0
  2779  0F68  1191               	bcf	17,3	;volatile
  2780                           
  2781                           ;DS1307.h: 131: SSP1BUF = 0xD0 ;
  2782  0F69  30D0               	movlw	208
  2783  0F6A  0024               	movlb	4	; select bank4
  2784  0F6B  0091               	movwf	17	;volatile
  2785  0F6C                     l203:	
  2786                           ;DS1307.h: 132: while ( !SSP1IF ) ;
  2787                           
  2788  0F6C  0020               	movlb	0	; select bank0
  2789  0F6D  1D91               	btfss	17,3	;volatile
  2790  0F6E  2F6C               	goto	l203
  2791                           
  2792                           ;DS1307.h: 133: SSP1IF = 0 ;
  2793  0F6F  1191               	bcf	17,3	;volatile
  2794                           
  2795                           ;DS1307.h: 134: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  2796  0F70  0024               	movlb	4	; select bank4
  2797  0F71  1B16               	btfsc	22,6	;volatile
  2798  0F72  0008               	return
  2799                           
  2800                           ;DS1307.h: 137: SSP1BUF = 0x00 ;
  2801                           
  2802                           ;	Return value of __ds1307_SetClock is never used
  2803  0F73  0191               	clrf	17	;volatile
  2804  0F74                     l208:	
  2805                           ;DS1307.h: 138: while ( !SSP1IF ) ;
  2806                           
  2807  0F74  0020               	movlb	0	; select bank0
  2808  0F75  1D91               	btfss	17,3	;volatile
  2809  0F76  2F74               	goto	l208
  2810                           
  2811                           ;DS1307.h: 139: SSP1IF = 0 ;
  2812  0F77  1191               	bcf	17,3	;volatile
  2813                           
  2814                           ;DS1307.h: 140: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  2815  0F78  0024               	movlb	4	; select bank4
  2816  0F79  1B16               	btfsc	22,6	;volatile
  2817  0F7A  0008               	return
  2818                           
  2819                           ;DS1307.h: 142: for ( Uint08_t i = 0 ; i < sizeof ( StDateTime ) ; i++ ) {
  2820                           
  2821                           ;	Return value of __ds1307_SetClock is never used
  2822  0F7B  0020               	movlb	0	; select bank0
  2823  0F7C  01A2               	clrf	__ds1307_SetClock@i
  2824  0F7D  3007               	movlw	7
  2825  0F7E  0222               	subwf	__ds1307_SetClock@i,w
  2826  0F7F  1803               	btfsc	3,0
  2827  0F80  2F9A               	goto	l213
  2828  0F81                     l1799:	
  2829                           
  2830                           ;DS1307.h: 144: SSP1BUF = date->array[i] ;
  2831  0F81  0822               	movf	__ds1307_SetClock@i,w
  2832  0F82  0721               	addwf	__ds1307_SetClock@date,w
  2833  0F83  00A0               	movwf	??__ds1307_SetClock
  2834  0F84  0820               	movf	??__ds1307_SetClock,w
  2835  0F85  0086               	movwf	6
  2836  0F86  0187               	clrf	7
  2837  0F87  0801               	movf	1,w
  2838  0F88  0024               	movlb	4	; select bank4
  2839  0F89  0091               	movwf	17	;volatile
  2840  0F8A                     l214:	
  2841                           ;DS1307.h: 145: while ( !SSP1IF ) ;
  2842                           
  2843  0F8A  0020               	movlb	0	; select bank0
  2844  0F8B  1D91               	btfss	17,3	;volatile
  2845  0F8C  2F8A               	goto	l214
  2846                           
  2847                           ;DS1307.h: 146: SSP1IF = 0 ;
  2848  0F8D  1191               	bcf	17,3	;volatile
  2849                           
  2850                           ;DS1307.h: 147: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  2851  0F8E  0024               	movlb	4	; select bank4
  2852  0F8F  1B16               	btfsc	22,6	;volatile
  2853  0F90  0008               	return
  2854                           
  2855                           ;	Return value of __ds1307_SetClock is never used
  2856  0F91  3001               	movlw	1
  2857  0F92  0020               	movlb	0	; select bank0
  2858  0F93  00A0               	movwf	??__ds1307_SetClock
  2859  0F94  0820               	movf	??__ds1307_SetClock,w
  2860  0F95  07A2               	addwf	__ds1307_SetClock@i,f
  2861  0F96  3007               	movlw	7
  2862  0F97  0222               	subwf	__ds1307_SetClock@i,w
  2863  0F98  1C03               	skipc
  2864  0F99  2F81               	goto	l1799
  2865  0F9A                     l213:	
  2866                           
  2867                           ;DS1307.h: 148: }
  2868                           ;DS1307.h: 151: SSP1CON2bits.PEN = 1 ;
  2869  0F9A  0024               	movlb	4	; select bank4
  2870  0F9B  1516               	bsf	22,2	;volatile
  2871  0F9C                     l218:	
  2872                           ;DS1307.h: 152: while ( SSP1CON2bits.PEN ) ;
  2873                           
  2874  0F9C  1D16               	btfss	22,2	;volatile
  2875                           
  2876                           ;DS1307.h: 154: return 0 ;
  2877                           ;	Return value of __ds1307_SetClock is never used
  2878  0F9D  0008               	return
  2879  0F9E  2F9C               	goto	l218
  2880  0F9F                     __end_of__ds1307_SetClock:	
  2881                           
  2882                           	psect	text3
  2883  0F9F                     __ptext3:	
  2884 ;; *************** function __ds1307_GetData *****************
  2885 ;; Defined at:
  2886 ;;		line 74 in file "src/../../_Common/DS1307.h"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  date            1    wreg     PTR struct .
  2889 ;;		 -> dateCurrent(7), dateTimer(7), 
  2890 ;;  ramAddress      1    0[BANK0 ] unsigned char 
  2891 ;;  length          1    1[BANK0 ] unsigned char 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  date            1    4[BANK0 ] PTR struct .
  2894 ;;		 -> dateCurrent(7), dateTimer(7), 
  2895 ;;  dataCount       1    5[BANK0 ] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      unsigned char 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2905 ;;      Params:         0       2       0       0
  2906 ;;      Locals:         0       2       0       0
  2907 ;;      Temps:          0       2       0       0
  2908 ;;      Totals:         0       6       0       0
  2909 ;;Total ram usage:        6 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    2
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function __ds1307_GetData
  2921  0F9F                     __ds1307_GetData:	
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in __ds1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  2925                           ;__ds1307_GetData@date stored from wreg
  2926  0F9F  0020               	movlb	0	; select bank0
  2927  0FA0  00A4               	movwf	__ds1307_GetData@date
  2928                           
  2929                           ;DS1307.h: 77: SSP1CON2bits.SEN = 1 ;
  2930  0FA1  0024               	movlb	4	; select bank4
  2931  0FA2  1416               	bsf	22,0	;volatile
  2932  0FA3                     l167:	
  2933                           ;DS1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  2934                           
  2935  0FA3  1816               	btfsc	22,0	;volatile
  2936  0FA4  2FA3               	goto	l167
  2937                           
  2938                           ;DS1307.h: 79: SSP1IF = 0 ;
  2939  0FA5  0020               	movlb	0	; select bank0
  2940  0FA6  1191               	bcf	17,3	;volatile
  2941                           
  2942                           ;DS1307.h: 82: SSP1BUF = 0xD0 ;
  2943  0FA7  30D0               	movlw	208
  2944  0FA8  0024               	movlb	4	; select bank4
  2945  0FA9  0091               	movwf	17	;volatile
  2946  0FAA                     l170:	
  2947                           ;DS1307.h: 83: while ( !SSP1IF ) ;
  2948                           
  2949  0FAA  0020               	movlb	0	; select bank0
  2950  0FAB  1D91               	btfss	17,3	;volatile
  2951  0FAC  2FAA               	goto	l170
  2952                           
  2953                           ;DS1307.h: 84: SSP1IF = 0 ;
  2954  0FAD  1191               	bcf	17,3	;volatile
  2955                           
  2956                           ;DS1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  2957  0FAE  0024               	movlb	4	; select bank4
  2958  0FAF  1F16               	btfss	22,6	;volatile
  2959  0FB0  2FB3               	goto	l1751
  2960  0FB1  3001               	movlw	1
  2961  0FB2  0008               	return
  2962  0FB3                     l1751:	
  2963                           
  2964                           ;DS1307.h: 88: SSP1BUF = ramAddress ;
  2965  0FB3  0020               	movlb	0	; select bank0
  2966  0FB4  0820               	movf	__ds1307_GetData@ramAddress,w
  2967  0FB5  0024               	movlb	4	; select bank4
  2968  0FB6  0091               	movwf	17	;volatile
  2969  0FB7                     l175:	
  2970                           ;DS1307.h: 89: while ( !SSP1IF ) ;
  2971                           
  2972  0FB7  0020               	movlb	0	; select bank0
  2973  0FB8  1D91               	btfss	17,3	;volatile
  2974  0FB9  2FB7               	goto	l175
  2975                           
  2976                           ;DS1307.h: 90: SSP1IF = 0 ;
  2977  0FBA  1191               	bcf	17,3	;volatile
  2978                           
  2979                           ;DS1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  2980  0FBB  0024               	movlb	4	; select bank4
  2981  0FBC  1F16               	btfss	22,6	;volatile
  2982  0FBD  2FC0               	goto	l178
  2983  0FBE  3002               	movlw	2
  2984  0FBF  0008               	return
  2985  0FC0                     l178:	
  2986                           
  2987                           ;DS1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  2988  0FC0  1496               	bsf	22,1	;volatile
  2989  0FC1                     l179:	
  2990                           ;DS1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  2991                           
  2992  0FC1  1896               	btfsc	22,1	;volatile
  2993  0FC2  2FC1               	goto	l179
  2994                           
  2995                           ;DS1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  2996  0FC3  30D1               	movlw	209
  2997  0FC4  0091               	movwf	17	;volatile
  2998  0FC5                     l182:	
  2999                           ;DS1307.h: 98: while ( !SSP1IF ) ;
  3000                           
  3001  0FC5  0020               	movlb	0	; select bank0
  3002  0FC6  1D91               	btfss	17,3	;volatile
  3003  0FC7  2FC5               	goto	l182
  3004                           
  3005                           ;DS1307.h: 99: SSP1IF = 0 ;
  3006  0FC8  1191               	bcf	17,3	;volatile
  3007                           
  3008                           ;DS1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  3009  0FC9  0024               	movlb	4	; select bank4
  3010  0FCA  1F16               	btfss	22,6	;volatile
  3011  0FCB  2FCE               	goto	l1763
  3012  0FCC  3003               	movlw	3
  3013  0FCD  0008               	return
  3014  0FCE                     l1763:	
  3015                           
  3016                           ;DS1307.h: 103: Uint08_t dataCount = 0 ;
  3017  0FCE  0020               	movlb	0	; select bank0
  3018  0FCF  01A5               	clrf	__ds1307_GetData@dataCount
  3019  0FD0                     l1777:	
  3020                           ;DS1307.h: 104: while ( dataCount < length ) {
  3021                           
  3022  0FD0  0020               	movlb	0	; select bank0
  3023  0FD1  0821               	movf	__ds1307_GetData@length,w
  3024  0FD2  0225               	subwf	__ds1307_GetData@dataCount,w
  3025  0FD3  1803               	btfsc	3,0
  3026  0FD4  2FFA               	goto	l194
  3027                           
  3028                           ;DS1307.h: 105: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  3029  0FD5  30A6               	movlw	166
  3030  0FD6  00A2               	movwf	??__ds1307_GetData
  3031  0FD7                     u2467:	
  3032  0FD7  0BA2               	decfsz	??__ds1307_GetData,f
  3033  0FD8  2FD7               	goto	u2467
  3034  0FD9  0000               	nop
  3035                           
  3036                           ;DS1307.h: 106: SSP1CON2bits.RCEN = 1 ;
  3037  0FDA  0024               	movlb	4	; select bank4
  3038  0FDB  1596               	bsf	22,3	;volatile
  3039  0FDC                     l188:	
  3040                           ;DS1307.h: 107: while ( SSP1CON2bits.RCEN ) ;
  3041                           
  3042  0FDC  1996               	btfsc	22,3	;volatile
  3043  0FDD  2FDC               	goto	l188
  3044  0FDE                     l191:	
  3045                           ;DS1307.h: 108: while ( !SSPSTATbits.BF ) ;
  3046                           
  3047  0FDE  1C14               	btfss	20,0	;volatile
  3048  0FDF  2FDE               	goto	l191
  3049                           
  3050                           ;DS1307.h: 109: date->array[ dataCount++ ] = SSP1BUF ;
  3051  0FE0  0811               	movf	17,w	;volatile
  3052  0FE1  0020               	movlb	0	; select bank0
  3053  0FE2  00A2               	movwf	??__ds1307_GetData
  3054  0FE3  0825               	movf	__ds1307_GetData@dataCount,w
  3055  0FE4  0724               	addwf	__ds1307_GetData@date,w
  3056  0FE5  00A3               	movwf	??__ds1307_GetData+1
  3057  0FE6  0823               	movf	??__ds1307_GetData+1,w
  3058  0FE7  0086               	movwf	6
  3059  0FE8  0187               	clrf	7
  3060  0FE9  0822               	movf	??__ds1307_GetData,w
  3061  0FEA  0081               	movwf	1
  3062  0FEB  3001               	movlw	1
  3063  0FEC  00A2               	movwf	??__ds1307_GetData
  3064  0FED  0822               	movf	??__ds1307_GetData,w
  3065  0FEE  07A5               	addwf	__ds1307_GetData@dataCount,f
  3066                           
  3067                           ;DS1307.h: 110: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  3068  0FEF  0825               	movf	__ds1307_GetData@dataCount,w
  3069  0FF0  0621               	xorwf	__ds1307_GetData@length,w
  3070  0FF1  1D03               	btfss	3,2
  3071  0FF2  2FF6               	goto	u1600
  3072  0FF3  0024               	movlb	4	; select bank4
  3073  0FF4  1696               	bsf	22,5	;volatile
  3074  0FF5  2FF8               	goto	l1775
  3075  0FF6                     u1600:	
  3076  0FF6  0024               	movlb	4	; select bank4
  3077  0FF7  1296               	bcf	22,5	;volatile
  3078  0FF8                     l1775:	
  3079                           
  3080                           ;DS1307.h: 111: SSP1CON2bits.ACKEN = 1 ;
  3081  0FF8  1616               	bsf	22,4	;volatile
  3082  0FF9  2FD0               	goto	l1777
  3083  0FFA                     l194:	
  3084                           
  3085                           ;DS1307.h: 112: }
  3086                           ;DS1307.h: 115: SSP1CON2bits.PEN = 1 ;
  3087  0FFA  0024               	movlb	4	; select bank4
  3088  0FFB  1516               	bsf	22,2	;volatile
  3089  0FFC                     l195:	
  3090                           ;DS1307.h: 116: while ( SSP1CON2bits.PEN ) ;
  3091                           
  3092  0FFC  1916               	btfsc	22,2	;volatile
  3093  0FFD  2FFC               	goto	l195
  3094                           
  3095                           ;DS1307.h: 118: return 0 ;
  3096  0FFE  3000               	movlw	0
  3097  0FFF  0008               	return
  3098  1000                     __end_of__ds1307_GetData:	
  3099                           
  3100                           	psect	text4
  3101  0631                     __ptext4:	
  3102 ;; *************** function __date_time_ConvertByteToTime *****************
  3103 ;; Defined at:
  3104 ;;		line 108 in file "src/../../_Common/DateTime.h"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  dateTime        1    wreg     PTR struct .
  3107 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3108 ;;  string          1    0[BANK0 ] PTR unsigned char 
  3109 ;;		 -> main@string(17), 
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  dateTime        1    3[BANK0 ] PTR struct .
  3112 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3122 ;;      Params:         0       1       0       0
  3123 ;;      Locals:         0       1       0       0
  3124 ;;      Temps:          0       2       0       0
  3125 ;;      Totals:         0       4       0       0
  3126 ;;Total ram usage:        4 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    2
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function __date_time_ConvertByteToTime
  3138  0631                     __date_time_ConvertByteToTime:	
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in __date_time_ConvertByteToTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  3142                           ;__date_time_ConvertByteToTime@dateTime stored from wreg
  3143  0631  0020               	movlb	0	; select bank0
  3144  0632  00A3               	movwf	__date_time_ConvertByteToTime@dateTime
  3145                           
  3146                           ;DateTime.h: 110: string[8] = 0 ;
  3147  0633  0820               	movf	__date_time_ConvertByteToTime@string,w
  3148  0634  3E08               	addlw	8
  3149  0635  0086               	movwf	6
  3150  0636  0187               	clrf	7
  3151  0637  0181               	clrf	1
  3152                           
  3153                           ;DateTime.h: 112: string[5] = ':' ;
  3154  0638  303A               	movlw	58
  3155  0639  00A1               	movwf	??__date_time_ConvertByteToTime
  3156  063A  0820               	movf	__date_time_ConvertByteToTime@string,w
  3157  063B  3E05               	addlw	5
  3158  063C  0086               	movwf	6
  3159  063D  0187               	clrf	7
  3160  063E  0821               	movf	??__date_time_ConvertByteToTime,w
  3161  063F  0081               	movwf	1
  3162                           
  3163                           ;DateTime.h: 113: string[2] = ':' ;
  3164  0640  303A               	movlw	58
  3165  0641  00A1               	movwf	??__date_time_ConvertByteToTime
  3166  0642  0820               	movf	__date_time_ConvertByteToTime@string,w
  3167  0643  3E02               	addlw	2
  3168  0644  0086               	movwf	6
  3169  0645  0187               	clrf	7
  3170  0646  0821               	movf	??__date_time_ConvertByteToTime,w
  3171  0647  0081               	movwf	1
  3172                           
  3173                           ;DateTime.h: 116: string[7] = ( dateTime->second & 0x0F ) | '0' ;
  3174  0648  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3175  0649  0086               	movwf	6
  3176  064A  0187               	clrf	7
  3177  064B  0801               	movf	1,w
  3178  064C  390F               	andlw	15
  3179  064D  3830               	iorlw	48
  3180  064E  00A1               	movwf	??__date_time_ConvertByteToTime
  3181  064F  0820               	movf	__date_time_ConvertByteToTime@string,w
  3182  0650  3E07               	addlw	7
  3183  0651  0086               	movwf	6
  3184  0652  0187               	clrf	7
  3185  0653  0821               	movf	??__date_time_ConvertByteToTime,w
  3186  0654  0081               	movwf	1
  3187                           
  3188                           ;DateTime.h: 117: string[6] = ( dateTime->second >> 4 ) | '0' ;
  3189  0655  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3190  0656  0086               	movwf	6
  3191  0657  0187               	clrf	7
  3192  0658  0801               	movf	1,w
  3193  0659  00A1               	movwf	??__date_time_ConvertByteToTime
  3194  065A  3004               	movlw	4
  3195  065B                     u1415:	
  3196  065B  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3197  065C  0B89               	decfsz	9,f
  3198  065D  2E5B               	goto	u1415
  3199  065E  0821               	movf	??__date_time_ConvertByteToTime,w
  3200  065F  3830               	iorlw	48
  3201  0660  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3202  0661  0820               	movf	__date_time_ConvertByteToTime@string,w
  3203  0662  3E06               	addlw	6
  3204  0663  0086               	movwf	6
  3205  0664  0187               	clrf	7
  3206  0665  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3207  0666  0081               	movwf	1
  3208                           
  3209                           ;DateTime.h: 119: string[4] = ( dateTime->minute & 0x0F ) | '0' ;
  3210  0667  0A23               	incf	__date_time_ConvertByteToTime@dateTime,w
  3211  0668  0086               	movwf	6
  3212  0669  0187               	clrf	7
  3213  066A  0801               	movf	1,w
  3214  066B  390F               	andlw	15
  3215  066C  3830               	iorlw	48
  3216  066D  00A1               	movwf	??__date_time_ConvertByteToTime
  3217  066E  0820               	movf	__date_time_ConvertByteToTime@string,w
  3218  066F  3E04               	addlw	4
  3219  0670  0086               	movwf	6
  3220  0671  0187               	clrf	7
  3221  0672  0821               	movf	??__date_time_ConvertByteToTime,w
  3222  0673  0081               	movwf	1
  3223                           
  3224                           ;DateTime.h: 120: string[3] = ( dateTime->minute >> 4 ) | '0' ;
  3225  0674  0A23               	incf	__date_time_ConvertByteToTime@dateTime,w
  3226  0675  0086               	movwf	6
  3227  0676  0187               	clrf	7
  3228  0677  0801               	movf	1,w
  3229  0678  00A1               	movwf	??__date_time_ConvertByteToTime
  3230  0679  3004               	movlw	4
  3231  067A                     u1425:	
  3232  067A  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3233  067B  0B89               	decfsz	9,f
  3234  067C  2E7A               	goto	u1425
  3235  067D  0821               	movf	??__date_time_ConvertByteToTime,w
  3236  067E  3830               	iorlw	48
  3237  067F  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3238  0680  0820               	movf	__date_time_ConvertByteToTime@string,w
  3239  0681  3E03               	addlw	3
  3240  0682  0086               	movwf	6
  3241  0683  0187               	clrf	7
  3242  0684  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3243  0685  0081               	movwf	1
  3244                           
  3245                           ;DateTime.h: 122: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  3246  0686  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3247  0687  3E02               	addlw	2
  3248  0688  0086               	movwf	6
  3249  0689  0187               	clrf	7
  3250  068A  0801               	movf	1,w
  3251  068B  390F               	andlw	15
  3252  068C  3830               	iorlw	48
  3253  068D  00A1               	movwf	??__date_time_ConvertByteToTime
  3254  068E  0A20               	incf	__date_time_ConvertByteToTime@string,w
  3255  068F  0086               	movwf	6
  3256  0690  0187               	clrf	7
  3257  0691  0821               	movf	??__date_time_ConvertByteToTime,w
  3258  0692  0081               	movwf	1
  3259                           
  3260                           ;DateTime.h: 123: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  3261  0693  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3262  0694  3E02               	addlw	2
  3263  0695  0086               	movwf	6
  3264  0696  0187               	clrf	7
  3265  0697  0801               	movf	1,w
  3266  0698  00A1               	movwf	??__date_time_ConvertByteToTime
  3267  0699  3004               	movlw	4
  3268  069A                     u1435:	
  3269  069A  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3270  069B  0B89               	decfsz	9,f
  3271  069C  2E9A               	goto	u1435
  3272  069D  0821               	movf	??__date_time_ConvertByteToTime,w
  3273  069E  3830               	iorlw	48
  3274  069F  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3275  06A0  0820               	movf	__date_time_ConvertByteToTime@string,w
  3276  06A1  0086               	movwf	6
  3277  06A2  0187               	clrf	7
  3278  06A3  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3279  06A4  0081               	movwf	1
  3280  06A5  0008               	return
  3281  06A6                     __end_of__date_time_ConvertByteToTime:	
  3282                           
  3283                           	psect	text5
  3284  0421                     __ptext5:	
  3285 ;; *************** function __date_time_ConvertByteToDiscrete *****************
  3286 ;; Defined at:
  3287 ;;		line 128 in file "src/../../_Common/DateTime.h"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  dateTime        1    wreg     PTR struct .
  3290 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3291 ;;  string          1    0[BANK0 ] PTR unsigned char 
  3292 ;;		 -> main@string_797(4), 
  3293 ;;  select          1    1[BANK0 ] enum E4142
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  dateTime        1    5[BANK0 ] PTR struct .
  3296 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;		None               void
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3306 ;;      Params:         0       2       0       0
  3307 ;;      Locals:         0       1       0       0
  3308 ;;      Temps:          0       3       0       0
  3309 ;;      Totals:         0       6       0       0
  3310 ;;Total ram usage:        6 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    2
  3313 ;; This function calls:
  3314 ;;		Nothing
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           
  3321                           ;psect for function __date_time_ConvertByteToDiscrete
  3322  0421                     __date_time_ConvertByteToDiscrete:	
  3323                           
  3324                           ;incstack = 0
  3325                           ; Regs used in __date_time_ConvertByteToDiscrete: [wreg-fsr1h+status,2+status,0+pclath]
  3326                           ;__date_time_ConvertByteToDiscrete@dateTime stored from wreg
  3327  0421  0020               	movlb	0	; select bank0
  3328  0422  00A5               	movwf	__date_time_ConvertByteToDiscrete@dateTime
  3329                           
  3330                           ;DateTime.h: 130: string[2] = 0 ;
  3331  0423  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3332  0424  3E02               	addlw	2
  3333  0425  0086               	movwf	6
  3334  0426  0187               	clrf	7
  3335  0427  0181               	clrf	1
  3336                           
  3337                           ;DateTime.h: 132: switch ( select ) {
  3338  0428  2D37               	goto	l1737
  3339  0429                     l1715:	
  3340                           ;DateTime.h: 133: case DATE_ITEM_YEAR:
  3341                           
  3342                           
  3343                           ;DateTime.h: 134: string[1] = ( dateTime->year & 0x0F ) | '0' ;
  3344  0429  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3345  042A  3E06               	addlw	6
  3346  042B  0086               	movwf	6
  3347  042C  0187               	clrf	7
  3348  042D  0801               	movf	1,w
  3349  042E  390F               	andlw	15
  3350  042F  3830               	iorlw	48
  3351  0430  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3352  0431  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3353  0432  0086               	movwf	6
  3354  0433  0187               	clrf	7
  3355  0434  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3356  0435  0081               	movwf	1
  3357                           
  3358                           ;DateTime.h: 135: string[0] = ( dateTime->year >> 4 ) | '0' ;
  3359  0436  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3360  0437  3E06               	addlw	6
  3361  0438  0086               	movwf	6
  3362  0439  0187               	clrf	7
  3363  043A  0801               	movf	1,w
  3364  043B  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3365  043C  3004               	movlw	4
  3366  043D                     u1445:	
  3367  043D  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3368  043E  0B89               	decfsz	9,f
  3369  043F  2C3D               	goto	u1445
  3370  0440  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3371  0441  3830               	iorlw	48
  3372  0442  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3373  0443  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3374  0444  0086               	movwf	6
  3375  0445  0187               	clrf	7
  3376  0446  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3377  0447  0081               	movwf	1
  3378                           
  3379                           ;DateTime.h: 136: break ;
  3380  0448  0008               	return
  3381  0449                     l1717:	
  3382                           ;DateTime.h: 137: case DATE_ITEM_MONTH:
  3383                           
  3384                           
  3385                           ;DateTime.h: 138: string[1] = ( dateTime->month & 0x0F ) | '0' ;
  3386  0449  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3387  044A  3E05               	addlw	5
  3388  044B  0086               	movwf	6
  3389  044C  0187               	clrf	7
  3390  044D  0801               	movf	1,w
  3391  044E  390F               	andlw	15
  3392  044F  3830               	iorlw	48
  3393  0450  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3394  0451  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3395  0452  0086               	movwf	6
  3396  0453  0187               	clrf	7
  3397  0454  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3398  0455  0081               	movwf	1
  3399                           
  3400                           ;DateTime.h: 139: string[0] = ( dateTime->month >> 4 ) | '0' ;
  3401  0456  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3402  0457  3E05               	addlw	5
  3403  0458  0086               	movwf	6
  3404  0459  0187               	clrf	7
  3405  045A  0801               	movf	1,w
  3406  045B  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3407  045C  3004               	movlw	4
  3408  045D                     u1455:	
  3409  045D  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3410  045E  0B89               	decfsz	9,f
  3411  045F  2C5D               	goto	u1455
  3412  0460  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3413  0461  3830               	iorlw	48
  3414  0462  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3415  0463  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3416  0464  0086               	movwf	6
  3417  0465  0187               	clrf	7
  3418  0466  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3419  0467  0081               	movwf	1
  3420                           
  3421                           ;DateTime.h: 140: break ;
  3422  0468  0008               	return
  3423  0469                     l1719:	
  3424                           ;DateTime.h: 141: case DATE_ITEM_DATE:
  3425                           
  3426                           
  3427                           ;DateTime.h: 142: string[1] = ( dateTime->day & 0x0F ) | '0' ;
  3428  0469  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3429  046A  3E04               	addlw	4
  3430  046B  0086               	movwf	6
  3431  046C  0187               	clrf	7
  3432  046D  0801               	movf	1,w
  3433  046E  390F               	andlw	15
  3434  046F  3830               	iorlw	48
  3435  0470  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3436  0471  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3437  0472  0086               	movwf	6
  3438  0473  0187               	clrf	7
  3439  0474  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3440  0475  0081               	movwf	1
  3441                           
  3442                           ;DateTime.h: 143: string[0] = ( dateTime->day >> 4 ) | '0' ;
  3443  0476  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3444  0477  3E04               	addlw	4
  3445  0478  0086               	movwf	6
  3446  0479  0187               	clrf	7
  3447  047A  0801               	movf	1,w
  3448  047B  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3449  047C  3004               	movlw	4
  3450  047D                     u1465:	
  3451  047D  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3452  047E  0B89               	decfsz	9,f
  3453  047F  2C7D               	goto	u1465
  3454  0480  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3455  0481  3830               	iorlw	48
  3456  0482  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3457  0483  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3458  0484  0086               	movwf	6
  3459  0485  0187               	clrf	7
  3460  0486  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3461  0487  0081               	movwf	1
  3462                           
  3463                           ;DateTime.h: 144: break ;
  3464  0488  0008               	return
  3465  0489                     l1721:	
  3466                           ;DateTime.h: 145: case DATE_ITEM_DAY_OF_WEEK:
  3467                           
  3468                           
  3469                           ;DateTime.h: 146: string[0] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  3470  0489  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3471  048A  3E03               	addlw	3
  3472  048B  0086               	movwf	6
  3473  048C  0187               	clrf	7
  3474  048D  3501               	lslf	1,w
  3475  048E  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3476  048F  0086               	movwf	6
  3477  0490  0187               	clrf	7
  3478  0491  3F40               	moviw [0]fsr1
  3479  0492  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3480  0493  3F41               	moviw [1]fsr1
  3481  0494  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3482  0495  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3483  0496  0084               	movwf	4
  3484  0497  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3485  0498  0085               	movwf	5
  3486  0499  0800               	movf	0,w	;code access
  3487  049A  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  3488  049B  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3489  049C  0086               	movwf	6
  3490  049D  0187               	clrf	7
  3491  049E  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  3492  049F  0081               	movwf	1
  3493                           
  3494                           ;DateTime.h: 147: string[1] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  3495  04A0  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3496  04A1  3E03               	addlw	3
  3497  04A2  0086               	movwf	6
  3498  04A3  0187               	clrf	7
  3499  04A4  3501               	lslf	1,w
  3500  04A5  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3501  04A6  0086               	movwf	6
  3502  04A7  0187               	clrf	7
  3503  04A8  3F40               	moviw [0]fsr1
  3504  04A9  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3505  04AA  3F41               	moviw [1]fsr1
  3506  04AB  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3507  04AC  3001               	movlw	1
  3508  04AD  0722               	addwf	??__date_time_ConvertByteToDiscrete,w
  3509  04AE  0084               	movwf	4
  3510  04AF  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3511  04B0  1803               	skipnc
  3512  04B1  0A23               	incf	??__date_time_ConvertByteToDiscrete+1,w
  3513  04B2  0085               	movwf	5
  3514  04B3  0800               	movf	0,w	;code access
  3515  04B4  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  3516  04B5  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3517  04B6  0086               	movwf	6
  3518  04B7  0187               	clrf	7
  3519  04B8  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  3520  04B9  0081               	movwf	1
  3521                           
  3522                           ;DateTime.h: 148: string[2] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  3523  04BA  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3524  04BB  3E03               	addlw	3
  3525  04BC  0086               	movwf	6
  3526  04BD  0187               	clrf	7
  3527  04BE  3501               	lslf	1,w
  3528  04BF  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3529  04C0  0086               	movwf	6
  3530  04C1  0187               	clrf	7
  3531  04C2  3F40               	moviw [0]fsr1
  3532  04C3  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3533  04C4  3F41               	moviw [1]fsr1
  3534  04C5  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3535  04C6  3002               	movlw	2
  3536  04C7  0722               	addwf	??__date_time_ConvertByteToDiscrete,w
  3537  04C8  0084               	movwf	4
  3538  04C9  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3539  04CA  1803               	skipnc
  3540  04CB  0A23               	incf	??__date_time_ConvertByteToDiscrete+1,w
  3541  04CC  0085               	movwf	5
  3542  04CD  0800               	movf	0,w	;code access
  3543  04CE  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  3544  04CF  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3545  04D0  3E02               	addlw	2
  3546  04D1  0086               	movwf	6
  3547  04D2  0187               	clrf	7
  3548  04D3  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  3549  04D4  0081               	movwf	1
  3550                           
  3551                           ;DateTime.h: 149: string[3] = 0 ;
  3552  04D5  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3553  04D6  3E03               	addlw	3
  3554  04D7  0086               	movwf	6
  3555  04D8  0187               	clrf	7
  3556  04D9  0181               	clrf	1
  3557                           
  3558                           ;DateTime.h: 150: break ;
  3559  04DA  0008               	return
  3560  04DB                     l1725:	
  3561                           ;DateTime.h: 151: case DATE_ITEM_HOUR:
  3562                           
  3563                           
  3564                           ;DateTime.h: 152: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  3565  04DB  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3566  04DC  3E02               	addlw	2
  3567  04DD  0086               	movwf	6
  3568  04DE  0187               	clrf	7
  3569  04DF  0801               	movf	1,w
  3570  04E0  390F               	andlw	15
  3571  04E1  3830               	iorlw	48
  3572  04E2  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3573  04E3  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3574  04E4  0086               	movwf	6
  3575  04E5  0187               	clrf	7
  3576  04E6  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3577  04E7  0081               	movwf	1
  3578                           
  3579                           ;DateTime.h: 153: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  3580  04E8  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3581  04E9  3E02               	addlw	2
  3582  04EA  0086               	movwf	6
  3583  04EB  0187               	clrf	7
  3584  04EC  0801               	movf	1,w
  3585  04ED  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3586  04EE  3004               	movlw	4
  3587  04EF                     u1475:	
  3588  04EF  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3589  04F0  0B89               	decfsz	9,f
  3590  04F1  2CEF               	goto	u1475
  3591  04F2  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3592  04F3  3830               	iorlw	48
  3593  04F4  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3594  04F5  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3595  04F6  0086               	movwf	6
  3596  04F7  0187               	clrf	7
  3597  04F8  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3598  04F9  0081               	movwf	1
  3599                           
  3600                           ;DateTime.h: 154: break ;
  3601  04FA  0008               	return
  3602  04FB                     l1727:	
  3603                           ;DateTime.h: 155: case DATE_ITEM_MINUTE:
  3604                           
  3605                           
  3606                           ;DateTime.h: 156: string[1] = ( dateTime->minute & 0x0F ) | '0' ;
  3607  04FB  0A25               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  3608  04FC  0086               	movwf	6
  3609  04FD  0187               	clrf	7
  3610  04FE  0801               	movf	1,w
  3611  04FF  390F               	andlw	15
  3612  0500  3830               	iorlw	48
  3613  0501  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3614  0502  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3615  0503  0086               	movwf	6
  3616  0504  0187               	clrf	7
  3617  0505  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3618  0506  0081               	movwf	1
  3619                           
  3620                           ;DateTime.h: 157: string[0] = ( dateTime->minute >> 4 ) | '0' ;
  3621  0507  0A25               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  3622  0508  0086               	movwf	6
  3623  0509  0187               	clrf	7
  3624  050A  0801               	movf	1,w
  3625  050B  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3626  050C  3004               	movlw	4
  3627  050D                     u1485:	
  3628  050D  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3629  050E  0B89               	decfsz	9,f
  3630  050F  2D0D               	goto	u1485
  3631  0510  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3632  0511  3830               	iorlw	48
  3633  0512  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3634  0513  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3635  0514  0086               	movwf	6
  3636  0515  0187               	clrf	7
  3637  0516  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3638  0517  0081               	movwf	1
  3639                           
  3640                           ;DateTime.h: 158: break ;
  3641  0518  0008               	return
  3642  0519                     l1731:	
  3643                           ;DateTime.h: 159: case DATE_ITEM_SECOND:
  3644                           
  3645                           
  3646                           ;DateTime.h: 160: string[1] = ( dateTime->second & 0x0F ) | '0' ;
  3647  0519  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3648  051A  0086               	movwf	6
  3649  051B  0187               	clrf	7
  3650  051C  0801               	movf	1,w
  3651  051D  390F               	andlw	15
  3652  051E  3830               	iorlw	48
  3653  051F  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3654  0520  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3655  0521  0086               	movwf	6
  3656  0522  0187               	clrf	7
  3657  0523  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3658  0524  0081               	movwf	1
  3659                           
  3660                           ;DateTime.h: 161: string[0] = ( dateTime->second >> 4 ) | '0' ;
  3661  0525  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3662  0526  0086               	movwf	6
  3663  0527  0187               	clrf	7
  3664  0528  0801               	movf	1,w
  3665  0529  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3666  052A  3004               	movlw	4
  3667  052B                     u1495:	
  3668  052B  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3669  052C  0B89               	decfsz	9,f
  3670  052D  2D2B               	goto	u1495
  3671  052E  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3672  052F  3830               	iorlw	48
  3673  0530  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3674  0531  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3675  0532  0086               	movwf	6
  3676  0533  0187               	clrf	7
  3677  0534  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3678  0535  0081               	movwf	1
  3679                           
  3680                           ;DateTime.h: 163: }
  3681                           
  3682                           ;DateTime.h: 162: break ;
  3683  0536  0008               	return
  3684  0537                     l1737:	
  3685  0537  0821               	movf	__date_time_ConvertByteToDiscrete@select,w
  3686                           
  3687                           ; Switch size 1, requested type "space"
  3688                           ; Number of cases is 7, Range of values is 0 to 6
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; direct_byte           20     6 (fixed)
  3692                           ; simple_byte           22    12 (average)
  3693                           ; jumptable            260     6 (fixed)
  3694                           ;	Chosen strategy is direct_byte
  3695  0538  0084               	movwf	4
  3696  0539  3007               	movlw	7
  3697  053A  0204               	subwf	4,w
  3698  053B  1803               	skipnc
  3699  053C  0008               	return
  3700  053D  3188               	movlp	high S2263
  3701  053E  3504               	lslf	4,w
  3702  053F  3E10               	addlw	low S2263
  3703  0540  0082               	movwf	2
  3704  0541  0008               	return
  3705  0542                     __end_of__date_time_ConvertByteToDiscrete:	
  3706                           
  3707                           	psect	swtext2
  3708  0810                     __pswtext2:	
  3709  0810                     S2263:	
  3710  0810  3184  2C29         	ljmp	l1715
  3711  0812  3184  2C49         	ljmp	l1717
  3712  0814  3184  2C69         	ljmp	l1719
  3713  0816  3184  2C89         	ljmp	l1721
  3714  0818  3184  2CDB         	ljmp	l1725
  3715  081A  3184  2CFB         	ljmp	l1727
  3716  081C  3185  2D19         	ljmp	l1731
  3717                           
  3718                           	psect	text6
  3719  0542                     __ptext6:	
  3720 ;; *************** function __date_time_ConvertByteToDate *****************
  3721 ;; Defined at:
  3722 ;;		line 80 in file "src/../../_Common/DateTime.h"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  dateTime        1    wreg     PTR struct .
  3725 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3726 ;;  stinrg          1    0[BANK0 ] PTR unsigned char 
  3727 ;;		 -> main@string(17), 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  dateTime        1    4[BANK0 ] PTR struct .
  3730 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3740 ;;      Params:         0       1       0       0
  3741 ;;      Locals:         0       1       0       0
  3742 ;;      Temps:          0       3       0       0
  3743 ;;      Totals:         0       5       0       0
  3744 ;;Total ram usage:        5 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    2
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           
  3755                           ;psect for function __date_time_ConvertByteToDate
  3756  0542                     __date_time_ConvertByteToDate:	
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in __date_time_ConvertByteToDate: [wreg-fsr1h+status,2+status,0+pclath]
  3760                           ;__date_time_ConvertByteToDate@dateTime stored from wreg
  3761  0542  0020               	movlb	0	; select bank0
  3762  0543  00A4               	movwf	__date_time_ConvertByteToDate@dateTime
  3763                           
  3764                           ;DateTime.h: 82: stinrg[16] = 0 ;
  3765  0544  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3766  0545  3E10               	addlw	16
  3767  0546  0086               	movwf	6
  3768  0547  0187               	clrf	7
  3769  0548  0181               	clrf	1
  3770                           
  3771                           ;DateTime.h: 83: stinrg[15] = ']' ;
  3772  0549  305D               	movlw	93
  3773  054A  00A1               	movwf	??__date_time_ConvertByteToDate
  3774  054B  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3775  054C  3E0F               	addlw	15
  3776  054D  0086               	movwf	6
  3777  054E  0187               	clrf	7
  3778  054F  0821               	movf	??__date_time_ConvertByteToDate,w
  3779  0550  0081               	movwf	1
  3780                           
  3781                           ;DateTime.h: 84: stinrg[11] = '[' ;
  3782  0551  305B               	movlw	91
  3783  0552  00A1               	movwf	??__date_time_ConvertByteToDate
  3784  0553  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3785  0554  3E0B               	addlw	11
  3786  0555  0086               	movwf	6
  3787  0556  0187               	clrf	7
  3788  0557  0821               	movf	??__date_time_ConvertByteToDate,w
  3789  0558  0081               	movwf	1
  3790                           
  3791                           ;DateTime.h: 85: stinrg[10] = ' ' ;
  3792  0559  3020               	movlw	32
  3793  055A  00A1               	movwf	??__date_time_ConvertByteToDate
  3794  055B  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3795  055C  3E0A               	addlw	10
  3796  055D  0086               	movwf	6
  3797  055E  0187               	clrf	7
  3798  055F  0821               	movf	??__date_time_ConvertByteToDate,w
  3799  0560  0081               	movwf	1
  3800                           
  3801                           ;DateTime.h: 86: stinrg[7] = '-' ;
  3802  0561  302D               	movlw	45
  3803  0562  00A1               	movwf	??__date_time_ConvertByteToDate
  3804  0563  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3805  0564  3E07               	addlw	7
  3806  0565  0086               	movwf	6
  3807  0566  0187               	clrf	7
  3808  0567  0821               	movf	??__date_time_ConvertByteToDate,w
  3809  0568  0081               	movwf	1
  3810                           
  3811                           ;DateTime.h: 87: stinrg[4] = '-' ;
  3812  0569  302D               	movlw	45
  3813  056A  00A1               	movwf	??__date_time_ConvertByteToDate
  3814  056B  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3815  056C  3E04               	addlw	4
  3816  056D  0086               	movwf	6
  3817  056E  0187               	clrf	7
  3818  056F  0821               	movf	??__date_time_ConvertByteToDate,w
  3819  0570  0081               	movwf	1
  3820                           
  3821                           ;DateTime.h: 90: stinrg[14] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  3822  0571  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3823  0572  3E03               	addlw	3
  3824  0573  0086               	movwf	6
  3825  0574  0187               	clrf	7
  3826  0575  3501               	lslf	1,w
  3827  0576  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3828  0577  0086               	movwf	6
  3829  0578  0187               	clrf	7
  3830  0579  3F40               	moviw [0]fsr1
  3831  057A  00A1               	movwf	??__date_time_ConvertByteToDate
  3832  057B  3F41               	moviw [1]fsr1
  3833  057C  00A2               	movwf	??__date_time_ConvertByteToDate+1
  3834  057D  3002               	movlw	2
  3835  057E  0721               	addwf	??__date_time_ConvertByteToDate,w
  3836  057F  0084               	movwf	4
  3837  0580  0822               	movf	??__date_time_ConvertByteToDate+1,w
  3838  0581  1803               	skipnc
  3839  0582  0A22               	incf	??__date_time_ConvertByteToDate+1,w
  3840  0583  0085               	movwf	5
  3841  0584  0800               	movf	0,w	;code access
  3842  0585  00A3               	movwf	??__date_time_ConvertByteToDate+2
  3843  0586  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3844  0587  3E0E               	addlw	14
  3845  0588  0086               	movwf	6
  3846  0589  0187               	clrf	7
  3847  058A  0823               	movf	??__date_time_ConvertByteToDate+2,w
  3848  058B  0081               	movwf	1
  3849                           
  3850                           ;DateTime.h: 91: stinrg[13] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  3851  058C  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3852  058D  3E03               	addlw	3
  3853  058E  0086               	movwf	6
  3854  058F  0187               	clrf	7
  3855  0590  3501               	lslf	1,w
  3856  0591  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3857  0592  0086               	movwf	6
  3858  0593  0187               	clrf	7
  3859  0594  3F40               	moviw [0]fsr1
  3860  0595  00A1               	movwf	??__date_time_ConvertByteToDate
  3861  0596  3F41               	moviw [1]fsr1
  3862  0597  00A2               	movwf	??__date_time_ConvertByteToDate+1
  3863  0598  3001               	movlw	1
  3864  0599  0721               	addwf	??__date_time_ConvertByteToDate,w
  3865  059A  0084               	movwf	4
  3866  059B  0822               	movf	??__date_time_ConvertByteToDate+1,w
  3867  059C  1803               	skipnc
  3868  059D  0A22               	incf	??__date_time_ConvertByteToDate+1,w
  3869  059E  0085               	movwf	5
  3870  059F  0800               	movf	0,w	;code access
  3871  05A0  00A3               	movwf	??__date_time_ConvertByteToDate+2
  3872  05A1  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3873  05A2  3E0D               	addlw	13
  3874  05A3  0086               	movwf	6
  3875  05A4  0187               	clrf	7
  3876  05A5  0823               	movf	??__date_time_ConvertByteToDate+2,w
  3877  05A6  0081               	movwf	1
  3878                           
  3879                           ;DateTime.h: 92: stinrg[12] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  3880  05A7  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3881  05A8  3E03               	addlw	3
  3882  05A9  0086               	movwf	6
  3883  05AA  0187               	clrf	7
  3884  05AB  3501               	lslf	1,w
  3885  05AC  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3886  05AD  0086               	movwf	6
  3887  05AE  0187               	clrf	7
  3888  05AF  3F40               	moviw [0]fsr1
  3889  05B0  00A1               	movwf	??__date_time_ConvertByteToDate
  3890  05B1  3F41               	moviw [1]fsr1
  3891  05B2  00A2               	movwf	??__date_time_ConvertByteToDate+1
  3892  05B3  0821               	movf	??__date_time_ConvertByteToDate,w
  3893  05B4  0084               	movwf	4
  3894  05B5  0822               	movf	??__date_time_ConvertByteToDate+1,w
  3895  05B6  0085               	movwf	5
  3896  05B7  0800               	movf	0,w	;code access
  3897  05B8  00A3               	movwf	??__date_time_ConvertByteToDate+2
  3898  05B9  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3899  05BA  3E0C               	addlw	12
  3900  05BB  0086               	movwf	6
  3901  05BC  0187               	clrf	7
  3902  05BD  0823               	movf	??__date_time_ConvertByteToDate+2,w
  3903  05BE  0081               	movwf	1
  3904                           
  3905                           ;DateTime.h: 94: stinrg[9] = ( dateTime->day & 0x0F ) | '0' ;
  3906  05BF  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3907  05C0  3E04               	addlw	4
  3908  05C1  0086               	movwf	6
  3909  05C2  0187               	clrf	7
  3910  05C3  0801               	movf	1,w
  3911  05C4  390F               	andlw	15
  3912  05C5  3830               	iorlw	48
  3913  05C6  00A1               	movwf	??__date_time_ConvertByteToDate
  3914  05C7  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3915  05C8  3E09               	addlw	9
  3916  05C9  0086               	movwf	6
  3917  05CA  0187               	clrf	7
  3918  05CB  0821               	movf	??__date_time_ConvertByteToDate,w
  3919  05CC  0081               	movwf	1
  3920                           
  3921                           ;DateTime.h: 95: stinrg[8] = ( dateTime->day >> 4 ) | '0' ;
  3922  05CD  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3923  05CE  3E04               	addlw	4
  3924  05CF  0086               	movwf	6
  3925  05D0  0187               	clrf	7
  3926  05D1  0801               	movf	1,w
  3927  05D2  00A1               	movwf	??__date_time_ConvertByteToDate
  3928  05D3  3004               	movlw	4
  3929  05D4                     u1385:	
  3930  05D4  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  3931  05D5  0B89               	decfsz	9,f
  3932  05D6  2DD4               	goto	u1385
  3933  05D7  0821               	movf	??__date_time_ConvertByteToDate,w
  3934  05D8  3830               	iorlw	48
  3935  05D9  00A2               	movwf	??__date_time_ConvertByteToDate+1
  3936  05DA  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3937  05DB  3E08               	addlw	8
  3938  05DC  0086               	movwf	6
  3939  05DD  0187               	clrf	7
  3940  05DE  0822               	movf	??__date_time_ConvertByteToDate+1,w
  3941  05DF  0081               	movwf	1
  3942                           
  3943                           ;DateTime.h: 97: stinrg[6] = ( dateTime->month & 0x0F ) | '0' ;
  3944  05E0  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3945  05E1  3E05               	addlw	5
  3946  05E2  0086               	movwf	6
  3947  05E3  0187               	clrf	7
  3948  05E4  0801               	movf	1,w
  3949  05E5  390F               	andlw	15
  3950  05E6  3830               	iorlw	48
  3951  05E7  00A1               	movwf	??__date_time_ConvertByteToDate
  3952  05E8  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3953  05E9  3E06               	addlw	6
  3954  05EA  0086               	movwf	6
  3955  05EB  0187               	clrf	7
  3956  05EC  0821               	movf	??__date_time_ConvertByteToDate,w
  3957  05ED  0081               	movwf	1
  3958                           
  3959                           ;DateTime.h: 98: stinrg[5] = ( dateTime->month >> 4 ) | '0' ;
  3960  05EE  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3961  05EF  3E05               	addlw	5
  3962  05F0  0086               	movwf	6
  3963  05F1  0187               	clrf	7
  3964  05F2  0801               	movf	1,w
  3965  05F3  00A1               	movwf	??__date_time_ConvertByteToDate
  3966  05F4  3004               	movlw	4
  3967  05F5                     u1395:	
  3968  05F5  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  3969  05F6  0B89               	decfsz	9,f
  3970  05F7  2DF5               	goto	u1395
  3971  05F8  0821               	movf	??__date_time_ConvertByteToDate,w
  3972  05F9  3830               	iorlw	48
  3973  05FA  00A2               	movwf	??__date_time_ConvertByteToDate+1
  3974  05FB  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3975  05FC  3E05               	addlw	5
  3976  05FD  0086               	movwf	6
  3977  05FE  0187               	clrf	7
  3978  05FF  0822               	movf	??__date_time_ConvertByteToDate+1,w
  3979  0600  0081               	movwf	1
  3980                           
  3981                           ;DateTime.h: 100: stinrg[3] = ( dateTime->year & 0x0F ) | '0' ;
  3982  0601  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3983  0602  3E06               	addlw	6
  3984  0603  0086               	movwf	6
  3985  0604  0187               	clrf	7
  3986  0605  0801               	movf	1,w
  3987  0606  390F               	andlw	15
  3988  0607  3830               	iorlw	48
  3989  0608  00A1               	movwf	??__date_time_ConvertByteToDate
  3990  0609  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  3991  060A  3E03               	addlw	3
  3992  060B  0086               	movwf	6
  3993  060C  0187               	clrf	7
  3994  060D  0821               	movf	??__date_time_ConvertByteToDate,w
  3995  060E  0081               	movwf	1
  3996                           
  3997                           ;DateTime.h: 101: stinrg[2] = ( dateTime->year >> 4 ) | '0' ;
  3998  060F  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  3999  0610  3E06               	addlw	6
  4000  0611  0086               	movwf	6
  4001  0612  0187               	clrf	7
  4002  0613  0801               	movf	1,w
  4003  0614  00A1               	movwf	??__date_time_ConvertByteToDate
  4004  0615  3004               	movlw	4
  4005  0616                     u1405:	
  4006  0616  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4007  0617  0B89               	decfsz	9,f
  4008  0618  2E16               	goto	u1405
  4009  0619  0821               	movf	??__date_time_ConvertByteToDate,w
  4010  061A  3830               	iorlw	48
  4011  061B  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4012  061C  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4013  061D  3E02               	addlw	2
  4014  061E  0086               	movwf	6
  4015  061F  0187               	clrf	7
  4016  0620  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4017  0621  0081               	movwf	1
  4018                           
  4019                           ;DateTime.h: 102: stinrg[1] = '0' ;
  4020  0622  3030               	movlw	48
  4021  0623  00A1               	movwf	??__date_time_ConvertByteToDate
  4022  0624  0A20               	incf	__date_time_ConvertByteToDate@stinrg,w
  4023  0625  0086               	movwf	6
  4024  0626  0187               	clrf	7
  4025  0627  0821               	movf	??__date_time_ConvertByteToDate,w
  4026  0628  0081               	movwf	1
  4027                           
  4028                           ;DateTime.h: 103: stinrg[0] = '2' ;
  4029  0629  3032               	movlw	50
  4030  062A  00A1               	movwf	??__date_time_ConvertByteToDate
  4031  062B  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4032  062C  0086               	movwf	6
  4033  062D  0187               	clrf	7
  4034  062E  0821               	movf	??__date_time_ConvertByteToDate,w
  4035  062F  0081               	movwf	1
  4036  0630  0008               	return
  4037  0631                     __end_of__date_time_ConvertByteToDate:	
  4038                           
  4039                           	psect	text7
  4040  0F2B                     __ptext7:	
  4041 ;; *************** function _ParallelLCD_WriteStringClearing *****************
  4042 ;; Defined at:
  4043 ;;		line 109 in file "src/../../_Common/ParallelLCD.h"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  position        1    wreg     enum E4100
  4046 ;;  stringPtr       2    3[BANK0 ] PTR const unsigned char 
  4047 ;;		 -> STR_20(17), STR_19(7), STR_18(8), STR_17(9), 
  4048 ;;		 -> STR_16(12), STR_15(6), STR_14(7), STR_13(8), 
  4049 ;;		 -> STR_12(9), STR_11(8), STR_10(12), STR_9(10), 
  4050 ;;		 -> STR_8(13), 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  position        1    6[BANK0 ] enum E4100
  4053 ;;  i               1    7[BANK0 ] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;		None               void
  4056 ;; Registers used:
  4057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4063 ;;      Params:         0       2       0       0
  4064 ;;      Locals:         0       2       0       0
  4065 ;;      Temps:          0       1       0       0
  4066 ;;      Totals:         0       5       0       0
  4067 ;;Total ram usage:        5 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    3
  4070 ;; This function calls:
  4071 ;;		_ParallelLCD_WriteByte
  4072 ;; This function is called by:
  4073 ;;		_main
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function _ParallelLCD_WriteStringClearing
  4079  0F2B                     _ParallelLCD_WriteStringClearing:	
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _ParallelLCD_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  4083                           ;ParallelLCD_WriteStringClearing@position stored from wreg
  4084  0F2B  0020               	movlb	0	; select bank0
  4085  0F2C  00A6               	movwf	ParallelLCD_WriteStringClearing@position
  4086                           
  4087                           ;ParallelLCD.h: 110: ParallelLCD_WriteByte( position & 0xF0 , BOOL_FALSE ) ;
  4088  0F2D  01A0               	clrf	ParallelLCD_WriteByte@r
  4089  0F2E  0826               	movf	ParallelLCD_WriteStringClearing@position,w
  4090  0F2F  39F0               	andlw	240
  4091  0F30  318E  26A5  318F   	fcall	_ParallelLCD_WriteByte
  4092                           
  4093                           ;ParallelLCD.h: 111: for ( Uint08_t i = 0 ; i != 16 ; i++ ) {
  4094  0F33  0020               	movlb	0	; select bank0
  4095  0F34  01A7               	clrf	ParallelLCD_WriteStringClearing@i
  4096  0F35                     L6:	
  4097  0F35  3010               	movlw	16
  4098  0F36  0627               	xorwf	ParallelLCD_WriteStringClearing@i,w
  4099  0F37  1903               	btfsc	3,2
  4100  0F38  0008               	return
  4101                           
  4102                           ;ParallelLCD.h: 112: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  4103  0F39  0826               	movf	ParallelLCD_WriteStringClearing@position,w
  4104  0F3A  390F               	andlw	15
  4105  0F3B  0227               	subwf	ParallelLCD_WriteStringClearing@i,w
  4106  0F3C  1C03               	skipc
  4107  0F3D  2F55               	goto	l1641
  4108  0F3E  0823               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4109  0F3F  0084               	movwf	4
  4110  0F40  0824               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4111  0F41  0085               	movwf	5
  4112  0F42  0012               	moviw fsr0++
  4113  0F43  1903               	btfsc	3,2
  4114  0F44  2F55               	goto	l1641
  4115                           
  4116                           ;ParallelLCD.h: 113: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4117  0F45  01A0               	clrf	ParallelLCD_WriteByte@r
  4118  0F46  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4119  0F47  0823               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  4120  0F48  0084               	movwf	4
  4121  0F49  0824               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  4122  0F4A  0085               	movwf	5
  4123  0F4B  0800               	movf	0,w	;code access
  4124  0F4C  318E  26A5  318F   	fcall	_ParallelLCD_WriteByte
  4125  0F4F  3001               	movlw	1
  4126  0F50  0020               	movlb	0	; select bank0
  4127  0F51  07A3               	addwf	ParallelLCD_WriteStringClearing@stringPtr,f
  4128  0F52  3000               	movlw	0
  4129  0F53  3DA4               	addwfc	ParallelLCD_WriteStringClearing@stringPtr+1,f
  4130  0F54  2F5B               	goto	l1643
  4131  0F55                     l1641:	
  4132                           
  4133                           ;ParallelLCD.h: 114: else
  4134                           ;ParallelLCD.h: 115: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4135  0F55  01A0               	clrf	ParallelLCD_WriteByte@r
  4136  0F56  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4137  0F57  3020               	movlw	32
  4138  0F58  318E  26A5  318F   	fcall	_ParallelLCD_WriteByte
  4139  0F5B                     l1643:	
  4140  0F5B  3001               	movlw	1
  4141  0F5C  0020               	movlb	0	; select bank0
  4142  0F5D  00A5               	movwf	??_ParallelLCD_WriteStringClearing
  4143  0F5E  0825               	movf	??_ParallelLCD_WriteStringClearing,w
  4144  0F5F  07A7               	addwf	ParallelLCD_WriteStringClearing@i,f
  4145  0F60  2F35               	goto	L6
  4146  0F61                     __end_of_ParallelLCD_WriteStringClearing:	
  4147                           
  4148                           	psect	text8
  4149  0EC2                     __ptext8:	
  4150 ;; *************** function _ParallelLCD_WriteString *****************
  4151 ;; Defined at:
  4152 ;;		line 100 in file "src/../../_Common/ParallelLCD.h"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  position        1    wreg     enum E4100
  4155 ;;  stringPtr       1    3[BANK0 ] PTR const unsigned char 
  4156 ;;		 -> main@string_797(4), main@valueString(4), main@string(17), 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  position        1    5[BANK0 ] enum E4100
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4168 ;;      Params:         0       1       0       0
  4169 ;;      Locals:         0       1       0       0
  4170 ;;      Temps:          0       1       0       0
  4171 ;;      Totals:         0       3       0       0
  4172 ;;Total ram usage:        3 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    3
  4175 ;; This function calls:
  4176 ;;		_ParallelLCD_WriteByte
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _ParallelLCD_WriteString
  4184  0EC2                     _ParallelLCD_WriteString:	
  4185                           
  4186                           ;incstack = 0
  4187                           ; Regs used in _ParallelLCD_WriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  4188                           ;ParallelLCD_WriteString@position stored from wreg
  4189  0EC2  0020               	movlb	0	; select bank0
  4190  0EC3  00A5               	movwf	ParallelLCD_WriteString@position
  4191                           
  4192                           ;ParallelLCD.h: 101: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4193  0EC4  01A0               	clrf	ParallelLCD_WriteByte@r
  4194  0EC5  0825               	movf	ParallelLCD_WriteString@position,w
  4195  0EC6  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4196  0EC9                     l1623:	
  4197                           ;ParallelLCD.h: 102: while ( *stringPtr ) {
  4198                           
  4199  0EC9  0020               	movlb	0	; select bank0
  4200  0ECA  0823               	movf	ParallelLCD_WriteString@stringPtr,w
  4201  0ECB  0086               	movwf	6
  4202  0ECC  0187               	clrf	7
  4203  0ECD  0801               	movf	1,w
  4204  0ECE  1903               	btfsc	3,2
  4205  0ECF  0008               	return
  4206                           
  4207                           ;ParallelLCD.h: 103: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  4208  0ED0  0020               	movlb	0	; select bank0
  4209  0ED1  01A0               	clrf	ParallelLCD_WriteByte@r
  4210  0ED2  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4211  0ED3  0823               	movf	ParallelLCD_WriteString@stringPtr,w
  4212  0ED4  0086               	movwf	6
  4213  0ED5  0187               	clrf	7
  4214  0ED6  0801               	movf	1,w
  4215  0ED7  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4216  0EDA  3001               	movlw	1
  4217  0EDB  0020               	movlb	0	; select bank0
  4218  0EDC  00A4               	movwf	??_ParallelLCD_WriteString
  4219  0EDD  0824               	movf	??_ParallelLCD_WriteString,w
  4220  0EDE  07A3               	addwf	ParallelLCD_WriteString@stringPtr,f
  4221  0EDF  2EC9               	goto	l1623
  4222  0EE0                     __end_of_ParallelLCD_WriteString:	
  4223                           
  4224                           	psect	text9
  4225  0E4E                     __ptext9:	
  4226 ;; *************** function _ParallelLCD_WriteCharacter *****************
  4227 ;; Defined at:
  4228 ;;		line 93 in file "src/../../_Common/ParallelLCD.h"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  position        1    wreg     enum E4100
  4231 ;;  character       1    3[BANK0 ] unsigned char 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  position        1    4[BANK0 ] enum E4100
  4234 ;; Return value:  Size  Location     Type
  4235 ;;		None               void
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0, pclath, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4243 ;;      Params:         0       1       0       0
  4244 ;;      Locals:         0       1       0       0
  4245 ;;      Temps:          0       0       0       0
  4246 ;;      Totals:         0       2       0       0
  4247 ;;Total ram usage:        2 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		_ParallelLCD_WriteByte
  4252 ;; This function is called by:
  4253 ;;		_main
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           
  4258                           ;psect for function _ParallelLCD_WriteCharacter
  4259  0E4E                     _ParallelLCD_WriteCharacter:	
  4260                           
  4261                           ;incstack = 0
  4262                           ; Regs used in _ParallelLCD_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4263                           ;ParallelLCD_WriteCharacter@position stored from wreg
  4264  0E4E  0020               	movlb	0	; select bank0
  4265  0E4F  00A4               	movwf	ParallelLCD_WriteCharacter@position
  4266                           
  4267                           ;ParallelLCD.h: 94: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4268  0E50  01A0               	clrf	ParallelLCD_WriteByte@r
  4269  0E51  0824               	movf	ParallelLCD_WriteCharacter@position,w
  4270  0E52  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4271                           
  4272                           ;ParallelLCD.h: 95: ParallelLCD_WriteByte( character , BOOL_TRUE ) ;
  4273  0E55  0020               	movlb	0	; select bank0
  4274  0E56  01A0               	clrf	ParallelLCD_WriteByte@r
  4275  0E57  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4276  0E58  0823               	movf	ParallelLCD_WriteCharacter@character,w
  4277  0E59  318E  26A5         	fcall	_ParallelLCD_WriteByte
  4278  0E5B  0008               	return
  4279  0E5C                     __end_of_ParallelLCD_WriteCharacter:	
  4280                           
  4281                           	psect	text10
  4282  0F01                     __ptext10:	
  4283 ;; *************** function _ParallelLCD_SetCgram *****************
  4284 ;; Defined at:
  4285 ;;		line 146 in file "src/../../_Common/ParallelLCD.h"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  charCode        1    wreg     unsigned char 
  4288 ;;  bitmap          2    3[BANK0 ] PTR const unsigned char 
  4289 ;;		 -> CURSOR_BITMAP(8), 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  charCode        1    6[BANK0 ] unsigned char 
  4292 ;;  i               1    7[BANK0 ] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;		None               void
  4295 ;; Registers used:
  4296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4302 ;;      Params:         0       2       0       0
  4303 ;;      Locals:         0       2       0       0
  4304 ;;      Temps:          0       1       0       0
  4305 ;;      Totals:         0       5       0       0
  4306 ;;Total ram usage:        5 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    3
  4309 ;; This function calls:
  4310 ;;		_ParallelLCD_WriteByte
  4311 ;; This function is called by:
  4312 ;;		_main
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           
  4317                           ;psect for function _ParallelLCD_SetCgram
  4318  0F01                     _ParallelLCD_SetCgram:	
  4319                           
  4320                           ;incstack = 0
  4321                           ; Regs used in _ParallelLCD_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4322                           ;ParallelLCD_SetCgram@charCode stored from wreg
  4323  0F01  0020               	movlb	0	; select bank0
  4324  0F02  00A6               	movwf	ParallelLCD_SetCgram@charCode
  4325                           
  4326                           ;ParallelLCD.h: 147: ParallelLCD_WriteByte( ( ( charCode << 3 ) & 0b00111111 ) | 0b01000
      +                          000 , BOOL_FALSE ) ;
  4327  0F03  01A0               	clrf	ParallelLCD_WriteByte@r
  4328  0F04  0826               	movf	ParallelLCD_SetCgram@charCode,w
  4329  0F05  00A5               	movwf	??_ParallelLCD_SetCgram
  4330  0F06  3002               	movlw	2
  4331  0F07                     u1355:	
  4332  0F07  35A5               	lslf	??_ParallelLCD_SetCgram,f
  4333  0F08  3EFF               	addlw	-1
  4334  0F09  1D03               	skipz
  4335  0F0A  2F07               	goto	u1355
  4336  0F0B  3525               	lslf	??_ParallelLCD_SetCgram,w
  4337  0F0C  393F               	andlw	63
  4338  0F0D  3840               	iorlw	64
  4339  0F0E  318E  26A5  318F   	fcall	_ParallelLCD_WriteByte
  4340                           
  4341                           ;ParallelLCD.h: 148: for ( Uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  4342  0F11  0020               	movlb	0	; select bank0
  4343  0F12  01A7               	clrf	ParallelLCD_SetCgram@i
  4344  0F13                     L7:	
  4345  0F13  3008               	movlw	8
  4346  0F14  0627               	xorwf	ParallelLCD_SetCgram@i,w
  4347  0F15  1903               	btfsc	3,2
  4348  0F16  0008               	return
  4349                           
  4350                           ;ParallelLCD.h: 149: ParallelLCD_WriteByte( *bitmap , BOOL_TRUE ) ;
  4351  0F17  01A0               	clrf	ParallelLCD_WriteByte@r
  4352  0F18  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4353  0F19  0823               	movf	ParallelLCD_SetCgram@bitmap,w
  4354  0F1A  0084               	movwf	4
  4355  0F1B  0824               	movf	ParallelLCD_SetCgram@bitmap+1,w
  4356  0F1C  0085               	movwf	5
  4357  0F1D  0800               	movf	0,w	;code access
  4358  0F1E  318E  26A5  318F   	fcall	_ParallelLCD_WriteByte
  4359  0F21  3001               	movlw	1
  4360  0F22  0020               	movlb	0	; select bank0
  4361  0F23  00A5               	movwf	??_ParallelLCD_SetCgram
  4362  0F24  0825               	movf	??_ParallelLCD_SetCgram,w
  4363  0F25  07A7               	addwf	ParallelLCD_SetCgram@i,f
  4364  0F26  3001               	movlw	1
  4365  0F27  07A3               	addwf	ParallelLCD_SetCgram@bitmap,f
  4366  0F28  3000               	movlw	0
  4367  0F29  3DA4               	addwfc	ParallelLCD_SetCgram@bitmap+1,f
  4368  0F2A  2F13               	goto	L7
  4369  0F2B                     __end_of_ParallelLCD_SetCgram:	
  4370                           
  4371                           	psect	text11
  4372  0EE0                     __ptext11:	
  4373 ;; *************** function _ParallelLCD_Initialize *****************
  4374 ;; Defined at:
  4375 ;;		line 79 in file "src/../../_Common/ParallelLCD.h"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  configFuncti    1    wreg     enum E4078
  4378 ;;  configDispla    1    3[BANK0 ] enum E4084
  4379 ;;  configCursor    1    4[BANK0 ] enum E4090
  4380 ;;  configEntryM    1    5[BANK0 ] enum E4095
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  configFuncti    1    6[BANK0 ] enum E4078
  4383 ;; Return value:  Size  Location     Type
  4384 ;;		None               void
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, pclath, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4392 ;;      Params:         0       3       0       0
  4393 ;;      Locals:         0       1       0       0
  4394 ;;      Temps:          0       0       0       0
  4395 ;;      Totals:         0       4       0       0
  4396 ;;Total ram usage:        4 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    3
  4399 ;; This function calls:
  4400 ;;		_ParallelLCD_WriteByte
  4401 ;; This function is called by:
  4402 ;;		_main
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           
  4407                           ;psect for function _ParallelLCD_Initialize
  4408  0EE0                     _ParallelLCD_Initialize:	
  4409                           
  4410                           ;incstack = 0
  4411                           ; Regs used in _ParallelLCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4412                           ;ParallelLCD_Initialize@configFunction stored from wreg
  4413  0EE0  0020               	movlb	0	; select bank0
  4414  0EE1  00A6               	movwf	ParallelLCD_Initialize@configFunction
  4415                           
  4416                           ;ParallelLCD.h: 85: ParallelLCD_WriteByte( ( configFunction & 0x1C ) | 0x20 , BOOL_FALSE
      +                           ) ;
  4417  0EE2  01A0               	clrf	ParallelLCD_WriteByte@r
  4418  0EE3  0826               	movf	ParallelLCD_Initialize@configFunction,w
  4419  0EE4  391C               	andlw	28
  4420  0EE5  3820               	iorlw	32
  4421  0EE6  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4422                           
  4423                           ;ParallelLCD.h: 86: ParallelLCD_WriteByte( ( configDisplay & 0x0C ) | 0x08 , BOOL_FALSE 
      +                          ) ;
  4424  0EE9  0020               	movlb	0	; select bank0
  4425  0EEA  01A0               	clrf	ParallelLCD_WriteByte@r
  4426  0EEB  0823               	movf	ParallelLCD_Initialize@configDisplay,w
  4427  0EEC  390C               	andlw	12
  4428  0EED  3808               	iorlw	8
  4429  0EEE  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4430                           
  4431                           ;ParallelLCD.h: 87: ParallelLCD_WriteByte( ( configCursor & 0x07 ) | 0x10 , BOOL_FALSE )
      +                           ;
  4432  0EF1  0020               	movlb	0	; select bank0
  4433  0EF2  01A0               	clrf	ParallelLCD_WriteByte@r
  4434  0EF3  0824               	movf	ParallelLCD_Initialize@configCursor,w
  4435  0EF4  3907               	andlw	7
  4436  0EF5  3810               	iorlw	16
  4437  0EF6  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4438                           
  4439                           ;ParallelLCD.h: 88: ParallelLCD_WriteByte( ( configEntryMode & 0x03 ) | 0x04 , BOOL_FALS
      +                          E ) ;
  4440  0EF9  0020               	movlb	0	; select bank0
  4441  0EFA  01A0               	clrf	ParallelLCD_WriteByte@r
  4442  0EFB  0825               	movf	ParallelLCD_Initialize@configEntryMode,w
  4443  0EFC  3903               	andlw	3
  4444  0EFD  3804               	iorlw	4
  4445  0EFE  318E  26A5         	fcall	_ParallelLCD_WriteByte
  4446  0F00  0008               	return
  4447  0F01                     __end_of_ParallelLCD_Initialize:	
  4448                           
  4449                           	psect	text12
  4450  0E8B                     __ptext12:	
  4451 ;; *************** function _ParallelLCD_ClearRow *****************
  4452 ;; Defined at:
  4453 ;;		line 130 in file "src/../../_Common/ParallelLCD.h"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  rowSelect       1    wreg     enum E4100
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  rowSelect       1    4[BANK0 ] enum E4100
  4458 ;;  i               1    5[BANK0 ] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4468 ;;      Params:         0       0       0       0
  4469 ;;      Locals:         0       2       0       0
  4470 ;;      Temps:          0       1       0       0
  4471 ;;      Totals:         0       3       0       0
  4472 ;;Total ram usage:        3 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    3
  4475 ;; This function calls:
  4476 ;;		_ParallelLCD_WriteByte
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _ParallelLCD_ClearRow
  4484  0E8B                     _ParallelLCD_ClearRow:	
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _ParallelLCD_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  4488                           ;ParallelLCD_ClearRow@rowSelect stored from wreg
  4489  0E8B  0020               	movlb	0	; select bank0
  4490  0E8C  00A4               	movwf	ParallelLCD_ClearRow@rowSelect
  4491                           
  4492                           ;ParallelLCD.h: 131: ParallelLCD_WriteByte( rowSelect & 0xF0 , BOOL_FALSE ) ;
  4493  0E8D  01A0               	clrf	ParallelLCD_WriteByte@r
  4494  0E8E  0824               	movf	ParallelLCD_ClearRow@rowSelect,w
  4495  0E8F  39F0               	andlw	240
  4496  0E90  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4497                           
  4498                           ;ParallelLCD.h: 132: for ( Uint08_t i = 0 ; i != 16 ; i++ )
  4499  0E93  0020               	movlb	0	; select bank0
  4500  0E94  01A5               	clrf	ParallelLCD_ClearRow@i
  4501  0E95                     L8:	
  4502  0E95  3010               	movlw	16
  4503  0E96  0625               	xorwf	ParallelLCD_ClearRow@i,w
  4504  0E97  1903               	btfsc	3,2
  4505  0E98  0008               	return
  4506                           
  4507                           ;ParallelLCD.h: 133: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4508  0E99  01A0               	clrf	ParallelLCD_WriteByte@r
  4509  0E9A  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4510  0E9B  3020               	movlw	32
  4511  0E9C  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4512  0E9F  3001               	movlw	1
  4513  0EA0  0020               	movlb	0	; select bank0
  4514  0EA1  00A3               	movwf	??_ParallelLCD_ClearRow
  4515  0EA2  0823               	movf	??_ParallelLCD_ClearRow,w
  4516  0EA3  07A5               	addwf	ParallelLCD_ClearRow@i,f
  4517  0EA4  2E95               	goto	L8
  4518  0EA5                     __end_of_ParallelLCD_ClearRow:	
  4519                           
  4520                           	psect	text13
  4521  0E72                     __ptext13:	
  4522 ;; *************** function _ParallelLCD_ClearPartial *****************
  4523 ;; Defined at:
  4524 ;;		line 138 in file "src/../../_Common/ParallelLCD.h"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  position        1    wreg     enum E4100
  4527 ;;  length          1    3[BANK0 ] unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  position        1    5[BANK0 ] enum E4100
  4530 ;;  i               1    6[BANK0 ] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;		None               void
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0, pclath, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4540 ;;      Params:         0       1       0       0
  4541 ;;      Locals:         0       2       0       0
  4542 ;;      Temps:          0       1       0       0
  4543 ;;      Totals:         0       4       0       0
  4544 ;;Total ram usage:        4 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    3
  4547 ;; This function calls:
  4548 ;;		_ParallelLCD_WriteByte
  4549 ;; This function is called by:
  4550 ;;		_main
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           
  4555                           ;psect for function _ParallelLCD_ClearPartial
  4556  0E72                     _ParallelLCD_ClearPartial:	
  4557                           
  4558                           ;incstack = 0
  4559                           ; Regs used in _ParallelLCD_ClearPartial: [wreg+status,2+status,0+pclath+cstack]
  4560                           ;ParallelLCD_ClearPartial@position stored from wreg
  4561  0E72  0020               	movlb	0	; select bank0
  4562  0E73  00A5               	movwf	ParallelLCD_ClearPartial@position
  4563                           
  4564                           ;ParallelLCD.h: 139: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4565  0E74  01A0               	clrf	ParallelLCD_WriteByte@r
  4566  0E75  0825               	movf	ParallelLCD_ClearPartial@position,w
  4567  0E76  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4568                           
  4569                           ;ParallelLCD.h: 140: for ( Uint08_t i = 0 ; i != length ; i++ )
  4570  0E79  0020               	movlb	0	; select bank0
  4571  0E7A  01A6               	clrf	ParallelLCD_ClearPartial@i
  4572  0E7B                     l1669:	
  4573  0E7B  0826               	movf	ParallelLCD_ClearPartial@i,w
  4574  0E7C  0623               	xorwf	ParallelLCD_ClearPartial@length,w
  4575  0E7D  1903               	btfsc	3,2
  4576  0E7E  0008               	return
  4577                           
  4578                           ;ParallelLCD.h: 141: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4579  0E7F  01A0               	clrf	ParallelLCD_WriteByte@r
  4580  0E80  0AA0               	incf	ParallelLCD_WriteByte@r,f
  4581  0E81  3020               	movlw	32
  4582  0E82  318E  26A5  318E   	fcall	_ParallelLCD_WriteByte
  4583  0E85  3001               	movlw	1
  4584  0E86  0020               	movlb	0	; select bank0
  4585  0E87  00A4               	movwf	??_ParallelLCD_ClearPartial
  4586  0E88  0824               	movf	??_ParallelLCD_ClearPartial,w
  4587  0E89  07A6               	addwf	ParallelLCD_ClearPartial@i,f
  4588  0E8A  2E7B               	goto	l1669
  4589  0E8B                     __end_of_ParallelLCD_ClearPartial:	
  4590                           
  4591                           	psect	text14
  4592  0EA5                     __ptext14:	
  4593 ;; *************** function _ParallelLCD_WriteByte *****************
  4594 ;; Defined at:
  4595 ;;		line 167 in file "src/../../_Common/ParallelLCD.h"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  data            1    wreg     unsigned char 
  4598 ;;  r               1    0[BANK0 ] enum E4073
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  data            1    2[BANK0 ] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;		None               void
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4610 ;;      Params:         0       1       0       0
  4611 ;;      Locals:         0       1       0       0
  4612 ;;      Temps:          0       1       0       0
  4613 ;;      Totals:         0       3       0       0
  4614 ;;Total ram usage:        3 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    2
  4617 ;; This function calls:
  4618 ;;		Nothing
  4619 ;; This function is called by:
  4620 ;;		_ParallelLCD_Initialize
  4621 ;;		_ParallelLCD_WriteCharacter
  4622 ;;		_ParallelLCD_WriteString
  4623 ;;		_ParallelLCD_WriteStringClearing
  4624 ;;		_ParallelLCD_ClearRow
  4625 ;;		_ParallelLCD_ClearPartial
  4626 ;;		_ParallelLCD_SetCgram
  4627 ;;		_ParallelLCD_WriteHexNumber
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _ParallelLCD_WriteByte
  4633  0EA5                     _ParallelLCD_WriteByte:	
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _ParallelLCD_WriteByte: [wreg+status,2+status,0]
  4637                           ;ParallelLCD_WriteByte@data stored from wreg
  4638  0EA5  0020               	movlb	0	; select bank0
  4639  0EA6  00A2               	movwf	ParallelLCD_WriteByte@data
  4640                           
  4641                           ;ParallelLCD.h: 168: _delay((unsigned long)((40)*(1000000L/4000000.0))); ;
  4642  0EA7  3003               	movlw	3
  4643  0EA8  00A1               	movwf	??_ParallelLCD_WriteByte
  4644  0EA9                     u2477:	
  4645  0EA9  0BA1               	decfsz	??_ParallelLCD_WriteByte,f
  4646  0EAA  2EA9               	goto	u2477
  4647                           
  4648                           ;ParallelLCD.h: 169: LATC=data; ;
  4649  0EAB  0020               	movlb	0	; select bank0
  4650  0EAC  0822               	movf	ParallelLCD_WriteByte@data,w
  4651  0EAD  0022               	movlb	2	; select bank2
  4652  0EAE  008E               	movwf	14	;volatile
  4653                           
  4654                           ;ParallelLCD.h: 170: LATBbits.LATB7=r&0x01; ;
  4655  0EAF  0020               	movlb	0	; select bank0
  4656  0EB0  0820               	movf	ParallelLCD_WriteByte@r,w
  4657  0EB1  3901               	andlw	1
  4658  0EB2  00A1               	movwf	??_ParallelLCD_WriteByte
  4659  0EB3  0CA1               	rrf	??_ParallelLCD_WriteByte,f
  4660  0EB4  0CA1               	rrf	??_ParallelLCD_WriteByte,f
  4661  0EB5  0022               	movlb	2	; select bank2
  4662  0EB6  080D               	movf	13,w	;volatile
  4663  0EB7  0020               	movlb	0	; select bank0
  4664  0EB8  0621               	xorwf	??_ParallelLCD_WriteByte,w
  4665  0EB9  397F               	andlw	-129
  4666  0EBA  0621               	xorwf	??_ParallelLCD_WriteByte,w
  4667  0EBB  0022               	movlb	2	; select bank2
  4668  0EBC  008D               	movwf	13	;volatile
  4669                           
  4670                           ;ParallelLCD.h: 171: LATBbits.LATB5=1;__nop();LATBbits.LATB5=0; ;
  4671  0EBD  168D               	bsf	13,5	;volatile
  4672  0EBE  0000               	nop
  4673  0EBF  0022               	movlb	2	; select bank2
  4674  0EC0  128D               	bcf	13,5	;volatile
  4675  0EC1  0008               	return
  4676  0EC2                     __end_of_ParallelLCD_WriteByte:	
  4677                           
  4678                           	psect	intentry
  4679  0004                     __pintentry:	
  4680 ;; *************** function __ *****************
  4681 ;; Defined at:
  4682 ;;		line 596 in file "src/main.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  i               1    9[COMMON] unsigned char 
  4687 ;;  isTimeToAler    1    8[COMMON] unsigned char 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;		None               void
  4690 ;; Registers used:
  4691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4697 ;;      Params:         0       0       0       0
  4698 ;;      Locals:         2       0       0       0
  4699 ;;      Temps:          2       0       0       0
  4700 ;;      Totals:         4       0       0       0
  4701 ;;Total ram usage:        4 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    1
  4704 ;; This function calls:
  4705 ;;		i1__ds1307_GetData
  4706 ;; This function is called by:
  4707 ;;		Interrupt level 1
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711  0004                     __:	
  4712                           
  4713                           ;incstack = 0
  4714                           ; Regs used in __: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4715  0004  3180               	pagesel	$
  4716  0005  0020               	movlb	0	; select bank0
  4717  0006  087F               	movf	127,w
  4718  0007  00F7               	movwf	??__+1
  4719                           
  4720                           ;main.c: 598: if( INTCONbits.TMR0IF ) {
  4721  0008  1D0B               	btfss	11,2	;volatile
  4722  0009  2814               	goto	i1l2175
  4723                           
  4724                           ;main.c: 599: INTCONbits.TMR0IF = 0 ;
  4725  000A  110B               	bcf	11,2	;volatile
  4726                           
  4727                           ;main.c: 602: portAState_.byte = (~PORTA&0x33) ;
  4728  000B  090C               	comf	12,w	;volatile
  4729  000C  3933               	andlw	51
  4730  000D  00F6               	movwf	??__
  4731  000E  0876               	movf	??__,w
  4732  000F  00DB               	movwf	_portAState_
  4733                           
  4734                           ;main.c: 604: blinkPrescaler++ ;
  4735  0010  3001               	movlw	1
  4736  0011  00F6               	movwf	??__
  4737  0012  0876               	movf	??__,w
  4738  0013  07D3               	addwf	_blinkPrescaler,f
  4739  0014                     i1l2175:	
  4740                           
  4741                           ;main.c: 605: }
  4742                           ;main.c: 608: if( IOCIF && machineState_ != STATE_ADJUST_CLOCK ) {
  4743  0014  1C0B               	btfss	11,0	;volatile
  4744  0015  286E               	goto	i1l395
  4745  0016  3003               	movlw	3
  4746  0017  0658               	xorwf	_machineState_,w
  4747  0018  1903               	btfsc	3,2
  4748  0019  286E               	goto	i1l395
  4749                           
  4750                           ;main.c: 609: IOCAF3 = 0 ;
  4751  001A  0027               	movlb	7	; select bank7
  4752  001B  1193               	bcf	19,3	;volatile
  4753                           
  4754                           ;main.c: 611: if( machineState_ == STATE_BOOT ) {
  4755  001C  0020               	movlb	0	; select bank0
  4756  001D  0858               	movf	_machineState_,w
  4757  001E  1D03               	btfss	3,2
  4758  001F  2828               	goto	i1l384
  4759                           
  4760                           ;main.c: 612: machineState_ = STATE_CLOCK ;
  4761  0020  01D8               	clrf	_machineState_
  4762  0021  0AD8               	incf	_machineState_,f
  4763                           
  4764                           ;main.c: 613: datePtr = &dateCurrent ;
  4765  0022  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  4766  0023  00F6               	movwf	??__
  4767  0024  0876               	movf	??__,w
  4768  0025  00EB               	movwf	_datePtr
  4769                           
  4770                           ;main.c: 614: outputEvent.changeMessage=1 ;
  4771  0026  145A               	bsf	_outputEvent,0
  4772                           
  4773                           ;main.c: 615: }
  4774  0027  2829               	goto	i1l2189
  4775  0028                     i1l384:	
  4776                           
  4777                           ;main.c: 616: else {
  4778                           ;main.c: 617: outputEvent.changeValue=1 ;
  4779  0028  14DA               	bsf	_outputEvent,1
  4780  0029                     i1l2189:	
  4781                           
  4782                           ;main.c: 618: }
  4783                           ;main.c: 622: if( _ds1307_GetData( &dateCurrent , 0x00 , 7 ) ) {
  4784  0029  01F0               	clrf	i1__ds1307_GetData@ramAddress
  4785  002A  3007               	movlw	7
  4786  002B  00F6               	movwf	??__
  4787  002C  0876               	movf	??__,w
  4788  002D  00F1               	movwf	i1__ds1307_GetData@length
  4789  002E  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  4790  002F  3186  26A6  3180   	fcall	i1__ds1307_GetData
  4791  0032  3A00               	xorlw	0
  4792  0033  1903               	skipnz
  4793  0034  283A               	goto	i1l386
  4794                           
  4795                           ;main.c: 623: machineState_ = STATE_ERROR ;
  4796  0035  3008               	movlw	8
  4797  0036  00F6               	movwf	??__
  4798  0037  0876               	movf	??__,w
  4799  0038  0020               	movlb	0	; select bank0
  4800  0039  286D               	goto	L9
  4801  003A                     i1l386:	
  4802                           ;main.c: 624: }
  4803                           
  4804                           
  4805                           ;main.c: 625: else {
  4806                           ;main.c: 628: Uint08_t isTimeToAlerm = 1 ;
  4807  003A  01F8               	clrf	__@isTimeToAlerm
  4808  003B  0AF8               	incf	__@isTimeToAlerm,f
  4809                           
  4810                           ;main.c: 629: for( Uint08_t i = 0 ; i < 7 ; i++ ) {
  4811  003C  01F9               	clrf	__@i
  4812  003D  3007               	movlw	7
  4813  003E  0279               	subwf	__@i,w
  4814  003F  1803               	btfsc	3,0
  4815  0040  285F               	goto	i1l2213
  4816  0041                     i1l2199:	
  4817                           
  4818                           ;main.c: 630: if( ( !dateTimer.dayOfWeek ) && i == 3 ) continue ;
  4819  0041  0020               	movlb	0	; select bank0
  4820  0042  0867               	movf	_dateTimer+3,w
  4821  0043  1D03               	btfss	3,2
  4822  0044  2849               	goto	i1l2205
  4823  0045  3003               	movlw	3
  4824  0046  0679               	xorwf	__@i,w
  4825  0047  1903               	btfsc	3,2
  4826  0048  2857               	goto	i1l2209
  4827  0049                     i1l2205:	
  4828                           
  4829                           ;main.c: 631: if( dateCurrent.array[i] != dateTimer.array[i] ) {
  4830  0049  0879               	movf	__@i,w
  4831  004A  3E64               	addlw	(low (_dateTimer| 0))& (0+255)
  4832  004B  0086               	movwf	6
  4833  004C  0187               	clrf	7
  4834  004D  0879               	movf	__@i,w
  4835  004E  3E5D               	addlw	(low (_dateCurrent| 0))& (0+255)
  4836  004F  0084               	movwf	4
  4837  0050  0185               	clrf	5
  4838  0051  0800               	movf	0,w
  4839  0052  0601               	xorwf	1,w
  4840  0053  1903               	skipnz
  4841  0054  2857               	goto	i1l2209
  4842                           
  4843                           ;main.c: 632: isTimeToAlerm = 0 ;
  4844  0055  01F8               	clrf	__@isTimeToAlerm
  4845                           
  4846                           ;main.c: 633: break ;
  4847  0056  285F               	goto	i1l2213
  4848  0057                     i1l2209:	
  4849  0057  3001               	movlw	1
  4850  0058  00F6               	movwf	??__
  4851  0059  0876               	movf	??__,w
  4852  005A  07F9               	addwf	__@i,f
  4853  005B  3007               	movlw	7
  4854  005C  0279               	subwf	__@i,w
  4855  005D  1C03               	skipc
  4856  005E  2841               	goto	i1l2199
  4857  005F                     i1l2213:	
  4858                           
  4859                           ;main.c: 634: }
  4860                           ;main.c: 635: }
  4861                           ;main.c: 637: if( isTimeToAlerm ) machineState_ = STATE_ALERM ;
  4862  005F  0878               	movf	__@isTimeToAlerm,w
  4863  0060  1903               	btfsc	3,2
  4864  0061  2867               	goto	i1l2217
  4865  0062  3004               	movlw	4
  4866  0063  00F6               	movwf	??__
  4867  0064  0876               	movf	??__,w
  4868  0065  0020               	movlb	0	; select bank0
  4869  0066  00D8               	movwf	_machineState_
  4870  0067                     i1l2217:	
  4871                           
  4872                           ;main.c: 638: if( dateCurrent.clockHalt ) machineState_ = STATE_ERROR ;
  4873  0067  0020               	movlb	0	; select bank0
  4874  0068  1FDD               	btfss	_dateCurrent,7
  4875  0069  286E               	goto	i1l395
  4876  006A  3008               	movlw	8
  4877  006B  00F6               	movwf	??__
  4878  006C  0876               	movf	??__,w
  4879  006D                     L9:	
  4880  006D  00D8               	movwf	_machineState_
  4881  006E                     i1l395:	
  4882  006E  0877               	movf	??__+1,w
  4883  006F  00FF               	movwf	127
  4884  0070  0009               	retfie
  4885  0071                     __end_of__:	
  4886                           
  4887                           	psect	text16
  4888  06A6                     __ptext16:	
  4889 ;; *************** function i1__ds1307_GetData *****************
  4890 ;; Defined at:
  4891 ;;		line 74 in file "src/../../_Common/DS1307.h"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  date            1    wreg     PTR struct .
  4894 ;;		 -> dateCurrent(7), dateTimer(7), 
  4895 ;;  ramAddress      1    0[COMMON] unsigned char 
  4896 ;;  length          1    1[COMMON] unsigned char 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  date            1    4[COMMON] PTR struct .
  4899 ;;		 -> dateCurrent(7), dateTimer(7), 
  4900 ;;  _ds1307_GetD    1    5[COMMON] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4910 ;;      Params:         2       0       0       0
  4911 ;;      Locals:         2       0       0       0
  4912 ;;      Temps:          2       0       0       0
  4913 ;;      Totals:         6       0       0       0
  4914 ;;Total ram usage:        6 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		__
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function i1__ds1307_GetData
  4925  06A6                     i1__ds1307_GetData:	
  4926                           
  4927                           ;incstack = 0
  4928                           ; Regs used in i1__ds1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  4929                           ;i1__ds1307_GetData@date stored from wreg
  4930  06A6  00F4               	movwf	i1__ds1307_GetData@date
  4931                           
  4932                           ;DS1307.h: 77: SSP1CON2bits.SEN = 1 ;
  4933  06A7  0024               	movlb	4	; select bank4
  4934  06A8  1416               	bsf	22,0	;volatile
  4935  06A9                     i1l167:	
  4936                           ;DS1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  4937                           
  4938  06A9  1816               	btfsc	22,0	;volatile
  4939  06AA  2EA9               	goto	i1l167
  4940                           
  4941                           ;DS1307.h: 79: SSP1IF = 0 ;
  4942  06AB  0020               	movlb	0	; select bank0
  4943  06AC  1191               	bcf	17,3	;volatile
  4944                           
  4945                           ;DS1307.h: 82: SSP1BUF = 0xD0 ;
  4946  06AD  30D0               	movlw	208
  4947  06AE  0024               	movlb	4	; select bank4
  4948  06AF  0091               	movwf	17	;volatile
  4949  06B0                     i1l170:	
  4950                           ;DS1307.h: 83: while ( !SSP1IF ) ;
  4951                           
  4952  06B0  0020               	movlb	0	; select bank0
  4953  06B1  1D91               	btfss	17,3	;volatile
  4954  06B2  2EB0               	goto	i1l170
  4955                           
  4956                           ;DS1307.h: 84: SSP1IF = 0 ;
  4957  06B3  1191               	bcf	17,3	;volatile
  4958                           
  4959                           ;DS1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  4960  06B4  0024               	movlb	4	; select bank4
  4961  06B5  1F16               	btfss	22,6	;volatile
  4962  06B6  2EB9               	goto	i1l1815
  4963  06B7  3001               	movlw	1
  4964  06B8  0008               	return
  4965  06B9                     i1l1815:	
  4966                           
  4967                           ;DS1307.h: 88: SSP1BUF = ramAddress ;
  4968  06B9  0870               	movf	i1__ds1307_GetData@ramAddress,w
  4969  06BA  0091               	movwf	17	;volatile
  4970  06BB                     i1l175:	
  4971                           ;DS1307.h: 89: while ( !SSP1IF ) ;
  4972                           
  4973  06BB  0020               	movlb	0	; select bank0
  4974  06BC  1D91               	btfss	17,3	;volatile
  4975  06BD  2EBB               	goto	i1l175
  4976                           
  4977                           ;DS1307.h: 90: SSP1IF = 0 ;
  4978  06BE  1191               	bcf	17,3	;volatile
  4979                           
  4980                           ;DS1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  4981  06BF  0024               	movlb	4	; select bank4
  4982  06C0  1F16               	btfss	22,6	;volatile
  4983  06C1  2EC4               	goto	i1l178
  4984  06C2  3002               	movlw	2
  4985  06C3  0008               	return
  4986  06C4                     i1l178:	
  4987                           
  4988                           ;DS1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  4989  06C4  1496               	bsf	22,1	;volatile
  4990  06C5                     i1l179:	
  4991                           ;DS1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  4992                           
  4993  06C5  1896               	btfsc	22,1	;volatile
  4994  06C6  2EC5               	goto	i1l179
  4995                           
  4996                           ;DS1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  4997  06C7  30D1               	movlw	209
  4998  06C8  0091               	movwf	17	;volatile
  4999  06C9                     i1l182:	
  5000                           ;DS1307.h: 98: while ( !SSP1IF ) ;
  5001                           
  5002  06C9  0020               	movlb	0	; select bank0
  5003  06CA  1D91               	btfss	17,3	;volatile
  5004  06CB  2EC9               	goto	i1l182
  5005                           
  5006                           ;DS1307.h: 99: SSP1IF = 0 ;
  5007  06CC  1191               	bcf	17,3	;volatile
  5008                           
  5009                           ;DS1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  5010  06CD  0024               	movlb	4	; select bank4
  5011  06CE  1F16               	btfss	22,6	;volatile
  5012  06CF  2ED2               	goto	i1l1827
  5013  06D0  3003               	movlw	3
  5014  06D1  0008               	return
  5015  06D2                     i1l1827:	
  5016                           
  5017                           ;DS1307.h: 103: Uint08_t dataCount = 0 ;
  5018  06D2  01F5               	clrf	i1__ds1307_GetData@dataCount
  5019  06D3                     i1l1841:	
  5020                           ;DS1307.h: 104: while ( dataCount < length ) {
  5021                           
  5022  06D3  0871               	movf	i1__ds1307_GetData@length,w
  5023  06D4  0275               	subwf	i1__ds1307_GetData@dataCount,w
  5024  06D5  1803               	btfsc	3,0
  5025  06D6  2EFB               	goto	i1l194
  5026                           
  5027                           ;DS1307.h: 105: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  5028  06D7  30A6               	movlw	166
  5029  06D8  00F2               	movwf	??i1__ds1307_GetData
  5030  06D9                     u248_27:	
  5031  06D9  0BF2               	decfsz	??i1__ds1307_GetData,f
  5032  06DA  2ED9               	goto	u248_27
  5033  06DB  0000               	nop
  5034                           
  5035                           ;DS1307.h: 106: SSP1CON2bits.RCEN = 1 ;
  5036  06DC  0024               	movlb	4	; select bank4
  5037  06DD  1596               	bsf	22,3	;volatile
  5038  06DE                     i1l188:	
  5039                           ;DS1307.h: 107: while ( SSP1CON2bits.RCEN ) ;
  5040                           
  5041  06DE  1996               	btfsc	22,3	;volatile
  5042  06DF  2EDE               	goto	i1l188
  5043  06E0                     i1l191:	
  5044                           ;DS1307.h: 108: while ( !SSPSTATbits.BF ) ;
  5045                           
  5046  06E0  1C14               	btfss	20,0	;volatile
  5047  06E1  2EE0               	goto	i1l191
  5048                           
  5049                           ;DS1307.h: 109: date->array[ dataCount++ ] = SSP1BUF ;
  5050  06E2  0811               	movf	17,w	;volatile
  5051  06E3  00F2               	movwf	??i1__ds1307_GetData
  5052  06E4  0875               	movf	i1__ds1307_GetData@dataCount,w
  5053  06E5  0774               	addwf	i1__ds1307_GetData@date,w
  5054  06E6  00F3               	movwf	??i1__ds1307_GetData+1
  5055  06E7  0873               	movf	??i1__ds1307_GetData+1,w
  5056  06E8  0086               	movwf	6
  5057  06E9  0187               	clrf	7
  5058  06EA  0872               	movf	??i1__ds1307_GetData,w
  5059  06EB  0081               	movwf	1
  5060  06EC  3001               	movlw	1
  5061  06ED  00F2               	movwf	??i1__ds1307_GetData
  5062  06EE  0872               	movf	??i1__ds1307_GetData,w
  5063  06EF  07F5               	addwf	i1__ds1307_GetData@dataCount,f
  5064                           
  5065                           ;DS1307.h: 110: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  5066  06F0  0875               	movf	i1__ds1307_GetData@dataCount,w
  5067  06F1  0671               	xorwf	i1__ds1307_GetData@length,w
  5068  06F2  1D03               	btfss	3,2
  5069  06F3  2EF7               	goto	u184_20
  5070  06F4  0024               	movlb	4	; select bank4
  5071  06F5  1696               	bsf	22,5	;volatile
  5072  06F6  2EF9               	goto	i1l1839
  5073  06F7                     u184_20:	
  5074  06F7  0024               	movlb	4	; select bank4
  5075  06F8  1296               	bcf	22,5	;volatile
  5076  06F9                     i1l1839:	
  5077                           
  5078                           ;DS1307.h: 111: SSP1CON2bits.ACKEN = 1 ;
  5079  06F9  1616               	bsf	22,4	;volatile
  5080  06FA  2ED3               	goto	i1l1841
  5081  06FB                     i1l194:	
  5082                           
  5083                           ;DS1307.h: 112: }
  5084                           ;DS1307.h: 115: SSP1CON2bits.PEN = 1 ;
  5085  06FB  1516               	bsf	22,2	;volatile
  5086  06FC                     i1l195:	
  5087                           ;DS1307.h: 116: while ( SSP1CON2bits.PEN ) ;
  5088                           
  5089  06FC  1916               	btfsc	22,2	;volatile
  5090  06FD  2EFC               	goto	i1l195
  5091                           
  5092                           ;DS1307.h: 118: return 0 ;
  5093  06FE  3000               	movlw	0
  5094  06FF  0008               	return
  5095  0700                     __end_ofi1__ds1307_GetData:	
  5096  007E                     btemp	set	126	;btemp
  5097  007E                     wtemp	set	126
  5098  007E                     wtemp0	set	126
  5099  0080                     wtemp1	set	128
  5100  0082                     wtemp2	set	130
  5101  0084                     wtemp3	set	132
  5102  0086                     wtemp4	set	134
  5103  0088                     wtemp5	set	136
  5104  007F                     wtemp6	set	127
  5105  007E                     ttemp	set	126
  5106  007E                     ttemp0	set	126
  5107  0081                     ttemp1	set	129
  5108  0084                     ttemp2	set	132
  5109  0087                     ttemp3	set	135
  5110  007F                     ttemp4	set	127
  5111  007E                     ltemp	set	126
  5112  007E                     ltemp0	set	126
  5113  0082                     ltemp1	set	130
  5114  0086                     ltemp2	set	134
  5115  0080                     ltemp3	set	128


Data Sizes:
    Strings     134
    Constant    57
    Data        26
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     43      80
    BANK1            80      0      22
    BANK2            80      0       0

Pointer List with Targets:

    datePtr	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    currentEditValue	PTR unsigned char  size(1) Largest target is 2
		 -> dateCurrent.second(BANK0[1]), dateCurrent.year(BANK0[1]), dateTimer.year(BANK0[1]), dateTimer.second(BANK0[1]), 
		 -> NULL(NULL[0]), datePtr.year(COMMON[1]), datePtr.second(COMMON[1]), datePtr(BANK0[1]), 

    currentValueInfo	PTR const struct . size(2) Largest target is 4096
		 -> ROM(CODE[4096]), VALUE_INFORMATIONS.second(CODE[4]), VALUE_INFORMATIONS.year(CODE[4]), VALUE_INFORMATIONS(CODE[28]), 

    MESSAGE_MENU	PTR const unsigned char [4] size(2) Largest target is 13
		 -> STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), STR_8(CODE[13]), 

    _ds1307_SetClock@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), 

    _ds1307_GetData@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@string	PTR unsigned char  size(1) Largest target is 4
		 -> main@string_797(BANK0[4]), 

    _date_time_ConvertByteToTime@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToTime@string	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    _date_time_ConvertByteToDate@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDate@stinrg	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    STR_DAY_OF_WEEK	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ParallelLCD_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 8
		 -> CURSOR_BITMAP(CODE[8]), 

    ParallelLCD_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_20(CODE[17]), STR_19(CODE[7]), STR_18(CODE[8]), STR_17(CODE[9]), 
		 -> STR_16(CODE[12]), STR_15(CODE[6]), STR_14(CODE[7]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), 
		 -> STR_8(CODE[13]), 

    ParallelLCD_WriteString@stringPtr	PTR const unsigned char  size(1) Largest target is 17
		 -> main@string_797(BANK0[4]), main@valueString(BANK0[4]), main@string(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under __ in COMMON

    __->i1__ds1307_GetData

Critical Paths under _main in BANK0

    _main->_ParallelLCD_SetCgram
    _main->_ParallelLCD_WriteStringClearing
    _ParallelLCD_WriteStringClearing->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->_ParallelLCD_WriteByte
    _ParallelLCD_WriteCharacter->_ParallelLCD_WriteByte
    _ParallelLCD_SetCgram->_ParallelLCD_WriteByte
    _ParallelLCD_Initialize->_ParallelLCD_WriteByte
    _ParallelLCD_ClearRow->_ParallelLCD_WriteByte
    _ParallelLCD_ClearPartial->_ParallelLCD_WriteByte

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   16536
                                              8 BANK0     35    35      0
           _ParallelLCD_ClearPartial
               _ParallelLCD_ClearRow
             _ParallelLCD_Initialize
               _ParallelLCD_SetCgram
         _ParallelLCD_WriteCharacter
            _ParallelLCD_WriteString
    _ParallelLCD_WriteStringClearing
       __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
       __date_time_ConvertByteToTime
                    __ds1307_GetData
                   __ds1307_SetClock
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __ds1307_SetClock                                     3     3      0     140
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) __ds1307_GetData                                      6     4      2     508
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToTime                         4     3      1     456
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDiscrete                     6     4      2     928
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDate                         5     4      1     698
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteStringClearing                      5     3      2    2557
                                              3 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteString                              3     2      1    1935
                                              3 BANK0      3     2      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteCharacter                           2     1      1    1684
                                              3 BANK0      2     1      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_SetCgram                                 5     3      2    1731
                                              3 BANK0      5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_Initialize                               4     1      3    1880
                                              3 BANK0      4     1      3
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearRow                                 3     3      0    1632
                                              3 BANK0      3     3      0
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearPartial                             4     3      1    1708
                                              3 BANK0      4     3      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (2) _ParallelLCD_WriteByte                                3     2      1    1564
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    4     4      0     344
                                              6 COMMON     4     4      0
                  i1__ds1307_GetData
 ---------------------------------------------------------------------------------
 (4) i1__ds1307_GetData                                    6     4      2     208
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ParallelLCD_ClearPartial
     _ParallelLCD_WriteByte
   _ParallelLCD_ClearRow
     _ParallelLCD_WriteByte
   _ParallelLCD_Initialize
     _ParallelLCD_WriteByte
   _ParallelLCD_SetCgram
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteCharacter
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteString
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteStringClearing
     _ParallelLCD_WriteByte
   __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
   __date_time_ConvertByteToTime
   __ds1307_GetData
   __ds1307_SetClock
   _initialize

 __ (ROOT)
   i1__ds1307_GetData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      71       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      16       8       27.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      71      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 13 11:37:20 2015

                                        __ 0004                                          pc 0002  
               ??_ParallelLCD_ClearPartial 0024                                __CFG_CP$OFF 0000  
                                       ?__ 0070                                _SSPSTATbits 0214  
            ParallelLCD_ClearRow@rowSelect 0024                                        ??__ 0076  
                                      l200 0F65                                        l203 0F6C  
                                      l213 0F9A                                        l301 01B9  
                                      l214 0F8A                                        l302 01DC  
                                      l311 01EB                                        l208 0F74  
                                      l320 020D                                        l304 01D3  
                                      l313 01F3                                        l170 0FAA  
                                      l218 0F9C                                        l331 0283  
                                      l316 0204                                        l308 01E1  
                                      l182 0FC5                                        l318 02A6  
                                      l262 0104                                        l191 0FDE  
                                      l175 0FB7                                        l167 0FA3  
                                      l271 0126                                        l263 0103  
                                      l344 02D8                                        l336 034A  
                                      l265 010B                                        l194 0FFA  
                                      l178 0FC0                                        l266 010A  
                                      l195 0FFC                                        l179 0FC1  
                                      l275 011B                                        l259 00E8  
                                      l188 0FDC                                        l276 0160  
                                      l286 01CE                                        l278 012A  
                                      l297 01B7                                        _PR2 001B  
                                      __@i 0079                               __CFG_BORV$HI 0000  
                                      wreg 0009      __date_time_ConvertByteToDate@dateTime 0024  
                                     S2261 0800                                       S2263 0810  
                          __@isTimeToAlerm 0078                               __CFG_LVP$OFF 0000  
                                     l2021 0241                                       l2023 0248  
                                     l2121 0391                                       l2033 0271  
                                     l2017 0235                                       l2025 0249  
                                     l2009 020B                                       l2131 03AD  
                                     l2141 03BC                                       l2109 0375  
                                     l2037 027D                                       l2061 0298  
                                     l2151 03DF                                       l2071 02BB  
                                     l2047 028D                                       l2129 039C  
                                     l2145 03C4                                       l2073 02C2  
                                     l2065 02AA                                       l2057 0296  
                                     l2049 028E                                       l2155 03E8  
                                     l2083 0307                                       l2067 02AF  
                                     l2149 03CD                                       l2085 0319  
                                     l2069 02B4                                       l2077 02C9  
                                     l1623 0EC9                                       l2159 0404  
                                     l2087 031C                                       l2079 02D9  
                                     l2095 033C                                       l1641 0F55  
                                     l1721 0489                                       l2089 032E  
                                     l1643 0F5B                                       l1731 0519  
                                     l1715 0429                                       l2099 034F  
                                     l1725 04DB                                       l1717 0449  
                                     l1901 0116                                       l1727 04FB  
                                     l1719 0469                                       l1751 0FB3  
                                     l1911 012D                                       l1737 0537  
                                     l1921 0147                                       l1763 0FCE  
                                     l1923 0149                                       l1915 013D  
                                     l1907 011E                                       l1669 0E7B  
                                     l1941 016F                                       l1933 0164  
                                     l1925 014D                                       l1775 0FF8  
                                     l1777 0FD0                                       l1961 0190  
                                     l1929 014F                                       l1971 01A9  
                                     l1955 0188                                       l1981 01D6  
                                     l1965 01A2                                       l1957 018A  
                                     l1949 017E                                       l1799 0F81  
                                     l1967 01A4                                       l1975 01BC  
                                     l1987 01E5                                       l1997 01F8  
                                     l1999 01F9                                       STR_1 07B3  
                             __CFG_WDTE$ON 0000                                       STR_2 07AF  
                                     STR_3 07A7                                       STR_4 07A3  
                                     STR_5 07BB                                       STR_6 07AB  
                                     STR_7 07B7                                       STR_8 074A  
                                     STR_9 0763                                       u1405 0616  
                                     u1415 065B                                       _LATC 010E  
                                     u1600 0FF6                                       u1425 067A  
                                     u1355 0F07                                       u1435 069A  
                                     u2235 0380                                       u1445 043D  
                                     u1455 045D                                       u1385 05D4  
                                     u1465 047D                                       u1395 05F5  
                                     u1475 04EF                   ??_ParallelLCD_Initialize 0026  
                                     u1485 050D                                       u1495 052B  
                                     u2457 00B5                                       u1905 00A8  
                                     u2467 0FD7                                       u2477 0EA9  
                                     u1895 009D                                _outputEvent 005A  
                                     _TMR0 0015                                       _TMR2 001A  
                             __CFG_WRT$OFF 0000                              __CFG_FCMEN$ON 0000  
                                     _main 0096                              _CURSOR_BITMAP 0731  
                                     fsr0h 0005                                       fsr1h 0007  
                                     fsr0l 0004                                       indf0 0000  
                                     indf1 0001                                       fsr1l 0006  
                                     btemp 007E                              __CFG_BOREN$ON 0000  
                                     ltemp 007E                                       start 0071  
                                     ttemp 007E                                       wtemp 007E  
                            __CFG_IESO$OFF 0000                            __ds1307_GetData 0F9F  
      __size_of_ParallelLCD_WriteCharacter 000E                              __CFG_LPBOR$ON 0000  
          ParallelLCD_WriteString@position 0025                    ??_ParallelLCD_WriteByte 0021  
                                    ?_main 0070                                      STR_10 0757  
                                    STR_11 0787                                      STR_12 076D  
                                    STR_20 0739                                      STR_13 077F  
                                    STR_14 0796                                      STR_15 079D  
                                    STR_16 0757                                      STR_17 0776  
                                    STR_18 0787                                      STR_19 078F  
                                    _IOCIE 005B                                      _IOCIF 0058  
                                    i1l170 06B0                                      i1l182 06C9  
                                    i1l191 06E0                                      i1l175 06BB  
                                    i1l167 06A9                                      i1l194 06FB  
                                    i1l178 06C4                                      i1l195 06FC  
                                    i1l179 06C5                                      i1l188 06DE  
                                    i1l384 0028                                      i1l386 003A  
                                    i1l395 006E                         main@prevPortAState 005C  
                   ParallelLCD_WriteByte@r 0020                                      _PORTA 000C  
                                    _TRISA 008C                                      _TRISB 008D  
                                    _TRISC 008E                              __CFG_PWRTE$ON 0000  
          __end_of_PARALLEL_LCD_ROW_SELECT 0715                                      _alerm 007A  
                                    main@i 004A                               main@tmpValue 0041  
                                    ltemp0 007E                                      ltemp1 0082  
                                    ltemp2 0086                                      ltemp3 0080  
                                    ttemp0 007E                                      ttemp1 0081  
                                    ttemp2 0084                                      ttemp3 0087  
                                    ttemp4 007F                                      status 0003  
                                    wtemp0 007E                                      wtemp1 0080  
                                    wtemp2 0082                                      wtemp3 0084  
                                    wtemp4 0086                                      wtemp5 0088  
                                    wtemp6 007F               __end_of_ParallelLCD_ClearRow 0EA5  
                           __CFG_MCLRE$OFF 0000                            __initialization 0073  
         ParallelLCD_WriteStringClearing@i 0027                               __end_of_main 0421  
                         __ds1307_SetClock 0F61                                     ??_main 0028  
             __end_of_ParallelLCD_SetCgram 0F2B                          __end_of_HEX_TABLE 0710  
               __end_of_VALUE_INFORMATIONS 0731                              main@isNonZero 0042  
                            main@keyChange 0043                                     _ANSELA 018C  
                                   _ANSELB 018D                                     _ANSELC 018E  
                                   _IOCAF3 1C9B                    __end_of__ds1307_GetData 1000  
                                   i1l2205 0049                                     i1l2213 005F  
                                   i1l2217 0067                                     i1l2209 0057  
                                   i1l2175 0014                                     i1l2189 0029  
                                   i1l1815 06B9                                     i1l2199 0041  
                                   i1l1841 06D3                                     i1l1827 06D2  
                                   i1l1839 06F9            __size_of_ParallelLCD_Initialize 0021  
                                   u184_20 06F7                                     u248_27 06D9  
                                   _PWM3OE 30CE                                     _SSP1IF 008B  
         ParallelLCD_WriteString@stringPtr 0023         ParallelLCD_WriteCharacter@position 0024  
               ParallelLCD_SetCgram@bitmap 0023                             __CFG_STVREN$ON 0000  
                  __end_of__initialization 0093                  __ds1307_GetData@dataCount 0025  
    __date_time_ConvertByteToTime@dateTime 0023                             __pcstackCOMMON 0070  
                             __pidataBANK0 0E3E                               __pidataBANK1 0E5C  
                   _ParallelLCD_Initialize 0EE0        ParallelLCD_WriteCharacter@character 0023  
                           _OPTION_REGbits 0095                       _ParallelLCD_ClearRow 0E8B  
                               __pbssBANK0 004B                           ?__ds1307_GetData 0020  
                ParallelLCD_WriteByte@data 0022                       _ParallelLCD_SetCgram 0F01  
                               _editSelect 0056                   ?_ParallelLCD_WriteString 0023  
                    ParallelLCD_ClearRow@i 0025                                 __pmaintext 0096  
                               __pintentry 0004       ParallelLCD_Initialize@configFunction 0026  
              i1__ds1307_GetData@dataCount 0075                                 __size_of__ 006D  
           __size_of_ParallelLCD_WriteByte 001D              __end_of_ParallelLCD_WriteByte 0EC2  
                    ?_ParallelLCD_ClearRow 0070                             main@keyPressed 0049  
                                  _PWM3DCH 0618                                    _PWM3DCL 0617  
                                  _SSP1ADD 0212                                    _SSP1BUF 0211  
        __size_of_ParallelLCD_ClearPartial 0019                  ?_ParallelLCD_ClearPartial 0023  
                         _currentEditValue 0054               i1__ds1307_GetData@ramAddress 0070  
                 __end_of__ds1307_SetClock 0F9F   __end_of__date_time_ConvertByteToDiscrete 0542  
__size_of__date_time_ConvertByteToDiscrete 0121         ??__date_time_ConvertByteToDiscrete 0022  
        ?__date_time_ConvertByteToDiscrete 0020           __date_time_ConvertByteToDiscrete 0421  
                    ?_ParallelLCD_SetCgram 0023                                 _keyEvents_ 0057  
                        main@COMPARE_UNITS 0710                                 _menuSelect 0059  
                                  _datePtr 006B                                 _initialize 07BF  
                                  __ptext1 07BF                                    __ptext2 0F61  
                                  __ptext3 0F9F                                    __ptext4 0631  
                                  __ptext5 0421                                    __ptext6 0542  
                                  __ptext7 0F2B                                    __ptext8 0EC2  
                                  __ptext9 0E4E                                  _T2CONbits 001C  
             ??_ParallelLCD_WriteCharacter 0024                                  _IOCANbits 0392  
                           _blinkPrescaler 0053                      ParallelLCD_SetCgram@i 0027  
                                _HEX_TABLE 0700                                    clrloop0 0E49  
                     end_of_initialization 0093            __end_of_ParallelLCD_WriteString 0EE0  
                         _currentValueInfo 0051                                    init_ram 0E42  
                       _VALUE_INFORMATIONS 0715                                    initloop 0E43  
                __end_ofmain@COMPARE_UNITS 0713                    _PARALLEL_LCD_ROW_SELECT 0713  
            ?__date_time_ConvertByteToDate 0020              ?__date_time_ConvertByteToTime 0020  
                             __pstringtext 0700                     ??_ParallelLCD_ClearRow 0023  
                         __CFG_FOSC$INTOSC 0000                             main@string_797 0045  
                   ??_ParallelLCD_SetCgram 0025               ParallelLCD_SetCgram@charCode 0026  
                          _STR_DAY_OF_WEEK 00A0                                 main@string 002B  
  __end_of_ParallelLCD_WriteStringClearing 0F61   __size_of_ParallelLCD_WriteStringClearing 0036  
        ??_ParallelLCD_WriteStringClearing 0025           ?_ParallelLCD_WriteStringClearing 0023  
          _ParallelLCD_WriteStringClearing 0F2B                    ?_ParallelLCD_Initialize 0023  
  __date_time_ConvertByteToDiscrete@select 0021    __date_time_ConvertByteToDiscrete@string 0020  
                              ?_initialize 0070                               _MESSAGE_MENU 00AE  
                      start_initialization 0073        __date_time_ConvertByteToDate@stinrg 0020  
                    __end_of_CURSOR_BITMAP 0739             __end_of_ParallelLCD_Initialize 0F01  
               __ds1307_GetData@ramAddress 0020                         __ds1307_SetClock@i 0022  
                              __pdataBANK0 006C                                __pdataBANK1 00A0  
         __end_of_ParallelLCD_ClearPartial 0E8B             ??__date_time_ConvertByteToDate 0021  
           ??__date_time_ConvertByteToTime 0021           __size_of_ParallelLCD_WriteString 001E  
       __end_of_ParallelLCD_WriteCharacter 0E5C                 _ParallelLCD_WriteCharacter 0E4E  
                              _dateCurrent 005D                                __pbssCOMMON 007A  
                                ___latbits 0001                              __pcstackBANK0 0020  
                                __end_of__ 0071                          i1__ds1307_GetData 06A6  
                      __size_of_initialize 0041                          ?__ds1307_SetClock 0070  
                                _dateTimer 0064                         ?i1__ds1307_GetData 0070  
                       ??__ds1307_SetClock 0020                   __size_of__ds1307_GetData 0061  
      ParallelLCD_Initialize@configDisplay 0023                            main@compareUnit 0044  
                      ??i1__ds1307_GetData 0072                   i1__ds1307_GetData@length 0071  
                                __pswtext1 0800                                  __pswtext2 0810  
    ParallelLCD_Initialize@configEntryMode 0025                             _cursorPosition 0055  
                    _ParallelLCD_WriteByte 0EA5                  __end_ofi1__ds1307_GetData 0700  
                          main@keyReleased 0040                                   _LATBbits 010D  
                                clear_ram0 0E48                                   _PIE1bits 0091  
                                 _PIR1bits 0011                                  main@F4297 006C  
                                 _SSP1CON1 0215                                   _SSP1STAT 0214  
                 _ParallelLCD_ClearPartial 0E72   ParallelLCD_WriteStringClearing@stringPtr 0023  
                             ??_initialize 0020                          ??__ds1307_GetData 0022  
                  _ParallelLCD_WriteString 0EC2                     ?_ParallelLCD_WriteByte 0020  
            __size_of_ParallelLCD_ClearRow 001A                      __ds1307_SetClock@date 0021  
       ParallelLCD_Initialize@configCursor 0024                                   __ptext10 0F01  
                                 __ptext11 0EE0                                   __ptext12 0E8B  
                                 __ptext13 0E72                                   __ptext14 0EA5  
                                 __ptext16 06A6                               _SSP1CON2bits 0216  
               __size_ofi1__ds1307_GetData 005A                                   _keyCount 004B  
                            __size_of_main 038B              __size_of_ParallelLCD_SetCgram 002A  
                       __end_of_initialize 0800    ParallelLCD_WriteStringClearing@position 0026  
                          main@valueString 003C                  ParallelLCD_ClearPartial@i 0026  
      __date_time_ConvertByteToTime@string 0020                ?_ParallelLCD_WriteCharacter 0023  
                               _INTCONbits 000B                                _PWM3CONbits 0619  
__date_time_ConvertByteToDiscrete@dateTime 0025                                   intlevel1 0000  
                   i1__ds1307_GetData@date 0074                          __CFG_CLKOUTEN$OFF 0000  
                               _OSCCONbits 0099             ParallelLCD_ClearPartial@length 0023  
                ??_ParallelLCD_WriteString 0024           ParallelLCD_ClearPartial@position 0025  
                              _portAState_ 005B                  __size_of__ds1307_SetClock 003E  
                   __ds1307_GetData@length 0021                              _machineState_ 0058  
     __end_of__date_time_ConvertByteToDate 0631      __size_of__date_time_ConvertByteToDate 00EF  
             __date_time_ConvertByteToDate 0542       __end_of__date_time_ConvertByteToTime 06A6  
    __size_of__date_time_ConvertByteToTime 0075               __date_time_ConvertByteToTime 0631  
                     __ds1307_GetData@date 0024  
