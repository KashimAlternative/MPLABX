

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 12 23:41:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext2,local,class=CONST,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     	;# 
    37  0001                     	;# 
    38  0002                     	;# 
    39  0003                     	;# 
    40  0004                     	;# 
    41  0005                     	;# 
    42  0006                     	;# 
    43  0007                     	;# 
    44  0008                     	;# 
    45  0009                     	;# 
    46  000A                     	;# 
    47  000B                     	;# 
    48  000C                     	;# 
    49  000D                     	;# 
    50  000E                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  008C                     	;# 
    64  008D                     	;# 
    65  008E                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010D                     	;# 
    82  010E                     	;# 
    83  0111                     	;# 
    84  0112                     	;# 
    85  0113                     	;# 
    86  0114                     	;# 
    87  0115                     	;# 
    88  0116                     	;# 
    89  0117                     	;# 
    90  0118                     	;# 
    91  0119                     	;# 
    92  011D                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  018E                     	;# 
    96  0191                     	;# 
    97  0191                     	;# 
    98  0192                     	;# 
    99  0193                     	;# 
   100  0193                     	;# 
   101  0194                     	;# 
   102  0195                     	;# 
   103  0196                     	;# 
   104  0197                     	;# 
   105  0199                     	;# 
   106  019A                     	;# 
   107  019B                     	;# 
   108  019B                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019E                     	;# 
   112  019F                     	;# 
   113  020C                     	;# 
   114  020D                     	;# 
   115  0211                     	;# 
   116  0211                     	;# 
   117  0212                     	;# 
   118  0212                     	;# 
   119  0213                     	;# 
   120  0213                     	;# 
   121  0214                     	;# 
   122  0214                     	;# 
   123  0215                     	;# 
   124  0215                     	;# 
   125  0215                     	;# 
   126  0216                     	;# 
   127  0216                     	;# 
   128  0217                     	;# 
   129  0217                     	;# 
   130  0391                     	;# 
   131  0392                     	;# 
   132  0393                     	;# 
   133  0394                     	;# 
   134  0395                     	;# 
   135  0396                     	;# 
   136  0498                     	;# 
   137  0498                     	;# 
   138  0499                     	;# 
   139  049A                     	;# 
   140  049B                     	;# 
   141  049B                     	;# 
   142  049C                     	;# 
   143  049E                     	;# 
   144  049F                     	;# 
   145  0611                     	;# 
   146  0612                     	;# 
   147  0613                     	;# 
   148  0613                     	;# 
   149  0614                     	;# 
   150  0615                     	;# 
   151  0616                     	;# 
   152  0616                     	;# 
   153  0617                     	;# 
   154  0618                     	;# 
   155  0619                     	;# 
   156  0619                     	;# 
   157  061A                     	;# 
   158  061B                     	;# 
   159  061C                     	;# 
   160  061C                     	;# 
   161  0691                     	;# 
   162  0692                     	;# 
   163  0693                     	;# 
   164  0694                     	;# 
   165  0695                     	;# 
   166  0F0F                     	;# 
   167  0F10                     	;# 
   168  0F11                     	;# 
   169  0F12                     	;# 
   170  0F13                     	;# 
   171  0F14                     	;# 
   172  0F15                     	;# 
   173  0F16                     	;# 
   174  0F17                     	;# 
   175  0F18                     	;# 
   176  0F19                     	;# 
   177  0F1A                     	;# 
   178  0F1B                     	;# 
   179  0F1C                     	;# 
   180  0F1D                     	;# 
   181  0F1E                     	;# 
   182  0F1F                     	;# 
   183  0F20                     	;# 
   184  0F21                     	;# 
   185  0F22                     	;# 
   186  0F23                     	;# 
   187  0F24                     	;# 
   188  0F25                     	;# 
   189  0F26                     	;# 
   190  0F27                     	;# 
   191  0F28                     	;# 
   192  0F29                     	;# 
   193  0F2A                     	;# 
   194  0F2B                     	;# 
   195  0F2C                     	;# 
   196  0F2D                     	;# 
   197  0F2E                     	;# 
   198  0F2F                     	;# 
   199  0F8C                     	;# 
   200  0F8D                     	;# 
   201  0F91                     	;# 
   202  0F95                     	;# 
   203  0F96                     	;# 
   204  0F97                     	;# 
   205  0F9C                     	;# 
   206  0F9D                     	;# 
   207  0F9E                     	;# 
   208  0FE3                     	;# 
   209  0FE4                     	;# 
   210  0FE5                     	;# 
   211  0FE6                     	;# 
   212  0FE7                     	;# 
   213  0FE8                     	;# 
   214  0FE9                     	;# 
   215  0FEA                     	;# 
   216  0FEB                     	;# 
   217  0FED                     	;# 
   218  0FEE                     	;# 
   219  0FEF                     	;# 
   220                           
   221                           	psect	idataBANK0
   222  0E64                     __pidataBANK0:	
   223                           
   224                           ;initializer for main@F4265
   225  0E64  3430               	retlw	48
   226  0E65  3430               	retlw	48
   227  0E66  3430               	retlw	48
   228  0E67  3400               	retlw	0
   229                           
   230                           	psect	idataBANK1
   231  06EA                     __pidataBANK1:	
   232                           
   233                           ;initializer for _STR_DAY_OF_WEEK
   234  06EA  34B3               	retlw	low (STR_1| (0+32768))
   235  06EB  3487               	retlw	high (STR_1| (0+32768))
   236  06EC  34AF               	retlw	low (STR_2| (0+32768))
   237  06ED  3487               	retlw	high (STR_2| (0+32768))
   238  06EE  34A7               	retlw	low (STR_3| (0+32768))
   239  06EF  3487               	retlw	high (STR_3| (0+32768))
   240  06F0  34A3               	retlw	low (STR_4| (0+32768))
   241  06F1  3487               	retlw	high (STR_4| (0+32768))
   242  06F2  34BB               	retlw	low (STR_5| (0+32768))
   243  06F3  3487               	retlw	high (STR_5| (0+32768))
   244  06F4  34AB               	retlw	low (STR_6| (0+32768))
   245  06F5  3487               	retlw	high (STR_6| (0+32768))
   246  06F6  34B7               	retlw	low (STR_7| (0+32768))
   247  06F7  3487               	retlw	high (STR_7| (0+32768))
   248                           
   249                           ;initializer for _MESSAGE_MENU
   250  06F8  344A               	retlw	low (STR_8| (0+32768))
   251  06F9  3487               	retlw	high (STR_8| (0+32768))
   252  06FA  3463               	retlw	low (STR_9| (0+32768))
   253  06FB  3487               	retlw	high (STR_9| (0+32768))
   254  06FC  3457               	retlw	low (STR_10| (0+32768))
   255  06FD  3487               	retlw	high (STR_10| (0+32768))
   256  06FE  3487               	retlw	low (STR_11| (0+32768))
   257  06FF  3487               	retlw	high (STR_11| (0+32768))
   258                           
   259                           	psect	stringtext
   260  0700                     __pstringtext:	
   261  0700                     _HEX_TABLE:	
   262  0700  3430               	retlw	48
   263  0701  3431               	retlw	49
   264  0702  3432               	retlw	50
   265  0703  3433               	retlw	51
   266  0704  3434               	retlw	52
   267  0705  3435               	retlw	53
   268  0706  3436               	retlw	54
   269  0707  3437               	retlw	55
   270  0708  3438               	retlw	56
   271  0709  3439               	retlw	57
   272  070A  3441               	retlw	65
   273  070B  3442               	retlw	66
   274  070C  3443               	retlw	67
   275  070D  3444               	retlw	68
   276  070E  3445               	retlw	69
   277  070F  3446               	retlw	70
   278  0710                     __end_of_HEX_TABLE:	
   279  0710                     main@COMPARE_UNITS:	
   280  0710  3464               	retlw	100
   281  0711  340A               	retlw	10
   282  0712  3401               	retlw	1
   283  0713                     __end_ofmain@COMPARE_UNITS:	
   284  0713                     _PARALLEL_LCD_ROW_SELECT:	
   285  0713  3480               	retlw	128
   286  0714  34C0               	retlw	192
   287  0715                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   288  0715                     _VALUE_INFORMATIONS:	
   289  0715  3482               	retlw	130
   290  0716  3402               	retlw	2
   291  0717  3499               	retlw	153
   292  0718  3400               	retlw	0
   293  0719  3485               	retlw	133
   294  071A  3402               	retlw	2
   295  071B  3412               	retlw	18
   296  071C  3401               	retlw	1
   297  071D  3488               	retlw	136
   298  071E  3402               	retlw	2
   299  071F  3431               	retlw	49
   300  0720  3401               	retlw	1
   301  0721  348C               	retlw	140
   302  0722  3403               	retlw	3
   303  0723  3407               	retlw	7
   304  0724  3401               	retlw	1
   305  0725  34C0               	retlw	192
   306  0726  3402               	retlw	2
   307  0727  3423               	retlw	35
   308  0728  3400               	retlw	0
   309  0729  34C3               	retlw	195
   310  072A  3402               	retlw	2
   311  072B  3459               	retlw	89
   312  072C  3400               	retlw	0
   313  072D  34C6               	retlw	198
   314  072E  3402               	retlw	2
   315  072F  3459               	retlw	89
   316  0730  3400               	retlw	0
   317  0731                     __end_of_VALUE_INFORMATIONS:	
   318  0731                     _CURSOR_BITMAP:	
   319  0731  3410               	retlw	16
   320  0732  3418               	retlw	24
   321  0733  341C               	retlw	28
   322  0734  341E               	retlw	30
   323  0735  341C               	retlw	28
   324  0736  3418               	retlw	24
   325  0737  3410               	retlw	16
   326  0738  3400               	retlw	0
   327  0739                     __end_of_CURSOR_BITMAP:	
   328  000B                     _INTCONbits	set	11
   329  0011                     _PIR1bits	set	17
   330  000C                     _PORTA	set	12
   331  001B                     _PR2	set	27
   332  001C                     _T2CONbits	set	28
   333  0015                     _TMR0	set	21
   334  001A                     _TMR2	set	26
   335  005B                     _IOCIE	set	91
   336  0058                     _IOCIF	set	88
   337  008B                     _SSP1IF	set	139
   338  0095                     _OPTION_REGbits	set	149
   339  0099                     _OSCCONbits	set	153
   340  0091                     _PIE1bits	set	145
   341  008C                     _TRISA	set	140
   342  008D                     _TRISB	set	141
   343  008E                     _TRISC	set	142
   344  010D                     _LATBbits	set	269
   345  010E                     _LATC	set	270
   346  018C                     _ANSELA	set	396
   347  018D                     _ANSELB	set	397
   348  018E                     _ANSELC	set	398
   349  0212                     _SSP1ADD	set	530
   350  0211                     _SSP1BUF	set	529
   351  0215                     _SSP1CON1	set	533
   352  0216                     _SSP1CON2bits	set	534
   353  0214                     _SSP1STAT	set	532
   354  0214                     _SSPSTATbits	set	532
   355  0392                     _IOCANbits	set	914
   356  1C9B                     _IOCAF3	set	7323
   357  0619                     _PWM3CONbits	set	1561
   358  0618                     _PWM3DCH	set	1560
   359  0617                     _PWM3DCL	set	1559
   360  30CE                     _PWM3OE	set	12494
   361  0739                     STR_20:	
   362  0739  3452               	retlw	82	;'R'
   363  073A  3465               	retlw	101	;'e'
   364  073B  3463               	retlw	99	;'c'
   365  073C  3465               	retlw	101	;'e'
   366  073D  3469               	retlw	105	;'i'
   367  073E  3476               	retlw	118	;'v'
   368  073F  3465               	retlw	101	;'e'
   369  0740  3420               	retlw	32	;' '
   370  0741  3445               	retlw	69	;'E'
   371  0742  3472               	retlw	114	;'r'
   372  0743  3472               	retlw	114	;'r'
   373  0744  346F               	retlw	111	;'o'
   374  0745  3472               	retlw	114	;'r'
   375  0746  3420               	retlw	32	;' '
   376  0747  3421               	retlw	33	;'!'
   377  0748  3421               	retlw	33	;'!'
   378  0749  3400               	retlw	0
   379  074A                     STR_8:	
   380  074A  3441               	retlw	65	;'A'
   381  074B  3464               	retlw	100	;'d'
   382  074C  346A               	retlw	106	;'j'
   383  074D  3475               	retlw	117	;'u'
   384  074E  3473               	retlw	115	;'s'
   385  074F  3474               	retlw	116	;'t'
   386  0750  3420               	retlw	32	;' '
   387  0751  3443               	retlw	67	;'C'
   388  0752  346C               	retlw	108	;'l'
   389  0753  346F               	retlw	111	;'o'
   390  0754  3463               	retlw	99	;'c'
   391  0755  346B               	retlw	107	;'k'
   392  0756  3400               	retlw	0
   393  0757                     STR_10:	
   394  0757  3442               	retlw	66	;'B'
   395  0758  3475               	retlw	117	;'u'
   396  0759  347A               	retlw	122	;'z'
   397  075A  347A               	retlw	122	;'z'
   398  075B  3465               	retlw	101	;'e'
   399  075C  3472               	retlw	114	;'r'
   400  075D  3420               	retlw	32	;' '
   401  075E  3454               	retlw	84	;'T'
   402  075F  3465               	retlw	101	;'e'
   403  0760  3473               	retlw	115	;'s'
   404  0761  3474               	retlw	116	;'t'
   405  0762  3400               	retlw	0
   406  0763                     STR_9:	
   407  0763  3453               	retlw	83	;'S'
   408  0764  3465               	retlw	101	;'e'
   409  0765  3474               	retlw	116	;'t'
   410  0766  3420               	retlw	32	;' '
   411  0767  3454               	retlw	84	;'T'
   412  0768  3469               	retlw	105	;'i'
   413  0769  346D               	retlw	109	;'m'
   414  076A  3465               	retlw	101	;'e'
   415  076B  3472               	retlw	114	;'r'
   416  076C  3400               	retlw	0
   417  076D                     STR_12:	
   418  076D  3442               	retlw	66	;'B'
   419  076E  346F               	retlw	111	;'o'
   420  076F  346F               	retlw	111	;'o'
   421  0770  3474               	retlw	116	;'t'
   422  0771  3420               	retlw	32	;' '
   423  0772  342E               	retlw	46	;'.'
   424  0773  342E               	retlw	46	;'.'
   425  0774  342E               	retlw	46	;'.'
   426  0775  3400               	retlw	0
   427  0776                     STR_17:	
   428  0776  3450               	retlw	80	;'P'
   429  0777  3465               	retlw	101	;'e'
   430  0778  3472               	retlw	114	;'r'
   431  0779  3469               	retlw	105	;'i'
   432  077A  346F               	retlw	111	;'o'
   433  077B  3464               	retlw	100	;'d'
   434  077C  3420               	retlw	32	;' '
   435  077D  343D               	retlw	61	;'='
   436  077E  3400               	retlw	0
   437  077F                     STR_13:	
   438  077F  3441               	retlw	65	;'A'
   439  0780  344C               	retlw	76	;'L'
   440  0781  3445               	retlw	69	;'E'
   441  0782  3452               	retlw	82	;'R'
   442  0783  344D               	retlw	77	;'M'
   443  0784  3421               	retlw	33	;'!'
   444  0785  3421               	retlw	33	;'!'
   445  0786  3400               	retlw	0
   446  0787                     STR_11:	
   447  0787  3456               	retlw	86	;'V'
   448  0788  3465               	retlw	101	;'e'
   449  0789  3472               	retlw	114	;'r'
   450  078A  3473               	retlw	115	;'s'
   451  078B  3469               	retlw	105	;'i'
   452  078C  346F               	retlw	111	;'o'
   453  078D  346E               	retlw	110	;'n'
   454  078E  3400               	retlw	0
   455  078F                     STR_19:	
   456  078F  3430               	retlw	48	;'0'
   457  0790  3430               	retlw	48	;'0'
   458  0791  342E               	retlw	46	;'.'
   459  0792  3431               	retlw	49	;'1'
   460  0793  3430               	retlw	48	;'0'
   461  0794  3430               	retlw	48	;'0'
   462  0795  3400               	retlw	0
   463  0796                     STR_14:	
   464  0796  3461               	retlw	97	;'a'
   465  0797  3464               	retlw	100	;'d'
   466  0798  346A               	retlw	106	;'j'
   467  0799  3475               	retlw	117	;'u'
   468  079A  3473               	retlw	115	;'s'
   469  079B  3474               	retlw	116	;'t'
   470  079C  3400               	retlw	0
   471  079D                     STR_15:	
   472  079D  3474               	retlw	116	;'t'
   473  079E  3469               	retlw	105	;'i'
   474  079F  346D               	retlw	109	;'m'
   475  07A0  3465               	retlw	101	;'e'
   476  07A1  3472               	retlw	114	;'r'
   477  07A2  3400               	retlw	0
   478  07A3                     STR_4:	
   479  07A3  3457               	retlw	87	;'W'
   480  07A4  3445               	retlw	69	;'E'
   481  07A5  3444               	retlw	68	;'D'
   482  07A6  3400               	retlw	0
   483  07A7                     STR_3:	
   484  07A7  3454               	retlw	84	;'T'
   485  07A8  3455               	retlw	85	;'U'
   486  07A9  3445               	retlw	69	;'E'
   487  07AA  3400               	retlw	0
   488  07AB                     STR_6:	
   489  07AB  3446               	retlw	70	;'F'
   490  07AC  3452               	retlw	82	;'R'
   491  07AD  3449               	retlw	73	;'I'
   492  07AE  3400               	retlw	0
   493  07AF                     STR_2:	
   494  07AF  344D               	retlw	77	;'M'
   495  07B0  344F               	retlw	79	;'O'
   496  07B1  344E               	retlw	78	;'N'
   497  07B2  3400               	retlw	0
   498  07B3                     STR_1:	
   499  07B3  3453               	retlw	83	;'S'
   500  07B4  3455               	retlw	85	;'U'
   501  07B5  344E               	retlw	78	;'N'
   502  07B6  3400               	retlw	0
   503  07B7                     STR_7:	
   504  07B7  3453               	retlw	83	;'S'
   505  07B8  3441               	retlw	65	;'A'
   506  07B9  3454               	retlw	84	;'T'
   507  07BA  3400               	retlw	0
   508  07BB                     STR_5:	
   509  07BB  3454               	retlw	84	;'T'
   510  07BC  3448               	retlw	72	;'H'
   511  07BD  3455               	retlw	85	;'U'
   512  07BE  3400               	retlw	0
   513  0787                     
   514                           ; #config settings
   515  0000                     
   516                           	psect	cinit
   517  0073                     start_initialization:	
   518  0073                     __initialization:	
   519                           
   520                           ; Clear objects allocated to COMMON
   521  0073  01FA               	clrf	__pbssCOMMON& (0+127)
   522                           
   523                           ; Clear objects allocated to BANK0
   524  0074  304B               	movlw	low __pbssBANK0
   525  0075  0084               	movwf	4
   526  0076  3000               	movlw	high __pbssBANK0
   527  0077  0085               	movwf	5
   528  0078  3021               	movlw	33
   529  0079  318E  266E  3180   	fcall	clear_ram0
   530                           
   531                           ; Initialize objects allocated to BANK0
   532  007C  3064               	movlw	low __pidataBANK0
   533  007D  0084               	movwf	4
   534  007E  308E               	movlw	(high __pidataBANK0)| (0+128)
   535  007F  0085               	movwf	5
   536  0080  306C               	movlw	low __pdataBANK0
   537  0081  0086               	movwf	6
   538  0082  3000               	movlw	high __pdataBANK0
   539  0083  0087               	movwf	7
   540  0084  3004               	movlw	4
   541  0085  318E  2668  3180   	fcall	init_ram
   542                           
   543                           ; Initialize objects allocated to BANK1
   544  0088  30EA               	movlw	low __pidataBANK1
   545  0089  0084               	movwf	4
   546  008A  3086               	movlw	(high __pidataBANK1)| (0+128)
   547  008B  0085               	movwf	5
   548  008C  30A0               	movlw	low __pdataBANK1
   549  008D  0086               	movwf	6
   550  008E  3000               	movlw	high __pdataBANK1
   551  008F  0087               	movwf	7
   552  0090  3016               	movlw	22
   553  0091  318E  2668         	fcall	init_ram
   554  0093                     end_of_initialization:	
   555                           ;End of C runtime variable initialization code
   556                           
   557  0093                     __end_of__initialization:	
   558  0093  0020               	movlb	0
   559  0094  3180  2896         	ljmp	_main	;jump to C main() function
   560                           
   561                           	psect	bssCOMMON
   562  007A                     __pbssCOMMON:	
   563  007A                     _alerm:	
   564  007A                     	ds	1
   565                           
   566                           	psect	bssBANK0
   567  004B                     __pbssBANK0:	
   568  004B                     _keyCount:	
   569  004B                     	ds	6
   570  0051                     _currentValueInfo:	
   571  0051                     	ds	2
   572  0053                     _blinkPrescaler:	
   573  0053                     	ds	1
   574  0054                     _currentEditValue:	
   575  0054                     	ds	1
   576  0055                     _cursorPosition:	
   577  0055                     	ds	1
   578  0056                     _editSelect:	
   579  0056                     	ds	1
   580  0057                     _keyEvents_:	
   581  0057                     	ds	1
   582  0058                     _machineState_:	
   583  0058                     	ds	1
   584  0059                     _menuSelect:	
   585  0059                     	ds	1
   586  005A                     _outputEvent:	
   587  005A                     	ds	1
   588  005B                     _portAState_:	
   589  005B                     	ds	1
   590  005C                     main@prevPortAState:	
   591  005C                     	ds	1
   592  005D                     _dateCurrent:	
   593  005D                     	ds	7
   594  0064                     _dateTimer:	
   595  0064                     	ds	7
   596  006B                     _datePtr:	
   597  006B                     	ds	1
   598                           
   599                           	psect	dataBANK0
   600  006C                     __pdataBANK0:	
   601  006C                     main@F4265:	
   602  006C                     	ds	4
   603                           
   604                           	psect	dataBANK1
   605  00A0                     __pdataBANK1:	
   606  00A0                     _STR_DAY_OF_WEEK:	
   607  00A0                     	ds	14
   608  00AE                     _MESSAGE_MENU:	
   609  00AE                     	ds	8
   610                           
   611                           	psect	clrtext
   612  0E6E                     clear_ram0:	
   613                           ;	Called with FSR0 containing the base address, and
   614                           ;	WREG with the size to clear
   615                           
   616  0E6E  0064               	clrwdt	;clear the watchdog before getting into this loop
   617  0E6F                     clrloop0:	
   618  0E6F  0180               	clrf	0	;clear RAM location pointed to by FSR
   619  0E70  3101               	addfsr 0,1
   620  0E71  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   621  0E72  2E6F               	goto	clrloop0	;have we reached the end yet?
   622  0E73  3400               	retlw	0	;all done for this memory range, return
   623                           
   624                           	psect	inittext
   625  0E68                     init_ram:	
   626  0E68  00FE               	movwf	126
   627  0E69                     initloop:	
   628  0E69  0012               	moviw fsr0++
   629  0E6A  001E               	movwi fsr1++
   630  0E6B  0BFE               	decfsz	126,f
   631  0E6C  2E69               	goto	initloop
   632  0E6D  3400               	retlw	0
   633                           
   634                           	psect	cstackCOMMON
   635  0070                     __pcstackCOMMON:	
   636  0070                     ?_initialize:	
   637  0070                     ?__parallel_lcd_Initialize:	
   638                           ; 0 bytes @ 0x0
   639                           
   640  0070                     ?__parallel_lcd_ClearRow:	
   641                           ; 0 bytes @ 0x0
   642                           
   643  0070                     ?__:	
   644                           ; 0 bytes @ 0x0
   645                           
   646  0070                     ?__ds1307_SetClock:	
   647                           ; 0 bytes @ 0x0
   648                           
   649  0070                     ?i1__ds1307_GetData:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_main:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     i1__ds1307_GetData@ramAddress:	
   656                           ; 2 bytes @ 0x0
   657                           
   658                           
   659                           ; 1 bytes @ 0x0
   660  0070                     	ds	1
   661  0071                     i1__ds1307_GetData@length:	
   662                           
   663                           ; 1 bytes @ 0x1
   664  0071                     	ds	1
   665  0072                     ??i1__ds1307_GetData:	
   666                           
   667                           ; 0 bytes @ 0x2
   668  0072                     	ds	2
   669  0074                     i1__ds1307_GetData@date:	
   670                           
   671                           ; 1 bytes @ 0x4
   672  0074                     	ds	1
   673  0075                     i1__ds1307_GetData@dataCount:	
   674                           
   675                           ; 1 bytes @ 0x5
   676  0075                     	ds	1
   677  0076                     ??__:	
   678                           
   679                           ; 0 bytes @ 0x6
   680  0076                     	ds	2
   681  0078                     __@isTimeToAlerm:	
   682                           
   683                           ; 1 bytes @ 0x8
   684  0078                     	ds	1
   685  0079                     __@i:	
   686                           
   687                           ; 1 bytes @ 0x9
   688  0079                     	ds	1
   689                           
   690                           	psect	cstackBANK0
   691  0020                     __pcstackBANK0:	
   692  0020                     ?__private_parallel_lcd_WriteByte:	
   693  0020                     ??_initialize:	
   694                           ; 0 bytes @ 0x0
   695                           
   696  0020                     ?__date_time_ConvertByteToDate:	
   697                           ; 0 bytes @ 0x0
   698                           
   699  0020                     ?__date_time_ConvertByteToTime:	
   700                           ; 0 bytes @ 0x0
   701                           
   702  0020                     ?__date_time_ConvertByteToDiscrete:	
   703                           ; 0 bytes @ 0x0
   704                           
   705  0020                     ??__ds1307_SetClock:	
   706                           ; 0 bytes @ 0x0
   707                           
   708  0020                     ?__ds1307_GetData:	
   709                           ; 0 bytes @ 0x0
   710                           
   711  0020                     __private_parallel_lcd_WriteByte@r:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0020                     __date_time_ConvertByteToDate@stinrg:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0020                     __date_time_ConvertByteToTime@string:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0020                     __date_time_ConvertByteToDiscrete@string:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0020                     __ds1307_GetData@ramAddress:	
   724                           ; 1 bytes @ 0x0
   725                           
   726                           
   727                           ; 1 bytes @ 0x0
   728  0020                     	ds	1
   729  0021                     ??__private_parallel_lcd_WriteByte:	
   730  0021                     ??__date_time_ConvertByteToDate:	
   731                           ; 0 bytes @ 0x1
   732                           
   733  0021                     ??__date_time_ConvertByteToTime:	
   734                           ; 0 bytes @ 0x1
   735                           
   736  0021                     __date_time_ConvertByteToDiscrete@select:	
   737                           ; 0 bytes @ 0x1
   738                           
   739  0021                     __ds1307_GetData@length:	
   740                           ; 1 bytes @ 0x1
   741                           
   742  0021                     __ds1307_SetClock@date:	
   743                           ; 1 bytes @ 0x1
   744                           
   745                           
   746                           ; 1 bytes @ 0x1
   747  0021                     	ds	1
   748  0022                     ??__date_time_ConvertByteToDiscrete:	
   749  0022                     ??__ds1307_GetData:	
   750                           ; 0 bytes @ 0x2
   751                           
   752  0022                     __private_parallel_lcd_WriteByte@data:	
   753                           ; 0 bytes @ 0x2
   754                           
   755  0022                     __ds1307_SetClock@i:	
   756                           ; 1 bytes @ 0x2
   757                           
   758                           
   759                           ; 1 bytes @ 0x2
   760  0022                     	ds	1
   761  0023                     ??__parallel_lcd_Initialize:	
   762  0023                     ?__parallel_lcd_WriteCharacter:	
   763                           ; 0 bytes @ 0x3
   764                           
   765  0023                     ?__parallel_lcd_WriteString:	
   766                           ; 0 bytes @ 0x3
   767                           
   768  0023                     ?__parallel_lcd_WriteStringClearing:	
   769                           ; 0 bytes @ 0x3
   770                           
   771  0023                     ??__parallel_lcd_ClearRow:	
   772                           ; 0 bytes @ 0x3
   773                           
   774  0023                     ?__parallel_lcd_ClearPartial:	
   775                           ; 0 bytes @ 0x3
   776                           
   777  0023                     ?__parallel_lcd_SetCgram:	
   778                           ; 0 bytes @ 0x3
   779                           
   780  0023                     __parallel_lcd_WriteCharacter@character:	
   781                           ; 0 bytes @ 0x3
   782                           
   783  0023                     __parallel_lcd_WriteString@stringPtr:	
   784                           ; 1 bytes @ 0x3
   785                           
   786  0023                     __parallel_lcd_ClearPartial@length:	
   787                           ; 1 bytes @ 0x3
   788                           
   789  0023                     __date_time_ConvertByteToTime@dateTime:	
   790                           ; 1 bytes @ 0x3
   791                           
   792  0023                     __parallel_lcd_WriteStringClearing@stringPtr:	
   793                           ; 1 bytes @ 0x3
   794                           
   795  0023                     __parallel_lcd_SetCgram@bitmap:	
   796                           ; 2 bytes @ 0x3
   797                           
   798                           
   799                           ; 2 bytes @ 0x3
   800  0023                     	ds	1
   801  0024                     ??__parallel_lcd_WriteCharacter:	
   802  0024                     ??__parallel_lcd_WriteString:	
   803                           ; 0 bytes @ 0x4
   804                           
   805  0024                     ??__parallel_lcd_ClearPartial:	
   806                           ; 0 bytes @ 0x4
   807                           
   808  0024                     __parallel_lcd_WriteCharacter@position:	
   809                           ; 0 bytes @ 0x4
   810                           
   811  0024                     __parallel_lcd_ClearRow@rowSelect:	
   812                           ; 1 bytes @ 0x4
   813                           
   814  0024                     __date_time_ConvertByteToDate@dateTime:	
   815                           ; 1 bytes @ 0x4
   816                           
   817  0024                     __ds1307_GetData@date:	
   818                           ; 1 bytes @ 0x4
   819                           
   820                           
   821                           ; 1 bytes @ 0x4
   822  0024                     	ds	1
   823  0025                     ??__parallel_lcd_WriteStringClearing:	
   824  0025                     ??__parallel_lcd_SetCgram:	
   825                           ; 0 bytes @ 0x5
   826                           
   827  0025                     __parallel_lcd_WriteString@position:	
   828                           ; 0 bytes @ 0x5
   829                           
   830  0025                     __parallel_lcd_ClearRow@i:	
   831                           ; 1 bytes @ 0x5
   832                           
   833  0025                     __parallel_lcd_ClearPartial@position:	
   834                           ; 1 bytes @ 0x5
   835                           
   836  0025                     __date_time_ConvertByteToDiscrete@dateTime:	
   837                           ; 1 bytes @ 0x5
   838                           
   839  0025                     __ds1307_GetData@dataCount:	
   840                           ; 1 bytes @ 0x5
   841                           
   842                           
   843                           ; 1 bytes @ 0x5
   844  0025                     	ds	1
   845  0026                     __parallel_lcd_WriteStringClearing@position:	
   846  0026                     __parallel_lcd_ClearPartial@i:	
   847                           ; 1 bytes @ 0x6
   848                           
   849  0026                     __parallel_lcd_SetCgram@charCode:	
   850                           ; 1 bytes @ 0x6
   851                           
   852                           
   853                           ; 1 bytes @ 0x6
   854  0026                     	ds	1
   855  0027                     __parallel_lcd_WriteStringClearing@i:	
   856  0027                     __parallel_lcd_SetCgram@i:	
   857                           ; 1 bytes @ 0x7
   858                           
   859                           
   860                           ; 1 bytes @ 0x7
   861  0027                     	ds	1
   862  0028                     ??_main:	
   863                           
   864                           ; 0 bytes @ 0x8
   865  0028                     	ds	3
   866  002B                     main@string:	
   867                           
   868                           ; 17 bytes @ 0xB
   869  002B                     	ds	17
   870  003C                     main@valueString:	
   871                           
   872                           ; 4 bytes @ 0x1C
   873  003C                     	ds	4
   874  0040                     main@keyReleased:	
   875                           
   876                           ; 1 bytes @ 0x20
   877  0040                     	ds	1
   878  0041                     main@tmpValue:	
   879                           
   880                           ; 1 bytes @ 0x21
   881  0041                     	ds	1
   882  0042                     main@isNonZero:	
   883                           
   884                           ; 1 bytes @ 0x22
   885  0042                     	ds	1
   886  0043                     main@keyChange:	
   887                           
   888                           ; 1 bytes @ 0x23
   889  0043                     	ds	1
   890  0044                     main@compareUnit:	
   891                           
   892                           ; 1 bytes @ 0x24
   893  0044                     	ds	1
   894  0045                     main@string_769:	
   895                           
   896                           ; 4 bytes @ 0x25
   897  0045                     	ds	4
   898  0049                     main@keyPressed:	
   899                           
   900                           ; 1 bytes @ 0x29
   901  0049                     	ds	1
   902  004A                     main@i:	
   903                           
   904                           ; 1 bytes @ 0x2A
   905  004A                     	ds	1
   906                           
   907                           	psect	maintext
   908  0096                     __pmaintext:	
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 198 in file "src/main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  compareUnit     1   36[BANK0 ] unsigned char 
   919 ;;  i               1   42[BANK0 ] unsigned char 
   920 ;;  valueString     4   28[BANK0 ] unsigned char [4]
   921 ;;  isNonZero       1   34[BANK0 ] unsigned char 
   922 ;;  tmpValue        1   33[BANK0 ] unsigned char 
   923 ;;  string         17   11[BANK0 ] unsigned char [17]
   924 ;;  string          4   37[BANK0 ] unsigned char [4]
   925 ;;  keyPressed      1   41[BANK0 ] struct .
   926 ;;  keyChange       1   35[BANK0 ] struct .
   927 ;;  keyReleased     1   32[BANK0 ] struct .
   928 ;; Return value:  Size  Location     Type
   929 ;;                  2  258[None  ] int 
   930 ;; Registers used:
   931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : B1F/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   937 ;;      Params:         0       0       0       0
   938 ;;      Locals:         0      32       0       0
   939 ;;      Temps:          0       3       0       0
   940 ;;      Totals:         0      35       0       0
   941 ;;Total ram usage:       35 bytes
   942 ;; Hardware stack levels required when called:    4
   943 ;; This function calls:
   944 ;;		__date_time_ConvertByteToDate
   945 ;;		__date_time_ConvertByteToDiscrete
   946 ;;		__date_time_ConvertByteToTime
   947 ;;		__ds1307_GetData
   948 ;;		__ds1307_SetClock
   949 ;;		__parallel_lcd_ClearPartial
   950 ;;		__parallel_lcd_ClearRow
   951 ;;		__parallel_lcd_Initialize
   952 ;;		__parallel_lcd_SetCgram
   953 ;;		__parallel_lcd_WriteCharacter
   954 ;;		__parallel_lcd_WriteString
   955 ;;		__parallel_lcd_WriteStringClearing
   956 ;;		_initialize
   957 ;; This function is called by:
   958 ;;		Startup code after reset
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           
   963                           ;psect for function _main
   964  0096                     _main:	
   965                           
   966                           ;main.c: 199: initialize( ) ;
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   970  0096  3187  27BF  3180   	fcall	_initialize
   971                           
   972                           ;main.c: 201: PWM3DCH = ( 60 >> 2 ) ;
   973  0099  300F               	movlw	15
   974  009A  002C               	movlb	12	; select bank12
   975  009B  0098               	movwf	24	;volatile
   976                           
   977                           ;main.c: 202: PWM3DCL = ( ( 60 & 0b11 ) << 6 ) ;
   978  009C  0197               	clrf	23	;volatile
   979                           
   980                           ;main.c: 203: PWM3OE = 0 ;
   981  009D  1319               	bcf	25,6	;volatile
   982                           
   983                           ;main.c: 206: _delay((unsigned long)((20)*(1000000L/4000.0))) ;
   984  009E  3007               	movlw	7
   985  009F  0020               	movlb	0	; select bank0
   986  00A0  00A9               	movwf	??_main+1
   987  00A1  307D               	movlw	125
   988  00A2  00A8               	movwf	??_main
   989  00A3                     u2417:	
   990  00A3  0BA8               	decfsz	??_main,f
   991  00A4  28A3               	goto	u2417
   992  00A5  0BA9               	decfsz	??_main+1,f
   993  00A6  28A3               	goto	u2417
   994                           
   995                           ;main.c: 207: _parallel_lcd_Initialize( ) ;
   996  00A7  318E  2682  3180   	fcall	__parallel_lcd_Initialize
   997                           
   998                           ;main.c: 210: _parallel_lcd_SetCgram( 0x00 , CURSOR_BITMAP ) ;
   999  00AA  3031               	movlw	low (_CURSOR_BITMAP| (0+32768))
  1000  00AB  0020               	movlb	0	; select bank0
  1001  00AC  00A3               	movwf	__parallel_lcd_SetCgram@bitmap
  1002  00AD  3087               	movlw	high (_CURSOR_BITMAP| (0+32768))
  1003  00AE  00A4               	movwf	__parallel_lcd_SetCgram@bitmap+1
  1004  00AF  3000               	movlw	0
  1005  00B0  318F  2708  3180   	fcall	__parallel_lcd_SetCgram
  1006                           
  1007                           ;main.c: 212: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Boot ..." ) ;
  1008  00B3  306D               	movlw	low (STR_12| (0+32768))
  1009  00B4  0020               	movlb	0	; select bank0
  1010  00B5  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1011  00B6  3087               	movlw	high (STR_12| (0+32768))
  1012  00B7  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1013  00B8  3080               	movlw	128
  1014  00B9  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  1015                           
  1016                           ;main.c: 215: _ds1307_GetData( &dateTimer , 0x10 , 7 ) ;
  1017  00BC  3010               	movlw	16
  1018  00BD  0020               	movlb	0	; select bank0
  1019  00BE  00A8               	movwf	??_main
  1020  00BF  0828               	movf	??_main,w
  1021  00C0  00A0               	movwf	__ds1307_GetData@ramAddress
  1022  00C1  3007               	movlw	7
  1023  00C2  00A9               	movwf	??_main+1
  1024  00C3  0829               	movf	??_main+1,w
  1025  00C4  00A1               	movwf	__ds1307_GetData@length
  1026  00C5  3064               	movlw	(low (_dateTimer| 0))& (0+255)
  1027  00C6  3186  2689  3180   	fcall	__ds1307_GetData
  1028                           
  1029                           ;main.c: 217: INTCONbits.TMR0IE = 1 ;
  1030  00C9  168B               	bsf	11,5	;volatile
  1031                           
  1032                           ;main.c: 218: IOCIE = 0 ;
  1033  00CA  118B               	bcf	11,3	;volatile
  1034  00CB                     l259:	
  1035                           ;main.c: 220: for( ; ; ) {
  1036                           
  1037  00CB  0064               	clrwdt	;# 
  1038                           
  1039                           ;main.c: 225: static UniPortA prevPortAState = { 0x00 } ;
  1040                           ;main.c: 226: UniPortA keyChange , keyPressed , keyReleased ;
  1041                           ;main.c: 229: keyChange.byte = portAState_.byte ^ prevPortAState.byte ;
  1042  00CC  0020               	movlb	0	; select bank0
  1043  00CD  085B               	movf	_portAState_,w
  1044  00CE  065C               	xorwf	main@prevPortAState,w
  1045  00CF  00A8               	movwf	??_main
  1046  00D0  0828               	movf	??_main,w
  1047  00D1  00C3               	movwf	main@keyChange
  1048                           
  1049                           ;main.c: 230: keyPressed.byte = keyChange.byte & portAState_.byte ;
  1050  00D2  0843               	movf	main@keyChange,w
  1051  00D3  055B               	andwf	_portAState_,w
  1052  00D4  00A8               	movwf	??_main
  1053  00D5  0828               	movf	??_main,w
  1054  00D6  00C9               	movwf	main@keyPressed
  1055                           
  1056                           ;main.c: 231: keyReleased.byte = keyChange.byte & ~portAState_.byte ;
  1057  00D7  095B               	comf	_portAState_,w
  1058  00D8  0543               	andwf	main@keyChange,w
  1059  00D9  00A8               	movwf	??_main
  1060  00DA  0828               	movf	??_main,w
  1061  00DB  00C0               	movwf	main@keyReleased
  1062                           
  1063                           ;main.c: 232: prevPortAState.byte = portAState_.byte ;
  1064  00DC  085B               	movf	_portAState_,w
  1065  00DD  00A8               	movwf	??_main
  1066  00DE  0828               	movf	??_main,w
  1067  00DF  00DC               	movwf	main@prevPortAState
  1068                           
  1069                           ;main.c: 234: if( keyPressed.keyUp ) {
  1070  00E0  1CC9               	btfss	main@keyPressed,1
  1071  00E1  28E7               	goto	l262
  1072                           
  1073                           ;main.c: 235: if( portAState_.keyDown )
  1074  00E2  1C5B               	btfss	_portAState_,0
  1075  00E3  28E6               	goto	l263
  1076                           
  1077                           ;main.c: 236: keyEvents_.upDown=1 ;
  1078  00E4  1557               	bsf	_keyEvents_,2
  1079  00E5  28E7               	goto	l262
  1080  00E6                     l263:	
  1081                           
  1082                           ;main.c: 237: else
  1083                           ;main.c: 238: keyEvents_.up=1 ;
  1084  00E6  1457               	bsf	_keyEvents_,0
  1085  00E7                     l262:	
  1086                           
  1087                           ;main.c: 239: }
  1088                           ;main.c: 241: if( keyPressed.keyDown ) {
  1089  00E7  1C49               	btfss	main@keyPressed,0
  1090  00E8  28EE               	goto	l265
  1091                           
  1092                           ;main.c: 242: if( portAState_.keyUp )
  1093  00E9  1CDB               	btfss	_portAState_,1
  1094  00EA  28ED               	goto	l266
  1095                           
  1096                           ;main.c: 243: keyEvents_.upDown=1 ;
  1097  00EB  1557               	bsf	_keyEvents_,2
  1098  00EC  28EE               	goto	l265
  1099  00ED                     l266:	
  1100                           
  1101                           ;main.c: 244: else
  1102                           ;main.c: 245: keyEvents_.down=1 ;
  1103  00ED  14D7               	bsf	_keyEvents_,1
  1104  00EE                     l265:	
  1105                           
  1106                           ;main.c: 246: }
  1107                           ;main.c: 248: if( keyPressed.keyLeft ) {
  1108  00EE  1AC9               	btfsc	main@keyPressed,5
  1109                           
  1110                           ;main.c: 249: keyEvents_.left=1 ;
  1111  00EF  15D7               	bsf	_keyEvents_,3
  1112                           
  1113                           ;main.c: 250: }
  1114                           ;main.c: 252: if( keyPressed.keyRight ) {
  1115  00F0  1A49               	btfsc	main@keyPressed,4
  1116                           
  1117                           ;main.c: 253: keyEvents_.right=1 ;
  1118  00F1  1657               	bsf	_keyEvents_,4
  1119                           
  1120                           ;main.c: 254: }
  1121                           ;main.c: 255: if( keyReleased.keyRight ) {
  1122  00F2  1A40               	btfsc	main@keyReleased,4
  1123                           
  1124                           ;main.c: 256: keyEvents_.releaseRight=1 ;
  1125  00F3  1757               	bsf	_keyEvents_,6
  1126                           
  1127                           ;main.c: 257: }
  1128                           ;main.c: 260: if( (keyEvents_.leftRightHold&&!(keyEvents_.leftRightHold=0)) ) {
  1129  00F4  1ED7               	btfss	_keyEvents_,5
  1130  00F5  2909               	goto	l271
  1131  00F6  12D7               	bcf	_keyEvents_,5
  1132                           
  1133                           ;main.c: 262: outputEvent.changeMessage=1 ;
  1134  00F7  145A               	bsf	_outputEvent,0
  1135                           
  1136                           ;main.c: 264: switch( machineState_ ) {
  1137  00F8  2901               	goto	l1907
  1138  00F9                     l1901:	
  1139                           ;main.c: 266: case STATE_ADJUST_CLOCK:
  1140                           
  1141                           
  1142                           ;main.c: 267: _ds1307_SetClock( &dateCurrent ) ;
  1143  00F9  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  1144  00FA  318F  2768  3180   	fcall	__ds1307_SetClock
  1145                           
  1146                           ;main.c: 268: machineState_ = STATE_CLOCK ;
  1147  00FD  0020               	movlb	0	; select bank0
  1148  00FE                     l275:	
  1149                           ;main.c: 271: case STATE_SET_TIMER:
  1150                           
  1151                           ;main.c: 269: break ;
  1152                           
  1153                           
  1154                           ;main.c: 272: machineState_ = STATE_CLOCK ;
  1155  00FE  01D8               	clrf	_machineState_
  1156  00FF  0AD8               	incf	_machineState_,f
  1157                           
  1158                           ;main.c: 275: }
  1159                           
  1160                           ;main.c: 273: break ;
  1161  0100  2909               	goto	l271
  1162  0101                     l1907:	
  1163  0101  0858               	movf	_machineState_,w
  1164                           
  1165                           ; Switch size 1, requested type "space"
  1166                           ; Number of cases is 2, Range of values is 3 to 5
  1167                           ; switch strategies available:
  1168                           ; Name         Instructions Cycles
  1169                           ; simple_byte            7     4 (average)
  1170                           ; direct_byte           15     9 (fixed)
  1171                           ; jumptable            263     9 (fixed)
  1172                           ;	Chosen strategy is simple_byte
  1173  0102  3A03               	xorlw	3	; case 3
  1174  0103  1903               	skipnz
  1175  0104  28F9               	goto	l1901
  1176  0105  3A06               	xorlw	6	; case 5
  1177  0106  1903               	skipnz
  1178  0107  28FE               	goto	l275
  1179  0108  2909               	goto	l271
  1180  0109                     l271:	
  1181                           
  1182                           ;main.c: 276: }
  1183                           ;main.c: 279: if( (keyEvents_.left&&!(keyEvents_.left=0)) ) {
  1184  0109  1DD7               	btfss	_keyEvents_,3
  1185  010A  2943               	goto	l276
  1186  010B  11D7               	bcf	_keyEvents_,3
  1187                           
  1188                           ;main.c: 281: switch( machineState_ ) {
  1189  010C  2932               	goto	l1929
  1190  010D                     l278:	
  1191                           ;main.c: 283: case STATE_MENU:
  1192                           
  1193                           
  1194                           ;main.c: 284: machineState_ = STATE_CLOCK ;
  1195  010D  01D8               	clrf	_machineState_
  1196  010E  0AD8               	incf	_machineState_,f
  1197  010F  2930               	goto	l1925
  1198  0110                     l1911:	
  1199                           ;main.c: 288: case STATE_ADJUST_CLOCK:
  1200                           
  1201                           ;main.c: 286: break ;
  1202                           
  1203                           ;main.c: 285: outputEvent.changeMessage=1 ;
  1204                           
  1205                           
  1206                           ;main.c: 289: case STATE_SET_TIMER:
  1207                           ;main.c: 290: if( editSelect == DATE_ITEM_YEAR ) {
  1208  0110  0856               	movf	_editSelect,w
  1209  0111  1D03               	btfss	3,2
  1210  0112  2920               	goto	l1915
  1211                           
  1212                           ;main.c: 291: editSelect = DATE_ITEM_SECOND ;
  1213  0113  3006               	movlw	6
  1214  0114  00A8               	movwf	??_main
  1215  0115  0828               	movf	??_main,w
  1216  0116  00D6               	movwf	_editSelect
  1217                           
  1218                           ;main.c: 292: currentValueInfo = &VALUE_INFORMATIONS.second ;
  1219  0117  302D               	movlw	low ((_VALUE_INFORMATIONS| (0+32768)+24))
  1220  0118  00D1               	movwf	_currentValueInfo
  1221  0119  3087               	movlw	high ((_VALUE_INFORMATIONS| (0+32768)+24))
  1222  011A  00D2               	movwf	_currentValueInfo+1
  1223                           
  1224                           ;main.c: 293: currentEditValue = &datePtr->second ;
  1225  011B  086B               	movf	_datePtr,w
  1226  011C  00A8               	movwf	??_main
  1227  011D  0828               	movf	??_main,w
  1228  011E  00D4               	movwf	_currentEditValue
  1229                           
  1230                           ;main.c: 294: }
  1231  011F  292A               	goto	l1921
  1232  0120                     l1915:	
  1233                           
  1234                           ;main.c: 295: else {
  1235                           ;main.c: 296: editSelect-- ;
  1236  0120  3001               	movlw	1
  1237  0121  02D6               	subwf	_editSelect,f
  1238                           
  1239                           ;main.c: 297: currentValueInfo-- ;
  1240  0122  3004               	movlw	4
  1241  0123  02D1               	subwf	_currentValueInfo,f
  1242  0124  3000               	movlw	0
  1243  0125  3BD2               	subwfb	_currentValueInfo+1,f
  1244                           
  1245                           ;main.c: 298: currentEditValue++ ;
  1246  0126  3001               	movlw	1
  1247  0127  00A8               	movwf	??_main
  1248  0128  0828               	movf	??_main,w
  1249  0129  07D4               	addwf	_currentEditValue,f
  1250  012A                     l1921:	
  1251                           
  1252                           ;main.c: 299: }
  1253                           ;main.c: 301: blinkPrescaler = 0 ;
  1254  012A  01D3               	clrf	_blinkPrescaler
  1255                           
  1256                           ;main.c: 302: break ;
  1257  012B  2943               	goto	l276
  1258  012C                     l1923:	
  1259                           ;main.c: 304: case STATE_BUZZER_TEST:
  1260                           
  1261                           
  1262                           ;main.c: 305: case STATE_VERSION:
  1263                           ;main.c: 306: machineState_ = STATE_MENU ;
  1264  012C  3002               	movlw	2
  1265  012D  00A8               	movwf	??_main
  1266  012E  0828               	movf	??_main,w
  1267  012F  00D8               	movwf	_machineState_
  1268  0130                     l1925:	
  1269                           
  1270                           ;main.c: 307: outputEvent.changeMessage=1 ;
  1271  0130  145A               	bsf	_outputEvent,0
  1272                           
  1273                           ;main.c: 310: }
  1274                           
  1275                           ;main.c: 308: break ;
  1276  0131  2943               	goto	l276
  1277  0132                     l1929:	
  1278  0132  0858               	movf	_machineState_,w
  1279                           
  1280                           ; Switch size 1, requested type "space"
  1281                           ; Number of cases is 5, Range of values is 2 to 7
  1282                           ; switch strategies available:
  1283                           ; Name         Instructions Cycles
  1284                           ; simple_byte           16     9 (average)
  1285                           ; direct_byte           21     9 (fixed)
  1286                           ; jumptable            263     9 (fixed)
  1287                           ;	Chosen strategy is simple_byte
  1288  0133  3A02               	xorlw	2	; case 2
  1289  0134  1903               	skipnz
  1290  0135  290D               	goto	l278
  1291  0136  3A01               	xorlw	1	; case 3
  1292  0137  1903               	skipnz
  1293  0138  2910               	goto	l1911
  1294  0139  3A06               	xorlw	6	; case 5
  1295  013A  1903               	skipnz
  1296  013B  2910               	goto	l1911
  1297  013C  3A03               	xorlw	3	; case 6
  1298  013D  1903               	skipnz
  1299  013E  292C               	goto	l1923
  1300  013F  3A01               	xorlw	1	; case 7
  1301  0140  1903               	skipnz
  1302  0141  292C               	goto	l1923
  1303  0142  2943               	goto	l276
  1304  0143                     l276:	
  1305                           
  1306                           ;main.c: 312: }
  1307                           ;main.c: 315: if( (keyEvents_.right&&!(keyEvents_.right=0)) ) {
  1308  0143  1E57               	btfss	_keyEvents_,4
  1309  0144  29B1               	goto	l286
  1310  0145  1257               	bcf	_keyEvents_,4
  1311                           
  1312                           ;main.c: 317: switch( machineState_ ) {
  1313  0146  299F               	goto	l1975
  1314  0147                     l1933:	
  1315                           ;main.c: 319: case STATE_CLOCK:
  1316                           
  1317                           
  1318                           ;main.c: 320: machineState_ = STATE_MENU ;
  1319  0147  3002               	movlw	2
  1320  0148  00A8               	movwf	??_main
  1321  0149  0828               	movf	??_main,w
  1322  014A  00D8               	movwf	_machineState_
  1323                           
  1324                           ;main.c: 321: datePtr = &dateCurrent ;
  1325  014B  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  1326  014C  00A8               	movwf	??_main
  1327  014D  0828               	movf	??_main,w
  1328  014E  00EB               	movwf	_datePtr
  1329                           
  1330                           ;main.c: 322: menuSelect = 0 ;
  1331  014F  01D9               	clrf	_menuSelect
  1332                           
  1333                           ;main.c: 323: cursorPosition = 0 ;
  1334  0150  01D5               	clrf	_cursorPosition
  1335  0151  299A               	goto	l297
  1336  0152                     l1941:	
  1337                           ;main.c: 328: case STATE_ADJUST_CLOCK:
  1338                           
  1339                           ;main.c: 325: break ;
  1340                           
  1341                           ;main.c: 324: outputEvent.changeMessage=1 ;
  1342                           
  1343                           
  1344                           ;main.c: 329: case STATE_SET_TIMER:
  1345                           ;main.c: 330: if( editSelect == DATE_ITEM_SECOND ) {
  1346  0152  3006               	movlw	6
  1347  0153  0656               	xorwf	_editSelect,w
  1348  0154  1D03               	btfss	3,2
  1349  0155  2961               	goto	l1949
  1350                           
  1351                           ;main.c: 331: editSelect = DATE_ITEM_YEAR ;
  1352  0156  01D6               	clrf	_editSelect
  1353                           
  1354                           ;main.c: 332: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1355  0157  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1356  0158  00D1               	movwf	_currentValueInfo
  1357  0159  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1358  015A  00D2               	movwf	_currentValueInfo+1
  1359                           
  1360                           ;main.c: 333: currentEditValue = &datePtr->year ;
  1361  015B  086B               	movf	_datePtr,w
  1362  015C  3E06               	addlw	6
  1363  015D  00A8               	movwf	??_main
  1364  015E  0828               	movf	??_main,w
  1365  015F  00D4               	movwf	_currentEditValue
  1366                           
  1367                           ;main.c: 334: }
  1368  0160  296B               	goto	l1955
  1369  0161                     l1949:	
  1370                           
  1371                           ;main.c: 335: else {
  1372                           ;main.c: 336: editSelect++ ;
  1373  0161  3001               	movlw	1
  1374  0162  00A8               	movwf	??_main
  1375  0163  0828               	movf	??_main,w
  1376  0164  07D6               	addwf	_editSelect,f
  1377                           
  1378                           ;main.c: 337: currentValueInfo++ ;
  1379  0165  3004               	movlw	4
  1380  0166  07D1               	addwf	_currentValueInfo,f
  1381  0167  3000               	movlw	0
  1382  0168  3DD2               	addwfc	_currentValueInfo+1,f
  1383                           
  1384                           ;main.c: 338: currentEditValue-- ;
  1385  0169  3001               	movlw	1
  1386  016A  02D4               	subwf	_currentEditValue,f
  1387  016B                     l1955:	
  1388                           
  1389                           ;main.c: 339: }
  1390                           ;main.c: 341: blinkPrescaler = 0 ;
  1391  016B  01D3               	clrf	_blinkPrescaler
  1392                           
  1393                           ;main.c: 342: break ;
  1394  016C  29B1               	goto	l286
  1395  016D                     l1957:	
  1396                           ;main.c: 346: case MENU_ADJUST:
  1397                           
  1398                           ;main.c: 345: switch( menuSelect ) {
  1399                           
  1400                           ;main.c: 344: case STATE_MENU:
  1401                           
  1402                           
  1403                           ;main.c: 347: machineState_ = STATE_ADJUST_CLOCK ;
  1404  016D  3003               	movlw	3
  1405  016E  00A8               	movwf	??_main
  1406  016F  0828               	movf	??_main,w
  1407  0170  00D8               	movwf	_machineState_
  1408                           
  1409                           ;main.c: 348: datePtr = &dateCurrent ;
  1410  0171  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  1411  0172  2978               	goto	L4
  1412  0173                     l1961:	
  1413                           ;main.c: 353: case MENU_TIMER:
  1414                           
  1415                           ;main.c: 351: break ;
  1416                           
  1417                           ;main.c: 350: currentEditValue = &datePtr->year ;
  1418                           
  1419                           ;main.c: 349: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1420                           
  1421                           
  1422                           ;main.c: 354: machineState_ = STATE_SET_TIMER ;
  1423  0173  3005               	movlw	5
  1424  0174  00A8               	movwf	??_main
  1425  0175  0828               	movf	??_main,w
  1426  0176  00D8               	movwf	_machineState_
  1427                           
  1428                           ;main.c: 355: datePtr = &dateTimer ;
  1429  0177  3064               	movlw	(low (_dateTimer| 0))& (0+255)
  1430  0178                     L4:	
  1431  0178  00A8               	movwf	??_main
  1432  0179  0828               	movf	??_main,w
  1433  017A  00EB               	movwf	_datePtr
  1434                           
  1435                           ;main.c: 356: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1436  017B  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1437  017C  00D1               	movwf	_currentValueInfo
  1438  017D  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1439  017E  00D2               	movwf	_currentValueInfo+1
  1440                           
  1441                           ;main.c: 357: currentEditValue = &datePtr->year ;
  1442  017F  086B               	movf	_datePtr,w
  1443  0180  3E06               	addlw	6
  1444  0181  00A8               	movwf	??_main
  1445  0182  0828               	movf	??_main,w
  1446  0183  00D4               	movwf	_currentEditValue
  1447                           
  1448                           ;main.c: 358: break ;
  1449  0184  299A               	goto	l297
  1450  0185                     l1965:	
  1451                           ;main.c: 360: case MENU_BUZZER_TEST:
  1452                           
  1453                           
  1454                           ;main.c: 361: machineState_ = STATE_BUZZER_TEST ;
  1455  0185  3006               	movlw	6
  1456  0186  2988               	goto	L1
  1457  0187                     l1967:	
  1458                           ;main.c: 364: case MENU_VERSION:
  1459                           
  1460                           ;main.c: 362: break ;
  1461                           
  1462                           
  1463                           ;main.c: 365: machineState_ = STATE_VERSION ;
  1464  0187  3007               	movlw	7
  1465  0188                     L1:	
  1466  0188  00A8               	movwf	??_main
  1467  0189  0828               	movf	??_main,w
  1468  018A  00D8               	movwf	_machineState_
  1469                           
  1470                           ;main.c: 367: }
  1471                           
  1472                           ;main.c: 366: break ;
  1473  018B  299A               	goto	l297
  1474  018C                     l1971:	
  1475  018C  0859               	movf	_menuSelect,w
  1476                           
  1477                           ; Switch size 1, requested type "space"
  1478                           ; Number of cases is 4, Range of values is 0 to 3
  1479                           ; switch strategies available:
  1480                           ; Name         Instructions Cycles
  1481                           ; simple_byte           13     7 (average)
  1482                           ; direct_byte           14     6 (fixed)
  1483                           ; jumptable            260     6 (fixed)
  1484                           ;	Chosen strategy is simple_byte
  1485  018D  3A00               	xorlw	0	; case 0
  1486  018E  1903               	skipnz
  1487  018F  296D               	goto	l1957
  1488  0190  3A01               	xorlw	1	; case 1
  1489  0191  1903               	skipnz
  1490  0192  2973               	goto	l1961
  1491  0193  3A03               	xorlw	3	; case 2
  1492  0194  1903               	skipnz
  1493  0195  2985               	goto	l1965
  1494  0196  3A01               	xorlw	1	; case 3
  1495  0197  1903               	skipnz
  1496  0198  2987               	goto	l1967
  1497  0199  299A               	goto	l297
  1498  019A                     l297:	
  1499                           
  1500                           ;main.c: 368: outputEvent.changeMessage=1 ;
  1501  019A  145A               	bsf	_outputEvent,0
  1502                           
  1503                           ;main.c: 370: break ;
  1504  019B  29B1               	goto	l286
  1505  019C                     l301:	
  1506                           ;main.c: 372: case STATE_BUZZER_TEST:
  1507                           
  1508                           
  1509                           ;main.c: 373: PWM3CONbits.PWM3OE=1 ;
  1510  019C  002C               	movlb	12	; select bank12
  1511  019D  1719               	bsf	25,6	;volatile
  1512                           
  1513                           ;main.c: 375: }
  1514                           
  1515                           ;main.c: 374: break ;
  1516  019E  29B1               	goto	l286
  1517  019F                     l1975:	
  1518  019F  0020               	movlb	0	; select bank0
  1519  01A0  0858               	movf	_machineState_,w
  1520                           
  1521                           ; Switch size 1, requested type "space"
  1522                           ; Number of cases is 5, Range of values is 1 to 6
  1523                           ; switch strategies available:
  1524                           ; Name         Instructions Cycles
  1525                           ; simple_byte           16     9 (average)
  1526                           ; direct_byte           21     9 (fixed)
  1527                           ; jumptable            263     9 (fixed)
  1528                           ;	Chosen strategy is simple_byte
  1529  01A1  3A01               	xorlw	1	; case 1
  1530  01A2  1903               	skipnz
  1531  01A3  2947               	goto	l1933
  1532  01A4  3A03               	xorlw	3	; case 2
  1533  01A5  1903               	skipnz
  1534  01A6  298C               	goto	l1971
  1535  01A7  3A01               	xorlw	1	; case 3
  1536  01A8  1903               	skipnz
  1537  01A9  2952               	goto	l1941
  1538  01AA  3A06               	xorlw	6	; case 5
  1539  01AB  1903               	skipnz
  1540  01AC  2952               	goto	l1941
  1541  01AD  3A03               	xorlw	3	; case 6
  1542  01AE  1903               	skipnz
  1543  01AF  299C               	goto	l301
  1544  01B0  29B1               	goto	l286
  1545  01B1                     l286:	
  1546                           
  1547                           ;main.c: 377: }
  1548                           ;main.c: 379: if( (keyEvents_.releaseRight&&!(keyEvents_.releaseRight=0)) ) {
  1549  01B1  0020               	movlb	0	; select bank0
  1550  01B2  1F57               	btfss	_keyEvents_,6
  1551  01B3  29BF               	goto	l302
  1552  01B4  1357               	bcf	_keyEvents_,6
  1553                           
  1554                           ;main.c: 380: switch( machineState_ ) {
  1555  01B5  29B9               	goto	l1981
  1556  01B6                     l304:	
  1557                           ;main.c: 381: case STATE_BUZZER_TEST:
  1558                           
  1559                           
  1560                           ;main.c: 382: PWM3CONbits.PWM3OE=0 ;
  1561  01B6  002C               	movlb	12	; select bank12
  1562  01B7  1319               	bcf	25,6	;volatile
  1563                           
  1564                           ;main.c: 384: }
  1565                           
  1566                           ;main.c: 383: break ;
  1567  01B8  29BF               	goto	l302
  1568  01B9                     l1981:	
  1569  01B9  0020               	movlb	0	; select bank0
  1570  01BA  0858               	movf	_machineState_,w
  1571                           
  1572                           ; Switch size 1, requested type "space"
  1573                           ; Number of cases is 1, Range of values is 6 to 6
  1574                           ; switch strategies available:
  1575                           ; Name         Instructions Cycles
  1576                           ; simple_byte            4     3 (average)
  1577                           ; direct_byte           11     9 (fixed)
  1578                           ; jumptable            263     9 (fixed)
  1579                           ;	Chosen strategy is simple_byte
  1580  01BB  3A06               	xorlw	6	; case 6
  1581  01BC  1903               	skipnz
  1582  01BD  29B6               	goto	l304
  1583  01BE  29BF               	goto	l302
  1584  01BF                     l302:	
  1585                           
  1586                           ;main.c: 385: }
  1587                           ;main.c: 388: if( (keyEvents_.upDown&&!(keyEvents_.upDown=0)) ) {
  1588  01BF  0020               	movlb	0	; select bank0
  1589  01C0  1D57               	btfss	_keyEvents_,2
  1590  01C1  2A7B               	goto	l2061
  1591  01C2  1157               	bcf	_keyEvents_,2
  1592                           
  1593                           ;main.c: 389: switch( machineState_ ) {
  1594  01C3  29C8               	goto	l1987
  1595  01C4                     l308:	
  1596                           ;main.c: 391: case STATE_ALERM:
  1597                           
  1598                           
  1599                           ;main.c: 392: machineState_ = STATE_CLOCK ;
  1600  01C4  01D8               	clrf	_machineState_
  1601  01C5  0AD8               	incf	_machineState_,f
  1602                           
  1603                           ;main.c: 393: outputEvent.changeMessage=1 ;
  1604  01C6  145A               	bsf	_outputEvent,0
  1605                           
  1606                           ;main.c: 396: }
  1607                           
  1608                           ;main.c: 394: break ;
  1609  01C7  2A7B               	goto	l2061
  1610  01C8                     l1987:	
  1611  01C8  0858               	movf	_machineState_,w
  1612                           
  1613                           ; Switch size 1, requested type "space"
  1614                           ; Number of cases is 1, Range of values is 4 to 4
  1615                           ; switch strategies available:
  1616                           ; Name         Instructions Cycles
  1617                           ; simple_byte            4     3 (average)
  1618                           ; direct_byte           11     9 (fixed)
  1619                           ; jumptable            263     9 (fixed)
  1620                           ;	Chosen strategy is simple_byte
  1621  01C9  3A04               	xorlw	4	; case 4
  1622  01CA  1903               	skipnz
  1623  01CB  29C4               	goto	l308
  1624  01CC  2A7B               	goto	l2061
  1625                           
  1626                           ;main.c: 397: }
  1627                           ;main.c: 400: switch( machineState_ ) {
  1628  01CD  2A7B               	goto	l2061
  1629  01CE                     l311:	
  1630                           ;main.c: 402: case STATE_MENU:
  1631                           
  1632                           
  1633                           ;main.c: 403: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1634  01CE  1C57               	btfss	_keyEvents_,0
  1635  01CF  29DC               	goto	l1999
  1636  01D0  1057               	bcf	_keyEvents_,0
  1637                           
  1638                           ;main.c: 404: if( menuSelect ) menuSelect-- ;
  1639  01D1  0859               	movf	_menuSelect,w
  1640  01D2  1903               	btfsc	3,2
  1641  01D3  29D6               	goto	l313
  1642  01D4  3001               	movlw	1
  1643  01D5  02D9               	subwf	_menuSelect,f
  1644  01D6                     l313:	
  1645                           
  1646                           ;main.c: 405: if( cursorPosition != 0 ) cursorPosition-- ;
  1647  01D6  0855               	movf	_cursorPosition,w
  1648  01D7  1903               	btfsc	3,2
  1649  01D8  29DB               	goto	l1997
  1650  01D9  3001               	movlw	1
  1651  01DA  02D5               	subwf	_cursorPosition,f
  1652  01DB                     l1997:	
  1653                           
  1654                           ;main.c: 406: outputEvent.changeMessage=1 ;
  1655  01DB  145A               	bsf	_outputEvent,0
  1656  01DC                     l1999:	
  1657                           
  1658                           ;main.c: 407: }
  1659                           ;main.c: 408: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1660  01DC  1CD7               	btfss	_keyEvents_,1
  1661  01DD  2A89               	goto	l318
  1662  01DE  10D7               	bcf	_keyEvents_,1
  1663                           
  1664                           ;main.c: 409: if( menuSelect != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU[0] ) )
      +                           - 1 ) ) menuSelect++ ;
  1665  01DF  3003               	movlw	3
  1666  01E0  0659               	xorwf	_menuSelect,w
  1667  01E1  1903               	btfsc	3,2
  1668  01E2  29E7               	goto	l316
  1669  01E3  3001               	movlw	1
  1670  01E4  00A8               	movwf	??_main
  1671  01E5  0828               	movf	??_main,w
  1672  01E6  07D9               	addwf	_menuSelect,f
  1673  01E7                     l316:	
  1674                           
  1675                           ;main.c: 410: if( cursorPosition != 1 ) cursorPosition++ ;
  1676  01E7  0355               	decf	_cursorPosition,w
  1677  01E8  1903               	btfsc	3,2
  1678  01E9  29EE               	goto	l2009
  1679  01EA  3001               	movlw	1
  1680  01EB  00A8               	movwf	??_main
  1681  01EC  0828               	movf	??_main,w
  1682  01ED  07D5               	addwf	_cursorPosition,f
  1683  01EE                     l2009:	
  1684                           
  1685                           ;main.c: 411: outputEvent.changeMessage=1 ;
  1686  01EE  145A               	bsf	_outputEvent,0
  1687                           
  1688                           ;main.c: 412: }
  1689                           ;main.c: 413: break ;
  1690  01EF  2A89               	goto	l318
  1691  01F0                     l320:	
  1692                           ;main.c: 415: case STATE_ADJUST_CLOCK:
  1693                           
  1694                           
  1695                           ;main.c: 416: case STATE_SET_TIMER:
  1696                           ;main.c: 417: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1697  01F0  1C57               	btfss	_keyEvents_,0
  1698  01F1  2A2C               	goto	l2025
  1699  01F2  1057               	bcf	_keyEvents_,0
  1700                           
  1701                           ;main.c: 418: if( *currentEditValue == currentValueInfo->max )
  1702  01F3  0854               	movf	_currentEditValue,w
  1703  01F4  0086               	movwf	6
  1704  01F5  0187               	clrf	7
  1705  01F6  0852               	movf	_currentValueInfo+1,w
  1706  01F7  00A9               	movwf	??_main+1
  1707  01F8  0851               	movf	_currentValueInfo,w
  1708  01F9  00A8               	movwf	??_main
  1709  01FA  3002               	movlw	2
  1710  01FB  0728               	addwf	??_main,w
  1711  01FC  0084               	movwf	4
  1712  01FD  0829               	movf	??_main+1,w
  1713  01FE  1803               	skipnc
  1714  01FF  0A29               	incf	??_main+1,w
  1715  0200  0085               	movwf	5
  1716  0201  0800               	movf	0,w	;code access
  1717  0202  0601               	xorwf	1,w
  1718  0203  1D03               	skipz
  1719  0204  2A18               	goto	l2017
  1720                           
  1721                           ;main.c: 419: *currentEditValue = currentValueInfo->min ;
  1722  0205  0852               	movf	_currentValueInfo+1,w
  1723  0206  00A9               	movwf	??_main+1
  1724  0207  0851               	movf	_currentValueInfo,w
  1725  0208  00A8               	movwf	??_main
  1726  0209  3003               	movlw	3
  1727  020A  0728               	addwf	??_main,w
  1728  020B  0084               	movwf	4
  1729  020C  0829               	movf	??_main+1,w
  1730  020D  1803               	skipnc
  1731  020E  0A29               	incf	??_main+1,w
  1732  020F  0085               	movwf	5
  1733  0210  0800               	movf	0,w	;code access
  1734  0211  00AA               	movwf	??_main+2
  1735  0212  0854               	movf	_currentEditValue,w
  1736  0213  0086               	movwf	6
  1737  0214  0187               	clrf	7
  1738  0215  082A               	movf	??_main+2,w
  1739  0216  0081               	movwf	1
  1740  0217  2A2B               	goto	l2023
  1741  0218                     l2017:	
  1742                           
  1743                           ;main.c: 420: else if( ( *currentEditValue & 0x0F ) == 0x09 )
  1744  0218  0854               	movf	_currentEditValue,w
  1745  0219  0086               	movwf	6
  1746  021A  0187               	clrf	7
  1747  021B  300F               	movlw	15
  1748  021C  0501               	andwf	1,w
  1749  021D  00A8               	movwf	??_main
  1750  021E  3009               	movlw	9
  1751  021F  0628               	xorwf	??_main,w
  1752  0220  1D03               	btfss	3,2
  1753  0221  2A24               	goto	l2021
  1754                           
  1755                           ;main.c: 421: *currentEditValue += 7 ;
  1756  0222  3007               	movlw	7
  1757  0223  2A25               	goto	L2
  1758  0224                     l2021:	
  1759                           
  1760                           ;main.c: 422: else
  1761                           ;main.c: 423: ( *currentEditValue )++ ;
  1762  0224  3001               	movlw	1
  1763  0225                     L2:	
  1764  0225  00A8               	movwf	??_main
  1765  0226  0854               	movf	_currentEditValue,w
  1766  0227  0086               	movwf	6
  1767  0228  0187               	clrf	7
  1768  0229  0828               	movf	??_main,w
  1769  022A  0781               	addwf	1,f
  1770  022B                     l2023:	
  1771                           
  1772                           ;main.c: 424: outputEvent.changeValue=1 ;
  1773  022B  14DA               	bsf	_outputEvent,1
  1774  022C                     l2025:	
  1775                           
  1776                           ;main.c: 425: }
  1777                           ;main.c: 426: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1778  022C  1CD7               	btfss	_keyEvents_,1
  1779  022D  2A89               	goto	l318
  1780  022E  10D7               	bcf	_keyEvents_,1
  1781                           
  1782                           ;main.c: 427: if( *currentEditValue == currentValueInfo->min )
  1783  022F  0854               	movf	_currentEditValue,w
  1784  0230  0086               	movwf	6
  1785  0231  0187               	clrf	7
  1786  0232  0852               	movf	_currentValueInfo+1,w
  1787  0233  00A9               	movwf	??_main+1
  1788  0234  0851               	movf	_currentValueInfo,w
  1789  0235  00A8               	movwf	??_main
  1790  0236  3003               	movlw	3
  1791  0237  0728               	addwf	??_main,w
  1792  0238  0084               	movwf	4
  1793  0239  0829               	movf	??_main+1,w
  1794  023A  1803               	skipnc
  1795  023B  0A29               	incf	??_main+1,w
  1796  023C  0085               	movwf	5
  1797  023D  0800               	movf	0,w	;code access
  1798  023E  0601               	xorwf	1,w
  1799  023F  1D03               	skipz
  1800  0240  2A54               	goto	l2033
  1801                           
  1802                           ;main.c: 428: *currentEditValue = currentValueInfo->max ;
  1803  0241  0852               	movf	_currentValueInfo+1,w
  1804  0242  00A9               	movwf	??_main+1
  1805  0243  0851               	movf	_currentValueInfo,w
  1806  0244  00A8               	movwf	??_main
  1807  0245  3002               	movlw	2
  1808  0246  0728               	addwf	??_main,w
  1809  0247  0084               	movwf	4
  1810  0248  0829               	movf	??_main+1,w
  1811  0249  1803               	skipnc
  1812  024A  0A29               	incf	??_main+1,w
  1813  024B  0085               	movwf	5
  1814  024C  0800               	movf	0,w	;code access
  1815  024D  00AA               	movwf	??_main+2
  1816  024E  0854               	movf	_currentEditValue,w
  1817  024F  0086               	movwf	6
  1818  0250  0187               	clrf	7
  1819  0251  082A               	movf	??_main+2,w
  1820  0252  0081               	movwf	1
  1821  0253  2A79               	goto	l2057
  1822  0254                     l2033:	
  1823                           
  1824                           ;main.c: 429: else if( ( *currentEditValue & 0x0F ) == 0x00 )
  1825  0254  0854               	movf	_currentEditValue,w
  1826  0255  0086               	movwf	6
  1827  0256  0187               	clrf	7
  1828  0257  0801               	movf	1,w
  1829  0258  390F               	andlw	15
  1830  0259  1D03               	btfss	3,2
  1831  025A  2A60               	goto	l2037
  1832                           
  1833                           ;main.c: 430: *currentEditValue -= 7 ;
  1834  025B  0854               	movf	_currentEditValue,w
  1835  025C  0086               	movwf	6
  1836  025D  0187               	clrf	7
  1837  025E  3007               	movlw	7
  1838  025F  2A64               	goto	L3
  1839  0260                     l2037:	
  1840                           
  1841                           ;main.c: 431: else
  1842                           ;main.c: 432: ( *currentEditValue )-- ;
  1843  0260  0854               	movf	_currentEditValue,w
  1844  0261  0086               	movwf	6
  1845  0262  0187               	clrf	7
  1846  0263  3001               	movlw	1
  1847  0264                     L3:	
  1848  0264  0281               	subwf	1,f
  1849  0265  2A79               	goto	l2057
  1850  0266                     l331:	
  1851                           ;main.c: 437: case STATE_BUZZER_TEST:
  1852                           
  1853                           ;main.c: 434: }
  1854                           ;main.c: 435: break ;
  1855                           
  1856                           ;main.c: 433: outputEvent.changeValue=1 ;
  1857                           
  1858                           
  1859                           ;main.c: 438: if( (keyEvents_.up&&!(keyEvents_.up=0)) ) {
  1860  0266  1C57               	btfss	_keyEvents_,0
  1861  0267  2A71               	goto	l2049
  1862  0268  1057               	bcf	_keyEvents_,0
  1863                           
  1864                           ;main.c: 439: if( PR2 != 0xFF ) PR2++ ;
  1865  0269  0A1B               	incf	27,w	;volatile
  1866  026A  1903               	btfsc	3,2
  1867  026B  2A70               	goto	l2047
  1868  026C  3001               	movlw	1
  1869  026D  00A8               	movwf	??_main
  1870  026E  0828               	movf	??_main,w
  1871  026F  079B               	addwf	27,f	;volatile
  1872  0270                     l2047:	
  1873                           
  1874                           ;main.c: 440: outputEvent.changeValue=1 ;
  1875  0270  14DA               	bsf	_outputEvent,1
  1876  0271                     l2049:	
  1877                           
  1878                           ;main.c: 441: }
  1879                           ;main.c: 442: if( (keyEvents_.down&&!(keyEvents_.down=0)) ) {
  1880  0271  1CD7               	btfss	_keyEvents_,1
  1881  0272  2A89               	goto	l318
  1882  0273  10D7               	bcf	_keyEvents_,1
  1883                           
  1884                           ;main.c: 443: if( PR2 != 0 ) PR2-- ;
  1885  0274  081B               	movf	27,w	;volatile
  1886  0275  1903               	btfsc	3,2
  1887  0276  2A79               	goto	l2057
  1888  0277  3001               	movlw	1
  1889  0278  029B               	subwf	27,f	;volatile
  1890  0279                     l2057:	
  1891                           
  1892                           ;main.c: 444: outputEvent.changeValue=1 ;
  1893  0279  14DA               	bsf	_outputEvent,1
  1894                           
  1895                           ;main.c: 448: }
  1896                           
  1897                           ;main.c: 445: }
  1898                           ;main.c: 446: break ;
  1899  027A  2A89               	goto	l318
  1900  027B                     l2061:	
  1901  027B  0858               	movf	_machineState_,w
  1902                           
  1903                           ; Switch size 1, requested type "space"
  1904                           ; Number of cases is 4, Range of values is 2 to 6
  1905                           ; switch strategies available:
  1906                           ; Name         Instructions Cycles
  1907                           ; simple_byte           13     7 (average)
  1908                           ; direct_byte           19     9 (fixed)
  1909                           ; jumptable            263     9 (fixed)
  1910                           ;	Chosen strategy is simple_byte
  1911  027C  3A02               	xorlw	2	; case 2
  1912  027D  1903               	skipnz
  1913  027E  29CE               	goto	l311
  1914  027F  3A01               	xorlw	1	; case 3
  1915  0280  1903               	skipnz
  1916  0281  29F0               	goto	l320
  1917  0282  3A06               	xorlw	6	; case 5
  1918  0283  1903               	skipnz
  1919  0284  29F0               	goto	l320
  1920  0285  3A03               	xorlw	3	; case 6
  1921  0286  1903               	skipnz
  1922  0287  2A66               	goto	l331
  1923  0288  2A89               	goto	l318
  1924  0289                     l318:	
  1925                           
  1926                           ;main.c: 475: if( (outputEvent.changeMessage&&!(outputEvent.changeMessage=0)) ) {
  1927  0289  1C5A               	btfss	_outputEvent,0
  1928  028A  2B2D               	goto	l336
  1929  028B  105A               	bcf	_outputEvent,0
  1930                           
  1931                           ;main.c: 477: switch( machineState_ ) {
  1932  028C  2B1F               	goto	l2095
  1933  028D                     l2065:	
  1934                           ;main.c: 478: case STATE_CLOCK:
  1935                           
  1936                           
  1937                           ;main.c: 479: case STATE_ALERM:
  1938                           ;main.c: 480: case STATE_ADJUST_CLOCK:
  1939                           ;main.c: 481: case STATE_SET_TIMER:
  1940                           ;main.c: 483: _parallel_lcd_ClearRow( 0x80 ) ;
  1941  028D  3080               	movlw	128
  1942  028E  318E  26B3  3180   	fcall	__parallel_lcd_ClearRow
  1943                           
  1944                           ;main.c: 485: switch( machineState_ ) {
  1945  0291  2AAC               	goto	l2077
  1946  0292                     l2067:	
  1947                           ;main.c: 486: case STATE_CLOCK:
  1948                           
  1949                           
  1950                           ;main.c: 487: _parallel_lcd_ClearRow( 0xC0 ) ;
  1951  0292  30C0               	movlw	192
  1952  0293  318E  26B3  3180   	fcall	__parallel_lcd_ClearRow
  1953                           
  1954                           ;main.c: 488: break ;
  1955  0296  2AFC               	goto	l2085
  1956  0297                     l2069:	
  1957                           ;main.c: 489: case STATE_ALERM:
  1958                           
  1959                           
  1960                           ;main.c: 490: _parallel_lcd_WriteStringClearing( 0xC0 | 0x9 , "ALERM!!" ) ;
  1961  0297  307F               	movlw	low (STR_13| (0+32768))
  1962  0298  0020               	movlb	0	; select bank0
  1963  0299  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1964  029A  3087               	movlw	high (STR_13| (0+32768))
  1965  029B  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1966  029C  30C9               	movlw	201
  1967  029D  2AF9               	goto	L5
  1968  029E                     l2071:	
  1969                           ;main.c: 492: case STATE_ADJUST_CLOCK:
  1970                           
  1971                           ;main.c: 491: break ;
  1972                           
  1973                           
  1974                           ;main.c: 493: _parallel_lcd_WriteStringClearing( 0xC0 | 0xA , "adjust" ) ;
  1975  029E  3096               	movlw	low (STR_14| (0+32768))
  1976  029F  0020               	movlb	0	; select bank0
  1977  02A0  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1978  02A1  3087               	movlw	high (STR_14| (0+32768))
  1979  02A2  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1980  02A3  30CA               	movlw	202
  1981  02A4  2AF9               	goto	L5
  1982  02A5                     l2073:	
  1983                           ;main.c: 495: case STATE_SET_TIMER:
  1984                           
  1985                           ;main.c: 494: break ;
  1986                           
  1987                           
  1988                           ;main.c: 496: _parallel_lcd_WriteStringClearing( 0xC0 | 0xB , "timer" ) ;
  1989  02A5  309D               	movlw	low (STR_15| (0+32768))
  1990  02A6  0020               	movlb	0	; select bank0
  1991  02A7  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  1992  02A8  3087               	movlw	high (STR_15| (0+32768))
  1993  02A9  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  1994  02AA  30CB               	movlw	203
  1995  02AB  2AF9               	goto	L5
  1996  02AC                     l2077:	
  1997                           ;main.c: 498: }
  1998                           
  1999                           ;main.c: 497: break ;
  2000                           
  2001  02AC  0020               	movlb	0	; select bank0
  2002  02AD  0858               	movf	_machineState_,w
  2003                           
  2004                           ; Switch size 1, requested type "space"
  2005                           ; Number of cases is 4, Range of values is 1 to 5
  2006                           ; switch strategies available:
  2007                           ; Name         Instructions Cycles
  2008                           ; simple_byte           13     7 (average)
  2009                           ; direct_byte           19     9 (fixed)
  2010                           ; jumptable            263     9 (fixed)
  2011                           ;	Chosen strategy is simple_byte
  2012  02AE  3A01               	xorlw	1	; case 1
  2013  02AF  1903               	skipnz
  2014  02B0  2A92               	goto	l2067
  2015  02B1  3A02               	xorlw	2	; case 3
  2016  02B2  1903               	skipnz
  2017  02B3  2A9E               	goto	l2071
  2018  02B4  3A07               	xorlw	7	; case 4
  2019  02B5  1903               	skipnz
  2020  02B6  2A97               	goto	l2069
  2021  02B7  3A01               	xorlw	1	; case 5
  2022  02B8  1903               	skipnz
  2023  02B9  2AA5               	goto	l2073
  2024  02BA  2ABB               	goto	l344
  2025  02BB                     l344:	
  2026  02BB  2AFC               	goto	l2085
  2027  02BC                     l2079:	
  2028                           ;main.c: 503: case STATE_MENU:
  2029                           
  2030                           ;main.c: 501: break ;
  2031                           
  2032                           ;main.c: 499: outputEvent.changeValue=1 ;
  2033                           
  2034                           
  2035                           ;main.c: 504: _parallel_lcd_WriteStringClearing( 0x80 | 0x1 , MESSAGE_MENU[ menuSelect -
      +                           cursorPosition ] ) ;
  2036  02BC  0355               	decf	_cursorPosition,w
  2037  02BD  3AFF               	xorlw	255
  2038  02BE  0759               	addwf	_menuSelect,w
  2039  02BF  0709               	addwf	9,w
  2040  02C0  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2041  02C1  0086               	movwf	6
  2042  02C2  0187               	clrf	7
  2043  02C3  3F40               	moviw [0]fsr1
  2044  02C4  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2045  02C5  3F41               	moviw [1]fsr1
  2046  02C6  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2047  02C7  3081               	movlw	129
  2048  02C8  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2049                           
  2050                           ;main.c: 505: _parallel_lcd_WriteStringClearing( 0xC0 | 0x1 , MESSAGE_MENU[ menuSelect -
      +                           cursorPosition + 1] ) ;
  2051  02CB  0020               	movlb	0	; select bank0
  2052  02CC  0355               	decf	_cursorPosition,w
  2053  02CD  3AFF               	xorlw	255
  2054  02CE  0759               	addwf	_menuSelect,w
  2055  02CF  0709               	addwf	9,w
  2056  02D0  3E02               	addlw	2
  2057  02D1  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2058  02D2  0086               	movwf	6
  2059  02D3  0187               	clrf	7
  2060  02D4  3F40               	moviw [0]fsr1
  2061  02D5  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2062  02D6  3F41               	moviw [1]fsr1
  2063  02D7  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2064  02D8  30C1               	movlw	193
  2065  02D9  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2066                           
  2067                           ;main.c: 506: _parallel_lcd_WriteCharacter( PARALLEL_LCD_ROW_SELECT[cursorPosition] | 0x
      +                          0 , 0x00 ) ;
  2068  02DC  0020               	movlb	0	; select bank0
  2069  02DD  01A3               	clrf	__parallel_lcd_WriteCharacter@character
  2070  02DE  0855               	movf	_cursorPosition,w
  2071  02DF  3E13               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2072  02E0  0084               	movwf	4
  2073  02E1  3087               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2074  02E2  1803               	skipnc
  2075  02E3  3E01               	addlw	1
  2076  02E4  0085               	movwf	5
  2077  02E5  0800               	movf	0,w	;code access
  2078  02E6  318E  2674  3180   	fcall	__parallel_lcd_WriteCharacter
  2079                           
  2080                           ;main.c: 507: break ;
  2081  02E9  2B2D               	goto	l336
  2082  02EA                     l2083:	
  2083                           ;main.c: 509: case STATE_BUZZER_TEST:
  2084                           
  2085                           
  2086                           ;main.c: 510: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Buzzer Test" ) ;
  2087  02EA  3057               	movlw	low (STR_10| (0+32768))
  2088  02EB  0020               	movlb	0	; select bank0
  2089  02EC  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2090  02ED  3087               	movlw	high (STR_10| (0+32768))
  2091  02EE  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2092  02EF  3080               	movlw	128
  2093  02F0  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2094                           
  2095                           ;main.c: 511: _parallel_lcd_WriteStringClearing( 0xC0 | 0x0 , "Period =" ) ;
  2096  02F3  3076               	movlw	low (STR_17| (0+32768))
  2097  02F4  0020               	movlb	0	; select bank0
  2098  02F5  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2099  02F6  3087               	movlw	high (STR_17| (0+32768))
  2100  02F7  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2101  02F8  30C0               	movlw	192
  2102  02F9                     L5:	
  2103  02F9  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2104  02FC                     l2085:	
  2105                           
  2106                           ;main.c: 512: outputEvent.changeValue=1 ;
  2107  02FC  0020               	movlb	0	; select bank0
  2108  02FD  14DA               	bsf	_outputEvent,1
  2109                           
  2110                           ;main.c: 513: break ;
  2111  02FE  2B2D               	goto	l336
  2112  02FF                     l2087:	
  2113                           ;main.c: 515: case STATE_VERSION:
  2114                           
  2115                           
  2116                           ;main.c: 516: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Version" ) ;
  2117  02FF  3087               	movlw	low (STR_11| (0+32768))
  2118  0300  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2119  0301  3087               	movlw	high (STR_11| (0+32768))
  2120  0302  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2121  0303  3080               	movlw	128
  2122  0304  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2123                           
  2124                           ;main.c: 517: _parallel_lcd_WriteStringClearing( 0xC0 | 0x8 , "00.100" ) ;
  2125  0307  308F               	movlw	low (STR_19| (0+32768))
  2126  0308  0020               	movlb	0	; select bank0
  2127  0309  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2128  030A  3087               	movlw	high (STR_19| (0+32768))
  2129  030B  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2130  030C  30C8               	movlw	200
  2131  030D  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2132                           
  2133                           ;main.c: 518: break ;
  2134  0310  2B2D               	goto	l336
  2135  0311                     l2089:	
  2136                           ;main.c: 520: case STATE_ERROR:
  2137                           
  2138                           
  2139                           ;main.c: 521: _parallel_lcd_WriteStringClearing( 0x80 | 0x0 , "Receive Error !!" ) ;
  2140  0311  3039               	movlw	low (STR_20| (0+32768))
  2141  0312  0020               	movlb	0	; select bank0
  2142  0313  00A3               	movwf	__parallel_lcd_WriteStringClearing@stringPtr
  2143  0314  3087               	movlw	high (STR_20| (0+32768))
  2144  0315  00A4               	movwf	__parallel_lcd_WriteStringClearing@stringPtr+1
  2145  0316  3080               	movlw	128
  2146  0317  318F  2732  3180   	fcall	__parallel_lcd_WriteStringClearing
  2147                           
  2148                           ;main.c: 522: _parallel_lcd_ClearRow( 0xC0 ) ;
  2149  031A  30C0               	movlw	192
  2150  031B  318E  26B3  3180   	fcall	__parallel_lcd_ClearRow
  2151                           
  2152                           ;main.c: 524: }
  2153                           
  2154                           ;main.c: 523: break ;
  2155  031E  2B2D               	goto	l336
  2156  031F                     l2095:	
  2157  031F  0020               	movlb	0	; select bank0
  2158  0320  0858               	movf	_machineState_,w
  2159                           
  2160                           ; Switch size 1, requested type "space"
  2161                           ; Number of cases is 8, Range of values is 1 to 8
  2162                           ; switch strategies available:
  2163                           ; Name         Instructions Cycles
  2164                           ; direct_byte           25     9 (fixed)
  2165                           ; simple_byte           25    13 (average)
  2166                           ; jumptable            263     9 (fixed)
  2167                           ;	Chosen strategy is direct_byte
  2168  0321  3EFF               	addlw	-1
  2169  0322  1C03               	skipc
  2170  0323  2B2D               	goto	l336
  2171  0324  0084               	movwf	4
  2172  0325  3008               	movlw	8
  2173  0326  0204               	subwf	4,w
  2174  0327  1803               	skipnc
  2175  0328  2B2D               	goto	l336
  2176  0329  3188               	movlp	high S2261
  2177  032A  3504               	lslf	4,w
  2178  032B  3E00               	addlw	low S2261
  2179  032C  0082               	movwf	2
  2180  032D                     l336:	
  2181                           
  2182                           ;main.c: 526: }
  2183                           ;main.c: 529: if( (outputEvent.changeValue&&!(outputEvent.changeValue=0)) ) {
  2184  032D  0020               	movlb	0	; select bank0
  2185  032E  1CDA               	btfss	_outputEvent,1
  2186  032F  2BC2               	goto	l2151
  2187  0330  10DA               	bcf	_outputEvent,1
  2188                           
  2189                           ;main.c: 530: switch( machineState_ ) {
  2190  0331  2BB0               	goto	l2149
  2191  0332                     l2099:	
  2192                           ;main.c: 531: case STATE_CLOCK:
  2193                           
  2194                           
  2195                           ;main.c: 532: case STATE_ALERM:
  2196                           ;main.c: 533: case STATE_ADJUST_CLOCK:
  2197                           ;main.c: 534: case STATE_SET_TIMER:
  2198                           ;main.c: 535: {
  2199                           ;main.c: 536: char string[17] ;
  2200                           ;main.c: 537: _date_time_ConvertByteToDate( datePtr , &string ) ;
  2201  0332  302B               	movlw	(low (main@string| 0))& (0+255)
  2202  0333  00A8               	movwf	??_main
  2203  0334  0828               	movf	??_main,w
  2204  0335  00A0               	movwf	__date_time_ConvertByteToDate@stinrg
  2205  0336  086B               	movf	_datePtr,w
  2206  0337  3185  2525  3180   	fcall	__date_time_ConvertByteToDate
  2207                           
  2208                           ;main.c: 538: _parallel_lcd_WriteString( 0x80 | 0x0 , &string ) ;
  2209  033A  302B               	movlw	(low (main@string| 0))& (0+255)
  2210  033B  0020               	movlb	0	; select bank0
  2211  033C  00A8               	movwf	??_main
  2212  033D  0828               	movf	??_main,w
  2213  033E  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2214  033F  3080               	movlw	128
  2215  0340  318E  26EA  3180   	fcall	__parallel_lcd_WriteString
  2216                           
  2217                           ;main.c: 539: _date_time_ConvertByteToTime( datePtr , &string ) ;
  2218  0343  302B               	movlw	(low (main@string| 0))& (0+255)
  2219  0344  0020               	movlb	0	; select bank0
  2220  0345  00A8               	movwf	??_main
  2221  0346  0828               	movf	??_main,w
  2222  0347  00A0               	movwf	__date_time_ConvertByteToTime@string
  2223  0348  086B               	movf	_datePtr,w
  2224  0349  3186  2614  3180   	fcall	__date_time_ConvertByteToTime
  2225                           
  2226                           ;main.c: 540: _parallel_lcd_WriteString( 0xC0 | 0x0 , &string ) ;
  2227  034C  302B               	movlw	(low (main@string| 0))& (0+255)
  2228  034D  0020               	movlb	0	; select bank0
  2229  034E  00A8               	movwf	??_main
  2230  034F  0828               	movf	??_main,w
  2231  0350  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2232  0351  30C0               	movlw	192
  2233  0352  318E  26EA  3180   	fcall	__parallel_lcd_WriteString
  2234                           
  2235                           ;main.c: 541: blinkPrescaler = 0 ;
  2236  0355  0020               	movlb	0	; select bank0
  2237  0356  01D3               	clrf	_blinkPrescaler
  2238                           
  2239                           ;main.c: 542: }
  2240                           ;main.c: 543: break ;
  2241  0357  2BC2               	goto	l2151
  2242  0358                     l2109:	
  2243                           ;main.c: 545: case STATE_BUZZER_TEST:
  2244                           
  2245                           
  2246                           ;main.c: 546: {
  2247                           ;main.c: 547: char valueString[4] = "000" ;
  2248  0358  086F               	movf	main@F4265+3,w
  2249  0359  00BF               	movwf	main@valueString+3
  2250  035A  086E               	movf	main@F4265+2,w
  2251  035B  00BE               	movwf	main@valueString+2
  2252  035C  086D               	movf	main@F4265+1,w
  2253  035D  00BD               	movwf	main@valueString+1
  2254  035E  086C               	movf	main@F4265,w
  2255  035F  00BC               	movwf	main@valueString
  2256                           
  2257                           ;main.c: 548: PWM3DCH = PR2 >> 2 ;
  2258  0360  081B               	movf	27,w	;volatile
  2259  0361  00A8               	movwf	??_main
  2260  0362  3002               	movlw	2
  2261  0363                     u2195:	
  2262  0363  36A8               	lsrf	??_main,f
  2263  0364  0B89               	decfsz	9,f
  2264  0365  2B63               	goto	u2195
  2265  0366  0828               	movf	??_main,w
  2266  0367  002C               	movlb	12	; select bank12
  2267  0368  0098               	movwf	24	;volatile
  2268                           
  2269                           ;main.c: 549: uint08_t tmpValue = PR2 ;
  2270  0369  0020               	movlb	0	; select bank0
  2271  036A  081B               	movf	27,w	;volatile
  2272  036B  00A8               	movwf	??_main
  2273  036C  0828               	movf	??_main,w
  2274  036D  00C1               	movwf	main@tmpValue
  2275                           
  2276                           ;main.c: 550: uint08_t isNonZero = 0 ;
  2277  036E  01C2               	clrf	main@isNonZero
  2278                           
  2279                           ;main.c: 551: static const uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 } ;
  2280                           ;main.c: 553: for( uint08_t i = 0 ; i != 3 ; i++ ) {
  2281  036F  01CA               	clrf	main@i
  2282  0370  3003               	movlw	3
  2283  0371  064A               	xorwf	main@i,w
  2284  0372  1903               	btfsc	3,2
  2285  0373  2BA7               	goto	l2145
  2286  0374                     l2121:	
  2287                           
  2288                           ;main.c: 554: uint08_t compareUnit = COMPARE_UNITS[i] ;
  2289  0374  084A               	movf	main@i,w
  2290  0375  3E10               	addlw	low (main@COMPARE_UNITS| (0+32768))
  2291  0376  0084               	movwf	4
  2292  0377  3087               	movlw	high (main@COMPARE_UNITS| (0+32768))
  2293  0378  1803               	skipnc
  2294  0379  3E01               	addlw	1
  2295  037A  0085               	movwf	5
  2296  037B  0800               	movf	0,w	;code access
  2297  037C  00A8               	movwf	??_main
  2298  037D  0828               	movf	??_main,w
  2299  037E  00C4               	movwf	main@compareUnit
  2300  037F                     l2129:	
  2301                           ;main.c: 555: while( tmpValue >= compareUnit ) {
  2302                           
  2303  037F  0844               	movf	main@compareUnit,w
  2304  0380  0241               	subwf	main@tmpValue,w
  2305  0381  1C03               	btfss	3,0
  2306  0382  2B90               	goto	l2131
  2307                           
  2308                           ;main.c: 556: tmpValue -= compareUnit ;
  2309  0383  0844               	movf	main@compareUnit,w
  2310  0384  02C1               	subwf	main@tmpValue,f
  2311                           
  2312                           ;main.c: 557: valueString[i]++ ;
  2313  0385  3001               	movlw	1
  2314  0386  00A8               	movwf	??_main
  2315  0387  084A               	movf	main@i,w
  2316  0388  3E3C               	addlw	(low (main@valueString| 0))& (0+255)
  2317  0389  0086               	movwf	6
  2318  038A  0187               	clrf	7
  2319  038B  0828               	movf	??_main,w
  2320  038C  0781               	addwf	1,f
  2321                           
  2322                           ;main.c: 558: isNonZero = 1 ;
  2323  038D  01C2               	clrf	main@isNonZero
  2324  038E  0AC2               	incf	main@isNonZero,f
  2325  038F  2B7F               	goto	l2129
  2326  0390                     l2131:	
  2327                           
  2328                           ;main.c: 559: }
  2329                           ;main.c: 561: if( i == 2 ) break ;
  2330  0390  3002               	movlw	2
  2331  0391  064A               	xorwf	main@i,w
  2332  0392  1903               	btfsc	3,2
  2333  0393  2BA7               	goto	l2145
  2334                           
  2335                           ;main.c: 562: if( isNonZero ) continue ;
  2336  0394  0842               	movf	main@isNonZero,w
  2337  0395  1D03               	btfss	3,2
  2338  0396  2B9F               	goto	l2141
  2339                           
  2340                           ;main.c: 564: valueString[i] = ' ' ;
  2341  0397  3020               	movlw	32
  2342  0398  00A8               	movwf	??_main
  2343  0399  084A               	movf	main@i,w
  2344  039A  3E3C               	addlw	(low (main@valueString| 0))& (0+255)
  2345  039B  0086               	movwf	6
  2346  039C  0187               	clrf	7
  2347  039D  0828               	movf	??_main,w
  2348  039E  0081               	movwf	1
  2349  039F                     l2141:	
  2350  039F  3001               	movlw	1
  2351  03A0  00A8               	movwf	??_main
  2352  03A1  0828               	movf	??_main,w
  2353  03A2  07CA               	addwf	main@i,f
  2354  03A3  3003               	movlw	3
  2355  03A4  064A               	xorwf	main@i,w
  2356  03A5  1D03               	btfss	3,2
  2357  03A6  2B74               	goto	l2121
  2358  03A7                     l2145:	
  2359                           
  2360                           ;main.c: 565: }
  2361                           ;main.c: 567: _parallel_lcd_WriteString( 0xC0 | 0xD , &valueString ) ;
  2362  03A7  303C               	movlw	(low (main@valueString| 0))& (0+255)
  2363  03A8  00A8               	movwf	??_main
  2364  03A9  0828               	movf	??_main,w
  2365  03AA  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2366  03AB  30CD               	movlw	205
  2367  03AC  318E  26EA  3180   	fcall	__parallel_lcd_WriteString
  2368                           
  2369                           ;main.c: 570: }
  2370                           
  2371                           ;main.c: 568: }
  2372                           ;main.c: 569: break ;
  2373  03AF  2BC2               	goto	l2151
  2374  03B0                     l2149:	
  2375  03B0  0020               	movlb	0	; select bank0
  2376  03B1  0858               	movf	_machineState_,w
  2377                           
  2378                           ; Switch size 1, requested type "space"
  2379                           ; Number of cases is 5, Range of values is 1 to 6
  2380                           ; switch strategies available:
  2381                           ; Name         Instructions Cycles
  2382                           ; simple_byte           16     9 (average)
  2383                           ; direct_byte           21     9 (fixed)
  2384                           ; jumptable            263     9 (fixed)
  2385                           ;	Chosen strategy is simple_byte
  2386  03B2  3A01               	xorlw	1	; case 1
  2387  03B3  1903               	skipnz
  2388  03B4  2B32               	goto	l2099
  2389  03B5  3A02               	xorlw	2	; case 3
  2390  03B6  1903               	skipnz
  2391  03B7  2B32               	goto	l2099
  2392  03B8  3A07               	xorlw	7	; case 4
  2393  03B9  1903               	skipnz
  2394  03BA  2B32               	goto	l2099
  2395  03BB  3A01               	xorlw	1	; case 5
  2396  03BC  1903               	skipnz
  2397  03BD  2B32               	goto	l2099
  2398  03BE  3A03               	xorlw	3	; case 6
  2399  03BF  1903               	skipnz
  2400  03C0  2B58               	goto	l2109
  2401  03C1  2BC2               	goto	l2151
  2402  03C2                     l2151:	
  2403                           
  2404                           ;main.c: 572: }
  2405                           ;main.c: 574: if( machineState_ == STATE_ADJUST_CLOCK || machineState_ == STATE_SET_TIME
      +                          R ) {
  2406  03C2  3003               	movlw	3
  2407  03C3  0020               	movlb	0	; select bank0
  2408  03C4  0658               	xorwf	_machineState_,w
  2409  03C5  1903               	btfsc	3,2
  2410  03C6  2BCB               	goto	l2155
  2411  03C7  3005               	movlw	5
  2412  03C8  0658               	xorwf	_machineState_,w
  2413  03C9  1D03               	btfss	3,2
  2414  03CA  28CB               	goto	l259
  2415  03CB                     l2155:	
  2416                           
  2417                           ;main.c: 575: char string[4] ;
  2418                           ;main.c: 576: if( blinkPrescaler == 0x00 ) {
  2419  03CB  0853               	movf	_blinkPrescaler,w
  2420  03CC  1D03               	btfss	3,2
  2421  03CD  2BE7               	goto	l2159
  2422                           
  2423                           ;main.c: 577: _date_time_ConvertByteToDiscrete( datePtr , &string , editSelect ) ;
  2424  03CE  3045               	movlw	(low (main@string_769| 0))& (0+255)
  2425  03CF  00A8               	movwf	??_main
  2426  03D0  0828               	movf	??_main,w
  2427  03D1  00A0               	movwf	__date_time_ConvertByteToDiscrete@string
  2428  03D2  0856               	movf	_editSelect,w
  2429  03D3  00A9               	movwf	??_main+1
  2430  03D4  0829               	movf	??_main+1,w
  2431  03D5  00A1               	movwf	__date_time_ConvertByteToDiscrete@select
  2432  03D6  086B               	movf	_datePtr,w
  2433  03D7  3184  2404  3180   	fcall	__date_time_ConvertByteToDiscrete
  2434                           
  2435                           ;main.c: 578: _parallel_lcd_WriteString( currentValueInfo->position , &string ) ;
  2436  03DA  3045               	movlw	(low (main@string_769| 0))& (0+255)
  2437  03DB  0020               	movlb	0	; select bank0
  2438  03DC  00A8               	movwf	??_main
  2439  03DD  0828               	movf	??_main,w
  2440  03DE  00A3               	movwf	__parallel_lcd_WriteString@stringPtr
  2441  03DF  0851               	movf	_currentValueInfo,w
  2442  03E0  0084               	movwf	4
  2443  03E1  0852               	movf	_currentValueInfo+1,w
  2444  03E2  0085               	movwf	5
  2445  03E3  0800               	movf	0,w	;code access
  2446  03E4  318E  26EA  3180   	fcall	__parallel_lcd_WriteString
  2447  03E7                     l2159:	
  2448                           
  2449                           ;main.c: 579: }
  2450                           ;main.c: 580: if( blinkPrescaler == 0xC0 ) {
  2451  03E7  30C0               	movlw	192
  2452  03E8  0020               	movlb	0	; select bank0
  2453  03E9  0653               	xorwf	_blinkPrescaler,w
  2454  03EA  1D03               	btfss	3,2
  2455  03EB  28CB               	goto	l259
  2456                           
  2457                           ;main.c: 581: _parallel_lcd_ClearPartial( currentValueInfo->position , currentValueInfo-
      +                          >length ) ;
  2458  03EC  0852               	movf	_currentValueInfo+1,w
  2459  03ED  00A9               	movwf	??_main+1
  2460  03EE  0851               	movf	_currentValueInfo,w
  2461  03EF  00A8               	movwf	??_main
  2462  03F0  3001               	movlw	1
  2463  03F1  0728               	addwf	??_main,w
  2464  03F2  0084               	movwf	4
  2465  03F3  0829               	movf	??_main+1,w
  2466  03F4  1803               	skipnc
  2467  03F5  0A29               	incf	??_main+1,w
  2468  03F6  0085               	movwf	5
  2469  03F7  0800               	movf	0,w	;code access
  2470  03F8  00AA               	movwf	??_main+2
  2471  03F9  082A               	movf	??_main+2,w
  2472  03FA  00A3               	movwf	__parallel_lcd_ClearPartial@length
  2473  03FB  0851               	movf	_currentValueInfo,w
  2474  03FC  0084               	movwf	4
  2475  03FD  0852               	movf	_currentValueInfo+1,w
  2476  03FE  0085               	movwf	5
  2477  03FF  0800               	movf	0,w	;code access
  2478  0400  318E  269A  3180   	fcall	__parallel_lcd_ClearPartial
  2479                           
  2480                           ;main.c: 582: }
  2481                           ;main.c: 583: }
  2482                           ;main.c: 584: }
  2483  0403  28CB               	goto	l259
  2484  0404                     __end_of_main:	
  2485                           
  2486                           	psect	swtext1
  2487  0800                     __pswtext1:	
  2488  0800                     S2261:	
  2489  0800  3182  2A8D         	ljmp	l2065
  2490  0802  3182  2ABC         	ljmp	l2079
  2491  0804  3182  2A8D         	ljmp	l2065
  2492  0806  3182  2A8D         	ljmp	l2065
  2493  0808  3182  2A8D         	ljmp	l2065
  2494  080A  3182  2AEA         	ljmp	l2083
  2495  080C  3182  2AFF         	ljmp	l2087
  2496  080E  3183  2B11         	ljmp	l2089
  2497                           
  2498                           	psect	text1
  2499  07BF                     __ptext1:	
  2500 ;; *************** function _initialize *****************
  2501 ;; Defined at:
  2502 ;;		line 3 in file "src/pic16f1508_init.h"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;		None               void
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2516 ;;      Params:         0       0       0       0
  2517 ;;      Locals:         0       0       0       0
  2518 ;;      Temps:          0       0       0       0
  2519 ;;      Totals:         0       0       0       0
  2520 ;;Total ram usage:        0 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    2
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           
  2531                           ;psect for function _initialize
  2532  07BF                     _initialize:	
  2533                           
  2534                           ;pic16f1508_init.h: 6: OSCCONbits.IRCF = 0b1011 ;
  2535                           
  2536                           ;incstack = 0
  2537                           ; Regs used in _initialize: [wreg+status,2+status,0]
  2538  07BF  0021               	movlb	1	; select bank1
  2539  07C0  0819               	movf	25,w	;volatile
  2540  07C1  3987               	andlw	-121
  2541  07C2  3858               	iorlw	88
  2542  07C3  0099               	movwf	25	;volatile
  2543                           
  2544                           ;pic16f1508_init.h: 7: OSCCONbits.SCS = 0b10 ;
  2545  07C4  0819               	movf	25,w	;volatile
  2546  07C5  39FC               	andlw	-4
  2547  07C6  3802               	iorlw	2
  2548  07C7  0099               	movwf	25	;volatile
  2549                           
  2550                           ;pic16f1508_init.h: 10: INTCONbits.GIE = 1 ;
  2551  07C8  178B               	bsf	11,7	;volatile
  2552                           
  2553                           ;pic16f1508_init.h: 11: INTCONbits.PEIE = 0 ;
  2554  07C9  130B               	bcf	11,6	;volatile
  2555                           
  2556                           ;pic16f1508_init.h: 12: INTCONbits.INTE = 0 ;
  2557  07CA  120B               	bcf	11,4	;volatile
  2558                           
  2559                           ;pic16f1508_init.h: 15: INTCONbits.IOCIE = 0 ;
  2560  07CB  118B               	bcf	11,3	;volatile
  2561                           
  2562                           ;pic16f1508_init.h: 16: INTCONbits.IOCIE = 0 ;
  2563  07CC  118B               	bcf	11,3	;volatile
  2564                           
  2565                           ;pic16f1508_init.h: 17: IOCANbits.IOCAN3 = 1 ;
  2566  07CD  0027               	movlb	7	; select bank7
  2567  07CE  1592               	bsf	18,3	;volatile
  2568                           
  2569                           ;pic16f1508_init.h: 20: OPTION_REGbits.PSA = 0 ;
  2570  07CF  0021               	movlb	1	; select bank1
  2571  07D0  1195               	bcf	21,3	;volatile
  2572                           
  2573                           ;pic16f1508_init.h: 21: OPTION_REGbits.PS = 0b010 ;
  2574  07D1  0815               	movf	21,w	;volatile
  2575  07D2  39F8               	andlw	-8
  2576  07D3  3802               	iorlw	2
  2577  07D4  0095               	movwf	21	;volatile
  2578                           
  2579                           ;pic16f1508_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  2580  07D5  1295               	bcf	21,5	;volatile
  2581                           
  2582                           ;pic16f1508_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  2583  07D6  1615               	bsf	21,4	;volatile
  2584                           
  2585                           ;pic16f1508_init.h: 24: TMR0 = 0 ;
  2586  07D7  0020               	movlb	0	; select bank0
  2587  07D8  0195               	clrf	21	;volatile
  2588                           
  2589                           ;pic16f1508_init.h: 25: INTCONbits.TMR0IE = 0 ;
  2590  07D9  128B               	bcf	11,5	;volatile
  2591                           
  2592                           ;pic16f1508_init.h: 26: INTCONbits.TMR0IF = 0 ;
  2593  07DA  110B               	bcf	11,2	;volatile
  2594                           
  2595                           ;pic16f1508_init.h: 29: SSP1STAT = 0b10000000 ;
  2596  07DB  3080               	movlw	128
  2597  07DC  0024               	movlb	4	; select bank4
  2598  07DD  0094               	movwf	20	;volatile
  2599                           
  2600                           ;pic16f1508_init.h: 30: SSP1CON1 = 0b00101000 ;
  2601  07DE  3028               	movlw	40
  2602  07DF  0095               	movwf	21	;volatile
  2603                           
  2604                           ;pic16f1508_init.h: 31: SSP1ADD = 9 ;
  2605  07E0  3009               	movlw	9
  2606  07E1  0092               	movwf	18	;volatile
  2607                           
  2608                           ;pic16f1508_init.h: 34: T2CONbits.T2CKPS = 0b00 ;
  2609  07E2  30FC               	movlw	-4
  2610  07E3  0020               	movlb	0	; select bank0
  2611  07E4  059C               	andwf	28,f	;volatile
  2612                           
  2613                           ;pic16f1508_init.h: 35: T2CONbits.T2OUTPS = 0b0000 ;
  2614  07E5  3087               	movlw	-121
  2615  07E6  059C               	andwf	28,f	;volatile
  2616                           
  2617                           ;pic16f1508_init.h: 36: PIE1bits.TMR2IE = 0 ;
  2618  07E7  0021               	movlb	1	; select bank1
  2619  07E8  1091               	bcf	17,1	;volatile
  2620                           
  2621                           ;pic16f1508_init.h: 37: PIR1bits.TMR2IF = 0 ;
  2622  07E9  0020               	movlb	0	; select bank0
  2623  07EA  1091               	bcf	17,1	;volatile
  2624                           
  2625                           ;pic16f1508_init.h: 38: PR2 = 60 ;
  2626  07EB  303C               	movlw	60
  2627  07EC  009B               	movwf	27	;volatile
  2628                           
  2629                           ;pic16f1508_init.h: 39: TMR2 = 0 ;
  2630  07ED  019A               	clrf	26	;volatile
  2631                           
  2632                           ;pic16f1508_init.h: 40: T2CONbits.TMR2ON = 1 ;
  2633  07EE  151C               	bsf	28,2	;volatile
  2634                           
  2635                           ;pic16f1508_init.h: 43: PWM3DCH = 0 ;
  2636  07EF  002C               	movlb	12	; select bank12
  2637  07F0  0198               	clrf	24	;volatile
  2638                           
  2639                           ;pic16f1508_init.h: 44: PWM3DCL = 0 ;
  2640  07F1  0197               	clrf	23	;volatile
  2641                           
  2642                           ;pic16f1508_init.h: 45: PWM3CONbits.PWM3OE = 0 ;
  2643  07F2  1319               	bcf	25,6	;volatile
  2644                           
  2645                           ;pic16f1508_init.h: 46: PWM3CONbits.PWM3POL = 0 ;
  2646  07F3  1219               	bcf	25,4	;volatile
  2647                           
  2648                           ;pic16f1508_init.h: 47: PWM3CONbits.PWM3EN = 1 ;
  2649  07F4  1799               	bsf	25,7	;volatile
  2650                           
  2651                           ;pic16f1508_init.h: 49: ANSELA = 0b00000000 ;
  2652  07F5  0023               	movlb	3	; select bank3
  2653  07F6  018C               	clrf	12	;volatile
  2654                           
  2655                           ;pic16f1508_init.h: 50: ANSELB = 0b00000000 ;
  2656  07F7  018D               	clrf	13	;volatile
  2657                           
  2658                           ;pic16f1508_init.h: 51: ANSELC = 0b00000000 ;
  2659  07F8  018E               	clrf	14	;volatile
  2660                           
  2661                           ;pic16f1508_init.h: 53: TRISA = 0b00110011 ;
  2662  07F9  3033               	movlw	51
  2663  07FA  0021               	movlb	1	; select bank1
  2664  07FB  008C               	movwf	12	;volatile
  2665                           
  2666                           ;pic16f1508_init.h: 54: TRISB = 0b01010000 ;
  2667  07FC  3050               	movlw	80
  2668  07FD  008D               	movwf	13	;volatile
  2669                           
  2670                           ;pic16f1508_init.h: 55: TRISC = 0b00000000 ;
  2671  07FE  018E               	clrf	14	;volatile
  2672  07FF  0008               	return
  2673  0800                     __end_of_initialize:	
  2674                           
  2675                           	psect	text2
  2676  0F32                     __ptext2:	
  2677 ;; *************** function __parallel_lcd_WriteStringClearing *****************
  2678 ;; Defined at:
  2679 ;;		line 72 in file "src/../../_Common/parallel_LCD.h"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  position        1    wreg     unsigned char 
  2682 ;;  stringPtr       2    3[BANK0 ] PTR const unsigned char 
  2683 ;;		 -> STR_20(17), STR_19(7), STR_18(8), STR_17(9), 
  2684 ;;		 -> STR_16(12), STR_15(6), STR_14(7), STR_13(8), 
  2685 ;;		 -> STR_12(9), STR_11(8), STR_10(12), STR_9(10), 
  2686 ;;		 -> STR_8(13), 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  position        1    6[BANK0 ] unsigned char 
  2689 ;;  i               1    7[BANK0 ] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;		None               void
  2692 ;; Registers used:
  2693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2699 ;;      Params:         0       2       0       0
  2700 ;;      Locals:         0       2       0       0
  2701 ;;      Temps:          0       1       0       0
  2702 ;;      Totals:         0       5       0       0
  2703 ;;Total ram usage:        5 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    3
  2706 ;; This function calls:
  2707 ;;		__private_parallel_lcd_WriteByte
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function __parallel_lcd_WriteStringClearing
  2715  0F32                     __parallel_lcd_WriteStringClearing:	
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in __parallel_lcd_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  2719                           ;__parallel_lcd_WriteStringClearing@position stored from wreg
  2720  0F32  0020               	movlb	0	; select bank0
  2721  0F33  00A6               	movwf	__parallel_lcd_WriteStringClearing@position
  2722                           
  2723                           ;parallel_LCD.h: 73: _private_parallel_lcd_WriteByte( position & 0xF0 , 0 ) ;
  2724  0F34  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2725  0F35  0826               	movf	__parallel_lcd_WriteStringClearing@position,w
  2726  0F36  39F0               	andlw	240
  2727  0F37  318E  26CD  318F   	fcall	__private_parallel_lcd_WriteByte
  2728                           
  2729                           ;parallel_LCD.h: 74: for ( uint08_t i = 0 ; i != 16 ; i++ ) {
  2730  0F3A  0020               	movlb	0	; select bank0
  2731  0F3B  01A7               	clrf	__parallel_lcd_WriteStringClearing@i
  2732  0F3C                     L6:	
  2733  0F3C  3010               	movlw	16
  2734  0F3D  0627               	xorwf	__parallel_lcd_WriteStringClearing@i,w
  2735  0F3E  1903               	btfsc	3,2
  2736  0F3F  0008               	return
  2737                           
  2738                           ;parallel_LCD.h: 75: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  2739  0F40  0826               	movf	__parallel_lcd_WriteStringClearing@position,w
  2740  0F41  390F               	andlw	15
  2741  0F42  0227               	subwf	__parallel_lcd_WriteStringClearing@i,w
  2742  0F43  1C03               	skipc
  2743  0F44  2F5C               	goto	l1641
  2744  0F45  0823               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  2745  0F46  0084               	movwf	4
  2746  0F47  0824               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  2747  0F48  0085               	movwf	5
  2748  0F49  0012               	moviw fsr0++
  2749  0F4A  1903               	btfsc	3,2
  2750  0F4B  2F5C               	goto	l1641
  2751                           
  2752                           ;parallel_LCD.h: 76: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  2753  0F4C  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2754  0F4D  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2755  0F4E  0823               	movf	__parallel_lcd_WriteStringClearing@stringPtr,w
  2756  0F4F  0084               	movwf	4
  2757  0F50  0824               	movf	__parallel_lcd_WriteStringClearing@stringPtr+1,w
  2758  0F51  0085               	movwf	5
  2759  0F52  0800               	movf	0,w	;code access
  2760  0F53  318E  26CD  318F   	fcall	__private_parallel_lcd_WriteByte
  2761  0F56  3001               	movlw	1
  2762  0F57  0020               	movlb	0	; select bank0
  2763  0F58  07A3               	addwf	__parallel_lcd_WriteStringClearing@stringPtr,f
  2764  0F59  3000               	movlw	0
  2765  0F5A  3DA4               	addwfc	__parallel_lcd_WriteStringClearing@stringPtr+1,f
  2766  0F5B  2F62               	goto	l1643
  2767  0F5C                     l1641:	
  2768                           
  2769                           ;parallel_LCD.h: 77: else
  2770                           ;parallel_LCD.h: 78: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  2771  0F5C  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2772  0F5D  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2773  0F5E  3020               	movlw	32
  2774  0F5F  318E  26CD  318F   	fcall	__private_parallel_lcd_WriteByte
  2775  0F62                     l1643:	
  2776  0F62  3001               	movlw	1
  2777  0F63  0020               	movlb	0	; select bank0
  2778  0F64  00A5               	movwf	??__parallel_lcd_WriteStringClearing
  2779  0F65  0825               	movf	??__parallel_lcd_WriteStringClearing,w
  2780  0F66  07A7               	addwf	__parallel_lcd_WriteStringClearing@i,f
  2781  0F67  2F3C               	goto	L6
  2782  0F68                     __end_of__parallel_lcd_WriteStringClearing:	
  2783                           
  2784                           	psect	text3
  2785  0EEA                     __ptext3:	
  2786 ;; *************** function __parallel_lcd_WriteString *****************
  2787 ;; Defined at:
  2788 ;;		line 63 in file "src/../../_Common/parallel_LCD.h"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;  position        1    wreg     unsigned char 
  2791 ;;  stringPtr       1    3[BANK0 ] PTR const unsigned char 
  2792 ;;		 -> main@string_769(4), main@valueString(4), main@string(17), 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  position        1    5[BANK0 ] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;		None               void
  2797 ;; Registers used:
  2798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2804 ;;      Params:         0       1       0       0
  2805 ;;      Locals:         0       1       0       0
  2806 ;;      Temps:          0       1       0       0
  2807 ;;      Totals:         0       3       0       0
  2808 ;;Total ram usage:        3 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    3
  2811 ;; This function calls:
  2812 ;;		__private_parallel_lcd_WriteByte
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           
  2819                           ;psect for function __parallel_lcd_WriteString
  2820  0EEA                     __parallel_lcd_WriteString:	
  2821                           
  2822                           ;incstack = 0
  2823                           ; Regs used in __parallel_lcd_WriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  2824                           ;__parallel_lcd_WriteString@position stored from wreg
  2825  0EEA  0020               	movlb	0	; select bank0
  2826  0EEB  00A5               	movwf	__parallel_lcd_WriteString@position
  2827                           
  2828                           ;parallel_LCD.h: 64: _private_parallel_lcd_WriteByte( position , 0 ) ;
  2829  0EEC  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2830  0EED  0825               	movf	__parallel_lcd_WriteString@position,w
  2831  0EEE  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  2832  0EF1                     l1623:	
  2833                           ;parallel_LCD.h: 65: while ( *stringPtr ) {
  2834                           
  2835  0EF1  0020               	movlb	0	; select bank0
  2836  0EF2  0823               	movf	__parallel_lcd_WriteString@stringPtr,w
  2837  0EF3  0086               	movwf	6
  2838  0EF4  0187               	clrf	7
  2839  0EF5  0801               	movf	1,w
  2840  0EF6  1903               	btfsc	3,2
  2841  0EF7  0008               	return
  2842                           
  2843                           ;parallel_LCD.h: 66: _private_parallel_lcd_WriteByte( *stringPtr++ , 1 ) ;
  2844  0EF8  0020               	movlb	0	; select bank0
  2845  0EF9  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2846  0EFA  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2847  0EFB  0823               	movf	__parallel_lcd_WriteString@stringPtr,w
  2848  0EFC  0086               	movwf	6
  2849  0EFD  0187               	clrf	7
  2850  0EFE  0801               	movf	1,w
  2851  0EFF  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  2852  0F02  3001               	movlw	1
  2853  0F03  0020               	movlb	0	; select bank0
  2854  0F04  00A4               	movwf	??__parallel_lcd_WriteString
  2855  0F05  0824               	movf	??__parallel_lcd_WriteString,w
  2856  0F06  07A3               	addwf	__parallel_lcd_WriteString@stringPtr,f
  2857  0F07  2EF1               	goto	l1623
  2858  0F08                     __end_of__parallel_lcd_WriteString:	
  2859                           
  2860                           	psect	text4
  2861  0E74                     __ptext4:	
  2862 ;; *************** function __parallel_lcd_WriteCharacter *****************
  2863 ;; Defined at:
  2864 ;;		line 56 in file "src/../../_Common/parallel_LCD.h"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  position        1    wreg     unsigned char 
  2867 ;;  character       1    3[BANK0 ] unsigned char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  position        1    4[BANK0 ] unsigned char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;		None               void
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0, pclath, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2879 ;;      Params:         0       1       0       0
  2880 ;;      Locals:         0       1       0       0
  2881 ;;      Temps:          0       0       0       0
  2882 ;;      Totals:         0       2       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    3
  2886 ;; This function calls:
  2887 ;;		__private_parallel_lcd_WriteByte
  2888 ;; This function is called by:
  2889 ;;		_main
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           
  2894                           ;psect for function __parallel_lcd_WriteCharacter
  2895  0E74                     __parallel_lcd_WriteCharacter:	
  2896                           
  2897                           ;incstack = 0
  2898                           ; Regs used in __parallel_lcd_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  2899                           ;__parallel_lcd_WriteCharacter@position stored from wreg
  2900  0E74  0020               	movlb	0	; select bank0
  2901  0E75  00A4               	movwf	__parallel_lcd_WriteCharacter@position
  2902                           
  2903                           ;parallel_LCD.h: 57: _private_parallel_lcd_WriteByte( position , 0 ) ;
  2904  0E76  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2905  0E77  0824               	movf	__parallel_lcd_WriteCharacter@position,w
  2906  0E78  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  2907                           
  2908                           ;parallel_LCD.h: 58: _private_parallel_lcd_WriteByte( character , 1 ) ;
  2909  0E7B  0020               	movlb	0	; select bank0
  2910  0E7C  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2911  0E7D  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2912  0E7E  0823               	movf	__parallel_lcd_WriteCharacter@character,w
  2913  0E7F  318E  26CD         	fcall	__private_parallel_lcd_WriteByte
  2914  0E81  0008               	return
  2915  0E82                     __end_of__parallel_lcd_WriteCharacter:	
  2916                           
  2917                           	psect	text5
  2918  0F08                     __ptext5:	
  2919 ;; *************** function __parallel_lcd_SetCgram *****************
  2920 ;; Defined at:
  2921 ;;		line 109 in file "src/../../_Common/parallel_LCD.h"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  charCode        1    wreg     unsigned char 
  2924 ;;  bitmap          2    3[BANK0 ] PTR const unsigned char 
  2925 ;;		 -> CURSOR_BITMAP(8), 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  charCode        1    6[BANK0 ] unsigned char 
  2928 ;;  i               1    7[BANK0 ] unsigned char 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;		None               void
  2931 ;; Registers used:
  2932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2938 ;;      Params:         0       2       0       0
  2939 ;;      Locals:         0       2       0       0
  2940 ;;      Temps:          0       1       0       0
  2941 ;;      Totals:         0       5       0       0
  2942 ;;Total ram usage:        5 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    3
  2945 ;; This function calls:
  2946 ;;		__private_parallel_lcd_WriteByte
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           
  2953                           ;psect for function __parallel_lcd_SetCgram
  2954  0F08                     __parallel_lcd_SetCgram:	
  2955                           
  2956                           ;incstack = 0
  2957                           ; Regs used in __parallel_lcd_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2958                           ;__parallel_lcd_SetCgram@charCode stored from wreg
  2959  0F08  0020               	movlb	0	; select bank0
  2960  0F09  00A6               	movwf	__parallel_lcd_SetCgram@charCode
  2961                           
  2962                           ;parallel_LCD.h: 110: _private_parallel_lcd_WriteByte( ( ( charCode << 3 ) & 0b00111111 
      +                          ) | 0b01000000 , 0 ) ;
  2963  0F0A  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2964  0F0B  0826               	movf	__parallel_lcd_SetCgram@charCode,w
  2965  0F0C  00A5               	movwf	??__parallel_lcd_SetCgram
  2966  0F0D  3002               	movlw	2
  2967  0F0E                     u1335:	
  2968  0F0E  35A5               	lslf	??__parallel_lcd_SetCgram,f
  2969  0F0F  3EFF               	addlw	-1
  2970  0F10  1D03               	skipz
  2971  0F11  2F0E               	goto	u1335
  2972  0F12  3525               	lslf	??__parallel_lcd_SetCgram,w
  2973  0F13  393F               	andlw	63
  2974  0F14  3840               	iorlw	64
  2975  0F15  318E  26CD  318F   	fcall	__private_parallel_lcd_WriteByte
  2976                           
  2977                           ;parallel_LCD.h: 111: for ( uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  2978  0F18  0020               	movlb	0	; select bank0
  2979  0F19  01A7               	clrf	__parallel_lcd_SetCgram@i
  2980  0F1A                     L7:	
  2981  0F1A  3008               	movlw	8
  2982  0F1B  0627               	xorwf	__parallel_lcd_SetCgram@i,w
  2983  0F1C  1903               	btfsc	3,2
  2984  0F1D  0008               	return
  2985                           
  2986                           ;parallel_LCD.h: 112: _private_parallel_lcd_WriteByte( *bitmap , 1 ) ;
  2987  0F1E  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  2988  0F1F  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  2989  0F20  0823               	movf	__parallel_lcd_SetCgram@bitmap,w
  2990  0F21  0084               	movwf	4
  2991  0F22  0824               	movf	__parallel_lcd_SetCgram@bitmap+1,w
  2992  0F23  0085               	movwf	5
  2993  0F24  0800               	movf	0,w	;code access
  2994  0F25  318E  26CD  318F   	fcall	__private_parallel_lcd_WriteByte
  2995  0F28  3001               	movlw	1
  2996  0F29  0020               	movlb	0	; select bank0
  2997  0F2A  00A5               	movwf	??__parallel_lcd_SetCgram
  2998  0F2B  0825               	movf	??__parallel_lcd_SetCgram,w
  2999  0F2C  07A7               	addwf	__parallel_lcd_SetCgram@i,f
  3000  0F2D  3001               	movlw	1
  3001  0F2E  07A3               	addwf	__parallel_lcd_SetCgram@bitmap,f
  3002  0F2F  3000               	movlw	0
  3003  0F30  3DA4               	addwfc	__parallel_lcd_SetCgram@bitmap+1,f
  3004  0F31  2F1A               	goto	L7
  3005  0F32                     __end_of__parallel_lcd_SetCgram:	
  3006                           
  3007                           	psect	text6
  3008  0E82                     __ptext6:	
  3009 ;; *************** function __parallel_lcd_Initialize *****************
  3010 ;; Defined at:
  3011 ;;		line 47 in file "src/../../_Common/parallel_LCD.h"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;		None
  3016 ;; Return value:  Size  Location     Type
  3017 ;;		None               void
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0, pclath, cstack
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3025 ;;      Params:         0       0       0       0
  3026 ;;      Locals:         0       0       0       0
  3027 ;;      Temps:          0       0       0       0
  3028 ;;      Totals:         0       0       0       0
  3029 ;;Total ram usage:        0 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:    3
  3032 ;; This function calls:
  3033 ;;		__private_parallel_lcd_WriteByte
  3034 ;; This function is called by:
  3035 ;;		_main
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           
  3040                           ;psect for function __parallel_lcd_Initialize
  3041  0E82                     __parallel_lcd_Initialize:	
  3042                           
  3043                           ;parallel_LCD.h: 48: _private_parallel_lcd_WriteByte( 0x20 | 0x10 | 0x08 | 0x00 , 0 ) ;
  3044                           
  3045                           ;incstack = 0
  3046                           ; Regs used in __parallel_lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3047  0E82  0020               	movlb	0	; select bank0
  3048  0E83  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3049  0E84  3038               	movlw	56
  3050  0E85  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3051                           
  3052                           ;parallel_LCD.h: 49: _private_parallel_lcd_WriteByte( 0x08 | 0x04 , 0 ) ;
  3053  0E88  0020               	movlb	0	; select bank0
  3054  0E89  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3055  0E8A  300C               	movlw	12
  3056  0E8B  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3057                           
  3058                           ;parallel_LCD.h: 50: _private_parallel_lcd_WriteByte( 0x10 | 0x00 | 0x00 , 0 ) ;
  3059  0E8E  0020               	movlb	0	; select bank0
  3060  0E8F  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3061  0E90  3010               	movlw	16
  3062  0E91  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3063                           
  3064                           ;parallel_LCD.h: 51: _private_parallel_lcd_WriteByte( 0x04 | 0x02 | 0x00 , 0 ) ;
  3065  0E94  0020               	movlb	0	; select bank0
  3066  0E95  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3067  0E96  3006               	movlw	6
  3068  0E97  318E  26CD         	fcall	__private_parallel_lcd_WriteByte
  3069  0E99  0008               	return
  3070  0E9A                     __end_of__parallel_lcd_Initialize:	
  3071                           
  3072                           	psect	text7
  3073  0EB3                     __ptext7:	
  3074 ;; *************** function __parallel_lcd_ClearRow *****************
  3075 ;; Defined at:
  3076 ;;		line 93 in file "src/../../_Common/parallel_LCD.h"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  rowSelect       1    wreg     unsigned char 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  rowSelect       1    4[BANK0 ] unsigned char 
  3081 ;;  i               1    5[BANK0 ] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;		None               void
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0, pclath, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3091 ;;      Params:         0       0       0       0
  3092 ;;      Locals:         0       2       0       0
  3093 ;;      Temps:          0       1       0       0
  3094 ;;      Totals:         0       3       0       0
  3095 ;;Total ram usage:        3 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    3
  3098 ;; This function calls:
  3099 ;;		__private_parallel_lcd_WriteByte
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function __parallel_lcd_ClearRow
  3107  0EB3                     __parallel_lcd_ClearRow:	
  3108                           
  3109                           ;incstack = 0
  3110                           ; Regs used in __parallel_lcd_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  3111                           ;__parallel_lcd_ClearRow@rowSelect stored from wreg
  3112  0EB3  0020               	movlb	0	; select bank0
  3113  0EB4  00A4               	movwf	__parallel_lcd_ClearRow@rowSelect
  3114                           
  3115                           ;parallel_LCD.h: 94: _private_parallel_lcd_WriteByte( rowSelect & 0xF0 , 0 ) ;
  3116  0EB5  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3117  0EB6  0824               	movf	__parallel_lcd_ClearRow@rowSelect,w
  3118  0EB7  39F0               	andlw	240
  3119  0EB8  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3120                           
  3121                           ;parallel_LCD.h: 95: for ( uint08_t i = 0 ; i != 16 ; i++ )
  3122  0EBB  0020               	movlb	0	; select bank0
  3123  0EBC  01A5               	clrf	__parallel_lcd_ClearRow@i
  3124  0EBD                     L8:	
  3125  0EBD  3010               	movlw	16
  3126  0EBE  0625               	xorwf	__parallel_lcd_ClearRow@i,w
  3127  0EBF  1903               	btfsc	3,2
  3128  0EC0  0008               	return
  3129                           
  3130                           ;parallel_LCD.h: 96: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  3131  0EC1  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3132  0EC2  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  3133  0EC3  3020               	movlw	32
  3134  0EC4  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3135  0EC7  3001               	movlw	1
  3136  0EC8  0020               	movlb	0	; select bank0
  3137  0EC9  00A3               	movwf	??__parallel_lcd_ClearRow
  3138  0ECA  0823               	movf	??__parallel_lcd_ClearRow,w
  3139  0ECB  07A5               	addwf	__parallel_lcd_ClearRow@i,f
  3140  0ECC  2EBD               	goto	L8
  3141  0ECD                     __end_of__parallel_lcd_ClearRow:	
  3142                           
  3143                           	psect	text8
  3144  0E9A                     __ptext8:	
  3145 ;; *************** function __parallel_lcd_ClearPartial *****************
  3146 ;; Defined at:
  3147 ;;		line 101 in file "src/../../_Common/parallel_LCD.h"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  position        1    wreg     unsigned char 
  3150 ;;  length          1    3[BANK0 ] unsigned char 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  position        1    5[BANK0 ] unsigned char 
  3153 ;;  i               1    6[BANK0 ] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, pclath, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3163 ;;      Params:         0       1       0       0
  3164 ;;      Locals:         0       2       0       0
  3165 ;;      Temps:          0       1       0       0
  3166 ;;      Totals:         0       4       0       0
  3167 ;;Total ram usage:        4 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    3
  3170 ;; This function calls:
  3171 ;;		__private_parallel_lcd_WriteByte
  3172 ;; This function is called by:
  3173 ;;		_main
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function __parallel_lcd_ClearPartial
  3179  0E9A                     __parallel_lcd_ClearPartial:	
  3180                           
  3181                           ;incstack = 0
  3182                           ; Regs used in __parallel_lcd_ClearPartial: [wreg+status,2+status,0+pclath+cstack]
  3183                           ;__parallel_lcd_ClearPartial@position stored from wreg
  3184  0E9A  0020               	movlb	0	; select bank0
  3185  0E9B  00A5               	movwf	__parallel_lcd_ClearPartial@position
  3186                           
  3187                           ;parallel_LCD.h: 102: _private_parallel_lcd_WriteByte( position , 0 ) ;
  3188  0E9C  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3189  0E9D  0825               	movf	__parallel_lcd_ClearPartial@position,w
  3190  0E9E  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3191                           
  3192                           ;parallel_LCD.h: 103: for ( uint08_t i = 0 ; i != length ; i++ )
  3193  0EA1  0020               	movlb	0	; select bank0
  3194  0EA2  01A6               	clrf	__parallel_lcd_ClearPartial@i
  3195  0EA3                     l1669:	
  3196  0EA3  0826               	movf	__parallel_lcd_ClearPartial@i,w
  3197  0EA4  0623               	xorwf	__parallel_lcd_ClearPartial@length,w
  3198  0EA5  1903               	btfsc	3,2
  3199  0EA6  0008               	return
  3200                           
  3201                           ;parallel_LCD.h: 104: _private_parallel_lcd_WriteByte( ' ' , 1 ) ;
  3202  0EA7  01A0               	clrf	__private_parallel_lcd_WriteByte@r
  3203  0EA8  0AA0               	incf	__private_parallel_lcd_WriteByte@r,f
  3204  0EA9  3020               	movlw	32
  3205  0EAA  318E  26CD  318E   	fcall	__private_parallel_lcd_WriteByte
  3206  0EAD  3001               	movlw	1
  3207  0EAE  0020               	movlb	0	; select bank0
  3208  0EAF  00A4               	movwf	??__parallel_lcd_ClearPartial
  3209  0EB0  0824               	movf	??__parallel_lcd_ClearPartial,w
  3210  0EB1  07A6               	addwf	__parallel_lcd_ClearPartial@i,f
  3211  0EB2  2EA3               	goto	l1669
  3212  0EB3                     __end_of__parallel_lcd_ClearPartial:	
  3213                           
  3214                           	psect	text9
  3215  0ECD                     __ptext9:	
  3216 ;; *************** function __private_parallel_lcd_WriteByte *****************
  3217 ;; Defined at:
  3218 ;;		line 130 in file "src/../../_Common/parallel_LCD.h"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  data            1    wreg     unsigned char 
  3221 ;;  r               1    0[BANK0 ] unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  data            1    2[BANK0 ] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;		None               void
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3233 ;;      Params:         0       1       0       0
  3234 ;;      Locals:         0       1       0       0
  3235 ;;      Temps:          0       1       0       0
  3236 ;;      Totals:         0       3       0       0
  3237 ;;Total ram usage:        3 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		__parallel_lcd_Initialize
  3244 ;;		__parallel_lcd_WriteCharacter
  3245 ;;		__parallel_lcd_WriteString
  3246 ;;		__parallel_lcd_WriteStringClearing
  3247 ;;		__parallel_lcd_ClearRow
  3248 ;;		__parallel_lcd_ClearPartial
  3249 ;;		__parallel_lcd_SetCgram
  3250 ;;		__parallel_lcd_WriteHexNumber
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           
  3255                           ;psect for function __private_parallel_lcd_WriteByte
  3256  0ECD                     __private_parallel_lcd_WriteByte:	
  3257                           
  3258                           ;incstack = 0
  3259                           ; Regs used in __private_parallel_lcd_WriteByte: [wreg+status,2+status,0]
  3260                           ;__private_parallel_lcd_WriteByte@data stored from wreg
  3261  0ECD  0020               	movlb	0	; select bank0
  3262  0ECE  00A2               	movwf	__private_parallel_lcd_WriteByte@data
  3263                           
  3264                           ;parallel_LCD.h: 131: _delay((unsigned long)((40)*(1000000L/4000000.0))); ;
  3265  0ECF  3003               	movlw	3
  3266  0ED0  00A1               	movwf	??__private_parallel_lcd_WriteByte
  3267  0ED1                     u2427:	
  3268  0ED1  0BA1               	decfsz	??__private_parallel_lcd_WriteByte,f
  3269  0ED2  2ED1               	goto	u2427
  3270                           
  3271                           ;parallel_LCD.h: 132: LATC=data; ;
  3272  0ED3  0020               	movlb	0	; select bank0
  3273  0ED4  0822               	movf	__private_parallel_lcd_WriteByte@data,w
  3274  0ED5  0022               	movlb	2	; select bank2
  3275  0ED6  008E               	movwf	14	;volatile
  3276                           
  3277                           ;parallel_LCD.h: 133: LATBbits.LATB7=r&0x01; ;
  3278  0ED7  0020               	movlb	0	; select bank0
  3279  0ED8  0820               	movf	__private_parallel_lcd_WriteByte@r,w
  3280  0ED9  3901               	andlw	1
  3281  0EDA  00A1               	movwf	??__private_parallel_lcd_WriteByte
  3282  0EDB  0CA1               	rrf	??__private_parallel_lcd_WriteByte,f
  3283  0EDC  0CA1               	rrf	??__private_parallel_lcd_WriteByte,f
  3284  0EDD  0022               	movlb	2	; select bank2
  3285  0EDE  080D               	movf	13,w	;volatile
  3286  0EDF  0020               	movlb	0	; select bank0
  3287  0EE0  0621               	xorwf	??__private_parallel_lcd_WriteByte,w
  3288  0EE1  397F               	andlw	-129
  3289  0EE2  0621               	xorwf	??__private_parallel_lcd_WriteByte,w
  3290  0EE3  0022               	movlb	2	; select bank2
  3291  0EE4  008D               	movwf	13	;volatile
  3292                           
  3293                           ;parallel_LCD.h: 134: LATBbits.LATB5=1;__nop();LATBbits.LATB5=0; ;
  3294  0EE5  168D               	bsf	13,5	;volatile
  3295  0EE6  0000               	nop
  3296  0EE7  0022               	movlb	2	; select bank2
  3297  0EE8  128D               	bcf	13,5	;volatile
  3298  0EE9  0008               	return
  3299  0EEA                     __end_of__private_parallel_lcd_WriteByte:	
  3300                           
  3301                           	psect	text10
  3302  0F68                     __ptext10:	
  3303 ;; *************** function __ds1307_SetClock *****************
  3304 ;; Defined at:
  3305 ;;		line 123 in file "src/../../_Common/ds1307.h"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  date            1    wreg     PTR struct .
  3308 ;;		 -> dateCurrent(7), 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  date            1    1[BANK0 ] PTR struct .
  3311 ;;		 -> dateCurrent(7), 
  3312 ;;  i               1    2[BANK0 ] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      unsigned char 
  3315 ;; Registers used:
  3316 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3322 ;;      Params:         0       0       0       0
  3323 ;;      Locals:         0       2       0       0
  3324 ;;      Temps:          0       1       0       0
  3325 ;;      Totals:         0       3       0       0
  3326 ;;Total ram usage:        3 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    2
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_main
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           
  3337                           ;psect for function __ds1307_SetClock
  3338  0F68                     __ds1307_SetClock:	
  3339                           
  3340                           ;incstack = 0
  3341                           ; Regs used in __ds1307_SetClock: [wreg+fsr1l+fsr1h+status,2+status,0]
  3342                           ;__ds1307_SetClock@date stored from wreg
  3343  0F68  0020               	movlb	0	; select bank0
  3344  0F69  00A1               	movwf	__ds1307_SetClock@date
  3345                           
  3346                           ;ds1307.h: 126: SSP1CON2bits.SEN = 1 ;
  3347  0F6A  0024               	movlb	4	; select bank4
  3348  0F6B  1416               	bsf	22,0	;volatile
  3349  0F6C                     l200:	
  3350                           ;ds1307.h: 127: while ( SSP1CON2bits.SEN ) ;
  3351                           
  3352  0F6C  1816               	btfsc	22,0	;volatile
  3353  0F6D  2F6C               	goto	l200
  3354                           
  3355                           ;ds1307.h: 128: SSP1IF = 0 ;
  3356  0F6E  0020               	movlb	0	; select bank0
  3357  0F6F  1191               	bcf	17,3	;volatile
  3358                           
  3359                           ;ds1307.h: 131: SSP1BUF = 0xD0 ;
  3360  0F70  30D0               	movlw	208
  3361  0F71  0024               	movlb	4	; select bank4
  3362  0F72  0091               	movwf	17	;volatile
  3363  0F73                     l203:	
  3364                           ;ds1307.h: 132: while ( !SSP1IF ) ;
  3365                           
  3366  0F73  0020               	movlb	0	; select bank0
  3367  0F74  1D91               	btfss	17,3	;volatile
  3368  0F75  2F73               	goto	l203
  3369                           
  3370                           ;ds1307.h: 133: SSP1IF = 0 ;
  3371  0F76  1191               	bcf	17,3	;volatile
  3372                           
  3373                           ;ds1307.h: 134: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  3374  0F77  0024               	movlb	4	; select bank4
  3375  0F78  1B16               	btfsc	22,6	;volatile
  3376  0F79  0008               	return
  3377                           
  3378                           ;ds1307.h: 137: SSP1BUF = 0x00 ;
  3379                           
  3380                           ;	Return value of __ds1307_SetClock is never used
  3381  0F7A  0191               	clrf	17	;volatile
  3382  0F7B                     l208:	
  3383                           ;ds1307.h: 138: while ( !SSP1IF ) ;
  3384                           
  3385  0F7B  0020               	movlb	0	; select bank0
  3386  0F7C  1D91               	btfss	17,3	;volatile
  3387  0F7D  2F7B               	goto	l208
  3388                           
  3389                           ;ds1307.h: 139: SSP1IF = 0 ;
  3390  0F7E  1191               	bcf	17,3	;volatile
  3391                           
  3392                           ;ds1307.h: 140: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  3393  0F7F  0024               	movlb	4	; select bank4
  3394  0F80  1B16               	btfsc	22,6	;volatile
  3395  0F81  0008               	return
  3396                           
  3397                           ;ds1307.h: 142: for ( uint08_t i = 0 ; i < sizeof ( StDateTime ) ; i++ ) {
  3398                           
  3399                           ;	Return value of __ds1307_SetClock is never used
  3400  0F82  0020               	movlb	0	; select bank0
  3401  0F83  01A2               	clrf	__ds1307_SetClock@i
  3402  0F84  3007               	movlw	7
  3403  0F85  0222               	subwf	__ds1307_SetClock@i,w
  3404  0F86  1803               	btfsc	3,0
  3405  0F87  2FA1               	goto	l213
  3406  0F88                     l1799:	
  3407                           
  3408                           ;ds1307.h: 144: SSP1BUF = date->array[i] ;
  3409  0F88  0822               	movf	__ds1307_SetClock@i,w
  3410  0F89  0721               	addwf	__ds1307_SetClock@date,w
  3411  0F8A  00A0               	movwf	??__ds1307_SetClock
  3412  0F8B  0820               	movf	??__ds1307_SetClock,w
  3413  0F8C  0086               	movwf	6
  3414  0F8D  0187               	clrf	7
  3415  0F8E  0801               	movf	1,w
  3416  0F8F  0024               	movlb	4	; select bank4
  3417  0F90  0091               	movwf	17	;volatile
  3418  0F91                     l214:	
  3419                           ;ds1307.h: 145: while ( !SSP1IF ) ;
  3420                           
  3421  0F91  0020               	movlb	0	; select bank0
  3422  0F92  1D91               	btfss	17,3	;volatile
  3423  0F93  2F91               	goto	l214
  3424                           
  3425                           ;ds1307.h: 146: SSP1IF = 0 ;
  3426  0F94  1191               	bcf	17,3	;volatile
  3427                           
  3428                           ;ds1307.h: 147: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  3429  0F95  0024               	movlb	4	; select bank4
  3430  0F96  1B16               	btfsc	22,6	;volatile
  3431  0F97  0008               	return
  3432                           
  3433                           ;	Return value of __ds1307_SetClock is never used
  3434  0F98  3001               	movlw	1
  3435  0F99  0020               	movlb	0	; select bank0
  3436  0F9A  00A0               	movwf	??__ds1307_SetClock
  3437  0F9B  0820               	movf	??__ds1307_SetClock,w
  3438  0F9C  07A2               	addwf	__ds1307_SetClock@i,f
  3439  0F9D  3007               	movlw	7
  3440  0F9E  0222               	subwf	__ds1307_SetClock@i,w
  3441  0F9F  1C03               	skipc
  3442  0FA0  2F88               	goto	l1799
  3443  0FA1                     l213:	
  3444                           
  3445                           ;ds1307.h: 148: }
  3446                           ;ds1307.h: 151: SSP1CON2bits.PEN = 1 ;
  3447  0FA1  0024               	movlb	4	; select bank4
  3448  0FA2  1516               	bsf	22,2	;volatile
  3449  0FA3                     l218:	
  3450                           ;ds1307.h: 152: while ( SSP1CON2bits.PEN ) ;
  3451                           
  3452  0FA3  1D16               	btfss	22,2	;volatile
  3453                           
  3454                           ;ds1307.h: 154: return 0 ;
  3455                           ;	Return value of __ds1307_SetClock is never used
  3456  0FA4  0008               	return
  3457  0FA5  2FA3               	goto	l218
  3458  0FA6                     __end_of__ds1307_SetClock:	
  3459                           
  3460                           	psect	text11
  3461  0689                     __ptext11:	
  3462 ;; *************** function __ds1307_GetData *****************
  3463 ;; Defined at:
  3464 ;;		line 74 in file "src/../../_Common/ds1307.h"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  date            1    wreg     PTR struct .
  3467 ;;		 -> dateCurrent(7), dateTimer(7), 
  3468 ;;  ramAddress      1    0[BANK0 ] unsigned char 
  3469 ;;  length          1    1[BANK0 ] unsigned char 
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;  date            1    4[BANK0 ] PTR struct .
  3472 ;;		 -> dateCurrent(7), dateTimer(7), 
  3473 ;;  dataCount       1    5[BANK0 ] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      unsigned char 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3483 ;;      Params:         0       2       0       0
  3484 ;;      Locals:         0       2       0       0
  3485 ;;      Temps:          0       2       0       0
  3486 ;;      Totals:         0       6       0       0
  3487 ;;Total ram usage:        6 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    2
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_main
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function __ds1307_GetData
  3499  0689                     __ds1307_GetData:	
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in __ds1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3503                           ;__ds1307_GetData@date stored from wreg
  3504  0689  0020               	movlb	0	; select bank0
  3505  068A  00A4               	movwf	__ds1307_GetData@date
  3506                           
  3507                           ;ds1307.h: 77: SSP1CON2bits.SEN = 1 ;
  3508  068B  0024               	movlb	4	; select bank4
  3509  068C  1416               	bsf	22,0	;volatile
  3510  068D                     l167:	
  3511                           ;ds1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  3512                           
  3513  068D  1816               	btfsc	22,0	;volatile
  3514  068E  2E8D               	goto	l167
  3515                           
  3516                           ;ds1307.h: 79: SSP1IF = 0 ;
  3517  068F  0020               	movlb	0	; select bank0
  3518  0690  1191               	bcf	17,3	;volatile
  3519                           
  3520                           ;ds1307.h: 82: SSP1BUF = 0xD0 ;
  3521  0691  30D0               	movlw	208
  3522  0692  0024               	movlb	4	; select bank4
  3523  0693  0091               	movwf	17	;volatile
  3524  0694                     l170:	
  3525                           ;ds1307.h: 83: while ( !SSP1IF ) ;
  3526                           
  3527  0694  0020               	movlb	0	; select bank0
  3528  0695  1D91               	btfss	17,3	;volatile
  3529  0696  2E94               	goto	l170
  3530                           
  3531                           ;ds1307.h: 84: SSP1IF = 0 ;
  3532  0697  1191               	bcf	17,3	;volatile
  3533                           
  3534                           ;ds1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  3535  0698  0024               	movlb	4	; select bank4
  3536  0699  1F16               	btfss	22,6	;volatile
  3537  069A  2E9D               	goto	l1751
  3538  069B  3001               	movlw	1
  3539  069C  0008               	return
  3540  069D                     l1751:	
  3541                           
  3542                           ;ds1307.h: 88: SSP1BUF = ramAddress ;
  3543  069D  0020               	movlb	0	; select bank0
  3544  069E  0820               	movf	__ds1307_GetData@ramAddress,w
  3545  069F  0024               	movlb	4	; select bank4
  3546  06A0  0091               	movwf	17	;volatile
  3547  06A1                     l175:	
  3548                           ;ds1307.h: 89: while ( !SSP1IF ) ;
  3549                           
  3550  06A1  0020               	movlb	0	; select bank0
  3551  06A2  1D91               	btfss	17,3	;volatile
  3552  06A3  2EA1               	goto	l175
  3553                           
  3554                           ;ds1307.h: 90: SSP1IF = 0 ;
  3555  06A4  1191               	bcf	17,3	;volatile
  3556                           
  3557                           ;ds1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  3558  06A5  0024               	movlb	4	; select bank4
  3559  06A6  1F16               	btfss	22,6	;volatile
  3560  06A7  2EAA               	goto	l178
  3561  06A8  3002               	movlw	2
  3562  06A9  0008               	return
  3563  06AA                     l178:	
  3564                           
  3565                           ;ds1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  3566  06AA  1496               	bsf	22,1	;volatile
  3567  06AB                     l179:	
  3568                           ;ds1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  3569                           
  3570  06AB  1896               	btfsc	22,1	;volatile
  3571  06AC  2EAB               	goto	l179
  3572                           
  3573                           ;ds1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  3574  06AD  30D1               	movlw	209
  3575  06AE  0091               	movwf	17	;volatile
  3576  06AF                     l182:	
  3577                           ;ds1307.h: 98: while ( !SSP1IF ) ;
  3578                           
  3579  06AF  0020               	movlb	0	; select bank0
  3580  06B0  1D91               	btfss	17,3	;volatile
  3581  06B1  2EAF               	goto	l182
  3582                           
  3583                           ;ds1307.h: 99: SSP1IF = 0 ;
  3584  06B2  1191               	bcf	17,3	;volatile
  3585                           
  3586                           ;ds1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  3587  06B3  0024               	movlb	4	; select bank4
  3588  06B4  1F16               	btfss	22,6	;volatile
  3589  06B5  2EB8               	goto	l1763
  3590  06B6  3003               	movlw	3
  3591  06B7  0008               	return
  3592  06B8                     l1763:	
  3593                           
  3594                           ;ds1307.h: 103: uint08_t dataCount = 0 ;
  3595  06B8  0020               	movlb	0	; select bank0
  3596  06B9  01A5               	clrf	__ds1307_GetData@dataCount
  3597  06BA                     l1777:	
  3598                           ;ds1307.h: 104: while ( dataCount < length ) {
  3599                           
  3600  06BA  0020               	movlb	0	; select bank0
  3601  06BB  0821               	movf	__ds1307_GetData@length,w
  3602  06BC  0225               	subwf	__ds1307_GetData@dataCount,w
  3603  06BD  1803               	btfsc	3,0
  3604  06BE  2EE4               	goto	l194
  3605                           
  3606                           ;ds1307.h: 105: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  3607  06BF  30A6               	movlw	166
  3608  06C0  00A2               	movwf	??__ds1307_GetData
  3609  06C1                     u2437:	
  3610  06C1  0BA2               	decfsz	??__ds1307_GetData,f
  3611  06C2  2EC1               	goto	u2437
  3612  06C3  0000               	nop
  3613                           
  3614                           ;ds1307.h: 106: SSP1CON2bits.RCEN = 1 ;
  3615  06C4  0024               	movlb	4	; select bank4
  3616  06C5  1596               	bsf	22,3	;volatile
  3617  06C6                     l188:	
  3618                           ;ds1307.h: 107: while ( SSP1CON2bits.RCEN ) ;
  3619                           
  3620  06C6  1996               	btfsc	22,3	;volatile
  3621  06C7  2EC6               	goto	l188
  3622  06C8                     l191:	
  3623                           ;ds1307.h: 108: while ( !SSPSTATbits.BF ) ;
  3624                           
  3625  06C8  1C14               	btfss	20,0	;volatile
  3626  06C9  2EC8               	goto	l191
  3627                           
  3628                           ;ds1307.h: 109: date->array[ dataCount++ ] = SSP1BUF ;
  3629  06CA  0811               	movf	17,w	;volatile
  3630  06CB  0020               	movlb	0	; select bank0
  3631  06CC  00A2               	movwf	??__ds1307_GetData
  3632  06CD  0825               	movf	__ds1307_GetData@dataCount,w
  3633  06CE  0724               	addwf	__ds1307_GetData@date,w
  3634  06CF  00A3               	movwf	??__ds1307_GetData+1
  3635  06D0  0823               	movf	??__ds1307_GetData+1,w
  3636  06D1  0086               	movwf	6
  3637  06D2  0187               	clrf	7
  3638  06D3  0822               	movf	??__ds1307_GetData,w
  3639  06D4  0081               	movwf	1
  3640  06D5  3001               	movlw	1
  3641  06D6  00A2               	movwf	??__ds1307_GetData
  3642  06D7  0822               	movf	??__ds1307_GetData,w
  3643  06D8  07A5               	addwf	__ds1307_GetData@dataCount,f
  3644                           
  3645                           ;ds1307.h: 110: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  3646  06D9  0825               	movf	__ds1307_GetData@dataCount,w
  3647  06DA  0621               	xorwf	__ds1307_GetData@length,w
  3648  06DB  1D03               	btfss	3,2
  3649  06DC  2EE0               	goto	u1580
  3650  06DD  0024               	movlb	4	; select bank4
  3651  06DE  1696               	bsf	22,5	;volatile
  3652  06DF  2EE2               	goto	l1775
  3653  06E0                     u1580:	
  3654  06E0  0024               	movlb	4	; select bank4
  3655  06E1  1296               	bcf	22,5	;volatile
  3656  06E2                     l1775:	
  3657                           
  3658                           ;ds1307.h: 111: SSP1CON2bits.ACKEN = 1 ;
  3659  06E2  1616               	bsf	22,4	;volatile
  3660  06E3  2EBA               	goto	l1777
  3661  06E4                     l194:	
  3662                           
  3663                           ;ds1307.h: 112: }
  3664                           ;ds1307.h: 115: SSP1CON2bits.PEN = 1 ;
  3665  06E4  0024               	movlb	4	; select bank4
  3666  06E5  1516               	bsf	22,2	;volatile
  3667  06E6                     l195:	
  3668                           ;ds1307.h: 116: while ( SSP1CON2bits.PEN ) ;
  3669                           
  3670  06E6  1916               	btfsc	22,2	;volatile
  3671  06E7  2EE6               	goto	l195
  3672                           
  3673                           ;ds1307.h: 118: return 0 ;
  3674  06E8  3000               	movlw	0
  3675  06E9  0008               	return
  3676  06EA                     __end_of__ds1307_GetData:	
  3677                           
  3678                           	psect	text12
  3679  0614                     __ptext12:	
  3680 ;; *************** function __date_time_ConvertByteToTime *****************
  3681 ;; Defined at:
  3682 ;;		line 108 in file "src/../../_Common/date_time.h"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  dateTime        1    wreg     PTR struct .
  3685 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3686 ;;  string          1    0[BANK0 ] PTR unsigned char 
  3687 ;;		 -> main@string(17), 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  dateTime        1    3[BANK0 ] PTR struct .
  3690 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;		None               void
  3693 ;; Registers used:
  3694 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3700 ;;      Params:         0       1       0       0
  3701 ;;      Locals:         0       1       0       0
  3702 ;;      Temps:          0       2       0       0
  3703 ;;      Totals:         0       4       0       0
  3704 ;;Total ram usage:        4 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    2
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_main
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           
  3715                           ;psect for function __date_time_ConvertByteToTime
  3716  0614                     __date_time_ConvertByteToTime:	
  3717                           
  3718                           ;incstack = 0
  3719                           ; Regs used in __date_time_ConvertByteToTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  3720                           ;__date_time_ConvertByteToTime@dateTime stored from wreg
  3721  0614  0020               	movlb	0	; select bank0
  3722  0615  00A3               	movwf	__date_time_ConvertByteToTime@dateTime
  3723                           
  3724                           ;date_time.h: 110: string[8] = 0 ;
  3725  0616  0820               	movf	__date_time_ConvertByteToTime@string,w
  3726  0617  3E08               	addlw	8
  3727  0618  0086               	movwf	6
  3728  0619  0187               	clrf	7
  3729  061A  0181               	clrf	1
  3730                           
  3731                           ;date_time.h: 112: string[5] = ':' ;
  3732  061B  303A               	movlw	58
  3733  061C  00A1               	movwf	??__date_time_ConvertByteToTime
  3734  061D  0820               	movf	__date_time_ConvertByteToTime@string,w
  3735  061E  3E05               	addlw	5
  3736  061F  0086               	movwf	6
  3737  0620  0187               	clrf	7
  3738  0621  0821               	movf	??__date_time_ConvertByteToTime,w
  3739  0622  0081               	movwf	1
  3740                           
  3741                           ;date_time.h: 113: string[2] = ':' ;
  3742  0623  303A               	movlw	58
  3743  0624  00A1               	movwf	??__date_time_ConvertByteToTime
  3744  0625  0820               	movf	__date_time_ConvertByteToTime@string,w
  3745  0626  3E02               	addlw	2
  3746  0627  0086               	movwf	6
  3747  0628  0187               	clrf	7
  3748  0629  0821               	movf	??__date_time_ConvertByteToTime,w
  3749  062A  0081               	movwf	1
  3750                           
  3751                           ;date_time.h: 116: string[7] = ( dateTime->second & 0x0F ) | '0' ;
  3752  062B  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3753  062C  0086               	movwf	6
  3754  062D  0187               	clrf	7
  3755  062E  0801               	movf	1,w
  3756  062F  390F               	andlw	15
  3757  0630  3830               	iorlw	48
  3758  0631  00A1               	movwf	??__date_time_ConvertByteToTime
  3759  0632  0820               	movf	__date_time_ConvertByteToTime@string,w
  3760  0633  3E07               	addlw	7
  3761  0634  0086               	movwf	6
  3762  0635  0187               	clrf	7
  3763  0636  0821               	movf	??__date_time_ConvertByteToTime,w
  3764  0637  0081               	movwf	1
  3765                           
  3766                           ;date_time.h: 117: string[6] = ( dateTime->second >> 4 ) | '0' ;
  3767  0638  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3768  0639  0086               	movwf	6
  3769  063A  0187               	clrf	7
  3770  063B  0801               	movf	1,w
  3771  063C  00A1               	movwf	??__date_time_ConvertByteToTime
  3772  063D  3004               	movlw	4
  3773  063E                     u1395:	
  3774  063E  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3775  063F  0B89               	decfsz	9,f
  3776  0640  2E3E               	goto	u1395
  3777  0641  0821               	movf	??__date_time_ConvertByteToTime,w
  3778  0642  3830               	iorlw	48
  3779  0643  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3780  0644  0820               	movf	__date_time_ConvertByteToTime@string,w
  3781  0645  3E06               	addlw	6
  3782  0646  0086               	movwf	6
  3783  0647  0187               	clrf	7
  3784  0648  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3785  0649  0081               	movwf	1
  3786                           
  3787                           ;date_time.h: 119: string[4] = ( dateTime->minute & 0x0F ) | '0' ;
  3788  064A  0A23               	incf	__date_time_ConvertByteToTime@dateTime,w
  3789  064B  0086               	movwf	6
  3790  064C  0187               	clrf	7
  3791  064D  0801               	movf	1,w
  3792  064E  390F               	andlw	15
  3793  064F  3830               	iorlw	48
  3794  0650  00A1               	movwf	??__date_time_ConvertByteToTime
  3795  0651  0820               	movf	__date_time_ConvertByteToTime@string,w
  3796  0652  3E04               	addlw	4
  3797  0653  0086               	movwf	6
  3798  0654  0187               	clrf	7
  3799  0655  0821               	movf	??__date_time_ConvertByteToTime,w
  3800  0656  0081               	movwf	1
  3801                           
  3802                           ;date_time.h: 120: string[3] = ( dateTime->minute >> 4 ) | '0' ;
  3803  0657  0A23               	incf	__date_time_ConvertByteToTime@dateTime,w
  3804  0658  0086               	movwf	6
  3805  0659  0187               	clrf	7
  3806  065A  0801               	movf	1,w
  3807  065B  00A1               	movwf	??__date_time_ConvertByteToTime
  3808  065C  3004               	movlw	4
  3809  065D                     u1405:	
  3810  065D  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3811  065E  0B89               	decfsz	9,f
  3812  065F  2E5D               	goto	u1405
  3813  0660  0821               	movf	??__date_time_ConvertByteToTime,w
  3814  0661  3830               	iorlw	48
  3815  0662  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3816  0663  0820               	movf	__date_time_ConvertByteToTime@string,w
  3817  0664  3E03               	addlw	3
  3818  0665  0086               	movwf	6
  3819  0666  0187               	clrf	7
  3820  0667  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3821  0668  0081               	movwf	1
  3822                           
  3823                           ;date_time.h: 122: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  3824  0669  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3825  066A  3E02               	addlw	2
  3826  066B  0086               	movwf	6
  3827  066C  0187               	clrf	7
  3828  066D  0801               	movf	1,w
  3829  066E  390F               	andlw	15
  3830  066F  3830               	iorlw	48
  3831  0670  00A1               	movwf	??__date_time_ConvertByteToTime
  3832  0671  0A20               	incf	__date_time_ConvertByteToTime@string,w
  3833  0672  0086               	movwf	6
  3834  0673  0187               	clrf	7
  3835  0674  0821               	movf	??__date_time_ConvertByteToTime,w
  3836  0675  0081               	movwf	1
  3837                           
  3838                           ;date_time.h: 123: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  3839  0676  0823               	movf	__date_time_ConvertByteToTime@dateTime,w
  3840  0677  3E02               	addlw	2
  3841  0678  0086               	movwf	6
  3842  0679  0187               	clrf	7
  3843  067A  0801               	movf	1,w
  3844  067B  00A1               	movwf	??__date_time_ConvertByteToTime
  3845  067C  3004               	movlw	4
  3846  067D                     u1415:	
  3847  067D  36A1               	lsrf	??__date_time_ConvertByteToTime,f
  3848  067E  0B89               	decfsz	9,f
  3849  067F  2E7D               	goto	u1415
  3850  0680  0821               	movf	??__date_time_ConvertByteToTime,w
  3851  0681  3830               	iorlw	48
  3852  0682  00A2               	movwf	??__date_time_ConvertByteToTime+1
  3853  0683  0820               	movf	__date_time_ConvertByteToTime@string,w
  3854  0684  0086               	movwf	6
  3855  0685  0187               	clrf	7
  3856  0686  0822               	movf	??__date_time_ConvertByteToTime+1,w
  3857  0687  0081               	movwf	1
  3858  0688  0008               	return
  3859  0689                     __end_of__date_time_ConvertByteToTime:	
  3860                           
  3861                           	psect	text13
  3862  0404                     __ptext13:	
  3863 ;; *************** function __date_time_ConvertByteToDiscrete *****************
  3864 ;; Defined at:
  3865 ;;		line 128 in file "src/../../_Common/date_time.h"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  dateTime        1    wreg     PTR struct .
  3868 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3869 ;;  string          1    0[BANK0 ] PTR unsigned char 
  3870 ;;		 -> main@string_769(4), 
  3871 ;;  select          1    1[BANK0 ] enum E4110
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  dateTime        1    5[BANK0 ] PTR struct .
  3874 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;		None               void
  3877 ;; Registers used:
  3878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3884 ;;      Params:         0       2       0       0
  3885 ;;      Locals:         0       1       0       0
  3886 ;;      Temps:          0       3       0       0
  3887 ;;      Totals:         0       6       0       0
  3888 ;;Total ram usage:        6 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    2
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		_main
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function __date_time_ConvertByteToDiscrete
  3900  0404                     __date_time_ConvertByteToDiscrete:	
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in __date_time_ConvertByteToDiscrete: [wreg-fsr1h+status,2+status,0+pclath]
  3904                           ;__date_time_ConvertByteToDiscrete@dateTime stored from wreg
  3905  0404  0020               	movlb	0	; select bank0
  3906  0405  00A5               	movwf	__date_time_ConvertByteToDiscrete@dateTime
  3907                           
  3908                           ;date_time.h: 130: string[2] = 0 ;
  3909  0406  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3910  0407  3E02               	addlw	2
  3911  0408  0086               	movwf	6
  3912  0409  0187               	clrf	7
  3913  040A  0181               	clrf	1
  3914                           
  3915                           ;date_time.h: 132: switch ( select ) {
  3916  040B  2D1A               	goto	l1737
  3917  040C                     l1715:	
  3918                           ;date_time.h: 133: case DATE_ITEM_YEAR:
  3919                           
  3920                           
  3921                           ;date_time.h: 134: string[1] = ( dateTime->year & 0x0F ) | '0' ;
  3922  040C  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3923  040D  3E06               	addlw	6
  3924  040E  0086               	movwf	6
  3925  040F  0187               	clrf	7
  3926  0410  0801               	movf	1,w
  3927  0411  390F               	andlw	15
  3928  0412  3830               	iorlw	48
  3929  0413  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3930  0414  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3931  0415  0086               	movwf	6
  3932  0416  0187               	clrf	7
  3933  0417  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3934  0418  0081               	movwf	1
  3935                           
  3936                           ;date_time.h: 135: string[0] = ( dateTime->year >> 4 ) | '0' ;
  3937  0419  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3938  041A  3E06               	addlw	6
  3939  041B  0086               	movwf	6
  3940  041C  0187               	clrf	7
  3941  041D  0801               	movf	1,w
  3942  041E  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3943  041F  3004               	movlw	4
  3944  0420                     u1425:	
  3945  0420  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3946  0421  0B89               	decfsz	9,f
  3947  0422  2C20               	goto	u1425
  3948  0423  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3949  0424  3830               	iorlw	48
  3950  0425  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3951  0426  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3952  0427  0086               	movwf	6
  3953  0428  0187               	clrf	7
  3954  0429  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3955  042A  0081               	movwf	1
  3956                           
  3957                           ;date_time.h: 136: break ;
  3958  042B  0008               	return
  3959  042C                     l1717:	
  3960                           ;date_time.h: 137: case DATE_ITEM_MONTH:
  3961                           
  3962                           
  3963                           ;date_time.h: 138: string[1] = ( dateTime->month & 0x0F ) | '0' ;
  3964  042C  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3965  042D  3E05               	addlw	5
  3966  042E  0086               	movwf	6
  3967  042F  0187               	clrf	7
  3968  0430  0801               	movf	1,w
  3969  0431  390F               	andlw	15
  3970  0432  3830               	iorlw	48
  3971  0433  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3972  0434  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  3973  0435  0086               	movwf	6
  3974  0436  0187               	clrf	7
  3975  0437  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3976  0438  0081               	movwf	1
  3977                           
  3978                           ;date_time.h: 139: string[0] = ( dateTime->month >> 4 ) | '0' ;
  3979  0439  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3980  043A  3E05               	addlw	5
  3981  043B  0086               	movwf	6
  3982  043C  0187               	clrf	7
  3983  043D  0801               	movf	1,w
  3984  043E  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  3985  043F  3004               	movlw	4
  3986  0440                     u1435:	
  3987  0440  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3988  0441  0B89               	decfsz	9,f
  3989  0442  2C40               	goto	u1435
  3990  0443  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  3991  0444  3830               	iorlw	48
  3992  0445  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  3993  0446  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  3994  0447  0086               	movwf	6
  3995  0448  0187               	clrf	7
  3996  0449  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3997  044A  0081               	movwf	1
  3998                           
  3999                           ;date_time.h: 140: break ;
  4000  044B  0008               	return
  4001  044C                     l1719:	
  4002                           ;date_time.h: 141: case DATE_ITEM_DATE:
  4003                           
  4004                           
  4005                           ;date_time.h: 142: string[1] = ( dateTime->day & 0x0F ) | '0' ;
  4006  044C  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4007  044D  3E04               	addlw	4
  4008  044E  0086               	movwf	6
  4009  044F  0187               	clrf	7
  4010  0450  0801               	movf	1,w
  4011  0451  390F               	andlw	15
  4012  0452  3830               	iorlw	48
  4013  0453  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4014  0454  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4015  0455  0086               	movwf	6
  4016  0456  0187               	clrf	7
  4017  0457  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4018  0458  0081               	movwf	1
  4019                           
  4020                           ;date_time.h: 143: string[0] = ( dateTime->day >> 4 ) | '0' ;
  4021  0459  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4022  045A  3E04               	addlw	4
  4023  045B  0086               	movwf	6
  4024  045C  0187               	clrf	7
  4025  045D  0801               	movf	1,w
  4026  045E  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4027  045F  3004               	movlw	4
  4028  0460                     u1445:	
  4029  0460  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4030  0461  0B89               	decfsz	9,f
  4031  0462  2C60               	goto	u1445
  4032  0463  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4033  0464  3830               	iorlw	48
  4034  0465  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4035  0466  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4036  0467  0086               	movwf	6
  4037  0468  0187               	clrf	7
  4038  0469  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4039  046A  0081               	movwf	1
  4040                           
  4041                           ;date_time.h: 144: break ;
  4042  046B  0008               	return
  4043  046C                     l1721:	
  4044                           ;date_time.h: 145: case DATE_ITEM_DAY_OF_WEEK:
  4045                           
  4046                           
  4047                           ;date_time.h: 146: string[0] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  4048  046C  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4049  046D  3E03               	addlw	3
  4050  046E  0086               	movwf	6
  4051  046F  0187               	clrf	7
  4052  0470  3501               	lslf	1,w
  4053  0471  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4054  0472  0086               	movwf	6
  4055  0473  0187               	clrf	7
  4056  0474  3F40               	moviw [0]fsr1
  4057  0475  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4058  0476  3F41               	moviw [1]fsr1
  4059  0477  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4060  0478  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4061  0479  0084               	movwf	4
  4062  047A  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4063  047B  0085               	movwf	5
  4064  047C  0800               	movf	0,w	;code access
  4065  047D  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  4066  047E  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4067  047F  0086               	movwf	6
  4068  0480  0187               	clrf	7
  4069  0481  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  4070  0482  0081               	movwf	1
  4071                           
  4072                           ;date_time.h: 147: string[1] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  4073  0483  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4074  0484  3E03               	addlw	3
  4075  0485  0086               	movwf	6
  4076  0486  0187               	clrf	7
  4077  0487  3501               	lslf	1,w
  4078  0488  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4079  0489  0086               	movwf	6
  4080  048A  0187               	clrf	7
  4081  048B  3F40               	moviw [0]fsr1
  4082  048C  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4083  048D  3F41               	moviw [1]fsr1
  4084  048E  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4085  048F  3001               	movlw	1
  4086  0490  0722               	addwf	??__date_time_ConvertByteToDiscrete,w
  4087  0491  0084               	movwf	4
  4088  0492  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4089  0493  1803               	skipnc
  4090  0494  0A23               	incf	??__date_time_ConvertByteToDiscrete+1,w
  4091  0495  0085               	movwf	5
  4092  0496  0800               	movf	0,w	;code access
  4093  0497  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  4094  0498  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4095  0499  0086               	movwf	6
  4096  049A  0187               	clrf	7
  4097  049B  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  4098  049C  0081               	movwf	1
  4099                           
  4100                           ;date_time.h: 148: string[2] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  4101  049D  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4102  049E  3E03               	addlw	3
  4103  049F  0086               	movwf	6
  4104  04A0  0187               	clrf	7
  4105  04A1  3501               	lslf	1,w
  4106  04A2  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4107  04A3  0086               	movwf	6
  4108  04A4  0187               	clrf	7
  4109  04A5  3F40               	moviw [0]fsr1
  4110  04A6  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4111  04A7  3F41               	moviw [1]fsr1
  4112  04A8  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4113  04A9  3002               	movlw	2
  4114  04AA  0722               	addwf	??__date_time_ConvertByteToDiscrete,w
  4115  04AB  0084               	movwf	4
  4116  04AC  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4117  04AD  1803               	skipnc
  4118  04AE  0A23               	incf	??__date_time_ConvertByteToDiscrete+1,w
  4119  04AF  0085               	movwf	5
  4120  04B0  0800               	movf	0,w	;code access
  4121  04B1  00A4               	movwf	??__date_time_ConvertByteToDiscrete+2
  4122  04B2  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4123  04B3  3E02               	addlw	2
  4124  04B4  0086               	movwf	6
  4125  04B5  0187               	clrf	7
  4126  04B6  0824               	movf	??__date_time_ConvertByteToDiscrete+2,w
  4127  04B7  0081               	movwf	1
  4128                           
  4129                           ;date_time.h: 149: string[3] = 0 ;
  4130  04B8  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4131  04B9  3E03               	addlw	3
  4132  04BA  0086               	movwf	6
  4133  04BB  0187               	clrf	7
  4134  04BC  0181               	clrf	1
  4135                           
  4136                           ;date_time.h: 150: break ;
  4137  04BD  0008               	return
  4138  04BE                     l1725:	
  4139                           ;date_time.h: 151: case DATE_ITEM_HOUR:
  4140                           
  4141                           
  4142                           ;date_time.h: 152: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  4143  04BE  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4144  04BF  3E02               	addlw	2
  4145  04C0  0086               	movwf	6
  4146  04C1  0187               	clrf	7
  4147  04C2  0801               	movf	1,w
  4148  04C3  390F               	andlw	15
  4149  04C4  3830               	iorlw	48
  4150  04C5  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4151  04C6  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4152  04C7  0086               	movwf	6
  4153  04C8  0187               	clrf	7
  4154  04C9  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4155  04CA  0081               	movwf	1
  4156                           
  4157                           ;date_time.h: 153: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  4158  04CB  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4159  04CC  3E02               	addlw	2
  4160  04CD  0086               	movwf	6
  4161  04CE  0187               	clrf	7
  4162  04CF  0801               	movf	1,w
  4163  04D0  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4164  04D1  3004               	movlw	4
  4165  04D2                     u1455:	
  4166  04D2  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4167  04D3  0B89               	decfsz	9,f
  4168  04D4  2CD2               	goto	u1455
  4169  04D5  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4170  04D6  3830               	iorlw	48
  4171  04D7  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4172  04D8  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4173  04D9  0086               	movwf	6
  4174  04DA  0187               	clrf	7
  4175  04DB  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4176  04DC  0081               	movwf	1
  4177                           
  4178                           ;date_time.h: 154: break ;
  4179  04DD  0008               	return
  4180  04DE                     l1727:	
  4181                           ;date_time.h: 155: case DATE_ITEM_MINUTE:
  4182                           
  4183                           
  4184                           ;date_time.h: 156: string[1] = ( dateTime->minute & 0x0F ) | '0' ;
  4185  04DE  0A25               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  4186  04DF  0086               	movwf	6
  4187  04E0  0187               	clrf	7
  4188  04E1  0801               	movf	1,w
  4189  04E2  390F               	andlw	15
  4190  04E3  3830               	iorlw	48
  4191  04E4  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4192  04E5  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4193  04E6  0086               	movwf	6
  4194  04E7  0187               	clrf	7
  4195  04E8  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4196  04E9  0081               	movwf	1
  4197                           
  4198                           ;date_time.h: 157: string[0] = ( dateTime->minute >> 4 ) | '0' ;
  4199  04EA  0A25               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  4200  04EB  0086               	movwf	6
  4201  04EC  0187               	clrf	7
  4202  04ED  0801               	movf	1,w
  4203  04EE  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4204  04EF  3004               	movlw	4
  4205  04F0                     u1465:	
  4206  04F0  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4207  04F1  0B89               	decfsz	9,f
  4208  04F2  2CF0               	goto	u1465
  4209  04F3  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4210  04F4  3830               	iorlw	48
  4211  04F5  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4212  04F6  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4213  04F7  0086               	movwf	6
  4214  04F8  0187               	clrf	7
  4215  04F9  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4216  04FA  0081               	movwf	1
  4217                           
  4218                           ;date_time.h: 158: break ;
  4219  04FB  0008               	return
  4220  04FC                     l1731:	
  4221                           ;date_time.h: 159: case DATE_ITEM_SECOND:
  4222                           
  4223                           
  4224                           ;date_time.h: 160: string[1] = ( dateTime->second & 0x0F ) | '0' ;
  4225  04FC  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4226  04FD  0086               	movwf	6
  4227  04FE  0187               	clrf	7
  4228  04FF  0801               	movf	1,w
  4229  0500  390F               	andlw	15
  4230  0501  3830               	iorlw	48
  4231  0502  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4232  0503  0A20               	incf	__date_time_ConvertByteToDiscrete@string,w
  4233  0504  0086               	movwf	6
  4234  0505  0187               	clrf	7
  4235  0506  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4236  0507  0081               	movwf	1
  4237                           
  4238                           ;date_time.h: 161: string[0] = ( dateTime->second >> 4 ) | '0' ;
  4239  0508  0825               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  4240  0509  0086               	movwf	6
  4241  050A  0187               	clrf	7
  4242  050B  0801               	movf	1,w
  4243  050C  00A2               	movwf	??__date_time_ConvertByteToDiscrete
  4244  050D  3004               	movlw	4
  4245  050E                     u1475:	
  4246  050E  36A2               	lsrf	??__date_time_ConvertByteToDiscrete,f
  4247  050F  0B89               	decfsz	9,f
  4248  0510  2D0E               	goto	u1475
  4249  0511  0822               	movf	??__date_time_ConvertByteToDiscrete,w
  4250  0512  3830               	iorlw	48
  4251  0513  00A3               	movwf	??__date_time_ConvertByteToDiscrete+1
  4252  0514  0820               	movf	__date_time_ConvertByteToDiscrete@string,w
  4253  0515  0086               	movwf	6
  4254  0516  0187               	clrf	7
  4255  0517  0823               	movf	??__date_time_ConvertByteToDiscrete+1,w
  4256  0518  0081               	movwf	1
  4257                           
  4258                           ;date_time.h: 163: }
  4259                           
  4260                           ;date_time.h: 162: break ;
  4261  0519  0008               	return
  4262  051A                     l1737:	
  4263  051A  0821               	movf	__date_time_ConvertByteToDiscrete@select,w
  4264                           
  4265                           ; Switch size 1, requested type "space"
  4266                           ; Number of cases is 7, Range of values is 0 to 6
  4267                           ; switch strategies available:
  4268                           ; Name         Instructions Cycles
  4269                           ; direct_byte           20     6 (fixed)
  4270                           ; simple_byte           22    12 (average)
  4271                           ; jumptable            260     6 (fixed)
  4272                           ;	Chosen strategy is direct_byte
  4273  051B  0084               	movwf	4
  4274  051C  3007               	movlw	7
  4275  051D  0204               	subwf	4,w
  4276  051E  1803               	skipnc
  4277  051F  0008               	return
  4278  0520  3188               	movlp	high S2263
  4279  0521  3504               	lslf	4,w
  4280  0522  3E10               	addlw	low S2263
  4281  0523  0082               	movwf	2
  4282  0524  0008               	return
  4283  0525                     __end_of__date_time_ConvertByteToDiscrete:	
  4284                           
  4285                           	psect	swtext2
  4286  0810                     __pswtext2:	
  4287  0810                     S2263:	
  4288  0810  3184  2C0C         	ljmp	l1715
  4289  0812  3184  2C2C         	ljmp	l1717
  4290  0814  3184  2C4C         	ljmp	l1719
  4291  0816  3184  2C6C         	ljmp	l1721
  4292  0818  3184  2CBE         	ljmp	l1725
  4293  081A  3184  2CDE         	ljmp	l1727
  4294  081C  3184  2CFC         	ljmp	l1731
  4295                           
  4296                           	psect	text14
  4297  0525                     __ptext14:	
  4298 ;; *************** function __date_time_ConvertByteToDate *****************
  4299 ;; Defined at:
  4300 ;;		line 80 in file "src/../../_Common/date_time.h"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  dateTime        1    wreg     PTR struct .
  4303 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  4304 ;;  stinrg          1    0[BANK0 ] PTR unsigned char 
  4305 ;;		 -> main@string(17), 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  dateTime        1    4[BANK0 ] PTR struct .
  4308 ;;		 -> NULL(0), datePtr(1), dateCurrent(7), dateTimer(7), 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;		None               void
  4311 ;; Registers used:
  4312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4318 ;;      Params:         0       1       0       0
  4319 ;;      Locals:         0       1       0       0
  4320 ;;      Temps:          0       3       0       0
  4321 ;;      Totals:         0       5       0       0
  4322 ;;Total ram usage:        5 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    2
  4325 ;; This function calls:
  4326 ;;		Nothing
  4327 ;; This function is called by:
  4328 ;;		_main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function __date_time_ConvertByteToDate
  4334  0525                     __date_time_ConvertByteToDate:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in __date_time_ConvertByteToDate: [wreg-fsr1h+status,2+status,0+pclath]
  4338                           ;__date_time_ConvertByteToDate@dateTime stored from wreg
  4339  0525  0020               	movlb	0	; select bank0
  4340  0526  00A4               	movwf	__date_time_ConvertByteToDate@dateTime
  4341                           
  4342                           ;date_time.h: 82: stinrg[16] = 0 ;
  4343  0527  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4344  0528  3E10               	addlw	16
  4345  0529  0086               	movwf	6
  4346  052A  0187               	clrf	7
  4347  052B  0181               	clrf	1
  4348                           
  4349                           ;date_time.h: 83: stinrg[15] = ']' ;
  4350  052C  305D               	movlw	93
  4351  052D  00A1               	movwf	??__date_time_ConvertByteToDate
  4352  052E  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4353  052F  3E0F               	addlw	15
  4354  0530  0086               	movwf	6
  4355  0531  0187               	clrf	7
  4356  0532  0821               	movf	??__date_time_ConvertByteToDate,w
  4357  0533  0081               	movwf	1
  4358                           
  4359                           ;date_time.h: 84: stinrg[11] = '[' ;
  4360  0534  305B               	movlw	91
  4361  0535  00A1               	movwf	??__date_time_ConvertByteToDate
  4362  0536  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4363  0537  3E0B               	addlw	11
  4364  0538  0086               	movwf	6
  4365  0539  0187               	clrf	7
  4366  053A  0821               	movf	??__date_time_ConvertByteToDate,w
  4367  053B  0081               	movwf	1
  4368                           
  4369                           ;date_time.h: 85: stinrg[10] = ' ' ;
  4370  053C  3020               	movlw	32
  4371  053D  00A1               	movwf	??__date_time_ConvertByteToDate
  4372  053E  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4373  053F  3E0A               	addlw	10
  4374  0540  0086               	movwf	6
  4375  0541  0187               	clrf	7
  4376  0542  0821               	movf	??__date_time_ConvertByteToDate,w
  4377  0543  0081               	movwf	1
  4378                           
  4379                           ;date_time.h: 86: stinrg[7] = '-' ;
  4380  0544  302D               	movlw	45
  4381  0545  00A1               	movwf	??__date_time_ConvertByteToDate
  4382  0546  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4383  0547  3E07               	addlw	7
  4384  0548  0086               	movwf	6
  4385  0549  0187               	clrf	7
  4386  054A  0821               	movf	??__date_time_ConvertByteToDate,w
  4387  054B  0081               	movwf	1
  4388                           
  4389                           ;date_time.h: 87: stinrg[4] = '-' ;
  4390  054C  302D               	movlw	45
  4391  054D  00A1               	movwf	??__date_time_ConvertByteToDate
  4392  054E  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4393  054F  3E04               	addlw	4
  4394  0550  0086               	movwf	6
  4395  0551  0187               	clrf	7
  4396  0552  0821               	movf	??__date_time_ConvertByteToDate,w
  4397  0553  0081               	movwf	1
  4398                           
  4399                           ;date_time.h: 90: stinrg[14] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  4400  0554  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4401  0555  3E03               	addlw	3
  4402  0556  0086               	movwf	6
  4403  0557  0187               	clrf	7
  4404  0558  3501               	lslf	1,w
  4405  0559  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4406  055A  0086               	movwf	6
  4407  055B  0187               	clrf	7
  4408  055C  3F40               	moviw [0]fsr1
  4409  055D  00A1               	movwf	??__date_time_ConvertByteToDate
  4410  055E  3F41               	moviw [1]fsr1
  4411  055F  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4412  0560  3002               	movlw	2
  4413  0561  0721               	addwf	??__date_time_ConvertByteToDate,w
  4414  0562  0084               	movwf	4
  4415  0563  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4416  0564  1803               	skipnc
  4417  0565  0A22               	incf	??__date_time_ConvertByteToDate+1,w
  4418  0566  0085               	movwf	5
  4419  0567  0800               	movf	0,w	;code access
  4420  0568  00A3               	movwf	??__date_time_ConvertByteToDate+2
  4421  0569  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4422  056A  3E0E               	addlw	14
  4423  056B  0086               	movwf	6
  4424  056C  0187               	clrf	7
  4425  056D  0823               	movf	??__date_time_ConvertByteToDate+2,w
  4426  056E  0081               	movwf	1
  4427                           
  4428                           ;date_time.h: 91: stinrg[13] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  4429  056F  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4430  0570  3E03               	addlw	3
  4431  0571  0086               	movwf	6
  4432  0572  0187               	clrf	7
  4433  0573  3501               	lslf	1,w
  4434  0574  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4435  0575  0086               	movwf	6
  4436  0576  0187               	clrf	7
  4437  0577  3F40               	moviw [0]fsr1
  4438  0578  00A1               	movwf	??__date_time_ConvertByteToDate
  4439  0579  3F41               	moviw [1]fsr1
  4440  057A  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4441  057B  3001               	movlw	1
  4442  057C  0721               	addwf	??__date_time_ConvertByteToDate,w
  4443  057D  0084               	movwf	4
  4444  057E  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4445  057F  1803               	skipnc
  4446  0580  0A22               	incf	??__date_time_ConvertByteToDate+1,w
  4447  0581  0085               	movwf	5
  4448  0582  0800               	movf	0,w	;code access
  4449  0583  00A3               	movwf	??__date_time_ConvertByteToDate+2
  4450  0584  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4451  0585  3E0D               	addlw	13
  4452  0586  0086               	movwf	6
  4453  0587  0187               	clrf	7
  4454  0588  0823               	movf	??__date_time_ConvertByteToDate+2,w
  4455  0589  0081               	movwf	1
  4456                           
  4457                           ;date_time.h: 92: stinrg[12] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  4458  058A  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4459  058B  3E03               	addlw	3
  4460  058C  0086               	movwf	6
  4461  058D  0187               	clrf	7
  4462  058E  3501               	lslf	1,w
  4463  058F  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  4464  0590  0086               	movwf	6
  4465  0591  0187               	clrf	7
  4466  0592  3F40               	moviw [0]fsr1
  4467  0593  00A1               	movwf	??__date_time_ConvertByteToDate
  4468  0594  3F41               	moviw [1]fsr1
  4469  0595  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4470  0596  0821               	movf	??__date_time_ConvertByteToDate,w
  4471  0597  0084               	movwf	4
  4472  0598  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4473  0599  0085               	movwf	5
  4474  059A  0800               	movf	0,w	;code access
  4475  059B  00A3               	movwf	??__date_time_ConvertByteToDate+2
  4476  059C  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4477  059D  3E0C               	addlw	12
  4478  059E  0086               	movwf	6
  4479  059F  0187               	clrf	7
  4480  05A0  0823               	movf	??__date_time_ConvertByteToDate+2,w
  4481  05A1  0081               	movwf	1
  4482                           
  4483                           ;date_time.h: 94: stinrg[9] = ( dateTime->day & 0x0F ) | '0' ;
  4484  05A2  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4485  05A3  3E04               	addlw	4
  4486  05A4  0086               	movwf	6
  4487  05A5  0187               	clrf	7
  4488  05A6  0801               	movf	1,w
  4489  05A7  390F               	andlw	15
  4490  05A8  3830               	iorlw	48
  4491  05A9  00A1               	movwf	??__date_time_ConvertByteToDate
  4492  05AA  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4493  05AB  3E09               	addlw	9
  4494  05AC  0086               	movwf	6
  4495  05AD  0187               	clrf	7
  4496  05AE  0821               	movf	??__date_time_ConvertByteToDate,w
  4497  05AF  0081               	movwf	1
  4498                           
  4499                           ;date_time.h: 95: stinrg[8] = ( dateTime->day >> 4 ) | '0' ;
  4500  05B0  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4501  05B1  3E04               	addlw	4
  4502  05B2  0086               	movwf	6
  4503  05B3  0187               	clrf	7
  4504  05B4  0801               	movf	1,w
  4505  05B5  00A1               	movwf	??__date_time_ConvertByteToDate
  4506  05B6  3004               	movlw	4
  4507  05B7                     u1365:	
  4508  05B7  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4509  05B8  0B89               	decfsz	9,f
  4510  05B9  2DB7               	goto	u1365
  4511  05BA  0821               	movf	??__date_time_ConvertByteToDate,w
  4512  05BB  3830               	iorlw	48
  4513  05BC  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4514  05BD  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4515  05BE  3E08               	addlw	8
  4516  05BF  0086               	movwf	6
  4517  05C0  0187               	clrf	7
  4518  05C1  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4519  05C2  0081               	movwf	1
  4520                           
  4521                           ;date_time.h: 97: stinrg[6] = ( dateTime->month & 0x0F ) | '0' ;
  4522  05C3  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4523  05C4  3E05               	addlw	5
  4524  05C5  0086               	movwf	6
  4525  05C6  0187               	clrf	7
  4526  05C7  0801               	movf	1,w
  4527  05C8  390F               	andlw	15
  4528  05C9  3830               	iorlw	48
  4529  05CA  00A1               	movwf	??__date_time_ConvertByteToDate
  4530  05CB  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4531  05CC  3E06               	addlw	6
  4532  05CD  0086               	movwf	6
  4533  05CE  0187               	clrf	7
  4534  05CF  0821               	movf	??__date_time_ConvertByteToDate,w
  4535  05D0  0081               	movwf	1
  4536                           
  4537                           ;date_time.h: 98: stinrg[5] = ( dateTime->month >> 4 ) | '0' ;
  4538  05D1  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4539  05D2  3E05               	addlw	5
  4540  05D3  0086               	movwf	6
  4541  05D4  0187               	clrf	7
  4542  05D5  0801               	movf	1,w
  4543  05D6  00A1               	movwf	??__date_time_ConvertByteToDate
  4544  05D7  3004               	movlw	4
  4545  05D8                     u1375:	
  4546  05D8  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4547  05D9  0B89               	decfsz	9,f
  4548  05DA  2DD8               	goto	u1375
  4549  05DB  0821               	movf	??__date_time_ConvertByteToDate,w
  4550  05DC  3830               	iorlw	48
  4551  05DD  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4552  05DE  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4553  05DF  3E05               	addlw	5
  4554  05E0  0086               	movwf	6
  4555  05E1  0187               	clrf	7
  4556  05E2  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4557  05E3  0081               	movwf	1
  4558                           
  4559                           ;date_time.h: 100: stinrg[3] = ( dateTime->year & 0x0F ) | '0' ;
  4560  05E4  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4561  05E5  3E06               	addlw	6
  4562  05E6  0086               	movwf	6
  4563  05E7  0187               	clrf	7
  4564  05E8  0801               	movf	1,w
  4565  05E9  390F               	andlw	15
  4566  05EA  3830               	iorlw	48
  4567  05EB  00A1               	movwf	??__date_time_ConvertByteToDate
  4568  05EC  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4569  05ED  3E03               	addlw	3
  4570  05EE  0086               	movwf	6
  4571  05EF  0187               	clrf	7
  4572  05F0  0821               	movf	??__date_time_ConvertByteToDate,w
  4573  05F1  0081               	movwf	1
  4574                           
  4575                           ;date_time.h: 101: stinrg[2] = ( dateTime->year >> 4 ) | '0' ;
  4576  05F2  0824               	movf	__date_time_ConvertByteToDate@dateTime,w
  4577  05F3  3E06               	addlw	6
  4578  05F4  0086               	movwf	6
  4579  05F5  0187               	clrf	7
  4580  05F6  0801               	movf	1,w
  4581  05F7  00A1               	movwf	??__date_time_ConvertByteToDate
  4582  05F8  3004               	movlw	4
  4583  05F9                     u1385:	
  4584  05F9  36A1               	lsrf	??__date_time_ConvertByteToDate,f
  4585  05FA  0B89               	decfsz	9,f
  4586  05FB  2DF9               	goto	u1385
  4587  05FC  0821               	movf	??__date_time_ConvertByteToDate,w
  4588  05FD  3830               	iorlw	48
  4589  05FE  00A2               	movwf	??__date_time_ConvertByteToDate+1
  4590  05FF  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4591  0600  3E02               	addlw	2
  4592  0601  0086               	movwf	6
  4593  0602  0187               	clrf	7
  4594  0603  0822               	movf	??__date_time_ConvertByteToDate+1,w
  4595  0604  0081               	movwf	1
  4596                           
  4597                           ;date_time.h: 102: stinrg[1] = '0' ;
  4598  0605  3030               	movlw	48
  4599  0606  00A1               	movwf	??__date_time_ConvertByteToDate
  4600  0607  0A20               	incf	__date_time_ConvertByteToDate@stinrg,w
  4601  0608  0086               	movwf	6
  4602  0609  0187               	clrf	7
  4603  060A  0821               	movf	??__date_time_ConvertByteToDate,w
  4604  060B  0081               	movwf	1
  4605                           
  4606                           ;date_time.h: 103: stinrg[0] = '2' ;
  4607  060C  3032               	movlw	50
  4608  060D  00A1               	movwf	??__date_time_ConvertByteToDate
  4609  060E  0820               	movf	__date_time_ConvertByteToDate@stinrg,w
  4610  060F  0086               	movwf	6
  4611  0610  0187               	clrf	7
  4612  0611  0821               	movf	??__date_time_ConvertByteToDate,w
  4613  0612  0081               	movwf	1
  4614  0613  0008               	return
  4615  0614                     __end_of__date_time_ConvertByteToDate:	
  4616                           
  4617                           	psect	intentry
  4618  0004                     __pintentry:	
  4619 ;; *************** function __ *****************
  4620 ;; Defined at:
  4621 ;;		line 591 in file "src/main.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;		None
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  i               1    9[COMMON] unsigned char 
  4626 ;;  isTimeToAler    1    8[COMMON] unsigned char 
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4636 ;;      Params:         0       0       0       0
  4637 ;;      Locals:         2       0       0       0
  4638 ;;      Temps:          2       0       0       0
  4639 ;;      Totals:         4       0       0       0
  4640 ;;Total ram usage:        4 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    1
  4643 ;; This function calls:
  4644 ;;		i1__ds1307_GetData
  4645 ;; This function is called by:
  4646 ;;		Interrupt level 1
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650  0004                     __:	
  4651                           
  4652                           ;incstack = 0
  4653                           ; Regs used in __: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4654  0004  3180               	pagesel	$
  4655  0005  0020               	movlb	0	; select bank0
  4656  0006  087F               	movf	127,w
  4657  0007  00F7               	movwf	??__+1
  4658                           
  4659                           ;main.c: 593: if( INTCONbits.TMR0IF ) {
  4660  0008  1D0B               	btfss	11,2	;volatile
  4661  0009  2814               	goto	i1l2175
  4662                           
  4663                           ;main.c: 594: INTCONbits.TMR0IF = 0 ;
  4664  000A  110B               	bcf	11,2	;volatile
  4665                           
  4666                           ;main.c: 597: portAState_.byte = (~PORTA&0x33) ;
  4667  000B  090C               	comf	12,w	;volatile
  4668  000C  3933               	andlw	51
  4669  000D  00F6               	movwf	??__
  4670  000E  0876               	movf	??__,w
  4671  000F  00DB               	movwf	_portAState_
  4672                           
  4673                           ;main.c: 599: blinkPrescaler++ ;
  4674  0010  3001               	movlw	1
  4675  0011  00F6               	movwf	??__
  4676  0012  0876               	movf	??__,w
  4677  0013  07D3               	addwf	_blinkPrescaler,f
  4678  0014                     i1l2175:	
  4679                           
  4680                           ;main.c: 600: }
  4681                           ;main.c: 603: if( IOCIF && machineState_ != STATE_ADJUST_CLOCK ) {
  4682  0014  1C0B               	btfss	11,0	;volatile
  4683  0015  286E               	goto	i1l395
  4684  0016  3003               	movlw	3
  4685  0017  0658               	xorwf	_machineState_,w
  4686  0018  1903               	btfsc	3,2
  4687  0019  286E               	goto	i1l395
  4688                           
  4689                           ;main.c: 604: IOCAF3 = 0 ;
  4690  001A  0027               	movlb	7	; select bank7
  4691  001B  1193               	bcf	19,3	;volatile
  4692                           
  4693                           ;main.c: 606: if( machineState_ == STATE_BOOT ) {
  4694  001C  0020               	movlb	0	; select bank0
  4695  001D  0858               	movf	_machineState_,w
  4696  001E  1D03               	btfss	3,2
  4697  001F  2828               	goto	i1l384
  4698                           
  4699                           ;main.c: 607: machineState_ = STATE_CLOCK ;
  4700  0020  01D8               	clrf	_machineState_
  4701  0021  0AD8               	incf	_machineState_,f
  4702                           
  4703                           ;main.c: 608: datePtr = &dateCurrent ;
  4704  0022  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  4705  0023  00F6               	movwf	??__
  4706  0024  0876               	movf	??__,w
  4707  0025  00EB               	movwf	_datePtr
  4708                           
  4709                           ;main.c: 609: outputEvent.changeMessage=1 ;
  4710  0026  145A               	bsf	_outputEvent,0
  4711                           
  4712                           ;main.c: 610: }
  4713  0027  2829               	goto	i1l2189
  4714  0028                     i1l384:	
  4715                           
  4716                           ;main.c: 611: else {
  4717                           ;main.c: 612: outputEvent.changeValue=1 ;
  4718  0028  14DA               	bsf	_outputEvent,1
  4719  0029                     i1l2189:	
  4720                           
  4721                           ;main.c: 613: }
  4722                           ;main.c: 617: if( _ds1307_GetData( &dateCurrent , 0x00 , 7 ) ) {
  4723  0029  01F0               	clrf	i1__ds1307_GetData@ramAddress
  4724  002A  3007               	movlw	7
  4725  002B  00F6               	movwf	??__
  4726  002C  0876               	movf	??__,w
  4727  002D  00F1               	movwf	i1__ds1307_GetData@length
  4728  002E  305D               	movlw	(low (_dateCurrent| 0))& (0+255)
  4729  002F  318F  27A6  3180   	fcall	i1__ds1307_GetData
  4730  0032  3A00               	xorlw	0
  4731  0033  1903               	skipnz
  4732  0034  283A               	goto	i1l386
  4733                           
  4734                           ;main.c: 618: machineState_ = STATE_ERROR ;
  4735  0035  3008               	movlw	8
  4736  0036  00F6               	movwf	??__
  4737  0037  0876               	movf	??__,w
  4738  0038  0020               	movlb	0	; select bank0
  4739  0039  286D               	goto	L9
  4740  003A                     i1l386:	
  4741                           ;main.c: 619: }
  4742                           
  4743                           
  4744                           ;main.c: 620: else {
  4745                           ;main.c: 623: uint08_t isTimeToAlerm = 1 ;
  4746  003A  01F8               	clrf	__@isTimeToAlerm
  4747  003B  0AF8               	incf	__@isTimeToAlerm,f
  4748                           
  4749                           ;main.c: 624: for( uint08_t i = 0 ; i < 7 ; i++ ) {
  4750  003C  01F9               	clrf	__@i
  4751  003D  3007               	movlw	7
  4752  003E  0279               	subwf	__@i,w
  4753  003F  1803               	btfsc	3,0
  4754  0040  285F               	goto	i1l2213
  4755  0041                     i1l2199:	
  4756                           
  4757                           ;main.c: 625: if( ( !dateTimer.dayOfWeek ) && i == 3 ) continue ;
  4758  0041  0020               	movlb	0	; select bank0
  4759  0042  0867               	movf	_dateTimer+3,w
  4760  0043  1D03               	btfss	3,2
  4761  0044  2849               	goto	i1l2205
  4762  0045  3003               	movlw	3
  4763  0046  0679               	xorwf	__@i,w
  4764  0047  1903               	btfsc	3,2
  4765  0048  2857               	goto	i1l2209
  4766  0049                     i1l2205:	
  4767                           
  4768                           ;main.c: 626: if( dateCurrent.array[i] != dateTimer.array[i] ) {
  4769  0049  0879               	movf	__@i,w
  4770  004A  3E64               	addlw	(low (_dateTimer| 0))& (0+255)
  4771  004B  0086               	movwf	6
  4772  004C  0187               	clrf	7
  4773  004D  0879               	movf	__@i,w
  4774  004E  3E5D               	addlw	(low (_dateCurrent| 0))& (0+255)
  4775  004F  0084               	movwf	4
  4776  0050  0185               	clrf	5
  4777  0051  0800               	movf	0,w
  4778  0052  0601               	xorwf	1,w
  4779  0053  1903               	skipnz
  4780  0054  2857               	goto	i1l2209
  4781                           
  4782                           ;main.c: 627: isTimeToAlerm = 0 ;
  4783  0055  01F8               	clrf	__@isTimeToAlerm
  4784                           
  4785                           ;main.c: 628: break ;
  4786  0056  285F               	goto	i1l2213
  4787  0057                     i1l2209:	
  4788  0057  3001               	movlw	1
  4789  0058  00F6               	movwf	??__
  4790  0059  0876               	movf	??__,w
  4791  005A  07F9               	addwf	__@i,f
  4792  005B  3007               	movlw	7
  4793  005C  0279               	subwf	__@i,w
  4794  005D  1C03               	skipc
  4795  005E  2841               	goto	i1l2199
  4796  005F                     i1l2213:	
  4797                           
  4798                           ;main.c: 629: }
  4799                           ;main.c: 630: }
  4800                           ;main.c: 632: if( isTimeToAlerm ) machineState_ = STATE_ALERM ;
  4801  005F  0878               	movf	__@isTimeToAlerm,w
  4802  0060  1903               	btfsc	3,2
  4803  0061  2867               	goto	i1l2217
  4804  0062  3004               	movlw	4
  4805  0063  00F6               	movwf	??__
  4806  0064  0876               	movf	??__,w
  4807  0065  0020               	movlb	0	; select bank0
  4808  0066  00D8               	movwf	_machineState_
  4809  0067                     i1l2217:	
  4810                           
  4811                           ;main.c: 633: if( dateCurrent.clockHalt ) machineState_ = STATE_ERROR ;
  4812  0067  0020               	movlb	0	; select bank0
  4813  0068  1FDD               	btfss	_dateCurrent,7
  4814  0069  286E               	goto	i1l395
  4815  006A  3008               	movlw	8
  4816  006B  00F6               	movwf	??__
  4817  006C  0876               	movf	??__,w
  4818  006D                     L9:	
  4819  006D  00D8               	movwf	_machineState_
  4820  006E                     i1l395:	
  4821  006E  0877               	movf	??__+1,w
  4822  006F  00FF               	movwf	127
  4823  0070  0009               	retfie
  4824  0071                     __end_of__:	
  4825                           
  4826                           	psect	text16
  4827  0FA6                     __ptext16:	
  4828 ;; *************** function i1__ds1307_GetData *****************
  4829 ;; Defined at:
  4830 ;;		line 74 in file "src/../../_Common/ds1307.h"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  date            1    wreg     PTR struct .
  4833 ;;		 -> dateCurrent(7), dateTimer(7), 
  4834 ;;  ramAddress      1    0[COMMON] unsigned char 
  4835 ;;  length          1    1[COMMON] unsigned char 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  date            1    4[COMMON] PTR struct .
  4838 ;;		 -> dateCurrent(7), dateTimer(7), 
  4839 ;;  _ds1307_GetD    1    5[COMMON] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      unsigned char 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4849 ;;      Params:         2       0       0       0
  4850 ;;      Locals:         2       0       0       0
  4851 ;;      Temps:          2       0       0       0
  4852 ;;      Totals:         6       0       0       0
  4853 ;;Total ram usage:        6 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		__
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           
  4863                           ;psect for function i1__ds1307_GetData
  4864  0FA6                     i1__ds1307_GetData:	
  4865                           
  4866                           ;incstack = 0
  4867                           ; Regs used in i1__ds1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  4868                           ;i1__ds1307_GetData@date stored from wreg
  4869  0FA6  00F4               	movwf	i1__ds1307_GetData@date
  4870                           
  4871                           ;ds1307.h: 77: SSP1CON2bits.SEN = 1 ;
  4872  0FA7  0024               	movlb	4	; select bank4
  4873  0FA8  1416               	bsf	22,0	;volatile
  4874  0FA9                     i1l167:	
  4875                           ;ds1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  4876                           
  4877  0FA9  1816               	btfsc	22,0	;volatile
  4878  0FAA  2FA9               	goto	i1l167
  4879                           
  4880                           ;ds1307.h: 79: SSP1IF = 0 ;
  4881  0FAB  0020               	movlb	0	; select bank0
  4882  0FAC  1191               	bcf	17,3	;volatile
  4883                           
  4884                           ;ds1307.h: 82: SSP1BUF = 0xD0 ;
  4885  0FAD  30D0               	movlw	208
  4886  0FAE  0024               	movlb	4	; select bank4
  4887  0FAF  0091               	movwf	17	;volatile
  4888  0FB0                     i1l170:	
  4889                           ;ds1307.h: 83: while ( !SSP1IF ) ;
  4890                           
  4891  0FB0  0020               	movlb	0	; select bank0
  4892  0FB1  1D91               	btfss	17,3	;volatile
  4893  0FB2  2FB0               	goto	i1l170
  4894                           
  4895                           ;ds1307.h: 84: SSP1IF = 0 ;
  4896  0FB3  1191               	bcf	17,3	;volatile
  4897                           
  4898                           ;ds1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  4899  0FB4  0024               	movlb	4	; select bank4
  4900  0FB5  1F16               	btfss	22,6	;volatile
  4901  0FB6  2FB9               	goto	i1l1815
  4902  0FB7  3001               	movlw	1
  4903  0FB8  0008               	return
  4904  0FB9                     i1l1815:	
  4905                           
  4906                           ;ds1307.h: 88: SSP1BUF = ramAddress ;
  4907  0FB9  0870               	movf	i1__ds1307_GetData@ramAddress,w
  4908  0FBA  0091               	movwf	17	;volatile
  4909  0FBB                     i1l175:	
  4910                           ;ds1307.h: 89: while ( !SSP1IF ) ;
  4911                           
  4912  0FBB  0020               	movlb	0	; select bank0
  4913  0FBC  1D91               	btfss	17,3	;volatile
  4914  0FBD  2FBB               	goto	i1l175
  4915                           
  4916                           ;ds1307.h: 90: SSP1IF = 0 ;
  4917  0FBE  1191               	bcf	17,3	;volatile
  4918                           
  4919                           ;ds1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  4920  0FBF  0024               	movlb	4	; select bank4
  4921  0FC0  1F16               	btfss	22,6	;volatile
  4922  0FC1  2FC4               	goto	i1l178
  4923  0FC2  3002               	movlw	2
  4924  0FC3  0008               	return
  4925  0FC4                     i1l178:	
  4926                           
  4927                           ;ds1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  4928  0FC4  1496               	bsf	22,1	;volatile
  4929  0FC5                     i1l179:	
  4930                           ;ds1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  4931                           
  4932  0FC5  1896               	btfsc	22,1	;volatile
  4933  0FC6  2FC5               	goto	i1l179
  4934                           
  4935                           ;ds1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  4936  0FC7  30D1               	movlw	209
  4937  0FC8  0091               	movwf	17	;volatile
  4938  0FC9                     i1l182:	
  4939                           ;ds1307.h: 98: while ( !SSP1IF ) ;
  4940                           
  4941  0FC9  0020               	movlb	0	; select bank0
  4942  0FCA  1D91               	btfss	17,3	;volatile
  4943  0FCB  2FC9               	goto	i1l182
  4944                           
  4945                           ;ds1307.h: 99: SSP1IF = 0 ;
  4946  0FCC  1191               	bcf	17,3	;volatile
  4947                           
  4948                           ;ds1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  4949  0FCD  0024               	movlb	4	; select bank4
  4950  0FCE  1F16               	btfss	22,6	;volatile
  4951  0FCF  2FD2               	goto	i1l1827
  4952  0FD0  3003               	movlw	3
  4953  0FD1  0008               	return
  4954  0FD2                     i1l1827:	
  4955                           
  4956                           ;ds1307.h: 103: uint08_t dataCount = 0 ;
  4957  0FD2  01F5               	clrf	i1__ds1307_GetData@dataCount
  4958  0FD3                     i1l1841:	
  4959                           ;ds1307.h: 104: while ( dataCount < length ) {
  4960                           
  4961  0FD3  0871               	movf	i1__ds1307_GetData@length,w
  4962  0FD4  0275               	subwf	i1__ds1307_GetData@dataCount,w
  4963  0FD5  1803               	btfsc	3,0
  4964  0FD6  2FFB               	goto	i1l194
  4965                           
  4966                           ;ds1307.h: 105: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  4967  0FD7  30A6               	movlw	166
  4968  0FD8  00F2               	movwf	??i1__ds1307_GetData
  4969  0FD9                     u244_27:	
  4970  0FD9  0BF2               	decfsz	??i1__ds1307_GetData,f
  4971  0FDA  2FD9               	goto	u244_27
  4972  0FDB  0000               	nop
  4973                           
  4974                           ;ds1307.h: 106: SSP1CON2bits.RCEN = 1 ;
  4975  0FDC  0024               	movlb	4	; select bank4
  4976  0FDD  1596               	bsf	22,3	;volatile
  4977  0FDE                     i1l188:	
  4978                           ;ds1307.h: 107: while ( SSP1CON2bits.RCEN ) ;
  4979                           
  4980  0FDE  1996               	btfsc	22,3	;volatile
  4981  0FDF  2FDE               	goto	i1l188
  4982  0FE0                     i1l191:	
  4983                           ;ds1307.h: 108: while ( !SSPSTATbits.BF ) ;
  4984                           
  4985  0FE0  1C14               	btfss	20,0	;volatile
  4986  0FE1  2FE0               	goto	i1l191
  4987                           
  4988                           ;ds1307.h: 109: date->array[ dataCount++ ] = SSP1BUF ;
  4989  0FE2  0811               	movf	17,w	;volatile
  4990  0FE3  00F2               	movwf	??i1__ds1307_GetData
  4991  0FE4  0875               	movf	i1__ds1307_GetData@dataCount,w
  4992  0FE5  0774               	addwf	i1__ds1307_GetData@date,w
  4993  0FE6  00F3               	movwf	??i1__ds1307_GetData+1
  4994  0FE7  0873               	movf	??i1__ds1307_GetData+1,w
  4995  0FE8  0086               	movwf	6
  4996  0FE9  0187               	clrf	7
  4997  0FEA  0872               	movf	??i1__ds1307_GetData,w
  4998  0FEB  0081               	movwf	1
  4999  0FEC  3001               	movlw	1
  5000  0FED  00F2               	movwf	??i1__ds1307_GetData
  5001  0FEE  0872               	movf	??i1__ds1307_GetData,w
  5002  0FEF  07F5               	addwf	i1__ds1307_GetData@dataCount,f
  5003                           
  5004                           ;ds1307.h: 110: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  5005  0FF0  0875               	movf	i1__ds1307_GetData@dataCount,w
  5006  0FF1  0671               	xorwf	i1__ds1307_GetData@length,w
  5007  0FF2  1D03               	btfss	3,2
  5008  0FF3  2FF7               	goto	u182_20
  5009  0FF4  0024               	movlb	4	; select bank4
  5010  0FF5  1696               	bsf	22,5	;volatile
  5011  0FF6  2FF9               	goto	i1l1839
  5012  0FF7                     u182_20:	
  5013  0FF7  0024               	movlb	4	; select bank4
  5014  0FF8  1296               	bcf	22,5	;volatile
  5015  0FF9                     i1l1839:	
  5016                           
  5017                           ;ds1307.h: 111: SSP1CON2bits.ACKEN = 1 ;
  5018  0FF9  1616               	bsf	22,4	;volatile
  5019  0FFA  2FD3               	goto	i1l1841
  5020  0FFB                     i1l194:	
  5021                           
  5022                           ;ds1307.h: 112: }
  5023                           ;ds1307.h: 115: SSP1CON2bits.PEN = 1 ;
  5024  0FFB  1516               	bsf	22,2	;volatile
  5025  0FFC                     i1l195:	
  5026                           ;ds1307.h: 116: while ( SSP1CON2bits.PEN ) ;
  5027                           
  5028  0FFC  1916               	btfsc	22,2	;volatile
  5029  0FFD  2FFC               	goto	i1l195
  5030                           
  5031                           ;ds1307.h: 118: return 0 ;
  5032  0FFE  3000               	movlw	0
  5033  0FFF  0008               	return
  5034  1000                     __end_ofi1__ds1307_GetData:	
  5035  007E                     btemp	set	126	;btemp
  5036  007E                     wtemp	set	126
  5037  007E                     wtemp0	set	126
  5038  0080                     wtemp1	set	128
  5039  0082                     wtemp2	set	130
  5040  0084                     wtemp3	set	132
  5041  0086                     wtemp4	set	134
  5042  0088                     wtemp5	set	136
  5043  007F                     wtemp6	set	127
  5044  007E                     ttemp	set	126
  5045  007E                     ttemp0	set	126
  5046  0081                     ttemp1	set	129
  5047  0084                     ttemp2	set	132
  5048  0087                     ttemp3	set	135
  5049  007F                     ttemp4	set	127
  5050  007E                     ltemp	set	126
  5051  007E                     ltemp0	set	126
  5052  0082                     ltemp1	set	130
  5053  0086                     ltemp2	set	134
  5054  0080                     ltemp3	set	128


Data Sizes:
    Strings     134
    Constant    57
    Data        26
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     43      80
    BANK1            80      0      22
    BANK2            80      0       0

Pointer List with Targets:

    datePtr	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    currentEditValue	PTR unsigned char  size(1) Largest target is 2
		 -> dateCurrent.second(BANK0[1]), dateCurrent.year(BANK0[1]), dateTimer.year(BANK0[1]), dateTimer.second(BANK0[1]), 
		 -> NULL(NULL[0]), datePtr.year(COMMON[1]), datePtr.second(COMMON[1]), datePtr(BANK0[1]), 

    currentValueInfo	PTR const struct . size(2) Largest target is 4096
		 -> ROM(CODE[4096]), VALUE_INFORMATIONS.second(CODE[4]), VALUE_INFORMATIONS.year(CODE[4]), VALUE_INFORMATIONS(CODE[28]), 

    MESSAGE_MENU	PTR const unsigned char [4] size(2) Largest target is 13
		 -> STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), STR_8(CODE[13]), 

    _ds1307_SetClock@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), 

    _ds1307_GetData@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@string	PTR unsigned char  size(1) Largest target is 4
		 -> main@string_769(BANK0[4]), 

    _date_time_ConvertByteToTime@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToTime@string	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    _date_time_ConvertByteToDate@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), datePtr(BANK0[1]), dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDate@stinrg	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    STR_DAY_OF_WEEK	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    _parallel_lcd_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 8
		 -> CURSOR_BITMAP(CODE[8]), 

    _parallel_lcd_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_20(CODE[17]), STR_19(CODE[7]), STR_18(CODE[8]), STR_17(CODE[9]), 
		 -> STR_16(CODE[12]), STR_15(CODE[6]), STR_14(CODE[7]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), 
		 -> STR_8(CODE[13]), 

    _parallel_lcd_WriteString@stringPtr	PTR const unsigned char  size(1) Largest target is 17
		 -> main@string_769(BANK0[4]), main@valueString(BANK0[4]), main@string(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under __ in COMMON

    __->i1__ds1307_GetData

Critical Paths under _main in BANK0

    _main->__parallel_lcd_SetCgram
    _main->__parallel_lcd_WriteStringClearing
    __parallel_lcd_WriteStringClearing->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteString->__private_parallel_lcd_WriteByte
    __parallel_lcd_WriteCharacter->__private_parallel_lcd_WriteByte
    __parallel_lcd_SetCgram->__private_parallel_lcd_WriteByte
    __parallel_lcd_Initialize->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearRow->__private_parallel_lcd_WriteByte
    __parallel_lcd_ClearPartial->__private_parallel_lcd_WriteByte

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   16220
                                              8 BANK0     35    35      0
       __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
       __date_time_ConvertByteToTime
                    __ds1307_GetData
                   __ds1307_SetClock
         __parallel_lcd_ClearPartial
             __parallel_lcd_ClearRow
           __parallel_lcd_Initialize
             __parallel_lcd_SetCgram
       __parallel_lcd_WriteCharacter
          __parallel_lcd_WriteString
  __parallel_lcd_WriteStringClearing
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteStringClearing                    5     3      2    2557
                                              3 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteString                            3     2      1    1935
                                              3 BANK0      3     2      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_WriteCharacter                         2     1      1    1684
                                              3 BANK0      2     1      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_SetCgram                               5     3      2    1731
                                              3 BANK0      5     3      2
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_Initialize                             0     0      0    1564
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearRow                               3     3      0    1632
                                              3 BANK0      3     3      0
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (1) __parallel_lcd_ClearPartial                           4     3      1    1708
                                              3 BANK0      4     3      1
    __private_parallel_lcd_WriteByte
 ---------------------------------------------------------------------------------
 (2) __private_parallel_lcd_WriteByte                      3     2      1    1564
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) __ds1307_SetClock                                     3     3      0     140
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) __ds1307_GetData                                      6     4      2     508
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToTime                         4     3      1     456
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDiscrete                     6     4      2     928
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDate                         5     4      1     698
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    4     4      0     344
                                              6 COMMON     4     4      0
                  i1__ds1307_GetData
 ---------------------------------------------------------------------------------
 (4) i1__ds1307_GetData                                    6     4      2     208
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
   __date_time_ConvertByteToTime
   __ds1307_GetData
   __ds1307_SetClock
   __parallel_lcd_ClearPartial
     __private_parallel_lcd_WriteByte
   __parallel_lcd_ClearRow
     __private_parallel_lcd_WriteByte
   __parallel_lcd_Initialize
     __private_parallel_lcd_WriteByte
   __parallel_lcd_SetCgram
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteCharacter
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteString
     __private_parallel_lcd_WriteByte
   __parallel_lcd_WriteStringClearing
     __private_parallel_lcd_WriteByte
   _initialize

 __ (ROOT)
   i1__ds1307_GetData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      71       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      16       8       27.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      71      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 12 23:41:08 2015

                                          __ 0004                                            pc 0002  
                 ??__parallel_lcd_Initialize 0023                                  __CFG_CP$OFF 0000  
                                         ?__ 0070                                  _SSPSTATbits 0214  
                 ?__parallel_lcd_WriteString 0023                                          ??__ 0076  
                                        l200 0F6C                                          l203 0F73  
                                        l213 0FA1                                          l301 019C  
                                        l214 0F91                                          l302 01BF  
                                        l311 01CE                                          l208 0F7B  
                                        l320 01F0                                          l304 01B6  
                                        l313 01D6                                          l170 0694  
                                        l218 0FA3                                          l331 0266  
                                        l316 01E7                                          l308 01C4  
                                        l182 06AF                                          l318 0289  
                                        l262 00E7                                          l191 06C8  
                                        l175 06A1                                          l167 068D  
                                        l271 0109                                          l263 00E6  
                                        l344 02BB                                          l336 032D  
                                        l265 00EE                                          l194 06E4  
                                        l178 06AA                                          l266 00ED  
                                        l195 06E6                                          l179 06AB  
                                        l275 00FE                                          l259 00CB  
                                        l188 06C6                                          l276 0143  
                                        l286 01B1                                          l278 010D  
                                        l297 019A                                          _PR2 001B  
                                        __@i 0079                                 __CFG_BORV$HI 0000  
                                        wreg 0009        __date_time_ConvertByteToDate@dateTime 0024  
                                       S2261 0800                                         S2263 0810  
                            __@isTimeToAlerm 0078                                 __CFG_LVP$OFF 0000  
                                       l2021 0224                                         l2023 022B  
                                       l2121 0374                                         l2033 0254  
                                       l2017 0218                                         l2025 022C  
                                       l2009 01EE                                         l2131 0390  
                                       l2141 039F                                         l2109 0358  
                                       l2037 0260                                         l2061 027B  
                                       l2151 03C2                                         l2071 029E  
                                       l2047 0270                                         l2129 037F  
                                       l2145 03A7                                         l2073 02A5  
                                       l2065 028D                                         l2057 0279  
                                       l2049 0271                                         l2155 03CB  
                                       l2083 02EA                                         l2067 0292  
                                       l2149 03B0                                         l2085 02FC  
                                       l2069 0297                                         l2077 02AC  
                                       l1623 0EF1                                         l2159 03E7  
                                       l2087 02FF                                         l2079 02BC  
                                       l2095 031F                                         l1721 046C  
                                       l1641 0F5C                                         l2089 0311  
                                       l1731 04FC                                         l1715 040C  
                                       l1643 0F62                                         l2099 0332  
                                       l1725 04BE                                         l1717 042C  
                                       l1901 00F9                                         l1727 04DE  
                                       l1719 044C                                         l1751 069D  
                                       l1911 0110                                         l1737 051A  
                                       l1921 012A                                         l1763 06B8  
                                       l1923 012C                                         l1915 0120  
                                       l1907 0101                                         l1669 0EA3  
                                       l1941 0152                                         l1933 0147  
                                       l1925 0130                                         l1775 06E2  
                                       l1777 06BA                                         l1961 0173  
                                       l1929 0132                                         l1971 018C  
                                       l1955 016B                                         l1981 01B9  
                                       l1965 0185                                         l1957 016D  
                                       l1949 0161                                         l1799 0F88  
                                       l1967 0187                                         l1975 019F  
                                       l1987 01C8                                         l1997 01DB  
                                       l1999 01DC                                         STR_1 07B3  
                               __CFG_WDTE$ON 0000                                         STR_2 07AF  
                                       STR_3 07A7                                         STR_4 07A3  
                                       STR_5 07BB                                         STR_6 07AB  
                                       STR_7 07B7                                         STR_8 074A  
                                       STR_9 0763                                         u1405 065D  
                                       u1415 067D                                         u1335 0F0E  
                                       _LATC 010E                                         u1425 0420  
                                       u1435 0440                                         u1365 05B7  
                                       u1445 0460                                         u1375 05D8  
                                       u1455 04D2                                         u1385 05F9  
                                       u1465 04F0                                         u2417 00A3  
                                       u1475 050E                                         u1395 063E  
                                       u2427 0ED1                                         u2195 0363  
                                       u1580 06E0                                         u2437 06C1  
                                _outputEvent 005A                                         _TMR0 0015  
                                       _TMR2 001A                                 __CFG_WRT$OFF 0000  
                              __CFG_FCMEN$ON 0000                                         _main 0096  
                              _CURSOR_BITMAP 0731                                         fsr0h 0005  
                                       fsr1h 0007                                         fsr0l 0004  
                                       indf0 0000                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                              __CFG_BOREN$ON 0000                                         ltemp 007E  
                                       start 0071                                         ttemp 007E  
                                       wtemp 007E                                __CFG_IESO$OFF 0000  
                            __ds1307_GetData 0689                                __CFG_LPBOR$ON 0000  
                                      ?_main 0070                                        STR_10 0757  
                                      STR_11 0787                                        STR_12 076D  
                                      STR_20 0739                                        STR_13 077F  
                                      STR_14 0796                                        STR_15 079D  
                                      STR_16 0757                                        STR_17 0776  
                                      STR_18 0787                                        STR_19 078F  
                                      _IOCIE 005B                                        _IOCIF 0058  
                                      i1l170 0FB0                                        i1l182 0FC9  
                                      i1l191 0FE0                                        i1l175 0FBB  
                                      i1l167 0FA9                                        i1l194 0FFB  
                                      i1l178 0FC4                                        i1l195 0FFC  
                                      i1l179 0FC5                                        i1l188 0FDE  
                                      i1l384 0028                                        i1l386 003A  
                                      i1l395 006E                           main@prevPortAState 005C  
                                      _PORTA 000C                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                              __CFG_PWRTE$ON 0000              __end_of_PARALLEL_LCD_ROW_SELECT 0715  
                                      _alerm 007A                                        main@i 004A  
                               main@tmpValue 0041                                        ltemp0 007E  
                                      ltemp1 0082                                        ltemp2 0086  
                                      ltemp3 0080                                        ttemp0 007E  
                                      ttemp1 0081                                        ttemp2 0084  
                                      ttemp3 0087                                        ttemp4 007F  
                                      status 0003                                        wtemp0 007E  
                                      wtemp1 0080                                        wtemp2 0082  
                                      wtemp3 0084                                        wtemp4 0086  
                                      wtemp5 0088                                        wtemp6 007F  
                             __CFG_MCLRE$OFF 0000                              __initialization 0073  
                               __end_of_main 0404                             __ds1307_SetClock 0F68  
                                     ??_main 0028                            __end_of_HEX_TABLE 0710  
                 __end_of_VALUE_INFORMATIONS 0731                __parallel_lcd_SetCgram@bitmap 0023  
                              main@isNonZero 0042                                main@keyChange 0043  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _IOCAF3 1C9B  
                    __end_of__ds1307_GetData 06EA                                       i1l2205 0049  
                                     i1l2213 005F                                       i1l2217 0067  
                                     i1l2209 0057                                       i1l2175 0014  
                                     i1l2189 0029                                       i1l1815 0FB9  
                                     i1l2199 0041                                       i1l1841 0FD3  
                                     i1l1827 0FD2                                       i1l1839 0FF9  
                                     u244_27 0FD9                                       u182_20 0FF7  
                                     _PWM3OE 30CE                                       _SSP1IF 008B  
                   ??__parallel_lcd_ClearRow 0023             __end_of__parallel_lcd_Initialize 0E9A  
                             __CFG_STVREN$ON 0000                     ??__parallel_lcd_SetCgram 0025  
       __private_parallel_lcd_WriteByte@data 0022                      __end_of__initialization 0093  
                  __ds1307_GetData@dataCount 0025          __parallel_lcd_ClearPartial@position 0025  
      __date_time_ConvertByteToTime@dateTime 0023                               __pcstackCOMMON 0070  
                               __pidataBANK0 0E64                                 __pidataBANK1 06EA  
       __end_of__parallel_lcd_WriteCharacter 0E82        __size_of__parallel_lcd_WriteCharacter 000E  
               __parallel_lcd_WriteCharacter 0E74                  ??__parallel_lcd_WriteString 0024  
                             _OPTION_REGbits 0095                                   __pbssBANK0 004B  
                           ?__ds1307_GetData 0020          __size_of__parallel_lcd_ClearPartial 0019  
            __size_of__parallel_lcd_ClearRow 001A                                   _editSelect 0056  
                                 __pmaintext 0096                                   __pintentry 0004  
              ?__parallel_lcd_WriteCharacter 0023              __size_of__parallel_lcd_SetCgram 002A  
                i1__ds1307_GetData@dataCount 0075                                   __size_of__ 006D  
                             main@keyPressed 0049                                      _PWM3DCH 0618  
                                    _PWM3DCL 0617                                      _SSP1ADD 0212  
                                    _SSP1BUF 0211            __size_of__parallel_lcd_Initialize 0018  
                  ?__parallel_lcd_Initialize 0070                    __parallel_lcd_WriteString 0EEA  
                           _currentEditValue 0054                 i1__ds1307_GetData@ramAddress 0070  
                   __end_of__ds1307_SetClock 0FA6     __end_of__date_time_ConvertByteToDiscrete 0525  
  __size_of__date_time_ConvertByteToDiscrete 0121           ??__date_time_ConvertByteToDiscrete 0022  
          ?__date_time_ConvertByteToDiscrete 0020             __date_time_ConvertByteToDiscrete 0404  
                                 _keyEvents_ 0057                            main@COMPARE_UNITS 0710  
                                 _menuSelect 0059                                      _datePtr 006B  
                                 _initialize 07BF                                      __ptext1 07BF  
                                    __ptext2 0F32                                      __ptext3 0EEA  
                                    __ptext4 0E74                       __parallel_lcd_ClearRow 0EB3  
                                    __ptext5 0F08                                      __ptext6 0E82  
                                    __ptext7 0EB3                                      __ptext8 0E9A  
                                    __ptext9 0ECD                                    _T2CONbits 001C  
                                  _IOCANbits 0392                               _blinkPrescaler 0053  
                                  _HEX_TABLE 0700                                      clrloop0 0E6F  
                       end_of_initialization 0093                       __parallel_lcd_SetCgram 0F08  
        __parallel_lcd_WriteStringClearing@i 0027                             _currentValueInfo 0051  
                                    init_ram 0E68                           _VALUE_INFORMATIONS 0715  
                                    initloop 0E69                    __end_ofmain@COMPARE_UNITS 0713  
         __end_of__parallel_lcd_ClearPartial 0EB3                   __parallel_lcd_ClearPartial 0E9A  
                    _PARALLEL_LCD_ROW_SELECT 0713                ?__date_time_ConvertByteToDate 0020  
              ?__date_time_ConvertByteToTime 0020                                 __pstringtext 0700  
                           __CFG_FOSC$INTOSC 0000                               main@string_769 0045  
        __parallel_lcd_WriteString@stringPtr 0023                              _STR_DAY_OF_WEEK 00A0  
                                 main@string 002B      __date_time_ConvertByteToDiscrete@select 0021  
    __date_time_ConvertByteToDiscrete@string 0020                                  ?_initialize 0070  
                               _MESSAGE_MENU 00AE            __parallel_lcd_ClearPartial@length 0023  
                        start_initialization 0073          __date_time_ConvertByteToDate@stinrg 0020  
                      __end_of_CURSOR_BITMAP 0739           __size_of__parallel_lcd_WriteString 001E  
                 __ds1307_GetData@ramAddress 0020                           __ds1307_SetClock@i 0022  
                                __pdataBANK0 006C                                  __pdataBANK1 00A0  
             ??__date_time_ConvertByteToDate 0021               ??__date_time_ConvertByteToTime 0021  
           __parallel_lcd_ClearRow@rowSelect 0024        __parallel_lcd_WriteCharacter@position 0024  
                                _dateCurrent 005D                                  __pbssCOMMON 007A  
                                  ___latbits 0001                                __pcstackBANK0 0020  
                                  __end_of__ 0071                            i1__ds1307_GetData 0FA6  
                        __size_of_initialize 0041                            ?__ds1307_SetClock 0070  
                                  _dateTimer 0064                           ?i1__ds1307_GetData 0070  
                         ??__ds1307_SetClock 0020                     __size_of__ds1307_GetData 0061  
          __end_of__parallel_lcd_WriteString 0F08                      ?__parallel_lcd_ClearRow 0070  
                   __parallel_lcd_ClearRow@i 0025                              main@compareUnit 0044  
                        ??i1__ds1307_GetData 0072                     i1__ds1307_GetData@length 0071  
               ??__parallel_lcd_ClearPartial 0024                                    __pswtext1 0800  
                                  __pswtext2 0810                               _cursorPosition 0055  
                    ?__parallel_lcd_SetCgram 0023      __end_of__private_parallel_lcd_WriteByte 0EEA  
   __size_of__private_parallel_lcd_WriteByte 001D            ??__private_parallel_lcd_WriteByte 0021  
           ?__private_parallel_lcd_WriteByte 0020              __private_parallel_lcd_WriteByte 0ECD  
                  __end_ofi1__ds1307_GetData 1000                              main@keyReleased 0040  
                                   _LATBbits 010D                                    clear_ram0 0E6E  
                                   _PIE1bits 0091                                     _PIR1bits 0011  
             __end_of__parallel_lcd_ClearRow 0ECD                  ?__parallel_lcd_ClearPartial 0023  
                                  main@F4265 006C                                     _SSP1CON1 0215  
         __parallel_lcd_WriteString@position 0025                                     _SSP1STAT 0214  
     __parallel_lcd_WriteCharacter@character 0023               __end_of__parallel_lcd_SetCgram 0F32  
                   __parallel_lcd_Initialize 0E82                     __parallel_lcd_SetCgram@i 0027  
__parallel_lcd_WriteStringClearing@stringPtr 0023            __private_parallel_lcd_WriteByte@r 0020  
                               ??_initialize 0020                            ??__ds1307_GetData 0022  
            __parallel_lcd_SetCgram@charCode 0026                        __ds1307_SetClock@date 0021  
                                   __ptext10 0F68                                     __ptext11 0689  
                                   __ptext12 0614                                     __ptext13 0404  
                                   __ptext14 0525                                     __ptext16 0FA6  
                               _SSP1CON2bits 0216                   __size_ofi1__ds1307_GetData 005A  
                                   _keyCount 004B                                __size_of_main 036E  
                         __end_of_initialize 0800    __end_of__parallel_lcd_WriteStringClearing 0F68  
 __size_of__parallel_lcd_WriteStringClearing 0036          ??__parallel_lcd_WriteStringClearing 0025  
         ?__parallel_lcd_WriteStringClearing 0023            __parallel_lcd_WriteStringClearing 0F32  
               __parallel_lcd_ClearPartial@i 0026   __parallel_lcd_WriteStringClearing@position 0026  
                            main@valueString 003C          __date_time_ConvertByteToTime@string 0020  
                                 _INTCONbits 000B                                  _PWM3CONbits 0619  
             ??__parallel_lcd_WriteCharacter 0024    __date_time_ConvertByteToDiscrete@dateTime 0025  
                                   intlevel1 0000                       i1__ds1307_GetData@date 0074  
                          __CFG_CLKOUTEN$OFF 0000                                   _OSCCONbits 0099  
                                _portAState_ 005B                    __size_of__ds1307_SetClock 003E  
                     __ds1307_GetData@length 0021                                _machineState_ 0058  
       __end_of__date_time_ConvertByteToDate 0614        __size_of__date_time_ConvertByteToDate 00EF  
               __date_time_ConvertByteToDate 0525         __end_of__date_time_ConvertByteToTime 0689  
      __size_of__date_time_ConvertByteToTime 0075                 __date_time_ConvertByteToTime 0614  
                       __ds1307_GetData@date 0024  
