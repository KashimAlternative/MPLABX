

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Aug 15 16:58:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext2,local,class=CONST,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  0011                     	;# 
    51  0012                     	;# 
    52  0013                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001C                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  010C                     	;# 
    80  010D                     	;# 
    81  010E                     	;# 
    82  0111                     	;# 
    83  0112                     	;# 
    84  0113                     	;# 
    85  0114                     	;# 
    86  0115                     	;# 
    87  0116                     	;# 
    88  0117                     	;# 
    89  0118                     	;# 
    90  0119                     	;# 
    91  011D                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94  018E                     	;# 
    95  0191                     	;# 
    96  0191                     	;# 
    97  0192                     	;# 
    98  0193                     	;# 
    99  0193                     	;# 
   100  0194                     	;# 
   101  0195                     	;# 
   102  0196                     	;# 
   103  0197                     	;# 
   104  0199                     	;# 
   105  019A                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019C                     	;# 
   109  019D                     	;# 
   110  019E                     	;# 
   111  019F                     	;# 
   112  020C                     	;# 
   113  020D                     	;# 
   114  0211                     	;# 
   115  0211                     	;# 
   116  0212                     	;# 
   117  0212                     	;# 
   118  0213                     	;# 
   119  0213                     	;# 
   120  0214                     	;# 
   121  0214                     	;# 
   122  0215                     	;# 
   123  0215                     	;# 
   124  0215                     	;# 
   125  0216                     	;# 
   126  0216                     	;# 
   127  0217                     	;# 
   128  0217                     	;# 
   129  0391                     	;# 
   130  0392                     	;# 
   131  0393                     	;# 
   132  0394                     	;# 
   133  0395                     	;# 
   134  0396                     	;# 
   135  0498                     	;# 
   136  0498                     	;# 
   137  0499                     	;# 
   138  049A                     	;# 
   139  049B                     	;# 
   140  049B                     	;# 
   141  049C                     	;# 
   142  049E                     	;# 
   143  049F                     	;# 
   144  0611                     	;# 
   145  0612                     	;# 
   146  0613                     	;# 
   147  0613                     	;# 
   148  0614                     	;# 
   149  0615                     	;# 
   150  0616                     	;# 
   151  0616                     	;# 
   152  0617                     	;# 
   153  0618                     	;# 
   154  0619                     	;# 
   155  0619                     	;# 
   156  061A                     	;# 
   157  061B                     	;# 
   158  061C                     	;# 
   159  061C                     	;# 
   160  0691                     	;# 
   161  0692                     	;# 
   162  0693                     	;# 
   163  0694                     	;# 
   164  0695                     	;# 
   165  0F0F                     	;# 
   166  0F10                     	;# 
   167  0F11                     	;# 
   168  0F12                     	;# 
   169  0F13                     	;# 
   170  0F14                     	;# 
   171  0F15                     	;# 
   172  0F16                     	;# 
   173  0F17                     	;# 
   174  0F18                     	;# 
   175  0F19                     	;# 
   176  0F1A                     	;# 
   177  0F1B                     	;# 
   178  0F1C                     	;# 
   179  0F1D                     	;# 
   180  0F1E                     	;# 
   181  0F1F                     	;# 
   182  0F20                     	;# 
   183  0F21                     	;# 
   184  0F22                     	;# 
   185  0F23                     	;# 
   186  0F24                     	;# 
   187  0F25                     	;# 
   188  0F26                     	;# 
   189  0F27                     	;# 
   190  0F28                     	;# 
   191  0F29                     	;# 
   192  0F2A                     	;# 
   193  0F2B                     	;# 
   194  0F2C                     	;# 
   195  0F2D                     	;# 
   196  0F2E                     	;# 
   197  0F2F                     	;# 
   198  0F8C                     	;# 
   199  0F8D                     	;# 
   200  0F91                     	;# 
   201  0F95                     	;# 
   202  0F96                     	;# 
   203  0F97                     	;# 
   204  0F9C                     	;# 
   205  0F9D                     	;# 
   206  0F9E                     	;# 
   207  0FE3                     	;# 
   208  0FE4                     	;# 
   209  0FE5                     	;# 
   210  0FE6                     	;# 
   211  0FE7                     	;# 
   212  0FE8                     	;# 
   213  0FE9                     	;# 
   214  0FEA                     	;# 
   215  0FEB                     	;# 
   216  0FED                     	;# 
   217  0FEE                     	;# 
   218  0FEF                     	;# 
   219                           
   220                           	psect	idataBANK0
   221  0E82                     __pidataBANK0:	
   222                           
   223                           ;initializer for main@F4324
   224  0E82  3430               	retlw	48
   225  0E83  3430               	retlw	48
   226  0E84  3430               	retlw	48
   227  0E85  3400               	retlw	0
   228                           
   229                           	psect	idataBANK1
   230  0EAE                     __pidataBANK1:	
   231                           
   232                           ;initializer for _STR_DAY_OF_WEEK
   233  0EAE  34AA               	retlw	low (STR_1| (0+32768))
   234  0EAF  3487               	retlw	high (STR_1| (0+32768))
   235  0EB0  34A6               	retlw	low (STR_2| (0+32768))
   236  0EB1  3487               	retlw	high (STR_2| (0+32768))
   237  0EB2  349E               	retlw	low (STR_3| (0+32768))
   238  0EB3  3487               	retlw	high (STR_3| (0+32768))
   239  0EB4  349A               	retlw	low (STR_4| (0+32768))
   240  0EB5  3487               	retlw	high (STR_4| (0+32768))
   241  0EB6  34B2               	retlw	low (STR_5| (0+32768))
   242  0EB7  3487               	retlw	high (STR_5| (0+32768))
   243  0EB8  34A2               	retlw	low (STR_6| (0+32768))
   244  0EB9  3487               	retlw	high (STR_6| (0+32768))
   245  0EBA  34AE               	retlw	low (STR_7| (0+32768))
   246  0EBB  3487               	retlw	high (STR_7| (0+32768))
   247                           
   248                           ;initializer for _MESSAGE_MENU
   249  0EBC  344A               	retlw	low (STR_8| (0+32768))
   250  0EBD  3487               	retlw	high (STR_8| (0+32768))
   251  0EBE  3463               	retlw	low (STR_9| (0+32768))
   252  0EBF  3487               	retlw	high (STR_9| (0+32768))
   253  0EC0  3457               	retlw	low (STR_10| (0+32768))
   254  0EC1  3487               	retlw	high (STR_10| (0+32768))
   255  0EC2  347E               	retlw	low (STR_11| (0+32768))
   256  0EC3  3487               	retlw	high (STR_11| (0+32768))
   257                           
   258                           	psect	stringtext
   259  0700                     __pstringtext:	
   260  0700                     _HEX_TABLE:	
   261  0700  3430               	retlw	48
   262  0701  3431               	retlw	49
   263  0702  3432               	retlw	50
   264  0703  3433               	retlw	51
   265  0704  3434               	retlw	52
   266  0705  3435               	retlw	53
   267  0706  3436               	retlw	54
   268  0707  3437               	retlw	55
   269  0708  3438               	retlw	56
   270  0709  3439               	retlw	57
   271  070A  3441               	retlw	65
   272  070B  3442               	retlw	66
   273  070C  3443               	retlw	67
   274  070D  3444               	retlw	68
   275  070E  3445               	retlw	69
   276  070F  3446               	retlw	70
   277  0710                     __end_of_HEX_TABLE:	
   278  0710                     main@COMPARE_UNITS:	
   279  0710  3464               	retlw	100
   280  0711  340A               	retlw	10
   281  0712  3401               	retlw	1
   282  0713                     __end_ofmain@COMPARE_UNITS:	
   283  0713                     _PARALLEL_LCD_ROW_SELECT:	
   284  0713  3480               	retlw	128
   285  0714  34C0               	retlw	192
   286  0715                     __end_of_PARALLEL_LCD_ROW_SELECT:	
   287  0715                     _VALUE_INFORMATIONS:	
   288  0715  3482               	retlw	130
   289  0716  3402               	retlw	2
   290  0717  3499               	retlw	153
   291  0718  3400               	retlw	0
   292  0719  3485               	retlw	133
   293  071A  3402               	retlw	2
   294  071B  3412               	retlw	18
   295  071C  3401               	retlw	1
   296  071D  3488               	retlw	136
   297  071E  3402               	retlw	2
   298  071F  3431               	retlw	49
   299  0720  3401               	retlw	1
   300  0721  348C               	retlw	140
   301  0722  3403               	retlw	3
   302  0723  3407               	retlw	7
   303  0724  3401               	retlw	1
   304  0725  34C0               	retlw	192
   305  0726  3402               	retlw	2
   306  0727  3423               	retlw	35
   307  0728  3400               	retlw	0
   308  0729  34C3               	retlw	195
   309  072A  3402               	retlw	2
   310  072B  3459               	retlw	89
   311  072C  3400               	retlw	0
   312  072D  34C6               	retlw	198
   313  072E  3402               	retlw	2
   314  072F  3459               	retlw	89
   315  0730  3400               	retlw	0
   316  0731                     __end_of_VALUE_INFORMATIONS:	
   317  0731                     _CURSOR_BITMAP:	
   318  0731  3410               	retlw	16
   319  0732  3418               	retlw	24
   320  0733  341C               	retlw	28
   321  0734  341E               	retlw	30
   322  0735  341C               	retlw	28
   323  0736  3418               	retlw	24
   324  0737  3410               	retlw	16
   325  0738  3400               	retlw	0
   326  0739                     __end_of_CURSOR_BITMAP:	
   327  000B                     _INTCONbits	set	11
   328  0011                     _PIR1bits	set	17
   329  000C                     _PORTA	set	12
   330  001B                     _PR2	set	27
   331  001C                     _T2CONbits	set	28
   332  0015                     _TMR0	set	21
   333  001A                     _TMR2	set	26
   334  005B                     _IOCIE	set	91
   335  0058                     _IOCIF	set	88
   336  008B                     _SSP1IF	set	139
   337  0095                     _OPTION_REGbits	set	149
   338  0099                     _OSCCONbits	set	153
   339  0091                     _PIE1bits	set	145
   340  008C                     _TRISA	set	140
   341  008D                     _TRISB	set	141
   342  008E                     _TRISC	set	142
   343  010D                     _LATBbits	set	269
   344  010E                     _LATC	set	270
   345  018C                     _ANSELA	set	396
   346  018D                     _ANSELB	set	397
   347  018E                     _ANSELC	set	398
   348  0212                     _SSP1ADD	set	530
   349  0211                     _SSP1BUF	set	529
   350  0215                     _SSP1CON1	set	533
   351  0216                     _SSP1CON2bits	set	534
   352  0214                     _SSP1STAT	set	532
   353  0214                     _SSPSTATbits	set	532
   354  0392                     _IOCANbits	set	914
   355  1C9B                     _IOCAF3	set	7323
   356  0619                     _PWM3CONbits	set	1561
   357  0618                     _PWM3DCH	set	1560
   358  0617                     _PWM3DCL	set	1559
   359  30CE                     _PWM3OE	set	12494
   360  0739                     STR_19:	
   361  0739  3452               	retlw	82	;'R'
   362  073A  3465               	retlw	101	;'e'
   363  073B  3463               	retlw	99	;'c'
   364  073C  3465               	retlw	101	;'e'
   365  073D  3469               	retlw	105	;'i'
   366  073E  3476               	retlw	118	;'v'
   367  073F  3465               	retlw	101	;'e'
   368  0740  3420               	retlw	32	;' '
   369  0741  3445               	retlw	69	;'E'
   370  0742  3472               	retlw	114	;'r'
   371  0743  3472               	retlw	114	;'r'
   372  0744  346F               	retlw	111	;'o'
   373  0745  3472               	retlw	114	;'r'
   374  0746  3420               	retlw	32	;' '
   375  0747  3421               	retlw	33	;'!'
   376  0748  3421               	retlw	33	;'!'
   377  0749  3400               	retlw	0
   378  074A                     STR_8:	
   379  074A  3441               	retlw	65	;'A'
   380  074B  3464               	retlw	100	;'d'
   381  074C  346A               	retlw	106	;'j'
   382  074D  3475               	retlw	117	;'u'
   383  074E  3473               	retlw	115	;'s'
   384  074F  3474               	retlw	116	;'t'
   385  0750  3420               	retlw	32	;' '
   386  0751  3443               	retlw	67	;'C'
   387  0752  346C               	retlw	108	;'l'
   388  0753  346F               	retlw	111	;'o'
   389  0754  3463               	retlw	99	;'c'
   390  0755  346B               	retlw	107	;'k'
   391  0756  3400               	retlw	0
   392  0757                     STR_10:	
   393  0757  3442               	retlw	66	;'B'
   394  0758  3475               	retlw	117	;'u'
   395  0759  347A               	retlw	122	;'z'
   396  075A  347A               	retlw	122	;'z'
   397  075B  3465               	retlw	101	;'e'
   398  075C  3472               	retlw	114	;'r'
   399  075D  3420               	retlw	32	;' '
   400  075E  3454               	retlw	84	;'T'
   401  075F  3465               	retlw	101	;'e'
   402  0760  3473               	retlw	115	;'s'
   403  0761  3474               	retlw	116	;'t'
   404  0762  3400               	retlw	0
   405  0763                     STR_9:	
   406  0763  3453               	retlw	83	;'S'
   407  0764  3465               	retlw	101	;'e'
   408  0765  3474               	retlw	116	;'t'
   409  0766  3420               	retlw	32	;' '
   410  0767  3454               	retlw	84	;'T'
   411  0768  3469               	retlw	105	;'i'
   412  0769  346D               	retlw	109	;'m'
   413  076A  3465               	retlw	101	;'e'
   414  076B  3472               	retlw	114	;'r'
   415  076C  3400               	retlw	0
   416  076D                     STR_16:	
   417  076D  3450               	retlw	80	;'P'
   418  076E  3465               	retlw	101	;'e'
   419  076F  3472               	retlw	114	;'r'
   420  0770  3469               	retlw	105	;'i'
   421  0771  346F               	retlw	111	;'o'
   422  0772  3464               	retlw	100	;'d'
   423  0773  3420               	retlw	32	;' '
   424  0774  343D               	retlw	61	;'='
   425  0775  3400               	retlw	0
   426  0776                     STR_12:	
   427  0776  3441               	retlw	65	;'A'
   428  0777  344C               	retlw	76	;'L'
   429  0778  3445               	retlw	69	;'E'
   430  0779  3452               	retlw	82	;'R'
   431  077A  344D               	retlw	77	;'M'
   432  077B  3421               	retlw	33	;'!'
   433  077C  3421               	retlw	33	;'!'
   434  077D  3400               	retlw	0
   435  077E                     STR_11:	
   436  077E  3456               	retlw	86	;'V'
   437  077F  3465               	retlw	101	;'e'
   438  0780  3472               	retlw	114	;'r'
   439  0781  3473               	retlw	115	;'s'
   440  0782  3469               	retlw	105	;'i'
   441  0783  346F               	retlw	111	;'o'
   442  0784  346E               	retlw	110	;'n'
   443  0785  3400               	retlw	0
   444  0786                     STR_18:	
   445  0786  3430               	retlw	48	;'0'
   446  0787  3430               	retlw	48	;'0'
   447  0788  342E               	retlw	46	;'.'
   448  0789  3431               	retlw	49	;'1'
   449  078A  3430               	retlw	48	;'0'
   450  078B  3430               	retlw	48	;'0'
   451  078C  3400               	retlw	0
   452  078D                     STR_13:	
   453  078D  3461               	retlw	97	;'a'
   454  078E  3464               	retlw	100	;'d'
   455  078F  346A               	retlw	106	;'j'
   456  0790  3475               	retlw	117	;'u'
   457  0791  3473               	retlw	115	;'s'
   458  0792  3474               	retlw	116	;'t'
   459  0793  3400               	retlw	0
   460  0794                     STR_14:	
   461  0794  3474               	retlw	116	;'t'
   462  0795  3469               	retlw	105	;'i'
   463  0796  346D               	retlw	109	;'m'
   464  0797  3465               	retlw	101	;'e'
   465  0798  3472               	retlw	114	;'r'
   466  0799  3400               	retlw	0
   467  079A                     STR_4:	
   468  079A  3457               	retlw	87	;'W'
   469  079B  3445               	retlw	69	;'E'
   470  079C  3444               	retlw	68	;'D'
   471  079D  3400               	retlw	0
   472  079E                     STR_3:	
   473  079E  3454               	retlw	84	;'T'
   474  079F  3455               	retlw	85	;'U'
   475  07A0  3445               	retlw	69	;'E'
   476  07A1  3400               	retlw	0
   477  07A2                     STR_6:	
   478  07A2  3446               	retlw	70	;'F'
   479  07A3  3452               	retlw	82	;'R'
   480  07A4  3449               	retlw	73	;'I'
   481  07A5  3400               	retlw	0
   482  07A6                     STR_2:	
   483  07A6  344D               	retlw	77	;'M'
   484  07A7  344F               	retlw	79	;'O'
   485  07A8  344E               	retlw	78	;'N'
   486  07A9  3400               	retlw	0
   487  07AA                     STR_1:	
   488  07AA  3453               	retlw	83	;'S'
   489  07AB  3455               	retlw	85	;'U'
   490  07AC  344E               	retlw	78	;'N'
   491  07AD  3400               	retlw	0
   492  07AE                     STR_7:	
   493  07AE  3453               	retlw	83	;'S'
   494  07AF  3441               	retlw	65	;'A'
   495  07B0  3454               	retlw	84	;'T'
   496  07B1  3400               	retlw	0
   497  07B2                     STR_5:	
   498  07B2  3454               	retlw	84	;'T'
   499  07B3  3448               	retlw	72	;'H'
   500  07B4  3455               	retlw	85	;'U'
   501  07B5  3400               	retlw	0
   502  077E                     
   503                           ; #config settings
   504  0000                     
   505                           	psect	cinit
   506  0053                     start_initialization:	
   507  0053                     __initialization:	
   508                           
   509                           ; Clear objects allocated to COMMON
   510  0053  01FA               	clrf	__pbssCOMMON& (0+127)
   511  0054  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   512                           
   513                           ; Clear objects allocated to BANK0
   514  0055  3045               	movlw	low __pbssBANK0
   515  0056  0084               	movwf	4
   516  0057  3000               	movlw	high __pbssBANK0
   517  0058  0085               	movwf	5
   518  0059  3023               	movlw	35
   519  005A  3187  27F7  3180   	fcall	clear_ram0
   520                           
   521                           ; Initialize objects allocated to BANK0
   522  005D  3082               	movlw	low __pidataBANK0
   523  005E  0084               	movwf	4
   524  005F  308E               	movlw	(high __pidataBANK0)| (0+128)
   525  0060  0085               	movwf	5
   526  0061  3068               	movlw	low __pdataBANK0
   527  0062  0086               	movwf	6
   528  0063  3000               	movlw	high __pdataBANK0
   529  0064  0087               	movwf	7
   530  0065  3004               	movlw	4
   531  0066  318E  2686  3180   	fcall	init_ram
   532                           
   533                           ; Initialize objects allocated to BANK1
   534  0069  30AE               	movlw	low __pidataBANK1
   535  006A  0084               	movwf	4
   536  006B  308E               	movlw	(high __pidataBANK1)| (0+128)
   537  006C  0085               	movwf	5
   538  006D  30A0               	movlw	low __pdataBANK1
   539  006E  0086               	movwf	6
   540  006F  3000               	movlw	high __pdataBANK1
   541  0070  0087               	movwf	7
   542  0071  3016               	movlw	22
   543  0072  318E  2686         	fcall	init_ram
   544  0074                     end_of_initialization:	
   545                           ;End of C runtime variable initialization code
   546                           
   547  0074                     __end_of__initialization:	
   548  0074  0020               	movlb	0
   549  0075  3180  2877         	ljmp	_main	;jump to C main() function
   550                           
   551                           	psect	bssCOMMON
   552  007A                     __pbssCOMMON:	
   553  007A                     __@prescaler10ms:	
   554  007A                     	ds	1
   555  007B                     _alerm:	
   556  007B                     	ds	1
   557                           
   558                           	psect	bssBANK0
   559  0045                     __pbssBANK0:	
   560  0045                     _keyCounter_:	
   561  0045                     	ds	6
   562  004B                     _events_:	
   563  004B                     	ds	3
   564  004E                     _currentValueInfo:	
   565  004E                     	ds	2
   566  0050                     _blinkPrescaler:	
   567  0050                     	ds	1
   568  0051                     _currentEditValue:	
   569  0051                     	ds	1
   570  0052                     _cursorPosition:	
   571  0052                     	ds	1
   572  0053                     _editSelect:	
   573  0053                     	ds	1
   574  0054                     _keyBeepCounter_:	
   575  0054                     	ds	1
   576  0055                     _machineState_:	
   577  0055                     	ds	1
   578  0056                     _menuSelect:	
   579  0056                     	ds	1
   580  0057                     _sampledPortAState_:	
   581  0057                     	ds	1
   582  0058                     main@prevPortAState:	
   583  0058                     	ds	1
   584  0059                     _dateCurrent:	
   585  0059                     	ds	7
   586  0060                     _dateTimer:	
   587  0060                     	ds	7
   588  0067                     _datePtr:	
   589  0067                     	ds	1
   590                           
   591                           	psect	dataBANK0
   592  0068                     __pdataBANK0:	
   593  0068                     main@F4324:	
   594  0068                     	ds	4
   595                           
   596                           	psect	dataBANK1
   597  00A0                     __pdataBANK1:	
   598  00A0                     _STR_DAY_OF_WEEK:	
   599  00A0                     	ds	14
   600  00AE                     _MESSAGE_MENU:	
   601  00AE                     	ds	8
   602                           
   603                           	psect	clrtext
   604  07F7                     clear_ram0:	
   605                           ;	Called with FSR0 containing the base address, and
   606                           ;	WREG with the size to clear
   607                           
   608  07F7  0064               	clrwdt	;clear the watchdog before getting into this loop
   609  07F8                     clrloop0:	
   610  07F8  0180               	clrf	0	;clear RAM location pointed to by FSR
   611  07F9  3101               	addfsr 0,1
   612  07FA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   613  07FB  2FF8               	goto	clrloop0	;have we reached the end yet?
   614  07FC  3400               	retlw	0	;all done for this memory range, return
   615                           
   616                           	psect	inittext
   617  0E86                     init_ram:	
   618  0E86  00FE               	movwf	126
   619  0E87                     initloop:	
   620  0E87  0012               	moviw fsr0++
   621  0E88  001E               	movwi fsr1++
   622  0E89  0BFE               	decfsz	126,f
   623  0E8A  2E87               	goto	initloop
   624  0E8B  3400               	retlw	0
   625                           
   626                           	psect	cstackCOMMON
   627  0070                     __pcstackCOMMON:	
   628  0070                     ?_initialize:	
   629  0070                     ?_ParallelLCD_ClearRow:	
   630                           ; 0 bytes @ 0x0
   631                           
   632  0070                     ?__:	
   633                           ; 0 bytes @ 0x0
   634                           
   635  0070                     ??__:	
   636                           ; 0 bytes @ 0x0
   637                           
   638  0070                     ?_DS1307_SetClock:	
   639                           ; 0 bytes @ 0x0
   640                           
   641  0070                     ?_main:	
   642                           ; 1 bytes @ 0x0
   643                           
   644                           
   645                           ; 2 bytes @ 0x0
   646  0070                     	ds	2
   647  0072                     ?_ParallelLCD_WriteByte:	
   648  0072                     ??_initialize:	
   649                           ; 0 bytes @ 0x2
   650                           
   651  0072                     ?__date_time_ConvertByteToDate:	
   652                           ; 0 bytes @ 0x2
   653                           
   654  0072                     ?__date_time_ConvertByteToTime:	
   655                           ; 0 bytes @ 0x2
   656                           
   657  0072                     ?__date_time_ConvertByteToDiscrete:	
   658                           ; 0 bytes @ 0x2
   659                           
   660  0072                     ??_DS1307_SetClock:	
   661                           ; 0 bytes @ 0x2
   662                           
   663  0072                     ?_DS1307_GetData:	
   664                           ; 0 bytes @ 0x2
   665                           
   666  0072                     ParallelLCD_WriteByte@r:	
   667                           ; 1 bytes @ 0x2
   668                           
   669  0072                     __date_time_ConvertByteToDate@stinrg:	
   670                           ; 1 bytes @ 0x2
   671                           
   672  0072                     __date_time_ConvertByteToTime@string:	
   673                           ; 1 bytes @ 0x2
   674                           
   675  0072                     __date_time_ConvertByteToDiscrete@string:	
   676                           ; 1 bytes @ 0x2
   677                           
   678  0072                     DS1307_GetData@ramAddress:	
   679                           ; 1 bytes @ 0x2
   680                           
   681                           
   682                           ; 1 bytes @ 0x2
   683  0072                     	ds	1
   684  0073                     ??_ParallelLCD_WriteByte:	
   685  0073                     ??__date_time_ConvertByteToDate:	
   686                           ; 0 bytes @ 0x3
   687                           
   688  0073                     ??__date_time_ConvertByteToTime:	
   689                           ; 0 bytes @ 0x3
   690                           
   691  0073                     __date_time_ConvertByteToDiscrete@select:	
   692                           ; 0 bytes @ 0x3
   693                           
   694  0073                     DS1307_GetData@length:	
   695                           ; 1 bytes @ 0x3
   696                           
   697  0073                     DS1307_SetClock@datePtr:	
   698                           ; 1 bytes @ 0x3
   699                           
   700                           
   701                           ; 1 bytes @ 0x3
   702  0073                     	ds	1
   703  0074                     ??__date_time_ConvertByteToDiscrete:	
   704  0074                     ??_DS1307_GetData:	
   705                           ; 0 bytes @ 0x4
   706                           
   707  0074                     ParallelLCD_WriteByte@data:	
   708                           ; 0 bytes @ 0x4
   709                           
   710  0074                     DS1307_SetClock@date:	
   711                           ; 1 bytes @ 0x4
   712                           
   713                           
   714                           ; 1 bytes @ 0x4
   715  0074                     	ds	1
   716  0075                     ?_ParallelLCD_Initialize:	
   717  0075                     ?_ParallelLCD_WriteCharacter:	
   718                           ; 0 bytes @ 0x5
   719                           
   720  0075                     ?_ParallelLCD_WriteString:	
   721                           ; 0 bytes @ 0x5
   722                           
   723  0075                     ?_ParallelLCD_WriteStringClearing:	
   724                           ; 0 bytes @ 0x5
   725                           
   726  0075                     ??_ParallelLCD_ClearRow:	
   727                           ; 0 bytes @ 0x5
   728                           
   729  0075                     ?_ParallelLCD_ClearPartial:	
   730                           ; 0 bytes @ 0x5
   731                           
   732  0075                     ?_ParallelLCD_SetCgram:	
   733                           ; 0 bytes @ 0x5
   734                           
   735  0075                     ParallelLCD_Initialize@configDisplay:	
   736                           ; 0 bytes @ 0x5
   737                           
   738  0075                     ParallelLCD_WriteCharacter@character:	
   739                           ; 1 bytes @ 0x5
   740                           
   741  0075                     ParallelLCD_WriteString@stringPtr:	
   742                           ; 1 bytes @ 0x5
   743                           
   744  0075                     ParallelLCD_ClearPartial@length:	
   745                           ; 1 bytes @ 0x5
   746                           
   747  0075                     __date_time_ConvertByteToTime@dateTime:	
   748                           ; 1 bytes @ 0x5
   749                           
   750  0075                     DS1307_SetClock@i:	
   751                           ; 1 bytes @ 0x5
   752                           
   753  0075                     ParallelLCD_WriteStringClearing@stringPtr:	
   754                           ; 1 bytes @ 0x5
   755                           
   756  0075                     ParallelLCD_SetCgram@bitmap:	
   757                           ; 2 bytes @ 0x5
   758                           
   759                           
   760                           ; 2 bytes @ 0x5
   761  0075                     	ds	1
   762  0076                     ??_ParallelLCD_WriteCharacter:	
   763  0076                     ??_ParallelLCD_WriteString:	
   764                           ; 0 bytes @ 0x6
   765                           
   766  0076                     ??_ParallelLCD_ClearPartial:	
   767                           ; 0 bytes @ 0x6
   768                           
   769  0076                     ParallelLCD_Initialize@configCursor:	
   770                           ; 0 bytes @ 0x6
   771                           
   772  0076                     ParallelLCD_WriteCharacter@position:	
   773                           ; 1 bytes @ 0x6
   774                           
   775  0076                     ParallelLCD_ClearRow@rowSelect:	
   776                           ; 1 bytes @ 0x6
   777                           
   778  0076                     __date_time_ConvertByteToDate@dateTime:	
   779                           ; 1 bytes @ 0x6
   780                           
   781  0076                     DS1307_GetData@datePtr:	
   782                           ; 1 bytes @ 0x6
   783                           
   784                           
   785                           ; 1 bytes @ 0x6
   786  0076                     	ds	1
   787  0077                     ??_ParallelLCD_WriteStringClearing:	
   788  0077                     ??_ParallelLCD_SetCgram:	
   789                           ; 0 bytes @ 0x7
   790                           
   791  0077                     ParallelLCD_Initialize@configEntryMode:	
   792                           ; 0 bytes @ 0x7
   793                           
   794  0077                     ParallelLCD_WriteString@position:	
   795                           ; 1 bytes @ 0x7
   796                           
   797  0077                     ParallelLCD_ClearRow@i:	
   798                           ; 1 bytes @ 0x7
   799                           
   800  0077                     ParallelLCD_ClearPartial@position:	
   801                           ; 1 bytes @ 0x7
   802                           
   803  0077                     __date_time_ConvertByteToDiscrete@dateTime:	
   804                           ; 1 bytes @ 0x7
   805                           
   806  0077                     DS1307_GetData@date:	
   807                           ; 1 bytes @ 0x7
   808                           
   809                           
   810                           ; 1 bytes @ 0x7
   811  0077                     	ds	1
   812  0078                     ??_ParallelLCD_Initialize:	
   813  0078                     ParallelLCD_Initialize@configFunction:	
   814                           ; 0 bytes @ 0x8
   815                           
   816  0078                     ParallelLCD_WriteStringClearing@position:	
   817                           ; 1 bytes @ 0x8
   818                           
   819  0078                     ParallelLCD_ClearPartial@i:	
   820                           ; 1 bytes @ 0x8
   821                           
   822  0078                     ParallelLCD_SetCgram@charCode:	
   823                           ; 1 bytes @ 0x8
   824                           
   825  0078                     DS1307_GetData@dataCount:	
   826                           ; 1 bytes @ 0x8
   827                           
   828                           
   829                           ; 1 bytes @ 0x8
   830  0078                     	ds	1
   831  0079                     ParallelLCD_WriteStringClearing@i:	
   832  0079                     ParallelLCD_SetCgram@i:	
   833                           ; 1 bytes @ 0x9
   834                           
   835                           
   836                           ; 1 bytes @ 0x9
   837  0079                     	ds	1
   838                           
   839                           	psect	cstackBANK0
   840  0020                     __pcstackBANK0:	
   841  0020                     ??_main:	
   842                           
   843                           ; 0 bytes @ 0x0
   844  0020                     	ds	3
   845  0023                     main@string:	
   846                           
   847                           ; 17 bytes @ 0x3
   848  0023                     	ds	17
   849  0034                     main@valueString:	
   850                           
   851                           ; 4 bytes @ 0x14
   852  0034                     	ds	4
   853  0038                     main@keyReleased:	
   854                           
   855                           ; 1 bytes @ 0x18
   856  0038                     	ds	1
   857  0039                     main@isTimeToAlerm:	
   858                           
   859                           ; 1 bytes @ 0x19
   860  0039                     	ds	1
   861  003A                     main@tmpValue:	
   862                           
   863                           ; 1 bytes @ 0x1A
   864  003A                     	ds	1
   865  003B                     main@isNonZero:	
   866                           
   867                           ; 1 bytes @ 0x1B
   868  003B                     	ds	1
   869  003C                     main@keyChange:	
   870                           
   871                           ; 1 bytes @ 0x1C
   872  003C                     	ds	1
   873  003D                     main@compareUnit:	
   874                           
   875                           ; 1 bytes @ 0x1D
   876  003D                     	ds	1
   877  003E                     main@string_880:	
   878                           
   879                           ; 4 bytes @ 0x1E
   880  003E                     	ds	4
   881  0042                     main@keyPressed:	
   882                           
   883                           ; 1 bytes @ 0x22
   884  0042                     	ds	1
   885  0043                     main@portAState:	
   886                           
   887                           ; 1 bytes @ 0x23
   888  0043                     	ds	1
   889  0044                     main@i:	
   890                           
   891                           ; 1 bytes @ 0x24
   892  0044                     	ds	1
   893                           
   894                           	psect	maintext
   895  0077                     __pmaintext:	
   896 ;;
   897 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   898 ;;
   899 ;; *************** function _main *****************
   900 ;; Defined at:
   901 ;;		line 216 in file "src/main.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  compareUnit     1   29[BANK0 ] unsigned char 
   906 ;;  i               1   36[BANK0 ] unsigned char 
   907 ;;  valueString     4   20[BANK0 ] unsigned char [4]
   908 ;;  isNonZero       1   27[BANK0 ] unsigned char 
   909 ;;  tmpValue        1   26[BANK0 ] unsigned char 
   910 ;;  string         17    3[BANK0 ] unsigned char [17]
   911 ;;  isTimeToAler    1   25[BANK0 ] enum E4074
   912 ;;  string          4   30[BANK0 ] unsigned char [4]
   913 ;;  portAState      1   35[BANK0 ] struct .
   914 ;;  keyPressed      1   34[BANK0 ] struct .
   915 ;;  keyChange       1   28[BANK0 ] struct .
   916 ;;  keyReleased     1   24[BANK0 ] struct .
   917 ;; Return value:  Size  Location     Type
   918 ;;                  2  261[None  ] int 
   919 ;; Registers used:
   920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : B1F/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   926 ;;      Params:         0       0       0       0
   927 ;;      Locals:         0      34       0       0
   928 ;;      Temps:          0       3       0       0
   929 ;;      Totals:         0      37       0       0
   930 ;;Total ram usage:       37 bytes
   931 ;; Hardware stack levels required when called:    3
   932 ;; This function calls:
   933 ;;		_DS1307_GetData
   934 ;;		_DS1307_SetClock
   935 ;;		_ParallelLCD_ClearPartial
   936 ;;		_ParallelLCD_ClearRow
   937 ;;		_ParallelLCD_Initialize
   938 ;;		_ParallelLCD_SetCgram
   939 ;;		_ParallelLCD_WriteCharacter
   940 ;;		_ParallelLCD_WriteString
   941 ;;		_ParallelLCD_WriteStringClearing
   942 ;;		__date_time_ConvertByteToDate
   943 ;;		__date_time_ConvertByteToDiscrete
   944 ;;		__date_time_ConvertByteToTime
   945 ;;		_initialize
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function _main
   953  0077                     _main:	
   954                           
   955                           ;main.c: 218: initialize( ) ;
   956                           
   957                           ;incstack = 0
   958                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   959  0077  3187  27B6  3180   	fcall	_initialize
   960                           
   961                           ;main.c: 220: PWM3DCH = ( PR2 >> 2 ) ;
   962  007A  0020               	movlb	0	; select bank0
   963  007B  081B               	movf	27,w	;volatile
   964  007C  00A0               	movwf	??_main
   965  007D  3002               	movlw	2
   966  007E                     u1765:	
   967  007E  36A0               	lsrf	??_main,f
   968  007F  0B89               	decfsz	9,f
   969  0080  287E               	goto	u1765
   970  0081  0820               	movf	??_main,w
   971  0082  002C               	movlb	12	; select bank12
   972  0083  0098               	movwf	24	;volatile
   973                           
   974                           ;main.c: 221: PWM3DCL = ( ( PR2 & 0b11 ) << 6 ) ;
   975  0084  0020               	movlb	0	; select bank0
   976  0085  081B               	movf	27,w	;volatile
   977  0086  3903               	andlw	3
   978  0087  00A0               	movwf	??_main
   979  0088  3005               	movlw	5
   980  0089                     u1775:	
   981  0089  35A0               	lslf	??_main,f
   982  008A  3EFF               	addlw	-1
   983  008B  1D03               	skipz
   984  008C  2889               	goto	u1775
   985  008D  3520               	lslf	??_main,w
   986  008E  002C               	movlb	12	; select bank12
   987  008F  0097               	movwf	23	;volatile
   988                           
   989                           ;main.c: 222: PWM3OE = 0 ;
   990  0090  1319               	bcf	25,6	;volatile
   991                           
   992                           ;main.c: 225: DS1307_GetData( &dateTimer , 0x10 , 7 ) ;
   993  0091  3010               	movlw	16
   994  0092  0020               	movlb	0	; select bank0
   995  0093  00A0               	movwf	??_main
   996  0094  0820               	movf	??_main,w
   997  0095  00F2               	movwf	DS1307_GetData@ramAddress
   998  0096  3007               	movlw	7
   999  0097  00A1               	movwf	??_main+1
  1000  0098  0821               	movf	??_main+1,w
  1001  0099  00F3               	movwf	DS1307_GetData@length
  1002  009A  3060               	movlw	(low (_dateTimer| 0))& (0+255)
  1003  009B  318F  27A2  3180   	fcall	_DS1307_GetData
  1004                           
  1005                           ;main.c: 228: ParallelLCD_Initialize(
  1006                           ;main.c: 229: PARALLEL_LCD_CONFIG_8BIT_MODE | PARALLEL_LCD_CONFIG_2LINE_MODE ,
  1007                           ;main.c: 230: PARALLEL_LCD_CONFIG_DISPLAY_ON ,
  1008                           ;main.c: 231: PARALLEL_LCD_CONFIG_CURSOR_NONE ,
  1009                           ;main.c: 232: PARALLEL_LCD_CONFIG_INCREMENTAL
  1010                           ;main.c: 233: ) ;
  1011  009E  3004               	movlw	4
  1012  009F  0020               	movlb	0	; select bank0
  1013  00A0  00A0               	movwf	??_main
  1014  00A1  0820               	movf	??_main,w
  1015  00A2  00F5               	movwf	ParallelLCD_Initialize@configDisplay
  1016  00A3  01F6               	clrf	ParallelLCD_Initialize@configCursor
  1017  00A4  3002               	movlw	2
  1018  00A5  00A1               	movwf	??_main+1
  1019  00A6  0821               	movf	??_main+1,w
  1020  00A7  00F7               	movwf	ParallelLCD_Initialize@configEntryMode
  1021  00A8  3018               	movlw	24
  1022  00A9  3186  26E3  3180   	fcall	_ParallelLCD_Initialize
  1023                           
  1024                           ;main.c: 236: ParallelLCD_SetCgram( 0x00 , CURSOR_BITMAP ) ;
  1025  00AC  3031               	movlw	low (_CURSOR_BITMAP| (0+32768))
  1026  00AD  00F5               	movwf	ParallelLCD_SetCgram@bitmap
  1027  00AE  3087               	movlw	high (_CURSOR_BITMAP| (0+32768))
  1028  00AF  00F6               	movwf	ParallelLCD_SetCgram@bitmap+1
  1029  00B0  3000               	movlw	0
  1030  00B1  318F  270C  3180   	fcall	_ParallelLCD_SetCgram
  1031                           
  1032                           ;main.c: 238: events_.output.updateClock=1 ;
  1033  00B4  0020               	movlb	0	; select bank0
  1034  00B5  144D               	bsf	_events_+2,0
  1035                           
  1036                           ;main.c: 239: machineState_ = STATE_CLOCK ;
  1037  00B6  01D5               	clrf	_machineState_
  1038  00B7  0AD5               	incf	_machineState_,f
  1039                           
  1040                           ;main.c: 240: datePtr = &dateCurrent ;
  1041  00B8  3059               	movlw	(low (_dateCurrent| 0))& (0+255)
  1042  00B9  00A0               	movwf	??_main
  1043  00BA  0820               	movf	??_main,w
  1044  00BB  00E7               	movwf	_datePtr
  1045                           
  1046                           ;main.c: 242: INTCONbits.TMR0IF = 0 ;
  1047  00BC  110B               	bcf	11,2	;volatile
  1048                           
  1049                           ;main.c: 243: INTCONbits.TMR0IE = 1 ;
  1050  00BD  168B               	bsf	11,5	;volatile
  1051                           
  1052                           ;main.c: 244: IOCIE = 0 ;
  1053  00BE  118B               	bcf	11,3	;volatile
  1054  00BF                     l262:	
  1055                           ;main.c: 246: for( ; ; ) {
  1056                           
  1057  00BF  0064               	clrwdt	;# 
  1058                           
  1059                           ;main.c: 251: if( (events_.output.updateClock&&!(events_.output.updateClock=0)) ) {
  1060  00C0  0020               	movlb	0	; select bank0
  1061  00C1  1C4D               	btfss	_events_+2,0
  1062  00C2  2908               	goto	l263
  1063  00C3  104D               	bcf	_events_+2,0
  1064                           
  1065                           ;main.c: 254: if( DS1307_GetData( &dateCurrent , 0x00 , 7 ) ) {
  1066  00C4  01F2               	clrf	DS1307_GetData@ramAddress
  1067  00C5  3007               	movlw	7
  1068  00C6  00A0               	movwf	??_main
  1069  00C7  0820               	movf	??_main,w
  1070  00C8  00F3               	movwf	DS1307_GetData@length
  1071  00C9  3059               	movlw	(low (_dateCurrent| 0))& (0+255)
  1072  00CA  318F  27A2  3180   	fcall	_DS1307_GetData
  1073  00CD  3A00               	xorlw	0
  1074  00CE  1903               	skipnz
  1075  00CF  28D3               	goto	l1884
  1076                           
  1077                           ;main.c: 255: machineState_ = STATE_ERROR ;
  1078  00D0  3008               	movlw	8
  1079  00D1  0020               	movlb	0	; select bank0
  1080  00D2  2905               	goto	L1
  1081  00D3                     l1884:	
  1082                           ;main.c: 256: }
  1083                           
  1084                           
  1085                           ;main.c: 257: else {
  1086                           ;main.c: 260: Bool_t isTimeToAlerm = BOOL_FALSE ;
  1087  00D3  0020               	movlb	0	; select bank0
  1088  00D4  01B9               	clrf	main@isTimeToAlerm
  1089                           
  1090                           ;main.c: 261: if( dateCurrent.date == dateTimer.date && dateCurrent.time == dateTimer.ti
      +                          me ) {
  1091  00D5  3004               	movlw	4
  1092  00D6  3E59               	addlw	(low (_dateCurrent| 0))& (0+255)
  1093  00D7  0086               	movwf	6
  1094  00D8  0187               	clrf	7
  1095  00D9  3F40               	moviw [0]fsr1
  1096  00DA  0664               	xorwf	_dateTimer+4,w
  1097  00DB  1D03               	skipz
  1098  00DC  28E3               	goto	u1805
  1099  00DD  3F41               	moviw [1]fsr1
  1100  00DE  0665               	xorwf	_dateTimer+5,w
  1101  00DF  1D03               	skipz
  1102  00E0  28E3               	goto	u1805
  1103  00E1  3F42               	moviw [2]fsr1
  1104  00E2  0666               	xorwf	_dateTimer+6,w
  1105  00E3                     u1805:	
  1106  00E3  1D03               	skipz
  1107  00E4  28FA               	goto	l266
  1108  00E5  0862               	movf	_dateTimer+2,w
  1109  00E6  065B               	xorwf	_dateCurrent+2,w
  1110  00E7  1D03               	skipz
  1111  00E8  28EF               	goto	u1815
  1112  00E9  0861               	movf	_dateTimer+1,w
  1113  00EA  065A               	xorwf	_dateCurrent+1,w
  1114  00EB  1D03               	skipz
  1115  00EC  28EF               	goto	u1815
  1116  00ED  0860               	movf	_dateTimer,w
  1117  00EE  0659               	xorwf	_dateCurrent,w
  1118  00EF                     u1815:	
  1119  00EF  1D03               	skipz
  1120  00F0  28FA               	goto	l266
  1121                           
  1122                           ;main.c: 262: if( !dateTimer.dayOfWeek || dateCurrent.dayOfWeek == dateTimer.dayOfWeek )
  1123  00F1  0863               	movf	_dateTimer+3,w
  1124  00F2  1903               	btfsc	3,2
  1125  00F3  28FA               	goto	l266
  1126  00F4  085C               	movf	_dateCurrent+3,w
  1127  00F5  0663               	xorwf	_dateTimer+3,w
  1128  00F6  1903               	btfsc	3,2
  1129  00F7  28FA               	goto	l266
  1130                           
  1131                           ;main.c: 264: else
  1132                           ;main.c: 265: isTimeToAlerm = BOOL_TRUE ;
  1133  00F8  01B9               	clrf	main@isTimeToAlerm
  1134  00F9  0AB9               	incf	main@isTimeToAlerm,f
  1135  00FA                     l266:	
  1136                           
  1137                           ;main.c: 266: }
  1138                           ;main.c: 267: events_.output.changeMessage=1 ;
  1139  00FA  14CD               	bsf	_events_+2,1
  1140                           
  1141                           ;main.c: 269: if( isTimeToAlerm ) machineState_ = STATE_ALERM ;
  1142  00FB  0839               	movf	main@isTimeToAlerm,w
  1143  00FC  1903               	btfsc	3,2
  1144  00FD  2902               	goto	l1898
  1145  00FE  3004               	movlw	4
  1146  00FF  00A0               	movwf	??_main
  1147  0100  0820               	movf	??_main,w
  1148  0101  00D5               	movwf	_machineState_
  1149  0102                     l1898:	
  1150                           
  1151                           ;main.c: 270: if( dateCurrent.clockHalt ) machineState_ = STATE_ERROR ;
  1152  0102  1FD9               	btfss	_dateCurrent,7
  1153  0103  2908               	goto	l263
  1154  0104  3008               	movlw	8
  1155  0105                     L1:	
  1156  0105  00A0               	movwf	??_main
  1157  0106  0820               	movf	??_main,w
  1158  0107  00D5               	movwf	_machineState_
  1159  0108                     l263:	
  1160                           
  1161                           ;main.c: 271: }
  1162                           ;main.c: 273: }
  1163                           ;main.c: 275: static UniPortA prevPortAState = { 0x00 } ;
  1164                           ;main.c: 276: UniPortA portAState , keyChange , keyPressed , keyReleased ;
  1165                           ;main.c: 279: portAState.byte = sampledPortAState_.byte ;
  1166  0108  0857               	movf	_sampledPortAState_,w
  1167  0109  00A0               	movwf	??_main
  1168  010A  0820               	movf	??_main,w
  1169  010B  00C3               	movwf	main@portAState
  1170                           
  1171                           ;main.c: 280: keyChange.byte = portAState.byte ^ prevPortAState.byte ;
  1172  010C  0843               	movf	main@portAState,w
  1173  010D  0658               	xorwf	main@prevPortAState,w
  1174  010E  00A0               	movwf	??_main
  1175  010F  0820               	movf	??_main,w
  1176  0110  00BC               	movwf	main@keyChange
  1177                           
  1178                           ;main.c: 281: keyPressed.byte = keyChange.byte & portAState.byte ;
  1179  0111  083C               	movf	main@keyChange,w
  1180  0112  0543               	andwf	main@portAState,w
  1181  0113  00A0               	movwf	??_main
  1182  0114  0820               	movf	??_main,w
  1183  0115  00C2               	movwf	main@keyPressed
  1184                           
  1185                           ;main.c: 282: keyReleased.byte = keyChange.byte & ~portAState.byte ;
  1186  0116  0943               	comf	main@portAState,w
  1187  0117  053C               	andwf	main@keyChange,w
  1188  0118  00A0               	movwf	??_main
  1189  0119  0820               	movf	??_main,w
  1190  011A  00B8               	movwf	main@keyReleased
  1191                           
  1192                           ;main.c: 283: prevPortAState.byte = portAState.byte ;
  1193  011B  0843               	movf	main@portAState,w
  1194  011C  00A0               	movwf	??_main
  1195  011D  0820               	movf	??_main,w
  1196  011E  00D8               	movwf	main@prevPortAState
  1197                           
  1198                           ;main.c: 286: if( keyPressed.keyUp || (events_.keyPress.upHold&&!(events_.keyPress.upHol
      +                          d=0)) ) {
  1199  011F  18C2               	btfsc	main@keyPressed,1
  1200  0120  2924               	goto	l277
  1201  0121  1CCB               	btfss	_events_,1
  1202  0122  2929               	goto	l275
  1203  0123  10CB               	bcf	_events_,1
  1204  0124                     l277:	
  1205                           
  1206                           ;main.c: 287: if( portAState.keyDown )
  1207  0124  1C43               	btfss	main@portAState,0
  1208  0125  2928               	goto	l278
  1209                           
  1210                           ;main.c: 288: events_.keyPress.upDown=1 ;
  1211  0126  164B               	bsf	_events_,4
  1212  0127  2929               	goto	l275
  1213  0128                     l278:	
  1214                           
  1215                           ;main.c: 289: else
  1216                           ;main.c: 290: events_.keyPress.up=1 ;
  1217  0128  144B               	bsf	_events_,0
  1218  0129                     l275:	
  1219                           
  1220                           ;main.c: 291: }
  1221                           ;main.c: 294: if( keyPressed.keyDown || (events_.keyPress.downHold&&!(events_.keyPress.d
      +                          ownHold=0)) ) {
  1222  0129  1842               	btfsc	main@keyPressed,0
  1223  012A  292E               	goto	l282
  1224  012B  1DCB               	btfss	_events_,3
  1225  012C  2933               	goto	l280
  1226  012D  11CB               	bcf	_events_,3
  1227  012E                     l282:	
  1228                           
  1229                           ;main.c: 295: if( portAState.keyUp )
  1230  012E  1CC3               	btfss	main@portAState,1
  1231  012F  2932               	goto	l283
  1232                           
  1233                           ;main.c: 296: events_.keyPress.upDown=1 ;
  1234  0130  164B               	bsf	_events_,4
  1235  0131  2933               	goto	l280
  1236  0132                     l283:	
  1237                           
  1238                           ;main.c: 297: else
  1239                           ;main.c: 298: events_.keyPress.down=1 ;
  1240  0132  154B               	bsf	_events_,2
  1241  0133                     l280:	
  1242                           
  1243                           ;main.c: 299: }
  1244                           ;main.c: 302: if( keyPressed.keyLeft ) {
  1245  0133  1AC2               	btfsc	main@keyPressed,5
  1246                           
  1247                           ;main.c: 303: events_.keyPress.left=1 ;
  1248  0134  16CB               	bsf	_events_,5
  1249                           
  1250                           ;main.c: 304: }
  1251                           ;main.c: 307: if( keyPressed.keyRight ) {
  1252  0135  1A42               	btfsc	main@keyPressed,4
  1253                           
  1254                           ;main.c: 308: events_.keyPress.right=1 ;
  1255  0136  174B               	bsf	_events_,6
  1256                           
  1257                           ;main.c: 309: }
  1258                           ;main.c: 310: if( keyReleased.keyRight ) {
  1259  0137  1A38               	btfsc	main@keyReleased,4
  1260                           
  1261                           ;main.c: 311: events_.keyRelease.right=1 ;
  1262  0138  144C               	bsf	_events_+1,0
  1263                           
  1264                           ;main.c: 312: }
  1265                           ;main.c: 315: if( events_.keyPress.byte ) {
  1266  0139  084B               	movf	_events_,w
  1267  013A  1903               	btfsc	3,2
  1268  013B  2941               	goto	l1936
  1269                           
  1270                           ;main.c: 316: keyBeepCounter_ = 20 ;
  1271  013C  3014               	movlw	20
  1272  013D  00A0               	movwf	??_main
  1273  013E  0820               	movf	??_main,w
  1274  013F  00D4               	movwf	_keyBeepCounter_
  1275                           
  1276                           ;main.c: 317: events_.output.soundOn=1 ;
  1277  0140  15CD               	bsf	_events_+2,3
  1278  0141                     l1936:	
  1279                           
  1280                           ;main.c: 318: }
  1281                           ;main.c: 321: if( (events_.keyPress.leftRightHold&&!(events_.keyPress.leftRightHold=0)) 
      +                          ) {
  1282  0141  1FCB               	btfss	_events_,7
  1283  0142  2956               	goto	l289
  1284  0143  13CB               	bcf	_events_,7
  1285                           
  1286                           ;main.c: 323: events_.output.changeMessage=1 ;
  1287  0144  14CD               	bsf	_events_+2,1
  1288                           
  1289                           ;main.c: 325: switch( machineState_ ) {
  1290  0145  294E               	goto	l1946
  1291  0146                     l1940:	
  1292                           ;main.c: 327: case STATE_ADJUST_CLOCK:
  1293                           
  1294                           
  1295                           ;main.c: 328: DS1307_SetClock( &dateCurrent ) ;
  1296  0146  3059               	movlw	(low (_dateCurrent| 0))& (0+255)
  1297  0147  318F  2765  3180   	fcall	_DS1307_SetClock
  1298                           
  1299                           ;main.c: 329: machineState_ = STATE_CLOCK ;
  1300  014A  0020               	movlb	0	; select bank0
  1301  014B                     l293:	
  1302                           ;main.c: 332: case STATE_SET_TIMER:
  1303                           
  1304                           ;main.c: 330: break ;
  1305                           
  1306                           
  1307                           ;main.c: 333: machineState_ = STATE_CLOCK ;
  1308  014B  01D5               	clrf	_machineState_
  1309  014C  0AD5               	incf	_machineState_,f
  1310                           
  1311                           ;main.c: 336: }
  1312                           
  1313                           ;main.c: 334: break ;
  1314  014D  2956               	goto	l289
  1315  014E                     l1946:	
  1316  014E  0855               	movf	_machineState_,w
  1317                           
  1318                           ; Switch size 1, requested type "space"
  1319                           ; Number of cases is 2, Range of values is 3 to 5
  1320                           ; switch strategies available:
  1321                           ; Name         Instructions Cycles
  1322                           ; simple_byte            7     4 (average)
  1323                           ; direct_byte           15     9 (fixed)
  1324                           ; jumptable            263     9 (fixed)
  1325                           ;	Chosen strategy is simple_byte
  1326  014F  3A03               	xorlw	3	; case 3
  1327  0150  1903               	skipnz
  1328  0151  2946               	goto	l1940
  1329  0152  3A06               	xorlw	6	; case 5
  1330  0153  1903               	skipnz
  1331  0154  294B               	goto	l293
  1332  0155  2956               	goto	l289
  1333  0156                     l289:	
  1334                           
  1335                           ;main.c: 337: }
  1336                           ;main.c: 340: if( (events_.keyPress.left&&!(events_.keyPress.left=0)) ) {
  1337  0156  1ECB               	btfss	_events_,5
  1338  0157  2990               	goto	l294
  1339  0158  12CB               	bcf	_events_,5
  1340                           
  1341                           ;main.c: 342: switch( machineState_ ) {
  1342  0159  297F               	goto	l1968
  1343  015A                     l296:	
  1344                           ;main.c: 344: case STATE_MENU:
  1345                           
  1346                           
  1347                           ;main.c: 345: machineState_ = STATE_CLOCK ;
  1348  015A  01D5               	clrf	_machineState_
  1349  015B  0AD5               	incf	_machineState_,f
  1350  015C  297D               	goto	l1964
  1351  015D                     l1950:	
  1352                           ;main.c: 349: case STATE_ADJUST_CLOCK:
  1353                           
  1354                           ;main.c: 347: break ;
  1355                           
  1356                           ;main.c: 346: events_.output.changeMessage=1 ;
  1357                           
  1358                           
  1359                           ;main.c: 350: case STATE_SET_TIMER:
  1360                           ;main.c: 351: if( editSelect == DATE_ITEM_YEAR ) {
  1361  015D  0853               	movf	_editSelect,w
  1362  015E  1D03               	btfss	3,2
  1363  015F  296D               	goto	l1954
  1364                           
  1365                           ;main.c: 352: editSelect = DATE_ITEM_SECOND ;
  1366  0160  3006               	movlw	6
  1367  0161  00A0               	movwf	??_main
  1368  0162  0820               	movf	??_main,w
  1369  0163  00D3               	movwf	_editSelect
  1370                           
  1371                           ;main.c: 353: currentValueInfo = &VALUE_INFORMATIONS.second ;
  1372  0164  302D               	movlw	low ((_VALUE_INFORMATIONS| (0+32768)+24))
  1373  0165  00CE               	movwf	_currentValueInfo
  1374  0166  3087               	movlw	high ((_VALUE_INFORMATIONS| (0+32768)+24))
  1375  0167  00CF               	movwf	_currentValueInfo+1
  1376                           
  1377                           ;main.c: 354: currentEditValue = &datePtr->second ;
  1378  0168  0867               	movf	_datePtr,w
  1379  0169  00A0               	movwf	??_main
  1380  016A  0820               	movf	??_main,w
  1381  016B  00D1               	movwf	_currentEditValue
  1382                           
  1383                           ;main.c: 355: }
  1384  016C  2977               	goto	l1960
  1385  016D                     l1954:	
  1386                           
  1387                           ;main.c: 356: else {
  1388                           ;main.c: 357: editSelect-- ;
  1389  016D  3001               	movlw	1
  1390  016E  02D3               	subwf	_editSelect,f
  1391                           
  1392                           ;main.c: 358: currentValueInfo-- ;
  1393  016F  3004               	movlw	4
  1394  0170  02CE               	subwf	_currentValueInfo,f
  1395  0171  3000               	movlw	0
  1396  0172  3BCF               	subwfb	_currentValueInfo+1,f
  1397                           
  1398                           ;main.c: 359: currentEditValue++ ;
  1399  0173  3001               	movlw	1
  1400  0174  00A0               	movwf	??_main
  1401  0175  0820               	movf	??_main,w
  1402  0176  07D1               	addwf	_currentEditValue,f
  1403  0177                     l1960:	
  1404                           
  1405                           ;main.c: 360: }
  1406                           ;main.c: 362: blinkPrescaler = 0 ;
  1407  0177  01D0               	clrf	_blinkPrescaler
  1408                           
  1409                           ;main.c: 363: break ;
  1410  0178  2990               	goto	l294
  1411  0179                     l1962:	
  1412                           ;main.c: 365: case STATE_BUZZER_TEST:
  1413                           
  1414                           
  1415                           ;main.c: 366: case STATE_VERSION:
  1416                           ;main.c: 367: machineState_ = STATE_MENU ;
  1417  0179  3002               	movlw	2
  1418  017A  00A0               	movwf	??_main
  1419  017B  0820               	movf	??_main,w
  1420  017C  00D5               	movwf	_machineState_
  1421  017D                     l1964:	
  1422                           
  1423                           ;main.c: 368: events_.output.changeMessage=1 ;
  1424  017D  14CD               	bsf	_events_+2,1
  1425                           
  1426                           ;main.c: 371: }
  1427                           
  1428                           ;main.c: 369: break ;
  1429  017E  2990               	goto	l294
  1430  017F                     l1968:	
  1431  017F  0855               	movf	_machineState_,w
  1432                           
  1433                           ; Switch size 1, requested type "space"
  1434                           ; Number of cases is 5, Range of values is 2 to 7
  1435                           ; switch strategies available:
  1436                           ; Name         Instructions Cycles
  1437                           ; simple_byte           16     9 (average)
  1438                           ; direct_byte           21     9 (fixed)
  1439                           ; jumptable            263     9 (fixed)
  1440                           ;	Chosen strategy is simple_byte
  1441  0180  3A02               	xorlw	2	; case 2
  1442  0181  1903               	skipnz
  1443  0182  295A               	goto	l296
  1444  0183  3A01               	xorlw	1	; case 3
  1445  0184  1903               	skipnz
  1446  0185  295D               	goto	l1950
  1447  0186  3A06               	xorlw	6	; case 5
  1448  0187  1903               	skipnz
  1449  0188  295D               	goto	l1950
  1450  0189  3A03               	xorlw	3	; case 6
  1451  018A  1903               	skipnz
  1452  018B  2979               	goto	l1962
  1453  018C  3A01               	xorlw	1	; case 7
  1454  018D  1903               	skipnz
  1455  018E  2979               	goto	l1962
  1456  018F  2990               	goto	l294
  1457  0190                     l294:	
  1458                           
  1459                           ;main.c: 373: }
  1460                           ;main.c: 376: if( (events_.keyPress.right&&!(events_.keyPress.right=0)) ) {
  1461  0190  1F4B               	btfss	_events_,6
  1462  0191  29FC               	goto	l304
  1463  0192  134B               	bcf	_events_,6
  1464                           
  1465                           ;main.c: 378: switch( machineState_ ) {
  1466  0193  29EB               	goto	l2016
  1467  0194                     l1972:	
  1468                           ;main.c: 380: case STATE_CLOCK:
  1469                           
  1470                           
  1471                           ;main.c: 381: machineState_ = STATE_MENU ;
  1472  0194  3002               	movlw	2
  1473  0195  00A0               	movwf	??_main
  1474  0196  0820               	movf	??_main,w
  1475  0197  00D5               	movwf	_machineState_
  1476                           
  1477                           ;main.c: 382: datePtr = &dateCurrent ;
  1478  0198  3059               	movlw	(low (_dateCurrent| 0))& (0+255)
  1479  0199  00A0               	movwf	??_main
  1480  019A  0820               	movf	??_main,w
  1481  019B  00E7               	movwf	_datePtr
  1482                           
  1483                           ;main.c: 383: menuSelect = 0 ;
  1484  019C  01D6               	clrf	_menuSelect
  1485                           
  1486                           ;main.c: 384: cursorPosition = 0 ;
  1487  019D  01D2               	clrf	_cursorPosition
  1488  019E  29E7               	goto	l315
  1489  019F                     l1980:	
  1490                           ;main.c: 389: case STATE_ADJUST_CLOCK:
  1491                           
  1492                           ;main.c: 386: break ;
  1493                           
  1494                           ;main.c: 385: events_.output.changeMessage=1 ;
  1495                           
  1496                           
  1497                           ;main.c: 390: case STATE_SET_TIMER:
  1498                           ;main.c: 391: if( editSelect == DATE_ITEM_SECOND ) {
  1499  019F  3006               	movlw	6
  1500  01A0  0653               	xorwf	_editSelect,w
  1501  01A1  1D03               	btfss	3,2
  1502  01A2  29AE               	goto	l1988
  1503                           
  1504                           ;main.c: 392: editSelect = DATE_ITEM_YEAR ;
  1505  01A3  01D3               	clrf	_editSelect
  1506                           
  1507                           ;main.c: 393: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1508  01A4  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1509  01A5  00CE               	movwf	_currentValueInfo
  1510  01A6  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1511  01A7  00CF               	movwf	_currentValueInfo+1
  1512                           
  1513                           ;main.c: 394: currentEditValue = &datePtr->year ;
  1514  01A8  0867               	movf	_datePtr,w
  1515  01A9  3E06               	addlw	6
  1516  01AA  00A0               	movwf	??_main
  1517  01AB  0820               	movf	??_main,w
  1518  01AC  00D1               	movwf	_currentEditValue
  1519                           
  1520                           ;main.c: 395: }
  1521  01AD  29B8               	goto	l1994
  1522  01AE                     l1988:	
  1523                           
  1524                           ;main.c: 396: else {
  1525                           ;main.c: 397: editSelect++ ;
  1526  01AE  3001               	movlw	1
  1527  01AF  00A0               	movwf	??_main
  1528  01B0  0820               	movf	??_main,w
  1529  01B1  07D3               	addwf	_editSelect,f
  1530                           
  1531                           ;main.c: 398: currentValueInfo++ ;
  1532  01B2  3004               	movlw	4
  1533  01B3  07CE               	addwf	_currentValueInfo,f
  1534  01B4  3000               	movlw	0
  1535  01B5  3DCF               	addwfc	_currentValueInfo+1,f
  1536                           
  1537                           ;main.c: 399: currentEditValue-- ;
  1538  01B6  3001               	movlw	1
  1539  01B7  02D1               	subwf	_currentEditValue,f
  1540  01B8                     l1994:	
  1541                           
  1542                           ;main.c: 400: }
  1543                           ;main.c: 402: blinkPrescaler = 0 ;
  1544  01B8  01D0               	clrf	_blinkPrescaler
  1545                           
  1546                           ;main.c: 403: break ;
  1547  01B9  29FC               	goto	l304
  1548  01BA                     l1996:	
  1549                           ;main.c: 407: case MENU_ADJUST:
  1550                           
  1551                           ;main.c: 406: switch( menuSelect ) {
  1552                           
  1553                           ;main.c: 405: case STATE_MENU:
  1554                           
  1555                           
  1556                           ;main.c: 408: machineState_ = STATE_ADJUST_CLOCK ;
  1557  01BA  3003               	movlw	3
  1558  01BB  00A0               	movwf	??_main
  1559  01BC  0820               	movf	??_main,w
  1560  01BD  00D5               	movwf	_machineState_
  1561                           
  1562                           ;main.c: 409: datePtr = &dateCurrent ;
  1563  01BE  3059               	movlw	(low (_dateCurrent| 0))& (0+255)
  1564  01BF  29C5               	goto	L5
  1565  01C0                     l2000:	
  1566                           ;main.c: 414: case MENU_TIMER:
  1567                           
  1568                           ;main.c: 412: break ;
  1569                           
  1570                           ;main.c: 411: currentEditValue = &datePtr->year ;
  1571                           
  1572                           ;main.c: 410: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1573                           
  1574                           
  1575                           ;main.c: 415: machineState_ = STATE_SET_TIMER ;
  1576  01C0  3005               	movlw	5
  1577  01C1  00A0               	movwf	??_main
  1578  01C2  0820               	movf	??_main,w
  1579  01C3  00D5               	movwf	_machineState_
  1580                           
  1581                           ;main.c: 416: datePtr = &dateTimer ;
  1582  01C4  3060               	movlw	(low (_dateTimer| 0))& (0+255)
  1583  01C5                     L5:	
  1584  01C5  00A0               	movwf	??_main
  1585  01C6  0820               	movf	??_main,w
  1586  01C7  00E7               	movwf	_datePtr
  1587                           
  1588                           ;main.c: 417: currentValueInfo = &VALUE_INFORMATIONS.year ;
  1589  01C8  3015               	movlw	low (_VALUE_INFORMATIONS| (0+32768))
  1590  01C9  00CE               	movwf	_currentValueInfo
  1591  01CA  3087               	movlw	high (_VALUE_INFORMATIONS| (0+32768))
  1592  01CB  00CF               	movwf	_currentValueInfo+1
  1593                           
  1594                           ;main.c: 418: currentEditValue = &datePtr->year ;
  1595  01CC  0867               	movf	_datePtr,w
  1596  01CD  3E06               	addlw	6
  1597  01CE  00A0               	movwf	??_main
  1598  01CF  0820               	movf	??_main,w
  1599  01D0  00D1               	movwf	_currentEditValue
  1600                           
  1601                           ;main.c: 419: break ;
  1602  01D1  29E7               	goto	l315
  1603  01D2                     l2004:	
  1604                           ;main.c: 421: case MENU_BUZZER_TEST:
  1605                           
  1606                           
  1607                           ;main.c: 422: machineState_ = STATE_BUZZER_TEST ;
  1608  01D2  3006               	movlw	6
  1609  01D3  29D5               	goto	L2
  1610  01D4                     l2006:	
  1611                           ;main.c: 425: case MENU_VERSION:
  1612                           
  1613                           ;main.c: 423: break ;
  1614                           
  1615                           
  1616                           ;main.c: 426: machineState_ = STATE_VERSION ;
  1617  01D4  3007               	movlw	7
  1618  01D5                     L2:	
  1619  01D5  00A0               	movwf	??_main
  1620  01D6  0820               	movf	??_main,w
  1621  01D7  00D5               	movwf	_machineState_
  1622                           
  1623                           ;main.c: 428: }
  1624                           
  1625                           ;main.c: 427: break ;
  1626  01D8  29E7               	goto	l315
  1627  01D9                     l2010:	
  1628  01D9  0856               	movf	_menuSelect,w
  1629                           
  1630                           ; Switch size 1, requested type "space"
  1631                           ; Number of cases is 4, Range of values is 0 to 3
  1632                           ; switch strategies available:
  1633                           ; Name         Instructions Cycles
  1634                           ; simple_byte           13     7 (average)
  1635                           ; direct_byte           14     6 (fixed)
  1636                           ; jumptable            260     6 (fixed)
  1637                           ;	Chosen strategy is simple_byte
  1638  01DA  3A00               	xorlw	0	; case 0
  1639  01DB  1903               	skipnz
  1640  01DC  29BA               	goto	l1996
  1641  01DD  3A01               	xorlw	1	; case 1
  1642  01DE  1903               	skipnz
  1643  01DF  29C0               	goto	l2000
  1644  01E0  3A03               	xorlw	3	; case 2
  1645  01E1  1903               	skipnz
  1646  01E2  29D2               	goto	l2004
  1647  01E3  3A01               	xorlw	1	; case 3
  1648  01E4  1903               	skipnz
  1649  01E5  29D4               	goto	l2006
  1650  01E6  29E7               	goto	l315
  1651  01E7                     l315:	
  1652                           
  1653                           ;main.c: 429: events_.output.changeMessage=1 ;
  1654  01E7  14CD               	bsf	_events_+2,1
  1655                           
  1656                           ;main.c: 431: break ;
  1657  01E8  29FC               	goto	l304
  1658  01E9                     l2012:	
  1659                           ;main.c: 433: case STATE_BUZZER_TEST:
  1660                           
  1661                           
  1662                           ;main.c: 434: keyBeepCounter_ = 0 ;
  1663  01E9  01D4               	clrf	_keyBeepCounter_
  1664                           
  1665                           ;main.c: 436: }
  1666                           
  1667                           ;main.c: 435: break ;
  1668  01EA  29FC               	goto	l304
  1669  01EB                     l2016:	
  1670  01EB  0855               	movf	_machineState_,w
  1671                           
  1672                           ; Switch size 1, requested type "space"
  1673                           ; Number of cases is 5, Range of values is 1 to 6
  1674                           ; switch strategies available:
  1675                           ; Name         Instructions Cycles
  1676                           ; simple_byte           16     9 (average)
  1677                           ; direct_byte           21     9 (fixed)
  1678                           ; jumptable            263     9 (fixed)
  1679                           ;	Chosen strategy is simple_byte
  1680  01EC  3A01               	xorlw	1	; case 1
  1681  01ED  1903               	skipnz
  1682  01EE  2994               	goto	l1972
  1683  01EF  3A03               	xorlw	3	; case 2
  1684  01F0  1903               	skipnz
  1685  01F1  29D9               	goto	l2010
  1686  01F2  3A01               	xorlw	1	; case 3
  1687  01F3  1903               	skipnz
  1688  01F4  299F               	goto	l1980
  1689  01F5  3A06               	xorlw	6	; case 5
  1690  01F6  1903               	skipnz
  1691  01F7  299F               	goto	l1980
  1692  01F8  3A03               	xorlw	3	; case 6
  1693  01F9  1903               	skipnz
  1694  01FA  29E9               	goto	l2012
  1695  01FB  29FC               	goto	l304
  1696  01FC                     l304:	
  1697                           
  1698                           ;main.c: 438: }
  1699                           ;main.c: 441: if( (events_.keyRelease.right&&!(events_.keyRelease.right=0)) ) {
  1700  01FC  1C4C               	btfss	_events_+1,0
  1701  01FD  2A07               	goto	l320
  1702  01FE  104C               	bcf	_events_+1,0
  1703                           
  1704                           ;main.c: 442: switch( machineState_ ) {
  1705  01FF  2A02               	goto	l2022
  1706  0200                     l322:	
  1707                           ;main.c: 443: case STATE_BUZZER_TEST:
  1708                           
  1709                           
  1710                           ;main.c: 444: events_.output.soundOff=1 ;
  1711  0200  164D               	bsf	_events_+2,4
  1712                           
  1713                           ;main.c: 446: }
  1714                           
  1715                           ;main.c: 445: break ;
  1716  0201  2A07               	goto	l320
  1717  0202                     l2022:	
  1718  0202  0855               	movf	_machineState_,w
  1719                           
  1720                           ; Switch size 1, requested type "space"
  1721                           ; Number of cases is 1, Range of values is 6 to 6
  1722                           ; switch strategies available:
  1723                           ; Name         Instructions Cycles
  1724                           ; simple_byte            4     3 (average)
  1725                           ; direct_byte           11     9 (fixed)
  1726                           ; jumptable            263     9 (fixed)
  1727                           ;	Chosen strategy is simple_byte
  1728  0203  3A06               	xorlw	6	; case 6
  1729  0204  1903               	skipnz
  1730  0205  2A00               	goto	l322
  1731  0206  2A07               	goto	l320
  1732  0207                     l320:	
  1733                           
  1734                           ;main.c: 447: }
  1735                           ;main.c: 450: if( (events_.keyPress.upDown&&!(events_.keyPress.upDown=0)) ) {
  1736  0207  1E4B               	btfss	_events_,4
  1737  0208  2AD0               	goto	l2114
  1738  0209  124B               	bcf	_events_,4
  1739                           
  1740                           ;main.c: 451: switch( machineState_ ) {
  1741  020A  2A0F               	goto	l2028
  1742  020B                     l326:	
  1743                           ;main.c: 453: case STATE_ALERM:
  1744                           
  1745                           
  1746                           ;main.c: 454: machineState_ = STATE_CLOCK ;
  1747  020B  01D5               	clrf	_machineState_
  1748  020C  0AD5               	incf	_machineState_,f
  1749                           
  1750                           ;main.c: 455: events_.output.changeMessage=1 ;
  1751  020D  14CD               	bsf	_events_+2,1
  1752                           
  1753                           ;main.c: 458: }
  1754                           
  1755                           ;main.c: 456: break ;
  1756  020E  2AD0               	goto	l2114
  1757  020F                     l2028:	
  1758  020F  0855               	movf	_machineState_,w
  1759                           
  1760                           ; Switch size 1, requested type "space"
  1761                           ; Number of cases is 1, Range of values is 4 to 4
  1762                           ; switch strategies available:
  1763                           ; Name         Instructions Cycles
  1764                           ; simple_byte            4     3 (average)
  1765                           ; direct_byte           11     9 (fixed)
  1766                           ; jumptable            263     9 (fixed)
  1767                           ;	Chosen strategy is simple_byte
  1768  0210  3A04               	xorlw	4	; case 4
  1769  0211  1903               	skipnz
  1770  0212  2A0B               	goto	l326
  1771  0213  2AD0               	goto	l2114
  1772                           
  1773                           ;main.c: 459: }
  1774                           ;main.c: 462: switch( machineState_ ) {
  1775  0214  2AD0               	goto	l2114
  1776  0215                     l329:	
  1777                           ;main.c: 464: case STATE_MENU:
  1778                           
  1779                           
  1780                           ;main.c: 465: if( (events_.keyPress.up&&!(events_.keyPress.up=0)) ) {
  1781  0215  1C4B               	btfss	_events_,0
  1782  0216  2A24               	goto	l2042
  1783  0217  104B               	bcf	_events_,0
  1784                           
  1785                           ;main.c: 466: if( menuSelect ) {
  1786  0218  0856               	movf	_menuSelect,w
  1787  0219  1903               	btfsc	3,2
  1788  021A  2A1E               	goto	l331
  1789                           
  1790                           ;main.c: 467: menuSelect-- ;
  1791  021B  3001               	movlw	1
  1792  021C  02D6               	subwf	_menuSelect,f
  1793                           
  1794                           ;main.c: 468: events_.output.changeMessage=1 ;
  1795  021D  14CD               	bsf	_events_+2,1
  1796  021E                     l331:	
  1797                           
  1798                           ;main.c: 469: }
  1799                           ;main.c: 470: if( cursorPosition != 0 ) {
  1800  021E  0852               	movf	_cursorPosition,w
  1801  021F  1903               	btfsc	3,2
  1802  0220  2A24               	goto	l2042
  1803                           
  1804                           ;main.c: 471: cursorPosition-- ;
  1805  0221  3001               	movlw	1
  1806  0222  02D2               	subwf	_cursorPosition,f
  1807                           
  1808                           ;main.c: 472: events_.output.changeMessage=1 ;
  1809  0223  14CD               	bsf	_events_+2,1
  1810  0224                     l2042:	
  1811                           
  1812                           ;main.c: 473: }
  1813                           ;main.c: 475: }
  1814                           ;main.c: 476: if( (events_.keyPress.down&&!(events_.keyPress.down=0)) ) {
  1815  0224  1D4B               	btfss	_events_,2
  1816  0225  2AE1               	goto	l336
  1817  0226  114B               	bcf	_events_,2
  1818                           
  1819                           ;main.c: 477: if( menuSelect != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU[0] ) )
      +                           - 1 ) ) {
  1820  0227  3003               	movlw	3
  1821  0228  0656               	xorwf	_menuSelect,w
  1822  0229  1903               	btfsc	3,2
  1823  022A  2A30               	goto	l334
  1824                           
  1825                           ;main.c: 478: menuSelect++ ;
  1826  022B  3001               	movlw	1
  1827  022C  00A0               	movwf	??_main
  1828  022D  0820               	movf	??_main,w
  1829  022E  07D6               	addwf	_menuSelect,f
  1830                           
  1831                           ;main.c: 479: events_.output.changeMessage=1 ;
  1832  022F  14CD               	bsf	_events_+2,1
  1833  0230                     l334:	
  1834                           
  1835                           ;main.c: 480: }
  1836                           ;main.c: 481: if( cursorPosition != 1 ) {
  1837  0230  0352               	decf	_cursorPosition,w
  1838  0231  1903               	btfsc	3,2
  1839  0232  2AE1               	goto	l336
  1840                           
  1841                           ;main.c: 482: cursorPosition++ ;
  1842  0233  3001               	movlw	1
  1843  0234  00A0               	movwf	??_main
  1844  0235  0820               	movf	??_main,w
  1845  0236  07D2               	addwf	_cursorPosition,f
  1846  0237  2ACE               	goto	l2110
  1847  0238                     l338:	
  1848                           ;main.c: 488: case STATE_ADJUST_CLOCK:
  1849                           
  1850                           ;main.c: 484: }
  1851                           ;main.c: 485: }
  1852                           ;main.c: 486: break ;
  1853                           
  1854                           ;main.c: 483: events_.output.changeMessage=1 ;
  1855                           
  1856                           
  1857                           ;main.c: 489: case STATE_SET_TIMER:
  1858                           ;main.c: 490: if( (events_.keyPress.up&&!(events_.keyPress.up=0)) ) {
  1859  0238  1C4B               	btfss	_events_,0
  1860  0239  2A74               	goto	l2070
  1861  023A  104B               	bcf	_events_,0
  1862                           
  1863                           ;main.c: 491: if( *currentEditValue == currentValueInfo->max )
  1864  023B  0851               	movf	_currentEditValue,w
  1865  023C  0086               	movwf	6
  1866  023D  0187               	clrf	7
  1867  023E  084F               	movf	_currentValueInfo+1,w
  1868  023F  00A1               	movwf	??_main+1
  1869  0240  084E               	movf	_currentValueInfo,w
  1870  0241  00A0               	movwf	??_main
  1871  0242  3002               	movlw	2
  1872  0243  0720               	addwf	??_main,w
  1873  0244  0084               	movwf	4
  1874  0245  0821               	movf	??_main+1,w
  1875  0246  1803               	skipnc
  1876  0247  0A21               	incf	??_main+1,w
  1877  0248  0085               	movwf	5
  1878  0249  0800               	movf	0,w	;code access
  1879  024A  0601               	xorwf	1,w
  1880  024B  1D03               	skipz
  1881  024C  2A60               	goto	l2062
  1882                           
  1883                           ;main.c: 492: *currentEditValue = currentValueInfo->min ;
  1884  024D  084F               	movf	_currentValueInfo+1,w
  1885  024E  00A1               	movwf	??_main+1
  1886  024F  084E               	movf	_currentValueInfo,w
  1887  0250  00A0               	movwf	??_main
  1888  0251  3003               	movlw	3
  1889  0252  0720               	addwf	??_main,w
  1890  0253  0084               	movwf	4
  1891  0254  0821               	movf	??_main+1,w
  1892  0255  1803               	skipnc
  1893  0256  0A21               	incf	??_main+1,w
  1894  0257  0085               	movwf	5
  1895  0258  0800               	movf	0,w	;code access
  1896  0259  00A2               	movwf	??_main+2
  1897  025A  0851               	movf	_currentEditValue,w
  1898  025B  0086               	movwf	6
  1899  025C  0187               	clrf	7
  1900  025D  0822               	movf	??_main+2,w
  1901  025E  0081               	movwf	1
  1902  025F  2A73               	goto	l2068
  1903  0260                     l2062:	
  1904                           
  1905                           ;main.c: 493: else if( ( *currentEditValue & 0x0F ) == 0x09 )
  1906  0260  0851               	movf	_currentEditValue,w
  1907  0261  0086               	movwf	6
  1908  0262  0187               	clrf	7
  1909  0263  300F               	movlw	15
  1910  0264  0501               	andwf	1,w
  1911  0265  00A0               	movwf	??_main
  1912  0266  3009               	movlw	9
  1913  0267  0620               	xorwf	??_main,w
  1914  0268  1D03               	btfss	3,2
  1915  0269  2A6C               	goto	l2066
  1916                           
  1917                           ;main.c: 494: *currentEditValue += 7 ;
  1918  026A  3007               	movlw	7
  1919  026B  2A6D               	goto	L3
  1920  026C                     l2066:	
  1921                           
  1922                           ;main.c: 495: else
  1923                           ;main.c: 496: ( *currentEditValue )++ ;
  1924  026C  3001               	movlw	1
  1925  026D                     L3:	
  1926  026D  00A0               	movwf	??_main
  1927  026E  0851               	movf	_currentEditValue,w
  1928  026F  0086               	movwf	6
  1929  0270  0187               	clrf	7
  1930  0271  0820               	movf	??_main,w
  1931  0272  0781               	addwf	1,f
  1932  0273                     l2068:	
  1933                           
  1934                           ;main.c: 497: events_.output.changeValue=1 ;
  1935  0273  154D               	bsf	_events_+2,2
  1936  0274                     l2070:	
  1937                           
  1938                           ;main.c: 498: }
  1939                           ;main.c: 499: if( (events_.keyPress.down&&!(events_.keyPress.down=0)) ) {
  1940  0274  1D4B               	btfss	_events_,2
  1941  0275  2AE1               	goto	l336
  1942  0276  114B               	bcf	_events_,2
  1943                           
  1944                           ;main.c: 500: if( *currentEditValue == currentValueInfo->min )
  1945  0277  0851               	movf	_currentEditValue,w
  1946  0278  0086               	movwf	6
  1947  0279  0187               	clrf	7
  1948  027A  084F               	movf	_currentValueInfo+1,w
  1949  027B  00A1               	movwf	??_main+1
  1950  027C  084E               	movf	_currentValueInfo,w
  1951  027D  00A0               	movwf	??_main
  1952  027E  3003               	movlw	3
  1953  027F  0720               	addwf	??_main,w
  1954  0280  0084               	movwf	4
  1955  0281  0821               	movf	??_main+1,w
  1956  0282  1803               	skipnc
  1957  0283  0A21               	incf	??_main+1,w
  1958  0284  0085               	movwf	5
  1959  0285  0800               	movf	0,w	;code access
  1960  0286  0601               	xorwf	1,w
  1961  0287  1D03               	skipz
  1962  0288  2A9C               	goto	l2078
  1963                           
  1964                           ;main.c: 501: *currentEditValue = currentValueInfo->max ;
  1965  0289  084F               	movf	_currentValueInfo+1,w
  1966  028A  00A1               	movwf	??_main+1
  1967  028B  084E               	movf	_currentValueInfo,w
  1968  028C  00A0               	movwf	??_main
  1969  028D  3002               	movlw	2
  1970  028E  0720               	addwf	??_main,w
  1971  028F  0084               	movwf	4
  1972  0290  0821               	movf	??_main+1,w
  1973  0291  1803               	skipnc
  1974  0292  0A21               	incf	??_main+1,w
  1975  0293  0085               	movwf	5
  1976  0294  0800               	movf	0,w	;code access
  1977  0295  00A2               	movwf	??_main+2
  1978  0296  0851               	movf	_currentEditValue,w
  1979  0297  0086               	movwf	6
  1980  0298  0187               	clrf	7
  1981  0299  0822               	movf	??_main+2,w
  1982  029A  0081               	movwf	1
  1983  029B  2AC1               	goto	l2102
  1984  029C                     l2078:	
  1985                           
  1986                           ;main.c: 502: else if( ( *currentEditValue & 0x0F ) == 0x00 )
  1987  029C  0851               	movf	_currentEditValue,w
  1988  029D  0086               	movwf	6
  1989  029E  0187               	clrf	7
  1990  029F  0801               	movf	1,w
  1991  02A0  390F               	andlw	15
  1992  02A1  1D03               	btfss	3,2
  1993  02A2  2AA8               	goto	l2082
  1994                           
  1995                           ;main.c: 503: *currentEditValue -= 7 ;
  1996  02A3  0851               	movf	_currentEditValue,w
  1997  02A4  0086               	movwf	6
  1998  02A5  0187               	clrf	7
  1999  02A6  3007               	movlw	7
  2000  02A7  2AAC               	goto	L4
  2001  02A8                     l2082:	
  2002                           
  2003                           ;main.c: 504: else
  2004                           ;main.c: 505: ( *currentEditValue )-- ;
  2005  02A8  0851               	movf	_currentEditValue,w
  2006  02A9  0086               	movwf	6
  2007  02AA  0187               	clrf	7
  2008  02AB  3001               	movlw	1
  2009  02AC                     L4:	
  2010  02AC  0281               	subwf	1,f
  2011  02AD  2AC1               	goto	l2102
  2012  02AE                     l349:	
  2013                           ;main.c: 510: case STATE_BUZZER_TEST:
  2014                           
  2015                           ;main.c: 507: }
  2016                           ;main.c: 508: break ;
  2017                           
  2018                           ;main.c: 506: events_.output.changeValue=1 ;
  2019                           
  2020                           
  2021                           ;main.c: 511: if( (events_.keyPress.up&&!(events_.keyPress.up=0)) ) {
  2022  02AE  1C4B               	btfss	_events_,0
  2023  02AF  2AB9               	goto	l2094
  2024  02B0  104B               	bcf	_events_,0
  2025                           
  2026                           ;main.c: 512: if( PR2 != 0xFF ) PR2++ ;
  2027  02B1  0A1B               	incf	27,w	;volatile
  2028  02B2  1903               	btfsc	3,2
  2029  02B3  2AB8               	goto	l2092
  2030  02B4  3001               	movlw	1
  2031  02B5  00A0               	movwf	??_main
  2032  02B6  0820               	movf	??_main,w
  2033  02B7  079B               	addwf	27,f	;volatile
  2034  02B8                     l2092:	
  2035                           
  2036                           ;main.c: 513: events_.output.changeValue=1 ;
  2037  02B8  154D               	bsf	_events_+2,2
  2038  02B9                     l2094:	
  2039                           
  2040                           ;main.c: 514: }
  2041                           ;main.c: 515: if( (events_.keyPress.down&&!(events_.keyPress.down=0)) ) {
  2042  02B9  1D4B               	btfss	_events_,2
  2043  02BA  2AE1               	goto	l336
  2044  02BB  114B               	bcf	_events_,2
  2045                           
  2046                           ;main.c: 516: if( PR2 != 0 ) PR2-- ;
  2047  02BC  081B               	movf	27,w	;volatile
  2048  02BD  1903               	btfsc	3,2
  2049  02BE  2AC1               	goto	l2102
  2050  02BF  3001               	movlw	1
  2051  02C0  029B               	subwf	27,f	;volatile
  2052  02C1                     l2102:	
  2053                           
  2054                           ;main.c: 517: events_.output.changeValue=1 ;
  2055  02C1  154D               	bsf	_events_+2,2
  2056                           
  2057                           ;main.c: 518: }
  2058                           ;main.c: 519: break ;
  2059  02C2  2AE1               	goto	l336
  2060  02C3                     l354:	
  2061                           ;main.c: 521: case STATE_CLOCK:
  2062                           
  2063                           
  2064                           ;main.c: 522: if( (events_.keyPress.up&&!(events_.keyPress.up=0)) || (events_.keyPress.d
      +                          own&&!(events_.keyPress.down=0)) ) {
  2065  02C3  1C4B               	btfss	_events_,0
  2066  02C4  2AC7               	goto	l359
  2067  02C5  104B               	bcf	_events_,0
  2068  02C6  2ACA               	goto	l2108
  2069  02C7                     l359:	
  2070  02C7  1D4B               	btfss	_events_,2
  2071  02C8  2AE1               	goto	l336
  2072  02C9  114B               	bcf	_events_,2
  2073  02CA                     l2108:	
  2074                           
  2075                           ;main.c: 523: machineState_ = STATE_MENU ;
  2076  02CA  3002               	movlw	2
  2077  02CB  00A0               	movwf	??_main
  2078  02CC  0820               	movf	??_main,w
  2079  02CD  00D5               	movwf	_machineState_
  2080  02CE                     l2110:	
  2081                           
  2082                           ;main.c: 524: events_.output.changeMessage=1 ;
  2083  02CE  14CD               	bsf	_events_+2,1
  2084                           
  2085                           ;main.c: 528: }
  2086                           
  2087                           ;main.c: 525: }
  2088                           ;main.c: 526: break ;
  2089  02CF  2AE1               	goto	l336
  2090  02D0                     l2114:	
  2091  02D0  0855               	movf	_machineState_,w
  2092                           
  2093                           ; Switch size 1, requested type "space"
  2094                           ; Number of cases is 5, Range of values is 1 to 6
  2095                           ; switch strategies available:
  2096                           ; Name         Instructions Cycles
  2097                           ; simple_byte           16     9 (average)
  2098                           ; direct_byte           21     9 (fixed)
  2099                           ; jumptable            263     9 (fixed)
  2100                           ;	Chosen strategy is simple_byte
  2101  02D1  3A01               	xorlw	1	; case 1
  2102  02D2  1903               	skipnz
  2103  02D3  2AC3               	goto	l354
  2104  02D4  3A03               	xorlw	3	; case 2
  2105  02D5  1903               	skipnz
  2106  02D6  2A15               	goto	l329
  2107  02D7  3A01               	xorlw	1	; case 3
  2108  02D8  1903               	skipnz
  2109  02D9  2A38               	goto	l338
  2110  02DA  3A06               	xorlw	6	; case 5
  2111  02DB  1903               	skipnz
  2112  02DC  2A38               	goto	l338
  2113  02DD  3A03               	xorlw	3	; case 6
  2114  02DE  1903               	skipnz
  2115  02DF  2AAE               	goto	l349
  2116  02E0  2AE1               	goto	l336
  2117  02E1                     l336:	
  2118                           
  2119                           ;main.c: 530: if( (events_.output.soundOn&&!(events_.output.soundOn=0)) )
  2120  02E1  1DCD               	btfss	_events_+2,3
  2121  02E2  2AE6               	goto	l360
  2122  02E3  11CD               	bcf	_events_+2,3
  2123                           
  2124                           ;main.c: 531: PWM3CONbits.PWM3OE=1 ;
  2125  02E4  002C               	movlb	12	; select bank12
  2126  02E5  1719               	bsf	25,6	;volatile
  2127  02E6                     l360:	
  2128                           
  2129                           ;main.c: 533: if( (events_.output.soundOff&&!(events_.output.soundOff=0)) )
  2130  02E6  0020               	movlb	0	; select bank0
  2131  02E7  1E4D               	btfss	_events_+2,4
  2132  02E8  2AEC               	goto	l361
  2133  02E9  124D               	bcf	_events_+2,4
  2134                           
  2135                           ;main.c: 534: PWM3CONbits.PWM3OE=0 ;
  2136  02EA  002C               	movlb	12	; select bank12
  2137  02EB  1319               	bcf	25,6	;volatile
  2138  02EC                     l361:	
  2139                           
  2140                           ;main.c: 562: if( (events_.output.changeMessage&&!(events_.output.changeMessage=0)) ) {
  2141  02EC  0020               	movlb	0	; select bank0
  2142  02ED  1CCD               	btfss	_events_+2,1
  2143  02EE  2B8A               	goto	l362
  2144  02EF  10CD               	bcf	_events_+2,1
  2145                           
  2146                           ;main.c: 564: switch( machineState_ ) {
  2147  02F0  2B7C               	goto	l2152
  2148  02F1                     l2122:	
  2149                           ;main.c: 565: case STATE_CLOCK:
  2150                           
  2151                           
  2152                           ;main.c: 566: case STATE_ALERM:
  2153                           ;main.c: 567: case STATE_ADJUST_CLOCK:
  2154                           ;main.c: 568: case STATE_SET_TIMER:
  2155                           ;main.c: 570: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_0 ) ;
  2156  02F1  3080               	movlw	128
  2157  02F2  318E  26DB  3180   	fcall	_ParallelLCD_ClearRow
  2158                           
  2159                           ;main.c: 572: switch( machineState_ ) {
  2160  02F5  2B0D               	goto	l2134
  2161  02F6                     l2124:	
  2162                           ;main.c: 573: case STATE_CLOCK:
  2163                           
  2164                           
  2165                           ;main.c: 574: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  2166  02F6  30C0               	movlw	192
  2167  02F7  318E  26DB  3180   	fcall	_ParallelLCD_ClearRow
  2168                           
  2169                           ;main.c: 575: break ;
  2170  02FA  2B5B               	goto	l2142
  2171  02FB                     l2126:	
  2172                           ;main.c: 576: case STATE_ALERM:
  2173                           
  2174                           
  2175                           ;main.c: 577: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x9 , "ALERM!
      +                          !" ) ;
  2176  02FB  3076               	movlw	low (STR_12| (0+32768))
  2177  02FC  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2178  02FD  3087               	movlw	high (STR_12| (0+32768))
  2179  02FE  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2180  02FF  30C9               	movlw	201
  2181  0300  2B58               	goto	L6
  2182  0301                     l2128:	
  2183                           ;main.c: 579: case STATE_ADJUST_CLOCK:
  2184                           
  2185                           ;main.c: 578: break ;
  2186                           
  2187                           
  2188                           ;main.c: 580: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xA , "adjust
      +                          " ) ;
  2189  0301  308D               	movlw	low (STR_13| (0+32768))
  2190  0302  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2191  0303  3087               	movlw	high (STR_13| (0+32768))
  2192  0304  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2193  0305  30CA               	movlw	202
  2194  0306  2B58               	goto	L6
  2195  0307                     l2130:	
  2196                           ;main.c: 582: case STATE_SET_TIMER:
  2197                           
  2198                           ;main.c: 581: break ;
  2199                           
  2200                           
  2201                           ;main.c: 583: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0xB , "timer"
      +                           ) ;
  2202  0307  3094               	movlw	low (STR_14| (0+32768))
  2203  0308  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2204  0309  3087               	movlw	high (STR_14| (0+32768))
  2205  030A  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2206  030B  30CB               	movlw	203
  2207  030C  2B58               	goto	L6
  2208  030D                     l2134:	
  2209                           ;main.c: 585: }
  2210                           
  2211                           ;main.c: 584: break ;
  2212                           
  2213  030D  0020               	movlb	0	; select bank0
  2214  030E  0855               	movf	_machineState_,w
  2215                           
  2216                           ; Switch size 1, requested type "space"
  2217                           ; Number of cases is 4, Range of values is 1 to 5
  2218                           ; switch strategies available:
  2219                           ; Name         Instructions Cycles
  2220                           ; simple_byte           13     7 (average)
  2221                           ; direct_byte           19     9 (fixed)
  2222                           ; jumptable            263     9 (fixed)
  2223                           ;	Chosen strategy is simple_byte
  2224  030F  3A01               	xorlw	1	; case 1
  2225  0310  1903               	skipnz
  2226  0311  2AF6               	goto	l2124
  2227  0312  3A02               	xorlw	2	; case 3
  2228  0313  1903               	skipnz
  2229  0314  2B01               	goto	l2128
  2230  0315  3A07               	xorlw	7	; case 4
  2231  0316  1903               	skipnz
  2232  0317  2AFB               	goto	l2126
  2233  0318  3A01               	xorlw	1	; case 5
  2234  0319  1903               	skipnz
  2235  031A  2B07               	goto	l2130
  2236  031B  2B1C               	goto	l370
  2237  031C                     l370:	
  2238  031C  2B5B               	goto	l2142
  2239  031D                     l2136:	
  2240                           ;main.c: 590: case STATE_MENU:
  2241                           
  2242                           ;main.c: 588: break ;
  2243                           
  2244                           ;main.c: 586: events_.output.changeValue=1 ;
  2245                           
  2246                           
  2247                           ;main.c: 591: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x1 , MESSAGE
      +                          _MENU[ menuSelect - cursorPosition ] ) ;
  2248  031D  0352               	decf	_cursorPosition,w
  2249  031E  3AFF               	xorlw	255
  2250  031F  0756               	addwf	_menuSelect,w
  2251  0320  0709               	addwf	9,w
  2252  0321  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2253  0322  0086               	movwf	6
  2254  0323  0187               	clrf	7
  2255  0324  3F40               	moviw [0]fsr1
  2256  0325  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2257  0326  3F41               	moviw [1]fsr1
  2258  0327  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2259  0328  3081               	movlw	129
  2260  0329  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2261                           
  2262                           ;main.c: 592: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x1 , MESSAGE
      +                          _MENU[ menuSelect - cursorPosition + 1] ) ;
  2263  032C  0020               	movlb	0	; select bank0
  2264  032D  0352               	decf	_cursorPosition,w
  2265  032E  3AFF               	xorlw	255
  2266  032F  0756               	addwf	_menuSelect,w
  2267  0330  0709               	addwf	9,w
  2268  0331  3E02               	addlw	2
  2269  0332  3EAE               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  2270  0333  0086               	movwf	6
  2271  0334  0187               	clrf	7
  2272  0335  3F40               	moviw [0]fsr1
  2273  0336  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2274  0337  3F41               	moviw [1]fsr1
  2275  0338  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2276  0339  30C1               	movlw	193
  2277  033A  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2278                           
  2279                           ;main.c: 593: ParallelLCD_WriteCharacter( PARALLEL_LCD_ROW_SELECT[cursorPosition] | 0x0 
      +                          , 0x00 ) ;
  2280  033D  01F5               	clrf	ParallelLCD_WriteCharacter@character
  2281  033E  0020               	movlb	0	; select bank0
  2282  033F  0852               	movf	_cursorPosition,w
  2283  0340  3E13               	addlw	low (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2284  0341  0084               	movwf	4
  2285  0342  3087               	movlw	high (_PARALLEL_LCD_ROW_SELECT| (0+32768))
  2286  0343  1803               	skipnc
  2287  0344  3E01               	addlw	1
  2288  0345  0085               	movwf	5
  2289  0346  0800               	movf	0,w	;code access
  2290  0347  318E  268C  3180   	fcall	_ParallelLCD_WriteCharacter
  2291                           
  2292                           ;main.c: 594: break ;
  2293  034A  2B8A               	goto	l362
  2294  034B                     l2140:	
  2295                           ;main.c: 596: case STATE_BUZZER_TEST:
  2296                           
  2297                           
  2298                           ;main.c: 597: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Buzzer
      +                           Test" ) ;
  2299  034B  3057               	movlw	low (STR_10| (0+32768))
  2300  034C  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2301  034D  3087               	movlw	high (STR_10| (0+32768))
  2302  034E  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2303  034F  3080               	movlw	128
  2304  0350  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2305                           
  2306                           ;main.c: 598: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , "Period
      +                           =" ) ;
  2307  0353  306D               	movlw	low (STR_16| (0+32768))
  2308  0354  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2309  0355  3087               	movlw	high (STR_16| (0+32768))
  2310  0356  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2311  0357  30C0               	movlw	192
  2312  0358                     L6:	
  2313  0358  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2314  035B                     l2142:	
  2315                           
  2316                           ;main.c: 599: events_.output.changeValue=1 ;
  2317  035B  0020               	movlb	0	; select bank0
  2318  035C  154D               	bsf	_events_+2,2
  2319                           
  2320                           ;main.c: 600: break ;
  2321  035D  2B8A               	goto	l362
  2322  035E                     l2144:	
  2323                           ;main.c: 602: case STATE_VERSION:
  2324                           
  2325                           
  2326                           ;main.c: 603: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Versio
      +                          n" ) ;
  2327  035E  307E               	movlw	low (STR_11| (0+32768))
  2328  035F  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2329  0360  3087               	movlw	high (STR_11| (0+32768))
  2330  0361  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2331  0362  3080               	movlw	128
  2332  0363  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2333                           
  2334                           ;main.c: 604: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_1 | 0x8 , "00.100
      +                          " ) ;
  2335  0366  3086               	movlw	low (STR_18| (0+32768))
  2336  0367  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2337  0368  3087               	movlw	high (STR_18| (0+32768))
  2338  0369  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2339  036A  30C8               	movlw	200
  2340  036B  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2341                           
  2342                           ;main.c: 605: break ;
  2343  036E  2B8A               	goto	l362
  2344  036F                     l2146:	
  2345                           ;main.c: 607: case STATE_ERROR:
  2346                           
  2347                           
  2348                           ;main.c: 608: ParallelLCD_WriteStringClearing( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , "Receiv
      +                          e Error !!" ) ;
  2349  036F  3039               	movlw	low (STR_19| (0+32768))
  2350  0370  00F5               	movwf	ParallelLCD_WriteStringClearing@stringPtr
  2351  0371  3087               	movlw	high (STR_19| (0+32768))
  2352  0372  00F6               	movwf	ParallelLCD_WriteStringClearing@stringPtr+1
  2353  0373  3080               	movlw	128
  2354  0374  318F  2733  3180   	fcall	_ParallelLCD_WriteStringClearing
  2355                           
  2356                           ;main.c: 609: ParallelLCD_ClearRow( PARALLEL_LCD_ROW_SELECT_1 ) ;
  2357  0377  30C0               	movlw	192
  2358  0378  318E  26DB  3180   	fcall	_ParallelLCD_ClearRow
  2359                           
  2360                           ;main.c: 611: }
  2361                           
  2362                           ;main.c: 610: break ;
  2363  037B  2B8A               	goto	l362
  2364  037C                     l2152:	
  2365  037C  0020               	movlb	0	; select bank0
  2366  037D  0855               	movf	_machineState_,w
  2367                           
  2368                           ; Switch size 1, requested type "space"
  2369                           ; Number of cases is 8, Range of values is 1 to 8
  2370                           ; switch strategies available:
  2371                           ; Name         Instructions Cycles
  2372                           ; direct_byte           25     9 (fixed)
  2373                           ; simple_byte           25    13 (average)
  2374                           ; jumptable            263     9 (fixed)
  2375                           ;	Chosen strategy is direct_byte
  2376  037E  3EFF               	addlw	-1
  2377  037F  1C03               	skipc
  2378  0380  2B8A               	goto	l362
  2379  0381  0084               	movwf	4
  2380  0382  3008               	movlw	8
  2381  0383  0204               	subwf	4,w
  2382  0384  1803               	skipnc
  2383  0385  2B8A               	goto	l362
  2384  0386  3188               	movlp	high S2310
  2385  0387  3504               	lslf	4,w
  2386  0388  3E00               	addlw	low S2310
  2387  0389  0082               	movwf	2
  2388  038A                     l362:	
  2389                           
  2390                           ;main.c: 613: }
  2391                           ;main.c: 616: if( (events_.output.changeValue&&!(events_.output.changeValue=0)) ) {
  2392  038A  0020               	movlb	0	; select bank0
  2393  038B  1D4D               	btfss	_events_+2,2
  2394  038C  2C1F               	goto	l2208
  2395  038D  114D               	bcf	_events_+2,2
  2396                           
  2397                           ;main.c: 617: switch( machineState_ ) {
  2398  038E  2C0D               	goto	l2206
  2399  038F                     l2156:	
  2400                           ;main.c: 618: case STATE_CLOCK:
  2401                           
  2402                           
  2403                           ;main.c: 619: case STATE_ALERM:
  2404                           ;main.c: 620: case STATE_ADJUST_CLOCK:
  2405                           ;main.c: 621: case STATE_SET_TIMER:
  2406                           ;main.c: 622: {
  2407                           ;main.c: 623: char string[17] ;
  2408                           ;main.c: 624: _date_time_ConvertByteToDate( datePtr , &string ) ;
  2409  038F  3023               	movlw	(low (main@string| 0))& (0+255)
  2410  0390  00A0               	movwf	??_main
  2411  0391  0820               	movf	??_main,w
  2412  0392  00F2               	movwf	__date_time_ConvertByteToDate@stinrg
  2413  0393  0867               	movf	_datePtr,w
  2414  0394  3185  2581  3180   	fcall	__date_time_ConvertByteToDate
  2415                           
  2416                           ;main.c: 625: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_0 | 0x0 , &string ) ;
  2417  0397  3023               	movlw	(low (main@string| 0))& (0+255)
  2418  0398  0020               	movlb	0	; select bank0
  2419  0399  00A0               	movwf	??_main
  2420  039A  0820               	movf	??_main,w
  2421  039B  00F5               	movwf	ParallelLCD_WriteString@stringPtr
  2422  039C  3080               	movlw	128
  2423  039D  318E  26F2  3180   	fcall	_ParallelLCD_WriteString
  2424                           
  2425                           ;main.c: 626: _date_time_ConvertByteToTime( datePtr , &string ) ;
  2426  03A0  3023               	movlw	(low (main@string| 0))& (0+255)
  2427  03A1  0020               	movlb	0	; select bank0
  2428  03A2  00A0               	movwf	??_main
  2429  03A3  0820               	movf	??_main,w
  2430  03A4  00F2               	movwf	__date_time_ConvertByteToTime@string
  2431  03A5  0867               	movf	_datePtr,w
  2432  03A6  3186  266F  3180   	fcall	__date_time_ConvertByteToTime
  2433                           
  2434                           ;main.c: 627: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0x0 , &string ) ;
  2435  03A9  3023               	movlw	(low (main@string| 0))& (0+255)
  2436  03AA  0020               	movlb	0	; select bank0
  2437  03AB  00A0               	movwf	??_main
  2438  03AC  0820               	movf	??_main,w
  2439  03AD  00F5               	movwf	ParallelLCD_WriteString@stringPtr
  2440  03AE  30C0               	movlw	192
  2441  03AF  318E  26F2  3180   	fcall	_ParallelLCD_WriteString
  2442                           
  2443                           ;main.c: 628: blinkPrescaler = 0 ;
  2444  03B2  0020               	movlb	0	; select bank0
  2445  03B3  01D0               	clrf	_blinkPrescaler
  2446                           
  2447                           ;main.c: 629: }
  2448                           ;main.c: 630: break ;
  2449  03B4  2C1F               	goto	l2208
  2450  03B5                     l2166:	
  2451                           ;main.c: 632: case STATE_BUZZER_TEST:
  2452                           
  2453                           
  2454                           ;main.c: 633: {
  2455                           ;main.c: 634: char valueString[4] = "000" ;
  2456  03B5  086B               	movf	main@F4324+3,w
  2457  03B6  00B7               	movwf	main@valueString+3
  2458  03B7  086A               	movf	main@F4324+2,w
  2459  03B8  00B6               	movwf	main@valueString+2
  2460  03B9  0869               	movf	main@F4324+1,w
  2461  03BA  00B5               	movwf	main@valueString+1
  2462  03BB  0868               	movf	main@F4324,w
  2463  03BC  00B4               	movwf	main@valueString
  2464                           
  2465                           ;main.c: 635: PWM3DCH = PR2 >> 2 ;
  2466  03BD  081B               	movf	27,w	;volatile
  2467  03BE  00A0               	movwf	??_main
  2468  03BF  3002               	movlw	2
  2469  03C0                     u2255:	
  2470  03C0  36A0               	lsrf	??_main,f
  2471  03C1  0B89               	decfsz	9,f
  2472  03C2  2BC0               	goto	u2255
  2473  03C3  0820               	movf	??_main,w
  2474  03C4  002C               	movlb	12	; select bank12
  2475  03C5  0098               	movwf	24	;volatile
  2476                           
  2477                           ;main.c: 636: Uint08_t tmpValue = PR2 ;
  2478  03C6  0020               	movlb	0	; select bank0
  2479  03C7  081B               	movf	27,w	;volatile
  2480  03C8  00A0               	movwf	??_main
  2481  03C9  0820               	movf	??_main,w
  2482  03CA  00BA               	movwf	main@tmpValue
  2483                           
  2484                           ;main.c: 637: Uint08_t isNonZero = 0 ;
  2485  03CB  01BB               	clrf	main@isNonZero
  2486                           
  2487                           ;main.c: 638: static const Uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 } ;
  2488                           ;main.c: 640: for( Uint08_t i = 0 ; i != 3 ; i++ ) {
  2489  03CC  01C4               	clrf	main@i
  2490  03CD  3003               	movlw	3
  2491  03CE  0644               	xorwf	main@i,w
  2492  03CF  1903               	btfsc	3,2
  2493  03D0  2C04               	goto	l2202
  2494  03D1                     l2178:	
  2495                           
  2496                           ;main.c: 641: Uint08_t compareUnit = COMPARE_UNITS[i] ;
  2497  03D1  0844               	movf	main@i,w
  2498  03D2  3E10               	addlw	low (main@COMPARE_UNITS| (0+32768))
  2499  03D3  0084               	movwf	4
  2500  03D4  3087               	movlw	high (main@COMPARE_UNITS| (0+32768))
  2501  03D5  1803               	skipnc
  2502  03D6  3E01               	addlw	1
  2503  03D7  0085               	movwf	5
  2504  03D8  0800               	movf	0,w	;code access
  2505  03D9  00A0               	movwf	??_main
  2506  03DA  0820               	movf	??_main,w
  2507  03DB  00BD               	movwf	main@compareUnit
  2508  03DC                     l2186:	
  2509                           ;main.c: 642: while( tmpValue >= compareUnit ) {
  2510                           
  2511  03DC  083D               	movf	main@compareUnit,w
  2512  03DD  023A               	subwf	main@tmpValue,w
  2513  03DE  1C03               	btfss	3,0
  2514  03DF  2BED               	goto	l2188
  2515                           
  2516                           ;main.c: 643: tmpValue -= compareUnit ;
  2517  03E0  083D               	movf	main@compareUnit,w
  2518  03E1  02BA               	subwf	main@tmpValue,f
  2519                           
  2520                           ;main.c: 644: valueString[i]++ ;
  2521  03E2  3001               	movlw	1
  2522  03E3  00A0               	movwf	??_main
  2523  03E4  0844               	movf	main@i,w
  2524  03E5  3E34               	addlw	(low (main@valueString| 0))& (0+255)
  2525  03E6  0086               	movwf	6
  2526  03E7  0187               	clrf	7
  2527  03E8  0820               	movf	??_main,w
  2528  03E9  0781               	addwf	1,f
  2529                           
  2530                           ;main.c: 645: isNonZero = 1 ;
  2531  03EA  01BB               	clrf	main@isNonZero
  2532  03EB  0ABB               	incf	main@isNonZero,f
  2533  03EC  2BDC               	goto	l2186
  2534  03ED                     l2188:	
  2535                           
  2536                           ;main.c: 646: }
  2537                           ;main.c: 648: if( i == 2 ) break ;
  2538  03ED  3002               	movlw	2
  2539  03EE  0644               	xorwf	main@i,w
  2540  03EF  1903               	btfsc	3,2
  2541  03F0  2C04               	goto	l2202
  2542                           
  2543                           ;main.c: 649: if( isNonZero ) continue ;
  2544  03F1  083B               	movf	main@isNonZero,w
  2545  03F2  1D03               	btfss	3,2
  2546  03F3  2BFC               	goto	l2198
  2547                           
  2548                           ;main.c: 651: valueString[i] = ' ' ;
  2549  03F4  3020               	movlw	32
  2550  03F5  00A0               	movwf	??_main
  2551  03F6  0844               	movf	main@i,w
  2552  03F7  3E34               	addlw	(low (main@valueString| 0))& (0+255)
  2553  03F8  0086               	movwf	6
  2554  03F9  0187               	clrf	7
  2555  03FA  0820               	movf	??_main,w
  2556  03FB  0081               	movwf	1
  2557  03FC                     l2198:	
  2558  03FC  3001               	movlw	1
  2559  03FD  00A0               	movwf	??_main
  2560  03FE  0820               	movf	??_main,w
  2561  03FF  07C4               	addwf	main@i,f
  2562  0400  3003               	movlw	3
  2563  0401  0644               	xorwf	main@i,w
  2564  0402  1D03               	btfss	3,2
  2565  0403  2BD1               	goto	l2178
  2566  0404                     l2202:	
  2567                           
  2568                           ;main.c: 652: }
  2569                           ;main.c: 654: ParallelLCD_WriteString( PARALLEL_LCD_ROW_SELECT_1 | 0xD , &valueString ) 
      +                          ;
  2570  0404  3034               	movlw	(low (main@valueString| 0))& (0+255)
  2571  0405  00A0               	movwf	??_main
  2572  0406  0820               	movf	??_main,w
  2573  0407  00F5               	movwf	ParallelLCD_WriteString@stringPtr
  2574  0408  30CD               	movlw	205
  2575  0409  318E  26F2  3180   	fcall	_ParallelLCD_WriteString
  2576                           
  2577                           ;main.c: 657: }
  2578                           
  2579                           ;main.c: 655: }
  2580                           ;main.c: 656: break ;
  2581  040C  2C1F               	goto	l2208
  2582  040D                     l2206:	
  2583  040D  0020               	movlb	0	; select bank0
  2584  040E  0855               	movf	_machineState_,w
  2585                           
  2586                           ; Switch size 1, requested type "space"
  2587                           ; Number of cases is 5, Range of values is 1 to 6
  2588                           ; switch strategies available:
  2589                           ; Name         Instructions Cycles
  2590                           ; simple_byte           16     9 (average)
  2591                           ; direct_byte           21     9 (fixed)
  2592                           ; jumptable            263     9 (fixed)
  2593                           ;	Chosen strategy is simple_byte
  2594  040F  3A01               	xorlw	1	; case 1
  2595  0410  1903               	skipnz
  2596  0411  2B8F               	goto	l2156
  2597  0412  3A02               	xorlw	2	; case 3
  2598  0413  1903               	skipnz
  2599  0414  2B8F               	goto	l2156
  2600  0415  3A07               	xorlw	7	; case 4
  2601  0416  1903               	skipnz
  2602  0417  2B8F               	goto	l2156
  2603  0418  3A01               	xorlw	1	; case 5
  2604  0419  1903               	skipnz
  2605  041A  2B8F               	goto	l2156
  2606  041B  3A03               	xorlw	3	; case 6
  2607  041C  1903               	skipnz
  2608  041D  2BB5               	goto	l2166
  2609  041E  2C1F               	goto	l2208
  2610  041F                     l2208:	
  2611                           
  2612                           ;main.c: 659: }
  2613                           ;main.c: 661: if( machineState_ == STATE_ADJUST_CLOCK || machineState_ == STATE_SET_TIME
      +                          R ) {
  2614  041F  3003               	movlw	3
  2615  0420  0020               	movlb	0	; select bank0
  2616  0421  0655               	xorwf	_machineState_,w
  2617  0422  1903               	btfsc	3,2
  2618  0423  2C28               	goto	l2212
  2619  0424  3005               	movlw	5
  2620  0425  0655               	xorwf	_machineState_,w
  2621  0426  1D03               	btfss	3,2
  2622  0427  28BF               	goto	l262
  2623  0428                     l2212:	
  2624                           
  2625                           ;main.c: 662: char string[4] ;
  2626                           ;main.c: 663: if( blinkPrescaler == 0x00 ) {
  2627  0428  0850               	movf	_blinkPrescaler,w
  2628  0429  1D03               	btfss	3,2
  2629  042A  2C44               	goto	l2216
  2630                           
  2631                           ;main.c: 664: _date_time_ConvertByteToDiscrete( datePtr , &string , editSelect ) ;
  2632  042B  303E               	movlw	(low (main@string_880| 0))& (0+255)
  2633  042C  00A0               	movwf	??_main
  2634  042D  0820               	movf	??_main,w
  2635  042E  00F2               	movwf	__date_time_ConvertByteToDiscrete@string
  2636  042F  0853               	movf	_editSelect,w
  2637  0430  00A1               	movwf	??_main+1
  2638  0431  0821               	movf	??_main+1,w
  2639  0432  00F3               	movwf	__date_time_ConvertByteToDiscrete@select
  2640  0433  0867               	movf	_datePtr,w
  2641  0434  3184  2461  3180   	fcall	__date_time_ConvertByteToDiscrete
  2642                           
  2643                           ;main.c: 665: ParallelLCD_WriteString( currentValueInfo->position , &string ) ;
  2644  0437  303E               	movlw	(low (main@string_880| 0))& (0+255)
  2645  0438  0020               	movlb	0	; select bank0
  2646  0439  00A0               	movwf	??_main
  2647  043A  0820               	movf	??_main,w
  2648  043B  00F5               	movwf	ParallelLCD_WriteString@stringPtr
  2649  043C  084E               	movf	_currentValueInfo,w
  2650  043D  0084               	movwf	4
  2651  043E  084F               	movf	_currentValueInfo+1,w
  2652  043F  0085               	movwf	5
  2653  0440  0800               	movf	0,w	;code access
  2654  0441  318E  26F2  3180   	fcall	_ParallelLCD_WriteString
  2655  0444                     l2216:	
  2656                           
  2657                           ;main.c: 666: }
  2658                           ;main.c: 667: if( blinkPrescaler == 0xC0 ) {
  2659  0444  30C0               	movlw	192
  2660  0445  0020               	movlb	0	; select bank0
  2661  0446  0650               	xorwf	_blinkPrescaler,w
  2662  0447  1D03               	btfss	3,2
  2663  0448  28BF               	goto	l262
  2664                           
  2665                           ;main.c: 668: ParallelLCD_ClearPartial( currentValueInfo->position , currentValueInfo->l
      +                          ength ) ;
  2666  0449  084F               	movf	_currentValueInfo+1,w
  2667  044A  00A1               	movwf	??_main+1
  2668  044B  084E               	movf	_currentValueInfo,w
  2669  044C  00A0               	movwf	??_main
  2670  044D  3001               	movlw	1
  2671  044E  0720               	addwf	??_main,w
  2672  044F  0084               	movwf	4
  2673  0450  0821               	movf	??_main+1,w
  2674  0451  1803               	skipnc
  2675  0452  0A21               	incf	??_main+1,w
  2676  0453  0085               	movwf	5
  2677  0454  0800               	movf	0,w	;code access
  2678  0455  00A2               	movwf	??_main+2
  2679  0456  0822               	movf	??_main+2,w
  2680  0457  00F5               	movwf	ParallelLCD_ClearPartial@length
  2681  0458  084E               	movf	_currentValueInfo,w
  2682  0459  0084               	movwf	4
  2683  045A  084F               	movf	_currentValueInfo+1,w
  2684  045B  0085               	movwf	5
  2685  045C  0800               	movf	0,w	;code access
  2686  045D  318E  2698  3180   	fcall	_ParallelLCD_ClearPartial
  2687                           
  2688                           ;main.c: 669: }
  2689                           ;main.c: 670: }
  2690                           ;main.c: 671: }
  2691  0460  28BF               	goto	l262
  2692  0461                     __end_of_main:	
  2693                           
  2694                           	psect	swtext1
  2695  0800                     __pswtext1:	
  2696  0800                     S2310:	
  2697  0800  3182  2AF1         	ljmp	l2122
  2698  0802  3183  2B1D         	ljmp	l2136
  2699  0804  3182  2AF1         	ljmp	l2122
  2700  0806  3182  2AF1         	ljmp	l2122
  2701  0808  3182  2AF1         	ljmp	l2122
  2702  080A  3183  2B4B         	ljmp	l2140
  2703  080C  3183  2B5E         	ljmp	l2144
  2704  080E  3183  2B6F         	ljmp	l2146
  2705                           
  2706                           	psect	text1
  2707  07B6                     __ptext1:	
  2708 ;; *************** function _initialize *****************
  2709 ;; Defined at:
  2710 ;;		line 3 in file "src/pic16f1508_init.h"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;		None
  2715 ;; Return value:  Size  Location     Type
  2716 ;;		None               void
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2724 ;;      Params:         0       0       0       0
  2725 ;;      Locals:         0       0       0       0
  2726 ;;      Temps:          0       0       0       0
  2727 ;;      Totals:         0       0       0       0
  2728 ;;Total ram usage:        0 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_main
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _initialize
  2740  07B6                     _initialize:	
  2741                           
  2742                           ;pic16f1508_init.h: 6: OSCCONbits.IRCF = 0b1011 ;
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _initialize: [wreg+status,2+status,0]
  2746  07B6  0021               	movlb	1	; select bank1
  2747  07B7  0819               	movf	25,w	;volatile
  2748  07B8  3987               	andlw	-121
  2749  07B9  3858               	iorlw	88
  2750  07BA  0099               	movwf	25	;volatile
  2751                           
  2752                           ;pic16f1508_init.h: 7: OSCCONbits.SCS = 0b10 ;
  2753  07BB  0819               	movf	25,w	;volatile
  2754  07BC  39FC               	andlw	-4
  2755  07BD  3802               	iorlw	2
  2756  07BE  0099               	movwf	25	;volatile
  2757                           
  2758                           ;pic16f1508_init.h: 10: INTCONbits.GIE = 1 ;
  2759  07BF  178B               	bsf	11,7	;volatile
  2760                           
  2761                           ;pic16f1508_init.h: 11: INTCONbits.PEIE = 0 ;
  2762  07C0  130B               	bcf	11,6	;volatile
  2763                           
  2764                           ;pic16f1508_init.h: 12: INTCONbits.INTE = 0 ;
  2765  07C1  120B               	bcf	11,4	;volatile
  2766                           
  2767                           ;pic16f1508_init.h: 15: INTCONbits.IOCIE = 0 ;
  2768  07C2  118B               	bcf	11,3	;volatile
  2769                           
  2770                           ;pic16f1508_init.h: 16: INTCONbits.IOCIE = 0 ;
  2771  07C3  118B               	bcf	11,3	;volatile
  2772                           
  2773                           ;pic16f1508_init.h: 17: IOCANbits.IOCAN3 = 1 ;
  2774  07C4  0027               	movlb	7	; select bank7
  2775  07C5  1592               	bsf	18,3	;volatile
  2776                           
  2777                           ;pic16f1508_init.h: 20: OPTION_REGbits.PSA = 1 ;
  2778  07C6  0021               	movlb	1	; select bank1
  2779  07C7  1595               	bsf	21,3	;volatile
  2780                           
  2781                           ;pic16f1508_init.h: 21: OPTION_REGbits.PS = 0b010 ;
  2782  07C8  0815               	movf	21,w	;volatile
  2783  07C9  39F8               	andlw	-8
  2784  07CA  3802               	iorlw	2
  2785  07CB  0095               	movwf	21	;volatile
  2786                           
  2787                           ;pic16f1508_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  2788  07CC  1295               	bcf	21,5	;volatile
  2789                           
  2790                           ;pic16f1508_init.h: 23: OPTION_REGbits.TMR0SE = 1 ;
  2791  07CD  1615               	bsf	21,4	;volatile
  2792                           
  2793                           ;pic16f1508_init.h: 24: TMR0 = 0 ;
  2794  07CE  0020               	movlb	0	; select bank0
  2795  07CF  0195               	clrf	21	;volatile
  2796                           
  2797                           ;pic16f1508_init.h: 25: INTCONbits.TMR0IE = 0 ;
  2798  07D0  128B               	bcf	11,5	;volatile
  2799                           
  2800                           ;pic16f1508_init.h: 26: INTCONbits.TMR0IF = 0 ;
  2801  07D1  110B               	bcf	11,2	;volatile
  2802                           
  2803                           ;pic16f1508_init.h: 29: SSP1STAT = 0b10000000 ;
  2804  07D2  3080               	movlw	128
  2805  07D3  0024               	movlb	4	; select bank4
  2806  07D4  0094               	movwf	20	;volatile
  2807                           
  2808                           ;pic16f1508_init.h: 30: SSP1CON1 = 0b00101000 ;
  2809  07D5  3028               	movlw	40
  2810  07D6  0095               	movwf	21	;volatile
  2811                           
  2812                           ;pic16f1508_init.h: 31: SSP1ADD = 9 ;
  2813  07D7  3009               	movlw	9
  2814  07D8  0092               	movwf	18	;volatile
  2815                           
  2816                           ;pic16f1508_init.h: 34: T2CONbits.T2CKPS = 0b00 ;
  2817  07D9  30FC               	movlw	-4
  2818  07DA  0020               	movlb	0	; select bank0
  2819  07DB  059C               	andwf	28,f	;volatile
  2820                           
  2821                           ;pic16f1508_init.h: 35: T2CONbits.T2OUTPS = 0b0000 ;
  2822  07DC  3087               	movlw	-121
  2823  07DD  059C               	andwf	28,f	;volatile
  2824                           
  2825                           ;pic16f1508_init.h: 36: PIE1bits.TMR2IE = 0 ;
  2826  07DE  0021               	movlb	1	; select bank1
  2827  07DF  1091               	bcf	17,1	;volatile
  2828                           
  2829                           ;pic16f1508_init.h: 37: PIR1bits.TMR2IF = 0 ;
  2830  07E0  0020               	movlb	0	; select bank0
  2831  07E1  1091               	bcf	17,1	;volatile
  2832                           
  2833                           ;pic16f1508_init.h: 38: PR2 = 60 ;
  2834  07E2  303C               	movlw	60
  2835  07E3  009B               	movwf	27	;volatile
  2836                           
  2837                           ;pic16f1508_init.h: 39: TMR2 = 0 ;
  2838  07E4  019A               	clrf	26	;volatile
  2839                           
  2840                           ;pic16f1508_init.h: 40: T2CONbits.TMR2ON = 1 ;
  2841  07E5  151C               	bsf	28,2	;volatile
  2842                           
  2843                           ;pic16f1508_init.h: 43: PWM3DCH = 0 ;
  2844  07E6  002C               	movlb	12	; select bank12
  2845  07E7  0198               	clrf	24	;volatile
  2846                           
  2847                           ;pic16f1508_init.h: 44: PWM3DCL = 0 ;
  2848  07E8  0197               	clrf	23	;volatile
  2849                           
  2850                           ;pic16f1508_init.h: 45: PWM3CONbits.PWM3OE = 0 ;
  2851  07E9  1319               	bcf	25,6	;volatile
  2852                           
  2853                           ;pic16f1508_init.h: 46: PWM3CONbits.PWM3POL = 0 ;
  2854  07EA  1219               	bcf	25,4	;volatile
  2855                           
  2856                           ;pic16f1508_init.h: 47: PWM3CONbits.PWM3EN = 1 ;
  2857  07EB  1799               	bsf	25,7	;volatile
  2858                           
  2859                           ;pic16f1508_init.h: 49: ANSELA = 0b00000000 ;
  2860  07EC  0023               	movlb	3	; select bank3
  2861  07ED  018C               	clrf	12	;volatile
  2862                           
  2863                           ;pic16f1508_init.h: 50: ANSELB = 0b00000000 ;
  2864  07EE  018D               	clrf	13	;volatile
  2865                           
  2866                           ;pic16f1508_init.h: 51: ANSELC = 0b00000000 ;
  2867  07EF  018E               	clrf	14	;volatile
  2868                           
  2869                           ;pic16f1508_init.h: 53: TRISA = 0b00110011 ;
  2870  07F0  3033               	movlw	51
  2871  07F1  0021               	movlb	1	; select bank1
  2872  07F2  008C               	movwf	12	;volatile
  2873                           
  2874                           ;pic16f1508_init.h: 54: TRISB = 0b01010000 ;
  2875  07F3  3050               	movlw	80
  2876  07F4  008D               	movwf	13	;volatile
  2877                           
  2878                           ;pic16f1508_init.h: 55: TRISC = 0b00000000 ;
  2879  07F5  018E               	clrf	14	;volatile
  2880  07F6  0008               	return
  2881  07F7                     __end_of_initialize:	
  2882                           
  2883                           	psect	text2
  2884  066F                     __ptext2:	
  2885 ;; *************** function __date_time_ConvertByteToTime *****************
  2886 ;; Defined at:
  2887 ;;		line 115 in file "src/../../_Common/DateTime.h"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  dateTime        1    wreg     PTR struct .
  2890 ;;		 -> NULL(0), dateCurrent(7), datePtr(1), dateTimer(7), 
  2891 ;;  string          1    2[COMMON] PTR unsigned char 
  2892 ;;		 -> main@string(17), 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  dateTime        1    5[COMMON] PTR struct .
  2895 ;;		 -> NULL(0), dateCurrent(7), datePtr(1), dateTimer(7), 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;		None               void
  2898 ;; Registers used:
  2899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2905 ;;      Params:         1       0       0       0
  2906 ;;      Locals:         1       0       0       0
  2907 ;;      Temps:          2       0       0       0
  2908 ;;      Totals:         4       0       0       0
  2909 ;;Total ram usage:        4 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    1
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function __date_time_ConvertByteToTime
  2921  066F                     __date_time_ConvertByteToTime:	
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in __date_time_ConvertByteToTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  2925                           ;__date_time_ConvertByteToTime@dateTime stored from wreg
  2926  066F  00F5               	movwf	__date_time_ConvertByteToTime@dateTime
  2927                           
  2928                           ;DateTime.h: 117: string[8] = 0 ;
  2929  0670  0872               	movf	__date_time_ConvertByteToTime@string,w
  2930  0671  3E08               	addlw	8
  2931  0672  0086               	movwf	6
  2932  0673  0187               	clrf	7
  2933  0674  0181               	clrf	1
  2934                           
  2935                           ;DateTime.h: 119: string[5] = ':' ;
  2936  0675  303A               	movlw	58
  2937  0676  00F3               	movwf	??__date_time_ConvertByteToTime
  2938  0677  0872               	movf	__date_time_ConvertByteToTime@string,w
  2939  0678  3E05               	addlw	5
  2940  0679  0086               	movwf	6
  2941  067A  0187               	clrf	7
  2942  067B  0873               	movf	??__date_time_ConvertByteToTime,w
  2943  067C  0081               	movwf	1
  2944                           
  2945                           ;DateTime.h: 120: string[2] = ':' ;
  2946  067D  303A               	movlw	58
  2947  067E  00F3               	movwf	??__date_time_ConvertByteToTime
  2948  067F  0872               	movf	__date_time_ConvertByteToTime@string,w
  2949  0680  3E02               	addlw	2
  2950  0681  0086               	movwf	6
  2951  0682  0187               	clrf	7
  2952  0683  0873               	movf	??__date_time_ConvertByteToTime,w
  2953  0684  0081               	movwf	1
  2954                           
  2955                           ;DateTime.h: 123: string[7] = ( dateTime->second & 0x0F ) | '0' ;
  2956  0685  0875               	movf	__date_time_ConvertByteToTime@dateTime,w
  2957  0686  0086               	movwf	6
  2958  0687  0187               	clrf	7
  2959  0688  0801               	movf	1,w
  2960  0689  390F               	andlw	15
  2961  068A  3830               	iorlw	48
  2962  068B  00F3               	movwf	??__date_time_ConvertByteToTime
  2963  068C  0872               	movf	__date_time_ConvertByteToTime@string,w
  2964  068D  3E07               	addlw	7
  2965  068E  0086               	movwf	6
  2966  068F  0187               	clrf	7
  2967  0690  0873               	movf	??__date_time_ConvertByteToTime,w
  2968  0691  0081               	movwf	1
  2969                           
  2970                           ;DateTime.h: 124: string[6] = ( dateTime->second >> 4 ) | '0' ;
  2971  0692  0875               	movf	__date_time_ConvertByteToTime@dateTime,w
  2972  0693  0086               	movwf	6
  2973  0694  0187               	clrf	7
  2974  0695  0801               	movf	1,w
  2975  0696  00F3               	movwf	??__date_time_ConvertByteToTime
  2976  0697  3004               	movlw	4
  2977  0698                     u1425:	
  2978  0698  36F3               	lsrf	??__date_time_ConvertByteToTime,f
  2979  0699  0B89               	decfsz	9,f
  2980  069A  2E98               	goto	u1425
  2981  069B  0873               	movf	??__date_time_ConvertByteToTime,w
  2982  069C  3830               	iorlw	48
  2983  069D  00F4               	movwf	??__date_time_ConvertByteToTime+1
  2984  069E  0872               	movf	__date_time_ConvertByteToTime@string,w
  2985  069F  3E06               	addlw	6
  2986  06A0  0086               	movwf	6
  2987  06A1  0187               	clrf	7
  2988  06A2  0874               	movf	??__date_time_ConvertByteToTime+1,w
  2989  06A3  0081               	movwf	1
  2990                           
  2991                           ;DateTime.h: 126: string[4] = ( dateTime->minute & 0x0F ) | '0' ;
  2992  06A4  0A75               	incf	__date_time_ConvertByteToTime@dateTime,w
  2993  06A5  0086               	movwf	6
  2994  06A6  0187               	clrf	7
  2995  06A7  0801               	movf	1,w
  2996  06A8  390F               	andlw	15
  2997  06A9  3830               	iorlw	48
  2998  06AA  00F3               	movwf	??__date_time_ConvertByteToTime
  2999  06AB  0872               	movf	__date_time_ConvertByteToTime@string,w
  3000  06AC  3E04               	addlw	4
  3001  06AD  0086               	movwf	6
  3002  06AE  0187               	clrf	7
  3003  06AF  0873               	movf	??__date_time_ConvertByteToTime,w
  3004  06B0  0081               	movwf	1
  3005                           
  3006                           ;DateTime.h: 127: string[3] = ( dateTime->minute >> 4 ) | '0' ;
  3007  06B1  0A75               	incf	__date_time_ConvertByteToTime@dateTime,w
  3008  06B2  0086               	movwf	6
  3009  06B3  0187               	clrf	7
  3010  06B4  0801               	movf	1,w
  3011  06B5  00F3               	movwf	??__date_time_ConvertByteToTime
  3012  06B6  3004               	movlw	4
  3013  06B7                     u1435:	
  3014  06B7  36F3               	lsrf	??__date_time_ConvertByteToTime,f
  3015  06B8  0B89               	decfsz	9,f
  3016  06B9  2EB7               	goto	u1435
  3017  06BA  0873               	movf	??__date_time_ConvertByteToTime,w
  3018  06BB  3830               	iorlw	48
  3019  06BC  00F4               	movwf	??__date_time_ConvertByteToTime+1
  3020  06BD  0872               	movf	__date_time_ConvertByteToTime@string,w
  3021  06BE  3E03               	addlw	3
  3022  06BF  0086               	movwf	6
  3023  06C0  0187               	clrf	7
  3024  06C1  0874               	movf	??__date_time_ConvertByteToTime+1,w
  3025  06C2  0081               	movwf	1
  3026                           
  3027                           ;DateTime.h: 129: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  3028  06C3  0875               	movf	__date_time_ConvertByteToTime@dateTime,w
  3029  06C4  3E02               	addlw	2
  3030  06C5  0086               	movwf	6
  3031  06C6  0187               	clrf	7
  3032  06C7  0801               	movf	1,w
  3033  06C8  390F               	andlw	15
  3034  06C9  3830               	iorlw	48
  3035  06CA  00F3               	movwf	??__date_time_ConvertByteToTime
  3036  06CB  0A72               	incf	__date_time_ConvertByteToTime@string,w
  3037  06CC  0086               	movwf	6
  3038  06CD  0187               	clrf	7
  3039  06CE  0873               	movf	??__date_time_ConvertByteToTime,w
  3040  06CF  0081               	movwf	1
  3041                           
  3042                           ;DateTime.h: 130: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  3043  06D0  0875               	movf	__date_time_ConvertByteToTime@dateTime,w
  3044  06D1  3E02               	addlw	2
  3045  06D2  0086               	movwf	6
  3046  06D3  0187               	clrf	7
  3047  06D4  0801               	movf	1,w
  3048  06D5  00F3               	movwf	??__date_time_ConvertByteToTime
  3049  06D6  3004               	movlw	4
  3050  06D7                     u1445:	
  3051  06D7  36F3               	lsrf	??__date_time_ConvertByteToTime,f
  3052  06D8  0B89               	decfsz	9,f
  3053  06D9  2ED7               	goto	u1445
  3054  06DA  0873               	movf	??__date_time_ConvertByteToTime,w
  3055  06DB  3830               	iorlw	48
  3056  06DC  00F4               	movwf	??__date_time_ConvertByteToTime+1
  3057  06DD  0872               	movf	__date_time_ConvertByteToTime@string,w
  3058  06DE  0086               	movwf	6
  3059  06DF  0187               	clrf	7
  3060  06E0  0874               	movf	??__date_time_ConvertByteToTime+1,w
  3061  06E1  0081               	movwf	1
  3062  06E2  0008               	return
  3063  06E3                     __end_of__date_time_ConvertByteToTime:	
  3064                           
  3065                           	psect	text3
  3066  0461                     __ptext3:	
  3067 ;; *************** function __date_time_ConvertByteToDiscrete *****************
  3068 ;; Defined at:
  3069 ;;		line 135 in file "src/../../_Common/DateTime.h"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  dateTime        1    wreg     PTR struct .
  3072 ;;		 -> NULL(0), dateCurrent(7), datePtr(1), dateTimer(7), 
  3073 ;;  string          1    2[COMMON] PTR unsigned char 
  3074 ;;		 -> main@string_880(4), 
  3075 ;;  select          1    3[COMMON] enum E4144
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  dateTime        1    7[COMMON] PTR struct .
  3078 ;;		 -> NULL(0), dateCurrent(7), datePtr(1), dateTimer(7), 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;		None               void
  3081 ;; Registers used:
  3082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3088 ;;      Params:         2       0       0       0
  3089 ;;      Locals:         1       0       0       0
  3090 ;;      Temps:          3       0       0       0
  3091 ;;      Totals:         6       0       0       0
  3092 ;;Total ram usage:        6 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    1
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_main
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           
  3103                           ;psect for function __date_time_ConvertByteToDiscrete
  3104  0461                     __date_time_ConvertByteToDiscrete:	
  3105                           
  3106                           ;incstack = 0
  3107                           ; Regs used in __date_time_ConvertByteToDiscrete: [wreg-fsr1h+status,2+status,0+pclath]
  3108                           ;__date_time_ConvertByteToDiscrete@dateTime stored from wreg
  3109  0461  00F7               	movwf	__date_time_ConvertByteToDiscrete@dateTime
  3110                           
  3111                           ;DateTime.h: 137: string[2] = 0 ;
  3112  0462  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3113  0463  3E02               	addlw	2
  3114  0464  0086               	movwf	6
  3115  0465  0187               	clrf	7
  3116  0466  0181               	clrf	1
  3117                           
  3118                           ;DateTime.h: 139: switch ( select ) {
  3119  0467  2D76               	goto	l1768
  3120  0468                     l1746:	
  3121                           ;DateTime.h: 140: case DATE_ITEM_YEAR:
  3122                           
  3123                           
  3124                           ;DateTime.h: 141: string[1] = ( dateTime->year & 0x0F ) | '0' ;
  3125  0468  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3126  0469  3E06               	addlw	6
  3127  046A  0086               	movwf	6
  3128  046B  0187               	clrf	7
  3129  046C  0801               	movf	1,w
  3130  046D  390F               	andlw	15
  3131  046E  3830               	iorlw	48
  3132  046F  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3133  0470  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3134  0471  0086               	movwf	6
  3135  0472  0187               	clrf	7
  3136  0473  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3137  0474  0081               	movwf	1
  3138                           
  3139                           ;DateTime.h: 142: string[0] = ( dateTime->year >> 4 ) | '0' ;
  3140  0475  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3141  0476  3E06               	addlw	6
  3142  0477  0086               	movwf	6
  3143  0478  0187               	clrf	7
  3144  0479  0801               	movf	1,w
  3145  047A  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3146  047B  3004               	movlw	4
  3147  047C                     u1455:	
  3148  047C  36F4               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3149  047D  0B89               	decfsz	9,f
  3150  047E  2C7C               	goto	u1455
  3151  047F  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3152  0480  3830               	iorlw	48
  3153  0481  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3154  0482  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3155  0483  0086               	movwf	6
  3156  0484  0187               	clrf	7
  3157  0485  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3158  0486  0081               	movwf	1
  3159                           
  3160                           ;DateTime.h: 143: break ;
  3161  0487  0008               	return
  3162  0488                     l1748:	
  3163                           ;DateTime.h: 144: case DATE_ITEM_MONTH:
  3164                           
  3165                           
  3166                           ;DateTime.h: 145: string[1] = ( dateTime->month & 0x0F ) | '0' ;
  3167  0488  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3168  0489  3E05               	addlw	5
  3169  048A  0086               	movwf	6
  3170  048B  0187               	clrf	7
  3171  048C  0801               	movf	1,w
  3172  048D  390F               	andlw	15
  3173  048E  3830               	iorlw	48
  3174  048F  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3175  0490  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3176  0491  0086               	movwf	6
  3177  0492  0187               	clrf	7
  3178  0493  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3179  0494  0081               	movwf	1
  3180                           
  3181                           ;DateTime.h: 146: string[0] = ( dateTime->month >> 4 ) | '0' ;
  3182  0495  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3183  0496  3E05               	addlw	5
  3184  0497  0086               	movwf	6
  3185  0498  0187               	clrf	7
  3186  0499  0801               	movf	1,w
  3187  049A  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3188  049B  3004               	movlw	4
  3189  049C                     u1465:	
  3190  049C  36F4               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3191  049D  0B89               	decfsz	9,f
  3192  049E  2C9C               	goto	u1465
  3193  049F  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3194  04A0  3830               	iorlw	48
  3195  04A1  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3196  04A2  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3197  04A3  0086               	movwf	6
  3198  04A4  0187               	clrf	7
  3199  04A5  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3200  04A6  0081               	movwf	1
  3201                           
  3202                           ;DateTime.h: 147: break ;
  3203  04A7  0008               	return
  3204  04A8                     l1750:	
  3205                           ;DateTime.h: 148: case DATE_ITEM_DATE:
  3206                           
  3207                           
  3208                           ;DateTime.h: 149: string[1] = ( dateTime->day & 0x0F ) | '0' ;
  3209  04A8  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3210  04A9  3E04               	addlw	4
  3211  04AA  0086               	movwf	6
  3212  04AB  0187               	clrf	7
  3213  04AC  0801               	movf	1,w
  3214  04AD  390F               	andlw	15
  3215  04AE  3830               	iorlw	48
  3216  04AF  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3217  04B0  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3218  04B1  0086               	movwf	6
  3219  04B2  0187               	clrf	7
  3220  04B3  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3221  04B4  0081               	movwf	1
  3222                           
  3223                           ;DateTime.h: 150: string[0] = ( dateTime->day >> 4 ) | '0' ;
  3224  04B5  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3225  04B6  3E04               	addlw	4
  3226  04B7  0086               	movwf	6
  3227  04B8  0187               	clrf	7
  3228  04B9  0801               	movf	1,w
  3229  04BA  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3230  04BB  3004               	movlw	4
  3231  04BC                     u1475:	
  3232  04BC  36F4               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3233  04BD  0B89               	decfsz	9,f
  3234  04BE  2CBC               	goto	u1475
  3235  04BF  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3236  04C0  3830               	iorlw	48
  3237  04C1  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3238  04C2  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3239  04C3  0086               	movwf	6
  3240  04C4  0187               	clrf	7
  3241  04C5  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3242  04C6  0081               	movwf	1
  3243                           
  3244                           ;DateTime.h: 151: break ;
  3245  04C7  0008               	return
  3246  04C8                     l1752:	
  3247                           ;DateTime.h: 152: case DATE_ITEM_DAY_OF_WEEK:
  3248                           
  3249                           
  3250                           ;DateTime.h: 153: string[0] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  3251  04C8  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3252  04C9  3E03               	addlw	3
  3253  04CA  0086               	movwf	6
  3254  04CB  0187               	clrf	7
  3255  04CC  3501               	lslf	1,w
  3256  04CD  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3257  04CE  0086               	movwf	6
  3258  04CF  0187               	clrf	7
  3259  04D0  3F40               	moviw [0]fsr1
  3260  04D1  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3261  04D2  3F41               	moviw [1]fsr1
  3262  04D3  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3263  04D4  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3264  04D5  0084               	movwf	4
  3265  04D6  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3266  04D7  0085               	movwf	5
  3267  04D8  0800               	movf	0,w	;code access
  3268  04D9  00F6               	movwf	??__date_time_ConvertByteToDiscrete+2
  3269  04DA  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3270  04DB  0086               	movwf	6
  3271  04DC  0187               	clrf	7
  3272  04DD  0876               	movf	??__date_time_ConvertByteToDiscrete+2,w
  3273  04DE  0081               	movwf	1
  3274                           
  3275                           ;DateTime.h: 154: string[1] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  3276  04DF  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3277  04E0  3E03               	addlw	3
  3278  04E1  0086               	movwf	6
  3279  04E2  0187               	clrf	7
  3280  04E3  3501               	lslf	1,w
  3281  04E4  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3282  04E5  0086               	movwf	6
  3283  04E6  0187               	clrf	7
  3284  04E7  3F40               	moviw [0]fsr1
  3285  04E8  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3286  04E9  3F41               	moviw [1]fsr1
  3287  04EA  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3288  04EB  3001               	movlw	1
  3289  04EC  0774               	addwf	??__date_time_ConvertByteToDiscrete,w
  3290  04ED  0084               	movwf	4
  3291  04EE  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3292  04EF  1803               	skipnc
  3293  04F0  0A75               	incf	??__date_time_ConvertByteToDiscrete+1,w
  3294  04F1  0085               	movwf	5
  3295  04F2  0800               	movf	0,w	;code access
  3296  04F3  00F6               	movwf	??__date_time_ConvertByteToDiscrete+2
  3297  04F4  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3298  04F5  0086               	movwf	6
  3299  04F6  0187               	clrf	7
  3300  04F7  0876               	movf	??__date_time_ConvertByteToDiscrete+2,w
  3301  04F8  0081               	movwf	1
  3302                           
  3303                           ;DateTime.h: 155: string[2] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  3304  04F9  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3305  04FA  3E03               	addlw	3
  3306  04FB  0086               	movwf	6
  3307  04FC  0187               	clrf	7
  3308  04FD  3501               	lslf	1,w
  3309  04FE  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3310  04FF  0086               	movwf	6
  3311  0500  0187               	clrf	7
  3312  0501  3F40               	moviw [0]fsr1
  3313  0502  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3314  0503  3F41               	moviw [1]fsr1
  3315  0504  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3316  0505  3002               	movlw	2
  3317  0506  0774               	addwf	??__date_time_ConvertByteToDiscrete,w
  3318  0507  0084               	movwf	4
  3319  0508  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3320  0509  1803               	skipnc
  3321  050A  0A75               	incf	??__date_time_ConvertByteToDiscrete+1,w
  3322  050B  0085               	movwf	5
  3323  050C  0800               	movf	0,w	;code access
  3324  050D  00F6               	movwf	??__date_time_ConvertByteToDiscrete+2
  3325  050E  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3326  050F  3E02               	addlw	2
  3327  0510  0086               	movwf	6
  3328  0511  0187               	clrf	7
  3329  0512  0876               	movf	??__date_time_ConvertByteToDiscrete+2,w
  3330  0513  0081               	movwf	1
  3331                           
  3332                           ;DateTime.h: 156: string[3] = 0 ;
  3333  0514  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3334  0515  3E03               	addlw	3
  3335  0516  0086               	movwf	6
  3336  0517  0187               	clrf	7
  3337  0518  0181               	clrf	1
  3338                           
  3339                           ;DateTime.h: 157: break ;
  3340  0519  0008               	return
  3341  051A                     l1756:	
  3342                           ;DateTime.h: 158: case DATE_ITEM_HOUR:
  3343                           
  3344                           
  3345                           ;DateTime.h: 159: string[1] = ( dateTime->hour & 0x0F ) | '0' ;
  3346  051A  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3347  051B  3E02               	addlw	2
  3348  051C  0086               	movwf	6
  3349  051D  0187               	clrf	7
  3350  051E  0801               	movf	1,w
  3351  051F  390F               	andlw	15
  3352  0520  3830               	iorlw	48
  3353  0521  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3354  0522  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3355  0523  0086               	movwf	6
  3356  0524  0187               	clrf	7
  3357  0525  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3358  0526  0081               	movwf	1
  3359                           
  3360                           ;DateTime.h: 160: string[0] = ( dateTime->hour >> 4 ) | '0' ;
  3361  0527  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3362  0528  3E02               	addlw	2
  3363  0529  0086               	movwf	6
  3364  052A  0187               	clrf	7
  3365  052B  0801               	movf	1,w
  3366  052C  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3367  052D  3004               	movlw	4
  3368  052E                     u1485:	
  3369  052E  36F4               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3370  052F  0B89               	decfsz	9,f
  3371  0530  2D2E               	goto	u1485
  3372  0531  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3373  0532  3830               	iorlw	48
  3374  0533  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3375  0534  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3376  0535  0086               	movwf	6
  3377  0536  0187               	clrf	7
  3378  0537  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3379  0538  0081               	movwf	1
  3380                           
  3381                           ;DateTime.h: 161: break ;
  3382  0539  0008               	return
  3383  053A                     l1758:	
  3384                           ;DateTime.h: 162: case DATE_ITEM_MINUTE:
  3385                           
  3386                           
  3387                           ;DateTime.h: 163: string[1] = ( dateTime->minute & 0x0F ) | '0' ;
  3388  053A  0A77               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  3389  053B  0086               	movwf	6
  3390  053C  0187               	clrf	7
  3391  053D  0801               	movf	1,w
  3392  053E  390F               	andlw	15
  3393  053F  3830               	iorlw	48
  3394  0540  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3395  0541  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3396  0542  0086               	movwf	6
  3397  0543  0187               	clrf	7
  3398  0544  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3399  0545  0081               	movwf	1
  3400                           
  3401                           ;DateTime.h: 164: string[0] = ( dateTime->minute >> 4 ) | '0' ;
  3402  0546  0A77               	incf	__date_time_ConvertByteToDiscrete@dateTime,w
  3403  0547  0086               	movwf	6
  3404  0548  0187               	clrf	7
  3405  0549  0801               	movf	1,w
  3406  054A  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3407  054B  3004               	movlw	4
  3408  054C                     u1495:	
  3409  054C  36F4               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3410  054D  0B89               	decfsz	9,f
  3411  054E  2D4C               	goto	u1495
  3412  054F  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3413  0550  3830               	iorlw	48
  3414  0551  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3415  0552  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3416  0553  0086               	movwf	6
  3417  0554  0187               	clrf	7
  3418  0555  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3419  0556  0081               	movwf	1
  3420                           
  3421                           ;DateTime.h: 165: break ;
  3422  0557  0008               	return
  3423  0558                     l1762:	
  3424                           ;DateTime.h: 166: case DATE_ITEM_SECOND:
  3425                           
  3426                           
  3427                           ;DateTime.h: 167: string[1] = ( dateTime->second & 0x0F ) | '0' ;
  3428  0558  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3429  0559  0086               	movwf	6
  3430  055A  0187               	clrf	7
  3431  055B  0801               	movf	1,w
  3432  055C  390F               	andlw	15
  3433  055D  3830               	iorlw	48
  3434  055E  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3435  055F  0A72               	incf	__date_time_ConvertByteToDiscrete@string,w
  3436  0560  0086               	movwf	6
  3437  0561  0187               	clrf	7
  3438  0562  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3439  0563  0081               	movwf	1
  3440                           
  3441                           ;DateTime.h: 168: string[0] = ( dateTime->second >> 4 ) | '0' ;
  3442  0564  0877               	movf	__date_time_ConvertByteToDiscrete@dateTime,w
  3443  0565  0086               	movwf	6
  3444  0566  0187               	clrf	7
  3445  0567  0801               	movf	1,w
  3446  0568  00F4               	movwf	??__date_time_ConvertByteToDiscrete
  3447  0569  3004               	movlw	4
  3448  056A                     u1505:	
  3449  056A  36F4               	lsrf	??__date_time_ConvertByteToDiscrete,f
  3450  056B  0B89               	decfsz	9,f
  3451  056C  2D6A               	goto	u1505
  3452  056D  0874               	movf	??__date_time_ConvertByteToDiscrete,w
  3453  056E  3830               	iorlw	48
  3454  056F  00F5               	movwf	??__date_time_ConvertByteToDiscrete+1
  3455  0570  0872               	movf	__date_time_ConvertByteToDiscrete@string,w
  3456  0571  0086               	movwf	6
  3457  0572  0187               	clrf	7
  3458  0573  0875               	movf	??__date_time_ConvertByteToDiscrete+1,w
  3459  0574  0081               	movwf	1
  3460                           
  3461                           ;DateTime.h: 170: }
  3462                           
  3463                           ;DateTime.h: 169: break ;
  3464  0575  0008               	return
  3465  0576                     l1768:	
  3466  0576  0873               	movf	__date_time_ConvertByteToDiscrete@select,w
  3467                           
  3468                           ; Switch size 1, requested type "space"
  3469                           ; Number of cases is 7, Range of values is 0 to 6
  3470                           ; switch strategies available:
  3471                           ; Name         Instructions Cycles
  3472                           ; direct_byte           20     6 (fixed)
  3473                           ; simple_byte           22    12 (average)
  3474                           ; jumptable            260     6 (fixed)
  3475                           ;	Chosen strategy is direct_byte
  3476  0577  0084               	movwf	4
  3477  0578  3007               	movlw	7
  3478  0579  0204               	subwf	4,w
  3479  057A  1803               	skipnc
  3480  057B  0008               	return
  3481  057C  3188               	movlp	high S2312
  3482  057D  3504               	lslf	4,w
  3483  057E  3E10               	addlw	low S2312
  3484  057F  0082               	movwf	2
  3485  0580  0008               	return
  3486  0581                     __end_of__date_time_ConvertByteToDiscrete:	
  3487                           
  3488                           	psect	swtext2
  3489  0810                     __pswtext2:	
  3490  0810                     S2312:	
  3491  0810  3184  2C68         	ljmp	l1746
  3492  0812  3184  2C88         	ljmp	l1748
  3493  0814  3184  2CA8         	ljmp	l1750
  3494  0816  3184  2CC8         	ljmp	l1752
  3495  0818  3185  2D1A         	ljmp	l1756
  3496  081A  3185  2D3A         	ljmp	l1758
  3497  081C  3185  2D58         	ljmp	l1762
  3498                           
  3499                           	psect	text4
  3500  0581                     __ptext4:	
  3501 ;; *************** function __date_time_ConvertByteToDate *****************
  3502 ;; Defined at:
  3503 ;;		line 87 in file "src/../../_Common/DateTime.h"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  dateTime        1    wreg     PTR struct .
  3506 ;;		 -> NULL(0), dateCurrent(7), datePtr(1), dateTimer(7), 
  3507 ;;  stinrg          1    2[COMMON] PTR unsigned char 
  3508 ;;		 -> main@string(17), 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  dateTime        1    6[COMMON] PTR struct .
  3511 ;;		 -> NULL(0), dateCurrent(7), datePtr(1), dateTimer(7), 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;		None               void
  3514 ;; Registers used:
  3515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3521 ;;      Params:         1       0       0       0
  3522 ;;      Locals:         1       0       0       0
  3523 ;;      Temps:          3       0       0       0
  3524 ;;      Totals:         5       0       0       0
  3525 ;;Total ram usage:        5 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    1
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_main
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           
  3536                           ;psect for function __date_time_ConvertByteToDate
  3537  0581                     __date_time_ConvertByteToDate:	
  3538                           
  3539                           ;incstack = 0
  3540                           ; Regs used in __date_time_ConvertByteToDate: [wreg-fsr1h+status,2+status,0+pclath]
  3541                           ;__date_time_ConvertByteToDate@dateTime stored from wreg
  3542  0581  00F6               	movwf	__date_time_ConvertByteToDate@dateTime
  3543                           
  3544                           ;DateTime.h: 89: stinrg[16] = 0 ;
  3545  0582  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3546  0583  3E10               	addlw	16
  3547  0584  0086               	movwf	6
  3548  0585  0187               	clrf	7
  3549  0586  0181               	clrf	1
  3550                           
  3551                           ;DateTime.h: 90: stinrg[15] = ']' ;
  3552  0587  305D               	movlw	93
  3553  0588  00F3               	movwf	??__date_time_ConvertByteToDate
  3554  0589  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3555  058A  3E0F               	addlw	15
  3556  058B  0086               	movwf	6
  3557  058C  0187               	clrf	7
  3558  058D  0873               	movf	??__date_time_ConvertByteToDate,w
  3559  058E  0081               	movwf	1
  3560                           
  3561                           ;DateTime.h: 91: stinrg[11] = '[' ;
  3562  058F  305B               	movlw	91
  3563  0590  00F3               	movwf	??__date_time_ConvertByteToDate
  3564  0591  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3565  0592  3E0B               	addlw	11
  3566  0593  0086               	movwf	6
  3567  0594  0187               	clrf	7
  3568  0595  0873               	movf	??__date_time_ConvertByteToDate,w
  3569  0596  0081               	movwf	1
  3570                           
  3571                           ;DateTime.h: 92: stinrg[10] = ' ' ;
  3572  0597  3020               	movlw	32
  3573  0598  00F3               	movwf	??__date_time_ConvertByteToDate
  3574  0599  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3575  059A  3E0A               	addlw	10
  3576  059B  0086               	movwf	6
  3577  059C  0187               	clrf	7
  3578  059D  0873               	movf	??__date_time_ConvertByteToDate,w
  3579  059E  0081               	movwf	1
  3580                           
  3581                           ;DateTime.h: 93: stinrg[7] = '-' ;
  3582  059F  302D               	movlw	45
  3583  05A0  00F3               	movwf	??__date_time_ConvertByteToDate
  3584  05A1  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3585  05A2  3E07               	addlw	7
  3586  05A3  0086               	movwf	6
  3587  05A4  0187               	clrf	7
  3588  05A5  0873               	movf	??__date_time_ConvertByteToDate,w
  3589  05A6  0081               	movwf	1
  3590                           
  3591                           ;DateTime.h: 94: stinrg[4] = '-' ;
  3592  05A7  302D               	movlw	45
  3593  05A8  00F3               	movwf	??__date_time_ConvertByteToDate
  3594  05A9  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3595  05AA  3E04               	addlw	4
  3596  05AB  0086               	movwf	6
  3597  05AC  0187               	clrf	7
  3598  05AD  0873               	movf	??__date_time_ConvertByteToDate,w
  3599  05AE  0081               	movwf	1
  3600                           
  3601                           ;DateTime.h: 97: stinrg[14] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][2] ;
  3602  05AF  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3603  05B0  3E03               	addlw	3
  3604  05B1  0086               	movwf	6
  3605  05B2  0187               	clrf	7
  3606  05B3  3501               	lslf	1,w
  3607  05B4  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3608  05B5  0086               	movwf	6
  3609  05B6  0187               	clrf	7
  3610  05B7  3F40               	moviw [0]fsr1
  3611  05B8  00F3               	movwf	??__date_time_ConvertByteToDate
  3612  05B9  3F41               	moviw [1]fsr1
  3613  05BA  00F4               	movwf	??__date_time_ConvertByteToDate+1
  3614  05BB  3002               	movlw	2
  3615  05BC  0773               	addwf	??__date_time_ConvertByteToDate,w
  3616  05BD  0084               	movwf	4
  3617  05BE  0874               	movf	??__date_time_ConvertByteToDate+1,w
  3618  05BF  1803               	skipnc
  3619  05C0  0A74               	incf	??__date_time_ConvertByteToDate+1,w
  3620  05C1  0085               	movwf	5
  3621  05C2  0800               	movf	0,w	;code access
  3622  05C3  00F5               	movwf	??__date_time_ConvertByteToDate+2
  3623  05C4  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3624  05C5  3E0E               	addlw	14
  3625  05C6  0086               	movwf	6
  3626  05C7  0187               	clrf	7
  3627  05C8  0875               	movf	??__date_time_ConvertByteToDate+2,w
  3628  05C9  0081               	movwf	1
  3629                           
  3630                           ;DateTime.h: 98: stinrg[13] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][1] ;
  3631  05CA  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3632  05CB  3E03               	addlw	3
  3633  05CC  0086               	movwf	6
  3634  05CD  0187               	clrf	7
  3635  05CE  3501               	lslf	1,w
  3636  05CF  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3637  05D0  0086               	movwf	6
  3638  05D1  0187               	clrf	7
  3639  05D2  3F40               	moviw [0]fsr1
  3640  05D3  00F3               	movwf	??__date_time_ConvertByteToDate
  3641  05D4  3F41               	moviw [1]fsr1
  3642  05D5  00F4               	movwf	??__date_time_ConvertByteToDate+1
  3643  05D6  3001               	movlw	1
  3644  05D7  0773               	addwf	??__date_time_ConvertByteToDate,w
  3645  05D8  0084               	movwf	4
  3646  05D9  0874               	movf	??__date_time_ConvertByteToDate+1,w
  3647  05DA  1803               	skipnc
  3648  05DB  0A74               	incf	??__date_time_ConvertByteToDate+1,w
  3649  05DC  0085               	movwf	5
  3650  05DD  0800               	movf	0,w	;code access
  3651  05DE  00F5               	movwf	??__date_time_ConvertByteToDate+2
  3652  05DF  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3653  05E0  3E0D               	addlw	13
  3654  05E1  0086               	movwf	6
  3655  05E2  0187               	clrf	7
  3656  05E3  0875               	movf	??__date_time_ConvertByteToDate+2,w
  3657  05E4  0081               	movwf	1
  3658                           
  3659                           ;DateTime.h: 99: stinrg[12] = STR_DAY_OF_WEEK[dateTime->dayOfWeek][0] ;
  3660  05E5  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3661  05E6  3E03               	addlw	3
  3662  05E7  0086               	movwf	6
  3663  05E8  0187               	clrf	7
  3664  05E9  3501               	lslf	1,w
  3665  05EA  3EA0               	addlw	(low (_STR_DAY_OF_WEEK| 0))& (0+255)
  3666  05EB  0086               	movwf	6
  3667  05EC  0187               	clrf	7
  3668  05ED  3F40               	moviw [0]fsr1
  3669  05EE  00F3               	movwf	??__date_time_ConvertByteToDate
  3670  05EF  3F41               	moviw [1]fsr1
  3671  05F0  00F4               	movwf	??__date_time_ConvertByteToDate+1
  3672  05F1  0873               	movf	??__date_time_ConvertByteToDate,w
  3673  05F2  0084               	movwf	4
  3674  05F3  0874               	movf	??__date_time_ConvertByteToDate+1,w
  3675  05F4  0085               	movwf	5
  3676  05F5  0800               	movf	0,w	;code access
  3677  05F6  00F5               	movwf	??__date_time_ConvertByteToDate+2
  3678  05F7  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3679  05F8  3E0C               	addlw	12
  3680  05F9  0086               	movwf	6
  3681  05FA  0187               	clrf	7
  3682  05FB  0875               	movf	??__date_time_ConvertByteToDate+2,w
  3683  05FC  0081               	movwf	1
  3684                           
  3685                           ;DateTime.h: 101: stinrg[9] = ( dateTime->day & 0x0F ) | '0' ;
  3686  05FD  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3687  05FE  3E04               	addlw	4
  3688  05FF  0086               	movwf	6
  3689  0600  0187               	clrf	7
  3690  0601  0801               	movf	1,w
  3691  0602  390F               	andlw	15
  3692  0603  3830               	iorlw	48
  3693  0604  00F3               	movwf	??__date_time_ConvertByteToDate
  3694  0605  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3695  0606  3E09               	addlw	9
  3696  0607  0086               	movwf	6
  3697  0608  0187               	clrf	7
  3698  0609  0873               	movf	??__date_time_ConvertByteToDate,w
  3699  060A  0081               	movwf	1
  3700                           
  3701                           ;DateTime.h: 102: stinrg[8] = ( dateTime->day >> 4 ) | '0' ;
  3702  060B  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3703  060C  3E04               	addlw	4
  3704  060D  0086               	movwf	6
  3705  060E  0187               	clrf	7
  3706  060F  0801               	movf	1,w
  3707  0610  00F3               	movwf	??__date_time_ConvertByteToDate
  3708  0611  3004               	movlw	4
  3709  0612                     u1395:	
  3710  0612  36F3               	lsrf	??__date_time_ConvertByteToDate,f
  3711  0613  0B89               	decfsz	9,f
  3712  0614  2E12               	goto	u1395
  3713  0615  0873               	movf	??__date_time_ConvertByteToDate,w
  3714  0616  3830               	iorlw	48
  3715  0617  00F4               	movwf	??__date_time_ConvertByteToDate+1
  3716  0618  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3717  0619  3E08               	addlw	8
  3718  061A  0086               	movwf	6
  3719  061B  0187               	clrf	7
  3720  061C  0874               	movf	??__date_time_ConvertByteToDate+1,w
  3721  061D  0081               	movwf	1
  3722                           
  3723                           ;DateTime.h: 104: stinrg[6] = ( dateTime->month & 0x0F ) | '0' ;
  3724  061E  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3725  061F  3E05               	addlw	5
  3726  0620  0086               	movwf	6
  3727  0621  0187               	clrf	7
  3728  0622  0801               	movf	1,w
  3729  0623  390F               	andlw	15
  3730  0624  3830               	iorlw	48
  3731  0625  00F3               	movwf	??__date_time_ConvertByteToDate
  3732  0626  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3733  0627  3E06               	addlw	6
  3734  0628  0086               	movwf	6
  3735  0629  0187               	clrf	7
  3736  062A  0873               	movf	??__date_time_ConvertByteToDate,w
  3737  062B  0081               	movwf	1
  3738                           
  3739                           ;DateTime.h: 105: stinrg[5] = ( dateTime->month >> 4 ) | '0' ;
  3740  062C  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3741  062D  3E05               	addlw	5
  3742  062E  0086               	movwf	6
  3743  062F  0187               	clrf	7
  3744  0630  0801               	movf	1,w
  3745  0631  00F3               	movwf	??__date_time_ConvertByteToDate
  3746  0632  3004               	movlw	4
  3747  0633                     u1405:	
  3748  0633  36F3               	lsrf	??__date_time_ConvertByteToDate,f
  3749  0634  0B89               	decfsz	9,f
  3750  0635  2E33               	goto	u1405
  3751  0636  0873               	movf	??__date_time_ConvertByteToDate,w
  3752  0637  3830               	iorlw	48
  3753  0638  00F4               	movwf	??__date_time_ConvertByteToDate+1
  3754  0639  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3755  063A  3E05               	addlw	5
  3756  063B  0086               	movwf	6
  3757  063C  0187               	clrf	7
  3758  063D  0874               	movf	??__date_time_ConvertByteToDate+1,w
  3759  063E  0081               	movwf	1
  3760                           
  3761                           ;DateTime.h: 107: stinrg[3] = ( dateTime->year & 0x0F ) | '0' ;
  3762  063F  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3763  0640  3E06               	addlw	6
  3764  0641  0086               	movwf	6
  3765  0642  0187               	clrf	7
  3766  0643  0801               	movf	1,w
  3767  0644  390F               	andlw	15
  3768  0645  3830               	iorlw	48
  3769  0646  00F3               	movwf	??__date_time_ConvertByteToDate
  3770  0647  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3771  0648  3E03               	addlw	3
  3772  0649  0086               	movwf	6
  3773  064A  0187               	clrf	7
  3774  064B  0873               	movf	??__date_time_ConvertByteToDate,w
  3775  064C  0081               	movwf	1
  3776                           
  3777                           ;DateTime.h: 108: stinrg[2] = ( dateTime->year >> 4 ) | '0' ;
  3778  064D  0876               	movf	__date_time_ConvertByteToDate@dateTime,w
  3779  064E  3E06               	addlw	6
  3780  064F  0086               	movwf	6
  3781  0650  0187               	clrf	7
  3782  0651  0801               	movf	1,w
  3783  0652  00F3               	movwf	??__date_time_ConvertByteToDate
  3784  0653  3004               	movlw	4
  3785  0654                     u1415:	
  3786  0654  36F3               	lsrf	??__date_time_ConvertByteToDate,f
  3787  0655  0B89               	decfsz	9,f
  3788  0656  2E54               	goto	u1415
  3789  0657  0873               	movf	??__date_time_ConvertByteToDate,w
  3790  0658  3830               	iorlw	48
  3791  0659  00F4               	movwf	??__date_time_ConvertByteToDate+1
  3792  065A  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3793  065B  3E02               	addlw	2
  3794  065C  0086               	movwf	6
  3795  065D  0187               	clrf	7
  3796  065E  0874               	movf	??__date_time_ConvertByteToDate+1,w
  3797  065F  0081               	movwf	1
  3798                           
  3799                           ;DateTime.h: 109: stinrg[1] = '0' ;
  3800  0660  3030               	movlw	48
  3801  0661  00F3               	movwf	??__date_time_ConvertByteToDate
  3802  0662  0A72               	incf	__date_time_ConvertByteToDate@stinrg,w
  3803  0663  0086               	movwf	6
  3804  0664  0187               	clrf	7
  3805  0665  0873               	movf	??__date_time_ConvertByteToDate,w
  3806  0666  0081               	movwf	1
  3807                           
  3808                           ;DateTime.h: 110: stinrg[0] = '2' ;
  3809  0667  3032               	movlw	50
  3810  0668  00F3               	movwf	??__date_time_ConvertByteToDate
  3811  0669  0872               	movf	__date_time_ConvertByteToDate@stinrg,w
  3812  066A  0086               	movwf	6
  3813  066B  0187               	clrf	7
  3814  066C  0873               	movf	??__date_time_ConvertByteToDate,w
  3815  066D  0081               	movwf	1
  3816  066E  0008               	return
  3817  066F                     __end_of__date_time_ConvertByteToDate:	
  3818                           
  3819                           	psect	text5
  3820  0F33                     __ptext5:	
  3821 ;; *************** function _ParallelLCD_WriteStringClearing *****************
  3822 ;; Defined at:
  3823 ;;		line 106 in file "src/../../_Common/ParallelLCD.h"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  position        1    wreg     enum E4101
  3826 ;;  stringPtr       2    5[COMMON] PTR const unsigned char 
  3827 ;;		 -> STR_19(17), STR_18(7), STR_17(8), STR_16(9), 
  3828 ;;		 -> STR_15(12), STR_14(6), STR_13(7), STR_12(8), 
  3829 ;;		 -> STR_11(8), STR_10(12), STR_9(10), STR_8(13), 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  position        1    8[COMMON] enum E4101
  3832 ;;  i               1    9[COMMON] unsigned char 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3842 ;;      Params:         2       0       0       0
  3843 ;;      Locals:         2       0       0       0
  3844 ;;      Temps:          1       0       0       0
  3845 ;;      Totals:         5       0       0       0
  3846 ;;Total ram usage:        5 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    2
  3849 ;; This function calls:
  3850 ;;		_ParallelLCD_WriteByte
  3851 ;; This function is called by:
  3852 ;;		_main
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _ParallelLCD_WriteStringClearing
  3858  0F33                     _ParallelLCD_WriteStringClearing:	
  3859                           
  3860                           ;incstack = 0
  3861                           ; Regs used in _ParallelLCD_WriteStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  3862                           ;ParallelLCD_WriteStringClearing@position stored from wreg
  3863  0F33  00F8               	movwf	ParallelLCD_WriteStringClearing@position
  3864                           
  3865                           ;ParallelLCD.h: 107: ParallelLCD_WriteByte( position & 0xF0 , BOOL_FALSE ) ;
  3866  0F34  01F2               	clrf	ParallelLCD_WriteByte@r
  3867  0F35  0878               	movf	ParallelLCD_WriteStringClearing@position,w
  3868  0F36  39F0               	andlw	240
  3869  0F37  318E  26C4  318F   	fcall	_ParallelLCD_WriteByte
  3870                           
  3871                           ;ParallelLCD.h: 108: for ( Uint08_t i = 0 ; i != 16 ; i++ ) {
  3872  0F3A  01F9               	clrf	ParallelLCD_WriteStringClearing@i
  3873  0F3B                     L7:	
  3874  0F3B  3010               	movlw	16
  3875  0F3C  0679               	xorwf	ParallelLCD_WriteStringClearing@i,w
  3876  0F3D  1903               	btfsc	3,2
  3877  0F3E  0008               	return
  3878                           
  3879                           ;ParallelLCD.h: 109: if ( i >= ( position & 0x0F ) && ( *stringPtr ) )
  3880  0F3F  0878               	movf	ParallelLCD_WriteStringClearing@position,w
  3881  0F40  390F               	andlw	15
  3882  0F41  0279               	subwf	ParallelLCD_WriteStringClearing@i,w
  3883  0F42  1C03               	skipc
  3884  0F43  2F5A               	goto	l1672
  3885  0F44  0875               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  3886  0F45  0084               	movwf	4
  3887  0F46  0876               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  3888  0F47  0085               	movwf	5
  3889  0F48  0012               	moviw fsr0++
  3890  0F49  1903               	btfsc	3,2
  3891  0F4A  2F5A               	goto	l1672
  3892                           
  3893                           ;ParallelLCD.h: 110: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  3894  0F4B  01F2               	clrf	ParallelLCD_WriteByte@r
  3895  0F4C  0AF2               	incf	ParallelLCD_WriteByte@r,f
  3896  0F4D  0875               	movf	ParallelLCD_WriteStringClearing@stringPtr,w
  3897  0F4E  0084               	movwf	4
  3898  0F4F  0876               	movf	ParallelLCD_WriteStringClearing@stringPtr+1,w
  3899  0F50  0085               	movwf	5
  3900  0F51  0800               	movf	0,w	;code access
  3901  0F52  318E  26C4  318F   	fcall	_ParallelLCD_WriteByte
  3902  0F55  3001               	movlw	1
  3903  0F56  07F5               	addwf	ParallelLCD_WriteStringClearing@stringPtr,f
  3904  0F57  3000               	movlw	0
  3905  0F58  3DF6               	addwfc	ParallelLCD_WriteStringClearing@stringPtr+1,f
  3906  0F59  2F60               	goto	l1674
  3907  0F5A                     l1672:	
  3908                           
  3909                           ;ParallelLCD.h: 111: else
  3910                           ;ParallelLCD.h: 112: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  3911  0F5A  01F2               	clrf	ParallelLCD_WriteByte@r
  3912  0F5B  0AF2               	incf	ParallelLCD_WriteByte@r,f
  3913  0F5C  3020               	movlw	32
  3914  0F5D  318E  26C4  318F   	fcall	_ParallelLCD_WriteByte
  3915  0F60                     l1674:	
  3916  0F60  3001               	movlw	1
  3917  0F61  00F7               	movwf	??_ParallelLCD_WriteStringClearing
  3918  0F62  0877               	movf	??_ParallelLCD_WriteStringClearing,w
  3919  0F63  07F9               	addwf	ParallelLCD_WriteStringClearing@i,f
  3920  0F64  2F3B               	goto	L7
  3921  0F65                     __end_of_ParallelLCD_WriteStringClearing:	
  3922                           
  3923                           	psect	text6
  3924  0EF2                     __ptext6:	
  3925 ;; *************** function _ParallelLCD_WriteString *****************
  3926 ;; Defined at:
  3927 ;;		line 97 in file "src/../../_Common/ParallelLCD.h"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  position        1    wreg     enum E4101
  3930 ;;  stringPtr       1    5[COMMON] PTR const unsigned char 
  3931 ;;		 -> main@string_880(4), main@valueString(4), main@string(17), 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  position        1    7[COMMON] enum E4101
  3934 ;; Return value:  Size  Location     Type
  3935 ;;		None               void
  3936 ;; Registers used:
  3937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3943 ;;      Params:         1       0       0       0
  3944 ;;      Locals:         1       0       0       0
  3945 ;;      Temps:          1       0       0       0
  3946 ;;      Totals:         3       0       0       0
  3947 ;;Total ram usage:        3 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    2
  3950 ;; This function calls:
  3951 ;;		_ParallelLCD_WriteByte
  3952 ;; This function is called by:
  3953 ;;		_main
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           
  3958                           ;psect for function _ParallelLCD_WriteString
  3959  0EF2                     _ParallelLCD_WriteString:	
  3960                           
  3961                           ;incstack = 0
  3962                           ; Regs used in _ParallelLCD_WriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  3963                           ;ParallelLCD_WriteString@position stored from wreg
  3964  0EF2  00F7               	movwf	ParallelLCD_WriteString@position
  3965                           
  3966                           ;ParallelLCD.h: 98: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  3967  0EF3  01F2               	clrf	ParallelLCD_WriteByte@r
  3968  0EF4  0877               	movf	ParallelLCD_WriteString@position,w
  3969  0EF5  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  3970  0EF8                     l1654:	
  3971                           ;ParallelLCD.h: 99: while ( *stringPtr ) {
  3972                           
  3973  0EF8  0875               	movf	ParallelLCD_WriteString@stringPtr,w
  3974  0EF9  0086               	movwf	6
  3975  0EFA  0187               	clrf	7
  3976  0EFB  0801               	movf	1,w
  3977  0EFC  1903               	btfsc	3,2
  3978  0EFD  0008               	return
  3979                           
  3980                           ;ParallelLCD.h: 100: ParallelLCD_WriteByte( *stringPtr++ , BOOL_TRUE ) ;
  3981  0EFE  01F2               	clrf	ParallelLCD_WriteByte@r
  3982  0EFF  0AF2               	incf	ParallelLCD_WriteByte@r,f
  3983  0F00  0875               	movf	ParallelLCD_WriteString@stringPtr,w
  3984  0F01  0086               	movwf	6
  3985  0F02  0187               	clrf	7
  3986  0F03  0801               	movf	1,w
  3987  0F04  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  3988  0F07  3001               	movlw	1
  3989  0F08  00F6               	movwf	??_ParallelLCD_WriteString
  3990  0F09  0876               	movf	??_ParallelLCD_WriteString,w
  3991  0F0A  07F5               	addwf	ParallelLCD_WriteString@stringPtr,f
  3992  0F0B  2EF8               	goto	l1654
  3993  0F0C                     __end_of_ParallelLCD_WriteString:	
  3994                           
  3995                           	psect	text7
  3996  0E8C                     __ptext7:	
  3997 ;; *************** function _ParallelLCD_WriteCharacter *****************
  3998 ;; Defined at:
  3999 ;;		line 90 in file "src/../../_Common/ParallelLCD.h"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  position        1    wreg     enum E4101
  4002 ;;  character       1    5[COMMON] unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  position        1    6[COMMON] enum E4101
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4014 ;;      Params:         1       0       0       0
  4015 ;;      Locals:         1       0       0       0
  4016 ;;      Temps:          0       0       0       0
  4017 ;;      Totals:         2       0       0       0
  4018 ;;Total ram usage:        2 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    2
  4021 ;; This function calls:
  4022 ;;		_ParallelLCD_WriteByte
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _ParallelLCD_WriteCharacter
  4030  0E8C                     _ParallelLCD_WriteCharacter:	
  4031                           
  4032                           ;incstack = 0
  4033                           ; Regs used in _ParallelLCD_WriteCharacter: [wreg+status,2+status,0+pclath+cstack]
  4034                           ;ParallelLCD_WriteCharacter@position stored from wreg
  4035  0E8C  00F6               	movwf	ParallelLCD_WriteCharacter@position
  4036                           
  4037                           ;ParallelLCD.h: 91: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4038  0E8D  01F2               	clrf	ParallelLCD_WriteByte@r
  4039  0E8E  0876               	movf	ParallelLCD_WriteCharacter@position,w
  4040  0E8F  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  4041                           
  4042                           ;ParallelLCD.h: 92: ParallelLCD_WriteByte( character , BOOL_TRUE ) ;
  4043  0E92  01F2               	clrf	ParallelLCD_WriteByte@r
  4044  0E93  0AF2               	incf	ParallelLCD_WriteByte@r,f
  4045  0E94  0875               	movf	ParallelLCD_WriteCharacter@character,w
  4046  0E95  318E  26C4         	fcall	_ParallelLCD_WriteByte
  4047  0E97  0008               	return
  4048  0E98                     __end_of_ParallelLCD_WriteCharacter:	
  4049                           
  4050                           	psect	text8
  4051  0F0C                     __ptext8:	
  4052 ;; *************** function _ParallelLCD_SetCgram *****************
  4053 ;; Defined at:
  4054 ;;		line 143 in file "src/../../_Common/ParallelLCD.h"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  charCode        1    wreg     unsigned char 
  4057 ;;  bitmap          2    5[COMMON] PTR const unsigned char 
  4058 ;;		 -> CURSOR_BITMAP(8), 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  charCode        1    8[COMMON] unsigned char 
  4061 ;;  i               1    9[COMMON] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4071 ;;      Params:         2       0       0       0
  4072 ;;      Locals:         2       0       0       0
  4073 ;;      Temps:          1       0       0       0
  4074 ;;      Totals:         5       0       0       0
  4075 ;;Total ram usage:        5 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    2
  4078 ;; This function calls:
  4079 ;;		_ParallelLCD_WriteByte
  4080 ;; This function is called by:
  4081 ;;		_main
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _ParallelLCD_SetCgram
  4087  0F0C                     _ParallelLCD_SetCgram:	
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _ParallelLCD_SetCgram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4091                           ;ParallelLCD_SetCgram@charCode stored from wreg
  4092  0F0C  00F8               	movwf	ParallelLCD_SetCgram@charCode
  4093                           
  4094                           ;ParallelLCD.h: 144: ParallelLCD_WriteByte( ( ( charCode << 3 ) & 0b00111111 ) | 0b01000
      +                          000 , BOOL_FALSE ) ;
  4095  0F0D  01F2               	clrf	ParallelLCD_WriteByte@r
  4096  0F0E  0878               	movf	ParallelLCD_SetCgram@charCode,w
  4097  0F0F  00F7               	movwf	??_ParallelLCD_SetCgram
  4098  0F10  3002               	movlw	2
  4099  0F11                     u1365:	
  4100  0F11  35F7               	lslf	??_ParallelLCD_SetCgram,f
  4101  0F12  3EFF               	addlw	-1
  4102  0F13  1D03               	skipz
  4103  0F14  2F11               	goto	u1365
  4104  0F15  3577               	lslf	??_ParallelLCD_SetCgram,w
  4105  0F16  393F               	andlw	63
  4106  0F17  3840               	iorlw	64
  4107  0F18  318E  26C4  318F   	fcall	_ParallelLCD_WriteByte
  4108                           
  4109                           ;ParallelLCD.h: 145: for ( Uint08_t i = 0 ; i != 8 ; i++ , bitmap++ )
  4110  0F1B  01F9               	clrf	ParallelLCD_SetCgram@i
  4111  0F1C                     L8:	
  4112  0F1C  3008               	movlw	8
  4113  0F1D  0679               	xorwf	ParallelLCD_SetCgram@i,w
  4114  0F1E  1903               	btfsc	3,2
  4115  0F1F  0008               	return
  4116                           
  4117                           ;ParallelLCD.h: 146: ParallelLCD_WriteByte( *bitmap , BOOL_TRUE ) ;
  4118  0F20  01F2               	clrf	ParallelLCD_WriteByte@r
  4119  0F21  0AF2               	incf	ParallelLCD_WriteByte@r,f
  4120  0F22  0875               	movf	ParallelLCD_SetCgram@bitmap,w
  4121  0F23  0084               	movwf	4
  4122  0F24  0876               	movf	ParallelLCD_SetCgram@bitmap+1,w
  4123  0F25  0085               	movwf	5
  4124  0F26  0800               	movf	0,w	;code access
  4125  0F27  318E  26C4  318F   	fcall	_ParallelLCD_WriteByte
  4126  0F2A  3001               	movlw	1
  4127  0F2B  00F7               	movwf	??_ParallelLCD_SetCgram
  4128  0F2C  0877               	movf	??_ParallelLCD_SetCgram,w
  4129  0F2D  07F9               	addwf	ParallelLCD_SetCgram@i,f
  4130  0F2E  3001               	movlw	1
  4131  0F2F  07F5               	addwf	ParallelLCD_SetCgram@bitmap,f
  4132  0F30  3000               	movlw	0
  4133  0F31  3DF6               	addwfc	ParallelLCD_SetCgram@bitmap+1,f
  4134  0F32  2F1C               	goto	L8
  4135  0F33                     __end_of_ParallelLCD_SetCgram:	
  4136                           
  4137                           	psect	text9
  4138  06E3                     __ptext9:	
  4139 ;; *************** function _ParallelLCD_Initialize *****************
  4140 ;; Defined at:
  4141 ;;		line 76 in file "src/../../_Common/ParallelLCD.h"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  configFuncti    1    wreg     enum E4079
  4144 ;;  configDispla    1    5[COMMON] enum E4085
  4145 ;;  configCursor    1    6[COMMON] enum E4091
  4146 ;;  configEntryM    1    7[COMMON] enum E4096
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  configFuncti    1    8[COMMON] enum E4079
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0, pclath, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4158 ;;      Params:         3       0       0       0
  4159 ;;      Locals:         1       0       0       0
  4160 ;;      Temps:          0       0       0       0
  4161 ;;      Totals:         4       0       0       0
  4162 ;;Total ram usage:        4 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    2
  4165 ;; This function calls:
  4166 ;;		_ParallelLCD_WriteByte
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _ParallelLCD_Initialize
  4174  06E3                     _ParallelLCD_Initialize:	
  4175                           
  4176                           ;incstack = 0
  4177                           ; Regs used in _ParallelLCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4178                           ;ParallelLCD_Initialize@configFunction stored from wreg
  4179  06E3  00F8               	movwf	ParallelLCD_Initialize@configFunction
  4180                           
  4181                           ;ParallelLCD.h: 82: ParallelLCD_WriteByte( ( configFunction & 0x1C ) | 0x20 , BOOL_FALSE
      +                           ) ;
  4182  06E4  01F2               	clrf	ParallelLCD_WriteByte@r
  4183  06E5  0878               	movf	ParallelLCD_Initialize@configFunction,w
  4184  06E6  391C               	andlw	28
  4185  06E7  3820               	iorlw	32
  4186  06E8  318E  26C4  3186   	fcall	_ParallelLCD_WriteByte
  4187                           
  4188                           ;ParallelLCD.h: 83: ParallelLCD_WriteByte( ( configDisplay & 0x0C ) | 0x08 , BOOL_FALSE 
      +                          ) ;
  4189  06EB  01F2               	clrf	ParallelLCD_WriteByte@r
  4190  06EC  0875               	movf	ParallelLCD_Initialize@configDisplay,w
  4191  06ED  390C               	andlw	12
  4192  06EE  3808               	iorlw	8
  4193  06EF  318E  26C4  3186   	fcall	_ParallelLCD_WriteByte
  4194                           
  4195                           ;ParallelLCD.h: 84: ParallelLCD_WriteByte( ( configCursor & 0x07 ) | 0x10 , BOOL_FALSE )
      +                           ;
  4196  06F2  01F2               	clrf	ParallelLCD_WriteByte@r
  4197  06F3  0876               	movf	ParallelLCD_Initialize@configCursor,w
  4198  06F4  3907               	andlw	7
  4199  06F5  3810               	iorlw	16
  4200  06F6  318E  26C4  3186   	fcall	_ParallelLCD_WriteByte
  4201                           
  4202                           ;ParallelLCD.h: 85: ParallelLCD_WriteByte( ( configEntryMode & 0x03 ) | 0x04 , BOOL_FALS
      +                          E ) ;
  4203  06F9  01F2               	clrf	ParallelLCD_WriteByte@r
  4204  06FA  0877               	movf	ParallelLCD_Initialize@configEntryMode,w
  4205  06FB  3903               	andlw	3
  4206  06FC  3804               	iorlw	4
  4207  06FD  318E  26C4         	fcall	_ParallelLCD_WriteByte
  4208  06FF  0008               	return
  4209  0700                     __end_of_ParallelLCD_Initialize:	
  4210                           
  4211                           	psect	text10
  4212  0EDB                     __ptext10:	
  4213 ;; *************** function _ParallelLCD_ClearRow *****************
  4214 ;; Defined at:
  4215 ;;		line 127 in file "src/../../_Common/ParallelLCD.h"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  rowSelect       1    wreg     enum E4101
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  rowSelect       1    6[COMMON] enum E4101
  4220 ;;  i               1    7[COMMON] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4230 ;;      Params:         0       0       0       0
  4231 ;;      Locals:         2       0       0       0
  4232 ;;      Temps:          1       0       0       0
  4233 ;;      Totals:         3       0       0       0
  4234 ;;Total ram usage:        3 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    2
  4237 ;; This function calls:
  4238 ;;		_ParallelLCD_WriteByte
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;;		_ParallelLCD_ClearDisplay
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _ParallelLCD_ClearRow
  4247  0EDB                     _ParallelLCD_ClearRow:	
  4248                           
  4249                           ;incstack = 0
  4250                           ; Regs used in _ParallelLCD_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  4251                           ;ParallelLCD_ClearRow@rowSelect stored from wreg
  4252  0EDB  00F6               	movwf	ParallelLCD_ClearRow@rowSelect
  4253                           
  4254                           ;ParallelLCD.h: 128: ParallelLCD_WriteByte( rowSelect & 0xF0 , BOOL_FALSE ) ;
  4255  0EDC  01F2               	clrf	ParallelLCD_WriteByte@r
  4256  0EDD  0876               	movf	ParallelLCD_ClearRow@rowSelect,w
  4257  0EDE  39F0               	andlw	240
  4258  0EDF  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  4259                           
  4260                           ;ParallelLCD.h: 129: for ( Uint08_t i = 0 ; i != 16 ; i++ )
  4261  0EE2  01F7               	clrf	ParallelLCD_ClearRow@i
  4262  0EE3                     L9:	
  4263  0EE3  3010               	movlw	16
  4264  0EE4  0677               	xorwf	ParallelLCD_ClearRow@i,w
  4265  0EE5  1903               	btfsc	3,2
  4266  0EE6  0008               	return
  4267                           
  4268                           ;ParallelLCD.h: 130: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4269  0EE7  01F2               	clrf	ParallelLCD_WriteByte@r
  4270  0EE8  0AF2               	incf	ParallelLCD_WriteByte@r,f
  4271  0EE9  3020               	movlw	32
  4272  0EEA  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  4273  0EED  3001               	movlw	1
  4274  0EEE  00F5               	movwf	??_ParallelLCD_ClearRow
  4275  0EEF  0875               	movf	??_ParallelLCD_ClearRow,w
  4276  0EF0  07F7               	addwf	ParallelLCD_ClearRow@i,f
  4277  0EF1  2EE3               	goto	L9
  4278  0EF2                     __end_of_ParallelLCD_ClearRow:	
  4279                           
  4280                           	psect	text11
  4281  0E98                     __ptext11:	
  4282 ;; *************** function _ParallelLCD_ClearPartial *****************
  4283 ;; Defined at:
  4284 ;;		line 135 in file "src/../../_Common/ParallelLCD.h"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  position        1    wreg     enum E4101
  4287 ;;  length          1    5[COMMON] unsigned char 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  position        1    7[COMMON] enum E4101
  4290 ;;  i               1    8[COMMON] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4300 ;;      Params:         1       0       0       0
  4301 ;;      Locals:         2       0       0       0
  4302 ;;      Temps:          1       0       0       0
  4303 ;;      Totals:         4       0       0       0
  4304 ;;Total ram usage:        4 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    2
  4307 ;; This function calls:
  4308 ;;		_ParallelLCD_WriteByte
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _ParallelLCD_ClearPartial
  4316  0E98                     _ParallelLCD_ClearPartial:	
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in _ParallelLCD_ClearPartial: [wreg+status,2+status,0+pclath+cstack]
  4320                           ;ParallelLCD_ClearPartial@position stored from wreg
  4321  0E98  00F7               	movwf	ParallelLCD_ClearPartial@position
  4322                           
  4323                           ;ParallelLCD.h: 136: ParallelLCD_WriteByte( position , BOOL_FALSE ) ;
  4324  0E99  01F2               	clrf	ParallelLCD_WriteByte@r
  4325  0E9A  0877               	movf	ParallelLCD_ClearPartial@position,w
  4326  0E9B  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  4327                           
  4328                           ;ParallelLCD.h: 137: for ( Uint08_t i = 0 ; i != length ; i++ )
  4329  0E9E  01F8               	clrf	ParallelLCD_ClearPartial@i
  4330  0E9F                     l1700:	
  4331  0E9F  0878               	movf	ParallelLCD_ClearPartial@i,w
  4332  0EA0  0675               	xorwf	ParallelLCD_ClearPartial@length,w
  4333  0EA1  1903               	btfsc	3,2
  4334  0EA2  0008               	return
  4335                           
  4336                           ;ParallelLCD.h: 138: ParallelLCD_WriteByte( ' ' , BOOL_TRUE ) ;
  4337  0EA3  01F2               	clrf	ParallelLCD_WriteByte@r
  4338  0EA4  0AF2               	incf	ParallelLCD_WriteByte@r,f
  4339  0EA5  3020               	movlw	32
  4340  0EA6  318E  26C4  318E   	fcall	_ParallelLCD_WriteByte
  4341  0EA9  3001               	movlw	1
  4342  0EAA  00F6               	movwf	??_ParallelLCD_ClearPartial
  4343  0EAB  0876               	movf	??_ParallelLCD_ClearPartial,w
  4344  0EAC  07F8               	addwf	ParallelLCD_ClearPartial@i,f
  4345  0EAD  2E9F               	goto	l1700
  4346  0EAE                     __end_of_ParallelLCD_ClearPartial:	
  4347                           
  4348                           	psect	text12
  4349  0EC4                     __ptext12:	
  4350 ;; *************** function _ParallelLCD_WriteByte *****************
  4351 ;; Defined at:
  4352 ;;		line 164 in file "src/../../_Common/ParallelLCD.h"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  data            1    wreg     unsigned char 
  4355 ;;  r               1    2[COMMON] enum E4074
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  data            1    4[COMMON] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4367 ;;      Params:         1       0       0       0
  4368 ;;      Locals:         1       0       0       0
  4369 ;;      Temps:          1       0       0       0
  4370 ;;      Totals:         3       0       0       0
  4371 ;;Total ram usage:        3 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    1
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_ParallelLCD_Initialize
  4378 ;;		_ParallelLCD_WriteCharacter
  4379 ;;		_ParallelLCD_WriteString
  4380 ;;		_ParallelLCD_WriteStringClearing
  4381 ;;		_ParallelLCD_ClearRow
  4382 ;;		_ParallelLCD_ClearPartial
  4383 ;;		_ParallelLCD_SetCgram
  4384 ;;		_ParallelLCD_WriteHexNumber
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _ParallelLCD_WriteByte
  4390  0EC4                     _ParallelLCD_WriteByte:	
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _ParallelLCD_WriteByte: [wreg+status,2+status,0]
  4394                           ;ParallelLCD_WriteByte@data stored from wreg
  4395  0EC4  00F4               	movwf	ParallelLCD_WriteByte@data
  4396                           
  4397                           ;ParallelLCD.h: 165: _delay((unsigned long)((40)*(1000000L/4000000.0))); ;
  4398  0EC5  3003               	movlw	3
  4399  0EC6  00F3               	movwf	??_ParallelLCD_WriteByte
  4400  0EC7                     u2477:	
  4401  0EC7  0BF3               	decfsz	??_ParallelLCD_WriteByte,f
  4402  0EC8  2EC7               	goto	u2477
  4403                           
  4404                           ;ParallelLCD.h: 166: LATC=data; ;
  4405  0EC9  0874               	movf	ParallelLCD_WriteByte@data,w
  4406  0ECA  0022               	movlb	2	; select bank2
  4407  0ECB  008E               	movwf	14	;volatile
  4408                           
  4409                           ;ParallelLCD.h: 167: LATBbits.LATB7=r&0x01; ;
  4410  0ECC  0872               	movf	ParallelLCD_WriteByte@r,w
  4411  0ECD  3901               	andlw	1
  4412  0ECE  00F3               	movwf	??_ParallelLCD_WriteByte
  4413  0ECF  0CF3               	rrf	??_ParallelLCD_WriteByte,f
  4414  0ED0  0CF3               	rrf	??_ParallelLCD_WriteByte,f
  4415  0ED1  080D               	movf	13,w	;volatile
  4416  0ED2  0673               	xorwf	??_ParallelLCD_WriteByte,w
  4417  0ED3  397F               	andlw	-129
  4418  0ED4  0673               	xorwf	??_ParallelLCD_WriteByte,w
  4419  0ED5  008D               	movwf	13	;volatile
  4420                           
  4421                           ;ParallelLCD.h: 168: LATBbits.LATB5=1;__nop();LATBbits.LATB5=0; ;
  4422  0ED6  168D               	bsf	13,5	;volatile
  4423  0ED7  0000               	nop
  4424  0ED8  0022               	movlb	2	; select bank2
  4425  0ED9  128D               	bcf	13,5	;volatile
  4426  0EDA  0008               	return
  4427  0EDB                     __end_of_ParallelLCD_WriteByte:	
  4428                           
  4429                           	psect	text13
  4430  0F65                     __ptext13:	
  4431 ;; *************** function _DS1307_SetClock *****************
  4432 ;; Defined at:
  4433 ;;		line 124 in file "src/../../_Common/DS1307.h"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  date            1    wreg     PTR struct .
  4436 ;;		 -> dateCurrent(7), 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  date            1    4[COMMON] PTR struct .
  4439 ;;		 -> dateCurrent(7), 
  4440 ;;  i               1    5[COMMON] unsigned char 
  4441 ;;  datePtr         1    3[COMMON] PTR unsigned char 
  4442 ;;		 -> dateCurrent(7), 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      unsigned char 
  4445 ;; Registers used:
  4446 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4452 ;;      Params:         0       0       0       0
  4453 ;;      Locals:         3       0       0       0
  4454 ;;      Temps:          1       0       0       0
  4455 ;;      Totals:         4       0       0       0
  4456 ;;Total ram usage:        4 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    1
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_main
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _DS1307_SetClock
  4468  0F65                     _DS1307_SetClock:	
  4469                           
  4470                           ;incstack = 0
  4471                           ; Regs used in _DS1307_SetClock: [wreg+fsr1l+fsr1h+status,2+status,0]
  4472                           ;DS1307_SetClock@date stored from wreg
  4473  0F65  00F4               	movwf	DS1307_SetClock@date
  4474                           
  4475                           ;DS1307.h: 127: SSP1CON2bits.SEN = 1 ;
  4476  0F66  0024               	movlb	4	; select bank4
  4477  0F67  1416               	bsf	22,0	;volatile
  4478  0F68                     l203:	
  4479                           ;DS1307.h: 128: while ( SSP1CON2bits.SEN ) ;
  4480                           
  4481  0F68  1816               	btfsc	22,0	;volatile
  4482  0F69  2F68               	goto	l203
  4483                           
  4484                           ;DS1307.h: 129: SSP1IF = 0 ;
  4485  0F6A  0020               	movlb	0	; select bank0
  4486  0F6B  1191               	bcf	17,3	;volatile
  4487                           
  4488                           ;DS1307.h: 132: SSP1BUF = 0xD0 ;
  4489  0F6C  30D0               	movlw	208
  4490  0F6D  0024               	movlb	4	; select bank4
  4491  0F6E  0091               	movwf	17	;volatile
  4492  0F6F                     l206:	
  4493                           ;DS1307.h: 133: while ( !SSP1IF ) ;
  4494                           
  4495  0F6F  0020               	movlb	0	; select bank0
  4496  0F70  1D91               	btfss	17,3	;volatile
  4497  0F71  2F6F               	goto	l206
  4498                           
  4499                           ;DS1307.h: 134: SSP1IF = 0 ;
  4500  0F72  1191               	bcf	17,3	;volatile
  4501                           
  4502                           ;DS1307.h: 135: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  4503  0F73  0024               	movlb	4	; select bank4
  4504  0F74  1B16               	btfsc	22,6	;volatile
  4505  0F75  0008               	return
  4506                           
  4507                           ;DS1307.h: 138: SSP1BUF = 0x00 ;
  4508                           
  4509                           ;	Return value of _DS1307_SetClock is never used
  4510  0F76  0191               	clrf	17	;volatile
  4511  0F77                     l211:	
  4512                           ;DS1307.h: 139: while ( !SSP1IF ) ;
  4513                           
  4514  0F77  0020               	movlb	0	; select bank0
  4515  0F78  1D91               	btfss	17,3	;volatile
  4516  0F79  2F77               	goto	l211
  4517                           
  4518                           ;DS1307.h: 140: SSP1IF = 0 ;
  4519  0F7A  1191               	bcf	17,3	;volatile
  4520                           
  4521                           ;DS1307.h: 141: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  4522  0F7B  0024               	movlb	4	; select bank4
  4523  0F7C  1B16               	btfsc	22,6	;volatile
  4524  0F7D  0008               	return
  4525                           
  4526                           ;DS1307.h: 143: Uint08_t* datePtr = (Uint08_t*) date ;
  4527                           
  4528                           ;	Return value of _DS1307_SetClock is never used
  4529  0F7E  0874               	movf	DS1307_SetClock@date,w
  4530  0F7F  00F2               	movwf	??_DS1307_SetClock
  4531  0F80  0872               	movf	??_DS1307_SetClock,w
  4532  0F81  00F3               	movwf	DS1307_SetClock@datePtr
  4533                           
  4534                           ;DS1307.h: 144: for ( Uint08_t i = 0 ; i < sizeof ( StDateTime ) ; i++ ) {
  4535  0F82  01F5               	clrf	DS1307_SetClock@i
  4536  0F83  3007               	movlw	7
  4537  0F84  0275               	subwf	DS1307_SetClock@i,w
  4538  0F85  1803               	btfsc	3,0
  4539  0F86  2F9E               	goto	l216
  4540  0F87                     l1834:	
  4541                           
  4542                           ;DS1307.h: 146: SSP1BUF = datePtr[i] ;
  4543  0F87  0875               	movf	DS1307_SetClock@i,w
  4544  0F88  0773               	addwf	DS1307_SetClock@datePtr,w
  4545  0F89  00F2               	movwf	??_DS1307_SetClock
  4546  0F8A  0872               	movf	??_DS1307_SetClock,w
  4547  0F8B  0086               	movwf	6
  4548  0F8C  0187               	clrf	7
  4549  0F8D  0801               	movf	1,w
  4550  0F8E  0091               	movwf	17	;volatile
  4551  0F8F                     l217:	
  4552                           ;DS1307.h: 147: while ( !SSP1IF ) ;
  4553                           
  4554  0F8F  0020               	movlb	0	; select bank0
  4555  0F90  1D91               	btfss	17,3	;volatile
  4556  0F91  2F8F               	goto	l217
  4557                           
  4558                           ;DS1307.h: 148: SSP1IF = 0 ;
  4559  0F92  1191               	bcf	17,3	;volatile
  4560                           
  4561                           ;DS1307.h: 149: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  4562  0F93  0024               	movlb	4	; select bank4
  4563  0F94  1B16               	btfsc	22,6	;volatile
  4564  0F95  0008               	return
  4565                           
  4566                           ;	Return value of _DS1307_SetClock is never used
  4567  0F96  3001               	movlw	1
  4568  0F97  00F2               	movwf	??_DS1307_SetClock
  4569  0F98  0872               	movf	??_DS1307_SetClock,w
  4570  0F99  07F5               	addwf	DS1307_SetClock@i,f
  4571  0F9A  3007               	movlw	7
  4572  0F9B  0275               	subwf	DS1307_SetClock@i,w
  4573  0F9C  1C03               	skipc
  4574  0F9D  2F87               	goto	l1834
  4575  0F9E                     l216:	
  4576                           
  4577                           ;DS1307.h: 150: }
  4578                           ;DS1307.h: 153: SSP1CON2bits.PEN = 1 ;
  4579  0F9E  1516               	bsf	22,2	;volatile
  4580  0F9F                     l221:	
  4581                           ;DS1307.h: 154: while ( SSP1CON2bits.PEN ) ;
  4582                           
  4583  0F9F  1D16               	btfss	22,2	;volatile
  4584                           
  4585                           ;DS1307.h: 156: return 0 ;
  4586                           ;	Return value of _DS1307_SetClock is never used
  4587  0FA0  0008               	return
  4588  0FA1  2F9F               	goto	l221
  4589  0FA2                     __end_of_DS1307_SetClock:	
  4590                           
  4591                           	psect	text14
  4592  0FA2                     __ptext14:	
  4593 ;; *************** function _DS1307_GetData *****************
  4594 ;; Defined at:
  4595 ;;		line 74 in file "src/../../_Common/DS1307.h"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  date            1    wreg     PTR struct .
  4598 ;;		 -> dateCurrent(7), dateTimer(7), 
  4599 ;;  ramAddress      1    2[COMMON] unsigned char 
  4600 ;;  length          1    3[COMMON] unsigned char 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  date            1    7[COMMON] PTR struct .
  4603 ;;		 -> dateCurrent(7), dateTimer(7), 
  4604 ;;  dataCount       1    8[COMMON] unsigned char 
  4605 ;;  datePtr         1    6[COMMON] PTR unsigned char 
  4606 ;;		 -> dateCurrent(7), dateTimer(7), 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      unsigned char 
  4609 ;; Registers used:
  4610 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4616 ;;      Params:         2       0       0       0
  4617 ;;      Locals:         3       0       0       0
  4618 ;;      Temps:          2       0       0       0
  4619 ;;      Totals:         7       0       0       0
  4620 ;;Total ram usage:        7 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    1
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_main
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _DS1307_GetData
  4632  0FA2                     _DS1307_GetData:	
  4633                           
  4634                           ;incstack = 0
  4635                           ; Regs used in _DS1307_GetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  4636                           ;DS1307_GetData@date stored from wreg
  4637  0FA2  00F7               	movwf	DS1307_GetData@date
  4638                           
  4639                           ;DS1307.h: 77: SSP1CON2bits.SEN = 1 ;
  4640  0FA3  0024               	movlb	4	; select bank4
  4641  0FA4  1416               	bsf	22,0	;volatile
  4642  0FA5                     l170:	
  4643                           ;DS1307.h: 78: while ( SSP1CON2bits.SEN ) ;
  4644                           
  4645  0FA5  1816               	btfsc	22,0	;volatile
  4646  0FA6  2FA5               	goto	l170
  4647                           
  4648                           ;DS1307.h: 79: SSP1IF = 0 ;
  4649  0FA7  0020               	movlb	0	; select bank0
  4650  0FA8  1191               	bcf	17,3	;volatile
  4651                           
  4652                           ;DS1307.h: 82: SSP1BUF = 0xD0 ;
  4653  0FA9  30D0               	movlw	208
  4654  0FAA  0024               	movlb	4	; select bank4
  4655  0FAB  0091               	movwf	17	;volatile
  4656  0FAC                     l173:	
  4657                           ;DS1307.h: 83: while ( !SSP1IF ) ;
  4658                           
  4659  0FAC  0020               	movlb	0	; select bank0
  4660  0FAD  1D91               	btfss	17,3	;volatile
  4661  0FAE  2FAC               	goto	l173
  4662                           
  4663                           ;DS1307.h: 84: SSP1IF = 0 ;
  4664  0FAF  1191               	bcf	17,3	;volatile
  4665                           
  4666                           ;DS1307.h: 85: if ( SSP1CON2bits.ACKSTAT ) return 1 ;
  4667  0FB0  0024               	movlb	4	; select bank4
  4668  0FB1  1F16               	btfss	22,6	;volatile
  4669  0FB2  2FB5               	goto	l1782
  4670  0FB3  3001               	movlw	1
  4671  0FB4  0008               	return
  4672  0FB5                     l1782:	
  4673                           
  4674                           ;DS1307.h: 88: SSP1BUF = ramAddress ;
  4675  0FB5  0872               	movf	DS1307_GetData@ramAddress,w
  4676  0FB6  0091               	movwf	17	;volatile
  4677  0FB7                     l178:	
  4678                           ;DS1307.h: 89: while ( !SSP1IF ) ;
  4679                           
  4680  0FB7  0020               	movlb	0	; select bank0
  4681  0FB8  1D91               	btfss	17,3	;volatile
  4682  0FB9  2FB7               	goto	l178
  4683                           
  4684                           ;DS1307.h: 90: SSP1IF = 0 ;
  4685  0FBA  1191               	bcf	17,3	;volatile
  4686                           
  4687                           ;DS1307.h: 91: if ( SSP1CON2bits.ACKSTAT ) return 2 ;
  4688  0FBB  0024               	movlb	4	; select bank4
  4689  0FBC  1F16               	btfss	22,6	;volatile
  4690  0FBD  2FC0               	goto	l181
  4691  0FBE  3002               	movlw	2
  4692  0FBF  0008               	return
  4693  0FC0                     l181:	
  4694                           
  4695                           ;DS1307.h: 93: SSP1CON2bits.RSEN = 1 ;
  4696  0FC0  1496               	bsf	22,1	;volatile
  4697  0FC1                     l182:	
  4698                           ;DS1307.h: 94: while ( SSP1CON2bits.RSEN ) ;
  4699                           
  4700  0FC1  1896               	btfsc	22,1	;volatile
  4701  0FC2  2FC1               	goto	l182
  4702                           
  4703                           ;DS1307.h: 97: SSP1BUF = 0xD0 | 0b1 ;
  4704  0FC3  30D1               	movlw	209
  4705  0FC4  0091               	movwf	17	;volatile
  4706  0FC5                     l185:	
  4707                           ;DS1307.h: 98: while ( !SSP1IF ) ;
  4708                           
  4709  0FC5  0020               	movlb	0	; select bank0
  4710  0FC6  1D91               	btfss	17,3	;volatile
  4711  0FC7  2FC5               	goto	l185
  4712                           
  4713                           ;DS1307.h: 99: SSP1IF = 0 ;
  4714  0FC8  1191               	bcf	17,3	;volatile
  4715                           
  4716                           ;DS1307.h: 100: if ( SSP1CON2bits.ACKSTAT ) return 3 ;
  4717  0FC9  0024               	movlb	4	; select bank4
  4718  0FCA  1F16               	btfss	22,6	;volatile
  4719  0FCB  2FCE               	goto	l1794
  4720  0FCC  3003               	movlw	3
  4721  0FCD  0008               	return
  4722  0FCE                     l1794:	
  4723                           
  4724                           ;DS1307.h: 103: Uint08_t dataCount = 0 ;
  4725  0FCE  01F8               	clrf	DS1307_GetData@dataCount
  4726                           
  4727                           ;DS1307.h: 104: Uint08_t* datePtr = (Uint08_t*) date ;
  4728  0FCF  0877               	movf	DS1307_GetData@date,w
  4729  0FD0  00F4               	movwf	??_DS1307_GetData
  4730  0FD1  0874               	movf	??_DS1307_GetData,w
  4731  0FD2  00F6               	movwf	DS1307_GetData@datePtr
  4732  0FD3                     l1810:	
  4733                           ;DS1307.h: 105: while ( dataCount < length ) {
  4734                           
  4735  0FD3  0873               	movf	DS1307_GetData@length,w
  4736  0FD4  0278               	subwf	DS1307_GetData@dataCount,w
  4737  0FD5  1803               	btfsc	3,0
  4738  0FD6  2FFB               	goto	l197
  4739                           
  4740                           ;DS1307.h: 106: _delay((unsigned long)((2)*(1000000L/4000.0))) ;
  4741  0FD7  30A6               	movlw	166
  4742  0FD8  00F4               	movwf	??_DS1307_GetData
  4743  0FD9                     u2487:	
  4744  0FD9  0BF4               	decfsz	??_DS1307_GetData,f
  4745  0FDA  2FD9               	goto	u2487
  4746  0FDB  0000               	nop
  4747                           
  4748                           ;DS1307.h: 107: SSP1CON2bits.RCEN = 1 ;
  4749  0FDC  0024               	movlb	4	; select bank4
  4750  0FDD  1596               	bsf	22,3	;volatile
  4751  0FDE                     l191:	
  4752                           ;DS1307.h: 108: while ( SSP1CON2bits.RCEN ) ;
  4753                           
  4754  0FDE  1996               	btfsc	22,3	;volatile
  4755  0FDF  2FDE               	goto	l191
  4756  0FE0                     l194:	
  4757                           ;DS1307.h: 109: while ( !SSPSTATbits.BF ) ;
  4758                           
  4759  0FE0  1C14               	btfss	20,0	;volatile
  4760  0FE1  2FE0               	goto	l194
  4761                           
  4762                           ;DS1307.h: 110: datePtr[ dataCount++ ] = SSP1BUF ;
  4763  0FE2  0811               	movf	17,w	;volatile
  4764  0FE3  00F4               	movwf	??_DS1307_GetData
  4765  0FE4  0878               	movf	DS1307_GetData@dataCount,w
  4766  0FE5  0776               	addwf	DS1307_GetData@datePtr,w
  4767  0FE6  00F5               	movwf	??_DS1307_GetData+1
  4768  0FE7  0875               	movf	??_DS1307_GetData+1,w
  4769  0FE8  0086               	movwf	6
  4770  0FE9  0187               	clrf	7
  4771  0FEA  0874               	movf	??_DS1307_GetData,w
  4772  0FEB  0081               	movwf	1
  4773  0FEC  3001               	movlw	1
  4774  0FED  00F4               	movwf	??_DS1307_GetData
  4775  0FEE  0874               	movf	??_DS1307_GetData,w
  4776  0FEF  07F8               	addwf	DS1307_GetData@dataCount,f
  4777                           
  4778                           ;DS1307.h: 111: SSP1CON2bits.ACKDT = ( dataCount == length ) ;
  4779  0FF0  0878               	movf	DS1307_GetData@dataCount,w
  4780  0FF1  0673               	xorwf	DS1307_GetData@length,w
  4781  0FF2  1D03               	btfss	3,2
  4782  0FF3  2FF7               	goto	u1610
  4783  0FF4  0024               	movlb	4	; select bank4
  4784  0FF5  1696               	bsf	22,5	;volatile
  4785  0FF6  2FF9               	goto	l1808
  4786  0FF7                     u1610:	
  4787  0FF7  0024               	movlb	4	; select bank4
  4788  0FF8  1296               	bcf	22,5	;volatile
  4789  0FF9                     l1808:	
  4790                           
  4791                           ;DS1307.h: 112: SSP1CON2bits.ACKEN = 1 ;
  4792  0FF9  1616               	bsf	22,4	;volatile
  4793  0FFA  2FD3               	goto	l1810
  4794  0FFB                     l197:	
  4795                           
  4796                           ;DS1307.h: 113: }
  4797                           ;DS1307.h: 116: SSP1CON2bits.PEN = 1 ;
  4798  0FFB  1516               	bsf	22,2	;volatile
  4799  0FFC                     l198:	
  4800                           ;DS1307.h: 117: while ( SSP1CON2bits.PEN ) ;
  4801                           
  4802  0FFC  1916               	btfsc	22,2	;volatile
  4803  0FFD  2FFC               	goto	l198
  4804                           
  4805                           ;DS1307.h: 119: return 0 ;
  4806  0FFE  3000               	movlw	0
  4807  0FFF  0008               	return
  4808  1000                     __end_of_DS1307_GetData:	
  4809                           
  4810                           	psect	intentry
  4811  0004                     __pintentry:	
  4812 ;; *************** function __ *****************
  4813 ;; Defined at:
  4814 ;;		line 678 in file "src/main.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;		None               void
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4828 ;;      Params:         0       0       0       0
  4829 ;;      Locals:         0       0       0       0
  4830 ;;      Temps:          2       0       0       0
  4831 ;;      Totals:         2       0       0       0
  4832 ;;Total ram usage:        2 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		Interrupt level 1
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841  0004                     __:	
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in __: [wreg+status,2+status,0]
  4845  0004  3180               	pagesel	$
  4846  0005  0020               	movlb	0	; select bank0
  4847  0006  087F               	movf	127,w
  4848  0007  00F1               	movwf	??__+1
  4849                           
  4850                           ;main.c: 680: if( INTCONbits.TMR0IF ) {
  4851  0008  1D0B               	btfss	11,2	;volatile
  4852  0009  2844               	goto	i1l2264
  4853                           
  4854                           ;main.c: 681: INTCONbits.TMR0IF = 0 ;
  4855  000A  110B               	bcf	11,2	;volatile
  4856                           
  4857                           ;main.c: 683: if( keyBeepCounter_ && !--keyBeepCounter_ )
  4858  000B  0854               	movf	_keyBeepCounter_,w
  4859  000C  1903               	btfsc	3,2
  4860  000D  2813               	goto	i1l2234
  4861  000E  3001               	movlw	1
  4862  000F  02D4               	subwf	_keyBeepCounter_,f
  4863  0010  1D03               	btfss	3,2
  4864  0011  2813               	goto	i1l2234
  4865                           
  4866                           ;main.c: 684: events_.output.soundOff=1 ;
  4867  0012  164D               	bsf	_events_+2,4
  4868  0013                     i1l2234:	
  4869                           
  4870                           ;main.c: 686: static Uint08_t prescaler10ms = 0 ;
  4871                           ;main.c: 689: if( ! --prescaler10ms ) {
  4872  0013  3001               	movlw	1
  4873  0014  02FA               	subwf	__@prescaler10ms,f
  4874  0015  1D03               	btfss	3,2
  4875  0016  2844               	goto	i1l2264
  4876                           
  4877                           ;main.c: 690: prescaler10ms = 10 ;
  4878  0017  300A               	movlw	10
  4879  0018  00F0               	movwf	??__
  4880  0019  0870               	movf	??__,w
  4881  001A  00FA               	movwf	__@prescaler10ms
  4882                           
  4883                           ;main.c: 693: sampledPortAState_.byte = (~PORTA&0x33) ;
  4884  001B  090C               	comf	12,w	;volatile
  4885  001C  3933               	andlw	51
  4886  001D  00F0               	movwf	??__
  4887  001E  0870               	movf	??__,w
  4888  001F  00D7               	movwf	_sampledPortAState_
  4889                           
  4890                           ;main.c: 695: if( sampledPortAState_.keyUp && !sampledPortAState_.keyDown ) {
  4891  0020  18D7               	btfsc	_sampledPortAState_,1
  4892  0021  1857               	btfsc	_sampledPortAState_,0
  4893  0022  2831               	goto	i1l2250
  4894                           
  4895                           ;main.c: 696: if( ++keyCounter_.keyUp == 0x40 ) {
  4896  0023  3001               	movlw	1
  4897  0024  00F0               	movwf	??__
  4898  0025  0870               	movf	??__,w
  4899  0026  07C5               	addwf	_keyCounter_,f
  4900  0027  3040               	movlw	64
  4901  0028  0645               	xorwf	_keyCounter_,w
  4902  0029  1D03               	btfss	3,2
  4903  002A  2832               	goto	i1l2252
  4904                           
  4905                           ;main.c: 697: keyCounter_.keyUp = 0x3C ;
  4906  002B  303C               	movlw	60
  4907  002C  00F0               	movwf	??__
  4908  002D  0870               	movf	??__,w
  4909  002E  00C5               	movwf	_keyCounter_
  4910                           
  4911                           ;main.c: 698: events_.keyPress.upHold=1 ;
  4912  002F  14CB               	bsf	_events_,1
  4913                           
  4914                           ;main.c: 699: }
  4915                           ;main.c: 700: }
  4916  0030  2832               	goto	i1l2252
  4917  0031                     i1l2250:	
  4918                           
  4919                           ;main.c: 701: else
  4920                           ;main.c: 702: keyCounter_.keyUp = 0 ;
  4921  0031  01C5               	clrf	_keyCounter_
  4922  0032                     i1l2252:	
  4923                           
  4924                           ;main.c: 704: if( sampledPortAState_.keyDown && !sampledPortAState_.keyUp ) {
  4925  0032  1857               	btfsc	_sampledPortAState_,0
  4926  0033  18D7               	btfsc	_sampledPortAState_,1
  4927  0034  2843               	goto	i1l2262
  4928                           
  4929                           ;main.c: 705: if( ++keyCounter_.keyDown == 0x40 ) {
  4930  0035  3001               	movlw	1
  4931  0036  00F0               	movwf	??__
  4932  0037  0870               	movf	??__,w
  4933  0038  07C7               	addwf	_keyCounter_+2,f
  4934  0039  3040               	movlw	64
  4935  003A  0647               	xorwf	_keyCounter_+2,w
  4936  003B  1D03               	btfss	3,2
  4937  003C  2844               	goto	i1l2264
  4938                           
  4939                           ;main.c: 706: keyCounter_.keyDown = 0x3C ;
  4940  003D  303C               	movlw	60
  4941  003E  00F0               	movwf	??__
  4942  003F  0870               	movf	??__,w
  4943  0040  00C7               	movwf	_keyCounter_+2
  4944                           
  4945                           ;main.c: 707: events_.keyPress.downHold=1 ;
  4946  0041  15CB               	bsf	_events_,3
  4947                           
  4948                           ;main.c: 708: }
  4949                           ;main.c: 709: }
  4950  0042  2844               	goto	i1l2264
  4951  0043                     i1l2262:	
  4952                           
  4953                           ;main.c: 710: else
  4954                           ;main.c: 711: keyCounter_.keyDown = 0 ;
  4955  0043  01C7               	clrf	_keyCounter_+2
  4956  0044                     i1l2264:	
  4957                           
  4958                           ;main.c: 713: }
  4959                           ;main.c: 714: }
  4960                           ;main.c: 717: if( IOCIF && machineState_ != STATE_ADJUST_CLOCK ) {
  4961  0044  1C0B               	btfss	11,0	;volatile
  4962  0045  284E               	goto	i1l420
  4963  0046  3003               	movlw	3
  4964  0047  0655               	xorwf	_machineState_,w
  4965  0048  1903               	btfsc	3,2
  4966  0049  284E               	goto	i1l420
  4967                           
  4968                           ;main.c: 718: IOCAF3 = 0 ;
  4969  004A  0027               	movlb	7	; select bank7
  4970  004B  1193               	bcf	19,3	;volatile
  4971                           
  4972                           ;main.c: 720: events_.output.updateClock=1 ;
  4973  004C  0020               	movlb	0	; select bank0
  4974  004D  144D               	bsf	_events_+2,0
  4975  004E                     i1l420:	
  4976  004E  0871               	movf	??__+1,w
  4977  004F  00FF               	movwf	127
  4978  0050  0009               	retfie
  4979  0051                     __end_of__:	
  4980  007E                     btemp	set	126	;btemp
  4981  007E                     wtemp	set	126
  4982  007E                     wtemp0	set	126
  4983  0080                     wtemp1	set	128
  4984  0082                     wtemp2	set	130
  4985  0084                     wtemp3	set	132
  4986  0086                     wtemp4	set	134
  4987  0088                     wtemp5	set	136
  4988  007F                     wtemp6	set	127
  4989  007E                     ttemp	set	126
  4990  007E                     ttemp0	set	126
  4991  0081                     ttemp1	set	129
  4992  0084                     ttemp2	set	132
  4993  0087                     ttemp3	set	135
  4994  007F                     ttemp4	set	127
  4995  007E                     ltemp	set	126
  4996  007E                     ltemp0	set	126
  4997  0082                     ltemp1	set	130
  4998  0086                     ltemp2	set	134
  4999  0080                     ltemp3	set	128


Data Sizes:
    Strings     125
    Constant    57
    Data        26
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     37      76
    BANK1            80      0      22
    BANK2            80      0       0

Pointer List with Targets:

    currentEditValue	PTR unsigned char  size(1) Largest target is 2
		 -> dateCurrent.year(BANK0[1]), dateCurrent.second(BANK0[1]), dateTimer.year(BANK0[1]), dateTimer.second(BANK0[1]), 
		 -> NULL(NULL[0]), datePtr.year(COMMON[1]), datePtr.second(COMMON[1]), datePtr(BANK0[1]), 

    currentValueInfo	PTR const struct . size(2) Largest target is 4096
		 -> ROM(CODE[4096]), VALUE_INFORMATIONS.second(CODE[4]), VALUE_INFORMATIONS.year(CODE[4]), VALUE_INFORMATIONS(CODE[28]), 

    datePtr	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), dateCurrent(BANK0[7]), datePtr(BANK0[1]), dateTimer(BANK0[7]), 

    MESSAGE_MENU	PTR const unsigned char [4] size(2) Largest target is 13
		 -> STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), STR_8(CODE[13]), 

    DS1307_SetClock@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), 

    DS1307_SetClock@datePtr	PTR unsigned char  size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), 

    DS1307_GetData@date	PTR struct . size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    DS1307_GetData@datePtr	PTR unsigned char  size(1) Largest target is 7
		 -> dateCurrent(BANK0[7]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), dateCurrent(BANK0[7]), datePtr(BANK0[1]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDiscrete@string	PTR unsigned char  size(1) Largest target is 4
		 -> main@string_880(BANK0[4]), 

    _date_time_ConvertByteToTime@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), dateCurrent(BANK0[7]), datePtr(BANK0[1]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToTime@string	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    _date_time_ConvertByteToDate@dateTime	PTR struct . size(1) Largest target is 7
		 -> NULL(NULL[0]), dateCurrent(BANK0[7]), datePtr(BANK0[1]), dateTimer(BANK0[7]), 

    _date_time_ConvertByteToDate@stinrg	PTR unsigned char  size(1) Largest target is 17
		 -> main@string(BANK0[17]), 

    STR_DAY_OF_WEEK	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ParallelLCD_SetCgram@bitmap	PTR const unsigned char  size(2) Largest target is 8
		 -> CURSOR_BITMAP(CODE[8]), 

    ParallelLCD_WriteStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[17]), STR_18(CODE[7]), STR_17(CODE[8]), STR_16(CODE[9]), 
		 -> STR_15(CODE[12]), STR_14(CODE[6]), STR_13(CODE[7]), STR_12(CODE[8]), 
		 -> STR_11(CODE[8]), STR_10(CODE[12]), STR_9(CODE[10]), STR_8(CODE[13]), 

    ParallelLCD_WriteString@stringPtr	PTR const unsigned char  size(1) Largest target is 17
		 -> main@string_880(BANK0[4]), main@valueString(BANK0[4]), main@string(BANK0[17]), 


Critical Paths under _main in COMMON

    _main->_ParallelLCD_SetCgram
    _main->_ParallelLCD_WriteStringClearing
    _ParallelLCD_WriteStringClearing->_ParallelLCD_WriteByte
    _ParallelLCD_WriteString->_ParallelLCD_WriteByte
    _ParallelLCD_WriteCharacter->_ParallelLCD_WriteByte
    _ParallelLCD_SetCgram->_ParallelLCD_WriteByte
    _ParallelLCD_Initialize->_ParallelLCD_WriteByte
    _ParallelLCD_ClearRow->_ParallelLCD_WriteByte
    _ParallelLCD_ClearPartial->_ParallelLCD_WriteByte

Critical Paths under __ in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   16715
                                              0 BANK0     37    37      0
                     _DS1307_GetData
                    _DS1307_SetClock
           _ParallelLCD_ClearPartial
               _ParallelLCD_ClearRow
             _ParallelLCD_Initialize
               _ParallelLCD_SetCgram
         _ParallelLCD_WriteCharacter
            _ParallelLCD_WriteString
    _ParallelLCD_WriteStringClearing
       __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
       __date_time_ConvertByteToTime
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToTime                         4     3      1     456
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDiscrete                     6     4      2     928
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) __date_time_ConvertByteToDate                         5     4      1     698
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteStringClearing                      5     3      2    2481
                                              5 COMMON     5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteString                              3     2      1    1935
                                              5 COMMON     3     2      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_WriteCharacter                           2     1      1    1684
                                              5 COMMON     2     1      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_SetCgram                                 5     3      2    1731
                                              5 COMMON     5     3      2
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_Initialize                               4     1      3    1880
                                              5 COMMON     4     1      3
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearRow                                 3     3      0    1632
                                              5 COMMON     3     3      0
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (1) _ParallelLCD_ClearPartial                             4     3      1    1708
                                              5 COMMON     4     3      1
              _ParallelLCD_WriteByte
 ---------------------------------------------------------------------------------
 (2) _ParallelLCD_WriteByte                                3     2      1    1564
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DS1307_SetClock                                      4     4      0     163
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _DS1307_GetData                                       7     5      2     583
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_GetData
   _DS1307_SetClock
   _ParallelLCD_ClearPartial
     _ParallelLCD_WriteByte
   _ParallelLCD_ClearRow
     _ParallelLCD_WriteByte
   _ParallelLCD_Initialize
     _ParallelLCD_WriteByte
   _ParallelLCD_SetCgram
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteCharacter
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteString
     _ParallelLCD_WriteByte
   _ParallelLCD_WriteStringClearing
     _ParallelLCD_WriteByte
   __date_time_ConvertByteToDate
   __date_time_ConvertByteToDiscrete
   __date_time_ConvertByteToTime
   _initialize

 __ (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     25      4C       6       95.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      16       8       27.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      6E      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Aug 15 16:58:40 2015

                                        __ 0004                                          pc 0002  
               ??_ParallelLCD_ClearPartial 0076                                __CFG_CP$OFF 0000  
                                       ?__ 0070                                _SSPSTATbits 0214  
            ParallelLCD_ClearRow@rowSelect 0076                                        ??__ 0070  
                                      l211 0F77                                        l203 0F68  
                                      l221 0F9F                                        l206 0F6F  
                                      l216 0F9E                                        l320 0207  
                                      l304 01FC                                        l217 0F8F  
                                      l170 0FA5                                        l322 0200  
                                      l331 021E                                        l315 01E7  
                                      l181 0FC0                                        l173 0FAC  
                                      l182 0FC1                                        l334 0230  
                                      l326 020B                                        l262 00BF  
                                      l191 0FDE                                        l263 0108  
                                      l360 02E6                                        l336 02E1  
                                      l280 0133                                        l185 0FC5  
                                      l361 02EC                                        l329 0215  
                                      l194 0FE0                                        l178 0FB7  
                                      l370 031C                                        l362 038A  
                                      l354 02C3                                        l338 0238  
                                      l282 012E                                        l266 00FA  
                                      l283 0132                                        l275 0129  
                                      l197 0FFB                                        l349 02AE  
                                      l293 014B                                        l277 0124  
                                      l198 0FFC                                        l294 0190  
                                      l278 0128                                        l359 02C7  
                                      l296 015A                                        l289 0156  
                                      _PR2 001B                               __CFG_BORV$HI 0000  
                                      wreg 0009      __date_time_ConvertByteToDate@dateTime 0076  
                                     S2310 0800                                       S2312 0810  
                             __CFG_LVP$OFF 0000                                       l2000 01C0  
                                     l2010 01D9                                       l2012 01E9  
                                     l2004 01D2                                       l2110 02CE  
                                     l2102 02C1                                       l2022 0202  
                                     l2006 01D4                                       l2016 01EB  
                                     l2202 0404                                       l2130 0307  
                                     l2122 02F1                                       l2042 0224  
                                     l2114 02D0                                       l2212 0428  
                                     l2140 034B                                       l2124 02F6  
                                     l2108 02CA                                       l2028 020F  
                                     l2206 040D                                       l2142 035B  
                                     l2126 02FB                                       l2134 030D  
                                     l2062 0260                                       l2070 0274  
                                     l2216 0444                                       l2208 041F  
                                     l2144 035E                                       l2136 031D  
                                     l2128 0301                                       l2152 037C  
                                     l2146 036F                                       l2082 02A8  
                                     l2066 026C                                       l1700 0E9F  
                                     l2156 038F                                       l2092 02B8  
                                     l2068 0273                                       l2166 03B5  
                                     l2094 02B9                                       l2078 029C  
                                     l1810 0FD3                                       l2186 03DC  
                                     l2178 03D1                                       l2188 03ED  
                                     l1654 0EF8                                       l1750 04A8  
                                     l2198 03FC                                       l1808 0FF9  
                                     l1672 0F5A                                       l1752 04C8  
                                     l1834 0F87                                       l1674 0F60  
                                     l1762 0558                                       l1746 0468  
                                     l1756 051A                                       l1748 0488  
                                     l1940 0146                                       l1782 0FB5  
                                     l1758 053A                                       l1950 015D  
                                     l1768 0576                                       l1960 0177  
                                     l1936 0141                                       l1794 0FCE  
                                     l1962 0179                                       l1954 016D  
                                     l1946 014E                                       l1980 019F  
                                     l1972 0194                                       l1964 017D  
                                     l1884 00D3                                       l1968 017F  
                                     l1994 01B8                                       l1898 0102  
                                     l1996 01BA                                       l1988 01AE  
                                     STR_1 07AA                               __CFG_WDTE$ON 0000  
                                     STR_2 07A6                                       STR_3 079E  
                                     STR_4 079A                                       STR_5 07B2  
                                     STR_6 07A2                                       STR_7 07AE  
                                     STR_8 074A                                       STR_9 0763  
                                     u1405 0633                                       u1415 0654  
                                     _LATC 010E                                       u1505 056A  
                                     u1425 0698                                       u1610 0FF7  
                                     u1435 06B7                                       u1365 0F11  
                                     u1445 06D7                                       u1455 047C  
                                     u2255 03C0                                       u1465 049C  
                                     u1395 0612                                       u1475 04BC  
                 ??_ParallelLCD_Initialize 0078                                       u1485 052E  
                                     u1805 00E3                                       u1495 054C  
                                     u1815 00EF                                       u2477 0EC7  
                                     u1765 007E                                       u2487 0FD9  
                                     u1775 0089                                       _TMR0 0015  
                                     _TMR2 001A                               __CFG_WRT$OFF 0000  
                            __CFG_FCMEN$ON 0000                                       _main 0077  
                            _CURSOR_BITMAP 0731                                       fsr0h 0005  
                                     fsr1h 0007                                       fsr0l 0004  
                                     indf0 0000                                       indf1 0001  
                                     fsr1l 0006                                       btemp 007E  
                            __CFG_BOREN$ON 0000                                       ltemp 007E  
                                     start 0051                                       ttemp 007E  
                                     wtemp 007E                              __CFG_IESO$OFF 0000  
      __size_of_ParallelLCD_WriteCharacter 000C                              __CFG_LPBOR$ON 0000  
          ParallelLCD_WriteString@position 0077                           DS1307_SetClock@i 0075  
                  ??_ParallelLCD_WriteByte 0073                                      ?_main 0070  
                                    STR_10 0757                                      STR_11 077E  
                                    STR_12 0776                                      STR_13 078D  
                                    STR_14 0794                                      STR_15 0757  
                                    STR_16 076D                                      STR_17 077E  
                                    STR_18 0786                                      STR_19 0739  
                                    _IOCIE 005B                                      _IOCIF 0058  
                                    i1l420 004E                         main@prevPortAState 0058  
                   ParallelLCD_WriteByte@r 0072                                      _PORTA 000C  
                                    _TRISA 008C                                      _TRISB 008D  
                                    _TRISC 008E                              __CFG_PWRTE$ON 0000  
          __end_of_PARALLEL_LCD_ROW_SELECT 0715                             _DS1307_GetData 0FA2  
                                    _alerm 007B                                      main@i 0044  
                             main@tmpValue 003A                                      ltemp0 007E  
                                    ltemp1 0082                                      ltemp2 0086  
                                    ltemp3 0080                                      ttemp0 007E  
                                    ttemp1 0081                                      ttemp2 0084  
                                    ttemp3 0087                                      ttemp4 007F  
                                    status 0003                                      wtemp0 007E  
                                    wtemp1 0080                                      wtemp2 0082  
                                    wtemp3 0084                                      wtemp4 0086  
                                    wtemp5 0088                                      wtemp6 007F  
             __end_of_ParallelLCD_ClearRow 0EF2                             __CFG_MCLRE$OFF 0000  
                          __initialization 0053           ParallelLCD_WriteStringClearing@i 0079  
                             __end_of_main 0461                                     ??_main 0020  
             __end_of_ParallelLCD_SetCgram 0F33                          __end_of_HEX_TABLE 0710  
               __end_of_VALUE_INFORMATIONS 0731                     __end_of_DS1307_GetData 1000  
                  DS1307_GetData@dataCount 0078                              main@isNonZero 003B  
                            main@keyChange 003C                                     _ANSELA 018C  
                                   _ANSELB 018D                                     _ANSELC 018E  
                                   _IOCAF3 1C9B                                     i1l2250 0031  
                                   i1l2234 0013                                     i1l2252 0032  
                                   i1l2262 0043                                     i1l2264 0044  
          __size_of_ParallelLCD_Initialize 001D                                     _PWM3OE 30CE  
                                   _SSP1IF 008B           ParallelLCD_WriteString@stringPtr 0075  
       ParallelLCD_WriteCharacter@position 0076                 ParallelLCD_SetCgram@bitmap 0075  
                           __CFG_STVREN$ON 0000                            ?_DS1307_GetData 0072  
                          _DS1307_SetClock 0F65                    __end_of__initialization 0074  
    __date_time_ConvertByteToTime@dateTime 0075                             __pcstackCOMMON 0070  
                             __pidataBANK0 0E82                               __pidataBANK1 0EAE  
                   _ParallelLCD_Initialize 06E3        ParallelLCD_WriteCharacter@character 0075  
                    DS1307_GetData@datePtr 0076                             _OPTION_REGbits 0095  
                     _ParallelLCD_ClearRow 0EDB                                 __pbssBANK0 0045  
                ParallelLCD_WriteByte@data 0074                       _ParallelLCD_SetCgram 0F0C  
                               _editSelect 0053                   ?_ParallelLCD_WriteString 0075  
                    ParallelLCD_ClearRow@i 0077                                 __pmaintext 0077  
                               __pintentry 0004                    __end_of_DS1307_SetClock 0FA2  
     ParallelLCD_Initialize@configFunction 0078                                 __size_of__ 004D  
                       _sampledPortAState_ 0057             __size_of_ParallelLCD_WriteByte 0017  
            __end_of_ParallelLCD_WriteByte 0EDB                      ?_ParallelLCD_ClearRow 0070  
                           main@keyPressed 0042                                    _PWM3DCH 0618  
                                  _PWM3DCL 0617                                    _SSP1ADD 0212  
                                  _SSP1BUF 0211          __size_of_ParallelLCD_ClearPartial 0016  
                ?_ParallelLCD_ClearPartial 0075                           _currentEditValue 0051  
 __end_of__date_time_ConvertByteToDiscrete 0581  __size_of__date_time_ConvertByteToDiscrete 0120  
       ??__date_time_ConvertByteToDiscrete 0074          ?__date_time_ConvertByteToDiscrete 0072  
         __date_time_ConvertByteToDiscrete 0461                      ?_ParallelLCD_SetCgram 0075  
                        main@COMPARE_UNITS 0710                   DS1307_GetData@ramAddress 0072  
                               _menuSelect 0056                                    _datePtr 0067  
                               _initialize 07B6                                    __ptext1 07B6  
                                  __ptext2 066F                                    __ptext3 0461  
                                  __ptext4 0581                                    __ptext5 0F33  
                                  __ptext6 0EF2                                    __ptext7 0E8C  
                                  __ptext8 0F0C                                    __ptext9 06E3  
                   DS1307_SetClock@datePtr 0073                                  _T2CONbits 001C  
                                  _events_ 004B               ??_ParallelLCD_WriteCharacter 0076  
                                _IOCANbits 0392                             _blinkPrescaler 0050  
                    ParallelLCD_SetCgram@i 0079                                  _HEX_TABLE 0700  
                                  clrloop0 07F8                             main@portAState 0043  
                     end_of_initialization 0074            __end_of_ParallelLCD_WriteString 0F0C  
                         _currentValueInfo 004E                                    init_ram 0E86  
                       _VALUE_INFORMATIONS 0715                                    initloop 0E87  
                __end_ofmain@COMPARE_UNITS 0713                    _PARALLEL_LCD_ROW_SELECT 0713  
            ?__date_time_ConvertByteToDate 0072              ?__date_time_ConvertByteToTime 0072  
                             __pstringtext 0700                           ??_DS1307_GetData 0074  
                         ?_DS1307_SetClock 0070                     ??_ParallelLCD_ClearRow 0075  
                         __CFG_FOSC$INTOSC 0000                             main@string_880 003E  
                   ??_ParallelLCD_SetCgram 0077               ParallelLCD_SetCgram@charCode 0078  
                          _STR_DAY_OF_WEEK 00A0                                 main@string 0023  
  __end_of_ParallelLCD_WriteStringClearing 0F65   __size_of_ParallelLCD_WriteStringClearing 0032  
        ??_ParallelLCD_WriteStringClearing 0077           ?_ParallelLCD_WriteStringClearing 0075  
          _ParallelLCD_WriteStringClearing 0F33                    ?_ParallelLCD_Initialize 0075  
  __date_time_ConvertByteToDiscrete@select 0073    __date_time_ConvertByteToDiscrete@string 0072  
                              ?_initialize 0070                               _MESSAGE_MENU 00AE  
                      start_initialization 0053        __date_time_ConvertByteToDate@stinrg 0072  
                    __end_of_CURSOR_BITMAP 0739             __end_of_ParallelLCD_Initialize 0700  
                              __pdataBANK0 0068                                __pdataBANK1 00A0  
         __end_of_ParallelLCD_ClearPartial 0EAE             ??__date_time_ConvertByteToDate 0073  
           ??__date_time_ConvertByteToTime 0073           __size_of_ParallelLCD_WriteString 001A  
       __end_of_ParallelLCD_WriteCharacter 0E98                 _ParallelLCD_WriteCharacter 0E8C  
                              _dateCurrent 0059                                __pbssCOMMON 007A  
                                ___latbits 0001                              __pcstackBANK0 0020  
                                __end_of__ 0051                       DS1307_GetData@length 0073  
                      __size_of_initialize 0041                                  _dateTimer 0060  
      ParallelLCD_Initialize@configDisplay 0075                            main@compareUnit 003D  
                      DS1307_SetClock@date 0074                                  __pswtext1 0800  
                                __pswtext2 0810      ParallelLCD_Initialize@configEntryMode 0077  
                           _cursorPosition 0052                      _ParallelLCD_WriteByte 0EC4  
                          main@keyReleased 0038                                   _LATBbits 010D  
                                clear_ram0 07F7                                   _PIE1bits 0091  
                                 _PIR1bits 0011                                  main@F4324 0068  
                                 _SSP1CON1 0215                                   _SSP1STAT 0214  
                 _ParallelLCD_ClearPartial 0E98                                _keyCounter_ 0045  
                        main@isTimeToAlerm 0039   ParallelLCD_WriteStringClearing@stringPtr 0075  
                             ??_initialize 0072                    _ParallelLCD_WriteString 0EF2  
                          __@prescaler10ms 007A                     ?_ParallelLCD_WriteByte 0072  
            __size_of_ParallelLCD_ClearRow 0017                   __size_of_DS1307_SetClock 003D  
       ParallelLCD_Initialize@configCursor 0076                                   __ptext10 0EDB  
                                 __ptext11 0E98                                   __ptext12 0EC4  
                                 __ptext13 0F65                                   __ptext14 0FA2  
                             _SSP1CON2bits 0216                              __size_of_main 03EA  
            __size_of_ParallelLCD_SetCgram 0027                         __end_of_initialize 07F7  
  ParallelLCD_WriteStringClearing@position 0078                            main@valueString 0034  
                ParallelLCD_ClearPartial@i 0078        __date_time_ConvertByteToTime@string 0072  
              ?_ParallelLCD_WriteCharacter 0075                                 _INTCONbits 000B  
                              _PWM3CONbits 0619                    __size_of_DS1307_GetData 005E  
                       DS1307_GetData@date 0077  __date_time_ConvertByteToDiscrete@dateTime 0077  
                                 intlevel1 0000                          __CFG_CLKOUTEN$OFF 0000  
                               _OSCCONbits 0099             ParallelLCD_ClearPartial@length 0075  
                ??_ParallelLCD_WriteString 0076           ParallelLCD_ClearPartial@position 0077  
                          _keyBeepCounter_ 0054                              _machineState_ 0055  
     __end_of__date_time_ConvertByteToDate 066F      __size_of__date_time_ConvertByteToDate 00EE  
             __date_time_ConvertByteToDate 0581                          ??_DS1307_SetClock 0072  
     __end_of__date_time_ConvertByteToTime 06E3      __size_of__date_time_ConvertByteToTime 0074  
             __date_time_ConvertByteToTime 066F  
