

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 12 20:56:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0007                     	;# 
    34  0008                     	;# 
    35  0009                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0015                     	;# 
    42  0016                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001C                     	;# 
    50  001E                     	;# 
    51  001F                     	;# 
    52  008C                     	;# 
    53  0091                     	;# 
    54  0092                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0097                     	;# 
    58  0098                     	;# 
    59  0099                     	;# 
    60  009A                     	;# 
    61  009B                     	;# 
    62  009B                     	;# 
    63  009C                     	;# 
    64  009D                     	;# 
    65  009E                     	;# 
    66  010C                     	;# 
    67  0111                     	;# 
    68  0112                     	;# 
    69  0115                     	;# 
    70  0116                     	;# 
    71  0117                     	;# 
    72  0118                     	;# 
    73  0119                     	;# 
    74  011A                     	;# 
    75  011B                     	;# 
    76  011D                     	;# 
    77  011D                     	;# 
    78  018C                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0193                     	;# 
    85  0194                     	;# 
    86  0195                     	;# 
    87  0196                     	;# 
    88  0199                     	;# 
    89  019A                     	;# 
    90  019B                     	;# 
    91  019B                     	;# 
    92  019B                     	;# 
    93  019B                     	;# 
    94  019C                     	;# 
    95  019C                     	;# 
    96  019D                     	;# 
    97  019E                     	;# 
    98  019F                     	;# 
    99  020C                     	;# 
   100  0211                     	;# 
   101  0211                     	;# 
   102  0212                     	;# 
   103  0212                     	;# 
   104  0213                     	;# 
   105  0213                     	;# 
   106  0214                     	;# 
   107  0214                     	;# 
   108  0215                     	;# 
   109  0215                     	;# 
   110  0215                     	;# 
   111  0216                     	;# 
   112  0216                     	;# 
   113  0217                     	;# 
   114  0217                     	;# 
   115  0291                     	;# 
   116  0291                     	;# 
   117  0292                     	;# 
   118  0293                     	;# 
   119  0294                     	;# 
   120  0295                     	;# 
   121  0295                     	;# 
   122  0296                     	;# 
   123  0391                     	;# 
   124  0392                     	;# 
   125  0393                     	;# 
   126  039A                     	;# 
   127  039C                     	;# 
   128  039D                     	;# 
   129  039E                     	;# 
   130  039F                     	;# 
   131  0FE4                     	;# 
   132  0FE5                     	;# 
   133  0FE6                     	;# 
   134  0FE7                     	;# 
   135  0FE8                     	;# 
   136  0FE9                     	;# 
   137  0FEA                     	;# 
   138  0FEB                     	;# 
   139  0FED                     	;# 
   140  0FEE                     	;# 
   141  0FEF                     	;# 
   142                           
   143                           	psect	idataBANK0
   144  04A4                     __pidataBANK0:	
   145                           
   146                           ;initializer for _MESSAGE_MENU
   147  04A4  3441               	retlw	low (STR_7| (0+32768))
   148  04A5  3483               	retlw	high (STR_7| (0+32768))
   149  04A6  3429               	retlw	low (STR_2| (0+32768))
   150  04A7  3483               	retlw	high (STR_2| (0+32768))
   151  04A8  344F               	retlw	low (STR_3| (0+32768))
   152  04A9  3483               	retlw	high (STR_3| (0+32768))
   153  04AA  3431               	retlw	low (STR_4| (0+32768))
   154  04AB  3483               	retlw	high (STR_4| (0+32768))
   155  04AC  3439               	retlw	low (STR_5| (0+32768))
   156  04AD  3483               	retlw	high (STR_5| (0+32768))
   157                           
   158                           ;initializer for main@F2296
   159  04AE  3420               	retlw	32
   160  04AF  3420               	retlw	32
   161  04B0  3430               	retlw	48
   162  04B1  3430               	retlw	48
   163  04B2  3430               	retlw	48
   164  04B3  3430               	retlw	48
   165  04B4  3430               	retlw	48
   166  04B5  3400               	retlw	0
   167                           
   168                           	psect	stringtext
   169  0300                     __pstringtext:	
   170  0300                     _MESSAGE:	
   171  0300  3421               	retlw	low (STR_1| (0+32768))
   172  0301  3483               	retlw	high (STR_1| (0+32768))
   173  0302  3429               	retlw	low (STR_2| (0+32768))
   174  0303  3483               	retlw	high (STR_2| (0+32768))
   175  0304  344F               	retlw	low (STR_3| (0+32768))
   176  0305  3483               	retlw	high (STR_3| (0+32768))
   177  0306  3431               	retlw	low (STR_4| (0+32768))
   178  0307  3483               	retlw	high (STR_4| (0+32768))
   179  0308  3439               	retlw	low (STR_5| (0+32768))
   180  0309  3483               	retlw	high (STR_5| (0+32768))
   181  030A  3449               	retlw	low (STR_6| (0+32768))
   182  030B  3483               	retlw	high (STR_6| (0+32768))
   183  030C                     __end_of_MESSAGE:	
   184  030C                     main@compareUnits:	
   185  030C  3410               	retlw	16
   186  030D  3427               	retlw	39
   187  030E  34E8               	retlw	232
   188  030F  3403               	retlw	3
   189  0310  3464               	retlw	100
   190  0311  3400               	retlw	0
   191  0312  340A               	retlw	10
   192  0313  3400               	retlw	0
   193  0314  3401               	retlw	1
   194  0315  3400               	retlw	0
   195  0316                     __end_ofmain@compareUnits:	
   196  0316                     _ROW_SELECT:	
   197  0316  3480               	retlw	128
   198  0317  34C0               	retlw	192
   199  0318                     __end_of_ROW_SELECT:	
   200  000B                     _INTCONbits	set	11
   201  0011                     _PIR1bits	set	17
   202  000C                     _PORTA	set	12
   203  001B                     _PR2	set	27
   204  0018                     _T1CONbits	set	24
   205  001C                     _T2CONbits	set	28
   206  0015                     _TMR0	set	21
   207  001A                     _TMR2	set	26
   208  005D                     _TMR0IE	set	93
   209  009D                     _ADCON0bits	set	157
   210  009E                     _ADCON1bits	set	158
   211  009C                     _ADRESH	set	156
   212  009B                     _ADRESL	set	155
   213  0095                     _OPTION_REGbits	set	149
   214  0099                     _OSCCONbits	set	153
   215  0091                     _PIE1bits	set	145
   216  008C                     _TRISA	set	140
   217  0117                     _FVRCONbits	set	279
   218  018C                     _ANSELA	set	396
   219  0212                     _SSP1ADD	set	530
   220  0211                     _SSP1BUF	set	529
   221  0215                     _SSP1CON1bits	set	533
   222  0216                     _SSP1CON2bits	set	534
   223  0214                     _SSPSTAT	set	532
   224  0318                     STR_12:	
   225  0318  3420               	retlw	32	;' '
   226  0319  3430               	retlw	48	;'0'
   227  031A  3430               	retlw	48	;'0'
   228  031B  342E               	retlw	46	;'.'
   229  031C  3431               	retlw	49	;'1'
   230  031D  3431               	retlw	49	;'1'
   231  031E  3432               	retlw	50	;'2'
   232  031F  3420               	retlw	32	;' '
   233  0320  3400               	retlw	0
   234  0321                     STR_1:	
   235  0321  3442               	retlw	66	;'B'
   236  0322  346F               	retlw	111	;'o'
   237  0323  346F               	retlw	111	;'o'
   238  0324  3474               	retlw	116	;'t'
   239  0325  342E               	retlw	46	;'.'
   240  0326  342E               	retlw	46	;'.'
   241  0327  342E               	retlw	46	;'.'
   242  0328  3400               	retlw	0
   243  0329                     STR_2:	
   244  0329  3456               	retlw	86	;'V'
   245  032A  346F               	retlw	111	;'o'
   246  032B  346C               	retlw	108	;'l'
   247  032C  3474               	retlw	116	;'t'
   248  032D  3461               	retlw	97	;'a'
   249  032E  3467               	retlw	103	;'g'
   250  032F  3465               	retlw	101	;'e'
   251  0330  3400               	retlw	0
   252  0331                     STR_4:	
   253  0331  3441               	retlw	65	;'A'
   254  0332  342F               	retlw	47	;'/'
   255  0333  3444               	retlw	68	;'D'
   256  0334  3420               	retlw	32	;' '
   257  0335  3456               	retlw	86	;'V'
   258  0336  3461               	retlw	97	;'a'
   259  0337  346C               	retlw	108	;'l'
   260  0338  3400               	retlw	0
   261  0339                     STR_5:	
   262  0339  3456               	retlw	86	;'V'
   263  033A  3465               	retlw	101	;'e'
   264  033B  3472               	retlw	114	;'r'
   265  033C  3473               	retlw	115	;'s'
   266  033D  3469               	retlw	105	;'i'
   267  033E  346F               	retlw	111	;'o'
   268  033F  346E               	retlw	110	;'n'
   269  0340  3400               	retlw	0
   270  0341                     STR_7:	
   271  0341  343C               	retlw	60	;'<'
   272  0342  3452               	retlw	82	;'R'
   273  0343  3465               	retlw	101	;'e'
   274  0344  3474               	retlw	116	;'t'
   275  0345  3475               	retlw	117	;'u'
   276  0346  3472               	retlw	114	;'r'
   277  0347  346E               	retlw	110	;'n'
   278  0348  3400               	retlw	0
   279  0349                     STR_6:	
   280  0349  3445               	retlw	69	;'E'
   281  034A  3472               	retlw	114	;'r'
   282  034B  3472               	retlw	114	;'r'
   283  034C  346F               	retlw	111	;'o'
   284  034D  3472               	retlw	114	;'r'
   285  034E  3400               	retlw	0
   286  034F                     STR_3:	
   287  034F  3442               	retlw	66	;'B'
   288  0350  3461               	retlw	97	;'a'
   289  0351  3472               	retlw	114	;'r'
   290  0352  3400               	retlw	0
   291  0329                     
   292                           ; #config settings
   293  0000                     
   294                           	psect	cinit
   295  004E                     start_initialization:	
   296  004E                     __initialization:	
   297                           
   298                           ; Clear objects allocated to COMMON
   299  004E  01F7               	clrf	__pbssCOMMON& (0+127)
   300  004F  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   301                           
   302                           ; Clear objects allocated to BANK0
   303  0050  3050               	movlw	low __pbssBANK0
   304  0051  0084               	movwf	4
   305  0052  3000               	movlw	high __pbssBANK0
   306  0053  0085               	movwf	5
   307  0054  300A               	movlw	10
   308  0055  24C6               	fcall	clear_ram0
   309                           
   310                           ; Clear objects allocated to BANK1
   311  0056  30A0               	movlw	low __pbssBANK1
   312  0057  0084               	movwf	4
   313  0058  3000               	movlw	high __pbssBANK1
   314  0059  0085               	movwf	5
   315  005A  3020               	movlw	32
   316  005B  24C6               	fcall	clear_ram0
   317                           
   318                           ; Initialize objects allocated to BANK0
   319  005C  30A4               	movlw	low __pidataBANK0
   320  005D  0084               	movwf	4
   321  005E  3084               	movlw	(high __pidataBANK0)| (0+128)
   322  005F  0085               	movwf	5
   323  0060  303E               	movlw	low __pdataBANK0
   324  0061  0086               	movwf	6
   325  0062  3000               	movlw	high __pdataBANK0
   326  0063  0087               	movwf	7
   327  0064  3012               	movlw	18
   328  0065  24CC               	fcall	init_ram
   329  0066                     end_of_initialization:	
   330                           ;End of C runtime variable initialization code
   331                           
   332  0066                     __end_of__initialization:	
   333  0066  0020               	movlb	0
   334  0067  2868               	ljmp	_main	;jump to C main() function
   335                           
   336                           	psect	bssCOMMON
   337  0077                     __pbssCOMMON:	
   338  0077                     __@bufferPostiion:	
   339  0077                     	ds	1
   340  0078                     __@interruptCount:	
   341  0078                     	ds	1
   342                           
   343                           	psect	bssBANK0
   344  0050                     __pbssBANK0:	
   345  0050                     _menuState_:	
   346  0050                     	ds	2
   347  0052                     _sumOfBuffer_:	
   348  0052                     	ds	2
   349  0054                     _events_:	
   350  0054                     	ds	1
   351  0055                     _isHold_:	
   352  0055                     	ds	1
   353  0056                     _machineState_:	
   354  0056                     	ds	1
   355  0057                     _measureMode_:	
   356  0057                     	ds	1
   357  0058                     _portAState_:	
   358  0058                     	ds	1
   359  0059                     main@prevPortAState:	
   360  0059                     	ds	1
   361                           
   362                           	psect	dataBANK0
   363  003E                     __pdataBANK0:	
   364  003E                     _MESSAGE_MENU:	
   365  003E                     	ds	10
   366  0048                     main@F2296:	
   367  0048                     	ds	8
   368                           
   369                           	psect	bssBANK1
   370  00A0                     __pbssBANK1:	
   371  00A0                     __@adBuffer:	
   372  00A0                     	ds	32
   373                           
   374                           	psect	clrtext
   375  04C6                     clear_ram0:	
   376                           ;	Called with FSR0 containing the base address, and
   377                           ;	WREG with the size to clear
   378                           
   379  04C6  0064               	clrwdt	;clear the watchdog before getting into this loop
   380  04C7                     clrloop0:	
   381  04C7  0180               	clrf	0	;clear RAM location pointed to by FSR
   382  04C8  3101               	addfsr 0,1
   383  04C9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   384  04CA  2CC7               	goto	clrloop0	;have we reached the end yet?
   385  04CB  3400               	retlw	0	;all done for this memory range, return
   386                           
   387                           	psect	inittext
   388  04CC                     init_ram:	
   389  04CC  00FE               	movwf	126
   390  04CD                     initloop:	
   391  04CD  0012               	moviw fsr0++
   392  04CE  001E               	movwi fsr1++
   393  04CF  0BFE               	decfsz	126,f
   394  04D0  2CCD               	goto	initloop
   395  04D1  3400               	retlw	0
   396                           
   397                           	psect	cstackCOMMON
   398  0070                     __pcstackCOMMON:	
   399  0070                     ?_initialize:	
   400  0070                     ?__:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0070                     ??__:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0070                     ?__aqm0802_ClearRow:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0070                     ?__aqm0802_Initialize:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_main:	
   413                           ; 1 bytes @ 0x0
   414                           
   415                           
   416                           ; 2 bytes @ 0x0
   417  0070                     	ds	3
   418  0073                     __@adValue:	
   419                           
   420                           ; 2 bytes @ 0x3
   421  0073                     	ds	2
   422  0075                     ??_initialize:	
   423  0075                     ??___lwdiv:	
   424                           ; 0 bytes @ 0x5
   425                           
   426  0075                     ?__private_aqm0802_SendData:	
   427                           ; 0 bytes @ 0x5
   428                           
   429  0075                     __private_aqm0802_SendData@dataByte:	
   430                           ; 1 bytes @ 0x5
   431                           
   432                           
   433                           ; 1 bytes @ 0x5
   434  0075                     	ds	1
   435  0076                     ??__private_aqm0802_SendData:	
   436  0076                     __private_aqm0802_SendData@controlByte:	
   437                           ; 0 bytes @ 0x6
   438                           
   439                           
   440                           ; 1 bytes @ 0x6
   441  0076                     	ds	1
   442                           
   443                           	psect	cstackBANK0
   444  0020                     __pcstackBANK0:	
   445  0020                     ??__aqm0802_ClearRow:	
   446  0020                     ??__aqm0802_Initialize:	
   447                           ; 0 bytes @ 0x0
   448                           
   449  0020                     ?__aqm0802_SendString:	
   450                           ; 0 bytes @ 0x0
   451                           
   452  0020                     ?__aqm0802_SendStringClearing:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0020                     ?___lwdiv:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0020                     __aqm0802_SendString@stringPtr:	
   459                           ; 2 bytes @ 0x0
   460                           
   461  0020                     __aqm0802_SendStringClearing@stringPtr:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0020                     ___lwdiv@divisor:	
   465                           ; 2 bytes @ 0x0
   466                           
   467                           
   468                           ; 2 bytes @ 0x0
   469  0020                     	ds	1
   470  0021                     ??__aqm0802_SendString:	
   471  0021                     __aqm0802_ClearRow@rowSelect:	
   472                           ; 0 bytes @ 0x1
   473                           
   474                           
   475                           ; 1 bytes @ 0x1
   476  0021                     	ds	1
   477  0022                     ??__aqm0802_SendStringClearing:	
   478  0022                     __aqm0802_SendString@position:	
   479                           ; 0 bytes @ 0x2
   480                           
   481  0022                     __aqm0802_ClearRow@count:	
   482                           ; 1 bytes @ 0x2
   483                           
   484  0022                     ___lwdiv@dividend:	
   485                           ; 1 bytes @ 0x2
   486                           
   487                           
   488                           ; 2 bytes @ 0x2
   489  0022                     	ds	2
   490  0024                     __aqm0802_SendStringClearing@position:	
   491  0024                     ___lwdiv@counter:	
   492                           ; 1 bytes @ 0x4
   493                           
   494                           
   495                           ; 1 bytes @ 0x4
   496  0024                     	ds	1
   497  0025                     __aqm0802_SendStringClearing@col:	
   498  0025                     ___lwdiv@quotient:	
   499                           ; 1 bytes @ 0x5
   500                           
   501                           
   502                           ; 2 bytes @ 0x5
   503  0025                     	ds	2
   504  0027                     ?__aqm0802_SendCharacter:	
   505  0027                     __aqm0802_SendCharacter@character:	
   506                           ; 1 bytes @ 0x7
   507                           
   508                           
   509                           ; 1 bytes @ 0x7
   510  0027                     	ds	1
   511  0028                     ??__aqm0802_SendCharacter:	
   512                           
   513                           ; 0 bytes @ 0x8
   514  0028                     	ds	1
   515  0029                     __aqm0802_SendCharacter@position:	
   516                           
   517                           ; 1 bytes @ 0x9
   518  0029                     	ds	1
   519  002A                     ??_main:	
   520                           
   521                           ; 0 bytes @ 0xA
   522  002A                     	ds	2
   523  002C                     main@string:	
   524                           
   525                           ; 8 bytes @ 0xC
   526  002C                     	ds	8
   527  0034                     main@barImage:	
   528                           
   529                           ; 1 bytes @ 0x14
   530  0034                     	ds	1
   531  0035                     main@compareUnit:	
   532                           
   533                           ; 2 bytes @ 0x15
   534  0035                     	ds	2
   535  0037                     main@keyPressed:	
   536                           
   537                           ; 1 bytes @ 0x17
   538  0037                     	ds	1
   539  0038                     main@i:	
   540                           
   541                           ; 1 bytes @ 0x18
   542  0038                     	ds	1
   543  0039                     main@digit:	
   544                           
   545                           ; 1 bytes @ 0x19
   546  0039                     	ds	1
   547  003A                     main@adValue:	
   548                           
   549                           ; 2 bytes @ 0x1A
   550  003A                     	ds	2
   551  003C                     main@j:	
   552                           
   553                           ; 1 bytes @ 0x1C
   554  003C                     	ds	1
   555  003D                     main@i_661:	
   556                           
   557                           ; 1 bytes @ 0x1D
   558  003D                     	ds	1
   559                           
   560                           	psect	maintext
   561  0068                     __pmaintext:	
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 137 in file "src/main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  i               1   29[BANK0 ] unsigned char 
   572 ;;  compareUnit     2   21[BANK0 ] unsigned int 
   573 ;;  string          8   12[BANK0 ] unsigned char [8]
   574 ;;  adValue         2   26[BANK0 ] unsigned int 
   575 ;;  digit           1   25[BANK0 ] unsigned char 
   576 ;;  j               1   28[BANK0 ] unsigned char 
   577 ;;  keyPressed      1   23[BANK0 ] struct .
   578 ;;  i               1   24[BANK0 ] unsigned char 
   579 ;;  barImage        1   20[BANK0 ] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2  132[None  ] int 
   582 ;; Registers used:
   583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : B1F/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1
   589 ;;      Params:         0       0       0
   590 ;;      Locals:         0      18       0
   591 ;;      Temps:          0       2       0
   592 ;;      Totals:         0      20       0
   593 ;;Total ram usage:       20 bytes
   594 ;; Hardware stack levels required when called:    3
   595 ;; This function calls:
   596 ;;		___lwdiv
   597 ;;		__aqm0802_ClearRow
   598 ;;		__aqm0802_Initialize
   599 ;;		__aqm0802_SendCharacter
   600 ;;		__aqm0802_SendString
   601 ;;		__aqm0802_SendStringClearing
   602 ;;		__private_aqm0802_SendData
   603 ;;		_initialize
   604 ;; This function is called by:
   605 ;;		Startup code after reset
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           
   610                           ;psect for function _main
   611  0068                     _main:	
   612                           
   613                           ;main.c: 139: initialize( ) ;
   614                           
   615                           ;incstack = 0
   616                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   617  0068  2353               	fcall	_initialize
   618                           
   619                           ;main.c: 141: T2CONbits.TMR2ON = 1 ;
   620  0069  0020               	movlb	0	; select bank0
   621  006A  151C               	bsf	28,2	;volatile
   622  006B                     l133:	
   623                           ;main.c: 143: while(!PIR1bits.TMR2IF); ;
   624                           
   625  006B  1C91               	btfss	17,1	;volatile
   626  006C  286B               	goto	l133
   627                           
   628                           ;main.c: 145: T2CONbits.T2OUTPS = 0b0000 ;
   629  006D  3087               	movlw	-121
   630  006E  059C               	andwf	28,f	;volatile
   631                           
   632                           ;main.c: 146: PR2 = 7 ;
   633  006F  3007               	movlw	7
   634  0070  009B               	movwf	27	;volatile
   635                           
   636                           ;main.c: 148: TMR2=0x00;PIR1bits.TMR2IF=0; ;
   637  0071  019A               	clrf	26	;volatile
   638  0072  1091               	bcf	17,1	;volatile
   639                           
   640                           ;main.c: 150: _aqm0802_Initialize( ) ;
   641  0073  239B               	fcall	__aqm0802_Initialize
   642                           
   643                           ;main.c: 151: _aqm0802_SendStringClearing( 0x80 | 0x0 , MESSAGE.BOOT ) ;
   644  0074  3000               	movlw	low (_MESSAGE| (0+32768))
   645  0075  0084               	movwf	4
   646  0076  3083               	movlw	high (_MESSAGE| (0+32768))
   647  0077  0085               	movwf	5
   648  0078  3F00               	moviw [0]fsr0
   649  0079  0020               	movlb	0	; select bank0
   650  007A  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
   651  007B  3F01               	moviw [1]fsr0
   652  007C  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
   653  007D  3080               	movlw	128
   654  007E  23D7               	fcall	__aqm0802_SendStringClearing
   655                           
   656                           ;main.c: 153: uint08_t barImage = 0b11111 ;
   657  007F  301F               	movlw	31
   658  0080  0020               	movlb	0	; select bank0
   659  0081  00AA               	movwf	??_main
   660  0082  082A               	movf	??_main,w
   661  0083  00B4               	movwf	main@barImage
   662                           
   663                           ;main.c: 156: _private_aqm0802_SendData( 0x00 , 0x00 ) ;
   664  0084  01F5               	clrf	__private_aqm0802_SendData@dataByte
   665  0085  3000               	movlw	0
   666  0086  2443               	fcall	__private_aqm0802_SendData
   667                           
   668                           ;main.c: 158: for( uint08_t i = 5 ; i != 0xFF ; i-- ) {
   669  0087  3005               	movlw	5
   670  0088  0020               	movlb	0	; select bank0
   671  0089  00AA               	movwf	??_main
   672  008A  082A               	movf	??_main,w
   673  008B  00B8               	movwf	main@i
   674  008C  0A38               	incf	main@i,w
   675  008D  1903               	btfsc	3,2
   676  008E  28C3               	goto	l137
   677  008F                     l1642:	
   678                           
   679                           ;main.c: 159: _private_aqm0802_SendData( 0x00 , ( i << 3 ) | 0x40 ) ;
   680  008F  0838               	movf	main@i,w
   681  0090  00AA               	movwf	??_main
   682  0091  3002               	movlw	2
   683  0092                     u1375:	
   684  0092  35AA               	lslf	??_main,f
   685  0093  3EFF               	addlw	-1
   686  0094  1D03               	skipz
   687  0095  2892               	goto	u1375
   688  0096  352A               	lslf	??_main,w
   689  0097  3840               	iorlw	64
   690  0098  00AB               	movwf	??_main+1
   691  0099  082B               	movf	??_main+1,w
   692  009A  00F5               	movwf	__private_aqm0802_SendData@dataByte
   693  009B  3000               	movlw	0
   694  009C  2443               	fcall	__private_aqm0802_SendData
   695                           
   696                           ;main.c: 161: for( uint08_t j = 0 ; j != 8 ; j++ ) {
   697  009D  0020               	movlb	0	; select bank0
   698  009E  01BC               	clrf	main@j
   699  009F  3008               	movlw	8
   700  00A0  063C               	xorwf	main@j,w
   701  00A1  1903               	btfsc	3,2
   702  00A2  28BC               	goto	l1662
   703  00A3                     l1650:	
   704                           
   705                           ;main.c: 162: if( j == 0 || j == 7 )
   706  00A3  083C               	movf	main@j,w
   707  00A4  1903               	btfsc	3,2
   708  00A5  28AA               	goto	l1654
   709  00A6  3007               	movlw	7
   710  00A7  063C               	xorwf	main@j,w
   711  00A8  1D03               	btfss	3,2
   712  00A9  28AC               	goto	l1656
   713  00AA                     l1654:	
   714                           
   715                           ;main.c: 163: _private_aqm0802_SendData( 0x40 , 0b11111 ) ;
   716  00AA  301F               	movlw	31
   717  00AB  28AE               	goto	L3
   718  00AC                     l1656:	
   719                           
   720                           ;main.c: 164: else
   721                           ;main.c: 165: _private_aqm0802_SendData( 0x40 , barImage ) ;
   722  00AC  0020               	movlb	0	; select bank0
   723  00AD  0834               	movf	main@barImage,w
   724  00AE                     L3:	
   725  00AE  00AA               	movwf	??_main
   726  00AF  082A               	movf	??_main,w
   727  00B0  00F5               	movwf	__private_aqm0802_SendData@dataByte
   728  00B1  3040               	movlw	64
   729  00B2  2443               	fcall	__private_aqm0802_SendData
   730  00B3  3001               	movlw	1
   731  00B4  0020               	movlb	0	; select bank0
   732  00B5  00AA               	movwf	??_main
   733  00B6  082A               	movf	??_main,w
   734  00B7  07BC               	addwf	main@j,f
   735  00B8  3008               	movlw	8
   736  00B9  063C               	xorwf	main@j,w
   737  00BA  1D03               	btfss	3,2
   738  00BB  28A3               	goto	l1650
   739  00BC                     l1662:	
   740                           
   741                           ;main.c: 166: }
   742                           ;main.c: 168: barImage >>= 1 ;
   743  00BC  1003               	clrc
   744  00BD  0CB4               	rrf	main@barImage,f
   745  00BE  3001               	movlw	1
   746  00BF  02B8               	subwf	main@i,f
   747  00C0  0A38               	incf	main@i,w
   748  00C1  1D03               	btfss	3,2
   749  00C2  288F               	goto	l1642
   750  00C3                     l137:	
   751                           
   752                           ;main.c: 169: }
   753                           ;main.c: 171: machineState_ = STATE_MEASURE ;
   754  00C3  01D6               	clrf	_machineState_
   755  00C4  0AD6               	incf	_machineState_,f
   756                           
   757                           ;main.c: 172: events_.changeMessage=1 ;
   758  00C5  16D4               	bsf	_events_,5
   759                           
   760                           ;main.c: 175: TMR0IE = 1 ;
   761  00C6  168B               	bsf	11,5	;volatile
   762  00C7                     l1668:	
   763                           ;main.c: 178: for( ; ; ) {
   764                           
   765                           
   766                           ;main.c: 180: static UniPortA prevPortAState = { 0x00 } ;
   767                           ;main.c: 181: UniPortA keyPressed ;
   768                           ;main.c: 183: keyPressed.byte = ( portAState_.byte ^ prevPortAState.byte ) & portAState_
      +                          .byte ;
   769  00C7  0020               	movlb	0	; select bank0
   770  00C8  0858               	movf	_portAState_,w
   771  00C9  0659               	xorwf	main@prevPortAState,w
   772  00CA  0558               	andwf	_portAState_,w
   773  00CB  00AA               	movwf	??_main
   774  00CC  082A               	movf	??_main,w
   775  00CD  00B7               	movwf	main@keyPressed
   776                           
   777                           ;main.c: 184: prevPortAState.byte = portAState_.byte ;
   778  00CE  0858               	movf	_portAState_,w
   779  00CF  00AA               	movwf	??_main
   780  00D0  082A               	movf	??_main,w
   781  00D1  00D9               	movwf	main@prevPortAState
   782                           
   783                           ;main.c: 187: if( keyPressed.menu )
   784  00D2  19B7               	btfsc	main@keyPressed,3
   785                           
   786                           ;main.c: 188: events_.keyPressMenu=1 ;
   787  00D3  1454               	bsf	_events_,0
   788                           
   789                           ;main.c: 190: if( keyPressed.up ) {
   790  00D4  1EB7               	btfss	main@keyPressed,5
   791  00D5  28DB               	goto	l148
   792                           
   793                           ;main.c: 191: if( portAState_.down )
   794  00D6  1C58               	btfss	_portAState_,0
   795  00D7  28DA               	goto	l149
   796                           
   797                           ;main.c: 192: events_.keyPressUpDown=1 ;
   798  00D8  15D4               	bsf	_events_,3
   799  00D9  28DB               	goto	l148
   800  00DA                     l149:	
   801                           
   802                           ;main.c: 193: else
   803                           ;main.c: 194: events_.keyPressUp=1 ;
   804  00DA  14D4               	bsf	_events_,1
   805  00DB                     l148:	
   806                           
   807                           ;main.c: 195: }
   808                           ;main.c: 196: if( keyPressed.down ) {
   809  00DB  1C37               	btfss	main@keyPressed,0
   810  00DC  28E2               	goto	l151
   811                           
   812                           ;main.c: 197: if( portAState_.up )
   813  00DD  1ED8               	btfss	_portAState_,5
   814  00DE  28E1               	goto	l152
   815                           
   816                           ;main.c: 198: events_.keyPressUpDown=1 ;
   817  00DF  15D4               	bsf	_events_,3
   818  00E0  28E2               	goto	l151
   819  00E1                     l152:	
   820                           
   821                           ;main.c: 199: else
   822                           ;main.c: 200: events_.keyPressDown=1 ;
   823  00E1  1554               	bsf	_events_,2
   824  00E2                     l151:	
   825                           
   826                           ;main.c: 201: }
   827                           ;main.c: 203: if( (events_.error&&!(events_.error=0)) ) {
   828  00E2  1F54               	btfss	_events_,6
   829  00E3  28EA               	goto	l1690
   830  00E4  1354               	bcf	_events_,6
   831                           
   832                           ;main.c: 204: machineState_ = STATE_ERROR ;
   833  00E5  3004               	movlw	4
   834  00E6  00AA               	movwf	??_main
   835  00E7  082A               	movf	??_main,w
   836  00E8  00D6               	movwf	_machineState_
   837                           
   838                           ;main.c: 205: events_.changeMessage=1 ;
   839  00E9  16D4               	bsf	_events_,5
   840  00EA                     l1690:	
   841                           
   842                           ;main.c: 206: }
   843                           ;main.c: 209: if( (events_.keyPressUpDown&&!(events_.keyPressUpDown=0)) ) {
   844  00EA  1DD4               	btfss	_events_,3
   845  00EB  28FC               	goto	l155
   846  00EC  11D4               	bcf	_events_,3
   847                           
   848                           ;main.c: 210: switch( machineState_ ) {
   849  00ED  28F7               	goto	l1700
   850  00EE                     l1694:	
   851                           ;main.c: 211: case STATE_MEASURE:
   852                           
   853                           
   854                           ;main.c: 212: if( isHold_ )
   855  00EE  0855               	movf	_isHold_,w
   856  00EF  1903               	btfsc	3,2
   857  00F0  28F3               	goto	l158
   858                           
   859                           ;main.c: 213: isHold_ = BOOL_FALSE ;
   860  00F1  01D5               	clrf	_isHold_
   861  00F2  28F5               	goto	l159
   862  00F3                     l158:	
   863                           
   864                           ;main.c: 214: else
   865                           ;main.c: 215: isHold_ = BOOL_TRUE ;
   866  00F3  01D5               	clrf	_isHold_
   867  00F4  0AD5               	incf	_isHold_,f
   868  00F5                     l159:	
   869                           
   870                           ;main.c: 216: events_.changeMessage=1 ;
   871  00F5  16D4               	bsf	_events_,5
   872                           
   873                           ;main.c: 218: }
   874                           
   875                           ;main.c: 217: break ;
   876  00F6  28FC               	goto	l155
   877  00F7                     l1700:	
   878  00F7  0856               	movf	_machineState_,w
   879                           
   880                           ; Switch size 1, requested type "space"
   881                           ; Number of cases is 1, Range of values is 1 to 1
   882                           ; switch strategies available:
   883                           ; Name         Instructions Cycles
   884                           ; simple_byte            4     3 (average)
   885                           ; direct_byte           11     9 (fixed)
   886                           ; jumptable            263     9 (fixed)
   887                           ;	Chosen strategy is simple_byte
   888  00F8  3A01               	xorlw	1	; case 1
   889  00F9  1903               	skipnz
   890  00FA  28EE               	goto	l1694
   891  00FB  28FC               	goto	l155
   892  00FC                     l155:	
   893                           
   894                           ;main.c: 219: }
   895                           ;main.c: 222: if( (events_.keyPressMenu&&!(events_.keyPressMenu=0)) ) {
   896  00FC  1C54               	btfss	_events_,0
   897  00FD  2953               	goto	l1746
   898  00FE  1054               	bcf	_events_,0
   899                           
   900                           ;main.c: 224: events_.changeMessage=1 ;
   901  00FF  16D4               	bsf	_events_,5
   902                           
   903                           ;main.c: 226: switch( machineState_ ) {
   904  0100  2925               	goto	l1720
   905  0101                     l1704:	
   906                           ;main.c: 228: case STATE_MEASURE:
   907                           
   908  0101  2920               	goto	l1716
   909  0102                     l165:	
   910                           ;main.c: 232: case STATE_MENU:
   911                           
   912                           ;main.c: 230: break ;
   913                           
   914                           ;main.c: 229: machineState_ = STATE_MENU ;
   915                           
   916                           
   917                           ;main.c: 233: machineState_ = STATE_MEASURE ;
   918  0102  01D6               	clrf	_machineState_
   919  0103  0AD6               	incf	_machineState_,f
   920                           
   921                           ;main.c: 235: switch( menuState_.select ) {
   922  0104  2911               	goto	l1714
   923  0105                     l1706:	
   924                           ;main.c: 236: case MENU_VOLTAGE:
   925                           
   926                           
   927                           ;main.c: 237: measureMode_ = MEASURE_MODE_VOLTAGE ;
   928  0105  01D7               	clrf	_measureMode_
   929                           
   930                           ;main.c: 238: break ;
   931  0106  2953               	goto	l1746
   932  0107                     l1708:	
   933                           ;main.c: 240: case MENU_BAR:
   934                           
   935                           
   936                           ;main.c: 241: measureMode_ = MEASURE_MODE_BAR ;
   937  0107  3002               	movlw	2
   938  0108  00AA               	movwf	??_main
   939  0109  082A               	movf	??_main,w
   940  010A  00D7               	movwf	_measureMode_
   941                           
   942                           ;main.c: 242: break ;
   943  010B  2953               	goto	l1746
   944  010C                     l170:	
   945                           ;main.c: 244: case MENU_AD_VALUE:
   946                           
   947                           
   948                           ;main.c: 245: measureMode_ = MEASURE_MODE_AD_VALUE ;
   949  010C  01D7               	clrf	_measureMode_
   950  010D  0AD7               	incf	_measureMode_,f
   951                           
   952                           ;main.c: 246: break ;
   953  010E  2953               	goto	l1746
   954  010F                     l1710:	
   955                           ;main.c: 248: case MENU_VERSION:
   956                           
   957                           
   958                           ;main.c: 249: machineState_ = STATE_VERSION ;
   959  010F  3003               	movlw	3
   960  0110  2921               	goto	L2
   961  0111                     l1714:	
   962                           ;main.c: 251: }
   963                           
   964                           ;main.c: 250: break ;
   965                           
   966  0111  0850               	movf	_menuState_,w
   967                           
   968                           ; Switch size 1, requested type "space"
   969                           ; Number of cases is 4, Range of values is 1 to 4
   970                           ; switch strategies available:
   971                           ; Name         Instructions Cycles
   972                           ; simple_byte           13     7 (average)
   973                           ; direct_byte           17     9 (fixed)
   974                           ; jumptable            263     9 (fixed)
   975                           ;	Chosen strategy is simple_byte
   976  0112  3A01               	xorlw	1	; case 1
   977  0113  1903               	skipnz
   978  0114  2905               	goto	l1706
   979  0115  3A03               	xorlw	3	; case 2
   980  0116  1903               	skipnz
   981  0117  2907               	goto	l1708
   982  0118  3A01               	xorlw	1	; case 3
   983  0119  1903               	skipnz
   984  011A  290C               	goto	l170
   985  011B  3A07               	xorlw	7	; case 4
   986  011C  1903               	skipnz
   987  011D  290F               	goto	l1710
   988  011E  2953               	goto	l1746
   989                           
   990                           ;main.c: 252: break ;
   991  011F  2953               	goto	l1746
   992  0120                     l1716:	
   993                           ;main.c: 254: case STATE_VERSION:
   994                           
   995                           
   996                           ;main.c: 255: machineState_ = STATE_MENU ;
   997  0120  3002               	movlw	2
   998  0121                     L2:	
   999  0121  00AA               	movwf	??_main
  1000  0122  082A               	movf	??_main,w
  1001  0123  00D6               	movwf	_machineState_
  1002                           
  1003                           ;main.c: 257: }
  1004                           
  1005                           ;main.c: 256: break ;
  1006  0124  2953               	goto	l1746
  1007  0125                     l1720:	
  1008  0125  0856               	movf	_machineState_,w
  1009                           
  1010                           ; Switch size 1, requested type "space"
  1011                           ; Number of cases is 3, Range of values is 1 to 3
  1012                           ; switch strategies available:
  1013                           ; Name         Instructions Cycles
  1014                           ; simple_byte           10     6 (average)
  1015                           ; direct_byte           15     9 (fixed)
  1016                           ; jumptable            263     9 (fixed)
  1017                           ;	Chosen strategy is simple_byte
  1018  0126  3A01               	xorlw	1	; case 1
  1019  0127  1903               	skipnz
  1020  0128  2901               	goto	l1704
  1021  0129  3A03               	xorlw	3	; case 2
  1022  012A  1903               	skipnz
  1023  012B  2902               	goto	l165
  1024  012C  3A01               	xorlw	1	; case 3
  1025  012D  1903               	skipnz
  1026  012E  2920               	goto	l1716
  1027  012F  2953               	goto	l1746
  1028                           
  1029                           ;main.c: 258: }
  1030                           ;main.c: 261: switch( machineState_ ) {
  1031  0130  2953               	goto	l1746
  1032  0131                     l174:	
  1033                           ;main.c: 263: case STATE_MENU:
  1034                           
  1035                           
  1036                           ;main.c: 264: if( (events_.keyPressUp&&!(events_.keyPressUp=0)) ) {
  1037  0131  1CD4               	btfss	_events_,1
  1038  0132  293F               	goto	l1732
  1039  0133  10D4               	bcf	_events_,1
  1040                           
  1041                           ;main.c: 265: if( menuState_.select != 0 ) {
  1042  0134  0850               	movf	_menuState_,w
  1043  0135  1903               	btfsc	3,2
  1044  0136  293F               	goto	l1732
  1045                           
  1046                           ;main.c: 266: menuState_.select-- ;
  1047  0137  3001               	movlw	1
  1048  0138  02D0               	subwf	_menuState_,f
  1049                           
  1050                           ;main.c: 267: if( menuState_.cursor != 0 ) menuState_.cursor-- ;
  1051  0139  0851               	movf	_menuState_+1,w
  1052  013A  1903               	btfsc	3,2
  1053  013B  293E               	goto	l1730
  1054  013C  3001               	movlw	1
  1055  013D  02D1               	subwf	_menuState_+1,f
  1056  013E                     l1730:	
  1057                           
  1058                           ;main.c: 268: events_.changeMessage=1 ;
  1059  013E  16D4               	bsf	_events_,5
  1060  013F                     l1732:	
  1061                           
  1062                           ;main.c: 269: }
  1063                           ;main.c: 270: }
  1064                           ;main.c: 271: if( (events_.keyPressDown&&!(events_.keyPressDown=0)) ) {
  1065  013F  1D54               	btfss	_events_,2
  1066  0140  2958               	goto	l181
  1067  0141  1154               	bcf	_events_,2
  1068                           
  1069                           ;main.c: 272: if( menuState_.select != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU
      +                          [0] ) ) - 1 ) ) {
  1070  0142  3004               	movlw	4
  1071  0143  0650               	xorwf	_menuState_,w
  1072  0144  1903               	btfsc	3,2
  1073  0145  2958               	goto	l181
  1074                           
  1075                           ;main.c: 273: menuState_.select++ ;
  1076  0146  3001               	movlw	1
  1077  0147  00AA               	movwf	??_main
  1078  0148  082A               	movf	??_main,w
  1079  0149  07D0               	addwf	_menuState_,f
  1080                           
  1081                           ;main.c: 274: if( menuState_.cursor != 1 ) menuState_.cursor++ ;
  1082  014A  0351               	decf	_menuState_+1,w
  1083  014B  1903               	btfsc	3,2
  1084  014C  2951               	goto	l1742
  1085  014D  3001               	movlw	1
  1086  014E  00AA               	movwf	??_main
  1087  014F  082A               	movf	??_main,w
  1088  0150  07D1               	addwf	_menuState_+1,f
  1089  0151                     l1742:	
  1090                           
  1091                           ;main.c: 275: events_.changeMessage=1 ;
  1092  0151  16D4               	bsf	_events_,5
  1093                           
  1094                           ;main.c: 280: }
  1095                           
  1096                           ;main.c: 276: }
  1097                           ;main.c: 277: }
  1098                           ;main.c: 279: break ;
  1099  0152  2958               	goto	l181
  1100  0153                     l1746:	
  1101  0153  0856               	movf	_machineState_,w
  1102                           
  1103                           ; Switch size 1, requested type "space"
  1104                           ; Number of cases is 1, Range of values is 2 to 2
  1105                           ; switch strategies available:
  1106                           ; Name         Instructions Cycles
  1107                           ; simple_byte            4     3 (average)
  1108                           ; direct_byte           11     9 (fixed)
  1109                           ; jumptable            263     9 (fixed)
  1110                           ;	Chosen strategy is simple_byte
  1111  0154  3A02               	xorlw	2	; case 2
  1112  0155  1903               	skipnz
  1113  0156  2931               	goto	l174
  1114  0157  2958               	goto	l181
  1115  0158                     l181:	
  1116                           
  1117                           ;main.c: 283: if( (events_.changeMessage&&!(events_.changeMessage=0)) ) {
  1118  0158  1ED4               	btfss	_events_,5
  1119  0159  29F5               	goto	l1782
  1120  015A  12D4               	bcf	_events_,5
  1121                           
  1122                           ;main.c: 284: switch( machineState_ ) {
  1123  015B  29E6               	goto	l1780
  1124  015C                     l1750:	
  1125                           ;main.c: 289: case MEASURE_MODE_VOLTAGE:
  1126                           
  1127                           ;main.c: 287: switch( measureMode_ ) {
  1128                           
  1129                           ;main.c: 286: case STATE_MEASURE:
  1130                           
  1131                           
  1132                           ;main.c: 290: _aqm0802_SendStringClearing( 0x80 | 0x0 , MESSAGE.VOLTAGE ) ;
  1133  015C  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  1134  015D  0084               	movwf	4
  1135  015E  3083               	movlw	high ((_MESSAGE+2)| (0+32768))
  1136  015F  0085               	movwf	5
  1137  0160  3F00               	moviw [0]fsr0
  1138  0161  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1139  0162  3F01               	moviw [1]fsr0
  1140  0163  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1141  0164  3080               	movlw	128
  1142  0165  23D7               	fcall	__aqm0802_SendStringClearing
  1143                           
  1144                           ;main.c: 291: break ;
  1145  0166  298B               	goto	l1760
  1146  0167                     l1752:	
  1147                           ;main.c: 293: case MEASURE_MODE_BAR:
  1148                           
  1149                           
  1150                           ;main.c: 294: _aqm0802_SendStringClearing( 0x80 | 0x0 , MESSAGE.BAR ) ;
  1151  0167  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  1152  0168  0084               	movwf	4
  1153  0169  3083               	movlw	high ((_MESSAGE+4)| (0+32768))
  1154  016A  0085               	movwf	5
  1155  016B  3F00               	moviw [0]fsr0
  1156  016C  0020               	movlb	0	; select bank0
  1157  016D  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1158  016E  3F01               	moviw [1]fsr0
  1159  016F  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1160  0170  3080               	movlw	128
  1161  0171  23D7               	fcall	__aqm0802_SendStringClearing
  1162                           
  1163                           ;main.c: 295: break ;
  1164  0172  298B               	goto	l1760
  1165  0173                     l1754:	
  1166                           ;main.c: 297: case MEASURE_MODE_AD_VALUE:
  1167                           
  1168                           
  1169                           ;main.c: 298: _aqm0802_SendStringClearing( 0x80 | 0x0 , MESSAGE.AD_VALUE ) ;
  1170  0173  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  1171  0174  0084               	movwf	4
  1172  0175  3083               	movlw	high ((_MESSAGE+6)| (0+32768))
  1173  0176  0085               	movwf	5
  1174  0177  3F00               	moviw [0]fsr0
  1175  0178  0020               	movlb	0	; select bank0
  1176  0179  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1177  017A  3F01               	moviw [1]fsr0
  1178  017B  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1179  017C  3080               	movlw	128
  1180  017D  23D7               	fcall	__aqm0802_SendStringClearing
  1181                           
  1182                           ;main.c: 301: }
  1183                           
  1184                           ;main.c: 299: break ;
  1185  017E  298B               	goto	l1760
  1186  017F                     l1758:	
  1187  017F  0020               	movlb	0	; select bank0
  1188  0180  0857               	movf	_measureMode_,w
  1189                           
  1190                           ; Switch size 1, requested type "space"
  1191                           ; Number of cases is 3, Range of values is 0 to 2
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           10     6 (average)
  1195                           ; direct_byte           12     6 (fixed)
  1196                           ; jumptable            260     6 (fixed)
  1197                           ;	Chosen strategy is simple_byte
  1198  0181  3A00               	xorlw	0	; case 0
  1199  0182  1903               	skipnz
  1200  0183  295C               	goto	l1750
  1201  0184  3A01               	xorlw	1	; case 1
  1202  0185  1903               	skipnz
  1203  0186  2973               	goto	l1754
  1204  0187  3A03               	xorlw	3	; case 2
  1205  0188  1903               	skipnz
  1206  0189  2967               	goto	l1752
  1207  018A  298B               	goto	l1760
  1208  018B                     l1760:	
  1209                           
  1210                           ;main.c: 302: _aqm0802_ClearRow( 0xC0 | 0x0 ) ;
  1211  018B  30C0               	movlw	192
  1212  018C  2489               	fcall	__aqm0802_ClearRow
  1213                           
  1214                           ;main.c: 303: if( isHold_ )
  1215  018D  0020               	movlb	0	; select bank0
  1216  018E  0855               	movf	_isHold_,w
  1217  018F  1903               	btfsc	3,2
  1218  0190  2997               	goto	l1766
  1219                           
  1220                           ;main.c: 304: _aqm0802_SendCharacter( 0xC0 | 0x0 , 'H' ) ;
  1221  0191  3048               	movlw	72
  1222  0192  00AA               	movwf	??_main
  1223  0193  082A               	movf	??_main,w
  1224  0194  00A7               	movwf	__aqm0802_SendCharacter@character
  1225  0195  30C0               	movlw	192
  1226  0196  24B6               	fcall	__aqm0802_SendCharacter
  1227  0197                     l1766:	
  1228                           
  1229                           ;main.c: 306: events_.changeValue=1 ;
  1230  0197  0020               	movlb	0	; select bank0
  1231  0198  1654               	bsf	_events_,4
  1232                           
  1233                           ;main.c: 307: break ;
  1234  0199  29F5               	goto	l1782
  1235  019A                     l1768:	
  1236                           ;main.c: 309: case STATE_MENU:
  1237                           
  1238                           
  1239                           ;main.c: 310: _aqm0802_SendStringClearing( 0x80 | 0x1 , MESSAGE_MENU[ menuState_.select 
      +                          - menuState_.cursor ] ) ;
  1240  019A  0351               	decf	_menuState_+1,w
  1241  019B  3AFF               	xorlw	255
  1242  019C  0750               	addwf	_menuState_,w
  1243  019D  0709               	addwf	9,w
  1244  019E  3E3E               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  1245  019F  0086               	movwf	6
  1246  01A0  0187               	clrf	7
  1247  01A1  3F40               	moviw [0]fsr1
  1248  01A2  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1249  01A3  3F41               	moviw [1]fsr1
  1250  01A4  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1251  01A5  3081               	movlw	129
  1252  01A6  23D7               	fcall	__aqm0802_SendStringClearing
  1253                           
  1254                           ;main.c: 311: _aqm0802_SendStringClearing( 0xC0 | 0x1 , MESSAGE_MENU[ menuState_.select 
      +                          - menuState_.cursor + 1 ] ) ;
  1255  01A7  0020               	movlb	0	; select bank0
  1256  01A8  0351               	decf	_menuState_+1,w
  1257  01A9  3AFF               	xorlw	255
  1258  01AA  0750               	addwf	_menuState_,w
  1259  01AB  0709               	addwf	9,w
  1260  01AC  3E02               	addlw	2
  1261  01AD  3E3E               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  1262  01AE  0086               	movwf	6
  1263  01AF  0187               	clrf	7
  1264  01B0  3F40               	moviw [0]fsr1
  1265  01B1  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1266  01B2  3F41               	moviw [1]fsr1
  1267  01B3  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1268  01B4  30C1               	movlw	193
  1269  01B5  23D7               	fcall	__aqm0802_SendStringClearing
  1270                           
  1271                           ;main.c: 312: _aqm0802_SendCharacter( ROW_SELECT[ menuState_.cursor ] | 0x0 , 0x07 ) ;
  1272  01B6  3007               	movlw	7
  1273  01B7  0020               	movlb	0	; select bank0
  1274  01B8  00AA               	movwf	??_main
  1275  01B9  082A               	movf	??_main,w
  1276  01BA  00A7               	movwf	__aqm0802_SendCharacter@character
  1277  01BB  0851               	movf	_menuState_+1,w
  1278  01BC  3E16               	addlw	low (_ROW_SELECT| (0+32768))
  1279  01BD  0084               	movwf	4
  1280  01BE  3083               	movlw	high (_ROW_SELECT| (0+32768))
  1281  01BF  1803               	skipnc
  1282  01C0  3E01               	addlw	1
  1283  01C1  0085               	movwf	5
  1284  01C2  0800               	movf	0,w	;code access
  1285  01C3  24B6               	fcall	__aqm0802_SendCharacter
  1286                           
  1287                           ;main.c: 313: break ;
  1288  01C4  29F5               	goto	l1782
  1289  01C5                     l1772:	
  1290                           ;main.c: 315: case STATE_VERSION:
  1291                           
  1292                           
  1293                           ;main.c: 316: _aqm0802_SendStringClearing( 0x80 | 0x0 , MESSAGE.VERSION ) ;
  1294  01C5  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  1295  01C6  0084               	movwf	4
  1296  01C7  3083               	movlw	high ((_MESSAGE+8)| (0+32768))
  1297  01C8  0085               	movwf	5
  1298  01C9  3F00               	moviw [0]fsr0
  1299  01CA  0020               	movlb	0	; select bank0
  1300  01CB  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1301  01CC  3F01               	moviw [1]fsr0
  1302  01CD  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1303  01CE  3080               	movlw	128
  1304  01CF  23D7               	fcall	__aqm0802_SendStringClearing
  1305                           
  1306                           ;main.c: 317: _aqm0802_SendStringClearing( 0xC0 | 0x0 , " 00.112 " ) ;
  1307  01D0  3018               	movlw	low (STR_12| (0+32768))
  1308  01D1  0020               	movlb	0	; select bank0
  1309  01D2  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1310  01D3  3083               	movlw	high (STR_12| (0+32768))
  1311  01D4  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1312  01D5  30C0               	movlw	192
  1313  01D6  23D7               	fcall	__aqm0802_SendStringClearing
  1314                           
  1315                           ;main.c: 318: break ;
  1316  01D7  29F5               	goto	l1782
  1317  01D8                     l1774:	
  1318                           ;main.c: 321: case STATE_ERROR:
  1319                           
  1320                           
  1321                           ;main.c: 322: _aqm0802_SendStringClearing( 0x80 | 0x0 , MESSAGE.ERROR ) ;
  1322  01D8  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  1323  01D9  0084               	movwf	4
  1324  01DA  3083               	movlw	high ((_MESSAGE+10)| (0+32768))
  1325  01DB  0085               	movwf	5
  1326  01DC  3F00               	moviw [0]fsr0
  1327  01DD  0020               	movlb	0	; select bank0
  1328  01DE  00A0               	movwf	__aqm0802_SendStringClearing@stringPtr
  1329  01DF  3F01               	moviw [1]fsr0
  1330  01E0  00A1               	movwf	__aqm0802_SendStringClearing@stringPtr+1
  1331  01E1  3080               	movlw	128
  1332  01E2  23D7               	fcall	__aqm0802_SendStringClearing
  1333                           
  1334                           ;main.c: 323: _aqm0802_ClearRow( 0xC0 ) ;
  1335  01E3  30C0               	movlw	192
  1336  01E4  2489               	fcall	__aqm0802_ClearRow
  1337                           
  1338                           ;main.c: 325: }
  1339                           
  1340                           ;main.c: 324: break ;
  1341  01E5  29F5               	goto	l1782
  1342  01E6                     l1780:	
  1343  01E6  0020               	movlb	0	; select bank0
  1344  01E7  0856               	movf	_machineState_,w
  1345                           
  1346                           ; Switch size 1, requested type "space"
  1347                           ; Number of cases is 4, Range of values is 1 to 4
  1348                           ; switch strategies available:
  1349                           ; Name         Instructions Cycles
  1350                           ; simple_byte           13     7 (average)
  1351                           ; direct_byte           17     9 (fixed)
  1352                           ; jumptable            263     9 (fixed)
  1353                           ;	Chosen strategy is simple_byte
  1354  01E8  3A01               	xorlw	1	; case 1
  1355  01E9  1903               	skipnz
  1356  01EA  297F               	goto	l1758
  1357  01EB  3A03               	xorlw	3	; case 2
  1358  01EC  1903               	skipnz
  1359  01ED  299A               	goto	l1768
  1360  01EE  3A01               	xorlw	1	; case 3
  1361  01EF  1903               	skipnz
  1362  01F0  29C5               	goto	l1772
  1363  01F1  3A07               	xorlw	7	; case 4
  1364  01F2  1903               	skipnz
  1365  01F3  29D8               	goto	l1774
  1366  01F4  29F5               	goto	l1782
  1367  01F5                     l1782:	
  1368                           
  1369                           ;main.c: 326: }
  1370                           ;main.c: 329: if( machineState_ == STATE_MEASURE && (events_.changeValue&&!(events_.chan
      +                          geValue=0)) ) {
  1371  01F5  0020               	movlb	0	; select bank0
  1372  01F6  0356               	decf	_machineState_,w
  1373  01F7  1903               	btfsc	3,2
  1374  01F8  1E54               	btfss	_events_,4
  1375  01F9  28C7               	goto	l1668
  1376  01FA  1254               	bcf	_events_,4
  1377                           
  1378                           ;main.c: 332: ADValue_t adValue ;
  1379                           ;main.c: 333: uint08_t digit ;
  1380                           ;main.c: 334: char string[8] = "  00000" ;
  1381  01FB  3048               	movlw	low main@F2296
  1382  01FC  0086               	movwf	6
  1383  01FD  3000               	movlw	high main@F2296
  1384  01FE  0087               	movwf	7
  1385  01FF  302C               	movlw	low main@string
  1386  0200  0084               	movwf	4
  1387  0201  3000               	movlw	high main@string
  1388  0202  0085               	movwf	5
  1389  0203  3008               	movlw	8
  1390  0204  00AA               	movwf	??_main
  1391  0205                     u1620:	
  1392  0205  0016               	moviw fsr1++
  1393  0206  001A               	movwi fsr0++
  1394  0207  0BAA               	decfsz	??_main,f
  1395  0208  2A05               	goto	u1620
  1396                           
  1397                           ;main.c: 335: const uint16_t compareUnits[] = { 10000 , 1000 , 100 , 10 , 1 } ;
  1398                           ;main.c: 337: adValue = sumOfBuffer_ ;
  1399  0209  0853               	movf	_sumOfBuffer_+1,w
  1400  020A  00BB               	movwf	main@adValue+1
  1401  020B  0852               	movf	_sumOfBuffer_,w
  1402  020C  00BA               	movwf	main@adValue
  1403                           
  1404                           ;main.c: 339: switch( measureMode_ ) {
  1405  020D  2A8A               	goto	l1834
  1406  020E                     l1792:	
  1407                           ;main.c: 340: case MEASURE_MODE_VOLTAGE:
  1408                           
  1409                           
  1410                           ;main.c: 341: case MEASURE_MODE_AD_VALUE:
  1411                           ;main.c: 343: digit = 0 ;
  1412  020E  01B9               	clrf	main@digit
  1413  020F                     l1804:	
  1414                           ;main.c: 344: while( digit < 5 ) {
  1415                           
  1416  020F  3005               	movlw	5
  1417  0210  0239               	subwf	main@digit,w
  1418  0211  1803               	btfsc	3,0
  1419  0212  2A3D               	goto	l1806
  1420                           
  1421                           ;main.c: 346: uint16_t compareUnit = compareUnits[ digit ] ;
  1422  0213  0839               	movf	main@digit,w
  1423  0214  00AA               	movwf	??_main
  1424  0215  01AB               	clrf	??_main+1
  1425  0216  35AA               	lslf	??_main,f
  1426  0217  0DAB               	rlf	??_main+1,f
  1427  0218  300C               	movlw	low (main@compareUnits| (0+32768))
  1428  0219  072A               	addwf	??_main,w
  1429  021A  0084               	movwf	4
  1430  021B  3083               	movlw	high (main@compareUnits| (0+32768))
  1431  021C  3D2B               	addwfc	??_main+1,w
  1432  021D  0085               	movwf	5
  1433  021E  3F00               	moviw [0]fsr0
  1434  021F  00B5               	movwf	main@compareUnit
  1435  0220  3F01               	moviw [1]fsr0
  1436  0221  00B6               	movwf	main@compareUnit+1
  1437  0222                     l1800:	
  1438                           ;main.c: 348: while( adValue >= compareUnit ) {
  1439                           
  1440  0222  0836               	movf	main@compareUnit+1,w
  1441  0223  023B               	subwf	main@adValue+1,w
  1442  0224  1D03               	skipz
  1443  0225  2A28               	goto	u1635
  1444  0226  0835               	movf	main@compareUnit,w
  1445  0227  023A               	subwf	main@adValue,w
  1446  0228                     u1635:	
  1447  0228  1C03               	btfss	3,0
  1448  0229  2A38               	goto	l1802
  1449                           
  1450                           ;main.c: 349: string[digit + 2]++ ;
  1451  022A  3001               	movlw	1
  1452  022B  00AA               	movwf	??_main
  1453  022C  0839               	movf	main@digit,w
  1454  022D  3E02               	addlw	2
  1455  022E  3E2C               	addlw	(low (main@string| 0))& (0+255)
  1456  022F  0086               	movwf	6
  1457  0230  0187               	clrf	7
  1458  0231  082A               	movf	??_main,w
  1459  0232  0781               	addwf	1,f
  1460                           
  1461                           ;main.c: 350: adValue -= compareUnit ;
  1462  0233  0835               	movf	main@compareUnit,w
  1463  0234  02BA               	subwf	main@adValue,f
  1464  0235  0836               	movf	main@compareUnit+1,w
  1465  0236  3BBB               	subwfb	main@adValue+1,f
  1466  0237  2A22               	goto	l1800
  1467  0238                     l1802:	
  1468                           
  1469                           ;main.c: 351: }
  1470                           ;main.c: 353: digit++ ;
  1471  0238  3001               	movlw	1
  1472  0239  00AA               	movwf	??_main
  1473  023A  082A               	movf	??_main,w
  1474  023B  07B9               	addwf	main@digit,f
  1475  023C  2A0F               	goto	l1804
  1476  023D                     l1806:	
  1477                           
  1478                           ;main.c: 355: }
  1479                           ;main.c: 357: if( measureMode_ == MEASURE_MODE_VOLTAGE ) {
  1480  023D  0857               	movf	_measureMode_,w
  1481  023E  1D03               	btfss	3,2
  1482  023F  2A50               	goto	l1810
  1483                           
  1484                           ;main.c: 358: string[1] = string[2] ;
  1485  0240  082E               	movf	main@string+2,w
  1486  0241  00AA               	movwf	??_main
  1487  0242  082A               	movf	??_main,w
  1488  0243  00AD               	movwf	main@string+1
  1489                           
  1490                           ;main.c: 359: string[2] = string[3] ;
  1491  0244  082F               	movf	main@string+3,w
  1492  0245  00AA               	movwf	??_main
  1493  0246  082A               	movf	??_main,w
  1494  0247  00AE               	movwf	main@string+2
  1495                           
  1496                           ;main.c: 360: string[3] = '.' ;
  1497  0248  302E               	movlw	46
  1498  0249  00AA               	movwf	??_main
  1499  024A  082A               	movf	??_main,w
  1500  024B  00AF               	movwf	main@string+3
  1501                           
  1502                           ;main.c: 361: string[6] = 'V' ;
  1503  024C  3056               	movlw	86
  1504  024D  00AA               	movwf	??_main
  1505  024E  082A               	movf	??_main,w
  1506  024F  00B2               	movwf	main@string+6
  1507  0250                     l1810:	
  1508                           
  1509                           ;main.c: 362: }
  1510                           ;main.c: 364: _aqm0802_SendString( 0xC0 | 0x1 , &string ) ;
  1511  0250  302C               	movlw	(low (main@string| 0))& (0+255)
  1512  0251  00AA               	movwf	??_main
  1513  0252  082A               	movf	??_main,w
  1514  0253  00A0               	movwf	__aqm0802_SendString@stringPtr
  1515  0254  30C1               	movlw	193
  1516  0255  246A               	fcall	__aqm0802_SendString
  1517                           
  1518                           ;main.c: 366: break ;
  1519  0256  28C7               	goto	l1668
  1520  0257                     l1812:	
  1521                           ;main.c: 368: case MEASURE_MODE_BAR:
  1522                           
  1523                           
  1524                           ;main.c: 369: for( uint08_t i = 7 ; i != 1 ; i-- ) {
  1525  0257  3007               	movlw	7
  1526  0258  0020               	movlb	0	; select bank0
  1527  0259  00AA               	movwf	??_main
  1528  025A  082A               	movf	??_main,w
  1529  025B  00BD               	movwf	main@i_661
  1530  025C                     L4:	
  1531  025C  033D               	decf	main@i_661,w
  1532  025D  1903               	btfsc	3,2
  1533  025E  28C7               	goto	l1668
  1534                           
  1535                           ;main.c: 370: if( adValue >= 1000 ) {
  1536  025F  3003               	movlw	3
  1537  0260  023B               	subwf	main@adValue+1,w
  1538  0261  30E8               	movlw	232
  1539  0262  1903               	skipnz
  1540  0263  023A               	subwf	main@adValue,w
  1541  0264  1C03               	skipc
  1542  0265  2A73               	goto	l1824
  1543                           
  1544                           ;main.c: 371: _aqm0802_SendCharacter( 0xC0 | i , 0x05 ) ;
  1545  0266  3005               	movlw	5
  1546  0267  00AA               	movwf	??_main
  1547  0268  082A               	movf	??_main,w
  1548  0269  00A7               	movwf	__aqm0802_SendCharacter@character
  1549  026A  083D               	movf	main@i_661,w
  1550  026B  38C0               	iorlw	192
  1551  026C  24B6               	fcall	__aqm0802_SendCharacter
  1552                           
  1553                           ;main.c: 372: adValue -= 1000 ;
  1554  026D  30E8               	movlw	232
  1555  026E  0020               	movlb	0	; select bank0
  1556  026F  02BA               	subwf	main@adValue,f
  1557  0270  3003               	movlw	3
  1558  0271  3BBB               	subwfb	main@adValue+1,f
  1559                           
  1560                           ;main.c: 373: }
  1561  0272  2A87               	goto	l1828
  1562  0273                     l1824:	
  1563                           
  1564                           ;main.c: 374: else {
  1565                           ;main.c: 375: _aqm0802_SendCharacter( 0xC0 | i , adValue / 200 ) ;
  1566  0273  30C8               	movlw	200
  1567  0274  00A0               	movwf	___lwdiv@divisor
  1568  0275  3000               	movlw	0
  1569  0276  00A1               	movwf	___lwdiv@divisor+1
  1570  0277  083B               	movf	main@adValue+1,w
  1571  0278  00A3               	movwf	___lwdiv@dividend+1
  1572  0279  083A               	movf	main@adValue,w
  1573  027A  00A2               	movwf	___lwdiv@dividend
  1574  027B  240E               	fcall	___lwdiv
  1575  027C  0020               	movlb	0	; select bank0
  1576  027D  0820               	movf	?___lwdiv,w
  1577  027E  00AA               	movwf	??_main
  1578  027F  082A               	movf	??_main,w
  1579  0280  00A7               	movwf	__aqm0802_SendCharacter@character
  1580  0281  083D               	movf	main@i_661,w
  1581  0282  38C0               	iorlw	192
  1582  0283  24B6               	fcall	__aqm0802_SendCharacter
  1583                           
  1584                           ;main.c: 376: adValue = 0 ;
  1585  0284  0020               	movlb	0	; select bank0
  1586  0285  01BA               	clrf	main@adValue
  1587  0286  01BB               	clrf	main@adValue+1
  1588  0287                     l1828:	
  1589  0287  3001               	movlw	1
  1590  0288  02BD               	subwf	main@i_661,f
  1591  0289  2A5C               	goto	L4
  1592  028A                     l1834:	
  1593                           ;main.c: 380: }
  1594                           
  1595                           ;main.c: 377: }
  1596                           ;main.c: 378: }
  1597                           ;main.c: 379: break ;
  1598                           
  1599  028A  0857               	movf	_measureMode_,w
  1600                           
  1601                           ; Switch size 1, requested type "space"
  1602                           ; Number of cases is 3, Range of values is 0 to 2
  1603                           ; switch strategies available:
  1604                           ; Name         Instructions Cycles
  1605                           ; simple_byte           10     6 (average)
  1606                           ; direct_byte           12     6 (fixed)
  1607                           ; jumptable            260     6 (fixed)
  1608                           ;	Chosen strategy is simple_byte
  1609  028B  3A00               	xorlw	0	; case 0
  1610  028C  1903               	skipnz
  1611  028D  2A0E               	goto	l1792
  1612  028E  3A01               	xorlw	1	; case 1
  1613  028F  1903               	skipnz
  1614  0290  2A0E               	goto	l1792
  1615  0291  3A03               	xorlw	3	; case 2
  1616  0292  1903               	skipnz
  1617  0293  2A57               	goto	l1812
  1618  0294  28C7               	goto	l1668
  1619                           
  1620                           ;main.c: 382: }
  1621                           ;main.c: 384: }
  1622  0295  28C7               	goto	l1668
  1623  0296                     __end_of_main:	
  1624                           
  1625                           	psect	text1
  1626  0353                     __ptext1:	
  1627 ;; *************** function _initialize *****************
  1628 ;; Defined at:
  1629 ;;		line 9 in file "src/pic12f1822_init.h"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;		None
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;		None
  1634 ;; Return value:  Size  Location     Type
  1635 ;;		None               void
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMMON   BANK0   BANK1
  1643 ;;      Params:         0       0       0
  1644 ;;      Locals:         0       0       0
  1645 ;;      Temps:          0       0       0
  1646 ;;      Totals:         0       0       0
  1647 ;;Total ram usage:        0 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    1
  1650 ;; This function calls:
  1651 ;;		Nothing
  1652 ;; This function is called by:
  1653 ;;		_main
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           
  1658                           ;psect for function _initialize
  1659  0353                     _initialize:	
  1660                           
  1661                           ;pic12f1822_init.h: 12: OSCCONbits.SPLLEN = 0 ;
  1662                           
  1663                           ;incstack = 0
  1664                           ; Regs used in _initialize: [wreg+status,2+status,0]
  1665  0353  0021               	movlb	1	; select bank1
  1666  0354  1399               	bcf	25,7	;volatile
  1667                           
  1668                           ;pic12f1822_init.h: 13: OSCCONbits.IRCF = 0b1011 ;
  1669  0355  0819               	movf	25,w	;volatile
  1670  0356  3987               	andlw	-121
  1671  0357  3858               	iorlw	88
  1672  0358  0099               	movwf	25	;volatile
  1673                           
  1674                           ;pic12f1822_init.h: 14: OSCCONbits.SCS = 0b10 ;
  1675  0359  0819               	movf	25,w	;volatile
  1676  035A  39FC               	andlw	-4
  1677  035B  3802               	iorlw	2
  1678  035C  0099               	movwf	25	;volatile
  1679                           
  1680                           ;pic12f1822_init.h: 17: INTCONbits.GIE = 1 ;
  1681  035D  178B               	bsf	11,7	;volatile
  1682                           
  1683                           ;pic12f1822_init.h: 18: INTCONbits.PEIE = 0 ;
  1684  035E  130B               	bcf	11,6	;volatile
  1685                           
  1686                           ;pic12f1822_init.h: 21: OPTION_REGbits.TMR0SE = 1 ;
  1687  035F  1615               	bsf	21,4	;volatile
  1688                           
  1689                           ;pic12f1822_init.h: 22: OPTION_REGbits.TMR0CS = 0 ;
  1690  0360  1295               	bcf	21,5	;volatile
  1691                           
  1692                           ;pic12f1822_init.h: 23: OPTION_REGbits.PSA = 1 ;
  1693  0361  1595               	bsf	21,3	;volatile
  1694                           
  1695                           ;pic12f1822_init.h: 24: OPTION_REGbits.PS = 0b010 ;
  1696  0362  0815               	movf	21,w	;volatile
  1697  0363  39F8               	andlw	-8
  1698  0364  3802               	iorlw	2
  1699  0365  0095               	movwf	21	;volatile
  1700                           
  1701                           ;pic12f1822_init.h: 25: TMR0 = 0x00 ;
  1702  0366  0020               	movlb	0	; select bank0
  1703  0367  0195               	clrf	21	;volatile
  1704                           
  1705                           ;pic12f1822_init.h: 26: INTCONbits.TMR0IF = 0 ;
  1706  0368  110B               	bcf	11,2	;volatile
  1707                           
  1708                           ;pic12f1822_init.h: 27: INTCONbits.TMR0IE = 0 ;
  1709  0369  128B               	bcf	11,5	;volatile
  1710                           
  1711                           ;pic12f1822_init.h: 30: T1CONbits.TMR1ON = 0 ;
  1712  036A  1018               	bcf	24,0	;volatile
  1713                           
  1714                           ;pic12f1822_init.h: 38: T2CONbits.TMR2ON = 0 ;
  1715  036B  111C               	bcf	28,2	;volatile
  1716                           
  1717                           ;pic12f1822_init.h: 39: T2CONbits.T2CKPS = 0b00 ;
  1718  036C  30FC               	movlw	-4
  1719  036D  059C               	andwf	28,f	;volatile
  1720                           
  1721                           ;pic12f1822_init.h: 40: T2CONbits.T2OUTPS = 0b1001 ;
  1722  036E  081C               	movf	28,w	;volatile
  1723  036F  3987               	andlw	-121
  1724  0370  3848               	iorlw	72
  1725  0371  009C               	movwf	28	;volatile
  1726                           
  1727                           ;pic12f1822_init.h: 41: PR2 = 249 ;
  1728  0372  30F9               	movlw	249
  1729  0373  009B               	movwf	27	;volatile
  1730                           
  1731                           ;pic12f1822_init.h: 42: TMR2 = 0x00 ;
  1732  0374  019A               	clrf	26	;volatile
  1733                           
  1734                           ;pic12f1822_init.h: 43: PIR1bits.TMR2IF = 0 ;
  1735  0375  1091               	bcf	17,1	;volatile
  1736                           
  1737                           ;pic12f1822_init.h: 44: PIE1bits.TMR2IE = 0 ;
  1738  0376  0021               	movlb	1	; select bank1
  1739  0377  1091               	bcf	17,1	;volatile
  1740                           
  1741                           ;pic12f1822_init.h: 47: SSPSTAT = 0x00 ;
  1742  0378  0024               	movlb	4	; select bank4
  1743  0379  0194               	clrf	20	;volatile
  1744                           
  1745                           ;pic12f1822_init.h: 48: SSP1CON1bits.WCOL = 0 ;
  1746  037A  1395               	bcf	21,7	;volatile
  1747                           
  1748                           ;pic12f1822_init.h: 49: SSP1CON1bits.SSPOV = 0 ;
  1749  037B  1315               	bcf	21,6	;volatile
  1750                           
  1751                           ;pic12f1822_init.h: 50: SSP1CON1bits.SSPEN = 1 ;
  1752  037C  1695               	bsf	21,5	;volatile
  1753                           
  1754                           ;pic12f1822_init.h: 51: SSP1CON1bits.SSPM = 0b1000 ;
  1755  037D  0815               	movf	21,w	;volatile
  1756  037E  39F0               	andlw	-16
  1757  037F  3808               	iorlw	8
  1758  0380  0095               	movwf	21	;volatile
  1759                           
  1760                           ;pic12f1822_init.h: 52: SSP1ADD = 0 ;
  1761  0381  0192               	clrf	18	;volatile
  1762                           
  1763                           ;pic12f1822_init.h: 55: FVRCONbits.ADFVR = 0b10 ;
  1764  0382  0022               	movlb	2	; select bank2
  1765  0383  0817               	movf	23,w	;volatile
  1766  0384  39FC               	andlw	-4
  1767  0385  3802               	iorlw	2
  1768  0386  0097               	movwf	23	;volatile
  1769                           
  1770                           ;pic12f1822_init.h: 56: FVRCONbits.FVREN = 1 ;
  1771  0387  1797               	bsf	23,7	;volatile
  1772                           
  1773                           ;pic12f1822_init.h: 58: ADCON0bits.CHS = 3 ;
  1774  0388  0021               	movlb	1	; select bank1
  1775  0389  081D               	movf	29,w	;volatile
  1776  038A  3983               	andlw	-125
  1777  038B  380C               	iorlw	12
  1778  038C  009D               	movwf	29	;volatile
  1779                           
  1780                           ;pic12f1822_init.h: 59: ADCON0bits.ADON = 1 ;
  1781  038D  141D               	bsf	29,0	;volatile
  1782                           
  1783                           ;pic12f1822_init.h: 60: ADCON1bits.ADFM = 1 ;
  1784  038E  179E               	bsf	30,7	;volatile
  1785                           
  1786                           ;pic12f1822_init.h: 61: ADCON1bits.ADCS = 0b000 ;
  1787  038F  308F               	movlw	-113
  1788  0390  059E               	andwf	30,f	;volatile
  1789                           
  1790                           ;pic12f1822_init.h: 62: ADCON1bits.ADPREF = 0b11 ;
  1791  0391  3003               	movlw	3
  1792  0392  049E               	iorwf	30,f	;volatile
  1793                           
  1794                           ;pic12f1822_init.h: 64: ANSELA = 0b00010000 ;
  1795  0393  3010               	movlw	16
  1796  0394  0023               	movlb	3	; select bank3
  1797  0395  008C               	movwf	12	;volatile
  1798                           
  1799                           ;pic12f1822_init.h: 65: TRISA = 0b00101111 | ANSELA ;
  1800  0396  080C               	movf	12,w	;volatile
  1801  0397  382F               	iorlw	47
  1802  0398  0021               	movlb	1	; select bank1
  1803  0399  008C               	movwf	12	;volatile
  1804  039A  0008               	return
  1805  039B                     __end_of_initialize:	
  1806                           
  1807                           	psect	text2
  1808  03D7                     __ptext2:	
  1809 ;; *************** function __aqm0802_SendStringClearing *****************
  1810 ;; Defined at:
  1811 ;;		line 70 in file "src/../../_Common/aqm0802.h"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;  position        1    wreg     unsigned char 
  1814 ;;  stringPtr       2    0[BANK0 ] PTR const unsigned char 
  1815 ;;		 -> STR_12(9), STR_11(8), STR_10(8), STR_9(4), 
  1816 ;;		 -> STR_8(8), STR_7(8), STR_6(6), STR_5(8), 
  1817 ;;		 -> STR_4(8), STR_3(4), STR_2(8), STR_1(8), 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  position        1    4[BANK0 ] unsigned char 
  1820 ;;  col             1    5[BANK0 ] unsigned char 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      unsigned char 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1
  1830 ;;      Params:         0       2       0
  1831 ;;      Locals:         0       2       0
  1832 ;;      Temps:          0       2       0
  1833 ;;      Totals:         0       6       0
  1834 ;;Total ram usage:        6 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    2
  1837 ;; This function calls:
  1838 ;;		__private_aqm0802_SendData
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function __aqm0802_SendStringClearing
  1846  03D7                     __aqm0802_SendStringClearing:	
  1847                           
  1848                           ;incstack = 0
  1849                           ; Regs used in __aqm0802_SendStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  1850                           ;__aqm0802_SendStringClearing@position stored from wreg
  1851  03D7  0020               	movlb	0	; select bank0
  1852  03D8  00A4               	movwf	__aqm0802_SendStringClearing@position
  1853                           
  1854                           ;aqm0802.h: 72: uint08_t col = 0 ;
  1855  03D9  01A5               	clrf	__aqm0802_SendStringClearing@col
  1856                           
  1857                           ;aqm0802.h: 94: _private_aqm0802_SendData( 0x00 , position & 0xF0 ) ;
  1858  03DA  0824               	movf	__aqm0802_SendStringClearing@position,w
  1859  03DB  39F0               	andlw	240
  1860  03DC  00A2               	movwf	??__aqm0802_SendStringClearing
  1861  03DD  0822               	movf	??__aqm0802_SendStringClearing,w
  1862  03DE  00F5               	movwf	__private_aqm0802_SendData@dataByte
  1863  03DF  3000               	movlw	0
  1864  03E0                     L5:	
  1865  03E0  2443               	fcall	__private_aqm0802_SendData
  1866  03E1                     l1570:	
  1867                           ;aqm0802.h: 96: while ( col != 16 ) {
  1868                           
  1869  03E1  3010               	movlw	16
  1870  03E2  0020               	movlb	0	; select bank0
  1871  03E3  0625               	xorwf	__aqm0802_SendStringClearing@col,w
  1872  03E4  1903               	btfsc	3,2
  1873  03E5  0008               	return
  1874                           
  1875                           ;aqm0802.h: 97: if ( col++ >= ( position & 0x0F ) && ( *stringPtr ) ) {
  1876  03E6  300F               	movlw	15
  1877  03E7  0020               	movlb	0	; select bank0
  1878  03E8  0524               	andwf	__aqm0802_SendStringClearing@position,w
  1879  03E9  00A2               	movwf	??__aqm0802_SendStringClearing
  1880  03EA  0825               	movf	__aqm0802_SendStringClearing@col,w
  1881  03EB  0AA5               	incf	__aqm0802_SendStringClearing@col,f
  1882  03EC  00A3               	movwf	??__aqm0802_SendStringClearing+1
  1883  03ED  0822               	movf	??__aqm0802_SendStringClearing,w
  1884  03EE  0223               	subwf	??__aqm0802_SendStringClearing+1,w
  1885  03EF  1C03               	skipc
  1886  03F0  2C08               	goto	l1568
  1887  03F1  0820               	movf	__aqm0802_SendStringClearing@stringPtr,w
  1888  03F2  0084               	movwf	4
  1889  03F3  0821               	movf	__aqm0802_SendStringClearing@stringPtr+1,w
  1890  03F4  0085               	movwf	5
  1891  03F5  0012               	moviw fsr0++
  1892  03F6  1903               	btfsc	3,2
  1893  03F7  2C08               	goto	l1568
  1894                           
  1895                           ;aqm0802.h: 98: _private_aqm0802_SendData( 0x40 , *stringPtr ) ;
  1896  03F8  0820               	movf	__aqm0802_SendStringClearing@stringPtr,w
  1897  03F9  0084               	movwf	4
  1898  03FA  0821               	movf	__aqm0802_SendStringClearing@stringPtr+1,w
  1899  03FB  0085               	movwf	5
  1900  03FC  0800               	movf	0,w	;code access
  1901  03FD  00A2               	movwf	??__aqm0802_SendStringClearing
  1902  03FE  0822               	movf	??__aqm0802_SendStringClearing,w
  1903  03FF  00F5               	movwf	__private_aqm0802_SendData@dataByte
  1904  0400  3040               	movlw	64
  1905  0401  2443               	fcall	__private_aqm0802_SendData
  1906                           
  1907                           ;aqm0802.h: 99: stringPtr++ ;
  1908  0402  3001               	movlw	1
  1909  0403  0020               	movlb	0	; select bank0
  1910  0404  07A0               	addwf	__aqm0802_SendStringClearing@stringPtr,f
  1911  0405  3000               	movlw	0
  1912  0406  3DA1               	addwfc	__aqm0802_SendStringClearing@stringPtr+1,f
  1913                           
  1914                           ;aqm0802.h: 100: }
  1915  0407  2BE1               	goto	l1570
  1916  0408                     l1568:	
  1917                           
  1918                           ;aqm0802.h: 101: else {
  1919                           ;aqm0802.h: 102: _private_aqm0802_SendData( 0x40 , ' ' ) ;
  1920  0408  3020               	movlw	32
  1921  0409  00A2               	movwf	??__aqm0802_SendStringClearing
  1922  040A  0822               	movf	??__aqm0802_SendStringClearing,w
  1923  040B  00F5               	movwf	__private_aqm0802_SendData@dataByte
  1924  040C  3040               	movlw	64
  1925  040D  2BE0               	goto	L5
  1926  040E                     __end_of__aqm0802_SendStringClearing:	
  1927                           ;aqm0802.h: 103: }
  1928                           ;aqm0802.h: 104: }
  1929                           ;aqm0802.h: 108: return 0x00 ;
  1930                           ;	Return value of __aqm0802_SendStringClearing is never used
  1931                           
  1932                           
  1933                           	psect	text3
  1934  046A                     __ptext3:	
  1935 ;; *************** function __aqm0802_SendString *****************
  1936 ;; Defined at:
  1937 ;;		line 39 in file "src/../../_Common/aqm0802.h"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  position        1    wreg     unsigned char 
  1940 ;;  stringPtr       1    0[BANK0 ] PTR const unsigned char 
  1941 ;;		 -> main@string(8), 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  position        1    2[BANK0 ] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      unsigned char 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1
  1953 ;;      Params:         0       1       0
  1954 ;;      Locals:         0       1       0
  1955 ;;      Temps:          0       1       0
  1956 ;;      Totals:         0       3       0
  1957 ;;Total ram usage:        3 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    2
  1960 ;; This function calls:
  1961 ;;		__private_aqm0802_SendData
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           
  1968                           ;psect for function __aqm0802_SendString
  1969  046A                     __aqm0802_SendString:	
  1970                           
  1971                           ;incstack = 0
  1972                           ; Regs used in __aqm0802_SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1973                           ;__aqm0802_SendString@position stored from wreg
  1974  046A  0020               	movlb	0	; select bank0
  1975  046B  00A2               	movwf	__aqm0802_SendString@position
  1976                           
  1977                           ;aqm0802.h: 55: _private_aqm0802_SendData( 0x00 , position ) ;
  1978  046C  0822               	movf	__aqm0802_SendString@position,w
  1979  046D  00A1               	movwf	??__aqm0802_SendString
  1980  046E  0821               	movf	??__aqm0802_SendString,w
  1981  046F  00F5               	movwf	__private_aqm0802_SendData@dataByte
  1982  0470  3000               	movlw	0
  1983  0471  2443               	fcall	__private_aqm0802_SendData
  1984  0472                     l1554:	
  1985                           ;aqm0802.h: 57: while ( *stringPtr ) {
  1986                           
  1987  0472  0020               	movlb	0	; select bank0
  1988  0473  0820               	movf	__aqm0802_SendString@stringPtr,w
  1989  0474  0086               	movwf	6
  1990  0475  0187               	clrf	7
  1991  0476  0801               	movf	1,w
  1992  0477  1903               	btfsc	3,2
  1993  0478  0008               	return
  1994                           
  1995                           ;aqm0802.h: 58: _private_aqm0802_SendData( 0x40 , *stringPtr ) ;
  1996  0479  0020               	movlb	0	; select bank0
  1997  047A  0820               	movf	__aqm0802_SendString@stringPtr,w
  1998  047B  0086               	movwf	6
  1999  047C  0187               	clrf	7
  2000  047D  0801               	movf	1,w
  2001  047E  00A1               	movwf	??__aqm0802_SendString
  2002  047F  0821               	movf	??__aqm0802_SendString,w
  2003  0480  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2004  0481  3040               	movlw	64
  2005  0482  2443               	fcall	__private_aqm0802_SendData
  2006                           
  2007                           ;aqm0802.h: 59: stringPtr++ ;
  2008  0483  3001               	movlw	1
  2009  0484  0020               	movlb	0	; select bank0
  2010  0485  00A1               	movwf	??__aqm0802_SendString
  2011  0486  0821               	movf	??__aqm0802_SendString,w
  2012  0487  07A0               	addwf	__aqm0802_SendString@stringPtr,f
  2013  0488  2C72               	goto	l1554
  2014  0489                     __end_of__aqm0802_SendString:	
  2015                           ;aqm0802.h: 60: }
  2016                           ;aqm0802.h: 64: return 0x00 ;
  2017                           ;	Return value of __aqm0802_SendString is never used
  2018                           
  2019                           
  2020                           	psect	text4
  2021  04B6                     __ptext4:	
  2022 ;; *************** function __aqm0802_SendCharacter *****************
  2023 ;; Defined at:
  2024 ;;		line 113 in file "src/../../_Common/aqm0802.h"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  position        1    wreg     unsigned char 
  2027 ;;  character       1    7[BANK0 ] unsigned char 
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;  position        1    9[BANK0 ] unsigned char 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      unsigned char 
  2032 ;; Registers used:
  2033 ;;		wreg, status,2, status,0, pclath, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMMON   BANK0   BANK1
  2039 ;;      Params:         0       1       0
  2040 ;;      Locals:         0       1       0
  2041 ;;      Temps:          0       1       0
  2042 ;;      Totals:         0       3       0
  2043 ;;Total ram usage:        3 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    2
  2046 ;; This function calls:
  2047 ;;		__private_aqm0802_SendData
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           
  2054                           ;psect for function __aqm0802_SendCharacter
  2055  04B6                     __aqm0802_SendCharacter:	
  2056                           
  2057                           ;incstack = 0
  2058                           ; Regs used in __aqm0802_SendCharacter: [wreg+status,2+status,0+pclath+cstack]
  2059                           ;__aqm0802_SendCharacter@position stored from wreg
  2060  04B6  0020               	movlb	0	; select bank0
  2061  04B7  00A9               	movwf	__aqm0802_SendCharacter@position
  2062                           
  2063                           ;aqm0802.h: 125: _private_aqm0802_SendData( 0x00 , position ) ;
  2064  04B8  0829               	movf	__aqm0802_SendCharacter@position,w
  2065  04B9  00A8               	movwf	??__aqm0802_SendCharacter
  2066  04BA  0828               	movf	??__aqm0802_SendCharacter,w
  2067  04BB  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2068  04BC  3000               	movlw	0
  2069  04BD  2443               	fcall	__private_aqm0802_SendData
  2070                           
  2071                           ;aqm0802.h: 126: _private_aqm0802_SendData( 0x40 , character ) ;
  2072  04BE  0020               	movlb	0	; select bank0
  2073  04BF  0827               	movf	__aqm0802_SendCharacter@character,w
  2074  04C0  00A8               	movwf	??__aqm0802_SendCharacter
  2075  04C1  0828               	movf	??__aqm0802_SendCharacter,w
  2076  04C2  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2077  04C3  3040               	movlw	64
  2078  04C4  2443               	fcall	__private_aqm0802_SendData
  2079  04C5  0008               	return
  2080  04C6                     __end_of__aqm0802_SendCharacter:	
  2081                           ;aqm0802.h: 130: return 0x00 ;
  2082                           ;	Return value of __aqm0802_SendCharacter is never used
  2083                           
  2084                           
  2085                           	psect	text5
  2086  039B                     __ptext5:	
  2087 ;; *************** function __aqm0802_Initialize *****************
  2088 ;; Defined at:
  2089 ;;		line 161 in file "src/../../_Common/aqm0802.h"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      unsigned char 
  2096 ;; Registers used:
  2097 ;;		wreg, status,2, status,0, pclath, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMMON   BANK0   BANK1
  2103 ;;      Params:         0       0       0
  2104 ;;      Locals:         0       0       0
  2105 ;;      Temps:          0       2       0
  2106 ;;      Totals:         0       2       0
  2107 ;;Total ram usage:        2 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    2
  2110 ;; This function calls:
  2111 ;;		__private_aqm0802_SendData
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function __aqm0802_Initialize
  2119  039B                     __aqm0802_Initialize:	
  2120                           
  2121                           ;aqm0802.h: 174: _private_aqm0802_SendData( 0x00 , 0x39 ) ;
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in __aqm0802_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2125  039B  3039               	movlw	57
  2126  039C  0020               	movlb	0	; select bank0
  2127  039D  00A0               	movwf	??__aqm0802_Initialize
  2128  039E  0820               	movf	??__aqm0802_Initialize,w
  2129  039F  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2130  03A0  3000               	movlw	0
  2131  03A1  2443               	fcall	__private_aqm0802_SendData
  2132                           
  2133                           ;aqm0802.h: 175: _private_aqm0802_SendData( 0x00 , 0x14 ) ;
  2134  03A2  3014               	movlw	20
  2135  03A3  0020               	movlb	0	; select bank0
  2136  03A4  00A0               	movwf	??__aqm0802_Initialize
  2137  03A5  0820               	movf	??__aqm0802_Initialize,w
  2138  03A6  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2139  03A7  3000               	movlw	0
  2140  03A8  2443               	fcall	__private_aqm0802_SendData
  2141                           
  2142                           ;aqm0802.h: 176: _private_aqm0802_SendData( 0x00 , 0x70 ) ;
  2143  03A9  3070               	movlw	112
  2144  03AA  0020               	movlb	0	; select bank0
  2145  03AB  00A0               	movwf	??__aqm0802_Initialize
  2146  03AC  0820               	movf	??__aqm0802_Initialize,w
  2147  03AD  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2148  03AE  3000               	movlw	0
  2149  03AF  2443               	fcall	__private_aqm0802_SendData
  2150                           
  2151                           ;aqm0802.h: 177: _private_aqm0802_SendData( 0x00 , 0x56 ) ;
  2152  03B0  3056               	movlw	86
  2153  03B1  0020               	movlb	0	; select bank0
  2154  03B2  00A0               	movwf	??__aqm0802_Initialize
  2155  03B3  0820               	movf	??__aqm0802_Initialize,w
  2156  03B4  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2157  03B5  3000               	movlw	0
  2158  03B6  2443               	fcall	__private_aqm0802_SendData
  2159                           
  2160                           ;aqm0802.h: 178: _private_aqm0802_SendData( 0x00 , 0x6c ) ;
  2161  03B7  306C               	movlw	108
  2162  03B8  0020               	movlb	0	; select bank0
  2163  03B9  00A0               	movwf	??__aqm0802_Initialize
  2164  03BA  0820               	movf	??__aqm0802_Initialize,w
  2165  03BB  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2166  03BC  3000               	movlw	0
  2167  03BD  2443               	fcall	__private_aqm0802_SendData
  2168                           
  2169                           ;aqm0802.h: 181: _delay((unsigned long)((200)*(1000000L/4000.0))) ;
  2170  03BE  3041               	movlw	65
  2171  03BF  0020               	movlb	0	; select bank0
  2172  03C0  00A1               	movwf	??__aqm0802_Initialize+1
  2173  03C1  30EE               	movlw	238
  2174  03C2  00A0               	movwf	??__aqm0802_Initialize
  2175  03C3                     u1697:	
  2176  03C3  0BA0               	decfsz	??__aqm0802_Initialize,f
  2177  03C4  2BC3               	goto	u1697
  2178  03C5  0BA1               	decfsz	??__aqm0802_Initialize+1,f
  2179  03C6  2BC3               	goto	u1697
  2180  03C7  0000               	nop
  2181                           
  2182                           ;aqm0802.h: 187: _private_aqm0802_SendData( 0x00 , 0x38 ) ;
  2183  03C8  3038               	movlw	56
  2184  03C9  0020               	movlb	0	; select bank0
  2185  03CA  00A0               	movwf	??__aqm0802_Initialize
  2186  03CB  0820               	movf	??__aqm0802_Initialize,w
  2187  03CC  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2188  03CD  3000               	movlw	0
  2189  03CE  2443               	fcall	__private_aqm0802_SendData
  2190                           
  2191                           ;aqm0802.h: 188: _private_aqm0802_SendData( 0x00 , 0x0C ) ;
  2192  03CF  300C               	movlw	12
  2193  03D0  0020               	movlb	0	; select bank0
  2194  03D1  00A0               	movwf	??__aqm0802_Initialize
  2195  03D2  0820               	movf	??__aqm0802_Initialize,w
  2196  03D3  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2197  03D4  3000               	movlw	0
  2198  03D5  2443               	fcall	__private_aqm0802_SendData
  2199  03D6  0008               	return
  2200  03D7                     __end_of__aqm0802_Initialize:	
  2201                           ;aqm0802.h: 191: return 0x00 ;
  2202                           ;	Return value of __aqm0802_Initialize is never used
  2203                           
  2204                           
  2205                           	psect	text6
  2206  0489                     __ptext6:	
  2207 ;; *************** function __aqm0802_ClearRow *****************
  2208 ;; Defined at:
  2209 ;;		line 136 in file "src/../../_Common/aqm0802.h"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;  rowSelect       1    wreg     unsigned char 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  rowSelect       1    1[BANK0 ] unsigned char 
  2214 ;;  count           1    2[BANK0 ] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      unsigned char 
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, pclath, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMMON   BANK0   BANK1
  2224 ;;      Params:         0       0       0
  2225 ;;      Locals:         0       2       0
  2226 ;;      Temps:          0       1       0
  2227 ;;      Totals:         0       3       0
  2228 ;;Total ram usage:        3 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    2
  2231 ;; This function calls:
  2232 ;;		__private_aqm0802_SendData
  2233 ;; This function is called by:
  2234 ;;		_main
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           
  2239                           ;psect for function __aqm0802_ClearRow
  2240  0489                     __aqm0802_ClearRow:	
  2241                           
  2242                           ;incstack = 0
  2243                           ; Regs used in __aqm0802_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  2244                           ;__aqm0802_ClearRow@rowSelect stored from wreg
  2245  0489  0020               	movlb	0	; select bank0
  2246  048A  00A1               	movwf	__aqm0802_ClearRow@rowSelect
  2247                           
  2248                           ;aqm0802.h: 148: _private_aqm0802_SendData( 0x00 , rowSelect & 0xF0 ) ;
  2249  048B  0821               	movf	__aqm0802_ClearRow@rowSelect,w
  2250  048C  39F0               	andlw	240
  2251  048D  00A0               	movwf	??__aqm0802_ClearRow
  2252  048E  0820               	movf	??__aqm0802_ClearRow,w
  2253  048F  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2254  0490  3000               	movlw	0
  2255  0491  2443               	fcall	__private_aqm0802_SendData
  2256                           
  2257                           ;aqm0802.h: 150: uint08_t count = 0 ;
  2258  0492  0020               	movlb	0	; select bank0
  2259  0493  01A2               	clrf	__aqm0802_ClearRow@count
  2260  0494                     l1578:	
  2261                           ;aqm0802.h: 151: while ( count++ != 16 )
  2262                           
  2263  0494  3001               	movlw	1
  2264  0495  0020               	movlb	0	; select bank0
  2265  0496  00A0               	movwf	??__aqm0802_ClearRow
  2266  0497  0820               	movf	??__aqm0802_ClearRow,w
  2267  0498  07A2               	addwf	__aqm0802_ClearRow@count,f
  2268  0499  3011               	movlw	17
  2269  049A  0622               	xorwf	__aqm0802_ClearRow@count,w
  2270  049B  1903               	btfsc	3,2
  2271  049C  0008               	return
  2272                           
  2273                           ;aqm0802.h: 152: _private_aqm0802_SendData( 0x40 , ' ' ) ;
  2274  049D  3020               	movlw	32
  2275  049E  00A0               	movwf	??__aqm0802_ClearRow
  2276  049F  0820               	movf	??__aqm0802_ClearRow,w
  2277  04A0  00F5               	movwf	__private_aqm0802_SendData@dataByte
  2278  04A1  3040               	movlw	64
  2279  04A2  2443               	fcall	__private_aqm0802_SendData
  2280  04A3  2C94               	goto	l1578
  2281  04A4                     __end_of__aqm0802_ClearRow:	
  2282                           ;aqm0802.h: 156: return 0x00 ;
  2283                           ;	Return value of __aqm0802_ClearRow is never used
  2284                           
  2285                           
  2286                           	psect	text7
  2287  0443                     __ptext7:	
  2288 ;; *************** function __private_aqm0802_SendData *****************
  2289 ;; Defined at:
  2290 ;;		line 237 in file "src/../../_Common/aqm0802.h"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  controlByte     1    wreg     unsigned char 
  2293 ;;  dataByte        1    5[COMMON] unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  controlByte     1    6[COMMON] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      unsigned char 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1
  2305 ;;      Params:         1       0       0
  2306 ;;      Locals:         1       0       0
  2307 ;;      Temps:          0       0       0
  2308 ;;      Totals:         2       0       0
  2309 ;;Total ram usage:        2 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    1
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		__aqm0802_SendString
  2316 ;;		__aqm0802_SendStringClearing
  2317 ;;		__aqm0802_SendCharacter
  2318 ;;		__aqm0802_ClearRow
  2319 ;;		__aqm0802_Initialize
  2320 ;;		_main
  2321 ;;		__aqm0802_Clear
  2322 ;;		__aqm0802_SetCgram
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           
  2327                           ;psect for function __private_aqm0802_SendData
  2328  0443                     __private_aqm0802_SendData:	
  2329                           
  2330                           ;incstack = 0
  2331                           ; Regs used in __private_aqm0802_SendData: [wreg+status,2]
  2332                           ;__private_aqm0802_SendData@controlByte stored from wreg
  2333  0443  00F6               	movwf	__private_aqm0802_SendData@controlByte
  2334  0444                     l94:	
  2335                           ;aqm0802.h: 239: while(!PIR1bits.TMR2IF); ;
  2336                           
  2337  0444  0020               	movlb	0	; select bank0
  2338  0445  1C91               	btfss	17,1	;volatile
  2339  0446  2C44               	goto	l94
  2340                           
  2341                           ;aqm0802.h: 241: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); ;
  2342  0447  0024               	movlb	4	; select bank4
  2343  0448  1416               	bsf	22,0	;volatile
  2344  0449                     l97:	
  2345  0449  1816               	btfsc	22,0	;volatile
  2346  044A  2C49               	goto	l97
  2347                           
  2348                           ;aqm0802.h: 242: PIR1bits.SSP1IF=0; ;
  2349  044B  0020               	movlb	0	; select bank0
  2350  044C  1191               	bcf	17,3	;volatile
  2351                           
  2352                           ;aqm0802.h: 272: SSP1BUF=0x7c; ;
  2353  044D  307C               	movlw	124
  2354  044E  0024               	movlb	4	; select bank4
  2355  044F  0091               	movwf	17	;volatile
  2356  0450                     l100:	
  2357                           ;aqm0802.h: 273: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  2358                           
  2359  0450  0020               	movlb	0	; select bank0
  2360  0451  1D91               	btfss	17,3	;volatile
  2361  0452  2C50               	goto	l100
  2362  0453  1191               	bcf	17,3	;volatile
  2363                           
  2364                           ;aqm0802.h: 276: SSP1BUF=controlByte; ;
  2365  0454  0876               	movf	__private_aqm0802_SendData@controlByte,w
  2366  0455  0024               	movlb	4	; select bank4
  2367  0456  0091               	movwf	17	;volatile
  2368  0457                     l103:	
  2369                           ;aqm0802.h: 277: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  2370                           
  2371  0457  0020               	movlb	0	; select bank0
  2372  0458  1D91               	btfss	17,3	;volatile
  2373  0459  2C57               	goto	l103
  2374  045A  1191               	bcf	17,3	;volatile
  2375                           
  2376                           ;aqm0802.h: 280: SSP1BUF=dataByte; ;
  2377  045B  0875               	movf	__private_aqm0802_SendData@dataByte,w
  2378  045C  0024               	movlb	4	; select bank4
  2379  045D  0091               	movwf	17	;volatile
  2380  045E                     l106:	
  2381                           ;aqm0802.h: 281: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  2382                           
  2383  045E  0020               	movlb	0	; select bank0
  2384  045F  1D91               	btfss	17,3	;volatile
  2385  0460  2C5E               	goto	l106
  2386  0461  1191               	bcf	17,3	;volatile
  2387                           
  2388                           ;aqm0802.h: 285: SSP1CON2bits.PEN=1;while(SSP1CON2bits.PEN); ;
  2389  0462  0024               	movlb	4	; select bank4
  2390  0463  1516               	bsf	22,2	;volatile
  2391  0464                     l109:	
  2392  0464  1916               	btfsc	22,2	;volatile
  2393  0465  2C64               	goto	l109
  2394                           
  2395                           ;aqm0802.h: 286: TMR2=0x00;PIR1bits.TMR2IF=0; ;
  2396  0466  0020               	movlb	0	; select bank0
  2397  0467  019A               	clrf	26	;volatile
  2398  0468  1091               	bcf	17,1	;volatile
  2399  0469  0008               	return
  2400  046A                     __end_of__private_aqm0802_SendData:	
  2401                           ;aqm0802.h: 291: return 0x00 ;
  2402                           ;	Return value of __private_aqm0802_SendData is never used
  2403                           
  2404                           
  2405                           	psect	text8
  2406  040E                     __ptext8:	
  2407 ;; *************** function ___lwdiv *****************
  2408 ;; Defined at:
  2409 ;;		line 6 in file "/Applications/microchip/xc8/v1.34/sources/common/lwdiv.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  divisor         2    0[BANK0 ] unsigned int 
  2412 ;;  dividend        2    2[BANK0 ] unsigned int 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  quotient        2    5[BANK0 ] unsigned int 
  2415 ;;  counter         1    4[BANK0 ] unsigned char 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  2    0[BANK0 ] unsigned int 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMMON   BANK0   BANK1
  2425 ;;      Params:         0       4       0
  2426 ;;      Locals:         0       3       0
  2427 ;;      Temps:          1       0       0
  2428 ;;      Totals:         1       7       0
  2429 ;;Total ram usage:        8 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    1
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           
  2440                           ;psect for function ___lwdiv
  2441  040E                     ___lwdiv:	
  2442                           
  2443                           ;incstack = 0
  2444                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2445  040E  0020               	movlb	0	; select bank0
  2446  040F  01A5               	clrf	___lwdiv@quotient
  2447  0410  01A6               	clrf	___lwdiv@quotient+1
  2448  0411  0820               	movf	___lwdiv@divisor,w
  2449  0412  0421               	iorwf	___lwdiv@divisor+1,w
  2450  0413  1903               	btfsc	3,2
  2451  0414  2C3E               	goto	l1612
  2452  0415  01A4               	clrf	___lwdiv@counter
  2453  0416  0AA4               	incf	___lwdiv@counter,f
  2454  0417                     l1600:	
  2455  0417  1BA1               	btfsc	___lwdiv@divisor+1,7
  2456  0418  2C23               	goto	l1602
  2457  0419  3001               	movlw	1
  2458  041A                     u1295:	
  2459  041A  35A0               	lslf	___lwdiv@divisor,f
  2460  041B  0DA1               	rlf	___lwdiv@divisor+1,f
  2461  041C  0B89               	decfsz	9,f
  2462  041D  2C1A               	goto	u1295
  2463  041E  3001               	movlw	1
  2464  041F  00F5               	movwf	??___lwdiv
  2465  0420  0875               	movf	??___lwdiv,w
  2466  0421  07A4               	addwf	___lwdiv@counter,f
  2467  0422  2C17               	goto	l1600
  2468  0423                     l1602:	
  2469  0423  3001               	movlw	1
  2470  0424                     u1315:	
  2471  0424  35A5               	lslf	___lwdiv@quotient,f
  2472  0425  0DA6               	rlf	___lwdiv@quotient+1,f
  2473  0426  0B89               	decfsz	9,f
  2474  0427  2C24               	goto	u1315
  2475  0428  0821               	movf	___lwdiv@divisor+1,w
  2476  0429  0223               	subwf	___lwdiv@dividend+1,w
  2477  042A  1D03               	skipz
  2478  042B  2C2E               	goto	u1325
  2479  042C  0820               	movf	___lwdiv@divisor,w
  2480  042D  0222               	subwf	___lwdiv@dividend,w
  2481  042E                     u1325:	
  2482  042E  1C03               	skipc
  2483  042F  2C35               	goto	l1608
  2484  0430  0820               	movf	___lwdiv@divisor,w
  2485  0431  02A2               	subwf	___lwdiv@dividend,f
  2486  0432  0821               	movf	___lwdiv@divisor+1,w
  2487  0433  3BA3               	subwfb	___lwdiv@dividend+1,f
  2488  0434  1425               	bsf	___lwdiv@quotient,0
  2489  0435                     l1608:	
  2490  0435  3001               	movlw	1
  2491  0436                     u1335:	
  2492  0436  36A1               	lsrf	___lwdiv@divisor+1,f
  2493  0437  0CA0               	rrf	___lwdiv@divisor,f
  2494  0438  0B89               	decfsz	9,f
  2495  0439  2C36               	goto	u1335
  2496  043A  3001               	movlw	1
  2497  043B  02A4               	subwf	___lwdiv@counter,f
  2498  043C  1D03               	btfss	3,2
  2499  043D  2C23               	goto	l1602
  2500  043E                     l1612:	
  2501  043E  0826               	movf	___lwdiv@quotient+1,w
  2502  043F  00A1               	movwf	?___lwdiv+1
  2503  0440  0825               	movf	___lwdiv@quotient,w
  2504  0441  00A0               	movwf	?___lwdiv
  2505  0442  0008               	return
  2506  0443                     __end_of___lwdiv:	
  2507                           
  2508                           	psect	intentry
  2509  0004                     __pintentry:	
  2510 ;; *************** function __ *****************
  2511 ;; Defined at:
  2512 ;;		line 391 in file "src/main.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  adValue         2    3[COMMON] unsigned int 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;		None               void
  2519 ;; Registers used:
  2520 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMMON   BANK0   BANK1
  2526 ;;      Params:         0       0       0
  2527 ;;      Locals:         2       0       0
  2528 ;;      Temps:          3       0       0
  2529 ;;      Totals:         5       0       0
  2530 ;;Total ram usage:        5 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		Interrupt level 1
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539  0004                     __:	
  2540                           
  2541                           ;incstack = 0
  2542                           ; Regs used in __: [wreg+fsr1l+fsr1h+status,2+status,0]
  2543  0004  3180               	pagesel	$
  2544  0005  0020               	movlb	0	; select bank0
  2545  0006  087F               	movf	127,w
  2546  0007  00F2               	movwf	??__+2
  2547                           
  2548                           ;main.c: 392: if( !INTCONbits.TMR0IF ) return ;
  2549  0008  1D0B               	btfss	11,2	;volatile
  2550  0009  2849               	goto	i1l221
  2551                           
  2552                           ;main.c: 393: INTCONbits.TMR0IF = 0 ;
  2553  000A  110B               	bcf	11,2	;volatile
  2554                           
  2555                           ;main.c: 396: static uint08_t interruptCount = 0 ;
  2556                           ;main.c: 397: if( ! --interruptCount ) {
  2557  000B  3001               	movlw	1
  2558  000C  02F8               	subwf	__@interruptCount,f
  2559  000D  1D03               	btfss	3,2
  2560  000E  2818               	goto	i1l1524
  2561                           
  2562                           ;main.c: 398: interruptCount = 10 ;
  2563  000F  300A               	movlw	10
  2564  0010  00F0               	movwf	??__
  2565  0011  0870               	movf	??__,w
  2566  0012  00F8               	movwf	__@interruptCount
  2567                           
  2568                           ;main.c: 399: portAState_.byte = (~PORTA& 0b00101001); ;
  2569  0013  090C               	comf	12,w	;volatile
  2570  0014  3929               	andlw	41
  2571  0015  00F0               	movwf	??__
  2572  0016  0870               	movf	??__,w
  2573  0017  00D8               	movwf	_portAState_
  2574  0018                     i1l1524:	
  2575                           
  2576                           ;main.c: 400: }
  2577                           ;main.c: 403: if( !ADCON0bits.GO ) {
  2578  0018  0021               	movlb	1	; select bank1
  2579  0019  189D               	btfsc	29,1	;volatile
  2580  001A  2845               	goto	i1l1544
  2581                           
  2582                           ;main.c: 405: static uint08_t bufferPostiion = 0 ;
  2583                           ;main.c: 406: static ADValue_t adBuffer[ 16 ] ;
  2584                           ;main.c: 407: ADValue_t adValue = ( ( ( (uint16_t)ADRESH ) << 8 ) | ADRESL ) ;
  2585  001B  081C               	movf	28,w	;volatile
  2586  001C  00F4               	movwf	__@adValue+1
  2587  001D  081B               	movf	27,w	;volatile
  2588  001E  00F3               	movwf	__@adValue
  2589                           
  2590                           ;main.c: 408: ADCON0bits.GO = 1 ;
  2591  001F  149D               	bsf	29,1	;volatile
  2592                           
  2593                           ;main.c: 410: if( !isHold_ ) {
  2594  0020  0020               	movlb	0	; select bank0
  2595  0021  0855               	movf	_isHold_,w
  2596  0022  1D03               	btfss	3,2
  2597  0023  2844               	goto	i1l1542
  2598                           
  2599                           ;main.c: 411: sumOfBuffer_ -= adBuffer[ bufferPostiion ] ;
  2600  0024  3577               	lslf	__@bufferPostiion,w
  2601  0025  3EA0               	addlw	(low (__@adBuffer| 0))& (0+255)
  2602  0026  0086               	movwf	6
  2603  0027  0187               	clrf	7
  2604  0028  3F40               	moviw [0]fsr1
  2605  0029  00F0               	movwf	??__
  2606  002A  3F41               	moviw [1]fsr1
  2607  002B  00F1               	movwf	??__+1
  2608  002C  0870               	movf	??__,w
  2609  002D  02D2               	subwf	_sumOfBuffer_,f
  2610  002E  0871               	movf	??__+1,w
  2611  002F  3BD3               	subwfb	_sumOfBuffer_+1,f
  2612                           
  2613                           ;main.c: 412: sumOfBuffer_ += adValue ;
  2614  0030  0873               	movf	__@adValue,w
  2615  0031  07D2               	addwf	_sumOfBuffer_,f
  2616  0032  0874               	movf	__@adValue+1,w
  2617  0033  3DD3               	addwfc	_sumOfBuffer_+1,f
  2618                           
  2619                           ;main.c: 413: adBuffer[bufferPostiion] = adValue ;
  2620  0034  3577               	lslf	__@bufferPostiion,w
  2621  0035  3EA0               	addlw	(low (__@adBuffer| 0))& (0+255)
  2622  0036  0086               	movwf	6
  2623  0037  0187               	clrf	7
  2624  0038  0873               	movf	__@adValue,w
  2625  0039  3FC0               	movwi [0]fsr1
  2626  003A  0874               	movf	__@adValue+1,w
  2627  003B  3FC1               	movwi [1]fsr1
  2628                           
  2629                           ;main.c: 415: if( ++bufferPostiion == 16 ) bufferPostiion = 0 ;
  2630  003C  3001               	movlw	1
  2631  003D  00F0               	movwf	??__
  2632  003E  0870               	movf	??__,w
  2633  003F  07F7               	addwf	__@bufferPostiion,f
  2634  0040  3010               	movlw	16
  2635  0041  0677               	xorwf	__@bufferPostiion,w
  2636  0042  1903               	btfsc	3,2
  2637  0043  01F7               	clrf	__@bufferPostiion
  2638  0044                     i1l1542:	
  2639                           
  2640                           ;main.c: 417: }
  2641                           ;main.c: 419: events_.changeValue=1 ;
  2642  0044  1654               	bsf	_events_,4
  2643  0045                     i1l1544:	
  2644                           
  2645                           ;main.c: 421: }
  2646                           ;main.c: 423: if( INTCONbits.TMR0IF ) events_.error=1 ;
  2647  0045  1D0B               	btfss	11,2	;volatile
  2648  0046  2849               	goto	i1l221
  2649  0047  0020               	movlb	0	; select bank0
  2650  0048  1754               	bsf	_events_,6
  2651  0049                     i1l221:	
  2652  0049  0872               	movf	??__+2,w
  2653  004A  0020               	movlb	0	; select bank0
  2654  004B  00FF               	movwf	127
  2655  004C  0009               	retfie
  2656  004D                     __end_of__:	
  2657  007E                     btemp	set	126	;btemp
  2658  007E                     wtemp	set	126
  2659  007E                     wtemp0	set	126
  2660  0080                     wtemp1	set	128
  2661  0082                     wtemp2	set	130
  2662  0084                     wtemp3	set	132
  2663  0086                     wtemp4	set	134
  2664  0088                     wtemp5	set	136
  2665  007F                     wtemp6	set	127
  2666  007E                     ttemp	set	126
  2667  007E                     ttemp0	set	126
  2668  0081                     ttemp1	set	129
  2669  0084                     ttemp2	set	132
  2670  0087                     ttemp3	set	135
  2671  007F                     ttemp4	set	127
  2672  007E                     ltemp	set	126
  2673  007E                     ltemp0	set	126
  2674  0082                     ltemp1	set	130
  2675  0086                     ltemp2	set	134
  2676  0080                     ltemp3	set	128


Data Sizes:
    Strings     59
    Constant    24
    Data        18
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     30      58
    BANK1            32      0      32

Pointer List with Targets:

    MESSAGE_MENU	PTR const unsigned char [5] size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[4]), STR_8(CODE[8]), 
		 -> STR_7(CODE[8]), 

    S400$ERROR	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), 

    MESSAGE.ERROR	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), 

    S400$VERSION	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[8]), 

    MESSAGE.VERSION	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[8]), 

    S400$AD_VALUE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), 

    MESSAGE.AD_VALUE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), 

    S400$BAR	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    MESSAGE.BAR	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    S400$VOLTAGE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    MESSAGE.VOLTAGE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    S400$BOOT	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    MESSAGE.BOOT	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    _aqm0802_SendStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_12(CODE[9]), STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[4]), 
		 -> STR_8(CODE[8]), STR_7(CODE[8]), STR_6(CODE[6]), STR_5(CODE[8]), 
		 -> STR_4(CODE[8]), STR_3(CODE[4]), STR_2(CODE[8]), STR_1(CODE[8]), 

    _aqm0802_SendString@stringPtr	PTR const unsigned char  size(1) Largest target is 8
		 -> main@string(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->__private_aqm0802_SendData
    __aqm0802_SendStringClearing->__private_aqm0802_SendData
    __aqm0802_SendString->__private_aqm0802_SendData
    __aqm0802_SendCharacter->__private_aqm0802_SendData
    __aqm0802_Initialize->__private_aqm0802_SendData
    __aqm0802_ClearRow->__private_aqm0802_SendData

Critical Paths under __ in COMMON

    None.

Critical Paths under _main in BANK0

    _main->__aqm0802_SendCharacter
    __aqm0802_SendCharacter->___lwdiv

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   13938
                                             10 BANK0     20    20      0
                            ___lwdiv
                  __aqm0802_ClearRow
                __aqm0802_Initialize
             __aqm0802_SendCharacter
                __aqm0802_SendString
        __aqm0802_SendStringClearing
          __private_aqm0802_SendData
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __aqm0802_SendStringClearing                          6     4      2    2794
                                              0 BANK0      6     4      2
          __private_aqm0802_SendData
 ---------------------------------------------------------------------------------
 (1) __aqm0802_SendString                                  3     2      1    1978
                                              0 BANK0      3     2      1
          __private_aqm0802_SendData
 ---------------------------------------------------------------------------------
 (1) __aqm0802_SendCharacter                               3     2      1    2140
                                              7 BANK0      3     2      1
                            ___lwdiv (ARG)
          __private_aqm0802_SendData
 ---------------------------------------------------------------------------------
 (1) __aqm0802_Initialize                                  2     2      0    1792
                                              0 BANK0      2     2      0
          __private_aqm0802_SendData
 ---------------------------------------------------------------------------------
 (1) __aqm0802_ClearRow                                    3     3      0    1857
                                              0 BANK0      3     3      0
          __private_aqm0802_SendData
 ---------------------------------------------------------------------------------
 (1) __private_aqm0802_SendData                            2     1      1    1792
                                              5 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     531
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    5     5      0      45
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
   __aqm0802_ClearRow
     __private_aqm0802_SendData
   __aqm0802_Initialize
     __private_aqm0802_SendData
   __aqm0802_SendCharacter
     ___lwdiv (ARG)
     __private_aqm0802_SendData (ARG)
   __aqm0802_SendString
     __private_aqm0802_SendData
   __aqm0802_SendStringClearing
     __private_aqm0802_SendData
   __private_aqm0802_SendData
   _initialize

 __ (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      63       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1E      3A       6       72.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      63       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 12 20:56:45 2015

                           _ROW_SELECT 0316                                      __ 0004  
           __size_of__aqm0802_ClearRow 001B                                     ?__ 0070  
                                   l94 0444                                     l97 0449  
                                  ??__ 0070                                    l100 0450  
                                  l103 0457                                    l106 045E  
                                  l109 0464                                    l133 006B  
                                  l151 00E2                                    l152 00E1  
                                  l137 00C3                                    l170 010C  
                                  l155 00FC                                    l148 00DB  
                                  l181 0158                                    l165 0102  
                                  l149 00DA                                    l174 0131  
                                  l158 00F3                                    l159 00F5  
                                  _PR2 001B                            main@adValue 003A  
                                  wreg 0009                           __CFG_LVP$OFF 0000  
                      __end_of_MESSAGE 030C                                   l1600 0417  
                                 l1602 0423                                   l1612 043E  
                                 l1700 00F7                                   l1710 010F  
                                 l1608 0435                                   l1800 0222  
                                 l1704 0101                                   l1720 0125  
                                 l1554 0472                                   l1570 03E1  
                                 l1810 0250                                   l1802 0238  
                                 l1730 013E                                   l1706 0105  
                                 l1714 0111                                   l1650 00A3  
                                 l1642 008F                                   l1812 0257  
                                 l1804 020F                                   l1732 013F  
                                 l1716 0120                                   l1708 0107  
                                 l1806 023D                                   l1750 015C  
                                 l1742 0151                                   l1654 00AA  
                                 l1662 00BC                                   l1568 0408  
                                 l1824 0273                                   l1752 0167  
                                 l1760 018B                                   l1656 00AC  
                                 l1578 0494                                   l1834 028A  
                                 l1754 0173                                   l1746 0153  
                                 l1690 00EA                                   l1828 0287  
                                 l1772 01C5                                   l1780 01E6  
                                 l1668 00C7                                   l1774 01D8  
                                 l1766 0197                                   l1758 017F  
                                 l1782 01F5                                   l1694 00EE  
                                 l1792 020E                                   l1768 019A  
                                 STR_1 0321                                   STR_2 0329  
                                 STR_3 034F                                   STR_4 0331  
                                 STR_5 0339                                   STR_6 0349  
                                 STR_7 0341                                   STR_8 0329  
                                 STR_9 034F          __aqm0802_SendString@stringPtr 0020  
                                 u1315 0424                                   u1325 042E  
                                 u1335 0436                                   u1620 0205  
                                 u1295 041A                                   u1375 0092  
                                 u1635 0228                                   u1697 03C3  
                                 _TMR0 0015                                   _TMR2 001A  
                                 _main 0068                                   fsr0h 0005  
                                 fsr1h 0007                                   fsr0l 0004  
                                 indf0 0000                                   indf1 0001  
                                 fsr1l 0006                                   btemp 007E  
  __end_of__aqm0802_SendStringClearing 040E            __aqm0802_SendStringClearing 03D7  
                                 ltemp 007E                                   start 004D  
                                 ttemp 007E                                   wtemp 007E  
                         main@barImage 0034            __aqm0802_ClearRow@rowSelect 0021  
                        __CFG_PLLEN$ON 0000                                  ?_main 0070  
                           __@adBuffer 00A0                                  STR_10 0331  
                                STR_11 0339                                  STR_12 0318  
                        __CFG_WDTE$OFF 0000                        __end_of___lwdiv 0443  
                                i1l221 0049                     main@prevPortAState 0059  
                                _PORTA 000C                                  _TRISA 008C  
                                main@i 0038                                  main@j 003C  
         __size_of__aqm0802_Initialize 003C                                  ltemp0 007E  
                                ltemp1 0082                                  ltemp2 0086  
                                ltemp3 0080                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                status 0003                                  wtemp0 007E  
                                wtemp1 0080                                  wtemp2 0082  
                                wtemp3 0084                                  wtemp4 0086  
                                wtemp5 0088                                  wtemp6 007F  
              __aqm0802_ClearRow@count 0022                         __CFG_MCLRE$OFF 0000  
                      __initialization 004E                           __end_of_main 0296  
         __size_of__aqm0802_SendString 001F                                 ??_main 002A  
                               _ADRESH 009C                                 _ADRESL 009B  
                               _ANSELA 018C                                 i1l1524 0018  
                               i1l1542 0044                                 i1l1544 0045  
              ?__aqm0802_SendCharacter 0027                                 _TMR0IE 005D  
   __size_of__private_aqm0802_SendData 0027                              ??___lwdiv 0075  
       __end_of__aqm0802_SendCharacter 04C6                __end_of__initialization 0066  
    __end_of__private_aqm0802_SendData 046A                         __pcstackCOMMON 0070  
                         __pidataBANK0 04A4                         _OPTION_REGbits 0095  
                           __pbssBANK0 0050                             __pbssBANK1 00A0  
                           __pmaintext 0068                             __pintentry 0004  
                  __aqm0802_Initialize 039B   __size_of__aqm0802_SendStringClearing 0037  
                     main@compareUnits 030C                             __size_of__ 0049  
                              _MESSAGE 0300                         main@keyPressed 0037  
                              _SSP1ADD 0212                                _SSP1BUF 0211  
                              _SSPSTAT 0214                   ?__aqm0802_Initialize 0070  
                  __aqm0802_SendString 046A  __aqm0802_SendStringClearing@stringPtr 0020  
                              ___lwdiv 040E                   ?__aqm0802_SendString 0020  
                           _menuState_ 0050                             _initialize 0353  
                              __ptext1 0353                                __ptext2 03D7  
                              __ptext3 046A                                __ptext4 04B6  
                              __ptext5 039B                                __ptext6 0489  
                              __ptext7 0443                                __ptext8 040E  
                              _isHold_ 0055                              _T1CONbits 0018  
                            _T2CONbits 001C                                _events_ 0054  
                              clrloop0 04C7                  ??__aqm0802_Initialize 0020  
                 end_of_initialization 0066                     __end_of_ROW_SELECT 0318  
                              init_ram 04CC                                initloop 04CD  
                ??__aqm0802_SendString 0021                           __pstringtext 0300  
                     __CFG_FOSC$INTOSC 0000       __aqm0802_SendCharacter@character 0027  
                           main@string 002C                              __@adValue 0073  
                          ?_initialize 0070                           _MESSAGE_MENU 003E  
                  start_initialization 004E               __end_ofmain@compareUnits 0316  
         ?__aqm0802_SendStringClearing 0020             ?__private_aqm0802_SendData 0075  
                         _measureMode_ 0057                            __pdataBANK0 003E  
                          __pbssCOMMON 0077                              ___latbits 0000  
                        __pcstackBANK0 0020                              __end_of__ 004D  
                  __size_of_initialize 0048                       ___lwdiv@dividend 0022  
        ??__aqm0802_SendStringClearing 0022                               ?___lwdiv 0020  
                      main@compareUnit 0035               ??__aqm0802_SendCharacter 0028  
__private_aqm0802_SendData@controlByte 0076                       ___lwdiv@quotient 0025  
         __aqm0802_SendString@position 0022                              clear_ram0 04C6  
                             _PIE1bits 0091                               _PIR1bits 0011  
                            main@F2296 0048     __private_aqm0802_SendData@dataByte 0075  
      __aqm0802_SendStringClearing@col 0025                             _ADCON0bits 009D  
                           _ADCON1bits 009E                              main@i_661 003D  
                            main@digit 0039            __end_of__aqm0802_Initialize 03D7  
          __end_of__aqm0802_SendString 0489        __aqm0802_SendCharacter@position 0029  
                     __size_of___lwdiv 0035                      __aqm0802_ClearRow 0489  
                         ??_initialize 0075                     ?__aqm0802_ClearRow 0070  
                     __@bufferPostiion 0077        __size_of__aqm0802_SendCharacter 0010  
                      ___lwdiv@divisor 0020                        ___lwdiv@counter 0024  
                  ??__aqm0802_ClearRow 0020                           _SSP1CON1bits 0215  
                         _SSP1CON2bits 0216                          __size_of_main 022E  
                   __end_of_initialize 039B            ??__private_aqm0802_SendData 0076  
            __end_of__aqm0802_ClearRow 04A4   __aqm0802_SendStringClearing@position 0024  
                           _INTCONbits 000B                             _FVRCONbits 0117  
                             intlevel1 0000                 __aqm0802_SendCharacter 04B6  
                           _OSCCONbits 0099                       __@interruptCount 0078  
                          _portAState_ 0058                           _sumOfBuffer_ 0052  
            __private_aqm0802_SendData 0443                          _machineState_ 0056  
