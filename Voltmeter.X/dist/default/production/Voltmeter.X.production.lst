

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Aug 15 13:12:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  0011                     	;# 
    44  0012                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001C                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  008C                     	;# 
    57  0091                     	;# 
    58  0092                     	;# 
    59  0095                     	;# 
    60  0096                     	;# 
    61  0097                     	;# 
    62  0098                     	;# 
    63  0099                     	;# 
    64  009A                     	;# 
    65  009B                     	;# 
    66  009B                     	;# 
    67  009C                     	;# 
    68  009D                     	;# 
    69  009E                     	;# 
    70  010C                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0115                     	;# 
    74  0116                     	;# 
    75  0117                     	;# 
    76  0118                     	;# 
    77  0119                     	;# 
    78  011A                     	;# 
    79  011B                     	;# 
    80  011D                     	;# 
    81  011D                     	;# 
    82  018C                     	;# 
    83  0191                     	;# 
    84  0191                     	;# 
    85  0192                     	;# 
    86  0193                     	;# 
    87  0193                     	;# 
    88  0193                     	;# 
    89  0194                     	;# 
    90  0195                     	;# 
    91  0196                     	;# 
    92  0199                     	;# 
    93  019A                     	;# 
    94  019B                     	;# 
    95  019B                     	;# 
    96  019B                     	;# 
    97  019B                     	;# 
    98  019C                     	;# 
    99  019C                     	;# 
   100  019D                     	;# 
   101  019E                     	;# 
   102  019F                     	;# 
   103  020C                     	;# 
   104  0211                     	;# 
   105  0211                     	;# 
   106  0212                     	;# 
   107  0212                     	;# 
   108  0213                     	;# 
   109  0213                     	;# 
   110  0214                     	;# 
   111  0214                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0216                     	;# 
   116  0216                     	;# 
   117  0217                     	;# 
   118  0217                     	;# 
   119  0291                     	;# 
   120  0291                     	;# 
   121  0292                     	;# 
   122  0293                     	;# 
   123  0294                     	;# 
   124  0295                     	;# 
   125  0295                     	;# 
   126  0296                     	;# 
   127  0391                     	;# 
   128  0392                     	;# 
   129  0393                     	;# 
   130  039A                     	;# 
   131  039C                     	;# 
   132  039D                     	;# 
   133  039E                     	;# 
   134  039F                     	;# 
   135  0FE4                     	;# 
   136  0FE5                     	;# 
   137  0FE6                     	;# 
   138  0FE7                     	;# 
   139  0FE8                     	;# 
   140  0FE9                     	;# 
   141  0FEA                     	;# 
   142  0FEB                     	;# 
   143  0FED                     	;# 
   144  0FEE                     	;# 
   145  0FEF                     	;# 
   146                           
   147                           	psect	idataBANK0
   148  0631                     __pidataBANK0:	
   149                           
   150                           ;initializer for _MESSAGE_MENU
   151  0631  345A               	retlw	low (STR_9| (0+32768))
   152  0632  3484               	retlw	high (STR_9| (0+32768))
   153  0633  3442               	retlw	low (STR_2| (0+32768))
   154  0634  3484               	retlw	high (STR_2| (0+32768))
   155  0635  346E               	retlw	low (STR_11| (0+32768))
   156  0636  3484               	retlw	high (STR_11| (0+32768))
   157  0637  344A               	retlw	low (STR_4| (0+32768))
   158  0638  3484               	retlw	high (STR_4| (0+32768))
   159  0639  3462               	retlw	low (STR_5| (0+32768))
   160  063A  3484               	retlw	high (STR_5| (0+32768))
   161  063B  3452               	retlw	low (STR_7| (0+32768))
   162  063C  3484               	retlw	high (STR_7| (0+32768))
   163                           
   164                           ;initializer for _configuration_
   165  063D  343C               	retlw	60
   166                           
   167                           	psect	stringtext
   168  0400                     __pstringtext:	
   169  0400                     _MESSAGE:	
   170  0400  343A               	retlw	low (STR_1| (0+32768))
   171  0401  3484               	retlw	high (STR_1| (0+32768))
   172  0402  3442               	retlw	low (STR_2| (0+32768))
   173  0403  3484               	retlw	high (STR_2| (0+32768))
   174  0404  3428               	retlw	low (STR_3| (0+32768))
   175  0405  3484               	retlw	high (STR_3| (0+32768))
   176  0406  344A               	retlw	low (STR_4| (0+32768))
   177  0407  3484               	retlw	high (STR_4| (0+32768))
   178  0408  3462               	retlw	low (STR_5| (0+32768))
   179  0409  3484               	retlw	high (STR_5| (0+32768))
   180  040A  3431               	retlw	low (STR_6| (0+32768))
   181  040B  3484               	retlw	high (STR_6| (0+32768))
   182  040C  3452               	retlw	low (STR_7| (0+32768))
   183  040D  3484               	retlw	high (STR_7| (0+32768))
   184  040E  3468               	retlw	low (STR_8| (0+32768))
   185  040F  3484               	retlw	high (STR_8| (0+32768))
   186  0410                     __end_of_MESSAGE:	
   187  0410                     main@COMPARE_UNITS:	
   188  0410  3410               	retlw	16
   189  0411  3427               	retlw	39
   190  0412  34E8               	retlw	232
   191  0413  3403               	retlw	3
   192  0414  3464               	retlw	100
   193  0415  3400               	retlw	0
   194  0416  340A               	retlw	10
   195  0417  3400               	retlw	0
   196  0418  3401               	retlw	1
   197  0419  3400               	retlw	0
   198  041A                     __end_ofmain@COMPARE_UNITS:	
   199  041A                     main@OMPARE_UNITS_877:	
   200  041A  3464               	retlw	100
   201  041B  340A               	retlw	10
   202  041C  3401               	retlw	1
   203  041D                     __end_ofmain@OMPARE_UNITS_877:	
   204  041D                     _ROW_SELECT:	
   205  041D  3480               	retlw	128
   206  041E  34C0               	retlw	192
   207  041F                     __end_of_ROW_SELECT:	
   208  000B                     _INTCONbits	set	11
   209  0011                     _PIR1bits	set	17
   210  0012                     _PIR2bits	set	18
   211  000C                     _PORTA	set	12
   212  001B                     _PR2	set	27
   213  0018                     _T1CONbits	set	24
   214  001C                     _T2CONbits	set	28
   215  0015                     _TMR0	set	21
   216  001A                     _TMR2	set	26
   217  005D                     _TMR0IE	set	93
   218  005A                     _TMR0IF	set	90
   219  009D                     _ADCON0bits	set	157
   220  009E                     _ADCON1bits	set	158
   221  009C                     _ADRESH	set	156
   222  009B                     _ADRESL	set	155
   223  0095                     _OPTION_REGbits	set	149
   224  0099                     _OSCCONbits	set	153
   225  0091                     _PIE1bits	set	145
   226  008C                     _TRISA	set	140
   227  0097                     _WDTCONbits	set	151
   228  0117                     _FVRCONbits	set	279
   229  0192                     _EEADRH	set	402
   230  0191                     _EEADRL	set	401
   231  0195                     _EECON1bits	set	405
   232  0196                     _EECON2	set	406
   233  0194                     _EEDATH	set	404
   234  0193                     _EEDATL	set	403
   235  018C                     _ANSELA	set	396
   236  0212                     _SSP1ADD	set	530
   237  0211                     _SSP1BUF	set	529
   238  0215                     _SSP1CON1bits	set	533
   239  0216                     _SSP1CON2bits	set	534
   240  0214                     _SSPSTAT	set	532
   241  0393                     _IOCAFbits	set	915
   242  0392                     _IOCANbits	set	914
   243  041F                     STR_15:	
   244  041F  3420               	retlw	32	;' '
   245  0420  3430               	retlw	48	;'0'
   246  0421  3430               	retlw	48	;'0'
   247  0422  342E               	retlw	46	;'.'
   248  0423  3431               	retlw	49	;'1'
   249  0424  3431               	retlw	49	;'1'
   250  0425  3432               	retlw	50	;'2'
   251  0426  3420               	retlw	32	;' '
   252  0427  3400               	retlw	0
   253  0428                     STR_3:	
   254  0428  3420               	retlw	32	;' '
   255  0429  3432               	retlw	50	;'2'
   256  042A  3420               	retlw	32	;' '
   257  042B  3434               	retlw	52	;'4'
   258  042C  3420               	retlw	32	;' '
   259  042D  3436               	retlw	54	;'6'
   260  042E  3420               	retlw	32	;' '
   261  042F  3438               	retlw	56	;'8'
   262  0430  3400               	retlw	0
   263  0431                     STR_6:	
   264  0431  3420               	retlw	32	;' '
   265  0432  3420               	retlw	32	;' '
   266  0433  3420               	retlw	32	;' '
   267  0434  3420               	retlw	32	;' '
   268  0435  3420               	retlw	32	;' '
   269  0436  3473               	retlw	115	;'s'
   270  0437  3465               	retlw	101	;'e'
   271  0438  3463               	retlw	99	;'c'
   272  0439  3400               	retlw	0
   273  043A                     STR_1:	
   274  043A  3442               	retlw	66	;'B'
   275  043B  346F               	retlw	111	;'o'
   276  043C  346F               	retlw	111	;'o'
   277  043D  3474               	retlw	116	;'t'
   278  043E  342E               	retlw	46	;'.'
   279  043F  342E               	retlw	46	;'.'
   280  0440  342E               	retlw	46	;'.'
   281  0441  3400               	retlw	0
   282  0442                     STR_2:	
   283  0442  3456               	retlw	86	;'V'
   284  0443  346F               	retlw	111	;'o'
   285  0444  346C               	retlw	108	;'l'
   286  0445  3474               	retlw	116	;'t'
   287  0446  3461               	retlw	97	;'a'
   288  0447  3467               	retlw	103	;'g'
   289  0448  3465               	retlw	101	;'e'
   290  0449  3400               	retlw	0
   291  044A                     STR_4:	
   292  044A  3441               	retlw	65	;'A'
   293  044B  342F               	retlw	47	;'/'
   294  044C  3444               	retlw	68	;'D'
   295  044D  3420               	retlw	32	;' '
   296  044E  3456               	retlw	86	;'V'
   297  044F  3461               	retlw	97	;'a'
   298  0450  346C               	retlw	108	;'l'
   299  0451  3400               	retlw	0
   300  0452                     STR_7:	
   301  0452  3456               	retlw	86	;'V'
   302  0453  3465               	retlw	101	;'e'
   303  0454  3472               	retlw	114	;'r'
   304  0455  3473               	retlw	115	;'s'
   305  0456  3469               	retlw	105	;'i'
   306  0457  346F               	retlw	111	;'o'
   307  0458  346E               	retlw	110	;'n'
   308  0459  3400               	retlw	0
   309  045A                     STR_9:	
   310  045A  343C               	retlw	60	;'<'
   311  045B  3452               	retlw	82	;'R'
   312  045C  3465               	retlw	101	;'e'
   313  045D  3474               	retlw	116	;'t'
   314  045E  3475               	retlw	117	;'u'
   315  045F  3472               	retlw	114	;'r'
   316  0460  346E               	retlw	110	;'n'
   317  0461  3400               	retlw	0
   318  0462                     STR_5:	
   319  0462  3453               	retlw	83	;'S'
   320  0463  346C               	retlw	108	;'l'
   321  0464  3465               	retlw	101	;'e'
   322  0465  3465               	retlw	101	;'e'
   323  0466  3470               	retlw	112	;'p'
   324  0467  3400               	retlw	0
   325  0468                     STR_8:	
   326  0468  3445               	retlw	69	;'E'
   327  0469  3472               	retlw	114	;'r'
   328  046A  3472               	retlw	114	;'r'
   329  046B  346F               	retlw	111	;'o'
   330  046C  3472               	retlw	114	;'r'
   331  046D  3400               	retlw	0
   332  046E                     STR_11:	
   333  046E  3442               	retlw	66	;'B'
   334  046F  3461               	retlw	97	;'a'
   335  0470  3472               	retlw	114	;'r'
   336  0471  3400               	retlw	0
   337  0442                     
   338                           ; #config settings
   339  0000                     
   340                           	psect	cinit
   341  0093                     start_initialization:	
   342  0093                     __initialization:	
   343                           
   344                           ; Clear objects allocated to COMMON
   345  0093  01F5               	clrf	__pbssCOMMON& (0+127)
   346  0094  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   347  0095  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   348  0096  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   349                           
   350                           ; Clear objects allocated to BANK0
   351  0097  3040               	movlw	low __pbssBANK0
   352  0098  0084               	movwf	4
   353  0099  3000               	movlw	high __pbssBANK0
   354  009A  0085               	movwf	5
   355  009B  300D               	movlw	13
   356  009C  263E               	fcall	clear_ram0
   357                           
   358                           ; Clear objects allocated to BANK1
   359  009D  30A0               	movlw	low __pbssBANK1
   360  009E  0084               	movwf	4
   361  009F  3000               	movlw	high __pbssBANK1
   362  00A0  0085               	movwf	5
   363  00A1  3020               	movlw	32
   364  00A2  263E               	fcall	clear_ram0
   365                           
   366                           ; Initialize objects allocated to BANK0
   367  00A3  3031               	movlw	low __pidataBANK0
   368  00A4  0084               	movwf	4
   369  00A5  3086               	movlw	(high __pidataBANK0)| (0+128)
   370  00A6  0085               	movwf	5
   371  00A7  304D               	movlw	low __pdataBANK0
   372  00A8  0086               	movwf	6
   373  00A9  3000               	movlw	high __pdataBANK0
   374  00AA  0087               	movwf	7
   375  00AB  300D               	movlw	13
   376  00AC  2644               	fcall	init_ram
   377  00AD                     end_of_initialization:	
   378                           ;End of C runtime variable initialization code
   379                           
   380  00AD                     __end_of__initialization:	
   381  00AD  0020               	movlb	0
   382  00AE  28AF               	ljmp	_main	;jump to C main() function
   383                           
   384                           	psect	bssCOMMON
   385  0075                     __pbssCOMMON:	
   386  0075                     _keyCount_:	
   387  0075                     	ds	2
   388  0077                     __@bufferPostiion:	
   389  0077                     	ds	1
   390  0078                     __@interruptCount:	
   391  0078                     	ds	1
   392                           
   393                           	psect	bssBANK0
   394  0040                     __pbssBANK0:	
   395  0040                     _currentMessage_:	
   396  0040                     	ds	2
   397  0042                     _events_:	
   398  0042                     	ds	2
   399  0044                     _sleepTimer_:	
   400  0044                     	ds	2
   401  0046                     _sumOfBuffer_:	
   402  0046                     	ds	2
   403  0048                     _machineState_:	
   404  0048                     	ds	1
   405  0049                     _measureMode_:	
   406  0049                     	ds	1
   407  004A                     _menuState_:	
   408  004A                     	ds	1
   409  004B                     _portAState_:	
   410  004B                     	ds	1
   411  004C                     main@prevPortAState:	
   412  004C                     	ds	1
   413                           
   414                           	psect	dataBANK0
   415  004D                     __pdataBANK0:	
   416  004D                     _MESSAGE_MENU:	
   417  004D                     	ds	12
   418  0059                     _configuration_:	
   419  0059                     	ds	1
   420                           
   421                           	psect	bssBANK1
   422  00A0                     __pbssBANK1:	
   423  00A0                     _adBuffer_:	
   424  00A0                     	ds	32
   425                           
   426                           	psect	clrtext
   427  063E                     clear_ram0:	
   428                           ;	Called with FSR0 containing the base address, and
   429                           ;	WREG with the size to clear
   430                           
   431  063E  0064               	clrwdt	;clear the watchdog before getting into this loop
   432  063F                     clrloop0:	
   433  063F  0180               	clrf	0	;clear RAM location pointed to by FSR
   434  0640  3101               	addfsr 0,1
   435  0641  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   436  0642  2E3F               	goto	clrloop0	;have we reached the end yet?
   437  0643  3400               	retlw	0	;all done for this memory range, return
   438                           
   439                           	psect	inittext
   440  0644                     init_ram:	
   441  0644  00FE               	movwf	126
   442  0645                     initloop:	
   443  0645  0012               	moviw fsr0++
   444  0646  001E               	movwi fsr1++
   445  0647  0BFE               	decfsz	126,f
   446  0648  2E45               	goto	initloop
   447  0649  3400               	retlw	0
   448                           
   449                           	psect	cstackCOMMON
   450  0070                     __pcstackCOMMON:	
   451  0070                     ?_initialize:	
   452  0070                     ?_Configuration_Save:	
   453                           ; 0 bytes @ 0x0
   454                           
   455  0070                     ?_Configuration_Load:	
   456                           ; 0 bytes @ 0x0
   457                           
   458  0070                     ?__:	
   459                           ; 0 bytes @ 0x0
   460                           
   461  0070                     ??__:	
   462                           ; 0 bytes @ 0x0
   463                           
   464  0070                     ?_Configuration_ReadByte:	
   465                           ; 0 bytes @ 0x0
   466                           
   467  0070                     ?_AQM0802_ClearRow:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_AQM0802_Initialize:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_main:	
   474                           ; 1 bytes @ 0x0
   475                           
   476                           
   477                           ; 2 bytes @ 0x0
   478  0070                     	ds	3
   479  0073                     __@adValue:	
   480                           
   481                           ; 2 bytes @ 0x3
   482  0073                     	ds	2
   483  0075                     ??_AQM0802_SendData:	
   484  0075                     ??_Configuration_WriteByte:	
   485                           ; 0 bytes @ 0x5
   486                           
   487  0075                     ??_Configuration_ReadByte:	
   488                           ; 0 bytes @ 0x5
   489                           
   490  0075                     ??_initialize:	
   491                           ; 0 bytes @ 0x5
   492                           
   493  0075                     ??___wmul:	
   494                           ; 0 bytes @ 0x5
   495                           
   496                           
   497                           	psect	cstackBANK0
   498  0020                     __pcstackBANK0:	
   499                           ; 0 bytes @ 0x5
   500                           
   501  0020                     ?_Configuration_WriteByte:	
   502  0020                     ?_AQM0802_SendData:	
   503                           ; 0 bytes @ 0x0
   504                           
   505  0020                     ?___wmul:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0020                     AQM0802_SendData@dataByte:	
   509                           ; 2 bytes @ 0x0
   510                           
   511  0020                     Configuration_WriteByte@data:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0020                     Configuration_ReadByte@address:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0020                     ___wmul@multiplier:	
   518                           ; 1 bytes @ 0x0
   519                           
   520                           
   521                           ; 2 bytes @ 0x0
   522  0020                     	ds	1
   523  0021                     ??_Configuration_Load:	
   524  0021                     AQM0802_SendData@controlByte:	
   525                           ; 0 bytes @ 0x1
   526                           
   527  0021                     Configuration_WriteByte@address:	
   528                           ; 1 bytes @ 0x1
   529                           
   530                           
   531                           ; 1 bytes @ 0x1
   532  0021                     	ds	1
   533  0022                     ??_AQM0802_ClearRow:	
   534  0022                     ??_AQM0802_Initialize:	
   535                           ; 0 bytes @ 0x2
   536                           
   537  0022                     ??_Configuration_Save:	
   538                           ; 0 bytes @ 0x2
   539                           
   540  0022                     ?_AQM0802_SendString:	
   541                           ; 0 bytes @ 0x2
   542                           
   543  0022                     ?_AQM0802_SendStringClearing:	
   544                           ; 1 bytes @ 0x2
   545                           
   546  0022                     ?_AQM0802_SendCharacter:	
   547                           ; 1 bytes @ 0x2
   548                           
   549  0022                     AQM0802_SendString@stringPtr:	
   550                           ; 1 bytes @ 0x2
   551                           
   552  0022                     AQM0802_SendCharacter@character:	
   553                           ; 1 bytes @ 0x2
   554                           
   555  0022                     AQM0802_SendStringClearing@stringPtr:	
   556                           ; 1 bytes @ 0x2
   557                           
   558  0022                     ___wmul@multiplicand:	
   559                           ; 2 bytes @ 0x2
   560                           
   561                           
   562                           ; 2 bytes @ 0x2
   563  0022                     	ds	1
   564  0023                     ??_AQM0802_SendString:	
   565  0023                     ??_AQM0802_SendCharacter:	
   566                           ; 0 bytes @ 0x3
   567                           
   568  0023                     AQM0802_ClearRow@rowSelect:	
   569                           ; 0 bytes @ 0x3
   570                           
   571  0023                     Configuration_Load@ptrConfig:	
   572                           ; 1 bytes @ 0x3
   573                           
   574                           
   575                           ; 1 bytes @ 0x3
   576  0023                     	ds	1
   577  0024                     ??_AQM0802_SendStringClearing:	
   578  0024                     AQM0802_SendString@position:	
   579                           ; 0 bytes @ 0x4
   580                           
   581  0024                     AQM0802_SendCharacter@position:	
   582                           ; 1 bytes @ 0x4
   583                           
   584  0024                     AQM0802_ClearRow@count:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0024                     Configuration_Save@ptrConfig:	
   588                           ; 1 bytes @ 0x4
   589                           
   590  0024                     Configuration_Load@config:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0024                     ___wmul@product:	
   594                           ; 1 bytes @ 0x4
   595                           
   596                           
   597                           ; 2 bytes @ 0x4
   598  0024                     	ds	1
   599  0025                     Configuration_Save@config:	
   600  0025                     Configuration_Load@i:	
   601                           ; 1 bytes @ 0x5
   602                           
   603                           
   604                           ; 1 bytes @ 0x5
   605  0025                     	ds	1
   606  0026                     AQM0802_SendStringClearing@position:	
   607  0026                     Configuration_Save@i:	
   608                           ; 1 bytes @ 0x6
   609                           
   610                           
   611                           ; 1 bytes @ 0x6
   612  0026                     	ds	1
   613  0027                     AQM0802_SendStringClearing@col:	
   614                           
   615                           ; 1 bytes @ 0x7
   616  0027                     	ds	1
   617  0028                     ??_main:	
   618                           
   619                           ; 0 bytes @ 0x8
   620  0028                     	ds	2
   621  002A                     main@tmpValue:	
   622                           
   623                           ; 1 bytes @ 0xA
   624  002A                     	ds	1
   625  002B                     main@isNonZero:	
   626                           
   627                           ; 1 bytes @ 0xB
   628  002B                     	ds	1
   629  002C                     main@compareUnit:	
   630                           
   631                           ; 2 bytes @ 0xC
   632  002C                     	ds	2
   633  002E                     main@compareUnit_880:	
   634                           
   635                           ; 1 bytes @ 0xE
   636  002E                     	ds	1
   637  002F                     main@barImage:	
   638                           
   639                           ; 1 bytes @ 0xF
   640  002F                     	ds	1
   641  0030                     main@string:	
   642                           
   643                           ; 9 bytes @ 0x10
   644  0030                     	ds	9
   645  0039                     main@keyPressed:	
   646                           
   647                           ; 1 bytes @ 0x19
   648  0039                     	ds	1
   649  003A                     main@i:	
   650                           
   651                           ; 1 bytes @ 0x1A
   652  003A                     	ds	1
   653  003B                     main@currentAdValue:	
   654                           
   655                           ; 2 bytes @ 0x1B
   656  003B                     	ds	2
   657  003D                     main@i_872:	
   658                           
   659                           ; 1 bytes @ 0x1D
   660  003D                     	ds	1
   661  003E                     main@i_875:	
   662                           
   663                           ; 1 bytes @ 0x1E
   664  003E                     	ds	1
   665  003F                     main@i_879:	
   666                           
   667                           ; 1 bytes @ 0x1F
   668  003F                     	ds	1
   669                           
   670                           	psect	maintext
   671  00AF                     __pmaintext:	
   672 ;;
   673 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   674 ;;
   675 ;; *************** function _main *****************
   676 ;; Defined at:
   677 ;;		line 168 in file "src/main.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;  compareUnit     2   12[BANK0 ] unsigned int 
   682 ;;  i               1   30[BANK0 ] unsigned char 
   683 ;;  i               1   29[BANK0 ] unsigned char 
   684 ;;  compareUnit     1   14[BANK0 ] unsigned char 
   685 ;;  i               1   31[BANK0 ] unsigned char 
   686 ;;  isNonZero       1   11[BANK0 ] enum E2190
   687 ;;  tmpValue        1   10[BANK0 ] unsigned char 
   688 ;;  currentAdVal    2   27[BANK0 ] unsigned int 
   689 ;;  string          9   16[BANK0 ] unsigned char [9]
   690 ;;  keyPressed      1   25[BANK0 ] struct .
   691 ;;  i               1   26[BANK0 ] unsigned char 
   692 ;;  barImage        1   15[BANK0 ] unsigned char 
   693 ;; Return value:  Size  Location     Type
   694 ;;                  2  188[None  ] int 
   695 ;; Registers used:
   696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : B1F/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMMON   BANK0   BANK1
   702 ;;      Params:         0       0       0
   703 ;;      Locals:         0      22       0
   704 ;;      Temps:          0       2       0
   705 ;;      Totals:         0      24       0
   706 ;;Total ram usage:       24 bytes
   707 ;; Hardware stack levels required when called:    3
   708 ;; This function calls:
   709 ;;		_AQM0802_ClearRow
   710 ;;		_AQM0802_Initialize
   711 ;;		_AQM0802_SendCharacter
   712 ;;		_AQM0802_SendData
   713 ;;		_AQM0802_SendString
   714 ;;		_AQM0802_SendStringClearing
   715 ;;		_Configuration_Load
   716 ;;		_Configuration_Save
   717 ;;		___wmul
   718 ;;		_initialize
   719 ;; This function is called by:
   720 ;;		Startup code after reset
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           
   725                           ;psect for function _main
   726  00AF                     _main:	
   727                           
   728                           ;main.c: 170: initialize( ) ;
   729                           
   730                           ;incstack = 0
   731                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   732  00AF  2472               	fcall	_initialize
   733                           
   734                           ;main.c: 172: T2CONbits.TMR2ON = 1 ;
   735  00B0  0020               	movlb	0	; select bank0
   736  00B1  151C               	bsf	28,2	;volatile
   737  00B2                     l189:	
   738                           ;main.c: 174: while(!PIR1bits.TMR2IF); ;
   739                           
   740  00B2  1C91               	btfss	17,1	;volatile
   741  00B3  28B2               	goto	l189
   742                           
   743                           ;main.c: 176: T2CONbits.T2OUTPS = 0b0000 ;
   744  00B4  3087               	movlw	-121
   745  00B5  059C               	andwf	28,f	;volatile
   746                           
   747                           ;main.c: 177: PR2 = 7 ;
   748  00B6  3007               	movlw	7
   749  00B7  009B               	movwf	27	;volatile
   750                           
   751                           ;main.c: 179: TMR2=0x00;PIR1bits.TMR2IF=0; ;
   752  00B8  019A               	clrf	26	;volatile
   753  00B9  1091               	bcf	17,1	;volatile
   754                           
   755                           ;main.c: 181: AQM0802_Initialize( ) ;
   756  00BA  24C3               	fcall	_AQM0802_Initialize
   757                           
   758                           ;main.c: 182: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.BOOT ) ;
   759  00BB  3000               	movlw	low (_MESSAGE| (0+32768))
   760  00BC  0084               	movwf	4
   761  00BD  3084               	movlw	high (_MESSAGE| (0+32768))
   762  00BE  0085               	movwf	5
   763  00BF  3F00               	moviw [0]fsr0
   764  00C0  0020               	movlb	0	; select bank0
   765  00C1  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
   766  00C2  3F01               	moviw [1]fsr0
   767  00C3  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
   768  00C4  3080               	movlw	128
   769  00C5  24FF               	fcall	_AQM0802_SendStringClearing
   770                           
   771                           ;main.c: 185: AQM0802_SendData( 0x00 , 0x00 ) ;
   772  00C6  0020               	movlb	0	; select bank0
   773  00C7  01A0               	clrf	AQM0802_SendData@dataByte
   774  00C8  3000               	movlw	0
   775  00C9  255D               	fcall	_AQM0802_SendData
   776                           
   777                           ;main.c: 186: AQM0802_SendData( 0x00 , 0x40 ) ;
   778  00CA  3040               	movlw	64
   779  00CB  0020               	movlb	0	; select bank0
   780  00CC  00A8               	movwf	??_main
   781  00CD  0828               	movf	??_main,w
   782  00CE  00A0               	movwf	AQM0802_SendData@dataByte
   783  00CF  3000               	movlw	0
   784  00D0  255D               	fcall	_AQM0802_SendData
   785                           
   786                           ;main.c: 188: Uint08_t barImage = 0x40 ;
   787  00D1  3040               	movlw	64
   788  00D2  0020               	movlb	0	; select bank0
   789  00D3  00A8               	movwf	??_main
   790  00D4  0828               	movf	??_main,w
   791  00D5  00AF               	movwf	main@barImage
   792                           
   793                           ;main.c: 189: for( Uint08_t i = 0 ; i < 48 ; i++ ) {
   794  00D6  01BA               	clrf	main@i
   795  00D7  3030               	movlw	48
   796  00D8  023A               	subwf	main@i,w
   797  00D9  1803               	btfsc	3,0
   798  00DA  28F2               	goto	l2176
   799  00DB                     l2166:	
   800                           
   801                           ;main.c: 190: if( !( i & 0x07 ) )
   802  00DB  083A               	movf	main@i,w
   803  00DC  3907               	andlw	7
   804  00DD  1D03               	btfss	3,2
   805  00DE  28E3               	goto	l2170
   806                           
   807                           ;main.c: 191: barImage |= ( barImage >> 1 ) ;
   808  00DF  362F               	lsrf	main@barImage,w
   809  00E0  00A8               	movwf	??_main
   810  00E1  0828               	movf	??_main,w
   811  00E2  04AF               	iorwf	main@barImage,f
   812  00E3                     l2170:	
   813                           
   814                           ;main.c: 192: AQM0802_SendData( 0x40 , barImage ) ;
   815  00E3  082F               	movf	main@barImage,w
   816  00E4  00A8               	movwf	??_main
   817  00E5  0828               	movf	??_main,w
   818  00E6  00A0               	movwf	AQM0802_SendData@dataByte
   819  00E7  3040               	movlw	64
   820  00E8  255D               	fcall	_AQM0802_SendData
   821  00E9  3001               	movlw	1
   822  00EA  0020               	movlb	0	; select bank0
   823  00EB  00A8               	movwf	??_main
   824  00EC  0828               	movf	??_main,w
   825  00ED  07BA               	addwf	main@i,f
   826  00EE  3030               	movlw	48
   827  00EF  023A               	subwf	main@i,w
   828  00F0  1C03               	skipc
   829  00F1  28DB               	goto	l2166
   830  00F2                     l2176:	
   831                           
   832                           ;main.c: 193: }
   833                           ;main.c: 195: Configuration_Load( &configuration_ ) ;
   834  00F2  3059               	movlw	(low (_configuration_| 0))& (0+255)
   835  00F3  2584               	fcall	_Configuration_Load
   836                           
   837                           ;main.c: 197: machineState_ = STATE_MEASURE ;
   838  00F4  0020               	movlb	0	; select bank0
   839  00F5  01C8               	clrf	_machineState_
   840  00F6  0AC8               	incf	_machineState_,f
   841                           
   842                           ;main.c: 198: currentMessage_ = MESSAGE.VOLTAGE ;
   843  00F7  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
   844  00F8  0084               	movwf	4
   845  00F9  3084               	movlw	high ((_MESSAGE+2)| (0+32768))
   846  00FA  0085               	movwf	5
   847  00FB  3F00               	moviw [0]fsr0
   848  00FC  00C0               	movwf	_currentMessage_
   849  00FD  3F01               	moviw [1]fsr0
   850  00FE  00C1               	movwf	_currentMessage_+1
   851                           
   852                           ;main.c: 199: events_.output.changeMessage=1 ;
   853  00FF  1643               	bsf	_events_+1,4
   854                           
   855                           ;main.c: 202: TMR0IF = 0 ;
   856  0100  110B               	bcf	11,2	;volatile
   857                           
   858                           ;main.c: 203: TMR0IE = 1 ;
   859  0101  168B               	bsf	11,5	;volatile
   860                           
   861                           ;main.c: 204: WDTCONbits.SWDTEN = 1 ;
   862  0102  0021               	movlb	1	; select bank1
   863  0103  1417               	bsf	23,0	;volatile
   864  0104                     l195:	
   865                           ;main.c: 207: for( ; ; ) {
   866                           
   867  0104  0064               	clrwdt	;# 
   868                           
   869                           ;main.c: 213: if( (events_.output.sleep&&!(events_.output.sleep=0)) ) {
   870  0105  0020               	movlb	0	; select bank0
   871  0106  1EC3               	btfss	_events_+1,5
   872  0107  2920               	goto	l2210
   873  0108  12C3               	bcf	_events_+1,5
   874                           
   875                           ;main.c: 214: if( machineState_ != STATE_SLEEP ) {
   876  0109  3005               	movlw	5
   877  010A  0648               	xorwf	_machineState_,w
   878  010B  1903               	btfsc	3,2
   879  010C  2911               	goto	l2198
   880                           
   881                           ;main.c: 215: AQM0802_ClearRow( ROW_SELECT_0 ) ;
   882  010D  3080               	movlw	128
   883  010E  25DF               	fcall	_AQM0802_ClearRow
   884                           
   885                           ;main.c: 216: AQM0802_ClearRow( ROW_SELECT_1 ) ;
   886  010F  30C0               	movlw	192
   887  0110  25DF               	fcall	_AQM0802_ClearRow
   888  0111                     l2198:	
   889                           
   890                           ;main.c: 217: }
   891                           ;main.c: 218: WDTCONbits.SWDTEN = 0 ;
   892  0111  0021               	movlb	1	; select bank1
   893  0112  1017               	bcf	23,0	;volatile
   894                           
   895                           ;main.c: 219: INTCONbits.TMR0IE = 0 ;
   896  0113  128B               	bcf	11,5	;volatile
   897                           
   898                           ;main.c: 220: INTCONbits.IOCIF = 0 ;
   899  0114  100B               	bcf	11,0	;volatile
   900                           
   901                           ;main.c: 221: INTCONbits.IOCIE = 1 ;
   902  0115  158B               	bsf	11,3	;volatile
   903                           
   904                           ;main.c: 222: sleepTimer_ = 100 ;
   905  0116  3064               	movlw	100
   906  0117  0020               	movlb	0	; select bank0
   907  0118  00C4               	movwf	_sleepTimer_
   908  0119  3000               	movlw	0
   909  011A  00C5               	movwf	_sleepTimer_+1
   910                           
   911                           ;main.c: 223: machineState_ = STATE_SLEEP ;
   912  011B  3005               	movlw	5
   913  011C  00A8               	movwf	??_main
   914  011D  0828               	movf	??_main,w
   915  011E  00C8               	movwf	_machineState_
   916  011F  0063               	sleep	;# 
   917  0120                     l2210:	
   918                           
   919                           ;main.c: 225: }
   920                           ;main.c: 228: if( (events_.output.wake&&!(events_.output.wake=0)) ) {
   921  0120  0020               	movlb	0	; select bank0
   922  0121  1F43               	btfss	_events_+1,6
   923  0122  293C               	goto	l2220
   924  0123  1343               	bcf	_events_+1,6
   925                           
   926                           ;main.c: 229: if( machineState_ == STATE_SLEEP ) {
   927  0124  3005               	movlw	5
   928  0125  0648               	xorwf	_machineState_,w
   929  0126  1D03               	btfss	3,2
   930  0127  292B               	goto	l2218
   931                           
   932                           ;main.c: 230: machineState_ = STATE_MEASURE ;
   933  0128  01C8               	clrf	_machineState_
   934  0129  0AC8               	incf	_machineState_,f
   935                           
   936                           ;main.c: 231: events_.output.changeMessage=1 ;
   937  012A  1643               	bsf	_events_+1,4
   938  012B                     l2218:	
   939                           
   940                           ;main.c: 232: }
   941                           ;main.c: 233: sleepTimer_ = configuration_.sleepTime * 100 ;
   942  012B  0859               	movf	_configuration_,w
   943  012C  00A8               	movwf	??_main
   944  012D  01A9               	clrf	??_main+1
   945  012E  0828               	movf	??_main,w
   946  012F  00A0               	movwf	___wmul@multiplier
   947  0130  0829               	movf	??_main+1,w
   948  0131  00A1               	movwf	___wmul@multiplier+1
   949  0132  3064               	movlw	100
   950  0133  00A2               	movwf	___wmul@multiplicand
   951  0134  3000               	movlw	0
   952  0135  00A3               	movwf	___wmul@multiplicand+1
   953  0136  25C3               	fcall	___wmul
   954  0137  0020               	movlb	0	; select bank0
   955  0138  0821               	movf	?___wmul+1,w
   956  0139  00C5               	movwf	_sleepTimer_+1
   957  013A  0820               	movf	?___wmul,w
   958  013B  00C4               	movwf	_sleepTimer_
   959  013C                     l2220:	
   960                           
   961                           ;main.c: 234: }
   962                           ;main.c: 237: static UniPortA prevPortAState = { 0x00 } ;
   963                           ;main.c: 238: UniPortA keyPressed ;
   964                           ;main.c: 240: keyPressed.byte = ( portAState_.byte ^ prevPortAState.byte ) & portAState_
      +                          .byte ;
   965  013C  084B               	movf	_portAState_,w
   966  013D  064C               	xorwf	main@prevPortAState,w
   967  013E  054B               	andwf	_portAState_,w
   968  013F  00A8               	movwf	??_main
   969  0140  0828               	movf	??_main,w
   970  0141  00B9               	movwf	main@keyPressed
   971                           
   972                           ;main.c: 241: prevPortAState.byte = portAState_.byte ;
   973  0142  084B               	movf	_portAState_,w
   974  0143  00A8               	movwf	??_main
   975  0144  0828               	movf	??_main,w
   976  0145  00CC               	movwf	main@prevPortAState
   977                           
   978                           ;main.c: 243: if( keyPressed.menu )
   979  0146  19B9               	btfsc	main@keyPressed,3
   980                           
   981                           ;main.c: 244: events_.input.keyPressMenu=1 ;
   982  0147  1442               	bsf	_events_,0
   983                           
   984                           ;main.c: 246: if( keyPressed.up ) {
   985  0148  1AB9               	btfsc	main@keyPressed,5
   986                           
   987                           ;main.c: 250: events_.input.keyPressUp=1 ;
   988  0149  14C2               	bsf	_events_,1
   989                           
   990                           ;main.c: 251: }
   991                           ;main.c: 252: if( keyPressed.down ) {
   992  014A  1839               	btfsc	main@keyPressed,0
   993                           
   994                           ;main.c: 256: events_.input.keyPressDown=1 ;
   995  014B  1542               	bsf	_events_,2
   996                           
   997                           ;main.c: 257: }
   998                           ;main.c: 259: if( (events_.output.error&&!(events_.output.error=0)) ) {
   999  014C  1FC3               	btfss	_events_+1,7
  1000  014D  2954               	goto	l2238
  1001  014E  13C3               	bcf	_events_+1,7
  1002                           
  1003                           ;main.c: 260: machineState_ = STATE_ERROR ;
  1004  014F  3006               	movlw	6
  1005  0150  00A8               	movwf	??_main
  1006  0151  0828               	movf	??_main,w
  1007  0152  00C8               	movwf	_machineState_
  1008                           
  1009                           ;main.c: 261: events_.output.changeMessage=1 ;
  1010  0153  1643               	bsf	_events_+1,4
  1011  0154                     l2238:	
  1012                           
  1013                           ;main.c: 262: }
  1014                           ;main.c: 265: if( (events_.input.keyPressMenu&&!(events_.input.keyPressMenu=0)) ) {
  1015  0154  1C42               	btfss	_events_,0
  1016  0155  2A04               	goto	l2316
  1017  0156  1042               	bcf	_events_,0
  1018                           
  1019                           ;main.c: 267: events_.output.changeMessage=1 ;
  1020  0157  1643               	bsf	_events_+1,4
  1021                           
  1022                           ;main.c: 269: switch( machineState_ ) {
  1023  0158  299D               	goto	l2268
  1024  0159                     l2242:	
  1025                           ;main.c: 271: case STATE_MEASURE:
  1026                           
  1027                           
  1028                           ;main.c: 272: machineState_ = STATE_MENU ;
  1029  0159  3002               	movlw	2
  1030  015A  2999               	goto	L5
  1031  015B                     l210:	
  1032                           ;main.c: 275: case STATE_MENU:
  1033                           
  1034                           ;main.c: 273: break ;
  1035                           
  1036                           
  1037                           ;main.c: 276: machineState_ = STATE_MEASURE ;
  1038  015B  01C8               	clrf	_machineState_
  1039  015C  0AC8               	incf	_machineState_,f
  1040                           
  1041                           ;main.c: 278: switch( menuState_.select ) {
  1042  015D  2982               	goto	l2260
  1043  015E                     l2244:	
  1044                           ;main.c: 279: case MENU_VOLTAGE:
  1045                           
  1046                           
  1047                           ;main.c: 280: measureMode_ = MEASURE_MODE_VOLTAGE ;
  1048  015E  01C9               	clrf	_measureMode_
  1049                           
  1050                           ;main.c: 281: currentMessage_ = MESSAGE.VOLTAGE ;
  1051  015F  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
  1052  0160  0084               	movwf	4
  1053  0161  3084               	movlw	high ((_MESSAGE+2)| (0+32768))
  1054  0162  0085               	movwf	5
  1055  0163  3F00               	moviw [0]fsr0
  1056  0164  00C0               	movwf	_currentMessage_
  1057  0165  3F01               	moviw [1]fsr0
  1058  0166  297C               	goto	L3
  1059  0167                     l2248:	
  1060                           ;main.c: 284: case MENU_BAR:
  1061                           
  1062                           ;main.c: 282: break ;
  1063                           
  1064                           
  1065                           ;main.c: 285: measureMode_ = MEASURE_MODE_BAR ;
  1066  0167  3002               	movlw	2
  1067  0168  00A8               	movwf	??_main
  1068  0169  0828               	movf	??_main,w
  1069  016A  00C9               	movwf	_measureMode_
  1070                           
  1071                           ;main.c: 286: currentMessage_ = MESSAGE.BAR ;
  1072  016B  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
  1073  016C  0084               	movwf	4
  1074  016D  3084               	movlw	high ((_MESSAGE+4)| (0+32768))
  1075  016E  0085               	movwf	5
  1076  016F  3F00               	moviw [0]fsr0
  1077  0170  00C0               	movwf	_currentMessage_
  1078  0171  3F01               	moviw [1]fsr0
  1079  0172  297C               	goto	L3
  1080  0173                     l215:	
  1081                           ;main.c: 289: case MENU_AD_VALUE:
  1082                           
  1083                           ;main.c: 287: break ;
  1084                           
  1085                           
  1086                           ;main.c: 290: measureMode_ = MEASURE_MODE_AD_VALUE ;
  1087  0173  01C9               	clrf	_measureMode_
  1088  0174  0AC9               	incf	_measureMode_,f
  1089                           
  1090                           ;main.c: 291: currentMessage_ = MESSAGE.AD_VALUE ;
  1091  0175  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
  1092  0176  0084               	movwf	4
  1093  0177  3084               	movlw	high ((_MESSAGE+6)| (0+32768))
  1094  0178  0085               	movwf	5
  1095  0179  3F00               	moviw [0]fsr0
  1096  017A  00C0               	movwf	_currentMessage_
  1097  017B  3F01               	moviw [1]fsr0
  1098  017C                     L3:	
  1099  017C  00C1               	movwf	_currentMessage_+1
  1100                           
  1101                           ;main.c: 292: break ;
  1102  017D  2A04               	goto	l2316
  1103  017E                     l2254:	
  1104                           ;main.c: 294: case MENU_SLEEP:
  1105                           
  1106                           
  1107                           ;main.c: 295: machineState_ = STATE_ADJUST_SLEEP_TIME ;
  1108  017E  3004               	movlw	4
  1109  017F  2999               	goto	L5
  1110  0180                     l2256:	
  1111                           ;main.c: 298: case MENU_VERSION:
  1112                           
  1113                           ;main.c: 296: break ;
  1114                           
  1115                           
  1116                           ;main.c: 299: machineState_ = STATE_VERSION ;
  1117  0180  3003               	movlw	3
  1118  0181  2999               	goto	L5
  1119  0182                     l2260:	
  1120                           ;main.c: 301: }
  1121                           
  1122                           ;main.c: 300: break ;
  1123                           
  1124  0182  084A               	movf	_menuState_,w
  1125  0183  397F               	andlw	127
  1126                           
  1127                           ; Switch size 1, requested type "space"
  1128                           ; Number of cases is 5, Range of values is 1 to 5
  1129                           ; switch strategies available:
  1130                           ; Name         Instructions Cycles
  1131                           ; simple_byte           16     9 (average)
  1132                           ; direct_byte           19     9 (fixed)
  1133                           ; jumptable            263     9 (fixed)
  1134                           ;	Chosen strategy is simple_byte
  1135  0184  3A01               	xorlw	1	; case 1
  1136  0185  1903               	skipnz
  1137  0186  295E               	goto	l2244
  1138  0187  3A03               	xorlw	3	; case 2
  1139  0188  1903               	skipnz
  1140  0189  2967               	goto	l2248
  1141  018A  3A01               	xorlw	1	; case 3
  1142  018B  1903               	skipnz
  1143  018C  2973               	goto	l215
  1144  018D  3A07               	xorlw	7	; case 4
  1145  018E  1903               	skipnz
  1146  018F  297E               	goto	l2254
  1147  0190  3A01               	xorlw	1	; case 5
  1148  0191  1903               	skipnz
  1149  0192  2980               	goto	l2256
  1150  0193  2A04               	goto	l2316
  1151                           
  1152                           ;main.c: 302: break ;
  1153  0194  2A04               	goto	l2316
  1154  0195                     l2262:	
  1155                           ;main.c: 304: case STATE_ADJUST_SLEEP_TIME:
  1156                           
  1157                           
  1158                           ;main.c: 305: Configuration_Save( &configuration_ ) ;
  1159  0195  3059               	movlw	(low (_configuration_| 0))& (0+255)
  1160  0196  2536               	fcall	_Configuration_Save
  1161  0197                     l2264:	
  1162                           ;main.c: 306: case STATE_VERSION:
  1163                           
  1164                           
  1165                           ;main.c: 307: machineState_ = STATE_MENU ;
  1166  0197  3002               	movlw	2
  1167  0198  0020               	movlb	0	; select bank0
  1168  0199                     L5:	
  1169  0199  00A8               	movwf	??_main
  1170  019A  0828               	movf	??_main,w
  1171  019B  00C8               	movwf	_machineState_
  1172                           
  1173                           ;main.c: 309: }
  1174                           
  1175                           ;main.c: 308: break ;
  1176  019C  2A04               	goto	l2316
  1177  019D                     l2268:	
  1178  019D  0848               	movf	_machineState_,w
  1179                           
  1180                           ; Switch size 1, requested type "space"
  1181                           ; Number of cases is 4, Range of values is 1 to 4
  1182                           ; switch strategies available:
  1183                           ; Name         Instructions Cycles
  1184                           ; simple_byte           13     7 (average)
  1185                           ; direct_byte           17     9 (fixed)
  1186                           ; jumptable            263     9 (fixed)
  1187                           ;	Chosen strategy is simple_byte
  1188  019E  3A01               	xorlw	1	; case 1
  1189  019F  1903               	skipnz
  1190  01A0  2959               	goto	l2242
  1191  01A1  3A03               	xorlw	3	; case 2
  1192  01A2  1903               	skipnz
  1193  01A3  295B               	goto	l210
  1194  01A4  3A01               	xorlw	1	; case 3
  1195  01A5  1903               	skipnz
  1196  01A6  2997               	goto	l2264
  1197  01A7  3A07               	xorlw	7	; case 4
  1198  01A8  1903               	skipnz
  1199  01A9  2995               	goto	l2262
  1200  01AA  2A04               	goto	l2316
  1201                           
  1202                           ;main.c: 310: }
  1203                           ;main.c: 313: switch( machineState_ ) {
  1204  01AB  2A04               	goto	l2316
  1205  01AC                     l221:	
  1206                           ;main.c: 315: case STATE_MENU:
  1207                           
  1208                           
  1209                           ;main.c: 316: if( (events_.input.keyPressUp&&!(events_.input.keyPressUp=0)) ) {
  1210  01AC  1CC2               	btfss	_events_,1
  1211  01AD  29CD               	goto	l2282
  1212  01AE  10C2               	bcf	_events_,1
  1213                           
  1214                           ;main.c: 317: if( menuState_.select != 0 ) {
  1215  01AF  084A               	movf	_menuState_,w
  1216  01B0  397F               	andlw	127
  1217  01B1  3A00               	xorlw	0
  1218  01B2  1903               	skipnz
  1219  01B3  29CD               	goto	l2282
  1220                           
  1221                           ;main.c: 318: menuState_.select-- ;
  1222  01B4  084A               	movf	_menuState_,w
  1223  01B5  397F               	andlw	127
  1224  01B6  00A8               	movwf	??_main
  1225  01B7  03A8               	decf	??_main,f
  1226  01B8  084A               	movf	_menuState_,w
  1227  01B9  0628               	xorwf	??_main,w
  1228  01BA  3980               	andlw	-128
  1229  01BB  0628               	xorwf	??_main,w
  1230  01BC  00CA               	movwf	_menuState_
  1231                           
  1232                           ;main.c: 319: if( menuState_.cursor != 0 ) menuState_.cursor-- ;
  1233  01BD  1FCA               	btfss	_menuState_,7
  1234  01BE  29CC               	goto	l2280
  1235  01BF  0D4A               	rlf	_menuState_,w
  1236  01C0  0D4A               	rlf	_menuState_,w
  1237  01C1  3901               	andlw	1
  1238  01C2  00A8               	movwf	??_main
  1239  01C3  3001               	movlw	1
  1240  01C4  06A8               	xorwf	??_main,f
  1241  01C5  0CA8               	rrf	??_main,f
  1242  01C6  0CA8               	rrf	??_main,f
  1243  01C7  084A               	movf	_menuState_,w
  1244  01C8  0628               	xorwf	??_main,w
  1245  01C9  397F               	andlw	-129
  1246  01CA  0628               	xorwf	??_main,w
  1247  01CB  00CA               	movwf	_menuState_
  1248  01CC                     l2280:	
  1249                           
  1250                           ;main.c: 320: events_.output.changeMessage=1 ;
  1251  01CC  1643               	bsf	_events_+1,4
  1252  01CD                     l2282:	
  1253                           
  1254                           ;main.c: 321: }
  1255                           ;main.c: 322: }
  1256                           ;main.c: 323: if( (events_.input.keyPressDown&&!(events_.input.keyPressDown=0)) ) {
  1257  01CD  1D42               	btfss	_events_,2
  1258  01CE  2A0C               	goto	l228
  1259  01CF  1142               	bcf	_events_,2
  1260                           
  1261                           ;main.c: 324: if( menuState_.select != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU
      +                          [0] ) ) - 1 ) ) {
  1262  01D0  084A               	movf	_menuState_,w
  1263  01D1  397F               	andlw	127
  1264  01D2  3A05               	xorlw	5
  1265  01D3  1903               	skipnz
  1266  01D4  2A0C               	goto	l228
  1267                           
  1268                           ;main.c: 325: menuState_.select++ ;
  1269  01D5  084A               	movf	_menuState_,w
  1270  01D6  397F               	andlw	127
  1271  01D7  00A8               	movwf	??_main
  1272  01D8  0AA8               	incf	??_main,f
  1273  01D9  084A               	movf	_menuState_,w
  1274  01DA  0628               	xorwf	??_main,w
  1275  01DB  3980               	andlw	-128
  1276  01DC  0628               	xorwf	??_main,w
  1277  01DD  00CA               	movwf	_menuState_
  1278                           
  1279                           ;main.c: 326: if( menuState_.cursor != 1 ) menuState_.cursor++ ;
  1280  01DE  1BCA               	btfsc	_menuState_,7
  1281  01DF  29ED               	goto	l2294
  1282  01E0  0D4A               	rlf	_menuState_,w
  1283  01E1  0D4A               	rlf	_menuState_,w
  1284  01E2  3901               	andlw	1
  1285  01E3  00A8               	movwf	??_main
  1286  01E4  3001               	movlw	1
  1287  01E5  06A8               	xorwf	??_main,f
  1288  01E6  0CA8               	rrf	??_main,f
  1289  01E7  0CA8               	rrf	??_main,f
  1290  01E8  084A               	movf	_menuState_,w
  1291  01E9  0628               	xorwf	??_main,w
  1292  01EA  397F               	andlw	-129
  1293  01EB  0628               	xorwf	??_main,w
  1294  01EC  00CA               	movwf	_menuState_
  1295  01ED                     l2294:	
  1296                           
  1297                           ;main.c: 327: events_.output.changeMessage=1 ;
  1298  01ED  1643               	bsf	_events_+1,4
  1299                           
  1300                           ;main.c: 328: }
  1301                           ;main.c: 329: }
  1302                           ;main.c: 330: break ;
  1303  01EE  2A0C               	goto	l228
  1304  01EF                     l229:	
  1305                           ;main.c: 332: case STATE_ADJUST_SLEEP_TIME:
  1306                           
  1307                           
  1308                           ;main.c: 333: if( (events_.input.keyPressUp&&!(events_.input.keyPressUp=0)) ) {
  1309  01EF  1CC2               	btfss	_events_,1
  1310  01F0  29FA               	goto	l2304
  1311  01F1  10C2               	bcf	_events_,1
  1312                           
  1313                           ;main.c: 334: if( configuration_.sleepTime != 255 ) {
  1314  01F2  0A59               	incf	_configuration_,w
  1315  01F3  1903               	btfsc	3,2
  1316  01F4  29FA               	goto	l2304
  1317                           
  1318                           ;main.c: 335: configuration_.sleepTime++ ;
  1319  01F5  3001               	movlw	1
  1320  01F6  00A8               	movwf	??_main
  1321  01F7  0828               	movf	??_main,w
  1322  01F8  07D9               	addwf	_configuration_,f
  1323                           
  1324                           ;main.c: 336: events_.output.changeValue=1 ;
  1325  01F9  15C3               	bsf	_events_+1,3
  1326  01FA                     l2304:	
  1327                           
  1328                           ;main.c: 337: }
  1329                           ;main.c: 338: }
  1330                           ;main.c: 339: if( (events_.input.keyPressDown&&!(events_.input.keyPressDown=0)) ) {
  1331  01FA  1D42               	btfss	_events_,2
  1332  01FB  2A0C               	goto	l228
  1333  01FC  1142               	bcf	_events_,2
  1334                           
  1335                           ;main.c: 340: if( configuration_.sleepTime != 1 ) {
  1336  01FD  0359               	decf	_configuration_,w
  1337  01FE  1903               	btfsc	3,2
  1338  01FF  2A0C               	goto	l228
  1339                           
  1340                           ;main.c: 341: configuration_.sleepTime-- ;
  1341  0200  3001               	movlw	1
  1342  0201  02D9               	subwf	_configuration_,f
  1343                           
  1344                           ;main.c: 342: events_.output.changeValue=1 ;
  1345  0202  15C3               	bsf	_events_+1,3
  1346                           
  1347                           ;main.c: 347: }
  1348                           
  1349                           ;main.c: 343: }
  1350                           ;main.c: 344: }
  1351                           ;main.c: 346: break ;
  1352  0203  2A0C               	goto	l228
  1353  0204                     l2316:	
  1354  0204  0848               	movf	_machineState_,w
  1355                           
  1356                           ; Switch size 1, requested type "space"
  1357                           ; Number of cases is 2, Range of values is 2 to 4
  1358                           ; switch strategies available:
  1359                           ; Name         Instructions Cycles
  1360                           ; simple_byte            7     4 (average)
  1361                           ; direct_byte           15     9 (fixed)
  1362                           ; jumptable            263     9 (fixed)
  1363                           ;	Chosen strategy is simple_byte
  1364  0205  3A02               	xorlw	2	; case 2
  1365  0206  1903               	skipnz
  1366  0207  29AC               	goto	l221
  1367  0208  3A06               	xorlw	6	; case 4
  1368  0209  1903               	skipnz
  1369  020A  29EF               	goto	l229
  1370  020B  2A0C               	goto	l228
  1371  020C                     l228:	
  1372                           
  1373                           ;main.c: 350: if( (events_.output.changeMessage&&!(events_.output.changeMessage=0)) ) {
  1374  020C  1E43               	btfss	_events_+1,4
  1375  020D  2A9D               	goto	l234
  1376  020E  1243               	bcf	_events_+1,4
  1377                           
  1378                           ;main.c: 351: switch( machineState_ ) {
  1379  020F  2A8B               	goto	l2342
  1380  0210                     l2320:	
  1381                           ;main.c: 353: case STATE_MEASURE:
  1382                           
  1383                           
  1384                           ;main.c: 354: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , currentMessage_ ) ;
  1385  0210  0840               	movf	_currentMessage_,w
  1386  0211  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1387  0212  0841               	movf	_currentMessage_+1,w
  1388  0213  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1389  0214  3080               	movlw	128
  1390  0215  24FF               	fcall	_AQM0802_SendStringClearing
  1391                           
  1392                           ;main.c: 355: AQM0802_ClearRow( ROW_SELECT_1 ) ;
  1393  0216  30C0               	movlw	192
  1394  0217  25DF               	fcall	_AQM0802_ClearRow
  1395  0218  2A68               	goto	l2332
  1396  0219                     l2326:	
  1397                           ;main.c: 360: case STATE_MENU:
  1398                           
  1399                           ;main.c: 358: break ;
  1400                           
  1401                           ;main.c: 357: events_.output.changeValue=1 ;
  1402                           
  1403                           
  1404                           ;main.c: 361: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x1 , MESSAGE_MENU[ menuState_.
      +                          select - menuState_.cursor ] ) ;
  1405  0219  084A               	movf	_menuState_,w
  1406  021A  397F               	andlw	127
  1407  021B  00A8               	movwf	??_main
  1408  021C  0D4A               	rlf	_menuState_,w
  1409  021D  0D4A               	rlf	_menuState_,w
  1410  021E  3901               	andlw	1
  1411  021F  3AFF               	xorlw	255
  1412  0220  3E01               	addlw	1
  1413  0221  0728               	addwf	??_main,w
  1414  0222  0709               	addwf	9,w
  1415  0223  3E4D               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  1416  0224  0086               	movwf	6
  1417  0225  0187               	clrf	7
  1418  0226  3F40               	moviw [0]fsr1
  1419  0227  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1420  0228  3F41               	moviw [1]fsr1
  1421  0229  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1422  022A  3081               	movlw	129
  1423  022B  24FF               	fcall	_AQM0802_SendStringClearing
  1424                           
  1425                           ;main.c: 362: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x1 , MESSAGE_MENU[ menuState_.
      +                          select - menuState_.cursor + 1 ] ) ;
  1426  022C  0020               	movlb	0	; select bank0
  1427  022D  084A               	movf	_menuState_,w
  1428  022E  397F               	andlw	127
  1429  022F  00A8               	movwf	??_main
  1430  0230  0D4A               	rlf	_menuState_,w
  1431  0231  0D4A               	rlf	_menuState_,w
  1432  0232  3901               	andlw	1
  1433  0233  3AFF               	xorlw	255
  1434  0234  3E01               	addlw	1
  1435  0235  0728               	addwf	??_main,w
  1436  0236  0709               	addwf	9,w
  1437  0237  3E02               	addlw	2
  1438  0238  3E4D               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  1439  0239  0086               	movwf	6
  1440  023A  0187               	clrf	7
  1441  023B  3F40               	moviw [0]fsr1
  1442  023C  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1443  023D  3F41               	moviw [1]fsr1
  1444  023E  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1445  023F  30C1               	movlw	193
  1446  0240  24FF               	fcall	_AQM0802_SendStringClearing
  1447                           
  1448                           ;main.c: 363: AQM0802_SendCharacter( ROW_SELECT[ menuState_.cursor ] | 0x0 , 0x07 ) ;
  1449  0241  3007               	movlw	7
  1450  0242  0020               	movlb	0	; select bank0
  1451  0243  00A8               	movwf	??_main
  1452  0244  0828               	movf	??_main,w
  1453  0245  00A2               	movwf	AQM0802_SendCharacter@character
  1454  0246  0D4A               	rlf	_menuState_,w
  1455  0247  0D4A               	rlf	_menuState_,w
  1456  0248  3901               	andlw	1
  1457  0249  3E1D               	addlw	low (_ROW_SELECT| (0+32768))
  1458  024A  0084               	movwf	4
  1459  024B  3084               	movlw	high (_ROW_SELECT| (0+32768))
  1460  024C  1803               	skipnc
  1461  024D  3E01               	addlw	1
  1462  024E  0085               	movwf	5
  1463  024F  0800               	movf	0,w	;code access
  1464  0250  2621               	fcall	_AQM0802_SendCharacter
  1465                           
  1466                           ;main.c: 364: break ;
  1467  0251  2A9D               	goto	l234
  1468  0252                     l2330:	
  1469                           ;main.c: 366: case STATE_ADJUST_SLEEP_TIME:
  1470                           
  1471                           
  1472                           ;main.c: 367: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.SLEEP.TITLE ) ;
  1473  0252  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  1474  0253  0084               	movwf	4
  1475  0254  3084               	movlw	high ((_MESSAGE+8)| (0+32768))
  1476  0255  0085               	movwf	5
  1477  0256  3F00               	moviw [0]fsr0
  1478  0257  0020               	movlb	0	; select bank0
  1479  0258  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1480  0259  3F01               	moviw [1]fsr0
  1481  025A  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1482  025B  3080               	movlw	128
  1483  025C  24FF               	fcall	_AQM0802_SendStringClearing
  1484                           
  1485                           ;main.c: 368: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x0 , MESSAGE.SLEEP.VALUE ) ;
  1486  025D  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  1487  025E  0084               	movwf	4
  1488  025F  3084               	movlw	high ((_MESSAGE+10)| (0+32768))
  1489  0260  0085               	movwf	5
  1490  0261  3F00               	moviw [0]fsr0
  1491  0262  0020               	movlb	0	; select bank0
  1492  0263  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1493  0264  3F01               	moviw [1]fsr0
  1494  0265  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1495  0266  30C0               	movlw	192
  1496  0267  24FF               	fcall	_AQM0802_SendStringClearing
  1497  0268                     l2332:	
  1498                           
  1499                           ;main.c: 369: events_.output.changeValue=1 ;
  1500  0268  0020               	movlb	0	; select bank0
  1501  0269  15C3               	bsf	_events_+1,3
  1502                           
  1503                           ;main.c: 370: break ;
  1504  026A  2A9D               	goto	l234
  1505  026B                     l2334:	
  1506                           ;main.c: 372: case STATE_VERSION:
  1507                           
  1508                           
  1509                           ;main.c: 373: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.VERSION ) ;
  1510  026B  300C               	movlw	low ((_MESSAGE+12)| (0+32768))
  1511  026C  0084               	movwf	4
  1512  026D  3084               	movlw	high ((_MESSAGE+12)| (0+32768))
  1513  026E  0085               	movwf	5
  1514  026F  3F00               	moviw [0]fsr0
  1515  0270  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1516  0271  3F01               	moviw [1]fsr0
  1517  0272  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1518  0273  3080               	movlw	128
  1519  0274  24FF               	fcall	_AQM0802_SendStringClearing
  1520                           
  1521                           ;main.c: 374: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x0 , " 00.112 " ) ;
  1522  0275  301F               	movlw	low (STR_15| (0+32768))
  1523  0276  0020               	movlb	0	; select bank0
  1524  0277  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1525  0278  3084               	movlw	high (STR_15| (0+32768))
  1526  0279  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1527  027A  30C0               	movlw	192
  1528  027B  24FF               	fcall	_AQM0802_SendStringClearing
  1529                           
  1530                           ;main.c: 375: break ;
  1531  027C  2A9D               	goto	l234
  1532  027D                     l2336:	
  1533                           ;main.c: 377: case STATE_ERROR:
  1534                           
  1535                           
  1536                           ;main.c: 378: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.ERROR ) ;
  1537  027D  300E               	movlw	low ((_MESSAGE+14)| (0+32768))
  1538  027E  0084               	movwf	4
  1539  027F  3084               	movlw	high ((_MESSAGE+14)| (0+32768))
  1540  0280  0085               	movwf	5
  1541  0281  3F00               	moviw [0]fsr0
  1542  0282  0020               	movlb	0	; select bank0
  1543  0283  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1544  0284  3F01               	moviw [1]fsr0
  1545  0285  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1546  0286  3080               	movlw	128
  1547  0287  24FF               	fcall	_AQM0802_SendStringClearing
  1548                           
  1549                           ;main.c: 379: AQM0802_ClearRow( ROW_SELECT_1 ) ;
  1550  0288  30C0               	movlw	192
  1551  0289  25DF               	fcall	_AQM0802_ClearRow
  1552                           
  1553                           ;main.c: 381: }
  1554                           
  1555                           ;main.c: 380: break ;
  1556  028A  2A9D               	goto	l234
  1557  028B                     l2342:	
  1558  028B  0020               	movlb	0	; select bank0
  1559  028C  0848               	movf	_machineState_,w
  1560                           
  1561                           ; Switch size 1, requested type "space"
  1562                           ; Number of cases is 5, Range of values is 1 to 6
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte           16     9 (average)
  1566                           ; direct_byte           21     9 (fixed)
  1567                           ; jumptable            263     9 (fixed)
  1568                           ;	Chosen strategy is simple_byte
  1569  028D  3A01               	xorlw	1	; case 1
  1570  028E  1903               	skipnz
  1571  028F  2A10               	goto	l2320
  1572  0290  3A03               	xorlw	3	; case 2
  1573  0291  1903               	skipnz
  1574  0292  2A19               	goto	l2326
  1575  0293  3A01               	xorlw	1	; case 3
  1576  0294  1903               	skipnz
  1577  0295  2A6B               	goto	l2334
  1578  0296  3A07               	xorlw	7	; case 4
  1579  0297  1903               	skipnz
  1580  0298  2A52               	goto	l2330
  1581  0299  3A02               	xorlw	2	; case 6
  1582  029A  1903               	skipnz
  1583  029B  2A7D               	goto	l2336
  1584  029C  2A9D               	goto	l234
  1585  029D                     l234:	
  1586                           
  1587                           ;main.c: 382: }
  1588                           ;main.c: 385: if( (events_.output.changeValue&&!(events_.output.changeValue=0)) ) {
  1589  029D  0020               	movlb	0	; select bank0
  1590  029E  1DC3               	btfss	_events_+1,3
  1591  029F  2904               	goto	l195
  1592  02A0  11C3               	bcf	_events_+1,3
  1593                           
  1594                           ;main.c: 387: Char_t string[9] ;
  1595                           ;main.c: 389: switch( machineState_ ) {
  1596  02A1  2BAE               	goto	l2448
  1597  02A2                     l2346:	
  1598                           ;main.c: 390: case STATE_MEASURE:
  1599                           
  1600                           
  1601                           ;main.c: 391: {
  1602                           ;main.c: 394: ADValue_t currentAdValue = sumOfBuffer_ ;
  1603  02A2  0847               	movf	_sumOfBuffer_+1,w
  1604  02A3  00BC               	movwf	main@currentAdValue+1
  1605  02A4  0846               	movf	_sumOfBuffer_,w
  1606  02A5  00BB               	movwf	main@currentAdValue
  1607                           
  1608                           ;main.c: 396: switch( measureMode_ ) {
  1609  02A6  2B4B               	goto	l2410
  1610  02A7                     l2348:	
  1611                           ;main.c: 397: case MEASURE_MODE_VOLTAGE:
  1612                           
  1613                           
  1614                           ;main.c: 398: case MEASURE_MODE_AD_VALUE:
  1615                           ;main.c: 399: {
  1616                           ;main.c: 400: const Uint16_t COMPARE_UNITS[] = { 10000 , 1000 , 100 , 10 , 1 } ;
  1617                           ;main.c: 402: for( Uint08_t i = 0 ; i < 5 ; i++ ) {
  1618  02A7  01BD               	clrf	main@i_872
  1619  02A8  3005               	movlw	5
  1620  02A9  023D               	subwf	main@i_872,w
  1621  02AA  1803               	btfsc	3,0
  1622  02AB  2AE2               	goto	l2368
  1623  02AC                     l2354:	
  1624                           
  1625                           ;main.c: 403: string[i + 1] = '0' ;
  1626  02AC  3030               	movlw	48
  1627  02AD  00A8               	movwf	??_main
  1628  02AE  083D               	movf	main@i_872,w
  1629  02AF  3E01               	addlw	1
  1630  02B0  3E30               	addlw	(low (main@string| 0))& (0+255)
  1631  02B1  0086               	movwf	6
  1632  02B2  0187               	clrf	7
  1633  02B3  0828               	movf	??_main,w
  1634  02B4  0081               	movwf	1
  1635                           
  1636                           ;main.c: 404: Uint16_t compareUnit = COMPARE_UNITS[ i ] ;
  1637  02B5  083D               	movf	main@i_872,w
  1638  02B6  00A8               	movwf	??_main
  1639  02B7  01A9               	clrf	??_main+1
  1640  02B8  35A8               	lslf	??_main,f
  1641  02B9  0DA9               	rlf	??_main+1,f
  1642  02BA  3010               	movlw	low (main@COMPARE_UNITS| (0+32768))
  1643  02BB  0728               	addwf	??_main,w
  1644  02BC  0084               	movwf	4
  1645  02BD  3084               	movlw	high (main@COMPARE_UNITS| (0+32768))
  1646  02BE  3D29               	addwfc	??_main+1,w
  1647  02BF  0085               	movwf	5
  1648  02C0  3F00               	moviw [0]fsr0
  1649  02C1  00AC               	movwf	main@compareUnit
  1650  02C2  3F01               	moviw [1]fsr0
  1651  02C3  00AD               	movwf	main@compareUnit+1
  1652  02C4                     l2362:	
  1653                           ;main.c: 405: while( currentAdValue >= compareUnit ) {
  1654                           
  1655  02C4  082D               	movf	main@compareUnit+1,w
  1656  02C5  023C               	subwf	main@currentAdValue+1,w
  1657  02C6  1D03               	skipz
  1658  02C7  2ACA               	goto	u2075
  1659  02C8  082C               	movf	main@compareUnit,w
  1660  02C9  023B               	subwf	main@currentAdValue,w
  1661  02CA                     u2075:	
  1662  02CA  1C03               	btfss	3,0
  1663  02CB  2ADA               	goto	l2364
  1664                           
  1665                           ;main.c: 406: string[i + 1]++ ;
  1666  02CC  3001               	movlw	1
  1667  02CD  00A8               	movwf	??_main
  1668  02CE  083D               	movf	main@i_872,w
  1669  02CF  3E01               	addlw	1
  1670  02D0  3E30               	addlw	(low (main@string| 0))& (0+255)
  1671  02D1  0086               	movwf	6
  1672  02D2  0187               	clrf	7
  1673  02D3  0828               	movf	??_main,w
  1674  02D4  0781               	addwf	1,f
  1675                           
  1676                           ;main.c: 407: currentAdValue -= compareUnit ;
  1677  02D5  082C               	movf	main@compareUnit,w
  1678  02D6  02BB               	subwf	main@currentAdValue,f
  1679  02D7  082D               	movf	main@compareUnit+1,w
  1680  02D8  3BBC               	subwfb	main@currentAdValue+1,f
  1681  02D9  2AC4               	goto	l2362
  1682  02DA                     l2364:	
  1683  02DA  3001               	movlw	1
  1684  02DB  00A8               	movwf	??_main
  1685  02DC  0828               	movf	??_main,w
  1686  02DD  07BD               	addwf	main@i_872,f
  1687  02DE  3005               	movlw	5
  1688  02DF  023D               	subwf	main@i_872,w
  1689  02E0  1C03               	skipc
  1690  02E1  2AAC               	goto	l2354
  1691  02E2                     l2368:	
  1692                           
  1693                           ;main.c: 408: }
  1694                           ;main.c: 409: }
  1695                           ;main.c: 411: string[0] = ' ' ;
  1696  02E2  3020               	movlw	32
  1697  02E3  00A8               	movwf	??_main
  1698  02E4  0828               	movf	??_main,w
  1699  02E5  00B0               	movwf	main@string
  1700                           
  1701                           ;main.c: 412: if( measureMode_ == MEASURE_MODE_VOLTAGE ) {
  1702  02E6  0849               	movf	_measureMode_,w
  1703  02E7  1D03               	btfss	3,2
  1704  02E8  2AF9               	goto	l2374
  1705                           
  1706                           ;main.c: 413: string[0] = string[1] ;
  1707  02E9  0831               	movf	main@string+1,w
  1708  02EA  00A8               	movwf	??_main
  1709  02EB  0828               	movf	??_main,w
  1710  02EC  00B0               	movwf	main@string
  1711                           
  1712                           ;main.c: 414: string[1] = string[2] ;
  1713  02ED  0832               	movf	main@string+2,w
  1714  02EE  00A8               	movwf	??_main
  1715  02EF  0828               	movf	??_main,w
  1716  02F0  00B1               	movwf	main@string+1
  1717                           
  1718                           ;main.c: 415: string[2] = '.' ;
  1719  02F1  302E               	movlw	46
  1720  02F2  00A8               	movwf	??_main
  1721  02F3  0828               	movf	??_main,w
  1722  02F4  00B2               	movwf	main@string+2
  1723                           
  1724                           ;main.c: 416: string[5] = 'V' ;
  1725  02F5  3056               	movlw	86
  1726  02F6  00A8               	movwf	??_main
  1727  02F7  0828               	movf	??_main,w
  1728  02F8  00B5               	movwf	main@string+5
  1729  02F9                     l2374:	
  1730                           
  1731                           ;main.c: 417: }
  1732                           ;main.c: 418: string[6] = 0 ;
  1733  02F9  01B6               	clrf	main@string+6
  1734                           
  1735                           ;main.c: 420: AQM0802_SendString( ROW_SELECT_1 | 0x2 , &string ) ;
  1736  02FA  3030               	movlw	(low (main@string| 0))& (0+255)
  1737  02FB  00A8               	movwf	??_main
  1738  02FC  0828               	movf	??_main,w
  1739  02FD  00A2               	movwf	AQM0802_SendString@stringPtr
  1740  02FE  30C2               	movlw	194
  1741  02FF  25A4               	fcall	_AQM0802_SendString
  1742                           
  1743                           ;main.c: 421: }
  1744                           ;main.c: 422: break ;
  1745  0300  2904               	goto	l195
  1746  0301                     l2378:	
  1747                           ;main.c: 424: case MEASURE_MODE_BAR:
  1748                           
  1749                           
  1750                           ;main.c: 425: {
  1751                           ;main.c: 426: for( Uint08_t i = 0 ; i < 8 ; i++ ) {
  1752  0301  0020               	movlb	0	; select bank0
  1753  0302  01BE               	clrf	main@i_875
  1754  0303  3008               	movlw	8
  1755  0304  023E               	subwf	main@i_875,w
  1756  0305  1803               	btfsc	3,0
  1757  0306  2B43               	goto	l2404
  1758  0307                     l2384:	
  1759                           
  1760                           ;main.c: 427: if( currentAdValue >= 1000 ) {
  1761  0307  3003               	movlw	3
  1762  0308  023C               	subwf	main@currentAdValue+1,w
  1763  0309  30E8               	movlw	232
  1764  030A  1903               	skipnz
  1765  030B  023B               	subwf	main@currentAdValue,w
  1766  030C  1C03               	skipc
  1767  030D  2B1B               	goto	l2390
  1768                           
  1769                           ;main.c: 428: string[i] = '\x05' ;
  1770  030E  3005               	movlw	5
  1771  030F  00A8               	movwf	??_main
  1772  0310  083E               	movf	main@i_875,w
  1773  0311  3E30               	addlw	(low (main@string| 0))& (0+255)
  1774  0312  0086               	movwf	6
  1775  0313  0187               	clrf	7
  1776  0314  0828               	movf	??_main,w
  1777  0315  0081               	movwf	1
  1778                           
  1779                           ;main.c: 429: currentAdValue -= 1000 ;
  1780  0316  30E8               	movlw	232
  1781  0317  02BB               	subwf	main@currentAdValue,f
  1782  0318  3003               	movlw	3
  1783  0319  3BBC               	subwfb	main@currentAdValue+1,f
  1784                           
  1785                           ;main.c: 430: }
  1786  031A  2B3B               	goto	l2400
  1787  031B                     l2390:	
  1788                           
  1789                           ;main.c: 431: else {
  1790                           ;main.c: 432: string[i] = 0 ;
  1791  031B  083E               	movf	main@i_875,w
  1792  031C  3E30               	addlw	(low (main@string| 0))& (0+255)
  1793  031D  0086               	movwf	6
  1794  031E  0187               	clrf	7
  1795  031F  0181               	clrf	1
  1796  0320                     l2396:	
  1797                           ;main.c: 433: while( currentAdValue >= 200 ) {
  1798                           
  1799  0320  3000               	movlw	0
  1800  0321  023C               	subwf	main@currentAdValue+1,w
  1801  0322  30C8               	movlw	200
  1802  0323  1903               	skipnz
  1803  0324  023B               	subwf	main@currentAdValue,w
  1804  0325  1C03               	btfss	3,0
  1805  0326  2B34               	goto	l2398
  1806                           
  1807                           ;main.c: 434: string[i]++ ;
  1808  0327  3001               	movlw	1
  1809  0328  00A8               	movwf	??_main
  1810  0329  083E               	movf	main@i_875,w
  1811  032A  3E30               	addlw	(low (main@string| 0))& (0+255)
  1812  032B  0086               	movwf	6
  1813  032C  0187               	clrf	7
  1814  032D  0828               	movf	??_main,w
  1815  032E  0781               	addwf	1,f
  1816                           
  1817                           ;main.c: 435: currentAdValue -= 200 ;
  1818  032F  30C8               	movlw	200
  1819  0330  02BB               	subwf	main@currentAdValue,f
  1820  0331  3000               	movlw	0
  1821  0332  3BBC               	subwfb	main@currentAdValue+1,f
  1822  0333  2B20               	goto	l2396
  1823  0334                     l2398:	
  1824                           
  1825                           ;main.c: 436: }
  1826                           ;main.c: 437: string[ i + 1 ] = 0 ;
  1827  0334  083E               	movf	main@i_875,w
  1828  0335  3E01               	addlw	1
  1829  0336  3E30               	addlw	(low (main@string| 0))& (0+255)
  1830  0337  0086               	movwf	6
  1831  0338  0187               	clrf	7
  1832  0339  0181               	clrf	1
  1833                           
  1834                           ;main.c: 438: break ;
  1835  033A  2B43               	goto	l2404
  1836  033B                     l2400:	
  1837  033B  3001               	movlw	1
  1838  033C  00A8               	movwf	??_main
  1839  033D  0828               	movf	??_main,w
  1840  033E  07BE               	addwf	main@i_875,f
  1841  033F  3008               	movlw	8
  1842  0340  023E               	subwf	main@i_875,w
  1843  0341  1C03               	skipc
  1844  0342  2B07               	goto	l2384
  1845  0343                     l2404:	
  1846                           
  1847                           ;main.c: 439: }
  1848                           ;main.c: 441: }
  1849                           ;main.c: 442: string[8] = 0 ;
  1850  0343  01B8               	clrf	main@string+8
  1851                           
  1852                           ;main.c: 443: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x0 , string ) ;
  1853  0344  3030               	movlw	low main@string
  1854  0345  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1855  0346  3000               	movlw	high main@string
  1856  0347  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1857  0348  30C0               	movlw	192
  1858  0349  24FF               	fcall	_AQM0802_SendStringClearing
  1859                           
  1860                           ;main.c: 447: }
  1861                           
  1862                           ;main.c: 444: }
  1863                           ;main.c: 445: break ;
  1864  034A  2904               	goto	l195
  1865  034B                     l2410:	
  1866  034B  0020               	movlb	0	; select bank0
  1867  034C  0849               	movf	_measureMode_,w
  1868                           
  1869                           ; Switch size 1, requested type "space"
  1870                           ; Number of cases is 3, Range of values is 0 to 2
  1871                           ; switch strategies available:
  1872                           ; Name         Instructions Cycles
  1873                           ; simple_byte           10     6 (average)
  1874                           ; direct_byte           12     6 (fixed)
  1875                           ; jumptable            260     6 (fixed)
  1876                           ;	Chosen strategy is simple_byte
  1877  034D  3A00               	xorlw	0	; case 0
  1878  034E  1903               	skipnz
  1879  034F  2AA7               	goto	l2348
  1880  0350  3A01               	xorlw	1	; case 1
  1881  0351  1903               	skipnz
  1882  0352  2AA7               	goto	l2348
  1883  0353  3A03               	xorlw	3	; case 2
  1884  0354  1903               	skipnz
  1885  0355  2B01               	goto	l2378
  1886  0356  2904               	goto	l195
  1887                           
  1888                           ;main.c: 448: }
  1889                           ;main.c: 449: break ;
  1890  0357  2904               	goto	l195
  1891  0358                     l2412:	
  1892                           ;main.c: 451: case STATE_ADJUST_SLEEP_TIME:
  1893                           
  1894                           
  1895                           ;main.c: 452: {
  1896                           ;main.c: 453: Uint08_t tmpValue = configuration_.sleepTime ;
  1897  0358  0859               	movf	_configuration_,w
  1898  0359  00A8               	movwf	??_main
  1899  035A  0828               	movf	??_main,w
  1900  035B  00AA               	movwf	main@tmpValue
  1901                           
  1902                           ;main.c: 455: const Uint08_t COMPARE_UNITS[] = { 100 , 10 , 1 } ;
  1903                           ;main.c: 456: Bool_t isNonZero = BOOL_FALSE ;
  1904  035C  01AB               	clrf	main@isNonZero
  1905                           
  1906                           ;main.c: 458: for( Uint08_t i = 0 ; i < 3 ; i++ ) {
  1907  035D  01BF               	clrf	main@i_879
  1908  035E  3003               	movlw	3
  1909  035F  023F               	subwf	main@i_879,w
  1910  0360  1803               	btfsc	3,0
  1911  0361  2BA6               	goto	l2442
  1912  0362                     l2420:	
  1913                           
  1914                           ;main.c: 459: string[i] = '0' ;
  1915  0362  3030               	movlw	48
  1916  0363  00A8               	movwf	??_main
  1917  0364  083F               	movf	main@i_879,w
  1918  0365  3E30               	addlw	(low (main@string| 0))& (0+255)
  1919  0366  0086               	movwf	6
  1920  0367  0187               	clrf	7
  1921  0368  0828               	movf	??_main,w
  1922  0369  0081               	movwf	1
  1923                           
  1924                           ;main.c: 460: Uint08_t compareUnit = COMPARE_UNITS[ i ] ;
  1925  036A  083F               	movf	main@i_879,w
  1926  036B  3E1A               	addlw	low (main@OMPARE_UNITS_877| (0+32768))
  1927  036C  0084               	movwf	4
  1928  036D  3084               	movlw	high (main@OMPARE_UNITS_877| (0+32768))
  1929  036E  1803               	skipnc
  1930  036F  3E01               	addlw	1
  1931  0370  0085               	movwf	5
  1932  0371  0800               	movf	0,w	;code access
  1933  0372  00A8               	movwf	??_main
  1934  0373  0828               	movf	??_main,w
  1935  0374  00AE               	movwf	main@compareUnit_880
  1936  0375                     l2428:	
  1937                           ;main.c: 461: while( tmpValue >= compareUnit ) {
  1938                           
  1939  0375  082E               	movf	main@compareUnit_880,w
  1940  0376  022A               	subwf	main@tmpValue,w
  1941  0377  1C03               	btfss	3,0
  1942  0378  2B84               	goto	l2430
  1943                           
  1944                           ;main.c: 462: string[i]++ ;
  1945  0379  3001               	movlw	1
  1946  037A  00A8               	movwf	??_main
  1947  037B  083F               	movf	main@i_879,w
  1948  037C  3E30               	addlw	(low (main@string| 0))& (0+255)
  1949  037D  0086               	movwf	6
  1950  037E  0187               	clrf	7
  1951  037F  0828               	movf	??_main,w
  1952  0380  0781               	addwf	1,f
  1953                           
  1954                           ;main.c: 463: tmpValue -= compareUnit ;
  1955  0381  082E               	movf	main@compareUnit_880,w
  1956  0382  02AA               	subwf	main@tmpValue,f
  1957  0383  2B75               	goto	l2428
  1958  0384                     l2430:	
  1959                           
  1960                           ;main.c: 464: }
  1961                           ;main.c: 466: if( isNonZero || string[i] != '0' || i == 2 ) {
  1962  0384  082B               	movf	main@isNonZero,w
  1963  0385  1D03               	btfss	3,2
  1964  0386  2B93               	goto	l276
  1965  0387  083F               	movf	main@i_879,w
  1966  0388  3E30               	addlw	(low (main@string| 0))& (0+255)
  1967  0389  0086               	movwf	6
  1968  038A  0187               	clrf	7
  1969  038B  3030               	movlw	48
  1970  038C  0601               	xorwf	1,w
  1971  038D  1D03               	btfss	3,2
  1972  038E  2B93               	goto	l276
  1973  038F  3002               	movlw	2
  1974  0390  063F               	xorwf	main@i_879,w
  1975  0391  1D03               	btfss	3,2
  1976  0392  2B96               	goto	l2436
  1977  0393                     l276:	
  1978                           
  1979                           ;main.c: 467: isNonZero = BOOL_TRUE ;
  1980  0393  01AB               	clrf	main@isNonZero
  1981  0394  0AAB               	incf	main@isNonZero,f
  1982                           
  1983                           ;main.c: 468: }
  1984  0395  2B9E               	goto	l2438
  1985  0396                     l2436:	
  1986                           
  1987                           ;main.c: 469: else {
  1988                           ;main.c: 470: string[i] = ' ' ;
  1989  0396  3020               	movlw	32
  1990  0397  00A8               	movwf	??_main
  1991  0398  083F               	movf	main@i_879,w
  1992  0399  3E30               	addlw	(low (main@string| 0))& (0+255)
  1993  039A  0086               	movwf	6
  1994  039B  0187               	clrf	7
  1995  039C  0828               	movf	??_main,w
  1996  039D  0081               	movwf	1
  1997  039E                     l2438:	
  1998  039E  3001               	movlw	1
  1999  039F  00A8               	movwf	??_main
  2000  03A0  0828               	movf	??_main,w
  2001  03A1  07BF               	addwf	main@i_879,f
  2002  03A2  3003               	movlw	3
  2003  03A3  023F               	subwf	main@i_879,w
  2004  03A4  1C03               	skipc
  2005  03A5  2B62               	goto	l2420
  2006  03A6                     l2442:	
  2007                           
  2008                           ;main.c: 471: }
  2009                           ;main.c: 472: }
  2010                           ;main.c: 474: string[3] = 0 ;
  2011  03A6  01B3               	clrf	main@string+3
  2012                           
  2013                           ;main.c: 475: AQM0802_SendString( ROW_SELECT_1 | 0x2 , &string ) ;
  2014  03A7  3030               	movlw	(low (main@string| 0))& (0+255)
  2015  03A8  00A8               	movwf	??_main
  2016  03A9  0828               	movf	??_main,w
  2017  03AA  00A2               	movwf	AQM0802_SendString@stringPtr
  2018  03AB  30C2               	movlw	194
  2019  03AC  25A4               	fcall	_AQM0802_SendString
  2020                           
  2021                           ;main.c: 478: }
  2022                           
  2023                           ;main.c: 476: }
  2024                           ;main.c: 477: break ;
  2025  03AD  2904               	goto	l195
  2026  03AE                     l2448:	
  2027  03AE  0020               	movlb	0	; select bank0
  2028  03AF  0848               	movf	_machineState_,w
  2029                           
  2030                           ; Switch size 1, requested type "space"
  2031                           ; Number of cases is 2, Range of values is 1 to 4
  2032                           ; switch strategies available:
  2033                           ; Name         Instructions Cycles
  2034                           ; simple_byte            7     4 (average)
  2035                           ; direct_byte           17     9 (fixed)
  2036                           ; jumptable            263     9 (fixed)
  2037                           ;	Chosen strategy is simple_byte
  2038  03B0  3A01               	xorlw	1	; case 1
  2039  03B1  1903               	skipnz
  2040  03B2  2AA2               	goto	l2346
  2041  03B3  3A05               	xorlw	5	; case 4
  2042  03B4  1903               	skipnz
  2043  03B5  2B58               	goto	l2412
  2044  03B6  2904               	goto	l195
  2045                           
  2046                           ;main.c: 482: }
  2047                           ;main.c: 484: }
  2048  03B7  2904               	goto	l195
  2049  03B8                     __end_of_main:	
  2050                           
  2051                           	psect	text1
  2052  0472                     __ptext1:	
  2053 ;; *************** function _initialize *****************
  2054 ;; Defined at:
  2055 ;;		line 25 in file "src/pic12f1822_init.h"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;		None               void
  2062 ;; Registers used:
  2063 ;;		wreg, status,2, status,0
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1
  2069 ;;      Params:         0       0       0
  2070 ;;      Locals:         0       0       0
  2071 ;;      Temps:          0       0       0
  2072 ;;      Totals:         0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    1
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _initialize
  2085  0472                     _initialize:	
  2086                           
  2087                           ;pic12f1822_init.h: 28: OSCCONbits.SPLLEN = 0 ;
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _initialize: [wreg+status,2+status,0]
  2091  0472  0021               	movlb	1	; select bank1
  2092  0473  1399               	bcf	25,7	;volatile
  2093                           
  2094                           ;pic12f1822_init.h: 29: OSCCONbits.IRCF = 0b1011 ;
  2095  0474  0819               	movf	25,w	;volatile
  2096  0475  3987               	andlw	-121
  2097  0476  3858               	iorlw	88
  2098  0477  0099               	movwf	25	;volatile
  2099                           
  2100                           ;pic12f1822_init.h: 30: OSCCONbits.SCS = 0b10 ;
  2101  0478  0819               	movf	25,w	;volatile
  2102  0479  39FC               	andlw	-4
  2103  047A  3802               	iorlw	2
  2104  047B  0099               	movwf	25	;volatile
  2105                           
  2106                           ;pic12f1822_init.h: 33: WDTCONbits.SWDTEN = 0 ;
  2107  047C  1017               	bcf	23,0	;volatile
  2108                           
  2109                           ;pic12f1822_init.h: 34: WDTCONbits.WDTPS = 0b01011 ;
  2110  047D  0817               	movf	23,w	;volatile
  2111  047E  39C1               	andlw	-63
  2112  047F  3816               	iorlw	22
  2113  0480  0097               	movwf	23	;volatile
  2114                           
  2115                           ;pic12f1822_init.h: 37: INTCONbits.GIE = 1 ;
  2116  0481  178B               	bsf	11,7	;volatile
  2117                           
  2118                           ;pic12f1822_init.h: 38: INTCONbits.PEIE = 0 ;
  2119  0482  130B               	bcf	11,6	;volatile
  2120                           
  2121                           ;pic12f1822_init.h: 41: INTCONbits.IOCIE = 0 ;
  2122  0483  118B               	bcf	11,3	;volatile
  2123                           
  2124                           ;pic12f1822_init.h: 42: IOCANbits.IOCAN3 = 1 ;
  2125  0484  0027               	movlb	7	; select bank7
  2126  0485  1592               	bsf	18,3	;volatile
  2127                           
  2128                           ;pic12f1822_init.h: 45: OPTION_REGbits.TMR0SE = 1 ;
  2129  0486  0021               	movlb	1	; select bank1
  2130  0487  1615               	bsf	21,4	;volatile
  2131                           
  2132                           ;pic12f1822_init.h: 46: OPTION_REGbits.TMR0CS = 0 ;
  2133  0488  1295               	bcf	21,5	;volatile
  2134                           
  2135                           ;pic12f1822_init.h: 47: OPTION_REGbits.PSA = 1 ;
  2136  0489  1595               	bsf	21,3	;volatile
  2137                           
  2138                           ;pic12f1822_init.h: 48: OPTION_REGbits.PS = 0b010 ;
  2139  048A  0815               	movf	21,w	;volatile
  2140  048B  39F8               	andlw	-8
  2141  048C  3802               	iorlw	2
  2142  048D  0095               	movwf	21	;volatile
  2143                           
  2144                           ;pic12f1822_init.h: 49: TMR0 = 0x00 ;
  2145  048E  0020               	movlb	0	; select bank0
  2146  048F  0195               	clrf	21	;volatile
  2147                           
  2148                           ;pic12f1822_init.h: 50: INTCONbits.TMR0IF = 0 ;
  2149  0490  110B               	bcf	11,2	;volatile
  2150                           
  2151                           ;pic12f1822_init.h: 51: INTCONbits.TMR0IE = 0 ;
  2152  0491  128B               	bcf	11,5	;volatile
  2153                           
  2154                           ;pic12f1822_init.h: 54: T1CONbits.TMR1ON = 0 ;
  2155  0492  1018               	bcf	24,0	;volatile
  2156                           
  2157                           ;pic12f1822_init.h: 62: T2CONbits.TMR2ON = 0 ;
  2158  0493  111C               	bcf	28,2	;volatile
  2159                           
  2160                           ;pic12f1822_init.h: 63: T2CONbits.T2CKPS = 0b00 ;
  2161  0494  30FC               	movlw	-4
  2162  0495  059C               	andwf	28,f	;volatile
  2163                           
  2164                           ;pic12f1822_init.h: 64: T2CONbits.T2OUTPS = 0b1001 ;
  2165  0496  081C               	movf	28,w	;volatile
  2166  0497  3987               	andlw	-121
  2167  0498  3848               	iorlw	72
  2168  0499  009C               	movwf	28	;volatile
  2169                           
  2170                           ;pic12f1822_init.h: 65: PR2 = 249 ;
  2171  049A  30F9               	movlw	249
  2172  049B  009B               	movwf	27	;volatile
  2173                           
  2174                           ;pic12f1822_init.h: 66: TMR2 = 0x00 ;
  2175  049C  019A               	clrf	26	;volatile
  2176                           
  2177                           ;pic12f1822_init.h: 67: PIR1bits.TMR2IF = 0 ;
  2178  049D  1091               	bcf	17,1	;volatile
  2179                           
  2180                           ;pic12f1822_init.h: 68: PIE1bits.TMR2IE = 0 ;
  2181  049E  0021               	movlb	1	; select bank1
  2182  049F  1091               	bcf	17,1	;volatile
  2183                           
  2184                           ;pic12f1822_init.h: 71: SSPSTAT = 0x00 ;
  2185  04A0  0024               	movlb	4	; select bank4
  2186  04A1  0194               	clrf	20	;volatile
  2187                           
  2188                           ;pic12f1822_init.h: 72: SSP1CON1bits.WCOL = 0 ;
  2189  04A2  1395               	bcf	21,7	;volatile
  2190                           
  2191                           ;pic12f1822_init.h: 73: SSP1CON1bits.SSPOV = 0 ;
  2192  04A3  1315               	bcf	21,6	;volatile
  2193                           
  2194                           ;pic12f1822_init.h: 74: SSP1CON1bits.SSPEN = 1 ;
  2195  04A4  1695               	bsf	21,5	;volatile
  2196                           
  2197                           ;pic12f1822_init.h: 75: SSP1CON1bits.SSPM = 0b1000 ;
  2198  04A5  0815               	movf	21,w	;volatile
  2199  04A6  39F0               	andlw	-16
  2200  04A7  3808               	iorlw	8
  2201  04A8  0095               	movwf	21	;volatile
  2202                           
  2203                           ;pic12f1822_init.h: 76: SSP1ADD = 0 ;
  2204  04A9  0192               	clrf	18	;volatile
  2205                           
  2206                           ;pic12f1822_init.h: 79: FVRCONbits.ADFVR = 0b10 ;
  2207  04AA  0022               	movlb	2	; select bank2
  2208  04AB  0817               	movf	23,w	;volatile
  2209  04AC  39FC               	andlw	-4
  2210  04AD  3802               	iorlw	2
  2211  04AE  0097               	movwf	23	;volatile
  2212                           
  2213                           ;pic12f1822_init.h: 80: FVRCONbits.FVREN = 1 ;
  2214  04AF  1797               	bsf	23,7	;volatile
  2215                           
  2216                           ;pic12f1822_init.h: 82: ADCON0bits.CHS = 3 ;
  2217  04B0  0021               	movlb	1	; select bank1
  2218  04B1  081D               	movf	29,w	;volatile
  2219  04B2  3983               	andlw	-125
  2220  04B3  380C               	iorlw	12
  2221  04B4  009D               	movwf	29	;volatile
  2222                           
  2223                           ;pic12f1822_init.h: 83: ADCON0bits.ADON = 1 ;
  2224  04B5  141D               	bsf	29,0	;volatile
  2225                           
  2226                           ;pic12f1822_init.h: 84: ADCON1bits.ADFM = 1 ;
  2227  04B6  179E               	bsf	30,7	;volatile
  2228                           
  2229                           ;pic12f1822_init.h: 85: ADCON1bits.ADCS = 0b000 ;
  2230  04B7  308F               	movlw	-113
  2231  04B8  059E               	andwf	30,f	;volatile
  2232                           
  2233                           ;pic12f1822_init.h: 86: ADCON1bits.ADPREF = 0b11 ;
  2234  04B9  3003               	movlw	3
  2235  04BA  049E               	iorwf	30,f	;volatile
  2236                           
  2237                           ;pic12f1822_init.h: 88: ANSELA = 0b00010000 ;
  2238  04BB  3010               	movlw	16
  2239  04BC  0023               	movlb	3	; select bank3
  2240  04BD  008C               	movwf	12	;volatile
  2241                           
  2242                           ;pic12f1822_init.h: 89: TRISA = 0b00101111 | ANSELA ;
  2243  04BE  080C               	movf	12,w	;volatile
  2244  04BF  382F               	iorlw	47
  2245  04C0  0021               	movlb	1	; select bank1
  2246  04C1  008C               	movwf	12	;volatile
  2247  04C2  0008               	return
  2248  04C3                     __end_of_initialize:	
  2249                           
  2250                           	psect	text2
  2251  05C3                     __ptext2:	
  2252 ;; *************** function ___wmul *****************
  2253 ;; Defined at:
  2254 ;;		line 15 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul16.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2257 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  product         2    4[BANK0 ] unsigned int 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    0[BANK0 ] unsigned int 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1
  2269 ;;      Params:         0       4       0
  2270 ;;      Locals:         0       2       0
  2271 ;;      Temps:          0       0       0
  2272 ;;      Totals:         0       6       0
  2273 ;;Total ram usage:        6 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    1
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           
  2284                           ;psect for function ___wmul
  2285  05C3                     ___wmul:	
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2289  05C3  0020               	movlb	0	; select bank0
  2290  05C4  01A4               	clrf	___wmul@product
  2291  05C5  01A5               	clrf	___wmul@product+1
  2292  05C6                     l2106:	
  2293  05C6  1C20               	btfss	___wmul@multiplier,0
  2294  05C7  2DCC               	goto	l390
  2295  05C8  0822               	movf	___wmul@multiplicand,w
  2296  05C9  07A4               	addwf	___wmul@product,f
  2297  05CA  0823               	movf	___wmul@multiplicand+1,w
  2298  05CB  3DA5               	addwfc	___wmul@product+1,f
  2299  05CC                     l390:	
  2300  05CC  3001               	movlw	1
  2301  05CD                     u1755:	
  2302  05CD  35A2               	lslf	___wmul@multiplicand,f
  2303  05CE  0DA3               	rlf	___wmul@multiplicand+1,f
  2304  05CF  0B89               	decfsz	9,f
  2305  05D0  2DCD               	goto	u1755
  2306  05D1  3001               	movlw	1
  2307  05D2                     u1765:	
  2308  05D2  36A1               	lsrf	___wmul@multiplier+1,f
  2309  05D3  0CA0               	rrf	___wmul@multiplier,f
  2310  05D4  0B89               	decfsz	9,f
  2311  05D5  2DD2               	goto	u1765
  2312  05D6  0820               	movf	___wmul@multiplier,w
  2313  05D7  0421               	iorwf	___wmul@multiplier+1,w
  2314  05D8  1D03               	btfss	3,2
  2315  05D9  2DC6               	goto	l2106
  2316  05DA  0825               	movf	___wmul@product+1,w
  2317  05DB  00A1               	movwf	?___wmul+1
  2318  05DC  0824               	movf	___wmul@product,w
  2319  05DD  00A0               	movwf	?___wmul
  2320  05DE  0008               	return
  2321  05DF                     __end_of___wmul:	
  2322                           
  2323                           	psect	text3
  2324  0536                     __ptext3:	
  2325 ;; *************** function _Configuration_Save *****************
  2326 ;; Defined at:
  2327 ;;		line 45 in file "src/configuration.h"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  config          1    wreg     PTR struct .
  2330 ;;		 -> configuration_(1), 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  config          1    5[BANK0 ] PTR struct .
  2333 ;;		 -> configuration_(1), 
  2334 ;;  i               1    6[BANK0 ] unsigned char 
  2335 ;;  ptrConfig       1    4[BANK0 ] PTR unsigned char 
  2336 ;;		 -> configuration_(1), 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1
  2346 ;;      Params:         0       0       0
  2347 ;;      Locals:         0       3       0
  2348 ;;      Temps:          0       2       0
  2349 ;;      Totals:         0       5       0
  2350 ;;Total ram usage:        5 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    2
  2353 ;; This function calls:
  2354 ;;		_Configuration_WriteByte
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _Configuration_Save
  2362  0536                     _Configuration_Save:	
  2363                           
  2364                           ;incstack = 0
  2365                           ; Regs used in _Configuration_Save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2366                           ;Configuration_Save@config stored from wreg
  2367  0536  0020               	movlb	0	; select bank0
  2368  0537  00A5               	movwf	Configuration_Save@config
  2369                           
  2370                           ;configuration.h: 47: EepromData_t* ptrConfig = (EepromData_t*) config ;
  2371  0538  0825               	movf	Configuration_Save@config,w
  2372  0539  00A2               	movwf	??_Configuration_Save
  2373  053A  0822               	movf	??_Configuration_Save,w
  2374  053B  00A4               	movwf	Configuration_Save@ptrConfig
  2375                           
  2376                           ;configuration.h: 50: INTCONbits.GIE=0; ;
  2377  053C  138B               	bcf	11,7	;volatile
  2378                           
  2379                           ;configuration.h: 53: EECON1bits.WREN=1; ;
  2380  053D  0023               	movlb	3	; select bank3
  2381  053E  1515               	bsf	21,2	;volsfr
  2382                           
  2383                           ;configuration.h: 56: for ( Uint08_t i = 0 ; i < sizeof(StConfigurationData) ; i++ ) {
  2384  053F  0020               	movlb	0	; select bank0
  2385  0540  01A6               	clrf	Configuration_Save@i
  2386  0541  2D47               	goto	L6
  2387  0542                     l2086:	
  2388  0542  3001               	movlw	1
  2389  0543  0020               	movlb	0	; select bank0
  2390  0544  00A2               	movwf	??_Configuration_Save
  2391  0545  0822               	movf	??_Configuration_Save,w
  2392  0546  07A6               	addwf	Configuration_Save@i,f
  2393  0547                     L6:	
  2394  0547  0826               	movf	Configuration_Save@i,w
  2395  0548  1D03               	btfss	3,2
  2396  0549  2D59               	goto	l144
  2397                           
  2398                           ;configuration.h: 57: Configuration_WriteByte( i , ptrConfig[i] ) ;
  2399  054A  0826               	movf	Configuration_Save@i,w
  2400  054B  0724               	addwf	Configuration_Save@ptrConfig,w
  2401  054C  00A2               	movwf	??_Configuration_Save
  2402  054D  0822               	movf	??_Configuration_Save,w
  2403  054E  0086               	movwf	6
  2404  054F  0187               	clrf	7
  2405  0550  0801               	movf	1,w
  2406  0551  00A3               	movwf	??_Configuration_Save+1
  2407  0552  0823               	movf	??_Configuration_Save+1,w
  2408  0553  00A0               	movwf	Configuration_WriteByte@data
  2409  0554  0826               	movf	Configuration_Save@i,w
  2410  0555  25FA               	fcall	_Configuration_WriteByte
  2411                           
  2412                           ;configuration.h: 58: if ( EECON1bits.WRERR ) break ;
  2413  0556  0023               	movlb	3	; select bank3
  2414  0557  1D95               	btfss	21,3	;volsfr
  2415  0558  2D42               	goto	l2086
  2416  0559                     l144:	
  2417                           
  2418                           ;configuration.h: 59: }
  2419                           ;configuration.h: 62: EECON1bits.WREN=0; ;
  2420  0559  0023               	movlb	3	; select bank3
  2421  055A  1115               	bcf	21,2	;volsfr
  2422                           
  2423                           ;configuration.h: 65: INTCONbits.GIE=1; ;
  2424  055B  178B               	bsf	11,7	;volatile
  2425  055C  0008               	return
  2426  055D                     __end_of_Configuration_Save:	
  2427                           
  2428                           	psect	text4
  2429  05FA                     __ptext4:	
  2430 ;; *************** function _Configuration_WriteByte *****************
  2431 ;; Defined at:
  2432 ;;		line 90 in file "src/configuration.h"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  address         1    wreg     unsigned char 
  2435 ;;  data            1    0[BANK0 ] unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  address         1    1[BANK0 ] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;		None               void
  2440 ;; Registers used:
  2441 ;;		wreg, status,2
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1
  2447 ;;      Params:         0       1       0
  2448 ;;      Locals:         0       1       0
  2449 ;;      Temps:          0       0       0
  2450 ;;      Totals:         0       2       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    1
  2454 ;; This function calls:
  2455 ;;		Nothing
  2456 ;; This function is called by:
  2457 ;;		_Configuration_Save
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           
  2462                           ;psect for function _Configuration_WriteByte
  2463  05FA                     _Configuration_WriteByte:	
  2464                           
  2465                           ;incstack = 0
  2466                           ; Regs used in _Configuration_WriteByte: [wreg+status,2]
  2467                           ;Configuration_WriteByte@address stored from wreg
  2468  05FA  0020               	movlb	0	; select bank0
  2469  05FB  00A1               	movwf	Configuration_WriteByte@address
  2470                           
  2471                           ;configuration.h: 91: EEADRH=0x00;EEADRL=(address); ;
  2472  05FC  0023               	movlb	3	; select bank3
  2473  05FD  0192               	clrf	18	;volatile
  2474  05FE  0020               	movlb	0	; select bank0
  2475  05FF  0821               	movf	Configuration_WriteByte@address,w
  2476  0600  0023               	movlb	3	; select bank3
  2477  0601  0091               	movwf	17	;volatile
  2478                           
  2479                           ;configuration.h: 92: EEDATH=0x00;EEDATL=(data); ;
  2480  0602  0194               	clrf	20	;volatile
  2481  0603  0020               	movlb	0	; select bank0
  2482  0604  0820               	movf	Configuration_WriteByte@data,w
  2483  0605  0023               	movlb	3	; select bank3
  2484  0606  0093               	movwf	19	;volatile
  2485                           
  2486                           ;configuration.h: 93: EECON2=0x55;EECON2=0xAA; ;
  2487  0607  3055               	movlw	85
  2488  0608  0096               	movwf	22	;volsfr
  2489  0609  30AA               	movlw	170
  2490  060A  0096               	movwf	22	;volsfr
  2491                           
  2492                           ;configuration.h: 94: EECON1bits.WR=1; ;
  2493  060B  1495               	bsf	21,1	;volsfr
  2494  060C                     l154:	
  2495                           ;configuration.h: 95: while(!PIR2bits.EEIF);PIR2bits.EEIF=0; ;
  2496                           
  2497  060C  0020               	movlb	0	; select bank0
  2498  060D  1E12               	btfss	18,4	;volatile
  2499  060E  2E0C               	goto	l154
  2500  060F  1212               	bcf	18,4	;volatile
  2501  0610  0008               	return
  2502  0611                     __end_of_Configuration_WriteByte:	
  2503                           
  2504                           	psect	text5
  2505  0584                     __ptext5:	
  2506 ;; *************** function _Configuration_Load *****************
  2507 ;; Defined at:
  2508 ;;		line 71 in file "src/configuration.h"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  config          1    wreg     PTR struct .
  2511 ;;		 -> configuration_(1), 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  config          1    4[BANK0 ] PTR struct .
  2514 ;;		 -> configuration_(1), 
  2515 ;;  i               1    5[BANK0 ] unsigned char 
  2516 ;;  ptrConfig       1    3[BANK0 ] PTR unsigned char 
  2517 ;;		 -> configuration_(1), 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;		None               void
  2520 ;; Registers used:
  2521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1
  2527 ;;      Params:         0       0       0
  2528 ;;      Locals:         0       3       0
  2529 ;;      Temps:          0       2       0
  2530 ;;      Totals:         0       5       0
  2531 ;;Total ram usage:        5 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    2
  2534 ;; This function calls:
  2535 ;;		_Configuration_ReadByte
  2536 ;; This function is called by:
  2537 ;;		_main
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function _Configuration_Load
  2543  0584                     _Configuration_Load:	
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in _Configuration_Load: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2547                           ;Configuration_Load@config stored from wreg
  2548  0584  0020               	movlb	0	; select bank0
  2549  0585  00A4               	movwf	Configuration_Load@config
  2550                           
  2551                           ;configuration.h: 73: EepromData_t* ptrConfig = (EepromData_t*) config ;
  2552  0586  0824               	movf	Configuration_Load@config,w
  2553  0587  00A1               	movwf	??_Configuration_Load
  2554  0588  0821               	movf	??_Configuration_Load,w
  2555  0589  00A3               	movwf	Configuration_Load@ptrConfig
  2556                           
  2557                           ;configuration.h: 76: INTCONbits.GIE=0; ;
  2558  058A  138B               	bcf	11,7	;volatile
  2559                           
  2560                           ;configuration.h: 79: for ( Uint08_t i = 0 ; i < sizeof(StConfigurationData) ; i++ ) {
  2561  058B  01A5               	clrf	Configuration_Load@i
  2562  058C  0825               	movf	Configuration_Load@i,w
  2563  058D  1D03               	btfss	3,2
  2564  058E  2DA2               	goto	l150
  2565  058F                     l2098:	
  2566                           
  2567                           ;configuration.h: 80: ptrConfig[i] = Configuration_ReadByte( i ) ;
  2568  058F  0825               	movf	Configuration_Load@i,w
  2569  0590  2611               	fcall	_Configuration_ReadByte
  2570  0591  0020               	movlb	0	; select bank0
  2571  0592  00A1               	movwf	??_Configuration_Load
  2572  0593  0825               	movf	Configuration_Load@i,w
  2573  0594  0723               	addwf	Configuration_Load@ptrConfig,w
  2574  0595  00A2               	movwf	??_Configuration_Load+1
  2575  0596  0822               	movf	??_Configuration_Load+1,w
  2576  0597  0086               	movwf	6
  2577  0598  0187               	clrf	7
  2578  0599  0821               	movf	??_Configuration_Load,w
  2579  059A  0081               	movwf	1
  2580  059B  3001               	movlw	1
  2581  059C  00A1               	movwf	??_Configuration_Load
  2582  059D  0821               	movf	??_Configuration_Load,w
  2583  059E  07A5               	addwf	Configuration_Load@i,f
  2584  059F  0825               	movf	Configuration_Load@i,w
  2585  05A0  1903               	btfsc	3,2
  2586  05A1  2D8F               	goto	l2098
  2587  05A2                     l150:	
  2588                           
  2589                           ;configuration.h: 81: }
  2590                           ;configuration.h: 84: INTCONbits.GIE=1; ;
  2591  05A2  178B               	bsf	11,7	;volatile
  2592  05A3  0008               	return
  2593  05A4                     __end_of_Configuration_Load:	
  2594                           
  2595                           	psect	text6
  2596  0611                     __ptext6:	
  2597 ;; *************** function _Configuration_ReadByte *****************
  2598 ;; Defined at:
  2599 ;;		line 100 in file "src/configuration.h"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  address         1    wreg     unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  address         1    0[BANK0 ] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      unsigned char 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1
  2613 ;;      Params:         0       0       0
  2614 ;;      Locals:         0       1       0
  2615 ;;      Temps:          0       0       0
  2616 ;;      Totals:         0       1       0
  2617 ;;Total ram usage:        1 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_Configuration_Load
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           
  2628                           ;psect for function _Configuration_ReadByte
  2629  0611                     _Configuration_ReadByte:	
  2630                           
  2631                           ;incstack = 0
  2632                           ; Regs used in _Configuration_ReadByte: [wreg+status,2]
  2633                           ;Configuration_ReadByte@address stored from wreg
  2634  0611  0020               	movlb	0	; select bank0
  2635  0612  00A0               	movwf	Configuration_ReadByte@address
  2636                           
  2637                           ;configuration.h: 101: EEADRH=0x00;EEADRL=(address); ;
  2638  0613  0023               	movlb	3	; select bank3
  2639  0614  0192               	clrf	18	;volatile
  2640  0615  0020               	movlb	0	; select bank0
  2641  0616  0820               	movf	Configuration_ReadByte@address,w
  2642  0617  0023               	movlb	3	; select bank3
  2643  0618  0091               	movwf	17	;volatile
  2644                           
  2645                           ;configuration.h: 102: EECON1bits.EEPGD=0;EECON1bits.CFGS=0; ;
  2646  0619  1395               	bcf	21,7	;volsfr
  2647  061A  1315               	bcf	21,6	;volsfr
  2648                           
  2649                           ;configuration.h: 103: EECON1bits.RD=1; ;
  2650  061B  1415               	bsf	21,0	;volsfr
  2651                           
  2652                           ;configuration.h: 104: __nop() ;
  2653  061C  0000               	nop
  2654                           
  2655                           ;configuration.h: 105: __nop() ;
  2656  061D  0000               	nop
  2657                           
  2658                           ;configuration.h: 106: return EEDATL ;
  2659  061E  0023               	movlb	3	; select bank3
  2660  061F  0813               	movf	19,w	;volatile
  2661  0620  0008               	return
  2662  0621                     __end_of_Configuration_ReadByte:	
  2663                           
  2664                           	psect	text7
  2665  04FF                     __ptext7:	
  2666 ;; *************** function _AQM0802_SendStringClearing *****************
  2667 ;; Defined at:
  2668 ;;		line 72 in file "src/../../_Common/AQM0802.h"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  position        1    wreg     unsigned char 
  2671 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  2672 ;;		 -> main@string(9), STR_15(9), STR_14(8), STR_13(6), 
  2673 ;;		 -> STR_12(8), STR_11(4), STR_10(8), STR_9(8), 
  2674 ;;		 -> ROM(2048), STR_8(6), STR_7(8), STR_6(9), 
  2675 ;;		 -> STR_5(6), STR_4(8), STR_3(9), STR_2(8), 
  2676 ;;		 -> STR_1(8), 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  position        1    6[BANK0 ] unsigned char 
  2679 ;;  col             1    7[BANK0 ] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      unsigned char 
  2682 ;; Registers used:
  2683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1
  2689 ;;      Params:         0       2       0
  2690 ;;      Locals:         0       2       0
  2691 ;;      Temps:          0       2       0
  2692 ;;      Totals:         0       6       0
  2693 ;;Total ram usage:        6 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    2
  2696 ;; This function calls:
  2697 ;;		_AQM0802_SendData
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _AQM0802_SendStringClearing
  2705  04FF                     _AQM0802_SendStringClearing:	
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _AQM0802_SendStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2709                           ;AQM0802_SendStringClearing@position stored from wreg
  2710  04FF  0020               	movlb	0	; select bank0
  2711  0500  00A6               	movwf	AQM0802_SendStringClearing@position
  2712                           
  2713                           ;AQM0802.h: 74: Uint08_t col = 0 ;
  2714  0501  01A7               	clrf	AQM0802_SendStringClearing@col
  2715                           
  2716                           ;AQM0802.h: 96: AQM0802_SendData( 0x00 , position & 0xF0 ) ;
  2717  0502  0826               	movf	AQM0802_SendStringClearing@position,w
  2718  0503  39F0               	andlw	240
  2719  0504  00A4               	movwf	??_AQM0802_SendStringClearing
  2720  0505  0824               	movf	??_AQM0802_SendStringClearing,w
  2721  0506  00A0               	movwf	AQM0802_SendData@dataByte
  2722  0507  3000               	movlw	0
  2723  0508                     L7:	
  2724  0508  255D               	fcall	_AQM0802_SendData
  2725  0509                     l2044:	
  2726                           ;AQM0802.h: 98: while ( col != 16 ) {
  2727                           
  2728  0509  3010               	movlw	16
  2729  050A  0020               	movlb	0	; select bank0
  2730  050B  0627               	xorwf	AQM0802_SendStringClearing@col,w
  2731  050C  1903               	btfsc	3,2
  2732  050D  0008               	return
  2733                           
  2734                           ;AQM0802.h: 99: if ( col++ >= ( position & 0x0F ) && ( *stringPtr ) ) {
  2735  050E  300F               	movlw	15
  2736  050F  0020               	movlb	0	; select bank0
  2737  0510  0526               	andwf	AQM0802_SendStringClearing@position,w
  2738  0511  00A4               	movwf	??_AQM0802_SendStringClearing
  2739  0512  0827               	movf	AQM0802_SendStringClearing@col,w
  2740  0513  0AA7               	incf	AQM0802_SendStringClearing@col,f
  2741  0514  00A5               	movwf	??_AQM0802_SendStringClearing+1
  2742  0515  0824               	movf	??_AQM0802_SendStringClearing,w
  2743  0516  0225               	subwf	??_AQM0802_SendStringClearing+1,w
  2744  0517  1C03               	skipc
  2745  0518  2D30               	goto	l2042
  2746  0519  0822               	movf	AQM0802_SendStringClearing@stringPtr,w
  2747  051A  0084               	movwf	4
  2748  051B  0823               	movf	AQM0802_SendStringClearing@stringPtr+1,w
  2749  051C  0085               	movwf	5
  2750  051D  0012               	moviw fsr0++
  2751  051E  1903               	btfsc	3,2
  2752  051F  2D30               	goto	l2042
  2753                           
  2754                           ;AQM0802.h: 100: AQM0802_SendData( 0x40 , *stringPtr ) ;
  2755  0520  0822               	movf	AQM0802_SendStringClearing@stringPtr,w
  2756  0521  0084               	movwf	4
  2757  0522  0823               	movf	AQM0802_SendStringClearing@stringPtr+1,w
  2758  0523  0085               	movwf	5
  2759  0524  0800               	movf	0,w	;code access
  2760  0525  00A4               	movwf	??_AQM0802_SendStringClearing
  2761  0526  0824               	movf	??_AQM0802_SendStringClearing,w
  2762  0527  00A0               	movwf	AQM0802_SendData@dataByte
  2763  0528  3040               	movlw	64
  2764  0529  255D               	fcall	_AQM0802_SendData
  2765                           
  2766                           ;AQM0802.h: 101: stringPtr++ ;
  2767  052A  3001               	movlw	1
  2768  052B  0020               	movlb	0	; select bank0
  2769  052C  07A2               	addwf	AQM0802_SendStringClearing@stringPtr,f
  2770  052D  3000               	movlw	0
  2771  052E  3DA3               	addwfc	AQM0802_SendStringClearing@stringPtr+1,f
  2772                           
  2773                           ;AQM0802.h: 102: }
  2774  052F  2D09               	goto	l2044
  2775  0530                     l2042:	
  2776                           
  2777                           ;AQM0802.h: 103: else {
  2778                           ;AQM0802.h: 104: AQM0802_SendData( 0x40 , ' ' ) ;
  2779  0530  3020               	movlw	32
  2780  0531  00A4               	movwf	??_AQM0802_SendStringClearing
  2781  0532  0824               	movf	??_AQM0802_SendStringClearing,w
  2782  0533  00A0               	movwf	AQM0802_SendData@dataByte
  2783  0534  3040               	movlw	64
  2784  0535  2D08               	goto	L7
  2785  0536                     __end_of_AQM0802_SendStringClearing:	
  2786                           ;AQM0802.h: 105: }
  2787                           ;AQM0802.h: 106: }
  2788                           ;AQM0802.h: 110: return 0x00 ;
  2789                           ;	Return value of _AQM0802_SendStringClearing is never used
  2790                           
  2791                           
  2792                           	psect	text8
  2793  05A4                     __ptext8:	
  2794 ;; *************** function _AQM0802_SendString *****************
  2795 ;; Defined at:
  2796 ;;		line 41 in file "src/../../_Common/AQM0802.h"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  position        1    wreg     unsigned char 
  2799 ;;  stringPtr       1    2[BANK0 ] PTR const unsigned char 
  2800 ;;		 -> main@string(9), 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  position        1    4[BANK0 ] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      unsigned char 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1
  2812 ;;      Params:         0       1       0
  2813 ;;      Locals:         0       1       0
  2814 ;;      Temps:          0       1       0
  2815 ;;      Totals:         0       3       0
  2816 ;;Total ram usage:        3 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    2
  2819 ;; This function calls:
  2820 ;;		_AQM0802_SendData
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _AQM0802_SendString
  2828  05A4                     _AQM0802_SendString:	
  2829                           
  2830                           ;incstack = 0
  2831                           ; Regs used in _AQM0802_SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2832                           ;AQM0802_SendString@position stored from wreg
  2833  05A4  0020               	movlb	0	; select bank0
  2834  05A5  00A4               	movwf	AQM0802_SendString@position
  2835                           
  2836                           ;AQM0802.h: 57: AQM0802_SendData( 0x00 , position ) ;
  2837  05A6  0824               	movf	AQM0802_SendString@position,w
  2838  05A7  00A3               	movwf	??_AQM0802_SendString
  2839  05A8  0823               	movf	??_AQM0802_SendString,w
  2840  05A9  00A0               	movwf	AQM0802_SendData@dataByte
  2841  05AA  3000               	movlw	0
  2842  05AB  255D               	fcall	_AQM0802_SendData
  2843  05AC                     l2028:	
  2844                           ;AQM0802.h: 59: while ( *stringPtr ) {
  2845                           
  2846  05AC  0020               	movlb	0	; select bank0
  2847  05AD  0822               	movf	AQM0802_SendString@stringPtr,w
  2848  05AE  0086               	movwf	6
  2849  05AF  0187               	clrf	7
  2850  05B0  0801               	movf	1,w
  2851  05B1  1903               	btfsc	3,2
  2852  05B2  0008               	return
  2853                           
  2854                           ;AQM0802.h: 60: AQM0802_SendData( 0x40 , *stringPtr ) ;
  2855  05B3  0020               	movlb	0	; select bank0
  2856  05B4  0822               	movf	AQM0802_SendString@stringPtr,w
  2857  05B5  0086               	movwf	6
  2858  05B6  0187               	clrf	7
  2859  05B7  0801               	movf	1,w
  2860  05B8  00A3               	movwf	??_AQM0802_SendString
  2861  05B9  0823               	movf	??_AQM0802_SendString,w
  2862  05BA  00A0               	movwf	AQM0802_SendData@dataByte
  2863  05BB  3040               	movlw	64
  2864  05BC  255D               	fcall	_AQM0802_SendData
  2865                           
  2866                           ;AQM0802.h: 61: stringPtr++ ;
  2867  05BD  3001               	movlw	1
  2868  05BE  0020               	movlb	0	; select bank0
  2869  05BF  00A3               	movwf	??_AQM0802_SendString
  2870  05C0  0823               	movf	??_AQM0802_SendString,w
  2871  05C1  07A2               	addwf	AQM0802_SendString@stringPtr,f
  2872  05C2  2DAC               	goto	l2028
  2873  05C3                     __end_of_AQM0802_SendString:	
  2874                           ;AQM0802.h: 62: }
  2875                           ;AQM0802.h: 66: return 0x00 ;
  2876                           ;	Return value of _AQM0802_SendString is never used
  2877                           
  2878                           
  2879                           	psect	text9
  2880  0621                     __ptext9:	
  2881 ;; *************** function _AQM0802_SendCharacter *****************
  2882 ;; Defined at:
  2883 ;;		line 115 in file "src/../../_Common/AQM0802.h"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  position        1    wreg     unsigned char 
  2886 ;;  character       1    2[BANK0 ] unsigned char 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  position        1    4[BANK0 ] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      unsigned char 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2, status,0, pclath, cstack
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1
  2898 ;;      Params:         0       1       0
  2899 ;;      Locals:         0       1       0
  2900 ;;      Temps:          0       1       0
  2901 ;;      Totals:         0       3       0
  2902 ;;Total ram usage:        3 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    2
  2905 ;; This function calls:
  2906 ;;		_AQM0802_SendData
  2907 ;; This function is called by:
  2908 ;;		_main
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _AQM0802_SendCharacter
  2914  0621                     _AQM0802_SendCharacter:	
  2915                           
  2916                           ;incstack = 0
  2917                           ; Regs used in _AQM0802_SendCharacter: [wreg+status,2+status,0+pclath+cstack]
  2918                           ;AQM0802_SendCharacter@position stored from wreg
  2919  0621  0020               	movlb	0	; select bank0
  2920  0622  00A4               	movwf	AQM0802_SendCharacter@position
  2921                           
  2922                           ;AQM0802.h: 127: AQM0802_SendData( 0x00 , position ) ;
  2923  0623  0824               	movf	AQM0802_SendCharacter@position,w
  2924  0624  00A3               	movwf	??_AQM0802_SendCharacter
  2925  0625  0823               	movf	??_AQM0802_SendCharacter,w
  2926  0626  00A0               	movwf	AQM0802_SendData@dataByte
  2927  0627  3000               	movlw	0
  2928  0628  255D               	fcall	_AQM0802_SendData
  2929                           
  2930                           ;AQM0802.h: 128: AQM0802_SendData( 0x40 , character ) ;
  2931  0629  0020               	movlb	0	; select bank0
  2932  062A  0822               	movf	AQM0802_SendCharacter@character,w
  2933  062B  00A3               	movwf	??_AQM0802_SendCharacter
  2934  062C  0823               	movf	??_AQM0802_SendCharacter,w
  2935  062D  00A0               	movwf	AQM0802_SendData@dataByte
  2936  062E  3040               	movlw	64
  2937  062F  255D               	fcall	_AQM0802_SendData
  2938  0630  0008               	return
  2939  0631                     __end_of_AQM0802_SendCharacter:	
  2940                           ;AQM0802.h: 132: return 0x00 ;
  2941                           ;	Return value of _AQM0802_SendCharacter is never used
  2942                           
  2943                           
  2944                           	psect	text10
  2945  04C3                     __ptext10:	
  2946 ;; *************** function _AQM0802_Initialize *****************
  2947 ;; Defined at:
  2948 ;;		line 163 in file "src/../../_Common/AQM0802.h"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      unsigned char 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1
  2962 ;;      Params:         0       0       0
  2963 ;;      Locals:         0       0       0
  2964 ;;      Temps:          0       2       0
  2965 ;;      Totals:         0       2       0
  2966 ;;Total ram usage:        2 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    2
  2969 ;; This function calls:
  2970 ;;		_AQM0802_SendData
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _AQM0802_Initialize
  2978  04C3                     _AQM0802_Initialize:	
  2979                           
  2980                           ;AQM0802.h: 176: AQM0802_SendData( 0x00 , 0x39 ) ;
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _AQM0802_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2984  04C3  3039               	movlw	57
  2985  04C4  0020               	movlb	0	; select bank0
  2986  04C5  00A2               	movwf	??_AQM0802_Initialize
  2987  04C6  0822               	movf	??_AQM0802_Initialize,w
  2988  04C7  00A0               	movwf	AQM0802_SendData@dataByte
  2989  04C8  3000               	movlw	0
  2990  04C9  255D               	fcall	_AQM0802_SendData
  2991                           
  2992                           ;AQM0802.h: 177: AQM0802_SendData( 0x00 , 0x14 ) ;
  2993  04CA  3014               	movlw	20
  2994  04CB  0020               	movlb	0	; select bank0
  2995  04CC  00A2               	movwf	??_AQM0802_Initialize
  2996  04CD  0822               	movf	??_AQM0802_Initialize,w
  2997  04CE  00A0               	movwf	AQM0802_SendData@dataByte
  2998  04CF  3000               	movlw	0
  2999  04D0  255D               	fcall	_AQM0802_SendData
  3000                           
  3001                           ;AQM0802.h: 178: AQM0802_SendData( 0x00 , 0x70 ) ;
  3002  04D1  3070               	movlw	112
  3003  04D2  0020               	movlb	0	; select bank0
  3004  04D3  00A2               	movwf	??_AQM0802_Initialize
  3005  04D4  0822               	movf	??_AQM0802_Initialize,w
  3006  04D5  00A0               	movwf	AQM0802_SendData@dataByte
  3007  04D6  3000               	movlw	0
  3008  04D7  255D               	fcall	_AQM0802_SendData
  3009                           
  3010                           ;AQM0802.h: 179: AQM0802_SendData( 0x00 , 0x56 ) ;
  3011  04D8  3056               	movlw	86
  3012  04D9  0020               	movlb	0	; select bank0
  3013  04DA  00A2               	movwf	??_AQM0802_Initialize
  3014  04DB  0822               	movf	??_AQM0802_Initialize,w
  3015  04DC  00A0               	movwf	AQM0802_SendData@dataByte
  3016  04DD  3000               	movlw	0
  3017  04DE  255D               	fcall	_AQM0802_SendData
  3018                           
  3019                           ;AQM0802.h: 180: AQM0802_SendData( 0x00 , 0x6c ) ;
  3020  04DF  306C               	movlw	108
  3021  04E0  0020               	movlb	0	; select bank0
  3022  04E1  00A2               	movwf	??_AQM0802_Initialize
  3023  04E2  0822               	movf	??_AQM0802_Initialize,w
  3024  04E3  00A0               	movwf	AQM0802_SendData@dataByte
  3025  04E4  3000               	movlw	0
  3026  04E5  255D               	fcall	_AQM0802_SendData
  3027                           
  3028                           ;AQM0802.h: 183: _delay((unsigned long)((200)*(1000000L/4000.0))) ;
  3029  04E6  3041               	movlw	65
  3030  04E7  0020               	movlb	0	; select bank0
  3031  04E8  00A3               	movwf	??_AQM0802_Initialize+1
  3032  04E9  30EE               	movlw	238
  3033  04EA  00A2               	movwf	??_AQM0802_Initialize
  3034  04EB                     u2207:	
  3035  04EB  0BA2               	decfsz	??_AQM0802_Initialize,f
  3036  04EC  2CEB               	goto	u2207
  3037  04ED  0BA3               	decfsz	??_AQM0802_Initialize+1,f
  3038  04EE  2CEB               	goto	u2207
  3039  04EF  0000               	nop
  3040                           
  3041                           ;AQM0802.h: 189: AQM0802_SendData( 0x00 , 0x38 ) ;
  3042  04F0  3038               	movlw	56
  3043  04F1  0020               	movlb	0	; select bank0
  3044  04F2  00A2               	movwf	??_AQM0802_Initialize
  3045  04F3  0822               	movf	??_AQM0802_Initialize,w
  3046  04F4  00A0               	movwf	AQM0802_SendData@dataByte
  3047  04F5  3000               	movlw	0
  3048  04F6  255D               	fcall	_AQM0802_SendData
  3049                           
  3050                           ;AQM0802.h: 190: AQM0802_SendData( 0x00 , 0x0C ) ;
  3051  04F7  300C               	movlw	12
  3052  04F8  0020               	movlb	0	; select bank0
  3053  04F9  00A2               	movwf	??_AQM0802_Initialize
  3054  04FA  0822               	movf	??_AQM0802_Initialize,w
  3055  04FB  00A0               	movwf	AQM0802_SendData@dataByte
  3056  04FC  3000               	movlw	0
  3057  04FD  255D               	fcall	_AQM0802_SendData
  3058  04FE  0008               	return
  3059  04FF                     __end_of_AQM0802_Initialize:	
  3060                           ;AQM0802.h: 193: return 0x00 ;
  3061                           ;	Return value of _AQM0802_Initialize is never used
  3062                           
  3063                           
  3064                           	psect	text11
  3065  05DF                     __ptext11:	
  3066 ;; *************** function _AQM0802_ClearRow *****************
  3067 ;; Defined at:
  3068 ;;		line 138 in file "src/../../_Common/AQM0802.h"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  rowSelect       1    wreg     unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  rowSelect       1    3[BANK0 ] unsigned char 
  3073 ;;  count           1    4[BANK0 ] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      unsigned char 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0, pclath, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMMON   BANK0   BANK1
  3083 ;;      Params:         0       0       0
  3084 ;;      Locals:         0       2       0
  3085 ;;      Temps:          0       1       0
  3086 ;;      Totals:         0       3       0
  3087 ;;Total ram usage:        3 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		_AQM0802_SendData
  3092 ;; This function is called by:
  3093 ;;		_main
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           
  3098                           ;psect for function _AQM0802_ClearRow
  3099  05DF                     _AQM0802_ClearRow:	
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _AQM0802_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  3103                           ;AQM0802_ClearRow@rowSelect stored from wreg
  3104  05DF  0020               	movlb	0	; select bank0
  3105  05E0  00A3               	movwf	AQM0802_ClearRow@rowSelect
  3106                           
  3107                           ;AQM0802.h: 150: AQM0802_SendData( 0x00 , rowSelect & 0xF0 ) ;
  3108  05E1  0823               	movf	AQM0802_ClearRow@rowSelect,w
  3109  05E2  39F0               	andlw	240
  3110  05E3  00A2               	movwf	??_AQM0802_ClearRow
  3111  05E4  0822               	movf	??_AQM0802_ClearRow,w
  3112  05E5  00A0               	movwf	AQM0802_SendData@dataByte
  3113  05E6  3000               	movlw	0
  3114  05E7  255D               	fcall	_AQM0802_SendData
  3115                           
  3116                           ;AQM0802.h: 152: Uint08_t count = 0 ;
  3117  05E8  0020               	movlb	0	; select bank0
  3118  05E9  01A4               	clrf	AQM0802_ClearRow@count
  3119  05EA                     l2056:	
  3120                           ;AQM0802.h: 153: while ( count++ != 16 )
  3121                           
  3122  05EA  3001               	movlw	1
  3123  05EB  0020               	movlb	0	; select bank0
  3124  05EC  00A2               	movwf	??_AQM0802_ClearRow
  3125  05ED  0822               	movf	??_AQM0802_ClearRow,w
  3126  05EE  07A4               	addwf	AQM0802_ClearRow@count,f
  3127  05EF  3011               	movlw	17
  3128  05F0  0624               	xorwf	AQM0802_ClearRow@count,w
  3129  05F1  1903               	btfsc	3,2
  3130  05F2  0008               	return
  3131                           
  3132                           ;AQM0802.h: 154: AQM0802_SendData( 0x40 , ' ' ) ;
  3133  05F3  3020               	movlw	32
  3134  05F4  00A2               	movwf	??_AQM0802_ClearRow
  3135  05F5  0822               	movf	??_AQM0802_ClearRow,w
  3136  05F6  00A0               	movwf	AQM0802_SendData@dataByte
  3137  05F7  3040               	movlw	64
  3138  05F8  255D               	fcall	_AQM0802_SendData
  3139  05F9  2DEA               	goto	l2056
  3140  05FA                     __end_of_AQM0802_ClearRow:	
  3141                           ;AQM0802.h: 158: return 0x00 ;
  3142                           ;	Return value of _AQM0802_ClearRow is never used
  3143                           
  3144                           
  3145                           	psect	text12
  3146  055D                     __ptext12:	
  3147 ;; *************** function _AQM0802_SendData *****************
  3148 ;; Defined at:
  3149 ;;		line 239 in file "src/../../_Common/AQM0802.h"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  controlByte     1    wreg     unsigned char 
  3152 ;;  dataByte        1    0[BANK0 ] unsigned char 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  controlByte     1    1[BANK0 ] unsigned char 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      unsigned char 
  3157 ;; Registers used:
  3158 ;;		wreg, status,2
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1
  3164 ;;      Params:         0       1       0
  3165 ;;      Locals:         0       1       0
  3166 ;;      Temps:          0       0       0
  3167 ;;      Totals:         0       2       0
  3168 ;;Total ram usage:        2 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    1
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_AQM0802_SendString
  3175 ;;		_AQM0802_SendStringClearing
  3176 ;;		_AQM0802_SendCharacter
  3177 ;;		_AQM0802_ClearRow
  3178 ;;		_AQM0802_Initialize
  3179 ;;		_main
  3180 ;;		_AQM0802_Clear
  3181 ;;		_AQM0802_SetCgram
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _AQM0802_SendData
  3187  055D                     _AQM0802_SendData:	
  3188                           
  3189                           ;incstack = 0
  3190                           ; Regs used in _AQM0802_SendData: [wreg+status,2]
  3191                           ;AQM0802_SendData@controlByte stored from wreg
  3192  055D  0020               	movlb	0	; select bank0
  3193  055E  00A1               	movwf	AQM0802_SendData@controlByte
  3194  055F                     l122:	
  3195                           ;AQM0802.h: 241: while(!PIR1bits.TMR2IF); ;
  3196                           
  3197  055F  1C91               	btfss	17,1	;volatile
  3198  0560  2D5F               	goto	l122
  3199                           
  3200                           ;AQM0802.h: 243: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); ;
  3201  0561  0024               	movlb	4	; select bank4
  3202  0562  1416               	bsf	22,0	;volatile
  3203  0563                     l125:	
  3204  0563  1816               	btfsc	22,0	;volatile
  3205  0564  2D63               	goto	l125
  3206                           
  3207                           ;AQM0802.h: 244: PIR1bits.SSP1IF=0; ;
  3208  0565  0020               	movlb	0	; select bank0
  3209  0566  1191               	bcf	17,3	;volatile
  3210                           
  3211                           ;AQM0802.h: 274: SSP1BUF=0x7c; ;
  3212  0567  307C               	movlw	124
  3213  0568  0024               	movlb	4	; select bank4
  3214  0569  0091               	movwf	17	;volatile
  3215  056A                     l128:	
  3216                           ;AQM0802.h: 275: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  3217                           
  3218  056A  0020               	movlb	0	; select bank0
  3219  056B  1D91               	btfss	17,3	;volatile
  3220  056C  2D6A               	goto	l128
  3221  056D  1191               	bcf	17,3	;volatile
  3222                           
  3223                           ;AQM0802.h: 278: SSP1BUF=controlByte; ;
  3224  056E  0821               	movf	AQM0802_SendData@controlByte,w
  3225  056F  0024               	movlb	4	; select bank4
  3226  0570  0091               	movwf	17	;volatile
  3227  0571                     l131:	
  3228                           ;AQM0802.h: 279: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  3229                           
  3230  0571  0020               	movlb	0	; select bank0
  3231  0572  1D91               	btfss	17,3	;volatile
  3232  0573  2D71               	goto	l131
  3233  0574  1191               	bcf	17,3	;volatile
  3234                           
  3235                           ;AQM0802.h: 282: SSP1BUF=dataByte; ;
  3236  0575  0820               	movf	AQM0802_SendData@dataByte,w
  3237  0576  0024               	movlb	4	; select bank4
  3238  0577  0091               	movwf	17	;volatile
  3239  0578                     l134:	
  3240                           ;AQM0802.h: 283: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  3241                           
  3242  0578  0020               	movlb	0	; select bank0
  3243  0579  1D91               	btfss	17,3	;volatile
  3244  057A  2D78               	goto	l134
  3245  057B  1191               	bcf	17,3	;volatile
  3246                           
  3247                           ;AQM0802.h: 287: SSP1CON2bits.PEN=1;while(SSP1CON2bits.PEN); ;
  3248  057C  0024               	movlb	4	; select bank4
  3249  057D  1516               	bsf	22,2	;volatile
  3250  057E                     l137:	
  3251  057E  1916               	btfsc	22,2	;volatile
  3252  057F  2D7E               	goto	l137
  3253                           
  3254                           ;AQM0802.h: 288: TMR2=0x00;PIR1bits.TMR2IF=0; ;
  3255  0580  0020               	movlb	0	; select bank0
  3256  0581  019A               	clrf	26	;volatile
  3257  0582  1091               	bcf	17,1	;volatile
  3258  0583  0008               	return
  3259  0584                     __end_of_AQM0802_SendData:	
  3260                           ;AQM0802.h: 293: return 0x00 ;
  3261                           ;	Return value of _AQM0802_SendData is never used
  3262                           
  3263                           
  3264                           	psect	intentry
  3265  0004                     __pintentry:	
  3266 ;; *************** function __ *****************
  3267 ;; Defined at:
  3268 ;;		line 492 in file "src/main.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  adValue         2    3[COMMON] unsigned int 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;		None               void
  3275 ;; Registers used:
  3276 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1
  3282 ;;      Params:         0       0       0
  3283 ;;      Locals:         2       0       0
  3284 ;;      Temps:          3       0       0
  3285 ;;      Totals:         5       0       0
  3286 ;;Total ram usage:        5 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		Interrupt level 1
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295  0004                     __:	
  3296                           
  3297                           ;incstack = 0
  3298                           ; Regs used in __: [wreg+fsr1l+fsr1h+status,2+status,0]
  3299  0004  3180               	pagesel	$
  3300  0005  0020               	movlb	0	; select bank0
  3301  0006  087F               	movf	127,w
  3302  0007  00F2               	movwf	??__+2
  3303                           
  3304                           ;main.c: 494: if( IOCAFbits.IOCAF3 ) {
  3305  0008  0027               	movlb	7	; select bank7
  3306  0009  1D93               	btfss	19,3	;volatile
  3307  000A  2811               	goto	i1l282
  3308                           
  3309                           ;main.c: 495: IOCAFbits.IOCAF3 = 0 ;
  3310  000B  1193               	bcf	19,3	;volatile
  3311                           
  3312                           ;main.c: 496: WDTCONbits.SWDTEN = 1 ;
  3313  000C  0021               	movlb	1	; select bank1
  3314  000D  1417               	bsf	23,0	;volatile
  3315                           
  3316                           ;main.c: 497: INTCONbits.TMR0IF = 0 ;
  3317  000E  110B               	bcf	11,2	;volatile
  3318                           
  3319                           ;main.c: 498: INTCONbits.TMR0IE = 1 ;
  3320  000F  168B               	bsf	11,5	;volatile
  3321                           
  3322                           ;main.c: 499: INTCONbits.IOCIE = 0 ;
  3323  0010  118B               	bcf	11,3	;volatile
  3324  0011                     i1l282:	
  3325                           
  3326                           ;main.c: 500: }
  3327                           ;main.c: 502: if( !INTCONbits.TMR0IF ) return ;
  3328  0011  1D0B               	btfss	11,2	;volatile
  3329  0012  288E               	goto	i1l284
  3330                           
  3331                           ;main.c: 503: INTCONbits.TMR0IF = 0 ;
  3332  0013  110B               	bcf	11,2	;volatile
  3333                           
  3334                           ;main.c: 506: static Uint08_t interruptCount = 0 ;
  3335                           ;main.c: 507: if( ! --interruptCount ) {
  3336  0014  3001               	movlw	1
  3337  0015  02F8               	subwf	__@interruptCount,f
  3338  0016  1D03               	btfss	3,2
  3339  0017  2860               	goto	i1l287
  3340                           
  3341                           ;main.c: 508: interruptCount = 10 ;
  3342  0018  300A               	movlw	10
  3343  0019  00F0               	movwf	??__
  3344  001A  0870               	movf	??__,w
  3345  001B  00F8               	movwf	__@interruptCount
  3346                           
  3347                           ;main.c: 510: portAState_.byte = (~PORTA&0b00101001); ;
  3348  001C  0020               	movlb	0	; select bank0
  3349  001D  090C               	comf	12,w	;volatile
  3350  001E  3929               	andlw	41
  3351  001F  00F0               	movwf	??__
  3352  0020  0870               	movf	??__,w
  3353  0021  00CB               	movwf	_portAState_
  3354                           
  3355                           ;main.c: 512: if( portAState_.up ) {
  3356  0022  1ECB               	btfss	_portAState_,5
  3357  0023  2832               	goto	i1l1936
  3358                           
  3359                           ;main.c: 513: if( ++keyCount_.up == 0x40 ) {
  3360  0024  3001               	movlw	1
  3361  0025  00F0               	movwf	??__
  3362  0026  0870               	movf	??__,w
  3363  0027  07F5               	addwf	_keyCount_,f
  3364  0028  3040               	movlw	64
  3365  0029  0675               	xorwf	_keyCount_,w
  3366  002A  1D03               	btfss	3,2
  3367  002B  2833               	goto	i1l1938
  3368                           
  3369                           ;main.c: 514: keyCount_.up = 0x3C ;
  3370  002C  303C               	movlw	60
  3371  002D  00F0               	movwf	??__
  3372  002E  0870               	movf	??__,w
  3373  002F  00F5               	movwf	_keyCount_
  3374                           
  3375                           ;main.c: 515: events_.input.keyPressUp=1 ;
  3376  0030  14C2               	bsf	_events_,1
  3377                           
  3378                           ;main.c: 516: }
  3379                           ;main.c: 517: }
  3380  0031  2833               	goto	i1l1938
  3381  0032                     i1l1936:	
  3382                           
  3383                           ;main.c: 518: else
  3384                           ;main.c: 519: keyCount_.up = 0 ;
  3385  0032  01F5               	clrf	_keyCount_
  3386  0033                     i1l1938:	
  3387                           
  3388                           ;main.c: 521: if( portAState_.down ) {
  3389  0033  1C4B               	btfss	_portAState_,0
  3390  0034  2843               	goto	i1l1946
  3391                           
  3392                           ;main.c: 522: if( ++keyCount_.down == 0x40 ) {
  3393  0035  3001               	movlw	1
  3394  0036  00F0               	movwf	??__
  3395  0037  0870               	movf	??__,w
  3396  0038  07F6               	addwf	_keyCount_+1,f
  3397  0039  3040               	movlw	64
  3398  003A  0676               	xorwf	_keyCount_+1,w
  3399  003B  1D03               	btfss	3,2
  3400  003C  2844               	goto	i1l1948
  3401                           
  3402                           ;main.c: 523: keyCount_.down = 0x3C ;
  3403  003D  303C               	movlw	60
  3404  003E  00F0               	movwf	??__
  3405  003F  0870               	movf	??__,w
  3406  0040  00F6               	movwf	_keyCount_+1
  3407                           
  3408                           ;main.c: 524: events_.input.keyPressDown=1 ;
  3409  0041  1542               	bsf	_events_,2
  3410                           
  3411                           ;main.c: 525: }
  3412                           ;main.c: 526: }
  3413  0042  2844               	goto	i1l1948
  3414  0043                     i1l1946:	
  3415                           
  3416                           ;main.c: 527: else
  3417                           ;main.c: 528: keyCount_.down = 0 ;
  3418  0043  01F6               	clrf	_keyCount_+1
  3419  0044                     i1l1948:	
  3420                           
  3421                           ;main.c: 532: if( machineState_ == STATE_SLEEP ) {
  3422  0044  3005               	movlw	5
  3423  0045  0648               	xorwf	_machineState_,w
  3424  0046  1D03               	btfss	3,2
  3425  0047  2853               	goto	i1l1956
  3426                           
  3427                           ;main.c: 533: if( portAState_.menu ) {
  3428  0048  1DCB               	btfss	_portAState_,3
  3429  0049  285F               	goto	i1l1962
  3430                           
  3431                           ;main.c: 534: if( ! --sleepTimer_ )
  3432  004A  3001               	movlw	1
  3433  004B  02C4               	subwf	_sleepTimer_,f
  3434  004C  3000               	movlw	0
  3435  004D  3BC5               	subwfb	_sleepTimer_+1,f
  3436  004E  0844               	movf	_sleepTimer_,w
  3437  004F  0445               	iorwf	_sleepTimer_+1,w
  3438  0050  1D03               	btfss	3,2
  3439  0051  2860               	goto	i1l287
  3440  0052  2856               	goto	i1l1958
  3441  0053                     i1l1956:	
  3442                           ;main.c: 539: }
  3443                           ;main.c: 540: }
  3444                           
  3445                           ;main.c: 537: else {
  3446                           ;main.c: 538: events_.output.sleep=1 ;
  3447                           
  3448                           ;main.c: 536: }
  3449                           
  3450                           ;main.c: 535: events_.output.wake=1 ;
  3451                           
  3452                           
  3453                           ;main.c: 541: else {
  3454                           ;main.c: 542: if( portAState_.byte ) {
  3455  0053  084B               	movf	_portAState_,w
  3456  0054  1903               	btfsc	3,2
  3457  0055  2858               	goto	i1l1960
  3458  0056                     i1l1958:	
  3459                           
  3460                           ;main.c: 543: events_.output.wake=1 ;
  3461  0056  1743               	bsf	_events_+1,6
  3462                           
  3463                           ;main.c: 544: }
  3464  0057  2860               	goto	i1l287
  3465  0058                     i1l1960:	
  3466                           
  3467                           ;main.c: 545: else {
  3468                           ;main.c: 546: if( ! --sleepTimer_ )
  3469  0058  3001               	movlw	1
  3470  0059  02C4               	subwf	_sleepTimer_,f
  3471  005A  3000               	movlw	0
  3472  005B  3BC5               	subwfb	_sleepTimer_+1,f
  3473  005C  0844               	movf	_sleepTimer_,w
  3474  005D  0445               	iorwf	_sleepTimer_+1,w
  3475  005E  1903               	btfsc	3,2
  3476  005F                     i1l1962:	
  3477                           
  3478                           ;main.c: 547: events_.output.sleep=1 ;
  3479  005F  16C3               	bsf	_events_+1,5
  3480  0060                     i1l287:	
  3481                           
  3482                           ;main.c: 548: }
  3483                           ;main.c: 549: }
  3484                           ;main.c: 551: }
  3485                           ;main.c: 554: if( !ADCON0bits.GO ) {
  3486  0060  0021               	movlb	1	; select bank1
  3487  0061  189D               	btfsc	29,1	;volatile
  3488  0062  288A               	goto	i1l1978
  3489                           
  3490                           ;main.c: 556: static Uint08_t bufferPostiion = 0 ;
  3491                           ;main.c: 557: ADValue_t adValue = ( ( ( (Uint16_t)ADRESH ) << 8 ) | ADRESL ) ;
  3492  0063  081C               	movf	28,w	;volatile
  3493  0064  00F4               	movwf	__@adValue+1
  3494  0065  081B               	movf	27,w	;volatile
  3495  0066  00F3               	movwf	__@adValue
  3496                           
  3497                           ;main.c: 558: ADCON0bits.GO = 1 ;
  3498  0067  149D               	bsf	29,1	;volatile
  3499                           
  3500                           ;main.c: 560: sumOfBuffer_ -= adBuffer_[ bufferPostiion ] ;
  3501  0068  3577               	lslf	__@bufferPostiion,w
  3502  0069  3EA0               	addlw	(low (_adBuffer_| 0))& (0+255)
  3503  006A  0086               	movwf	6
  3504  006B  0187               	clrf	7
  3505  006C  3F40               	moviw [0]fsr1
  3506  006D  00F0               	movwf	??__
  3507  006E  3F41               	moviw [1]fsr1
  3508  006F  00F1               	movwf	??__+1
  3509  0070  0870               	movf	??__,w
  3510  0071  0020               	movlb	0	; select bank0
  3511  0072  02C6               	subwf	_sumOfBuffer_,f
  3512  0073  0871               	movf	??__+1,w
  3513  0074  3BC7               	subwfb	_sumOfBuffer_+1,f
  3514                           
  3515                           ;main.c: 561: sumOfBuffer_ += adValue ;
  3516  0075  0873               	movf	__@adValue,w
  3517  0076  07C6               	addwf	_sumOfBuffer_,f
  3518  0077  0874               	movf	__@adValue+1,w
  3519  0078  3DC7               	addwfc	_sumOfBuffer_+1,f
  3520                           
  3521                           ;main.c: 562: adBuffer_[ bufferPostiion ] = adValue ;
  3522  0079  3577               	lslf	__@bufferPostiion,w
  3523  007A  3EA0               	addlw	(low (_adBuffer_| 0))& (0+255)
  3524  007B  0086               	movwf	6
  3525  007C  0187               	clrf	7
  3526  007D  0873               	movf	__@adValue,w
  3527  007E  3FC0               	movwi [0]fsr1
  3528  007F  0874               	movf	__@adValue+1,w
  3529  0080  3FC1               	movwi [1]fsr1
  3530                           
  3531                           ;main.c: 564: if( ++bufferPostiion == 16 ) bufferPostiion = 0 ;
  3532  0081  3001               	movlw	1
  3533  0082  00F0               	movwf	??__
  3534  0083  0870               	movf	??__,w
  3535  0084  07F7               	addwf	__@bufferPostiion,f
  3536  0085  3010               	movlw	16
  3537  0086  0677               	xorwf	__@bufferPostiion,w
  3538  0087  1903               	btfsc	3,2
  3539  0088  01F7               	clrf	__@bufferPostiion
  3540                           
  3541                           ;main.c: 566: events_.output.changeValue=1 ;
  3542  0089  15C3               	bsf	_events_+1,3
  3543  008A                     i1l1978:	
  3544                           
  3545                           ;main.c: 568: }
  3546                           ;main.c: 570: if( INTCONbits.TMR0IF ) events_.output.error=1 ;
  3547  008A  1D0B               	btfss	11,2	;volatile
  3548  008B  288E               	goto	i1l284
  3549  008C  0020               	movlb	0	; select bank0
  3550  008D  17C3               	bsf	_events_+1,7
  3551  008E                     i1l284:	
  3552  008E  0872               	movf	??__+2,w
  3553  008F  0020               	movlb	0	; select bank0
  3554  0090  00FF               	movwf	127
  3555  0091  0009               	retfie
  3556  0092                     __end_of__:	
  3557  007E                     btemp	set	126	;btemp
  3558  007E                     wtemp	set	126
  3559  007E                     wtemp0	set	126
  3560  0080                     wtemp1	set	128
  3561  0082                     wtemp2	set	130
  3562  0084                     wtemp3	set	132
  3563  0086                     wtemp4	set	134
  3564  0088                     wtemp5	set	136
  3565  007F                     wtemp6	set	127
  3566  007E                     ttemp	set	126
  3567  007E                     ttemp0	set	126
  3568  0081                     ttemp1	set	129
  3569  0084                     ttemp2	set	132
  3570  0087                     ttemp3	set	135
  3571  007F                     ttemp4	set	127
  3572  007E                     ltemp	set	126
  3573  007E                     ltemp0	set	126
  3574  0082                     ltemp1	set	130
  3575  0086                     ltemp2	set	134
  3576  0080                     ltemp3	set	128


Data Sizes:
    Strings     83
    Constant    31
    Data        13
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     32      58
    BANK1            32      0      32

Pointer List with Targets:

    currentMessage_	PTR const unsigned char  size(2) Largest target is 2048
		 -> ROM(CODE[2048]), STR_4(CODE[8]), STR_3(CODE[9]), STR_2(CODE[8]), 

    MESSAGE_MENU	PTR const unsigned char [6] size(2) Largest target is 8
		 -> STR_14(CODE[8]), STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[4]), 
		 -> STR_10(CODE[8]), STR_9(CODE[8]), 

    S514$ERROR	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), 

    MESSAGE.ERROR	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), 

    S514$VERSION	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[8]), 

    MESSAGE.VERSION	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[8]), 

    S511$VALUE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_6(CODE[9]), 

    MESSAGE.SLEEP.VALUE	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_6(CODE[9]), 

    S511$TITLE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_5(CODE[6]), 

    MESSAGE.SLEEP.TITLE	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_5(CODE[6]), 

    S514$AD_VALUE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), 

    MESSAGE.AD_VALUE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), 

    S514$BAR	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    MESSAGE.BAR	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    S514$VOLTAGE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    MESSAGE.VOLTAGE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    S514$BOOT	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    MESSAGE.BOOT	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    Configuration_Load@config	PTR struct . size(1) Largest target is 1
		 -> configuration_(BANK0[1]), 

    Configuration_Load@ptrConfig	PTR unsigned char  size(1) Largest target is 1
		 -> configuration_(BANK0[1]), 

    Configuration_Save@config	PTR struct . size(1) Largest target is 1
		 -> configuration_(BANK0[1]), 

    Configuration_Save@ptrConfig	PTR unsigned char  size(1) Largest target is 1
		 -> configuration_(BANK0[1]), 

    AQM0802_SendStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 2048
		 -> main@string(BANK0[9]), STR_15(CODE[9]), STR_14(CODE[8]), STR_13(CODE[6]), 
		 -> STR_12(CODE[8]), STR_11(CODE[4]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> ROM(CODE[2048]), STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[9]), 
		 -> STR_5(CODE[6]), STR_4(CODE[8]), STR_3(CODE[9]), STR_2(CODE[8]), 
		 -> STR_1(CODE[8]), 

    AQM0802_SendString@stringPtr	PTR const unsigned char  size(1) Largest target is 9
		 -> main@string(BANK0[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under __ in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_AQM0802_SendStringClearing
    _Configuration_Save->_Configuration_WriteByte
    _Configuration_Load->_Configuration_ReadByte
    _AQM0802_SendStringClearing->_AQM0802_SendData
    _AQM0802_SendString->_AQM0802_SendData
    _AQM0802_SendCharacter->_AQM0802_SendData
    _AQM0802_Initialize->_AQM0802_SendData
    _AQM0802_ClearRow->_AQM0802_SendData

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   17113
                                              8 BANK0     24    24      0
                   _AQM0802_ClearRow
                 _AQM0802_Initialize
              _AQM0802_SendCharacter
                   _AQM0802_SendData
                 _AQM0802_SendString
         _AQM0802_SendStringClearing
                 _Configuration_Load
                 _Configuration_Save
                             ___wmul
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     646
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Configuration_Save                                   5     5      0     402
                                              2 BANK0      5     5      0
            _Configuration_WriteByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_WriteByte                              2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _Configuration_Load                                   5     5      0     281
                                              1 BANK0      5     5      0
             _Configuration_ReadByte
 ---------------------------------------------------------------------------------
 (2) _Configuration_ReadByte                               1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _AQM0802_SendStringClearing                           6     4      2    3134
                                              2 BANK0      6     4      2
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_SendString                                   3     2      1    2318
                                              2 BANK0      3     2      1
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_SendCharacter                                3     2      1    2194
                                              2 BANK0      3     2      1
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_Initialize                                   2     2      0    2042
                                              2 BANK0      2     2      0
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_ClearRow                                     3     3      0    2107
                                              2 BANK0      3     3      0
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (2) _AQM0802_SendData                                     2     1      1    2042
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    5     5      0      45
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AQM0802_ClearRow
     _AQM0802_SendData
   _AQM0802_Initialize
     _AQM0802_SendData
   _AQM0802_SendCharacter
     _AQM0802_SendData
   _AQM0802_SendData
   _AQM0802_SendString
     _AQM0802_SendData
   _AQM0802_SendStringClearing
     _AQM0802_SendData
   _Configuration_Load
     _Configuration_ReadByte
   _Configuration_Save
     _Configuration_WriteByte
   ___wmul
   _initialize

 __ (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      63       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     20      3A       6       72.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      63       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Aug 15 13:12:24 2015

                         _ROW_SELECT 041D                                    __ 0004  
                        __CFG_CP$OFF 0000                                   ?__ 0070  
                ___wmul@multiplicand 0022                                  ??__ 0070  
                                l122 055F                                  l210 015B  
                                l131 0571                                  l125 0563  
                                l221 01AC                                  l134 0578  
                                l150 05A2                                  l215 0173  
                                l128 056A                                  l144 0559  
                                l137 057E                                  l154 060C  
                                l234 029D                                  l228 020C  
                                l229 01EF                                  l195 0104  
                                l276 0393                                  l189 00B2  
                                l390 05CC                                  _PR2 001B  
                       __CFG_CPD$OFF 0000       __size_of_AQM0802_SendCharacter 0010  
                       __CFG_BORV$LO 0000                                  wreg 0009  
      __end_of_AQM0802_SendCharacter 0631                         __CFG_IESO$ON 0000  
        __size_of_AQM0802_Initialize 003C                         __CFG_LVP$OFF 0000  
                    __end_of_MESSAGE 0410                                 l2042 0530  
                               l2106 05C6                                 l2210 0120  
                               l2028 05AC                                 l2044 0509  
                               l2220 013C                                 l2056 05EA  
                               l2400 033B                                 l2320 0210  
                               l2304 01FA                                 l2410 034B  
                               l2330 0252                                 l2242 0159  
                               l2218 012B                                 l2170 00E3  
                               l2420 0362                                 l2412 0358  
                               l2404 0343                                 l2332 0268  
                               l2244 015E                                 l2260 0182  
                               l2316 0204                                 l2086 0542  
                               l2430 0384                                 l2334 026B  
                               l2326 0219                                 l2342 028B  
                               l2262 0195                                 l2254 017E  
                               l2238 0154                                 l2166 00DB  
                               l2336 027D                                 l2280 01CC  
                               l2264 0197                                 l2256 0180  
                               l2248 0167                                 l2176 00F2  
                               l2098 058F                                 l2442 03A6  
                               l2362 02C4                                 l2354 02AC  
                               l2346 02A2                                 l2282 01CD  
                               l2436 0396                                 l2428 0375  
                               l2364 02DA                                 l2348 02A7  
                               l2268 019D                                 l2438 039E  
                               l2390 031B                                 l2374 02F9  
                               l2294 01ED                                 l2198 0111  
                               l2384 0307                                 l2368 02E2  
                               l2448 03AE                                 l2378 0301  
                               l2396 0320                                 l2398 0334  
                               STR_1 043A                                 STR_2 0442  
                               STR_3 0428                                 STR_4 044A  
                               STR_5 0462                                 STR_6 0431  
                               STR_7 0452                                 STR_8 0468  
                               STR_9 045A                                 u2207 04EB  
                               u2075 02CA                                 u1755 05CD  
                               u1765 05D2                                 _TMR0 0015  
                               _TMR2 001A                   main@currentAdValue 003B  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _main 00AF                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0092                                 ttemp 007E  
                               wtemp 007E                         main@barImage 002F  
        __size_of_AQM0802_SendString 001F                                ?_main 0070  
        AQM0802_SendData@controlByte 0021              _Configuration_WriteByte 05FA  
                              STR_10 0442                                STR_11 046E  
                              STR_12 044A                                STR_13 0462  
                              STR_14 0452                                STR_15 041F  
               main@OMPARE_UNITS_877 041A                                i1l282 0011  
                              i1l284 008E                                i1l287 0060  
        Configuration_Save@ptrConfig 0024                   main@prevPortAState 004C  
                              _PORTA 000C                                _TRISA 008C  
                      __CFG_PWRTE$ON 0000                                main@i 003A  
                       main@tmpValue 002A                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                     __CFG_MCLRE$OFF 0000                      __initialization 0093  
                       __end_of_main 03B8                    ?_AQM0802_ClearRow 0070  
                             ??_main 0028                   ??_AQM0802_ClearRow 0022  
                 _Configuration_Load 0584                   _Configuration_Save 0536  
                     __CFG_PLLEN$OFF 0000                AQM0802_ClearRow@count 0024  
           Configuration_Load@config 0024                        main@isNonZero 002B  
                  ?_AQM0802_SendData 0020                  ?_Configuration_Load 0070  
                ?_Configuration_Save 0070                               _ADRESH 009C  
                             _EEADRH 0192                               _ADRESL 009B  
                             _EEADRL 0191                               _EEDATH 0194  
                             _EEDATL 0193                               _EECON2 0196  
                             _ANSELA 018C                   ??_AQM0802_SendData 0075  
                             i1l1960 0058                               i1l1936 0032  
                             i1l1962 005F                               i1l1946 0043  
                             i1l1938 0033                               i1l1956 0053  
                             i1l1948 0044                               i1l1958 0056  
                             i1l1978 008A                               _TMR0IE 005D  
                             _TMR0IF 005A                 ??_Configuration_Load 0021  
               ??_Configuration_Save 0022                               ___wmul 05C3  
                     __CFG_STVREN$ON 0000            ??_Configuration_WriteByte 0075  
                    _currentMessage_ 0040            AQM0802_ClearRow@rowSelect 0023  
     Configuration_WriteByte@address 0021              __end_of__initialization 00AD  
           Configuration_Save@config 0025                       __pcstackCOMMON 0070  
                       __pidataBANK0 0631             ??_Configuration_ReadByte 0075  
                     _OPTION_REGbits 0095                           __pbssBANK0 0040  
                         __pbssBANK1 00A0        Configuration_ReadByte@address 0020  
                         __pmaintext 00AF                              ?___wmul 0020  
                         __pintentry 0004         ??_AQM0802_SendStringClearing 0024  
                         __size_of__ 008E           __end_of_AQM0802_Initialize 04FF  
                            _MESSAGE 0400          Configuration_Load@ptrConfig 0023  
                     main@keyPressed 0039                              _SSP1ADD 0212  
                            _SSP1BUF 0211                _AQM0802_SendCharacter 0621  
                            _SSPSTAT 0214  AQM0802_SendStringClearing@stringPtr 0022  
         __end_of_AQM0802_SendString 05C3  __size_of_AQM0802_SendStringClearing 0037  
                  main@COMPARE_UNITS 0410                      __size_of___wmul 001C  
    __size_of_Configuration_ReadByte 0010                           _menuState_ 004A  
                         _initialize 0472                              __ptext1 0472  
                            __ptext2 05C3                              __ptext3 0536  
                            __ptext4 05FA                              __ptext5 0584  
                            __ptext6 0611                              __ptext7 04FF  
                            __ptext8 05A4                              __ptext9 0621  
                          _T1CONbits 0018                            _T2CONbits 001C  
                            _events_ 0042           AQM0802_SendString@position 0024  
                          _IOCAFbits 0393                            _IOCANbits 0392  
                            clrloop0 063F            __size_of_AQM0802_ClearRow 001B  
               end_of_initialization 00AD                   __end_of_ROW_SELECT 041F  
                            init_ram 0644                              initloop 0645  
          __end_ofmain@COMPARE_UNITS 041A            __size_of_AQM0802_SendData 0027  
                       __pstringtext 0400                     __CFG_FOSC$INTOSC 0000  
             ?_AQM0802_SendCharacter 0022               _Configuration_ReadByte 0611  
                         main@string 0030          __size_of_Configuration_Load 0020  
        __size_of_Configuration_Save 0027   __end_of_AQM0802_SendStringClearing 0536  
         _AQM0802_SendStringClearing 04FF                       __end_of___wmul 05DF  
                          __@adValue 0073                          ?_initialize 0070  
                       _MESSAGE_MENU 004D                  start_initialization 0093  
           ?_Configuration_WriteByte 0020                             ??___wmul 0075  
                       _measureMode_ 0049                          __pdataBANK0 004D  
                          _adBuffer_ 00A0                          __pbssCOMMON 0075  
                          ___latbits 0000                        __pcstackBANK0 0020  
                   _AQM0802_ClearRow 05DF                            __end_of__ 0092  
                 _AQM0802_Initialize 04C3                  __size_of_initialize 0051  
                ?_AQM0802_Initialize 0070                     _AQM0802_SendData 055D  
                    main@compareUnit 002C                   _AQM0802_SendString 05A4  
                          _keyCount_ 0075                 ??_AQM0802_Initialize 0022  
                ?_AQM0802_SendString 0022                     __CFG_WDTE$SWDTEN 0000  
    __end_of_Configuration_WriteByte 0611                       ___wmul@product 0024  
                          clear_ram0 063E                             _PIE1bits 0091  
                           _PIR1bits 0011                             _PIR2bits 0012  
        Configuration_WriteByte@data 0020                 ??_AQM0802_SendString 0023  
                         _ADCON0bits 009D                           _ADCON1bits 009E  
                          main@i_872 003D                            main@i_875 003E  
                  ___wmul@multiplier 0020                            main@i_879 003F  
            ??_AQM0802_SendCharacter 0023              ?_Configuration_ReadByte 0070  
                         _EECON1bits 0195       AQM0802_SendCharacter@character 0022  
        ?_AQM0802_SendStringClearing 0022                         ??_initialize 0075  
     __end_of_Configuration_ReadByte 0621                     __@bufferPostiion 0077  
                           __ptext10 04C3                             __ptext11 05DF  
                           __ptext12 055D                         _SSP1CON1bits 0215  
                main@compareUnit_880 002E                         _SSP1CON2bits 0216  
                      __size_of_main 0309                   __end_of_initialize 04C3  
         __end_of_Configuration_Load 05A4           __end_of_Configuration_Save 055D  
           __end_of_AQM0802_ClearRow 05FA          AQM0802_SendString@stringPtr 0022  
 AQM0802_SendStringClearing@position 0026     __size_of_Configuration_WriteByte 0017  
                         _INTCONbits 000B        AQM0802_SendStringClearing@col 0027  
                         _FVRCONbits 0117             __end_of_AQM0802_SendData 0584  
                     _configuration_ 0059                  Configuration_Load@i 0025  
                           intlevel1 0000                  Configuration_Save@i 0026  
       __end_ofmain@OMPARE_UNITS_877 041D                    __CFG_CLKOUTEN$OFF 0000  
                         _OSCCONbits 0099                          _sleepTimer_ 0044  
                   __@interruptCount 0078             AQM0802_SendData@dataByte 0020  
                        _portAState_ 004B        AQM0802_SendCharacter@position 0024  
                       _sumOfBuffer_ 0046                           _WDTCONbits 0097  
                      _machineState_ 0048  
