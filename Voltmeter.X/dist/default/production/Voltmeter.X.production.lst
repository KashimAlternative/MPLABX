

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Aug 14 13:33:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0007                     	;# 
    34  0008                     	;# 
    35  0009                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0015                     	;# 
    42  0016                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001C                     	;# 
    50  001E                     	;# 
    51  001F                     	;# 
    52  008C                     	;# 
    53  0091                     	;# 
    54  0092                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0097                     	;# 
    58  0098                     	;# 
    59  0099                     	;# 
    60  009A                     	;# 
    61  009B                     	;# 
    62  009B                     	;# 
    63  009C                     	;# 
    64  009D                     	;# 
    65  009E                     	;# 
    66  010C                     	;# 
    67  0111                     	;# 
    68  0112                     	;# 
    69  0115                     	;# 
    70  0116                     	;# 
    71  0117                     	;# 
    72  0118                     	;# 
    73  0119                     	;# 
    74  011A                     	;# 
    75  011B                     	;# 
    76  011D                     	;# 
    77  011D                     	;# 
    78  018C                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0193                     	;# 
    85  0194                     	;# 
    86  0195                     	;# 
    87  0196                     	;# 
    88  0199                     	;# 
    89  019A                     	;# 
    90  019B                     	;# 
    91  019B                     	;# 
    92  019B                     	;# 
    93  019B                     	;# 
    94  019C                     	;# 
    95  019C                     	;# 
    96  019D                     	;# 
    97  019E                     	;# 
    98  019F                     	;# 
    99  020C                     	;# 
   100  0211                     	;# 
   101  0211                     	;# 
   102  0212                     	;# 
   103  0212                     	;# 
   104  0213                     	;# 
   105  0213                     	;# 
   106  0214                     	;# 
   107  0214                     	;# 
   108  0215                     	;# 
   109  0215                     	;# 
   110  0215                     	;# 
   111  0216                     	;# 
   112  0216                     	;# 
   113  0217                     	;# 
   114  0217                     	;# 
   115  0291                     	;# 
   116  0291                     	;# 
   117  0292                     	;# 
   118  0293                     	;# 
   119  0294                     	;# 
   120  0295                     	;# 
   121  0295                     	;# 
   122  0296                     	;# 
   123  0391                     	;# 
   124  0392                     	;# 
   125  0393                     	;# 
   126  039A                     	;# 
   127  039C                     	;# 
   128  039D                     	;# 
   129  039E                     	;# 
   130  039F                     	;# 
   131  0FE4                     	;# 
   132  0FE5                     	;# 
   133  0FE6                     	;# 
   134  0FE7                     	;# 
   135  0FE8                     	;# 
   136  0FE9                     	;# 
   137  0FEA                     	;# 
   138  0FEB                     	;# 
   139  0FED                     	;# 
   140  0FEE                     	;# 
   141  0FEF                     	;# 
   142                           
   143                           	psect	idataBANK0
   144  04B6                     __pidataBANK0:	
   145                           
   146                           ;initializer for _MESSAGE_MENU
   147  04B6  344A               	retlw	low (STR_7| (0+32768))
   148  04B7  3483               	retlw	high (STR_7| (0+32768))
   149  04B8  3432               	retlw	low (STR_2| (0+32768))
   150  04B9  3483               	retlw	high (STR_2| (0+32768))
   151  04BA  3458               	retlw	low (STR_9| (0+32768))
   152  04BB  3483               	retlw	high (STR_9| (0+32768))
   153  04BC  343A               	retlw	low (STR_4| (0+32768))
   154  04BD  3483               	retlw	high (STR_4| (0+32768))
   155  04BE  3442               	retlw	low (STR_5| (0+32768))
   156  04BF  3483               	retlw	high (STR_5| (0+32768))
   157                           
   158                           ;initializer for main@F2305
   159  04C0  3420               	retlw	32
   160  04C1  3420               	retlw	32
   161  04C2  3430               	retlw	48
   162  04C3  3430               	retlw	48
   163  04C4  3430               	retlw	48
   164  04C5  3430               	retlw	48
   165  04C6  3430               	retlw	48
   166  04C7  3400               	retlw	0
   167                           
   168                           	psect	stringtext
   169  0300                     __pstringtext:	
   170  0300                     _MESSAGE:	
   171  0300  342A               	retlw	low (STR_1| (0+32768))
   172  0301  3483               	retlw	high (STR_1| (0+32768))
   173  0302  3432               	retlw	low (STR_2| (0+32768))
   174  0303  3483               	retlw	high (STR_2| (0+32768))
   175  0304  3421               	retlw	low (STR_3| (0+32768))
   176  0305  3483               	retlw	high (STR_3| (0+32768))
   177  0306  343A               	retlw	low (STR_4| (0+32768))
   178  0307  3483               	retlw	high (STR_4| (0+32768))
   179  0308  3442               	retlw	low (STR_5| (0+32768))
   180  0309  3483               	retlw	high (STR_5| (0+32768))
   181  030A  3452               	retlw	low (STR_6| (0+32768))
   182  030B  3483               	retlw	high (STR_6| (0+32768))
   183  030C                     __end_of_MESSAGE:	
   184  030C                     main@COMPARE_UNITS:	
   185  030C  3410               	retlw	16
   186  030D  3427               	retlw	39
   187  030E  34E8               	retlw	232
   188  030F  3403               	retlw	3
   189  0310  3464               	retlw	100
   190  0311  3400               	retlw	0
   191  0312  340A               	retlw	10
   192  0313  3400               	retlw	0
   193  0314  3401               	retlw	1
   194  0315  3400               	retlw	0
   195  0316                     __end_ofmain@COMPARE_UNITS:	
   196  0316                     _ROW_SELECT:	
   197  0316  3480               	retlw	128
   198  0317  34C0               	retlw	192
   199  0318                     __end_of_ROW_SELECT:	
   200  000B                     _INTCONbits	set	11
   201  0011                     _PIR1bits	set	17
   202  000C                     _PORTA	set	12
   203  001B                     _PR2	set	27
   204  0018                     _T1CONbits	set	24
   205  001C                     _T2CONbits	set	28
   206  0015                     _TMR0	set	21
   207  001A                     _TMR2	set	26
   208  005D                     _TMR0IE	set	93
   209  005A                     _TMR0IF	set	90
   210  009D                     _ADCON0bits	set	157
   211  009E                     _ADCON1bits	set	158
   212  009C                     _ADRESH	set	156
   213  009B                     _ADRESL	set	155
   214  0095                     _OPTION_REGbits	set	149
   215  0099                     _OSCCONbits	set	153
   216  0091                     _PIE1bits	set	145
   217  008C                     _TRISA	set	140
   218  0097                     _WDTCONbits	set	151
   219  0117                     _FVRCONbits	set	279
   220  018C                     _ANSELA	set	396
   221  0212                     _SSP1ADD	set	530
   222  0211                     _SSP1BUF	set	529
   223  0215                     _SSP1CON1bits	set	533
   224  0216                     _SSP1CON2bits	set	534
   225  0214                     _SSPSTAT	set	532
   226  0393                     _IOCAFbits	set	915
   227  0392                     _IOCANbits	set	914
   228  0318                     STR_12:	
   229  0318  3420               	retlw	32	;' '
   230  0319  3430               	retlw	48	;'0'
   231  031A  3430               	retlw	48	;'0'
   232  031B  342E               	retlw	46	;'.'
   233  031C  3431               	retlw	49	;'1'
   234  031D  3431               	retlw	49	;'1'
   235  031E  3432               	retlw	50	;'2'
   236  031F  3420               	retlw	32	;' '
   237  0320  3400               	retlw	0
   238  0321                     STR_3:	
   239  0321  3420               	retlw	32	;' '
   240  0322  3432               	retlw	50	;'2'
   241  0323  3420               	retlw	32	;' '
   242  0324  3434               	retlw	52	;'4'
   243  0325  3420               	retlw	32	;' '
   244  0326  3436               	retlw	54	;'6'
   245  0327  3420               	retlw	32	;' '
   246  0328  3438               	retlw	56	;'8'
   247  0329  3400               	retlw	0
   248  032A                     STR_1:	
   249  032A  3442               	retlw	66	;'B'
   250  032B  346F               	retlw	111	;'o'
   251  032C  346F               	retlw	111	;'o'
   252  032D  3474               	retlw	116	;'t'
   253  032E  342E               	retlw	46	;'.'
   254  032F  342E               	retlw	46	;'.'
   255  0330  342E               	retlw	46	;'.'
   256  0331  3400               	retlw	0
   257  0332                     STR_2:	
   258  0332  3456               	retlw	86	;'V'
   259  0333  346F               	retlw	111	;'o'
   260  0334  346C               	retlw	108	;'l'
   261  0335  3474               	retlw	116	;'t'
   262  0336  3461               	retlw	97	;'a'
   263  0337  3467               	retlw	103	;'g'
   264  0338  3465               	retlw	101	;'e'
   265  0339  3400               	retlw	0
   266  033A                     STR_4:	
   267  033A  3441               	retlw	65	;'A'
   268  033B  342F               	retlw	47	;'/'
   269  033C  3444               	retlw	68	;'D'
   270  033D  3420               	retlw	32	;' '
   271  033E  3456               	retlw	86	;'V'
   272  033F  3461               	retlw	97	;'a'
   273  0340  346C               	retlw	108	;'l'
   274  0341  3400               	retlw	0
   275  0342                     STR_5:	
   276  0342  3456               	retlw	86	;'V'
   277  0343  3465               	retlw	101	;'e'
   278  0344  3472               	retlw	114	;'r'
   279  0345  3473               	retlw	115	;'s'
   280  0346  3469               	retlw	105	;'i'
   281  0347  346F               	retlw	111	;'o'
   282  0348  346E               	retlw	110	;'n'
   283  0349  3400               	retlw	0
   284  034A                     STR_7:	
   285  034A  343C               	retlw	60	;'<'
   286  034B  3452               	retlw	82	;'R'
   287  034C  3465               	retlw	101	;'e'
   288  034D  3474               	retlw	116	;'t'
   289  034E  3475               	retlw	117	;'u'
   290  034F  3472               	retlw	114	;'r'
   291  0350  346E               	retlw	110	;'n'
   292  0351  3400               	retlw	0
   293  0352                     STR_6:	
   294  0352  3445               	retlw	69	;'E'
   295  0353  3472               	retlw	114	;'r'
   296  0354  3472               	retlw	114	;'r'
   297  0355  346F               	retlw	111	;'o'
   298  0356  3472               	retlw	114	;'r'
   299  0357  3400               	retlw	0
   300  0358                     STR_9:	
   301  0358  3442               	retlw	66	;'B'
   302  0359  3461               	retlw	97	;'a'
   303  035A  3472               	retlw	114	;'r'
   304  035B  3400               	retlw	0
   305  0332                     
   306                           ; #config settings
   307  0000                     
   308                           	psect	cinit
   309  007E                     start_initialization:	
   310  007E                     __initialization:	
   311                           
   312                           ; Clear objects allocated to COMMON
   313  007E  01F5               	clrf	__pbssCOMMON& (0+127)
   314  007F  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   315  0080  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   316  0081  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   317                           
   318                           ; Clear objects allocated to BANK0
   319  0082  3056               	movlw	low __pbssBANK0
   320  0083  0084               	movwf	4
   321  0084  3000               	movlw	high __pbssBANK0
   322  0085  0085               	movwf	5
   323  0086  300C               	movlw	12
   324  0087  24D8               	fcall	clear_ram0
   325                           
   326                           ; Clear objects allocated to BANK1
   327  0088  30A0               	movlw	low __pbssBANK1
   328  0089  0084               	movwf	4
   329  008A  3000               	movlw	high __pbssBANK1
   330  008B  0085               	movwf	5
   331  008C  3020               	movlw	32
   332  008D  24D8               	fcall	clear_ram0
   333                           
   334                           ; Initialize objects allocated to BANK0
   335  008E  30B6               	movlw	low __pidataBANK0
   336  008F  0084               	movwf	4
   337  0090  3084               	movlw	(high __pidataBANK0)| (0+128)
   338  0091  0085               	movwf	5
   339  0092  3044               	movlw	low __pdataBANK0
   340  0093  0086               	movwf	6
   341  0094  3000               	movlw	high __pdataBANK0
   342  0095  0087               	movwf	7
   343  0096  3012               	movlw	18
   344  0097  24DE               	fcall	init_ram
   345  0098                     end_of_initialization:	
   346                           ;End of C runtime variable initialization code
   347                           
   348  0098                     __end_of__initialization:	
   349  0098  0020               	movlb	0
   350  0099  289A               	ljmp	_main	;jump to C main() function
   351                           
   352                           	psect	bssCOMMON
   353  0075                     __pbssCOMMON:	
   354  0075                     _sleepTimer_:	
   355  0075                     	ds	2
   356  0077                     __@bufferPostiion:	
   357  0077                     	ds	1
   358  0078                     __@interruptCount:	
   359  0078                     	ds	1
   360                           
   361                           	psect	bssBANK0
   362  0056                     __pbssBANK0:	
   363  0056                     _currentMessage_:	
   364  0056                     	ds	2
   365  0058                     _menuState_:	
   366  0058                     	ds	2
   367  005A                     _sumOfBuffer_:	
   368  005A                     	ds	2
   369  005C                     _events_:	
   370  005C                     	ds	1
   371  005D                     _isHold_:	
   372  005D                     	ds	1
   373  005E                     _machineState_:	
   374  005E                     	ds	1
   375  005F                     _measureMode_:	
   376  005F                     	ds	1
   377  0060                     _portAState_:	
   378  0060                     	ds	1
   379  0061                     main@prevPortAState:	
   380  0061                     	ds	1
   381                           
   382                           	psect	dataBANK0
   383  0044                     __pdataBANK0:	
   384  0044                     _MESSAGE_MENU:	
   385  0044                     	ds	10
   386  004E                     main@F2305:	
   387  004E                     	ds	8
   388                           
   389                           	psect	bssBANK1
   390  00A0                     __pbssBANK1:	
   391  00A0                     __@adBuffer:	
   392  00A0                     	ds	32
   393                           
   394                           	psect	clrtext
   395  04D8                     clear_ram0:	
   396                           ;	Called with FSR0 containing the base address, and
   397                           ;	WREG with the size to clear
   398                           
   399  04D8  0064               	clrwdt	;clear the watchdog before getting into this loop
   400  04D9                     clrloop0:	
   401  04D9  0180               	clrf	0	;clear RAM location pointed to by FSR
   402  04DA  3101               	addfsr 0,1
   403  04DB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   404  04DC  2CD9               	goto	clrloop0	;have we reached the end yet?
   405  04DD  3400               	retlw	0	;all done for this memory range, return
   406                           
   407                           	psect	inittext
   408  04DE                     init_ram:	
   409  04DE  00FE               	movwf	126
   410  04DF                     initloop:	
   411  04DF  0012               	moviw fsr0++
   412  04E0  001E               	movwi fsr1++
   413  04E1  0BFE               	decfsz	126,f
   414  04E2  2CDF               	goto	initloop
   415  04E3  3400               	retlw	0
   416                           
   417                           	psect	cstackCOMMON
   418  0070                     __pcstackCOMMON:	
   419  0070                     ?_initialize:	
   420  0070                     ?__:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ??__:	
   424                           ; 0 bytes @ 0x0
   425                           
   426  0070                     ?_AQM0802_ClearRow:	
   427                           ; 0 bytes @ 0x0
   428                           
   429  0070                     ?_AQM0802_Initialize:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_main:	
   433                           ; 1 bytes @ 0x0
   434                           
   435                           
   436                           ; 2 bytes @ 0x0
   437  0070                     	ds	3
   438  0073                     __@adValue:	
   439                           
   440                           ; 2 bytes @ 0x3
   441  0073                     	ds	2
   442  0075                     ??_AQM0802_SendData:	
   443  0075                     ??_initialize:	
   444                           ; 0 bytes @ 0x5
   445                           
   446                           
   447                           	psect	cstackBANK0
   448  0020                     __pcstackBANK0:	
   449                           ; 0 bytes @ 0x5
   450                           
   451  0020                     ?_AQM0802_SendData:	
   452  0020                     ?___lwdiv:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0020                     AQM0802_SendData@dataByte:	
   456                           ; 2 bytes @ 0x0
   457                           
   458  0020                     ___lwdiv@divisor:	
   459                           ; 1 bytes @ 0x0
   460                           
   461                           
   462                           ; 2 bytes @ 0x0
   463  0020                     	ds	1
   464  0021                     AQM0802_SendData@controlByte:	
   465                           
   466                           ; 1 bytes @ 0x1
   467  0021                     	ds	1
   468  0022                     ??_AQM0802_ClearRow:	
   469  0022                     ??_AQM0802_Initialize:	
   470                           ; 0 bytes @ 0x2
   471                           
   472  0022                     ?_AQM0802_SendString:	
   473                           ; 0 bytes @ 0x2
   474                           
   475  0022                     ?_AQM0802_SendStringClearing:	
   476                           ; 1 bytes @ 0x2
   477                           
   478  0022                     ?_AQM0802_SendCharacter:	
   479                           ; 1 bytes @ 0x2
   480                           
   481  0022                     AQM0802_SendString@stringPtr:	
   482                           ; 1 bytes @ 0x2
   483                           
   484  0022                     AQM0802_SendCharacter@character:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0022                     AQM0802_SendStringClearing@stringPtr:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  0022                     ___lwdiv@dividend:	
   491                           ; 2 bytes @ 0x2
   492                           
   493                           
   494                           ; 2 bytes @ 0x2
   495  0022                     	ds	1
   496  0023                     ??_AQM0802_SendString:	
   497  0023                     ??_AQM0802_SendCharacter:	
   498                           ; 0 bytes @ 0x3
   499                           
   500  0023                     AQM0802_ClearRow@rowSelect:	
   501                           ; 0 bytes @ 0x3
   502                           
   503                           
   504                           ; 1 bytes @ 0x3
   505  0023                     	ds	1
   506  0024                     ??_AQM0802_SendStringClearing:	
   507  0024                     ??___lwdiv:	
   508                           ; 0 bytes @ 0x4
   509                           
   510  0024                     AQM0802_SendString@position:	
   511                           ; 0 bytes @ 0x4
   512                           
   513  0024                     AQM0802_SendCharacter@position:	
   514                           ; 1 bytes @ 0x4
   515                           
   516  0024                     AQM0802_ClearRow@count:	
   517                           ; 1 bytes @ 0x4
   518                           
   519                           
   520                           ; 1 bytes @ 0x4
   521  0024                     	ds	1
   522  0025                     ___lwdiv@counter:	
   523                           
   524                           ; 1 bytes @ 0x5
   525  0025                     	ds	1
   526  0026                     AQM0802_SendStringClearing@position:	
   527  0026                     ___lwdiv@quotient:	
   528                           ; 1 bytes @ 0x6
   529                           
   530                           
   531                           ; 2 bytes @ 0x6
   532  0026                     	ds	1
   533  0027                     AQM0802_SendStringClearing@col:	
   534                           
   535                           ; 1 bytes @ 0x7
   536  0027                     	ds	1
   537  0028                     ??_main:	
   538                           
   539                           ; 0 bytes @ 0x8
   540  0028                     	ds	2
   541  002A                     main@string_753:	
   542                           
   543                           ; 9 bytes @ 0xA
   544  002A                     	ds	9
   545  0033                     main@string:	
   546                           
   547                           ; 8 bytes @ 0x13
   548  0033                     	ds	8
   549  003B                     main@compareUnit:	
   550                           
   551                           ; 2 bytes @ 0x1B
   552  003B                     	ds	2
   553  003D                     main@barImage:	
   554                           
   555                           ; 1 bytes @ 0x1D
   556  003D                     	ds	1
   557  003E                     main@keyPressed:	
   558                           
   559                           ; 1 bytes @ 0x1E
   560  003E                     	ds	1
   561  003F                     main@i:	
   562                           
   563                           ; 1 bytes @ 0x1F
   564  003F                     	ds	1
   565  0040                     main@digit:	
   566                           
   567                           ; 1 bytes @ 0x20
   568  0040                     	ds	1
   569  0041                     main@currentAdValue:	
   570                           
   571                           ; 2 bytes @ 0x21
   572  0041                     	ds	2
   573  0043                     main@i_754:	
   574                           
   575                           ; 1 bytes @ 0x23
   576  0043                     	ds	1
   577                           
   578                           	psect	maintext
   579  009A                     __pmaintext:	
   580 ;;
   581 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   582 ;;
   583 ;; *************** function _main *****************
   584 ;; Defined at:
   585 ;;		line 132 in file "src/main.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;		None
   588 ;; Auto vars:     Size  Location     Type
   589 ;;  i               1   35[BANK0 ] unsigned char 
   590 ;;  string          9   10[BANK0 ] unsigned char [9]
   591 ;;  compareUnit     2   27[BANK0 ] unsigned int 
   592 ;;  string          8   19[BANK0 ] unsigned char [8]
   593 ;;  currentAdVal    2   33[BANK0 ] unsigned int 
   594 ;;  digit           1   32[BANK0 ] unsigned char 
   595 ;;  keyPressed      1   30[BANK0 ] struct .
   596 ;;  i               1   31[BANK0 ] unsigned char 
   597 ;;  barImage        1   29[BANK0 ] unsigned char 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  2  144[None  ] int 
   600 ;; Registers used:
   601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : B1F/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0   BANK1
   607 ;;      Params:         0       0       0
   608 ;;      Locals:         0      26       0
   609 ;;      Temps:          0       2       0
   610 ;;      Totals:         0      28       0
   611 ;;Total ram usage:       28 bytes
   612 ;; Hardware stack levels required when called:    3
   613 ;; This function calls:
   614 ;;		_AQM0802_ClearRow
   615 ;;		_AQM0802_Initialize
   616 ;;		_AQM0802_SendCharacter
   617 ;;		_AQM0802_SendData
   618 ;;		_AQM0802_SendString
   619 ;;		_AQM0802_SendStringClearing
   620 ;;		___lwdiv
   621 ;;		_initialize
   622 ;; This function is called by:
   623 ;;		Startup code after reset
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           
   628                           ;psect for function _main
   629  009A                     _main:	
   630                           
   631                           ;main.c: 134: initialize( ) ;
   632                           
   633                           ;incstack = 0
   634                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   635  009A  235C               	fcall	_initialize
   636                           
   637                           ;main.c: 136: T2CONbits.TMR2ON = 1 ;
   638  009B  0020               	movlb	0	; select bank0
   639  009C  151C               	bsf	28,2	;volatile
   640  009D                     l145:	
   641                           ;main.c: 138: while(!PIR1bits.TMR2IF); ;
   642                           
   643  009D  1C91               	btfss	17,1	;volatile
   644  009E  289D               	goto	l145
   645                           
   646                           ;main.c: 140: T2CONbits.T2OUTPS = 0b0000 ;
   647  009F  3087               	movlw	-121
   648  00A0  059C               	andwf	28,f	;volatile
   649                           
   650                           ;main.c: 141: PR2 = 7 ;
   651  00A1  3007               	movlw	7
   652  00A2  009B               	movwf	27	;volatile
   653                           
   654                           ;main.c: 143: TMR2=0x00;PIR1bits.TMR2IF=0; ;
   655  00A3  019A               	clrf	26	;volatile
   656  00A4  1091               	bcf	17,1	;volatile
   657                           
   658                           ;main.c: 145: AQM0802_Initialize( ) ;
   659  00A5  23AD               	fcall	_AQM0802_Initialize
   660                           
   661                           ;main.c: 146: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.BOOT ) ;
   662  00A6  3000               	movlw	low (_MESSAGE| (0+32768))
   663  00A7  0084               	movwf	4
   664  00A8  3083               	movlw	high (_MESSAGE| (0+32768))
   665  00A9  0085               	movwf	5
   666  00AA  3F00               	moviw [0]fsr0
   667  00AB  0020               	movlb	0	; select bank0
   668  00AC  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
   669  00AD  3F01               	moviw [1]fsr0
   670  00AE  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
   671  00AF  3080               	movlw	128
   672  00B0  23E9               	fcall	_AQM0802_SendStringClearing
   673                           
   674                           ;main.c: 149: AQM0802_SendData( 0x00 , 0x00 ) ;
   675  00B1  0020               	movlb	0	; select bank0
   676  00B2  01A0               	clrf	AQM0802_SendData@dataByte
   677  00B3  3000               	movlw	0
   678  00B4  2455               	fcall	_AQM0802_SendData
   679                           
   680                           ;main.c: 150: AQM0802_SendData( 0x00 , 0x40 ) ;
   681  00B5  3040               	movlw	64
   682  00B6  0020               	movlb	0	; select bank0
   683  00B7  00A8               	movwf	??_main
   684  00B8  0828               	movf	??_main,w
   685  00B9  00A0               	movwf	AQM0802_SendData@dataByte
   686  00BA  3000               	movlw	0
   687  00BB  2455               	fcall	_AQM0802_SendData
   688                           
   689                           ;main.c: 152: Uint08_t barImage = 0x40 ;
   690  00BC  3040               	movlw	64
   691  00BD  0020               	movlb	0	; select bank0
   692  00BE  00A8               	movwf	??_main
   693  00BF  0828               	movf	??_main,w
   694  00C0  00BD               	movwf	main@barImage
   695                           
   696                           ;main.c: 153: for( Uint08_t i = 0 ; i < 48 ; i++ ) {
   697  00C1  01BF               	clrf	main@i
   698  00C2  3030               	movlw	48
   699  00C3  023F               	subwf	main@i,w
   700  00C4  1803               	btfsc	3,0
   701  00C5  28DD               	goto	l149
   702  00C6                     l1761:	
   703                           
   704                           ;main.c: 154: if( !( i & 0x07 ) )
   705  00C6  083F               	movf	main@i,w
   706  00C7  3907               	andlw	7
   707  00C8  1D03               	btfss	3,2
   708  00C9  28CE               	goto	l1765
   709                           
   710                           ;main.c: 155: barImage |= ( barImage >> 1 ) ;
   711  00CA  363D               	lsrf	main@barImage,w
   712  00CB  00A8               	movwf	??_main
   713  00CC  0828               	movf	??_main,w
   714  00CD  04BD               	iorwf	main@barImage,f
   715  00CE                     l1765:	
   716                           
   717                           ;main.c: 156: AQM0802_SendData( 0x40 , barImage ) ;
   718  00CE  083D               	movf	main@barImage,w
   719  00CF  00A8               	movwf	??_main
   720  00D0  0828               	movf	??_main,w
   721  00D1  00A0               	movwf	AQM0802_SendData@dataByte
   722  00D2  3040               	movlw	64
   723  00D3  2455               	fcall	_AQM0802_SendData
   724  00D4  3001               	movlw	1
   725  00D5  0020               	movlb	0	; select bank0
   726  00D6  00A8               	movwf	??_main
   727  00D7  0828               	movf	??_main,w
   728  00D8  07BF               	addwf	main@i,f
   729  00D9  3030               	movlw	48
   730  00DA  023F               	subwf	main@i,w
   731  00DB  1C03               	skipc
   732  00DC  28C6               	goto	l1761
   733  00DD                     l149:	
   734                           
   735                           ;main.c: 157: }
   736                           ;main.c: 159: machineState_ = STATE_MEASURE ;
   737  00DD  01DE               	clrf	_machineState_
   738  00DE  0ADE               	incf	_machineState_,f
   739                           
   740                           ;main.c: 160: currentMessage_ = MESSAGE.VOLTAGE ;
   741  00DF  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
   742  00E0  0084               	movwf	4
   743  00E1  3083               	movlw	high ((_MESSAGE+2)| (0+32768))
   744  00E2  0085               	movwf	5
   745  00E3  3F00               	moviw [0]fsr0
   746  00E4  00D6               	movwf	_currentMessage_
   747  00E5  3F01               	moviw [1]fsr0
   748  00E6  00D7               	movwf	_currentMessage_+1
   749                           
   750                           ;main.c: 161: events_.changeMessage=1 ;
   751  00E7  16DC               	bsf	_events_,5
   752                           
   753                           ;main.c: 164: TMR0IF = 0 ;
   754  00E8  110B               	bcf	11,2	;volatile
   755                           
   756                           ;main.c: 165: TMR0IE = 1 ;
   757  00E9  168B               	bsf	11,5	;volatile
   758                           
   759                           ;main.c: 166: WDTCONbits.SWDTEN = 1 ;
   760  00EA  0021               	movlb	1	; select bank1
   761  00EB  1417               	bsf	23,0	;volatile
   762  00EC                     l151:	
   763                           ;main.c: 169: for( ; ; ) {
   764                           
   765  00EC  0064               	clrwdt	;# 
   766                           
   767                           ;main.c: 174: static UniPortA prevPortAState = { 0x00 } ;
   768                           ;main.c: 175: UniPortA keyPressed ;
   769                           ;main.c: 177: keyPressed.byte = ( portAState_.byte ^ prevPortAState.byte ) & portAState_
      +                          .byte ;
   770  00ED  0020               	movlb	0	; select bank0
   771  00EE  0860               	movf	_portAState_,w
   772  00EF  0661               	xorwf	main@prevPortAState,w
   773  00F0  0560               	andwf	_portAState_,w
   774  00F1  00A8               	movwf	??_main
   775  00F2  0828               	movf	??_main,w
   776  00F3  00BE               	movwf	main@keyPressed
   777                           
   778                           ;main.c: 178: prevPortAState.byte = portAState_.byte ;
   779  00F4  0860               	movf	_portAState_,w
   780  00F5  00A8               	movwf	??_main
   781  00F6  0828               	movf	??_main,w
   782  00F7  00E1               	movwf	main@prevPortAState
   783                           
   784                           ;main.c: 181: if( keyPressed.menu )
   785  00F8  19BE               	btfsc	main@keyPressed,3
   786                           
   787                           ;main.c: 182: events_.keyPressMenu=1 ;
   788  00F9  145C               	bsf	_events_,0
   789                           
   790                           ;main.c: 184: if( keyPressed.up ) {
   791  00FA  1EBE               	btfss	main@keyPressed,5
   792  00FB  2901               	goto	l155
   793                           
   794                           ;main.c: 185: if( portAState_.down )
   795  00FC  1C60               	btfss	_portAState_,0
   796  00FD  2900               	goto	l156
   797                           
   798                           ;main.c: 186: events_.keyPressUpDown=1 ;
   799  00FE  15DC               	bsf	_events_,3
   800  00FF  2901               	goto	l155
   801  0100                     l156:	
   802                           
   803                           ;main.c: 187: else
   804                           ;main.c: 188: events_.keyPressUp=1 ;
   805  0100  14DC               	bsf	_events_,1
   806  0101                     l155:	
   807                           
   808                           ;main.c: 189: }
   809                           ;main.c: 190: if( keyPressed.down ) {
   810  0101  1C3E               	btfss	main@keyPressed,0
   811  0102  2908               	goto	l158
   812                           
   813                           ;main.c: 191: if( portAState_.up )
   814  0103  1EE0               	btfss	_portAState_,5
   815  0104  2907               	goto	l159
   816                           
   817                           ;main.c: 192: events_.keyPressUpDown=1 ;
   818  0105  15DC               	bsf	_events_,3
   819  0106  2908               	goto	l158
   820  0107                     l159:	
   821                           
   822                           ;main.c: 193: else
   823                           ;main.c: 194: events_.keyPressDown=1 ;
   824  0107  155C               	bsf	_events_,2
   825  0108                     l158:	
   826                           
   827                           ;main.c: 195: }
   828                           ;main.c: 197: if( (events_.error&&!(events_.error=0)) ) {
   829  0108  1FDC               	btfss	_events_,7
   830  0109  2910               	goto	l1803
   831  010A  13DC               	bcf	_events_,7
   832                           
   833                           ;main.c: 198: machineState_ = STATE_ERROR ;
   834  010B  3005               	movlw	5
   835  010C  00A8               	movwf	??_main
   836  010D  0828               	movf	??_main,w
   837  010E  00DE               	movwf	_machineState_
   838                           
   839                           ;main.c: 199: events_.changeMessage=1 ;
   840  010F  16DC               	bsf	_events_,5
   841  0110                     l1803:	
   842                           
   843                           ;main.c: 200: }
   844                           ;main.c: 203: if( (events_.keyPressUpDown&&!(events_.keyPressUpDown=0)) ) {
   845  0110  1DDC               	btfss	_events_,3
   846  0111  2922               	goto	l162
   847  0112  11DC               	bcf	_events_,3
   848                           
   849                           ;main.c: 204: switch( machineState_ ) {
   850  0113  291D               	goto	l1813
   851  0114                     l1807:	
   852                           ;main.c: 205: case STATE_MEASURE:
   853                           
   854                           
   855                           ;main.c: 206: if( isHold_ )
   856  0114  085D               	movf	_isHold_,w
   857  0115  1903               	btfsc	3,2
   858  0116  2919               	goto	l165
   859                           
   860                           ;main.c: 207: isHold_ = BOOL_FALSE ;
   861  0117  01DD               	clrf	_isHold_
   862  0118  291B               	goto	l166
   863  0119                     l165:	
   864                           
   865                           ;main.c: 208: else
   866                           ;main.c: 209: isHold_ = BOOL_TRUE ;
   867  0119  01DD               	clrf	_isHold_
   868  011A  0ADD               	incf	_isHold_,f
   869  011B                     l166:	
   870                           
   871                           ;main.c: 210: events_.changeMessage=1 ;
   872  011B  16DC               	bsf	_events_,5
   873                           
   874                           ;main.c: 212: }
   875                           
   876                           ;main.c: 211: break ;
   877  011C  2922               	goto	l162
   878  011D                     l1813:	
   879  011D  085E               	movf	_machineState_,w
   880                           
   881                           ; Switch size 1, requested type "space"
   882                           ; Number of cases is 1, Range of values is 1 to 1
   883                           ; switch strategies available:
   884                           ; Name         Instructions Cycles
   885                           ; simple_byte            4     3 (average)
   886                           ; direct_byte           11     9 (fixed)
   887                           ; jumptable            263     9 (fixed)
   888                           ;	Chosen strategy is simple_byte
   889  011E  3A01               	xorlw	1	; case 1
   890  011F  1903               	skipnz
   891  0120  2914               	goto	l1807
   892  0121  2922               	goto	l162
   893  0122                     l162:	
   894                           
   895                           ;main.c: 213: }
   896                           ;main.c: 216: if( (events_.keyPressMenu&&!(events_.keyPressMenu=0)) ) {
   897  0122  1C5C               	btfss	_events_,0
   898  0123  298F               	goto	l1865
   899  0124  105C               	bcf	_events_,0
   900                           
   901                           ;main.c: 218: events_.changeMessage=1 ;
   902  0125  16DC               	bsf	_events_,5
   903                           
   904                           ;main.c: 220: switch( machineState_ ) {
   905  0126  2961               	goto	l1839
   906  0127                     l1817:	
   907                           ;main.c: 222: case STATE_MEASURE:
   908                           
   909  0127  295C               	goto	l1835
   910  0128                     l172:	
   911                           ;main.c: 226: case STATE_MENU:
   912                           
   913                           ;main.c: 224: break ;
   914                           
   915                           ;main.c: 223: machineState_ = STATE_MENU ;
   916                           
   917                           
   918                           ;main.c: 227: machineState_ = STATE_MEASURE ;
   919  0128  01DE               	clrf	_machineState_
   920  0129  0ADE               	incf	_machineState_,f
   921                           
   922                           ;main.c: 229: switch( menuState_.select ) {
   923  012A  294D               	goto	l1833
   924  012B                     l1819:	
   925                           ;main.c: 230: case MENU_VOLTAGE:
   926                           
   927                           
   928                           ;main.c: 231: measureMode_ = MEASURE_MODE_VOLTAGE ;
   929  012B  01DF               	clrf	_measureMode_
   930                           
   931                           ;main.c: 232: currentMessage_ = MESSAGE.VOLTAGE ;
   932  012C  3002               	movlw	low ((_MESSAGE+2)| (0+32768))
   933  012D  0084               	movwf	4
   934  012E  3083               	movlw	high ((_MESSAGE+2)| (0+32768))
   935  012F  0085               	movwf	5
   936  0130  3F00               	moviw [0]fsr0
   937  0131  00D6               	movwf	_currentMessage_
   938  0132  3F01               	moviw [1]fsr0
   939  0133  2949               	goto	L3
   940  0134                     l1823:	
   941                           ;main.c: 235: case MENU_BAR:
   942                           
   943                           ;main.c: 233: break ;
   944                           
   945                           
   946                           ;main.c: 236: measureMode_ = MEASURE_MODE_BAR ;
   947  0134  3002               	movlw	2
   948  0135  00A8               	movwf	??_main
   949  0136  0828               	movf	??_main,w
   950  0137  00DF               	movwf	_measureMode_
   951                           
   952                           ;main.c: 237: currentMessage_ = MESSAGE.BAR ;
   953  0138  3004               	movlw	low ((_MESSAGE+4)| (0+32768))
   954  0139  0084               	movwf	4
   955  013A  3083               	movlw	high ((_MESSAGE+4)| (0+32768))
   956  013B  0085               	movwf	5
   957  013C  3F00               	moviw [0]fsr0
   958  013D  00D6               	movwf	_currentMessage_
   959  013E  3F01               	moviw [1]fsr0
   960  013F  2949               	goto	L3
   961  0140                     l177:	
   962                           ;main.c: 240: case MENU_AD_VALUE:
   963                           
   964                           ;main.c: 238: break ;
   965                           
   966                           
   967                           ;main.c: 241: measureMode_ = MEASURE_MODE_AD_VALUE ;
   968  0140  01DF               	clrf	_measureMode_
   969  0141  0ADF               	incf	_measureMode_,f
   970                           
   971                           ;main.c: 242: currentMessage_ = MESSAGE.AD_VALUE ;
   972  0142  3006               	movlw	low ((_MESSAGE+6)| (0+32768))
   973  0143  0084               	movwf	4
   974  0144  3083               	movlw	high ((_MESSAGE+6)| (0+32768))
   975  0145  0085               	movwf	5
   976  0146  3F00               	moviw [0]fsr0
   977  0147  00D6               	movwf	_currentMessage_
   978  0148  3F01               	moviw [1]fsr0
   979  0149                     L3:	
   980  0149  00D7               	movwf	_currentMessage_+1
   981                           
   982                           ;main.c: 243: break ;
   983  014A  298F               	goto	l1865
   984  014B                     l1829:	
   985                           ;main.c: 245: case MENU_VERSION:
   986                           
   987                           
   988                           ;main.c: 246: machineState_ = STATE_VERSION ;
   989  014B  3003               	movlw	3
   990  014C  295D               	goto	L4
   991  014D                     l1833:	
   992                           ;main.c: 248: }
   993                           
   994                           ;main.c: 247: break ;
   995                           
   996  014D  0858               	movf	_menuState_,w
   997                           
   998                           ; Switch size 1, requested type "space"
   999                           ; Number of cases is 4, Range of values is 1 to 4
  1000                           ; switch strategies available:
  1001                           ; Name         Instructions Cycles
  1002                           ; simple_byte           13     7 (average)
  1003                           ; direct_byte           17     9 (fixed)
  1004                           ; jumptable            263     9 (fixed)
  1005                           ;	Chosen strategy is simple_byte
  1006  014E  3A01               	xorlw	1	; case 1
  1007  014F  1903               	skipnz
  1008  0150  292B               	goto	l1819
  1009  0151  3A03               	xorlw	3	; case 2
  1010  0152  1903               	skipnz
  1011  0153  2934               	goto	l1823
  1012  0154  3A01               	xorlw	1	; case 3
  1013  0155  1903               	skipnz
  1014  0156  2940               	goto	l177
  1015  0157  3A07               	xorlw	7	; case 4
  1016  0158  1903               	skipnz
  1017  0159  294B               	goto	l1829
  1018  015A  298F               	goto	l1865
  1019                           
  1020                           ;main.c: 249: break ;
  1021  015B  298F               	goto	l1865
  1022  015C                     l1835:	
  1023                           ;main.c: 251: case STATE_VERSION:
  1024                           
  1025                           
  1026                           ;main.c: 252: machineState_ = STATE_MENU ;
  1027  015C  3002               	movlw	2
  1028  015D                     L4:	
  1029  015D  00A8               	movwf	??_main
  1030  015E  0828               	movf	??_main,w
  1031  015F  00DE               	movwf	_machineState_
  1032                           
  1033                           ;main.c: 254: }
  1034                           
  1035                           ;main.c: 253: break ;
  1036  0160  298F               	goto	l1865
  1037  0161                     l1839:	
  1038  0161  085E               	movf	_machineState_,w
  1039                           
  1040                           ; Switch size 1, requested type "space"
  1041                           ; Number of cases is 3, Range of values is 1 to 3
  1042                           ; switch strategies available:
  1043                           ; Name         Instructions Cycles
  1044                           ; simple_byte           10     6 (average)
  1045                           ; direct_byte           15     9 (fixed)
  1046                           ; jumptable            263     9 (fixed)
  1047                           ;	Chosen strategy is simple_byte
  1048  0162  3A01               	xorlw	1	; case 1
  1049  0163  1903               	skipnz
  1050  0164  2927               	goto	l1817
  1051  0165  3A03               	xorlw	3	; case 2
  1052  0166  1903               	skipnz
  1053  0167  2928               	goto	l172
  1054  0168  3A01               	xorlw	1	; case 3
  1055  0169  1903               	skipnz
  1056  016A  295C               	goto	l1835
  1057  016B  298F               	goto	l1865
  1058                           
  1059                           ;main.c: 255: }
  1060                           ;main.c: 258: switch( machineState_ ) {
  1061  016C  298F               	goto	l1865
  1062  016D                     l181:	
  1063                           ;main.c: 260: case STATE_MENU:
  1064                           
  1065                           
  1066                           ;main.c: 261: if( (events_.keyPressUp&&!(events_.keyPressUp=0)) ) {
  1067  016D  1CDC               	btfss	_events_,1
  1068  016E  297B               	goto	l1851
  1069  016F  10DC               	bcf	_events_,1
  1070                           
  1071                           ;main.c: 262: if( menuState_.select != 0 ) {
  1072  0170  0858               	movf	_menuState_,w
  1073  0171  1903               	btfsc	3,2
  1074  0172  297B               	goto	l1851
  1075                           
  1076                           ;main.c: 263: menuState_.select-- ;
  1077  0173  3001               	movlw	1
  1078  0174  02D8               	subwf	_menuState_,f
  1079                           
  1080                           ;main.c: 264: if( menuState_.cursor != 0 ) menuState_.cursor-- ;
  1081  0175  0859               	movf	_menuState_+1,w
  1082  0176  1903               	btfsc	3,2
  1083  0177  297A               	goto	l1849
  1084  0178  3001               	movlw	1
  1085  0179  02D9               	subwf	_menuState_+1,f
  1086  017A                     l1849:	
  1087                           
  1088                           ;main.c: 265: events_.changeMessage=1 ;
  1089  017A  16DC               	bsf	_events_,5
  1090  017B                     l1851:	
  1091                           
  1092                           ;main.c: 266: }
  1093                           ;main.c: 267: }
  1094                           ;main.c: 268: if( (events_.keyPressDown&&!(events_.keyPressDown=0)) ) {
  1095  017B  1D5C               	btfss	_events_,2
  1096  017C  2994               	goto	l188
  1097  017D  115C               	bcf	_events_,2
  1098                           
  1099                           ;main.c: 269: if( menuState_.select != ( ( sizeof( MESSAGE_MENU ) / sizeof( MESSAGE_MENU
      +                          [0] ) ) - 1 ) ) {
  1100  017E  3004               	movlw	4
  1101  017F  0658               	xorwf	_menuState_,w
  1102  0180  1903               	btfsc	3,2
  1103  0181  2994               	goto	l188
  1104                           
  1105                           ;main.c: 270: menuState_.select++ ;
  1106  0182  3001               	movlw	1
  1107  0183  00A8               	movwf	??_main
  1108  0184  0828               	movf	??_main,w
  1109  0185  07D8               	addwf	_menuState_,f
  1110                           
  1111                           ;main.c: 271: if( menuState_.cursor != 1 ) menuState_.cursor++ ;
  1112  0186  0359               	decf	_menuState_+1,w
  1113  0187  1903               	btfsc	3,2
  1114  0188  298D               	goto	l1861
  1115  0189  3001               	movlw	1
  1116  018A  00A8               	movwf	??_main
  1117  018B  0828               	movf	??_main,w
  1118  018C  07D9               	addwf	_menuState_+1,f
  1119  018D                     l1861:	
  1120                           
  1121                           ;main.c: 272: events_.changeMessage=1 ;
  1122  018D  16DC               	bsf	_events_,5
  1123                           
  1124                           ;main.c: 277: }
  1125                           
  1126                           ;main.c: 273: }
  1127                           ;main.c: 274: }
  1128                           ;main.c: 276: break ;
  1129  018E  2994               	goto	l188
  1130  018F                     l1865:	
  1131  018F  085E               	movf	_machineState_,w
  1132                           
  1133                           ; Switch size 1, requested type "space"
  1134                           ; Number of cases is 1, Range of values is 2 to 2
  1135                           ; switch strategies available:
  1136                           ; Name         Instructions Cycles
  1137                           ; simple_byte            4     3 (average)
  1138                           ; direct_byte           11     9 (fixed)
  1139                           ; jumptable            263     9 (fixed)
  1140                           ;	Chosen strategy is simple_byte
  1141  0190  3A02               	xorlw	2	; case 2
  1142  0191  1903               	skipnz
  1143  0192  296D               	goto	l181
  1144  0193  2994               	goto	l188
  1145  0194                     l188:	
  1146                           
  1147                           ;main.c: 280: if( (events_.changeMessage&&!(events_.changeMessage=0)) ) {
  1148  0194  1EDC               	btfss	_events_,5
  1149  0195  29FE               	goto	l1889
  1150  0196  12DC               	bcf	_events_,5
  1151                           
  1152                           ;main.c: 281: switch( machineState_ ) {
  1153  0197  29EF               	goto	l1887
  1154  0198                     l1869:	
  1155                           ;main.c: 283: case STATE_MEASURE:
  1156                           
  1157                           
  1158                           ;main.c: 284: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , currentMessage_ ) ;
  1159  0198  0856               	movf	_currentMessage_,w
  1160  0199  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1161  019A  0857               	movf	_currentMessage_+1,w
  1162  019B  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1163  019C  3080               	movlw	128
  1164  019D  23E9               	fcall	_AQM0802_SendStringClearing
  1165                           
  1166                           ;main.c: 285: AQM0802_ClearRow( ROW_SELECT_1 ) ;
  1167  019E  30C0               	movlw	192
  1168  019F  249B               	fcall	_AQM0802_ClearRow
  1169                           
  1170                           ;main.c: 289: events_.changeValue=1 ;
  1171  01A0  0020               	movlb	0	; select bank0
  1172  01A1  165C               	bsf	_events_,4
  1173                           
  1174                           ;main.c: 290: break ;
  1175  01A2  29FE               	goto	l1889
  1176  01A3                     l1875:	
  1177                           ;main.c: 292: case STATE_MENU:
  1178                           
  1179                           
  1180                           ;main.c: 293: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x1 , MESSAGE_MENU[ menuState_.
      +                          select - menuState_.cursor ] ) ;
  1181  01A3  0359               	decf	_menuState_+1,w
  1182  01A4  3AFF               	xorlw	255
  1183  01A5  0758               	addwf	_menuState_,w
  1184  01A6  0709               	addwf	9,w
  1185  01A7  3E44               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  1186  01A8  0086               	movwf	6
  1187  01A9  0187               	clrf	7
  1188  01AA  3F40               	moviw [0]fsr1
  1189  01AB  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1190  01AC  3F41               	moviw [1]fsr1
  1191  01AD  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1192  01AE  3081               	movlw	129
  1193  01AF  23E9               	fcall	_AQM0802_SendStringClearing
  1194                           
  1195                           ;main.c: 294: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x1 , MESSAGE_MENU[ menuState_.
      +                          select - menuState_.cursor + 1 ] ) ;
  1196  01B0  0020               	movlb	0	; select bank0
  1197  01B1  0359               	decf	_menuState_+1,w
  1198  01B2  3AFF               	xorlw	255
  1199  01B3  0758               	addwf	_menuState_,w
  1200  01B4  0709               	addwf	9,w
  1201  01B5  3E02               	addlw	2
  1202  01B6  3E44               	addlw	(low (_MESSAGE_MENU| 0))& (0+255)
  1203  01B7  0086               	movwf	6
  1204  01B8  0187               	clrf	7
  1205  01B9  3F40               	moviw [0]fsr1
  1206  01BA  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1207  01BB  3F41               	moviw [1]fsr1
  1208  01BC  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1209  01BD  30C1               	movlw	193
  1210  01BE  23E9               	fcall	_AQM0802_SendStringClearing
  1211                           
  1212                           ;main.c: 295: AQM0802_SendCharacter( ROW_SELECT[ menuState_.cursor ] | 0x0 , 0x07 ) ;
  1213  01BF  3007               	movlw	7
  1214  01C0  0020               	movlb	0	; select bank0
  1215  01C1  00A8               	movwf	??_main
  1216  01C2  0828               	movf	??_main,w
  1217  01C3  00A2               	movwf	AQM0802_SendCharacter@character
  1218  01C4  0859               	movf	_menuState_+1,w
  1219  01C5  3E16               	addlw	low (_ROW_SELECT| (0+32768))
  1220  01C6  0084               	movwf	4
  1221  01C7  3083               	movlw	high (_ROW_SELECT| (0+32768))
  1222  01C8  1803               	skipnc
  1223  01C9  3E01               	addlw	1
  1224  01CA  0085               	movwf	5
  1225  01CB  0800               	movf	0,w	;code access
  1226  01CC  24C8               	fcall	_AQM0802_SendCharacter
  1227                           
  1228                           ;main.c: 296: break ;
  1229  01CD  29FE               	goto	l1889
  1230  01CE                     l1879:	
  1231                           ;main.c: 298: case STATE_VERSION:
  1232                           
  1233                           
  1234                           ;main.c: 299: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.VERSION ) ;
  1235  01CE  3008               	movlw	low ((_MESSAGE+8)| (0+32768))
  1236  01CF  0084               	movwf	4
  1237  01D0  3083               	movlw	high ((_MESSAGE+8)| (0+32768))
  1238  01D1  0085               	movwf	5
  1239  01D2  3F00               	moviw [0]fsr0
  1240  01D3  0020               	movlb	0	; select bank0
  1241  01D4  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1242  01D5  3F01               	moviw [1]fsr0
  1243  01D6  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1244  01D7  3080               	movlw	128
  1245  01D8  23E9               	fcall	_AQM0802_SendStringClearing
  1246                           
  1247                           ;main.c: 300: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x0 , " 00.112 " ) ;
  1248  01D9  3018               	movlw	low (STR_12| (0+32768))
  1249  01DA  0020               	movlb	0	; select bank0
  1250  01DB  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1251  01DC  3083               	movlw	high (STR_12| (0+32768))
  1252  01DD  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1253  01DE  30C0               	movlw	192
  1254  01DF  23E9               	fcall	_AQM0802_SendStringClearing
  1255                           
  1256                           ;main.c: 301: break ;
  1257  01E0  29FE               	goto	l1889
  1258  01E1                     l1881:	
  1259                           ;main.c: 304: case STATE_ERROR:
  1260                           
  1261                           
  1262                           ;main.c: 305: AQM0802_SendStringClearing( ROW_SELECT_0 | 0x0 , MESSAGE.ERROR ) ;
  1263  01E1  300A               	movlw	low ((_MESSAGE+10)| (0+32768))
  1264  01E2  0084               	movwf	4
  1265  01E3  3083               	movlw	high ((_MESSAGE+10)| (0+32768))
  1266  01E4  0085               	movwf	5
  1267  01E5  3F00               	moviw [0]fsr0
  1268  01E6  0020               	movlb	0	; select bank0
  1269  01E7  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1270  01E8  3F01               	moviw [1]fsr0
  1271  01E9  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1272  01EA  3080               	movlw	128
  1273  01EB  23E9               	fcall	_AQM0802_SendStringClearing
  1274                           
  1275                           ;main.c: 306: AQM0802_ClearRow( ROW_SELECT_1 ) ;
  1276  01EC  30C0               	movlw	192
  1277  01ED  249B               	fcall	_AQM0802_ClearRow
  1278                           
  1279                           ;main.c: 308: }
  1280                           
  1281                           ;main.c: 307: break ;
  1282  01EE  29FE               	goto	l1889
  1283  01EF                     l1887:	
  1284  01EF  0020               	movlb	0	; select bank0
  1285  01F0  085E               	movf	_machineState_,w
  1286                           
  1287                           ; Switch size 1, requested type "space"
  1288                           ; Number of cases is 4, Range of values is 1 to 5
  1289                           ; switch strategies available:
  1290                           ; Name         Instructions Cycles
  1291                           ; simple_byte           13     7 (average)
  1292                           ; direct_byte           19     9 (fixed)
  1293                           ; jumptable            263     9 (fixed)
  1294                           ;	Chosen strategy is simple_byte
  1295  01F1  3A01               	xorlw	1	; case 1
  1296  01F2  1903               	skipnz
  1297  01F3  2998               	goto	l1869
  1298  01F4  3A03               	xorlw	3	; case 2
  1299  01F5  1903               	skipnz
  1300  01F6  29A3               	goto	l1875
  1301  01F7  3A01               	xorlw	1	; case 3
  1302  01F8  1903               	skipnz
  1303  01F9  29CE               	goto	l1879
  1304  01FA  3A06               	xorlw	6	; case 5
  1305  01FB  1903               	skipnz
  1306  01FC  29E1               	goto	l1881
  1307  01FD  29FE               	goto	l1889
  1308  01FE                     l1889:	
  1309                           
  1310                           ;main.c: 309: }
  1311                           ;main.c: 312: if( machineState_ == STATE_MEASURE && (events_.changeValue&&!(events_.chan
      +                          geValue=0)) ) {
  1312  01FE  0020               	movlb	0	; select bank0
  1313  01FF  035E               	decf	_machineState_,w
  1314  0200  1903               	btfsc	3,2
  1315  0201  1E5C               	btfss	_events_,4
  1316  0202  2AAE               	goto	l196
  1317  0203  125C               	bcf	_events_,4
  1318                           
  1319                           ;main.c: 315: ADValue_t currentAdValue ;
  1320                           ;main.c: 316: Uint08_t digit ;
  1321                           ;main.c: 317: char string[8] = "  00000" ;
  1322  0204  304E               	movlw	low main@F2305
  1323  0205  0086               	movwf	6
  1324  0206  3000               	movlw	high main@F2305
  1325  0207  0087               	movwf	7
  1326  0208  3033               	movlw	low main@string
  1327  0209  0084               	movwf	4
  1328  020A  3000               	movlw	high main@string
  1329  020B  0085               	movwf	5
  1330  020C  3008               	movlw	8
  1331  020D  00A8               	movwf	??_main
  1332  020E                     u1700:	
  1333  020E  0016               	moviw fsr1++
  1334  020F  001A               	movwi fsr0++
  1335  0210  0BA8               	decfsz	??_main,f
  1336  0211  2A0E               	goto	u1700
  1337                           
  1338                           ;main.c: 318: const Uint16_t COMPARE_UNITS[] = { 10000 , 1000 , 100 , 10 , 1 } ;
  1339                           ;main.c: 320: currentAdValue = sumOfBuffer_ ;
  1340  0212  085B               	movf	_sumOfBuffer_+1,w
  1341  0213  00C2               	movwf	main@currentAdValue+1
  1342  0214  085A               	movf	_sumOfBuffer_,w
  1343  0215  00C1               	movwf	main@currentAdValue
  1344                           
  1345                           ;main.c: 322: switch( measureMode_ ) {
  1346  0216  2AA2               	goto	l1943
  1347  0217                     l1899:	
  1348                           ;main.c: 323: case MEASURE_MODE_VOLTAGE:
  1349                           
  1350                           
  1351                           ;main.c: 324: case MEASURE_MODE_AD_VALUE:
  1352                           ;main.c: 326: digit = 0 ;
  1353  0217  01C0               	clrf	main@digit
  1354  0218                     l1911:	
  1355                           ;main.c: 327: while( digit < 5 ) {
  1356                           
  1357  0218  3005               	movlw	5
  1358  0219  0240               	subwf	main@digit,w
  1359  021A  1803               	btfsc	3,0
  1360  021B  2A46               	goto	l1913
  1361                           
  1362                           ;main.c: 329: Uint16_t compareUnit = COMPARE_UNITS[ digit ] ;
  1363  021C  0840               	movf	main@digit,w
  1364  021D  00A8               	movwf	??_main
  1365  021E  01A9               	clrf	??_main+1
  1366  021F  35A8               	lslf	??_main,f
  1367  0220  0DA9               	rlf	??_main+1,f
  1368  0221  300C               	movlw	low (main@COMPARE_UNITS| (0+32768))
  1369  0222  0728               	addwf	??_main,w
  1370  0223  0084               	movwf	4
  1371  0224  3083               	movlw	high (main@COMPARE_UNITS| (0+32768))
  1372  0225  3D29               	addwfc	??_main+1,w
  1373  0226  0085               	movwf	5
  1374  0227  3F00               	moviw [0]fsr0
  1375  0228  00BB               	movwf	main@compareUnit
  1376  0229  3F01               	moviw [1]fsr0
  1377  022A  00BC               	movwf	main@compareUnit+1
  1378  022B                     l1907:	
  1379                           ;main.c: 331: while( currentAdValue >= compareUnit ) {
  1380                           
  1381  022B  083C               	movf	main@compareUnit+1,w
  1382  022C  0242               	subwf	main@currentAdValue+1,w
  1383  022D  1D03               	skipz
  1384  022E  2A31               	goto	u1715
  1385  022F  083B               	movf	main@compareUnit,w
  1386  0230  0241               	subwf	main@currentAdValue,w
  1387  0231                     u1715:	
  1388  0231  1C03               	btfss	3,0
  1389  0232  2A41               	goto	l1909
  1390                           
  1391                           ;main.c: 332: string[digit + 2]++ ;
  1392  0233  3001               	movlw	1
  1393  0234  00A8               	movwf	??_main
  1394  0235  0840               	movf	main@digit,w
  1395  0236  3E02               	addlw	2
  1396  0237  3E33               	addlw	(low (main@string| 0))& (0+255)
  1397  0238  0086               	movwf	6
  1398  0239  0187               	clrf	7
  1399  023A  0828               	movf	??_main,w
  1400  023B  0781               	addwf	1,f
  1401                           
  1402                           ;main.c: 333: currentAdValue -= compareUnit ;
  1403  023C  083B               	movf	main@compareUnit,w
  1404  023D  02C1               	subwf	main@currentAdValue,f
  1405  023E  083C               	movf	main@compareUnit+1,w
  1406  023F  3BC2               	subwfb	main@currentAdValue+1,f
  1407  0240  2A2B               	goto	l1907
  1408  0241                     l1909:	
  1409                           
  1410                           ;main.c: 334: }
  1411                           ;main.c: 336: digit++ ;
  1412  0241  3001               	movlw	1
  1413  0242  00A8               	movwf	??_main
  1414  0243  0828               	movf	??_main,w
  1415  0244  07C0               	addwf	main@digit,f
  1416  0245  2A18               	goto	l1911
  1417  0246                     l1913:	
  1418                           
  1419                           ;main.c: 338: }
  1420                           ;main.c: 340: if( measureMode_ == MEASURE_MODE_VOLTAGE ) {
  1421  0246  085F               	movf	_measureMode_,w
  1422  0247  1D03               	btfss	3,2
  1423  0248  2A59               	goto	l1917
  1424                           
  1425                           ;main.c: 341: string[1] = string[2] ;
  1426  0249  0835               	movf	main@string+2,w
  1427  024A  00A8               	movwf	??_main
  1428  024B  0828               	movf	??_main,w
  1429  024C  00B4               	movwf	main@string+1
  1430                           
  1431                           ;main.c: 342: string[2] = string[3] ;
  1432  024D  0836               	movf	main@string+3,w
  1433  024E  00A8               	movwf	??_main
  1434  024F  0828               	movf	??_main,w
  1435  0250  00B5               	movwf	main@string+2
  1436                           
  1437                           ;main.c: 343: string[3] = '.' ;
  1438  0251  302E               	movlw	46
  1439  0252  00A8               	movwf	??_main
  1440  0253  0828               	movf	??_main,w
  1441  0254  00B6               	movwf	main@string+3
  1442                           
  1443                           ;main.c: 344: string[6] = 'V' ;
  1444  0255  3056               	movlw	86
  1445  0256  00A8               	movwf	??_main
  1446  0257  0828               	movf	??_main,w
  1447  0258  00B9               	movwf	main@string+6
  1448  0259                     l1917:	
  1449                           
  1450                           ;main.c: 345: }
  1451                           ;main.c: 347: AQM0802_SendString( ROW_SELECT_1 | 0x1 , &string ) ;
  1452  0259  3033               	movlw	(low (main@string| 0))& (0+255)
  1453  025A  00A8               	movwf	??_main
  1454  025B  0828               	movf	??_main,w
  1455  025C  00A2               	movwf	AQM0802_SendString@stringPtr
  1456  025D  30C1               	movlw	193
  1457  025E  247C               	fcall	_AQM0802_SendString
  1458                           
  1459                           ;main.c: 349: break ;
  1460  025F  2AAE               	goto	l196
  1461  0260                     l1919:	
  1462                           ;main.c: 351: case MEASURE_MODE_BAR:
  1463                           
  1464                           
  1465                           ;main.c: 352: {
  1466                           ;main.c: 353: Char_t string[9] ;
  1467                           ;main.c: 354: for( Uint08_t i = 0 ; i < 8 ; i++ ) {
  1468  0260  0020               	movlb	0	; select bank0
  1469  0261  01C3               	clrf	main@i_754
  1470  0262  3008               	movlw	8
  1471  0263  0243               	subwf	main@i_754,w
  1472  0264  1803               	btfsc	3,0
  1473  0265  2A9B               	goto	l1939
  1474  0266                     l1925:	
  1475                           
  1476                           ;main.c: 355: if( currentAdValue >= 1000 ) {
  1477  0266  3003               	movlw	3
  1478  0267  0242               	subwf	main@currentAdValue+1,w
  1479  0268  30E8               	movlw	232
  1480  0269  1903               	skipnz
  1481  026A  0241               	subwf	main@currentAdValue,w
  1482  026B  1C03               	skipc
  1483  026C  2A7A               	goto	l1931
  1484                           
  1485                           ;main.c: 356: string[i] = '\x05' ;
  1486  026D  3005               	movlw	5
  1487  026E  00A8               	movwf	??_main
  1488  026F  0843               	movf	main@i_754,w
  1489  0270  3E2A               	addlw	(low (main@string_753| 0))& (0+255)
  1490  0271  0086               	movwf	6
  1491  0272  0187               	clrf	7
  1492  0273  0828               	movf	??_main,w
  1493  0274  0081               	movwf	1
  1494                           
  1495                           ;main.c: 357: currentAdValue -= 1000 ;
  1496  0275  30E8               	movlw	232
  1497  0276  02C1               	subwf	main@currentAdValue,f
  1498  0277  3003               	movlw	3
  1499  0278  3BC2               	subwfb	main@currentAdValue+1,f
  1500                           
  1501                           ;main.c: 358: }
  1502  0279  2A93               	goto	l1935
  1503  027A                     l1931:	
  1504                           
  1505                           ;main.c: 359: else {
  1506                           ;main.c: 360: string[i] = currentAdValue / 200 ;
  1507  027A  30C8               	movlw	200
  1508  027B  00A0               	movwf	___lwdiv@divisor
  1509  027C  3000               	movlw	0
  1510  027D  00A1               	movwf	___lwdiv@divisor+1
  1511  027E  0842               	movf	main@currentAdValue+1,w
  1512  027F  00A3               	movwf	___lwdiv@dividend+1
  1513  0280  0841               	movf	main@currentAdValue,w
  1514  0281  00A2               	movwf	___lwdiv@dividend
  1515  0282  2420               	fcall	___lwdiv
  1516  0283  0020               	movlb	0	; select bank0
  1517  0284  0820               	movf	?___lwdiv,w
  1518  0285  00A8               	movwf	??_main
  1519  0286  0843               	movf	main@i_754,w
  1520  0287  3E2A               	addlw	(low (main@string_753| 0))& (0+255)
  1521  0288  0086               	movwf	6
  1522  0289  0187               	clrf	7
  1523  028A  0828               	movf	??_main,w
  1524  028B  0081               	movwf	1
  1525                           
  1526                           ;main.c: 361: string[ i + 1 ] = '\0' ;
  1527  028C  0843               	movf	main@i_754,w
  1528  028D  3E01               	addlw	1
  1529  028E  3E2A               	addlw	(low (main@string_753| 0))& (0+255)
  1530  028F  0086               	movwf	6
  1531  0290  0187               	clrf	7
  1532  0291  0181               	clrf	1
  1533                           
  1534                           ;main.c: 362: break ;
  1535  0292  2A9B               	goto	l1939
  1536  0293                     l1935:	
  1537  0293  3001               	movlw	1
  1538  0294  00A8               	movwf	??_main
  1539  0295  0828               	movf	??_main,w
  1540  0296  07C3               	addwf	main@i_754,f
  1541  0297  3008               	movlw	8
  1542  0298  0243               	subwf	main@i_754,w
  1543  0299  1C03               	skipc
  1544  029A  2A66               	goto	l1925
  1545  029B                     l1939:	
  1546                           
  1547                           ;main.c: 363: }
  1548                           ;main.c: 365: }
  1549                           ;main.c: 366: AQM0802_SendStringClearing( ROW_SELECT_1 | 0x0 , string ) ;
  1550  029B  302A               	movlw	low main@string_753
  1551  029C  00A2               	movwf	AQM0802_SendStringClearing@stringPtr
  1552  029D  3000               	movlw	high main@string_753
  1553  029E  00A3               	movwf	AQM0802_SendStringClearing@stringPtr+1
  1554  029F  30C0               	movlw	192
  1555  02A0  23E9               	fcall	_AQM0802_SendStringClearing
  1556                           
  1557                           ;main.c: 370: }
  1558                           
  1559                           ;main.c: 367: }
  1560                           ;main.c: 368: break ;
  1561  02A1  2AAE               	goto	l196
  1562  02A2                     l1943:	
  1563  02A2  0020               	movlb	0	; select bank0
  1564  02A3  085F               	movf	_measureMode_,w
  1565                           
  1566                           ; Switch size 1, requested type "space"
  1567                           ; Number of cases is 3, Range of values is 0 to 2
  1568                           ; switch strategies available:
  1569                           ; Name         Instructions Cycles
  1570                           ; simple_byte           10     6 (average)
  1571                           ; direct_byte           12     6 (fixed)
  1572                           ; jumptable            260     6 (fixed)
  1573                           ;	Chosen strategy is simple_byte
  1574  02A4  3A00               	xorlw	0	; case 0
  1575  02A5  1903               	skipnz
  1576  02A6  2A17               	goto	l1899
  1577  02A7  3A01               	xorlw	1	; case 1
  1578  02A8  1903               	skipnz
  1579  02A9  2A17               	goto	l1899
  1580  02AA  3A03               	xorlw	3	; case 2
  1581  02AB  1903               	skipnz
  1582  02AC  2A60               	goto	l1919
  1583  02AD  2AAE               	goto	l196
  1584  02AE                     l196:	
  1585                           
  1586                           ;main.c: 372: }
  1587                           ;main.c: 375: if( (events_.sleep&&!(events_.sleep=0)) ) {
  1588  02AE  0020               	movlb	0	; select bank0
  1589  02AF  1F5C               	btfss	_events_,6
  1590  02B0  28EC               	goto	l151
  1591  02B1  135C               	bcf	_events_,6
  1592                           
  1593                           ;main.c: 376: AQM0802_ClearRow( ROW_SELECT_0 ) ;
  1594  02B2  3080               	movlw	128
  1595  02B3  249B               	fcall	_AQM0802_ClearRow
  1596                           
  1597                           ;main.c: 377: AQM0802_ClearRow( ROW_SELECT_1 ) ;
  1598  02B4  30C0               	movlw	192
  1599  02B5  249B               	fcall	_AQM0802_ClearRow
  1600                           
  1601                           ;main.c: 378: WDTCONbits.SWDTEN = 0 ;
  1602  02B6  0021               	movlb	1	; select bank1
  1603  02B7  1017               	bcf	23,0	;volatile
  1604                           
  1605                           ;main.c: 379: INTCONbits.TMR0IE = 0 ;
  1606  02B8  128B               	bcf	11,5	;volatile
  1607                           
  1608                           ;main.c: 380: INTCONbits.IOCIF = 0 ;
  1609  02B9  100B               	bcf	11,0	;volatile
  1610                           
  1611                           ;main.c: 381: INTCONbits.IOCIE = 1 ;
  1612  02BA  158B               	bsf	11,3	;volatile
  1613                           
  1614                           ;main.c: 382: sleepTimer_ = 0 ;
  1615  02BB  01F5               	clrf	_sleepTimer_
  1616  02BC  01F6               	clrf	_sleepTimer_+1
  1617                           
  1618                           ;main.c: 383: machineState_ = STATE_SLEEP ;
  1619  02BD  3004               	movlw	4
  1620  02BE  0020               	movlb	0	; select bank0
  1621  02BF  00A8               	movwf	??_main
  1622  02C0  0828               	movf	??_main,w
  1623  02C1  00DE               	movwf	_machineState_
  1624  02C2  0063               	sleep	;# 
  1625                           
  1626                           ;main.c: 385: }
  1627                           ;main.c: 387: }
  1628  02C3  28EC               	goto	l151
  1629  02C4                     __end_of_main:	
  1630                           
  1631                           	psect	text1
  1632  035C                     __ptext1:	
  1633 ;; *************** function _initialize *****************
  1634 ;; Defined at:
  1635 ;;		line 25 in file "src/pic12f1822_init.h"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;		None               void
  1642 ;; Registers used:
  1643 ;;		wreg, status,2, status,0
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1
  1649 ;;      Params:         0       0       0
  1650 ;;      Locals:         0       0       0
  1651 ;;      Temps:          0       0       0
  1652 ;;      Totals:         0       0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    1
  1656 ;; This function calls:
  1657 ;;		Nothing
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           
  1664                           ;psect for function _initialize
  1665  035C                     _initialize:	
  1666                           
  1667                           ;pic12f1822_init.h: 28: OSCCONbits.SPLLEN = 0 ;
  1668                           
  1669                           ;incstack = 0
  1670                           ; Regs used in _initialize: [wreg+status,2+status,0]
  1671  035C  0021               	movlb	1	; select bank1
  1672  035D  1399               	bcf	25,7	;volatile
  1673                           
  1674                           ;pic12f1822_init.h: 29: OSCCONbits.IRCF = 0b1011 ;
  1675  035E  0819               	movf	25,w	;volatile
  1676  035F  3987               	andlw	-121
  1677  0360  3858               	iorlw	88
  1678  0361  0099               	movwf	25	;volatile
  1679                           
  1680                           ;pic12f1822_init.h: 30: OSCCONbits.SCS = 0b10 ;
  1681  0362  0819               	movf	25,w	;volatile
  1682  0363  39FC               	andlw	-4
  1683  0364  3802               	iorlw	2
  1684  0365  0099               	movwf	25	;volatile
  1685                           
  1686                           ;pic12f1822_init.h: 33: WDTCONbits.SWDTEN = 0 ;
  1687  0366  1017               	bcf	23,0	;volatile
  1688                           
  1689                           ;pic12f1822_init.h: 34: WDTCONbits.WDTPS = 0b01011 ;
  1690  0367  0817               	movf	23,w	;volatile
  1691  0368  39C1               	andlw	-63
  1692  0369  3816               	iorlw	22
  1693  036A  0097               	movwf	23	;volatile
  1694                           
  1695                           ;pic12f1822_init.h: 37: INTCONbits.GIE = 1 ;
  1696  036B  178B               	bsf	11,7	;volatile
  1697                           
  1698                           ;pic12f1822_init.h: 38: INTCONbits.PEIE = 0 ;
  1699  036C  130B               	bcf	11,6	;volatile
  1700                           
  1701                           ;pic12f1822_init.h: 41: INTCONbits.IOCIE = 0 ;
  1702  036D  118B               	bcf	11,3	;volatile
  1703                           
  1704                           ;pic12f1822_init.h: 42: IOCANbits.IOCAN3 = 1 ;
  1705  036E  0027               	movlb	7	; select bank7
  1706  036F  1592               	bsf	18,3	;volatile
  1707                           
  1708                           ;pic12f1822_init.h: 45: OPTION_REGbits.TMR0SE = 1 ;
  1709  0370  0021               	movlb	1	; select bank1
  1710  0371  1615               	bsf	21,4	;volatile
  1711                           
  1712                           ;pic12f1822_init.h: 46: OPTION_REGbits.TMR0CS = 0 ;
  1713  0372  1295               	bcf	21,5	;volatile
  1714                           
  1715                           ;pic12f1822_init.h: 47: OPTION_REGbits.PSA = 1 ;
  1716  0373  1595               	bsf	21,3	;volatile
  1717                           
  1718                           ;pic12f1822_init.h: 48: OPTION_REGbits.PS = 0b010 ;
  1719  0374  0815               	movf	21,w	;volatile
  1720  0375  39F8               	andlw	-8
  1721  0376  3802               	iorlw	2
  1722  0377  0095               	movwf	21	;volatile
  1723                           
  1724                           ;pic12f1822_init.h: 49: TMR0 = 0x00 ;
  1725  0378  0020               	movlb	0	; select bank0
  1726  0379  0195               	clrf	21	;volatile
  1727                           
  1728                           ;pic12f1822_init.h: 50: INTCONbits.TMR0IF = 0 ;
  1729  037A  110B               	bcf	11,2	;volatile
  1730                           
  1731                           ;pic12f1822_init.h: 51: INTCONbits.TMR0IE = 0 ;
  1732  037B  128B               	bcf	11,5	;volatile
  1733                           
  1734                           ;pic12f1822_init.h: 54: T1CONbits.TMR1ON = 0 ;
  1735  037C  1018               	bcf	24,0	;volatile
  1736                           
  1737                           ;pic12f1822_init.h: 62: T2CONbits.TMR2ON = 0 ;
  1738  037D  111C               	bcf	28,2	;volatile
  1739                           
  1740                           ;pic12f1822_init.h: 63: T2CONbits.T2CKPS = 0b00 ;
  1741  037E  30FC               	movlw	-4
  1742  037F  059C               	andwf	28,f	;volatile
  1743                           
  1744                           ;pic12f1822_init.h: 64: T2CONbits.T2OUTPS = 0b1001 ;
  1745  0380  081C               	movf	28,w	;volatile
  1746  0381  3987               	andlw	-121
  1747  0382  3848               	iorlw	72
  1748  0383  009C               	movwf	28	;volatile
  1749                           
  1750                           ;pic12f1822_init.h: 65: PR2 = 249 ;
  1751  0384  30F9               	movlw	249
  1752  0385  009B               	movwf	27	;volatile
  1753                           
  1754                           ;pic12f1822_init.h: 66: TMR2 = 0x00 ;
  1755  0386  019A               	clrf	26	;volatile
  1756                           
  1757                           ;pic12f1822_init.h: 67: PIR1bits.TMR2IF = 0 ;
  1758  0387  1091               	bcf	17,1	;volatile
  1759                           
  1760                           ;pic12f1822_init.h: 68: PIE1bits.TMR2IE = 0 ;
  1761  0388  0021               	movlb	1	; select bank1
  1762  0389  1091               	bcf	17,1	;volatile
  1763                           
  1764                           ;pic12f1822_init.h: 71: SSPSTAT = 0x00 ;
  1765  038A  0024               	movlb	4	; select bank4
  1766  038B  0194               	clrf	20	;volatile
  1767                           
  1768                           ;pic12f1822_init.h: 72: SSP1CON1bits.WCOL = 0 ;
  1769  038C  1395               	bcf	21,7	;volatile
  1770                           
  1771                           ;pic12f1822_init.h: 73: SSP1CON1bits.SSPOV = 0 ;
  1772  038D  1315               	bcf	21,6	;volatile
  1773                           
  1774                           ;pic12f1822_init.h: 74: SSP1CON1bits.SSPEN = 1 ;
  1775  038E  1695               	bsf	21,5	;volatile
  1776                           
  1777                           ;pic12f1822_init.h: 75: SSP1CON1bits.SSPM = 0b1000 ;
  1778  038F  0815               	movf	21,w	;volatile
  1779  0390  39F0               	andlw	-16
  1780  0391  3808               	iorlw	8
  1781  0392  0095               	movwf	21	;volatile
  1782                           
  1783                           ;pic12f1822_init.h: 76: SSP1ADD = 0 ;
  1784  0393  0192               	clrf	18	;volatile
  1785                           
  1786                           ;pic12f1822_init.h: 79: FVRCONbits.ADFVR = 0b10 ;
  1787  0394  0022               	movlb	2	; select bank2
  1788  0395  0817               	movf	23,w	;volatile
  1789  0396  39FC               	andlw	-4
  1790  0397  3802               	iorlw	2
  1791  0398  0097               	movwf	23	;volatile
  1792                           
  1793                           ;pic12f1822_init.h: 80: FVRCONbits.FVREN = 1 ;
  1794  0399  1797               	bsf	23,7	;volatile
  1795                           
  1796                           ;pic12f1822_init.h: 82: ADCON0bits.CHS = 3 ;
  1797  039A  0021               	movlb	1	; select bank1
  1798  039B  081D               	movf	29,w	;volatile
  1799  039C  3983               	andlw	-125
  1800  039D  380C               	iorlw	12
  1801  039E  009D               	movwf	29	;volatile
  1802                           
  1803                           ;pic12f1822_init.h: 83: ADCON0bits.ADON = 1 ;
  1804  039F  141D               	bsf	29,0	;volatile
  1805                           
  1806                           ;pic12f1822_init.h: 84: ADCON1bits.ADFM = 1 ;
  1807  03A0  179E               	bsf	30,7	;volatile
  1808                           
  1809                           ;pic12f1822_init.h: 85: ADCON1bits.ADCS = 0b000 ;
  1810  03A1  308F               	movlw	-113
  1811  03A2  059E               	andwf	30,f	;volatile
  1812                           
  1813                           ;pic12f1822_init.h: 86: ADCON1bits.ADPREF = 0b11 ;
  1814  03A3  3003               	movlw	3
  1815  03A4  049E               	iorwf	30,f	;volatile
  1816                           
  1817                           ;pic12f1822_init.h: 88: ANSELA = 0b00010000 ;
  1818  03A5  3010               	movlw	16
  1819  03A6  0023               	movlb	3	; select bank3
  1820  03A7  008C               	movwf	12	;volatile
  1821                           
  1822                           ;pic12f1822_init.h: 89: TRISA = 0b00101111 | ANSELA ;
  1823  03A8  080C               	movf	12,w	;volatile
  1824  03A9  382F               	iorlw	47
  1825  03AA  0021               	movlb	1	; select bank1
  1826  03AB  008C               	movwf	12	;volatile
  1827  03AC  0008               	return
  1828  03AD                     __end_of_initialize:	
  1829                           
  1830                           	psect	text2
  1831  0420                     __ptext2:	
  1832 ;; *************** function ___lwdiv *****************
  1833 ;; Defined at:
  1834 ;;		line 6 in file "/Applications/microchip/xc8/v1.34/sources/common/lwdiv.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  divisor         2    0[BANK0 ] unsigned int 
  1837 ;;  dividend        2    2[BANK0 ] unsigned int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  quotient        2    6[BANK0 ] unsigned int 
  1840 ;;  counter         1    5[BANK0 ] unsigned char 
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  2    0[BANK0 ] unsigned int 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2, status,0
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1
  1850 ;;      Params:         0       4       0
  1851 ;;      Locals:         0       3       0
  1852 ;;      Temps:          0       1       0
  1853 ;;      Totals:         0       8       0
  1854 ;;Total ram usage:        8 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           
  1865                           ;psect for function ___lwdiv
  1866  0420                     ___lwdiv:	
  1867                           
  1868                           ;incstack = 0
  1869                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1870  0420  0020               	movlb	0	; select bank0
  1871  0421  01A6               	clrf	___lwdiv@quotient
  1872  0422  01A7               	clrf	___lwdiv@quotient+1
  1873  0423  0820               	movf	___lwdiv@divisor,w
  1874  0424  0421               	iorwf	___lwdiv@divisor+1,w
  1875  0425  1903               	btfsc	3,2
  1876  0426  2C50               	goto	l1709
  1877  0427  01A5               	clrf	___lwdiv@counter
  1878  0428  0AA5               	incf	___lwdiv@counter,f
  1879  0429                     l1697:	
  1880  0429  1BA1               	btfsc	___lwdiv@divisor+1,7
  1881  042A  2C35               	goto	l1699
  1882  042B  3001               	movlw	1
  1883  042C                     u1395:	
  1884  042C  35A0               	lslf	___lwdiv@divisor,f
  1885  042D  0DA1               	rlf	___lwdiv@divisor+1,f
  1886  042E  0B89               	decfsz	9,f
  1887  042F  2C2C               	goto	u1395
  1888  0430  3001               	movlw	1
  1889  0431  00A4               	movwf	??___lwdiv
  1890  0432  0824               	movf	??___lwdiv,w
  1891  0433  07A5               	addwf	___lwdiv@counter,f
  1892  0434  2C29               	goto	l1697
  1893  0435                     l1699:	
  1894  0435  3001               	movlw	1
  1895  0436                     u1415:	
  1896  0436  35A6               	lslf	___lwdiv@quotient,f
  1897  0437  0DA7               	rlf	___lwdiv@quotient+1,f
  1898  0438  0B89               	decfsz	9,f
  1899  0439  2C36               	goto	u1415
  1900  043A  0821               	movf	___lwdiv@divisor+1,w
  1901  043B  0223               	subwf	___lwdiv@dividend+1,w
  1902  043C  1D03               	skipz
  1903  043D  2C40               	goto	u1425
  1904  043E  0820               	movf	___lwdiv@divisor,w
  1905  043F  0222               	subwf	___lwdiv@dividend,w
  1906  0440                     u1425:	
  1907  0440  1C03               	skipc
  1908  0441  2C47               	goto	l1705
  1909  0442  0820               	movf	___lwdiv@divisor,w
  1910  0443  02A2               	subwf	___lwdiv@dividend,f
  1911  0444  0821               	movf	___lwdiv@divisor+1,w
  1912  0445  3BA3               	subwfb	___lwdiv@dividend+1,f
  1913  0446  1426               	bsf	___lwdiv@quotient,0
  1914  0447                     l1705:	
  1915  0447  3001               	movlw	1
  1916  0448                     u1435:	
  1917  0448  36A1               	lsrf	___lwdiv@divisor+1,f
  1918  0449  0CA0               	rrf	___lwdiv@divisor,f
  1919  044A  0B89               	decfsz	9,f
  1920  044B  2C48               	goto	u1435
  1921  044C  3001               	movlw	1
  1922  044D  02A5               	subwf	___lwdiv@counter,f
  1923  044E  1D03               	btfss	3,2
  1924  044F  2C35               	goto	l1699
  1925  0450                     l1709:	
  1926  0450  0827               	movf	___lwdiv@quotient+1,w
  1927  0451  00A1               	movwf	?___lwdiv+1
  1928  0452  0826               	movf	___lwdiv@quotient,w
  1929  0453  00A0               	movwf	?___lwdiv
  1930  0454  0008               	return
  1931  0455                     __end_of___lwdiv:	
  1932                           
  1933                           	psect	text3
  1934  03E9                     __ptext3:	
  1935 ;; *************** function _AQM0802_SendStringClearing *****************
  1936 ;; Defined at:
  1937 ;;		line 72 in file "src/../../_Common/AQM0802.h"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  position        1    wreg     unsigned char 
  1940 ;;  stringPtr       2    2[BANK0 ] PTR const unsigned char 
  1941 ;;		 -> main@string_753(9), STR_12(9), STR_11(8), STR_10(8), 
  1942 ;;		 -> STR_9(4), STR_8(8), STR_7(8), ROM(2048), 
  1943 ;;		 -> STR_6(6), STR_5(8), STR_4(8), STR_3(9), 
  1944 ;;		 -> STR_2(8), STR_1(8), 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  position        1    6[BANK0 ] unsigned char 
  1947 ;;  col             1    7[BANK0 ] unsigned char 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      unsigned char 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1
  1957 ;;      Params:         0       2       0
  1958 ;;      Locals:         0       2       0
  1959 ;;      Temps:          0       2       0
  1960 ;;      Totals:         0       6       0
  1961 ;;Total ram usage:        6 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    2
  1964 ;; This function calls:
  1965 ;;		_AQM0802_SendData
  1966 ;; This function is called by:
  1967 ;;		_main
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           
  1972                           ;psect for function _AQM0802_SendStringClearing
  1973  03E9                     _AQM0802_SendStringClearing:	
  1974                           
  1975                           ;incstack = 0
  1976                           ; Regs used in _AQM0802_SendStringClearing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1977                           ;AQM0802_SendStringClearing@position stored from wreg
  1978  03E9  0020               	movlb	0	; select bank0
  1979  03EA  00A6               	movwf	AQM0802_SendStringClearing@position
  1980                           
  1981                           ;AQM0802.h: 74: Uint08_t col = 0 ;
  1982  03EB  01A7               	clrf	AQM0802_SendStringClearing@col
  1983                           
  1984                           ;AQM0802.h: 96: AQM0802_SendData( 0x00 , position & 0xF0 ) ;
  1985  03EC  0826               	movf	AQM0802_SendStringClearing@position,w
  1986  03ED  39F0               	andlw	240
  1987  03EE  00A4               	movwf	??_AQM0802_SendStringClearing
  1988  03EF  0824               	movf	??_AQM0802_SendStringClearing,w
  1989  03F0  00A0               	movwf	AQM0802_SendData@dataByte
  1990  03F1  3000               	movlw	0
  1991  03F2                     L5:	
  1992  03F2  2455               	fcall	_AQM0802_SendData
  1993  03F3                     l1663:	
  1994                           ;AQM0802.h: 98: while ( col != 16 ) {
  1995                           
  1996  03F3  3010               	movlw	16
  1997  03F4  0020               	movlb	0	; select bank0
  1998  03F5  0627               	xorwf	AQM0802_SendStringClearing@col,w
  1999  03F6  1903               	btfsc	3,2
  2000  03F7  0008               	return
  2001                           
  2002                           ;AQM0802.h: 99: if ( col++ >= ( position & 0x0F ) && ( *stringPtr ) ) {
  2003  03F8  300F               	movlw	15
  2004  03F9  0020               	movlb	0	; select bank0
  2005  03FA  0526               	andwf	AQM0802_SendStringClearing@position,w
  2006  03FB  00A4               	movwf	??_AQM0802_SendStringClearing
  2007  03FC  0827               	movf	AQM0802_SendStringClearing@col,w
  2008  03FD  0AA7               	incf	AQM0802_SendStringClearing@col,f
  2009  03FE  00A5               	movwf	??_AQM0802_SendStringClearing+1
  2010  03FF  0824               	movf	??_AQM0802_SendStringClearing,w
  2011  0400  0225               	subwf	??_AQM0802_SendStringClearing+1,w
  2012  0401  1C03               	skipc
  2013  0402  2C1A               	goto	l1661
  2014  0403  0822               	movf	AQM0802_SendStringClearing@stringPtr,w
  2015  0404  0084               	movwf	4
  2016  0405  0823               	movf	AQM0802_SendStringClearing@stringPtr+1,w
  2017  0406  0085               	movwf	5
  2018  0407  0012               	moviw fsr0++
  2019  0408  1903               	btfsc	3,2
  2020  0409  2C1A               	goto	l1661
  2021                           
  2022                           ;AQM0802.h: 100: AQM0802_SendData( 0x40 , *stringPtr ) ;
  2023  040A  0822               	movf	AQM0802_SendStringClearing@stringPtr,w
  2024  040B  0084               	movwf	4
  2025  040C  0823               	movf	AQM0802_SendStringClearing@stringPtr+1,w
  2026  040D  0085               	movwf	5
  2027  040E  0800               	movf	0,w	;code access
  2028  040F  00A4               	movwf	??_AQM0802_SendStringClearing
  2029  0410  0824               	movf	??_AQM0802_SendStringClearing,w
  2030  0411  00A0               	movwf	AQM0802_SendData@dataByte
  2031  0412  3040               	movlw	64
  2032  0413  2455               	fcall	_AQM0802_SendData
  2033                           
  2034                           ;AQM0802.h: 101: stringPtr++ ;
  2035  0414  3001               	movlw	1
  2036  0415  0020               	movlb	0	; select bank0
  2037  0416  07A2               	addwf	AQM0802_SendStringClearing@stringPtr,f
  2038  0417  3000               	movlw	0
  2039  0418  3DA3               	addwfc	AQM0802_SendStringClearing@stringPtr+1,f
  2040                           
  2041                           ;AQM0802.h: 102: }
  2042  0419  2BF3               	goto	l1663
  2043  041A                     l1661:	
  2044                           
  2045                           ;AQM0802.h: 103: else {
  2046                           ;AQM0802.h: 104: AQM0802_SendData( 0x40 , ' ' ) ;
  2047  041A  3020               	movlw	32
  2048  041B  00A4               	movwf	??_AQM0802_SendStringClearing
  2049  041C  0824               	movf	??_AQM0802_SendStringClearing,w
  2050  041D  00A0               	movwf	AQM0802_SendData@dataByte
  2051  041E  3040               	movlw	64
  2052  041F  2BF2               	goto	L5
  2053  0420                     __end_of_AQM0802_SendStringClearing:	
  2054                           ;AQM0802.h: 105: }
  2055                           ;AQM0802.h: 106: }
  2056                           ;AQM0802.h: 110: return 0x00 ;
  2057                           ;	Return value of _AQM0802_SendStringClearing is never used
  2058                           
  2059                           
  2060                           	psect	text4
  2061  047C                     __ptext4:	
  2062 ;; *************** function _AQM0802_SendString *****************
  2063 ;; Defined at:
  2064 ;;		line 41 in file "src/../../_Common/AQM0802.h"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  position        1    wreg     unsigned char 
  2067 ;;  stringPtr       1    2[BANK0 ] PTR const unsigned char 
  2068 ;;		 -> main@string(8), 
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  position        1    4[BANK0 ] unsigned char 
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      unsigned char 
  2073 ;; Registers used:
  2074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMMON   BANK0   BANK1
  2080 ;;      Params:         0       1       0
  2081 ;;      Locals:         0       1       0
  2082 ;;      Temps:          0       1       0
  2083 ;;      Totals:         0       3       0
  2084 ;;Total ram usage:        3 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    2
  2087 ;; This function calls:
  2088 ;;		_AQM0802_SendData
  2089 ;; This function is called by:
  2090 ;;		_main
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           
  2095                           ;psect for function _AQM0802_SendString
  2096  047C                     _AQM0802_SendString:	
  2097                           
  2098                           ;incstack = 0
  2099                           ; Regs used in _AQM0802_SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2100                           ;AQM0802_SendString@position stored from wreg
  2101  047C  0020               	movlb	0	; select bank0
  2102  047D  00A4               	movwf	AQM0802_SendString@position
  2103                           
  2104                           ;AQM0802.h: 57: AQM0802_SendData( 0x00 , position ) ;
  2105  047E  0824               	movf	AQM0802_SendString@position,w
  2106  047F  00A3               	movwf	??_AQM0802_SendString
  2107  0480  0823               	movf	??_AQM0802_SendString,w
  2108  0481  00A0               	movwf	AQM0802_SendData@dataByte
  2109  0482  3000               	movlw	0
  2110  0483  2455               	fcall	_AQM0802_SendData
  2111  0484                     l1647:	
  2112                           ;AQM0802.h: 59: while ( *stringPtr ) {
  2113                           
  2114  0484  0020               	movlb	0	; select bank0
  2115  0485  0822               	movf	AQM0802_SendString@stringPtr,w
  2116  0486  0086               	movwf	6
  2117  0487  0187               	clrf	7
  2118  0488  0801               	movf	1,w
  2119  0489  1903               	btfsc	3,2
  2120  048A  0008               	return
  2121                           
  2122                           ;AQM0802.h: 60: AQM0802_SendData( 0x40 , *stringPtr ) ;
  2123  048B  0020               	movlb	0	; select bank0
  2124  048C  0822               	movf	AQM0802_SendString@stringPtr,w
  2125  048D  0086               	movwf	6
  2126  048E  0187               	clrf	7
  2127  048F  0801               	movf	1,w
  2128  0490  00A3               	movwf	??_AQM0802_SendString
  2129  0491  0823               	movf	??_AQM0802_SendString,w
  2130  0492  00A0               	movwf	AQM0802_SendData@dataByte
  2131  0493  3040               	movlw	64
  2132  0494  2455               	fcall	_AQM0802_SendData
  2133                           
  2134                           ;AQM0802.h: 61: stringPtr++ ;
  2135  0495  3001               	movlw	1
  2136  0496  0020               	movlb	0	; select bank0
  2137  0497  00A3               	movwf	??_AQM0802_SendString
  2138  0498  0823               	movf	??_AQM0802_SendString,w
  2139  0499  07A2               	addwf	AQM0802_SendString@stringPtr,f
  2140  049A  2C84               	goto	l1647
  2141  049B                     __end_of_AQM0802_SendString:	
  2142                           ;AQM0802.h: 62: }
  2143                           ;AQM0802.h: 66: return 0x00 ;
  2144                           ;	Return value of _AQM0802_SendString is never used
  2145                           
  2146                           
  2147                           	psect	text5
  2148  04C8                     __ptext5:	
  2149 ;; *************** function _AQM0802_SendCharacter *****************
  2150 ;; Defined at:
  2151 ;;		line 115 in file "src/../../_Common/AQM0802.h"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  position        1    wreg     unsigned char 
  2154 ;;  character       1    2[BANK0 ] unsigned char 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  position        1    4[BANK0 ] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      unsigned char 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0, pclath, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMMON   BANK0   BANK1
  2166 ;;      Params:         0       1       0
  2167 ;;      Locals:         0       1       0
  2168 ;;      Temps:          0       1       0
  2169 ;;      Totals:         0       3       0
  2170 ;;Total ram usage:        3 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    2
  2173 ;; This function calls:
  2174 ;;		_AQM0802_SendData
  2175 ;; This function is called by:
  2176 ;;		_main
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           
  2181                           ;psect for function _AQM0802_SendCharacter
  2182  04C8                     _AQM0802_SendCharacter:	
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in _AQM0802_SendCharacter: [wreg+status,2+status,0+pclath+cstack]
  2186                           ;AQM0802_SendCharacter@position stored from wreg
  2187  04C8  0020               	movlb	0	; select bank0
  2188  04C9  00A4               	movwf	AQM0802_SendCharacter@position
  2189                           
  2190                           ;AQM0802.h: 127: AQM0802_SendData( 0x00 , position ) ;
  2191  04CA  0824               	movf	AQM0802_SendCharacter@position,w
  2192  04CB  00A3               	movwf	??_AQM0802_SendCharacter
  2193  04CC  0823               	movf	??_AQM0802_SendCharacter,w
  2194  04CD  00A0               	movwf	AQM0802_SendData@dataByte
  2195  04CE  3000               	movlw	0
  2196  04CF  2455               	fcall	_AQM0802_SendData
  2197                           
  2198                           ;AQM0802.h: 128: AQM0802_SendData( 0x40 , character ) ;
  2199  04D0  0020               	movlb	0	; select bank0
  2200  04D1  0822               	movf	AQM0802_SendCharacter@character,w
  2201  04D2  00A3               	movwf	??_AQM0802_SendCharacter
  2202  04D3  0823               	movf	??_AQM0802_SendCharacter,w
  2203  04D4  00A0               	movwf	AQM0802_SendData@dataByte
  2204  04D5  3040               	movlw	64
  2205  04D6  2455               	fcall	_AQM0802_SendData
  2206  04D7  0008               	return
  2207  04D8                     __end_of_AQM0802_SendCharacter:	
  2208                           ;AQM0802.h: 132: return 0x00 ;
  2209                           ;	Return value of _AQM0802_SendCharacter is never used
  2210                           
  2211                           
  2212                           	psect	text6
  2213  03AD                     __ptext6:	
  2214 ;; *************** function _AQM0802_Initialize *****************
  2215 ;; Defined at:
  2216 ;;		line 163 in file "src/../../_Common/AQM0802.h"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      unsigned char 
  2223 ;; Registers used:
  2224 ;;		wreg, status,2, status,0, pclath, cstack
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1
  2230 ;;      Params:         0       0       0
  2231 ;;      Locals:         0       0       0
  2232 ;;      Temps:          0       2       0
  2233 ;;      Totals:         0       2       0
  2234 ;;Total ram usage:        2 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    2
  2237 ;; This function calls:
  2238 ;;		_AQM0802_SendData
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           
  2245                           ;psect for function _AQM0802_Initialize
  2246  03AD                     _AQM0802_Initialize:	
  2247                           
  2248                           ;AQM0802.h: 176: AQM0802_SendData( 0x00 , 0x39 ) ;
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in _AQM0802_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2252  03AD  3039               	movlw	57
  2253  03AE  0020               	movlb	0	; select bank0
  2254  03AF  00A2               	movwf	??_AQM0802_Initialize
  2255  03B0  0822               	movf	??_AQM0802_Initialize,w
  2256  03B1  00A0               	movwf	AQM0802_SendData@dataByte
  2257  03B2  3000               	movlw	0
  2258  03B3  2455               	fcall	_AQM0802_SendData
  2259                           
  2260                           ;AQM0802.h: 177: AQM0802_SendData( 0x00 , 0x14 ) ;
  2261  03B4  3014               	movlw	20
  2262  03B5  0020               	movlb	0	; select bank0
  2263  03B6  00A2               	movwf	??_AQM0802_Initialize
  2264  03B7  0822               	movf	??_AQM0802_Initialize,w
  2265  03B8  00A0               	movwf	AQM0802_SendData@dataByte
  2266  03B9  3000               	movlw	0
  2267  03BA  2455               	fcall	_AQM0802_SendData
  2268                           
  2269                           ;AQM0802.h: 178: AQM0802_SendData( 0x00 , 0x70 ) ;
  2270  03BB  3070               	movlw	112
  2271  03BC  0020               	movlb	0	; select bank0
  2272  03BD  00A2               	movwf	??_AQM0802_Initialize
  2273  03BE  0822               	movf	??_AQM0802_Initialize,w
  2274  03BF  00A0               	movwf	AQM0802_SendData@dataByte
  2275  03C0  3000               	movlw	0
  2276  03C1  2455               	fcall	_AQM0802_SendData
  2277                           
  2278                           ;AQM0802.h: 179: AQM0802_SendData( 0x00 , 0x56 ) ;
  2279  03C2  3056               	movlw	86
  2280  03C3  0020               	movlb	0	; select bank0
  2281  03C4  00A2               	movwf	??_AQM0802_Initialize
  2282  03C5  0822               	movf	??_AQM0802_Initialize,w
  2283  03C6  00A0               	movwf	AQM0802_SendData@dataByte
  2284  03C7  3000               	movlw	0
  2285  03C8  2455               	fcall	_AQM0802_SendData
  2286                           
  2287                           ;AQM0802.h: 180: AQM0802_SendData( 0x00 , 0x6c ) ;
  2288  03C9  306C               	movlw	108
  2289  03CA  0020               	movlb	0	; select bank0
  2290  03CB  00A2               	movwf	??_AQM0802_Initialize
  2291  03CC  0822               	movf	??_AQM0802_Initialize,w
  2292  03CD  00A0               	movwf	AQM0802_SendData@dataByte
  2293  03CE  3000               	movlw	0
  2294  03CF  2455               	fcall	_AQM0802_SendData
  2295                           
  2296                           ;AQM0802.h: 183: _delay((unsigned long)((200)*(1000000L/4000.0))) ;
  2297  03D0  3041               	movlw	65
  2298  03D1  0020               	movlb	0	; select bank0
  2299  03D2  00A3               	movwf	??_AQM0802_Initialize+1
  2300  03D3  30EE               	movlw	238
  2301  03D4  00A2               	movwf	??_AQM0802_Initialize
  2302  03D5                     u1787:	
  2303  03D5  0BA2               	decfsz	??_AQM0802_Initialize,f
  2304  03D6  2BD5               	goto	u1787
  2305  03D7  0BA3               	decfsz	??_AQM0802_Initialize+1,f
  2306  03D8  2BD5               	goto	u1787
  2307  03D9  0000               	nop
  2308                           
  2309                           ;AQM0802.h: 189: AQM0802_SendData( 0x00 , 0x38 ) ;
  2310  03DA  3038               	movlw	56
  2311  03DB  0020               	movlb	0	; select bank0
  2312  03DC  00A2               	movwf	??_AQM0802_Initialize
  2313  03DD  0822               	movf	??_AQM0802_Initialize,w
  2314  03DE  00A0               	movwf	AQM0802_SendData@dataByte
  2315  03DF  3000               	movlw	0
  2316  03E0  2455               	fcall	_AQM0802_SendData
  2317                           
  2318                           ;AQM0802.h: 190: AQM0802_SendData( 0x00 , 0x0C ) ;
  2319  03E1  300C               	movlw	12
  2320  03E2  0020               	movlb	0	; select bank0
  2321  03E3  00A2               	movwf	??_AQM0802_Initialize
  2322  03E4  0822               	movf	??_AQM0802_Initialize,w
  2323  03E5  00A0               	movwf	AQM0802_SendData@dataByte
  2324  03E6  3000               	movlw	0
  2325  03E7  2455               	fcall	_AQM0802_SendData
  2326  03E8  0008               	return
  2327  03E9                     __end_of_AQM0802_Initialize:	
  2328                           ;AQM0802.h: 193: return 0x00 ;
  2329                           ;	Return value of _AQM0802_Initialize is never used
  2330                           
  2331                           
  2332                           	psect	text7
  2333  049B                     __ptext7:	
  2334 ;; *************** function _AQM0802_ClearRow *****************
  2335 ;; Defined at:
  2336 ;;		line 138 in file "src/../../_Common/AQM0802.h"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  rowSelect       1    wreg     unsigned char 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  rowSelect       1    3[BANK0 ] unsigned char 
  2341 ;;  count           1    4[BANK0 ] unsigned char 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      unsigned char 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, pclath, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1
  2351 ;;      Params:         0       0       0
  2352 ;;      Locals:         0       2       0
  2353 ;;      Temps:          0       1       0
  2354 ;;      Totals:         0       3       0
  2355 ;;Total ram usage:        3 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    2
  2358 ;; This function calls:
  2359 ;;		_AQM0802_SendData
  2360 ;; This function is called by:
  2361 ;;		_main
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           
  2366                           ;psect for function _AQM0802_ClearRow
  2367  049B                     _AQM0802_ClearRow:	
  2368                           
  2369                           ;incstack = 0
  2370                           ; Regs used in _AQM0802_ClearRow: [wreg+status,2+status,0+pclath+cstack]
  2371                           ;AQM0802_ClearRow@rowSelect stored from wreg
  2372  049B  0020               	movlb	0	; select bank0
  2373  049C  00A3               	movwf	AQM0802_ClearRow@rowSelect
  2374                           
  2375                           ;AQM0802.h: 150: AQM0802_SendData( 0x00 , rowSelect & 0xF0 ) ;
  2376  049D  0823               	movf	AQM0802_ClearRow@rowSelect,w
  2377  049E  39F0               	andlw	240
  2378  049F  00A2               	movwf	??_AQM0802_ClearRow
  2379  04A0  0822               	movf	??_AQM0802_ClearRow,w
  2380  04A1  00A0               	movwf	AQM0802_SendData@dataByte
  2381  04A2  3000               	movlw	0
  2382  04A3  2455               	fcall	_AQM0802_SendData
  2383                           
  2384                           ;AQM0802.h: 152: Uint08_t count = 0 ;
  2385  04A4  0020               	movlb	0	; select bank0
  2386  04A5  01A4               	clrf	AQM0802_ClearRow@count
  2387  04A6                     l1675:	
  2388                           ;AQM0802.h: 153: while ( count++ != 16 )
  2389                           
  2390  04A6  3001               	movlw	1
  2391  04A7  0020               	movlb	0	; select bank0
  2392  04A8  00A2               	movwf	??_AQM0802_ClearRow
  2393  04A9  0822               	movf	??_AQM0802_ClearRow,w
  2394  04AA  07A4               	addwf	AQM0802_ClearRow@count,f
  2395  04AB  3011               	movlw	17
  2396  04AC  0624               	xorwf	AQM0802_ClearRow@count,w
  2397  04AD  1903               	btfsc	3,2
  2398  04AE  0008               	return
  2399                           
  2400                           ;AQM0802.h: 154: AQM0802_SendData( 0x40 , ' ' ) ;
  2401  04AF  3020               	movlw	32
  2402  04B0  00A2               	movwf	??_AQM0802_ClearRow
  2403  04B1  0822               	movf	??_AQM0802_ClearRow,w
  2404  04B2  00A0               	movwf	AQM0802_SendData@dataByte
  2405  04B3  3040               	movlw	64
  2406  04B4  2455               	fcall	_AQM0802_SendData
  2407  04B5  2CA6               	goto	l1675
  2408  04B6                     __end_of_AQM0802_ClearRow:	
  2409                           ;AQM0802.h: 158: return 0x00 ;
  2410                           ;	Return value of _AQM0802_ClearRow is never used
  2411                           
  2412                           
  2413                           	psect	text8
  2414  0455                     __ptext8:	
  2415 ;; *************** function _AQM0802_SendData *****************
  2416 ;; Defined at:
  2417 ;;		line 239 in file "src/../../_Common/AQM0802.h"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  controlByte     1    wreg     unsigned char 
  2420 ;;  dataByte        1    0[BANK0 ] unsigned char 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  controlByte     1    1[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      unsigned char 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1
  2432 ;;      Params:         0       1       0
  2433 ;;      Locals:         0       1       0
  2434 ;;      Temps:          0       0       0
  2435 ;;      Totals:         0       2       0
  2436 ;;Total ram usage:        2 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    1
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_AQM0802_SendString
  2443 ;;		_AQM0802_SendStringClearing
  2444 ;;		_AQM0802_SendCharacter
  2445 ;;		_AQM0802_ClearRow
  2446 ;;		_AQM0802_Initialize
  2447 ;;		_main
  2448 ;;		_AQM0802_Clear
  2449 ;;		_AQM0802_SetCgram
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           
  2454                           ;psect for function _AQM0802_SendData
  2455  0455                     _AQM0802_SendData:	
  2456                           
  2457                           ;incstack = 0
  2458                           ; Regs used in _AQM0802_SendData: [wreg+status,2]
  2459                           ;AQM0802_SendData@controlByte stored from wreg
  2460  0455  0020               	movlb	0	; select bank0
  2461  0456  00A1               	movwf	AQM0802_SendData@controlByte
  2462  0457                     l102:	
  2463                           ;AQM0802.h: 241: while(!PIR1bits.TMR2IF); ;
  2464                           
  2465  0457  1C91               	btfss	17,1	;volatile
  2466  0458  2C57               	goto	l102
  2467                           
  2468                           ;AQM0802.h: 243: SSP1CON2bits.SEN=1;while(SSP1CON2bits.SEN); ;
  2469  0459  0024               	movlb	4	; select bank4
  2470  045A  1416               	bsf	22,0	;volatile
  2471  045B                     l105:	
  2472  045B  1816               	btfsc	22,0	;volatile
  2473  045C  2C5B               	goto	l105
  2474                           
  2475                           ;AQM0802.h: 244: PIR1bits.SSP1IF=0; ;
  2476  045D  0020               	movlb	0	; select bank0
  2477  045E  1191               	bcf	17,3	;volatile
  2478                           
  2479                           ;AQM0802.h: 274: SSP1BUF=0x7c; ;
  2480  045F  307C               	movlw	124
  2481  0460  0024               	movlb	4	; select bank4
  2482  0461  0091               	movwf	17	;volatile
  2483  0462                     l108:	
  2484                           ;AQM0802.h: 275: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  2485                           
  2486  0462  0020               	movlb	0	; select bank0
  2487  0463  1D91               	btfss	17,3	;volatile
  2488  0464  2C62               	goto	l108
  2489  0465  1191               	bcf	17,3	;volatile
  2490                           
  2491                           ;AQM0802.h: 278: SSP1BUF=controlByte; ;
  2492  0466  0821               	movf	AQM0802_SendData@controlByte,w
  2493  0467  0024               	movlb	4	; select bank4
  2494  0468  0091               	movwf	17	;volatile
  2495  0469                     l111:	
  2496                           ;AQM0802.h: 279: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  2497                           
  2498  0469  0020               	movlb	0	; select bank0
  2499  046A  1D91               	btfss	17,3	;volatile
  2500  046B  2C69               	goto	l111
  2501  046C  1191               	bcf	17,3	;volatile
  2502                           
  2503                           ;AQM0802.h: 282: SSP1BUF=dataByte; ;
  2504  046D  0820               	movf	AQM0802_SendData@dataByte,w
  2505  046E  0024               	movlb	4	; select bank4
  2506  046F  0091               	movwf	17	;volatile
  2507  0470                     l114:	
  2508                           ;AQM0802.h: 283: while(!PIR1bits.SSP1IF);PIR1bits.SSP1IF=0; ;
  2509                           
  2510  0470  0020               	movlb	0	; select bank0
  2511  0471  1D91               	btfss	17,3	;volatile
  2512  0472  2C70               	goto	l114
  2513  0473  1191               	bcf	17,3	;volatile
  2514                           
  2515                           ;AQM0802.h: 287: SSP1CON2bits.PEN=1;while(SSP1CON2bits.PEN); ;
  2516  0474  0024               	movlb	4	; select bank4
  2517  0475  1516               	bsf	22,2	;volatile
  2518  0476                     l117:	
  2519  0476  1916               	btfsc	22,2	;volatile
  2520  0477  2C76               	goto	l117
  2521                           
  2522                           ;AQM0802.h: 288: TMR2=0x00;PIR1bits.TMR2IF=0; ;
  2523  0478  0020               	movlb	0	; select bank0
  2524  0479  019A               	clrf	26	;volatile
  2525  047A  1091               	bcf	17,1	;volatile
  2526  047B  0008               	return
  2527  047C                     __end_of_AQM0802_SendData:	
  2528                           ;AQM0802.h: 293: return 0x00 ;
  2529                           ;	Return value of _AQM0802_SendData is never used
  2530                           
  2531                           
  2532                           	psect	intentry
  2533  0004                     __pintentry:	
  2534 ;; *************** function __ *****************
  2535 ;; Defined at:
  2536 ;;		line 395 in file "src/main.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  adValue         2    3[COMMON] unsigned int 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;		None               void
  2543 ;; Registers used:
  2544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMMON   BANK0   BANK1
  2550 ;;      Params:         0       0       0
  2551 ;;      Locals:         2       0       0
  2552 ;;      Temps:          3       0       0
  2553 ;;      Totals:         5       0       0
  2554 ;;Total ram usage:        5 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		Interrupt level 1
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563  0004                     __:	
  2564                           
  2565                           ;incstack = 0
  2566                           ; Regs used in __: [wreg+fsr1l+fsr1h+status,2+status,0]
  2567  0004  3180               	pagesel	$
  2568  0005  0020               	movlb	0	; select bank0
  2569  0006  087F               	movf	127,w
  2570  0007  00F2               	movwf	??__+2
  2571                           
  2572                           ;main.c: 397: if( IOCAFbits.IOCAF3 ) {
  2573  0008  0027               	movlb	7	; select bank7
  2574  0009  1D93               	btfss	19,3	;volatile
  2575  000A  2811               	goto	i1l222
  2576                           
  2577                           ;main.c: 398: IOCAFbits.IOCAF3 = 0 ;
  2578  000B  1193               	bcf	19,3	;volatile
  2579                           
  2580                           ;main.c: 399: WDTCONbits.SWDTEN = 1 ;
  2581  000C  0021               	movlb	1	; select bank1
  2582  000D  1417               	bsf	23,0	;volatile
  2583                           
  2584                           ;main.c: 400: INTCONbits.TMR0IF = 0 ;
  2585  000E  110B               	bcf	11,2	;volatile
  2586                           
  2587                           ;main.c: 401: INTCONbits.TMR0IE = 1 ;
  2588  000F  168B               	bsf	11,5	;volatile
  2589                           
  2590                           ;main.c: 402: INTCONbits.IOCIE = 0 ;
  2591  0010  118B               	bcf	11,3	;volatile
  2592  0011                     i1l222:	
  2593                           
  2594                           ;main.c: 403: }
  2595                           ;main.c: 405: if( !INTCONbits.TMR0IF ) return ;
  2596  0011  1D0B               	btfss	11,2	;volatile
  2597  0012  2879               	goto	i1l224
  2598                           
  2599                           ;main.c: 406: INTCONbits.TMR0IF = 0 ;
  2600  0013  110B               	bcf	11,2	;volatile
  2601                           
  2602                           ;main.c: 409: static Uint08_t interruptCount = 0 ;
  2603                           ;main.c: 410: if( ! --interruptCount ) {
  2604  0014  3001               	movlw	1
  2605  0015  02F8               	subwf	__@interruptCount,f
  2606  0016  1D03               	btfss	3,2
  2607  0017  2848               	goto	i1l227
  2608                           
  2609                           ;main.c: 411: interruptCount = 10 ;
  2610  0018  300A               	movlw	10
  2611  0019  00F0               	movwf	??__
  2612  001A  0870               	movf	??__,w
  2613  001B  00F8               	movwf	__@interruptCount
  2614                           
  2615                           ;main.c: 412: portAState_.byte = (~PORTA&0b00101001); ;
  2616  001C  0020               	movlb	0	; select bank0
  2617  001D  090C               	comf	12,w	;volatile
  2618  001E  3929               	andlw	41
  2619  001F  00F0               	movwf	??__
  2620  0020  0870               	movf	??__,w
  2621  0021  00E0               	movwf	_portAState_
  2622                           
  2623                           ;main.c: 414: if( machineState_ == STATE_SLEEP ) {
  2624  0022  3004               	movlw	4
  2625  0023  065E               	xorwf	_machineState_,w
  2626  0024  1D03               	btfss	3,2
  2627  0025  2837               	goto	i1l1597
  2628                           
  2629                           ;main.c: 415: if( portAState_.menu ) {
  2630  0026  1DE0               	btfss	_portAState_,3
  2631  0027  2847               	goto	i1l1603
  2632                           
  2633                           ;main.c: 416: if( ++sleepTimer_ == 100 ) {
  2634  0028  3001               	movlw	1
  2635  0029  07F5               	addwf	_sleepTimer_,f
  2636  002A  3000               	movlw	0
  2637  002B  3DF6               	addwfc	_sleepTimer_+1,f
  2638  002C  3064               	movlw	100
  2639  002D  0675               	xorwf	_sleepTimer_,w
  2640  002E  0476               	iorwf	_sleepTimer_+1,w
  2641  002F  1D03               	btfss	3,2
  2642  0030  2848               	goto	i1l227
  2643                           
  2644                           ;main.c: 417: sleepTimer_ = 0 ;
  2645  0031  01F5               	clrf	_sleepTimer_
  2646  0032  01F6               	clrf	_sleepTimer_+1
  2647                           
  2648                           ;main.c: 418: machineState_ = STATE_MEASURE ;
  2649  0033  01DE               	clrf	_machineState_
  2650  0034  0ADE               	incf	_machineState_,f
  2651                           
  2652                           ;main.c: 419: events_.changeMessage=1 ;
  2653  0035  16DC               	bsf	_events_,5
  2654                           
  2655                           ;main.c: 420: }
  2656                           ;main.c: 421: }
  2657  0036  2848               	goto	i1l227
  2658  0037                     i1l1597:	
  2659                           ;main.c: 424: }
  2660                           ;main.c: 425: }
  2661                           
  2662                           ;main.c: 422: else {
  2663                           ;main.c: 423: events_.sleep=1 ;
  2664                           
  2665                           
  2666                           ;main.c: 426: else {
  2667                           ;main.c: 427: if( portAState_.byte ) {
  2668  0037  0860               	movf	_portAState_,w
  2669  0038  1903               	btfsc	3,2
  2670  0039  283D               	goto	i1l1601
  2671                           
  2672                           ;main.c: 428: sleepTimer_ = 0 ;
  2673  003A  01F5               	clrf	_sleepTimer_
  2674  003B  01F6               	clrf	_sleepTimer_+1
  2675                           
  2676                           ;main.c: 429: }
  2677  003C  2848               	goto	i1l227
  2678  003D                     i1l1601:	
  2679                           
  2680                           ;main.c: 430: else if( ++sleepTimer_ == 60 * 100 )
  2681  003D  3001               	movlw	1
  2682  003E  07F5               	addwf	_sleepTimer_,f
  2683  003F  3000               	movlw	0
  2684  0040  3DF6               	addwfc	_sleepTimer_+1,f
  2685  0041  3070               	movlw	112
  2686  0042  0675               	xorwf	_sleepTimer_,w
  2687  0043  3017               	movlw	23
  2688  0044  1903               	skipnz
  2689  0045  0676               	xorwf	_sleepTimer_+1,w
  2690  0046  1903               	btfsc	3,2
  2691  0047                     i1l1603:	
  2692                           
  2693                           ;main.c: 431: events_.sleep=1 ;
  2694  0047  175C               	bsf	_events_,6
  2695  0048                     i1l227:	
  2696                           
  2697                           ;main.c: 433: }
  2698                           ;main.c: 435: }
  2699                           ;main.c: 438: if( !ADCON0bits.GO ) {
  2700  0048  0021               	movlb	1	; select bank1
  2701  0049  189D               	btfsc	29,1	;volatile
  2702  004A  2875               	goto	i1l1623
  2703                           
  2704                           ;main.c: 440: static Uint08_t bufferPostiion = 0 ;
  2705                           ;main.c: 441: static ADValue_t adBuffer[ 16 ] ;
  2706                           ;main.c: 442: ADValue_t adValue = ( ( ( (Uint16_t)ADRESH ) << 8 ) | ADRESL ) ;
  2707  004B  081C               	movf	28,w	;volatile
  2708  004C  00F4               	movwf	__@adValue+1
  2709  004D  081B               	movf	27,w	;volatile
  2710  004E  00F3               	movwf	__@adValue
  2711                           
  2712                           ;main.c: 443: ADCON0bits.GO = 1 ;
  2713  004F  149D               	bsf	29,1	;volatile
  2714                           
  2715                           ;main.c: 445: if( !isHold_ ) {
  2716  0050  0020               	movlb	0	; select bank0
  2717  0051  085D               	movf	_isHold_,w
  2718  0052  1D03               	btfss	3,2
  2719  0053  2874               	goto	i1l1621
  2720                           
  2721                           ;main.c: 446: sumOfBuffer_ -= adBuffer[ bufferPostiion ] ;
  2722  0054  3577               	lslf	__@bufferPostiion,w
  2723  0055  3EA0               	addlw	(low (__@adBuffer| 0))& (0+255)
  2724  0056  0086               	movwf	6
  2725  0057  0187               	clrf	7
  2726  0058  3F40               	moviw [0]fsr1
  2727  0059  00F0               	movwf	??__
  2728  005A  3F41               	moviw [1]fsr1
  2729  005B  00F1               	movwf	??__+1
  2730  005C  0870               	movf	??__,w
  2731  005D  02DA               	subwf	_sumOfBuffer_,f
  2732  005E  0871               	movf	??__+1,w
  2733  005F  3BDB               	subwfb	_sumOfBuffer_+1,f
  2734                           
  2735                           ;main.c: 447: sumOfBuffer_ += adValue ;
  2736  0060  0873               	movf	__@adValue,w
  2737  0061  07DA               	addwf	_sumOfBuffer_,f
  2738  0062  0874               	movf	__@adValue+1,w
  2739  0063  3DDB               	addwfc	_sumOfBuffer_+1,f
  2740                           
  2741                           ;main.c: 448: adBuffer[ bufferPostiion ] = adValue ;
  2742  0064  3577               	lslf	__@bufferPostiion,w
  2743  0065  3EA0               	addlw	(low (__@adBuffer| 0))& (0+255)
  2744  0066  0086               	movwf	6
  2745  0067  0187               	clrf	7
  2746  0068  0873               	movf	__@adValue,w
  2747  0069  3FC0               	movwi [0]fsr1
  2748  006A  0874               	movf	__@adValue+1,w
  2749  006B  3FC1               	movwi [1]fsr1
  2750                           
  2751                           ;main.c: 450: if( ++bufferPostiion == 16 ) bufferPostiion = 0 ;
  2752  006C  3001               	movlw	1
  2753  006D  00F0               	movwf	??__
  2754  006E  0870               	movf	??__,w
  2755  006F  07F7               	addwf	__@bufferPostiion,f
  2756  0070  3010               	movlw	16
  2757  0071  0677               	xorwf	__@bufferPostiion,w
  2758  0072  1903               	btfsc	3,2
  2759  0073  01F7               	clrf	__@bufferPostiion
  2760  0074                     i1l1621:	
  2761                           
  2762                           ;main.c: 452: }
  2763                           ;main.c: 454: events_.changeValue=1 ;
  2764  0074  165C               	bsf	_events_,4
  2765  0075                     i1l1623:	
  2766                           
  2767                           ;main.c: 456: }
  2768                           ;main.c: 458: if( INTCONbits.TMR0IF ) events_.error=1 ;
  2769  0075  1D0B               	btfss	11,2	;volatile
  2770  0076  2879               	goto	i1l224
  2771  0077  0020               	movlb	0	; select bank0
  2772  0078  17DC               	bsf	_events_,7
  2773  0079                     i1l224:	
  2774  0079  0872               	movf	??__+2,w
  2775  007A  0020               	movlb	0	; select bank0
  2776  007B  00FF               	movwf	127
  2777  007C  0009               	retfie
  2778  007D                     __end_of__:	
  2779  007E                     btemp	set	126	;btemp
  2780  007E                     wtemp	set	126
  2781  007E                     wtemp0	set	126
  2782  0080                     wtemp1	set	128
  2783  0082                     wtemp2	set	130
  2784  0084                     wtemp3	set	132
  2785  0086                     wtemp4	set	134
  2786  0088                     wtemp5	set	136
  2787  007F                     wtemp6	set	127
  2788  007E                     ttemp	set	126
  2789  007E                     ttemp0	set	126
  2790  0081                     ttemp1	set	129
  2791  0084                     ttemp2	set	132
  2792  0087                     ttemp3	set	135
  2793  007F                     ttemp4	set	127
  2794  007E                     ltemp	set	126
  2795  007E                     ltemp0	set	126
  2796  0082                     ltemp1	set	130
  2797  0086                     ltemp2	set	134
  2798  0080                     ltemp3	set	128


Data Sizes:
    Strings     68
    Constant    24
    Data        18
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     36      66
    BANK1            32      0      32

Pointer List with Targets:

    currentMessage_	PTR const unsigned char  size(2) Largest target is 2048
		 -> ROM(CODE[2048]), STR_4(CODE[8]), STR_3(CODE[9]), STR_2(CODE[8]), 

    MESSAGE_MENU	PTR const unsigned char [5] size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[4]), STR_8(CODE[8]), 
		 -> STR_7(CODE[8]), 

    S450$ERROR	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), 

    MESSAGE.ERROR	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), 

    S450$VERSION	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[8]), 

    MESSAGE.VERSION	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[8]), 

    S450$AD_VALUE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), 

    MESSAGE.AD_VALUE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), 

    S450$BAR	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    MESSAGE.BAR	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    S450$VOLTAGE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    MESSAGE.VOLTAGE	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    S450$BOOT	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    MESSAGE.BOOT	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    AQM0802_SendStringClearing@stringPtr	PTR const unsigned char  size(2) Largest target is 2048
		 -> main@string_753(BANK0[9]), STR_12(CODE[9]), STR_11(CODE[8]), STR_10(CODE[8]), 
		 -> STR_9(CODE[4]), STR_8(CODE[8]), STR_7(CODE[8]), ROM(CODE[2048]), 
		 -> STR_6(CODE[6]), STR_5(CODE[8]), STR_4(CODE[8]), STR_3(CODE[9]), 
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    AQM0802_SendString@stringPtr	PTR const unsigned char  size(1) Largest target is 8
		 -> main@string(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under __ in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_AQM0802_SendStringClearing
    _main->___lwdiv
    _AQM0802_SendStringClearing->_AQM0802_SendData
    _AQM0802_SendString->_AQM0802_SendData
    _AQM0802_SendCharacter->_AQM0802_SendData
    _AQM0802_Initialize->_AQM0802_SendData
    _AQM0802_ClearRow->_AQM0802_SendData

Critical Paths under __ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   15229
                                              8 BANK0     28    28      0
                   _AQM0802_ClearRow
                 _AQM0802_Initialize
              _AQM0802_SendCharacter
                   _AQM0802_SendData
                 _AQM0802_SendString
         _AQM0802_SendStringClearing
                            ___lwdiv
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     531
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _AQM0802_SendStringClearing                           6     4      2    2954
                                              2 BANK0      6     4      2
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_SendString                                   3     2      1    2228
                                              2 BANK0      3     2      1
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_SendCharacter                                3     2      1    2194
                                              2 BANK0      3     2      1
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_Initialize                                   2     2      0    2042
                                              2 BANK0      2     2      0
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (1) _AQM0802_ClearRow                                     3     3      0    2107
                                              2 BANK0      3     3      0
                   _AQM0802_SendData
 ---------------------------------------------------------------------------------
 (2) _AQM0802_SendData                                     2     1      1    2042
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __                                                    5     5      0      45
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AQM0802_ClearRow
     _AQM0802_SendData
   _AQM0802_Initialize
     _AQM0802_SendData
   _AQM0802_SendCharacter
     _AQM0802_SendData
   _AQM0802_SendData
   _AQM0802_SendString
     _AQM0802_SendData
   _AQM0802_SendStringClearing
     _AQM0802_SendData
   ___lwdiv
   _initialize

 __ (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      42       6       82.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      6B       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Aug 14 13:33:27 2015

                         _ROW_SELECT 0316                                    __ 0004  
                        __CFG_CP$OFF 0000                                   ?__ 0070  
                                ??__ 0070                                  l102 0457  
                                l111 0469                                  l105 045B  
                                l114 0470                                  l108 0462  
                                l117 0476                                  l151 00EC  
                                l145 009D                                  l162 0122  
                                l155 0101                                  l172 0128  
                                l156 0100                                  l181 016D  
                                l165 0119                                  l149 00DD  
                                l166 011B                                  l158 0108  
                                l159 0107                                  l177 0140  
                                l196 02AE                                  l188 0194  
                                _PR2 001B                         __CFG_CPD$OFF 0000  
     __size_of_AQM0802_SendCharacter 0010                         __CFG_BORV$LO 0000  
                                wreg 0009        __end_of_AQM0802_SendCharacter 04D8  
                       __CFG_IESO$ON 0000          __size_of_AQM0802_Initialize 003C  
                       __CFG_LVP$OFF 0000                      __end_of_MESSAGE 030C  
                               l1705 0447                                 l1803 0110  
                               l1661 041A                                 l1709 0450  
                               l1813 011D                                 l1647 0484  
                               l1663 03F3                                 l1911 0218  
                               l1823 0134                                 l1807 0114  
                               l1913 0246                                 l1833 014D  
                               l1817 0127                                 l1761 00C6  
                               l1675 04A6                                 l1931 027A  
                               l1907 022B                                 l1851 017B  
                               l1835 015C                                 l1819 012B  
                               l1925 0266                                 l1917 0259  
                               l1909 0241                                 l1861 018D  
                               l1829 014B                                 l1765 00CE  
                               l1935 0293                                 l1919 0260  
                               l1943 02A2                                 l1839 0161  
                               l1697 0429                                 l1881 01E1  
                               l1849 017A                                 l1865 018F  
                               l1699 0435                                 l1939 029B  
                               l1875 01A3                                 l1869 0198  
                               l1879 01CE                                 l1887 01EF  
                               l1889 01FE                                 l1899 0217  
                               STR_1 032A                                 STR_2 0332  
                               STR_3 0321                                 STR_4 033A  
                               STR_5 0342                                 STR_6 0352  
                               STR_7 034A                                 STR_8 0332  
                               STR_9 0358                                 u1415 0436  
                               u1425 0440                                 u1435 0448  
                               u1700 020E                                 u1395 042C  
                               u1715 0231                                 u1787 03D5  
                               _TMR0 0015                                 _TMR2 001A  
                 main@currentAdValue 0041                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 009A  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 007D  
                               ttemp 007E                                 wtemp 007E  
                       main@barImage 003D          __size_of_AQM0802_SendString 001F  
                              ?_main 0070          AQM0802_SendData@controlByte 0021  
                         __@adBuffer 00A0                                STR_10 033A  
                              STR_11 0342                                STR_12 0318  
                    __end_of___lwdiv 0455                                i1l222 0011  
                              i1l224 0079                                i1l227 0048  
                 main@prevPortAState 0061                                _PORTA 000C  
                              _TRISA 008C                        __CFG_PWRTE$ON 0000  
                              main@i 003F                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                     __CFG_MCLRE$OFF 0000                      __initialization 007E  
                       __end_of_main 02C4                    ?_AQM0802_ClearRow 0070  
                             ??_main 0028                   ??_AQM0802_ClearRow 0022  
                     __CFG_PLLEN$OFF 0000                AQM0802_ClearRow@count 0024  
                  ?_AQM0802_SendData 0020                               _ADRESH 009C  
                             _ADRESL 009B                               _ANSELA 018C  
                             i1l1601 003D                               i1l1603 0047  
                             i1l1621 0074                               i1l1623 0075  
                 ??_AQM0802_SendData 0075                               i1l1597 0037  
                             _TMR0IE 005D                               _TMR0IF 005A  
                     __CFG_STVREN$ON 0000                            ??___lwdiv 0024  
                    _currentMessage_ 0056            AQM0802_ClearRow@rowSelect 0023  
            __end_of__initialization 0098                       __pcstackCOMMON 0070  
                       __pidataBANK0 04B6                       _OPTION_REGbits 0095  
                         __pbssBANK0 0056                           __pbssBANK1 00A0  
                         __pmaintext 009A                           __pintentry 0004  
       ??_AQM0802_SendStringClearing 0024                           __size_of__ 0079  
         __end_of_AQM0802_Initialize 03E9                              _MESSAGE 0300  
                     main@keyPressed 003E                              _SSP1ADD 0212  
                            _SSP1BUF 0211                _AQM0802_SendCharacter 04C8  
                            _SSPSTAT 0214  AQM0802_SendStringClearing@stringPtr 0022  
         __end_of_AQM0802_SendString 049B  __size_of_AQM0802_SendStringClearing 0037  
                  main@COMPARE_UNITS 030C                              ___lwdiv 0420  
                         _menuState_ 0058                           _initialize 035C  
                            __ptext1 035C                              __ptext2 0420  
                            __ptext3 03E9                              __ptext4 047C  
                            __ptext5 04C8                              __ptext6 03AD  
                            __ptext7 049B                              __ptext8 0455  
                            _isHold_ 005D                            _T1CONbits 0018  
                          _T2CONbits 001C                              _events_ 005C  
         AQM0802_SendString@position 0024                            _IOCAFbits 0393  
                          _IOCANbits 0392                              clrloop0 04D9  
          __size_of_AQM0802_ClearRow 001B                 end_of_initialization 0098  
                 __end_of_ROW_SELECT 0318                              init_ram 04DE  
                            initloop 04DF            __end_ofmain@COMPARE_UNITS 0316  
          __size_of_AQM0802_SendData 0027                         __pstringtext 0300  
                   __CFG_FOSC$INTOSC 0000                       main@string_753 002A  
             ?_AQM0802_SendCharacter 0022                           main@string 0033  
 __end_of_AQM0802_SendStringClearing 0420           _AQM0802_SendStringClearing 03E9  
                          __@adValue 0073                          ?_initialize 0070  
                       _MESSAGE_MENU 0044                  start_initialization 007E  
                       _measureMode_ 005F                          __pdataBANK0 0044  
                        __pbssCOMMON 0075                            ___latbits 0000  
                      __pcstackBANK0 0020                     _AQM0802_ClearRow 049B  
                          __end_of__ 007D                   _AQM0802_Initialize 03AD  
                __size_of_initialize 0051                     ___lwdiv@dividend 0022  
                ?_AQM0802_Initialize 0070                     _AQM0802_SendData 0455  
                           ?___lwdiv 0020                      main@compareUnit 003B  
                 _AQM0802_SendString 047C                 ??_AQM0802_Initialize 0022  
                ?_AQM0802_SendString 0022                     __CFG_WDTE$SWDTEN 0000  
                   ___lwdiv@quotient 0026                            clear_ram0 04D8  
                           _PIE1bits 0091                             _PIR1bits 0011  
               ??_AQM0802_SendString 0023                            main@F2305 004E  
                         _ADCON0bits 009D                           _ADCON1bits 009E  
                          main@i_754 0043              ??_AQM0802_SendCharacter 0023  
                          main@digit 0040       AQM0802_SendCharacter@character 0022  
                   __size_of___lwdiv 0035          ?_AQM0802_SendStringClearing 0022  
                       ??_initialize 0075                     __@bufferPostiion 0077  
                    ___lwdiv@divisor 0020                      ___lwdiv@counter 0025  
                       _SSP1CON1bits 0215                         _SSP1CON2bits 0216  
                      __size_of_main 022A                   __end_of_initialize 03AD  
           __end_of_AQM0802_ClearRow 04B6          AQM0802_SendString@stringPtr 0022  
 AQM0802_SendStringClearing@position 0026                           _INTCONbits 000B  
      AQM0802_SendStringClearing@col 0027                           _FVRCONbits 0117  
           __end_of_AQM0802_SendData 047C                             intlevel1 0000  
                  __CFG_CLKOUTEN$OFF 0000                           _OSCCONbits 0099  
                        _sleepTimer_ 0075                     __@interruptCount 0078  
           AQM0802_SendData@dataByte 0020                          _portAState_ 0060  
      AQM0802_SendCharacter@position 0024                         _sumOfBuffer_ 005A  
                         _WDTCONbits 0097                        _machineState_ 005E  
